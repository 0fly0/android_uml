class ThreadGroup
!!!447387.java!!!	ThreadGroup(inout name : String)
        this(Thread.currentThread().getThreadGroup(), name);
!!!447515.java!!!	ThreadGroup(inout parent : ThreadGroup, inout name : String)
        if (parent == null) {
            throw new NullPointerException("parent == null");
        }
        this.name = name;
        this.parent = parent;
        if (parent != null) {
            parent.add(this);
            this.setMaxPriority(parent.getMaxPriority());
            if (parent.isDaemon()) {
                this.setDaemon(true);
            }
        }
!!!447643.java!!!	ThreadGroup()
        this.name = "system";
        this.parent = null;
!!!447771.java!!!	activeCount() : int
        int count = 0;
        synchronized (threadRefs) {
            for (Thread thread : threads) {
                if (thread.isAlive()) {
                    count++;
                }
            }
        }
        synchronized (groups) {
            for (ThreadGroup group : groups) {
                count += group.activeCount();
            }
        }
        return count;
!!!447899.java!!!	activeGroupCount() : int
        int count = 0;
        synchronized (groups) {
            for (ThreadGroup group : groups) {
                // One for this group & the subgroups
                count += 1 + group.activeGroupCount();
            }
        }
        return count;
!!!448027.java!!!	add(inout g : ThreadGroup) : void
        synchronized (groups) {
            if (isDestroyed) {
                throw new IllegalThreadStateException();
            }
            groups.add(g);
        }
!!!448155.java!!!	allowThreadSuspension(inout b : boolean) : boolean
        // Does not apply to this VM, no-op
        return true;
!!!448411.java!!!	destroy() : void
        synchronized (threadRefs) {
            synchronized (groups) {
                if (isDestroyed) {
                    throw new IllegalThreadStateException(
                            "Thread group was already destroyed: "
                            + (this.name != null ? this.name : "n/a"));
                }
                if (threads.iterator().hasNext()) {
                    throw new IllegalThreadStateException(
                            "Thread group still contains threads: "
                            + (this.name != null ? this.name : "n/a"));
                }
                // Call recursively for subgroups
                while (!groups.isEmpty()) {
                    // We always get the first element - remember, when the
                    // child dies it removes itself from our collection. See
                    // below.
                    groups.get(0).destroy();
                }

                if (parent != null) {
                    parent.remove(this);
                }

                // Now that the ThreadGroup is really destroyed it can be tagged as so
                this.isDestroyed = true;
            }
        }
!!!448539.java!!!	destroyIfEmptyDaemon() : void
        // Has to be non-destroyed daemon to make sense
        synchronized (threadRefs) {
            if (isDaemon && !isDestroyed && !threads.iterator().hasNext()) {
                synchronized (groups) {
                    if (groups.isEmpty()) {
                        destroy();
                    }
                }
            }
        }
!!!448667.java!!!	enumerate(inout threads : Thread) : int
        return enumerate(threads, true);
!!!448795.java!!!	enumerate(inout threads : Thread, inout recurse : boolean) : int
        return enumerateGeneric(threads, recurse, 0, true);
!!!448923.java!!!	enumerate(inout groups : ThreadGroup) : int
        return enumerate(groups, true);
!!!449051.java!!!	enumerate(inout groups : ThreadGroup, inout recurse : boolean) : int
        return enumerateGeneric(groups, recurse, 0, false);
!!!449179.java!!!	enumerateGeneric(inout enumeration : Object, inout recurse : boolean, in enumerationIndex : int, inout enumeratingThreads : boolean) : int
        if (enumeratingThreads) {
            synchronized (threadRefs) {
                // walk the references directly so we can iterate in reverse order
                for (int i = threadRefs.size() - 1; i >= 0; --i) {
                    Thread thread = threadRefs.get(i).get();
                    if (thread != null && thread.isAlive()) {
                        if (enumerationIndex >= enumeration.length) {
                            return enumerationIndex;
                        }
                        enumeration[enumerationIndex++] = thread;
                    }
                }
            }
        } else {
            synchronized (groups) {
                for (int i = groups.size() - 1; i >= 0; --i) {
                    if (enumerationIndex >= enumeration.length) {
                        return enumerationIndex;
                    }
                    enumeration[enumerationIndex++] = groups.get(i);
                }
            }
        }

        if (recurse) {
            synchronized (groups) {
                for (ThreadGroup group : groups) {
                    if (enumerationIndex >= enumeration.length) {
                        return enumerationIndex;
                    }
                    enumerationIndex = group.enumerateGeneric(enumeration, recurse,
                            enumerationIndex, enumeratingThreads);
                }
            }
        }
        return enumerationIndex;
!!!449307.java!!!	getMaxPriority() : int
        return maxPriority;
!!!449435.java!!!	getName() : String
        return name;
!!!449563.java!!!	getParent() : ThreadGroup
        return parent;
!!!449691.java!!!	interrupt() : void
        synchronized (threadRefs) {
            for (Thread thread : threads) {
                thread.interrupt();
            }
        }
        synchronized (groups) {
            for (ThreadGroup group : groups) {
                group.interrupt();
            }
        }
!!!449819.java!!!	isDaemon() : boolean
        return isDaemon;
!!!449947.java!!!	isDestroyed() : boolean
        return isDestroyed;
!!!450075.java!!!	list() : void
        // We start in a fresh line
        System.out.println();
        list(0);
!!!450203.java!!!	list(in levels : int) : void
        indent(levels);
        System.out.println(this.toString());

        ++levels;
        synchronized (threadRefs) {
            for (Thread thread : threads) {
                indent(levels);
                System.out.println(thread);
            }
        }
        synchronized (groups) {
            for (ThreadGroup group : groups) {
                group.list(levels);
            }
        }
!!!450331.java!!!	indent(in levels : int) : void
        for (int i = 0; i < levels; i++) {
            System.out.print("    "); // 4 spaces for each level
        }
!!!450459.java!!!	parentOf(inout g : ThreadGroup) : boolean
        while (g != null) {
            if (this == g) {
                return true;
            }
            g = g.parent;
        }
        return false;
!!!450587.java!!!	remove(inout g : ThreadGroup) : void
        synchronized (groups) {
            for (Iterator<ThreadGroup> i = groups.iterator(); i.hasNext(); ) {
                ThreadGroup threadGroup = i.next();
                if (threadGroup.equals(g)) {
                    i.remove();
                    break;
                }
            }
        }
        destroyIfEmptyDaemon();
!!!450715.java!!!	resume() : void
        synchronized (threadRefs) {
            for (Thread thread : threads) {
                thread.resume();
            }
        }
        synchronized (groups) {
            for (ThreadGroup group : groups) {
                group.resume();
            }
        }
!!!450843.java!!!	setDaemon(inout isDaemon : boolean) : void
        this.isDaemon = isDaemon;
!!!450971.java!!!	setMaxPriority(in newMax : int) : void
        if (newMax <= this.maxPriority) {
            if (newMax < Thread.MIN_PRIORITY) {
                newMax = Thread.MIN_PRIORITY;
            }

            int parentPriority = parent == null ? newMax : parent.getMaxPriority();
            this.maxPriority = parentPriority <= newMax ? parentPriority : newMax;
            synchronized (groups) {
                for (ThreadGroup group : groups) {
                    group.setMaxPriority(newMax);
                }
            }
        }
!!!451099.java!!!	stop() : void
        if (stopHelper()) {
            Thread.currentThread().stop();
        }
!!!451227.java!!!	stopHelper() : boolean
        boolean stopCurrent = false;
        synchronized (threadRefs) {
            Thread current = Thread.currentThread();
            for (Thread thread : threads) {
                if (thread == current) {
                    stopCurrent = true;
                } else {
                    thread.stop();
                }
            }
        }
        synchronized (groups) {
            for (ThreadGroup group : groups) {
                stopCurrent |= group.stopHelper();
            }
        }
        return stopCurrent;
!!!451355.java!!!	suspend() : void
        if (suspendHelper()) {
            Thread.currentThread().suspend();
        }
!!!451483.java!!!	suspendHelper() : boolean
        boolean suspendCurrent = false;
        synchronized (threadRefs) {
            Thread current = Thread.currentThread();
            for (Thread thread : threads) {
                if (thread == current) {
                    suspendCurrent = true;
                } else {
                    thread.suspend();
                }
            }
        }
        synchronized (groups) {
            for (ThreadGroup group : groups) {
                suspendCurrent |= group.suspendHelper();
            }
        }
        return suspendCurrent;
!!!451611.java!!!	toString() : String
        return getClass().getName() + "[name=" + getName()
                + ",maxPriority=" + getMaxPriority() + "]";
!!!451739.java!!!	uncaughtException(inout t : Thread, inout e : Throwable) : void
        if (parent != null) {
            parent.uncaughtException(t, e);
        } else if (Thread.getDefaultUncaughtExceptionHandler() != null) {
            // TODO The spec is unclear regarding this. What do we do?
            Thread.getDefaultUncaughtExceptionHandler().uncaughtException(t, e);
        } else if (!(e instanceof ThreadDeath)) {
            // No parent group, has to be 'system' Thread Group
            e.printStackTrace(System.err);
        }
!!!451867.java!!!	addThread(inout thread : Thread) : void
        synchronized (threadRefs) {
            if (isDestroyed) {
                throw new IllegalThreadStateException();
            }
            threadRefs.add(new WeakReference<Thread>(thread));
        }
!!!451995.java!!!	removeThread(inout thread : Thread) : void
        synchronized (threadRefs) {
            for (Iterator<Thread> i = threads.iterator(); i.hasNext(); ) {
                if (i.next().equals(thread)) {
                    i.remove();
                    break;
                }
            }
        }
        destroyIfEmptyDaemon();
