class PanelBar
!!!7663116.java!!!	LOG(in fmt : String, inout  : Object...args) : void
        if (!DEBUG) return;
        Slog.v(TAG, String.format(fmt, args));
!!!7663244.java!!!	go(in state : int) : void
        if (DEBUG) LOG("go state: %d -> %d", mState, state);
        mState = state;
!!!7663372.java!!!	PanelBar(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
!!!7663500.java!!!	onFinishInflate() : void
        super.onFinishInflate();
!!!7663628.java!!!	addPanel(inout pv : PanelView) : void
        mPanels.add(pv);
        pv.setBar(this);
!!!7663756.java!!!	setPanelHolder(inout ph : PanelHolder) : void
        if (ph == null) {
            Slog.e(TAG, "setPanelHolder: null PanelHolder", new Throwable());
            return;
        }
        ph.setBar(this);
        mPanelHolder = ph;
        final int N = ph.getChildCount();
        for (int i=0; i<N; i++) {
            final View v = ph.getChildAt(i);
            if (v != null && v instanceof PanelView) {
                addPanel((PanelView) v);
            }
        }
!!!7663884.java!!!	getBarHeight() : float
        return getMeasuredHeight();
!!!7664012.java!!!	selectPanelForTouch(inout touch : MotionEvent) : PanelView
        final int N = mPanels.size();
        return mPanels.get((int)(N * touch.getX() / getMeasuredWidth()));
!!!7664140.java!!!	panelsEnabled() : boolean
        return true;
!!!7664268.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        // Allow subclasses to implement enable/disable semantics
        if (!panelsEnabled()) return false;

        // figure out which panel needs to be talked to here
        if (event.getAction() == MotionEvent.ACTION_DOWN) {
            final PanelView panel = selectPanelForTouch(event);
            if (panel == null) {
                // panel is not there, so we'll eat the gesture
                if (DEBUG) LOG("PanelBar.onTouch: no panel for x=%d, bailing", event.getX());
                mTouchingPanel = null;
                return true;
            }
            boolean enabled = panel.isEnabled();
            if (DEBUG) LOG("PanelBar.onTouch: state=%d ACTION_DOWN: panel %s %s", mState, panel,
                    (enabled ? "" : " (disabled)"));
            if (!enabled) {
                // panel is disabled, so we'll eat the gesture
                mTouchingPanel = null;
                return true;
            }
            startOpeningPanel(panel);
        }
        final boolean result = mTouchingPanel != null
                ? mTouchingPanel.onTouchEvent(event)
                : true;
        return result;
!!!7664396.java!!!	startOpeningPanel(inout panel : PanelView) : void
        if (DEBUG) LOG("startOpeningPanel: " + panel);
        mTouchingPanel = panel;
        mPanelHolder.setSelectedPanel(mTouchingPanel);
        for (PanelView pv : mPanels) {
            if (pv != panel) {
                pv.collapse();
            }
        }
!!!7664524.java!!!	panelExpansionChanged(inout panel : PanelView, in frac : float) : void
        boolean fullyClosed = true;
        PanelView fullyOpenedPanel = null;
        if (DEBUG) LOG("panelExpansionChanged: start state=%d panel=%s", mState, panel.getName());
        mPanelExpandedFractionSum = 0f;
        for (PanelView pv : mPanels) {
            final boolean visible = pv.getVisibility() == View.VISIBLE;
            // adjust any other panels that may be partially visible
            if (pv.getExpandedHeight() > 0f) {
                if (mState == STATE_CLOSED) {
                    go(STATE_OPENING);
                    onPanelPeeked();
                }
                fullyClosed = false;
                final float thisFrac = pv.getExpandedFraction();
                mPanelExpandedFractionSum += (visible ? thisFrac : 0);
                if (DEBUG) LOG("panelExpansionChanged:  -> %s: f=%.1f", pv.getName(), thisFrac);
                if (panel == pv) {
                    if (thisFrac == 1f) fullyOpenedPanel = panel;
                }
            }
            if (pv.getExpandedHeight() > 0f) {
                if (!visible) pv.setVisibility(View.VISIBLE);
            } else {
                if (visible) pv.setVisibility(View.GONE);
            }
        }
        mPanelExpandedFractionSum /= mPanels.size();
        if (fullyOpenedPanel != null && !mTracking) {
            go(STATE_OPEN);
            onPanelFullyOpened(fullyOpenedPanel);
        } else if (fullyClosed && !mTracking && mState != STATE_CLOSED) {
            go(STATE_CLOSED);
            onAllPanelsCollapsed();
        }

        if (DEBUG) LOG("panelExpansionChanged: end state=%d [%s%s ]", mState,
                (fullyOpenedPanel!=null)?" fullyOpened":"", fullyClosed?" fullyClosed":"");
!!!7664652.java!!!	collapseAllPanels(inout animate : boolean) : void
        boolean waiting = false;
        for (PanelView pv : mPanels) {
            if (animate && !pv.isFullyCollapsed()) {
                pv.collapse();
                waiting = true;
            } else {
                pv.setExpandedFraction(0); // just in case
                pv.setVisibility(View.GONE);
            }
        }
        if (DEBUG) LOG("collapseAllPanels: animate=%s waiting=%s", animate, waiting);
        if (!waiting && mState != STATE_CLOSED) {
            // it's possible that nothing animated, so we replicate the termination 
            // conditions of panelExpansionChanged here
            go(STATE_CLOSED);
            onAllPanelsCollapsed();
        }
!!!7664780.java!!!	onPanelPeeked() : void
        if (DEBUG) LOG("onPanelPeeked");
!!!7664908.java!!!	onAllPanelsCollapsed() : void
        if (DEBUG) LOG("onAllPanelsCollapsed");
!!!7665036.java!!!	onPanelFullyOpened(inout openPanel : PanelView) : void
        if (DEBUG) LOG("onPanelFullyOpened");
!!!7665164.java!!!	onTrackingStarted(inout panel : PanelView) : void
        mTracking = true;
        if (DEBUG && panel != mTouchingPanel) {
            LOG("shouldn't happen: onTrackingStarted(%s) != mTouchingPanel(%s)",
                    panel, mTouchingPanel);
        }
!!!7665292.java!!!	onTrackingStopped(inout panel : PanelView) : void
        mTracking = false;
        panelExpansionChanged(panel, panel.getExpandedFraction());
