class MtpClient
!!!7124236.java!!!	isCamera(inout device : UsbDevice) : boolean
        int count = device.getInterfaceCount();
        for (int i = 0; i < count; i++) {
            UsbInterface intf = device.getInterface(i);
            if (intf.getInterfaceClass() == UsbConstants.USB_CLASS_STILL_IMAGE &&
                    intf.getInterfaceSubclass() == 1 &&
                    intf.getInterfaceProtocol() == 1) {
                return true;
            }
        }
        return false;
!!!7124364.java!!!	MtpClient(inout context : Context)
        mContext = context;
        mUsbManager = (UsbManager)context.getSystemService(Context.USB_SERVICE);
        mPermissionIntent = PendingIntent.getBroadcast(mContext, 0, new Intent(ACTION_USB_PERMISSION), 0);
        IntentFilter filter = new IntentFilter();
        filter.addAction(UsbManager.ACTION_USB_DEVICE_ATTACHED);
        filter.addAction(UsbManager.ACTION_USB_DEVICE_DETACHED);
        filter.addAction(ACTION_USB_PERMISSION);
        context.registerReceiver(mUsbReceiver, filter);
!!!7124492.java!!!	openDeviceLocked(inout usbDevice : UsbDevice) : MtpDevice
        if (isCamera(usbDevice)) {
            if (!mUsbManager.hasPermission(usbDevice)) {
                mUsbManager.requestPermission(usbDevice, mPermissionIntent);
            } else {
                UsbDeviceConnection connection = mUsbManager.openDevice(usbDevice);
                if (connection != null) {
                    MtpDevice mtpDevice = new MtpDevice(usbDevice);
                    if (mtpDevice.open(connection)) {
                        mDevices.put(usbDevice.getDeviceName(), mtpDevice);
                        return mtpDevice;
                    }
                }
            }
        }
        return null;
!!!7124620.java!!!	close() : void
        mContext.unregisterReceiver(mUsbReceiver);
!!!7124748.java!!!	addListener(inout listener : Listener) : void
        synchronized (mDevices) {
            if (!mListeners.contains(listener)) {
                mListeners.add(listener);
            }
        }
!!!7124876.java!!!	removeListener(inout listener : Listener) : void
        synchronized (mDevices) {
            mListeners.remove(listener);
        }
!!!7125004.java!!!	getDevice(in deviceName : String) : MtpDevice
        synchronized (mDevices) {
            return mDevices.get(deviceName);
        }
!!!7125132.java!!!	getDevice(in id : int) : MtpDevice
        synchronized (mDevices) {
            return mDevices.get(UsbDevice.getDeviceName(id));
        }
!!!7125260.java!!!	getDeviceList() : MtpDevice
        synchronized (mDevices) {
            // Query the USB manager since devices might have attached
            // before we added our listener.
            for (UsbDevice usbDevice : mUsbManager.getDeviceList().values()) {
                if (mDevices.get(usbDevice.getDeviceName()) == null) {
                    openDeviceLocked(usbDevice);
                }
            }

            return new ArrayList<MtpDevice>(mDevices.values());
        }
!!!7125388.java!!!	getStorageList(in deviceName : String) : MtpStorageInfo
        MtpDevice device = getDevice(deviceName);
        if (device == null) {
            return null;
        }
        int[] storageIds = device.getStorageIds();
        if (storageIds == null) {
            return null;
        }

        int length = storageIds.length;
        ArrayList<MtpStorageInfo> storageList = new ArrayList<MtpStorageInfo>(length);
        for (int i = 0; i < length; i++) {
            MtpStorageInfo info = device.getStorageInfo(storageIds[i]);
            if (info == null) {
                Log.w(TAG, "getStorageInfo failed");
            } else {
                storageList.add(info);
            }
        }
        return storageList;
!!!7125516.java!!!	getObjectInfo(in deviceName : String, in objectHandle : int) : MtpObjectInfo
        MtpDevice device = getDevice(deviceName);
        if (device == null) {
            return null;
        }
        return device.getObjectInfo(objectHandle);
!!!7125644.java!!!	deleteObject(in deviceName : String, in objectHandle : int) : boolean
        MtpDevice device = getDevice(deviceName);
        if (device == null) {
            return false;
        }
        return device.deleteObject(objectHandle);
!!!7125772.java!!!	getObjectList(in deviceName : String, in storageId : int, in objectHandle : int) : MtpObjectInfo
        MtpDevice device = getDevice(deviceName);
        if (device == null) {
            return null;
        }
        if (objectHandle == 0) {
            // all objects in root of storage
            objectHandle = 0xFFFFFFFF;
        }
        int[] handles = device.getObjectHandles(storageId, 0, objectHandle);
        if (handles == null) {
            return null;
        }

        int length = handles.length;
        ArrayList<MtpObjectInfo> objectList = new ArrayList<MtpObjectInfo>(length);
        for (int i = 0; i < length; i++) {
            MtpObjectInfo info = device.getObjectInfo(handles[i]);
            if (info == null) {
                Log.w(TAG, "getObjectInfo failed");
            } else {
                objectList.add(info);
            }
        }
        return objectList;
!!!7125900.java!!!	getObject(in deviceName : String, in objectHandle : int, in objectSize : int) : byte
        MtpDevice device = getDevice(deviceName);
        if (device == null) {
            return null;
        }
        return device.getObject(objectHandle, objectSize);
!!!7126028.java!!!	getThumbnail(in deviceName : String, in objectHandle : int) : byte
        MtpDevice device = getDevice(deviceName);
        if (device == null) {
            return null;
        }
        return device.getThumbnail(objectHandle);
!!!7126156.java!!!	importFile(in deviceName : String, in objectHandle : int, in destPath : String) : boolean
        MtpDevice device = getDevice(deviceName);
        if (device == null) {
            return false;
        }
        return device.importFile(objectHandle, destPath);
