class ClassLoaderReflectionTest
!!!2765723.java!!!	setUp() : void
        String prefix = ClassLoaderReflectionTest.class.getName();
        ClassLoader loader = new ClassLoaderBuilder().withPrivateCopy(prefix).build();
        aClass = loader.loadClass(prefix + "$A");
        bClass = loader.loadClass(prefix + "$B");
        cClass = loader.loadClass(prefix + "$C");
        dClass = loader.loadClass(prefix + "$D");
        eClass = loader.loadClass(prefix + "$E");
        fClass = loader.loadClass(prefix + "$F");
        aListClass = loader.loadClass(prefix + "$AList");
        bStringClass = loader.loadClass(prefix + "$BString");
!!!2765851.java!!!	testLoadOneClassInTwoClassLoadersSimultaneously() : void
        assertEquals(aClass.getName(), A.class.getName());
        assertNotSame(aClass, A.class);
!!!2765979.java!!!	testField() : void
        assertEquals(aClass, aListClass.getDeclaredField("field").getType());
!!!2766107.java!!!	testGenericSuperclassParameter() : void
        assertParameterizedType(aListClass.getGenericSuperclass(), ArrayList.class, aClass);
!!!2766235.java!!!	testGenericSuperclassRawType() : void
        assertParameterizedType(bStringClass.getGenericSuperclass(), bClass, String.class);
!!!2766363.java!!!	testTypeParameters() : void
        TypeVariable<? extends Class<?>>[] typeVariables = cClass.getTypeParameters();
        assertEquals(2, typeVariables.length);
        assertTypeVariable(typeVariables[0], "K", String.class);
        assertTypeVariable(typeVariables[1], "V", aClass);
!!!2766491.java!!!	testGenericInterfaces() : void
        Type[] types = eClass.getGenericInterfaces();
        assertEquals(2, types.length);
        // TODO: this test incorrectly assumes that interfaces will be returned in source order!
        assertParameterizedType(types[0], Callable.class, aClass);
        assertParameterizedType(types[1], dClass, aClass);
!!!2766619.java!!!	testFieldGenericType() : void
        Field bString = fClass.getDeclaredField("bString");
        assertParameterizedType(bString.getGenericType(), bClass, String.class);
        Field listA = fClass.getDeclaredField("listA");
        assertParameterizedType(listA.getGenericType(), List.class, aClass);
!!!2766747.java!!!	testConstructorGenericType() : void
        Constructor<?> constructor = fClass.getDeclaredConstructors()[0];
        Type[] parameters = constructor.getGenericParameterTypes();
        assertParameterizedType(parameters[0], bClass, String.class);
        assertParameterizedType(parameters[1], List.class, aClass);
!!!2766875.java!!!	testMethodGenericReturnType() : void
        Method method = fClass.getDeclaredMethod("method", bClass, List.class);
        assertParameterizedType(method.getGenericReturnType(), bClass, String.class);
!!!2767003.java!!!	testMethodGenericParameterTypes() : void
        Method method = fClass.getDeclaredMethod("method", bClass, List.class);
        Type[] types = method.getGenericParameterTypes();
        assertEquals(2, types.length);
        assertParameterizedType(types[0], bClass, String.class);
        assertParameterizedType(types[1], List.class, aClass);
!!!2767515.java!!!	assertParameterizedType(inout actual : Type, inout raw : Type, inout  : Type...args) : void
        assertTrue(actual.toString(), actual instanceof ParameterizedType);
        ParameterizedType parameterizedType = (ParameterizedType) actual;
        assertEquals(raw, parameterizedType.getRawType());
        assertEquals(Arrays.<Type>asList(args),
                Arrays.asList(parameterizedType.getActualTypeArguments()));
!!!2767643.java!!!	assertTypeVariable(inout actual : TypeVariable, inout name : String, inout  : Type...bounds) : void
        assertEquals(name, actual.getName());
        assertEquals(Arrays.<Type>asList(bounds), Arrays.asList(actual.getBounds()));
