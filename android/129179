format 74
"charset" // _unknown::java::nio::charset
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/nio/charset/"
  java_package "java.nio.charset"
  classview 129179 "charset"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 142235 "CharsetDecoder"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A converter that can convert a byte sequence from a charset into a 16-bit
Unicode character sequence.
<p>
The input byte sequence is wrapped by a
{@link java.nio.ByteBuffer ByteBuffer} and the output character sequence is a
{@link java.nio.CharBuffer CharBuffer}. A decoder instance should be used in
the following sequence, which is referred to as a decoding operation:
<ol>
<li>invoking the {@link #reset() reset} method to reset the decoder if the
decoder has been used;</li>
<li>invoking the {@link #decode(ByteBuffer, CharBuffer, boolean) decode}
method until the additional input is not needed, the <code>endOfInput</code>
parameter must be set to false, the input buffer must be filled and the
output buffer must be flushed between invocations;</li>
<li>invoking the {@link #decode(ByteBuffer, CharBuffer, boolean) decode}
method for the last time, and then the <code>endOfInput</code> parameter
must be set to true;</li>
<li>invoking the {@link #flush(CharBuffer) flush} method to flush the
output.</li>
</ol>
<p>
The {@link #decode(ByteBuffer, CharBuffer, boolean) decode} method will
convert as many bytes as possible, and the process won't stop until the input
bytes have run out, the output buffer has been filled or some error has
happened. A {@link CoderResult CoderResult} instance will be returned to
indicate the stop reason, and the invoker can identify the result and choose
further action, which includes filling the input buffer, flushing the output
buffer or recovering from an error and trying again.
<p>
There are two common decoding errors. One is named malformed and it is
returned when the input byte sequence is illegal for the current specific
charset, the other is named unmappable character and it is returned when a
problem occurs mapping a legal input byte sequence to its Unicode character
equivalent.
<p>
Both errors can be handled in three ways, the default one is to report the
error to the invoker by a {@link CoderResult CoderResult} instance, and the
alternatives are to ignore it or to replace the erroneous input with the
replacement string. The replacement string is \"\\uFFFD\" by default and can be
changed by invoking {@link #replaceWith(String) replaceWith} method. The
invoker of this decoder can choose one way by specifying a
{@link CodingErrorAction CodingErrorAction} instance for each error type via
{@link #onMalformedInput(CodingErrorAction) onMalformedInput} method and
{@link #onUnmappableCharacter(CodingErrorAction) onUnmappableCharacter}
method.
<p>
This is an abstract class and encapsulates many common operations of the
decoding process for all charsets. Decoders for a specific charset should
extend this class and need only to implement the
{@link #decodeLoop(ByteBuffer, CharBuffer) decodeLoop} method for the basic
decoding. If a subclass maintains an internal state, it should override the
{@link #implFlush(CharBuffer) implFlush} method and the
{@link #implReset() implReset} method in addition.
<p>
This class is not thread-safe.

@see java.nio.charset.Charset
@see java.nio.charset.CharsetEncoder"
      attribute 241051 "INIT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 241179 "ONGOING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 241307 "END"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 241435 "FLUSH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 241563 "averageCharsPerByte"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 241691 "maxCharsPerByte"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 274715 // cs (<unidirectional association>)
	relation 274715 --->
	  a role_name "cs" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 274715 // cs (<unidirectional association>)
	  b parent class_ref 142491 // Charset
      end

      classrelation 274843 // malformedInputAction (<unidirectional association>)
	relation 274843 --->
	  a role_name "malformedInputAction" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 274843 // malformedInputAction (<unidirectional association>)
	  b parent class_ref 192667 // CodingErrorAction
      end

      classrelation 274971 // unmappableCharacterAction (<unidirectional association>)
	relation 274971 --->
	  a role_name "unmappableCharacterAction" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 274971 // unmappableCharacterAction (<unidirectional association>)
	  b parent class_ref 192667 // CodingErrorAction
      end

      classrelation 275099 // replacementChars (<unidirectional association>)
	relation 275099 --->
	  a role_name "replacementChars" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 275099 // replacementChars (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 241819 "status"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 789787 "CharsetDecoder"
	protected explicit_return_type ""
	nparams 3
	  param inout name "charset" type class_ref 142491 // Charset
	  param in name "averageCharsPerByte" explicit_type "float"
	  param in name "maxCharsPerByte" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>CharsetDecoder</code> using the given
<code>Charset</code>, average number and maximum number of characters
created by this decoder for one input byte, and the default replacement
string \"\\uFFFD\".

@param charset
           the <code>Charset</code> to be used by this decoder.
@param averageCharsPerByte
           the average number of characters created by this decoder for
           one input byte, must be positive.
@param maxCharsPerByte
           the maximum number of characters created by this decoder for
           one input byte, must be positive.
@throws IllegalArgumentException
            if <code>averageCharsPerByte</code> or
            <code>maxCharsPerByte</code> is negative."
      end

      operation 789915 "averageCharsPerByte"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the average number of characters created by this decoder for a
single input byte."
      end

      operation 790043 "charset"
	public return_type class_ref 142491 // Charset
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link Charset} which this decoder uses."
      end

      operation 790171 "decode"
	public return_type class_ref 133275 // CharBuffer
	nparams 1
	  param inout name "in" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 192283 // CharacterCodingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a facade method for the decoding operation.
<p>
This method decodes the remaining byte sequence of the given byte buffer
into a new character buffer. This method performs a complete decoding
operation, resets at first, then decodes, and flushes at last.
<p>
This method should not be invoked while another {@code decode} operation
is ongoing.

@param in
           the input buffer.
@return a new <code>CharBuffer</code> containing the the characters
        produced by this decoding operation. The buffer's limit will be
        the position of the last character in the buffer, and the
        position will be zero.
@throws IllegalStateException
            if another decoding operation is ongoing.
@throws MalformedInputException
            if an illegal input byte sequence for this charset was
            encountered, and the action for malformed error is
            {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}
@throws UnmappableCharacterException
            if a legal but unmappable input byte sequence for this
            charset was encountered, and the action for unmappable
            character error is
            {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}.
            Unmappable means the byte sequence at the input buffer's
            current position cannot be mapped to a Unicode character
            sequence.
@throws CharacterCodingException
            if another exception happened during the decode operation."
      end

      operation 790299 "checkCoderResult"
	private explicit_return_type "void"
	nparams 1
	  param inout name "result" type class_ref 192795 // CoderResult
	nexceptions 1
	  exception class_ref 192283 // CharacterCodingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "checks the result whether it needs to throw CharacterCodingException."
      end

      operation 790427 "allocateMore"
	private return_type class_ref 133275 // CharBuffer
	nparams 1
	  param inout name "output" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "original output is full and doesn't have remaining. allocate more space
to new CharBuffer and return it, the contents in the given buffer will be
copied into the new buffer."
      end

      operation 790555 "decode"
	public return_type class_ref 192795 // CoderResult
	nparams 3
	  param inout name "in" type class_ref 142363 // ByteBuffer
	  param inout name "out" type class_ref 133275 // CharBuffer
	  param inout name "endOfInput" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes bytes starting at the current position of the given input buffer,
and writes the equivalent character sequence into the given output buffer
from its current position.
<p>
The buffers' position will be changed with the reading and writing
operation, but their limits and marks will be kept intact.
<p>
A <code>CoderResult</code> instance will be returned according to
following rules:
<ul>
<li>{@link CoderResult#OVERFLOW CoderResult.OVERFLOW} indicates that
even though not all of the input has been processed, the buffer the
output is being written to has reached its capacity. In the event of this
code being returned this method should be called once more with an
<code>out</code> argument that has not already been filled.</li>
<li>{@link CoderResult#UNDERFLOW CoderResult.UNDERFLOW} indicates that
as many bytes as possible in the input buffer have been decoded. If there
is no further input and no remaining bytes in the input buffer then this
operation may be regarded as complete. Otherwise, this method should be
called once more with additional input.</li>
<li>A {@link CoderResult#malformedForLength(int) malformed input} result
indicates that some malformed input error has been encountered, and the
erroneous bytes start at the input buffer's position and their number can
be got by result's {@link CoderResult#length() length}. This kind of
result can be returned only if the malformed action is
{@link CodingErrorAction#REPORT CodingErrorAction.REPORT}. </li>
<li>A {@link CoderResult#unmappableForLength(int) unmappable character}
result indicates that some unmappable character error has been
encountered, and the erroneous bytes start at the input buffer's position
and their number can be got by result's
{@link CoderResult#length() length}. This kind of result can be returned
only if the unmappable character action is
{@link CodingErrorAction#REPORT CodingErrorAction.REPORT}. </li>
</ul>
<p>
The <code>endOfInput</code> parameter indicates that the invoker cannot
provide further input. This parameter is true if and only if the bytes in
current input buffer are all inputs for this decoding operation. Note
that it is common and won't cause an error if the invoker sets false and
then can't provide more input, while it may cause an error if the invoker
always sets true in several consecutive invocations. This would make the
remaining input to be treated as malformed input.
<p>
This method invokes the
{@link #decodeLoop(ByteBuffer, CharBuffer) decodeLoop} method to
implement the basic decode logic for a specific charset.

@param in
           the input buffer.
@param out
           the output buffer.
@param endOfInput
           true if all the input characters have been provided.
@return a <code>CoderResult</code> instance which indicates the reason
        of termination.
@throws IllegalStateException
            if decoding has started or no more input is needed in this
            decoding progress.
@throws CoderMalfunctionError
            if the {@link #decodeLoop(ByteBuffer, CharBuffer) decodeLoop}
            method threw an <code>BufferUnderflowException</code> or
            <code>BufferOverflowException</code>."
      end

      operation 790683 "decodeLoop"
	abstract protected return_type class_ref 192795 // CoderResult
	nparams 2
	  param inout name "in" type class_ref 142363 // ByteBuffer
	  param inout name "out" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes bytes into characters. This method is called by the
{@link #decode(ByteBuffer, CharBuffer, boolean) decode} method.
<p>
This method will implement the essential decoding operation, and it won't
stop decoding until either all the input bytes are read, the output
buffer is filled, or some exception is encountered. Then it will return a
<code>CoderResult</code> object indicating the result of current
decoding operation. The rules to construct the <code>CoderResult</code>
are the same as for
{@link #decode(ByteBuffer, CharBuffer, boolean) decode}. When an
exception is encountered in the decoding operation, most implementations
of this method will return a relevant result object to the
{@link #decode(ByteBuffer, CharBuffer, boolean) decode} method, and some
performance optimized implementation may handle the exception and
implement the error action itself.
<p>
The buffers are scanned from their current positions, and their positions
will be modified accordingly, while their marks and limits will be
intact. At most {@link ByteBuffer#remaining() in.remaining()} characters
will be read, and {@link CharBuffer#remaining() out.remaining()} bytes
will be written.
<p>
Note that some implementations may pre-scan the input buffer and return a
<code>CoderResult.UNDERFLOW</code> until it receives sufficient input.

@param in
           the input buffer.
@param out
           the output buffer.
@return a <code>CoderResult</code> instance indicating the result."
      end

      operation 790811 "detectedCharset"
	public return_type class_ref 142491 // Charset
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the charset detected by this decoder; this method is optional.
<p>
If implementing an auto-detecting charset, then this decoder returns the
detected charset from this method when it is available. The returned
charset will be the same for the rest of the decode operation.
<p>
If insufficient bytes have been read to determine the charset, an
<code>IllegalStateException</code> will be thrown.
<p>
The default implementation always throws
<code>UnsupportedOperationException</code>, so it should be overridden
by a subclass if needed.

@return the charset detected by this decoder, or null if it is not yet
        determined.
@throws UnsupportedOperationException
            if this decoder does not implement an auto-detecting charset.
@throws IllegalStateException
            if insufficient bytes have been read to determine the
            charset."
      end

      operation 790939 "flush"
	public return_type class_ref 192795 // CoderResult
	nparams 1
	  param inout name "out" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this decoder.

This method will call {@link #implFlush(CharBuffer) implFlush}. Some
decoders may need to write some characters to the output buffer when they
have read all input bytes; subclasses can override
{@link #implFlush(CharBuffer) implFlush} to perform the writing operation.
<p>
The maximum number of written bytes won't be larger than
{@link CharBuffer#remaining() out.remaining()}. If some decoder wants to
write more bytes than an output buffer's remaining space allows, then a
<code>CoderResult.OVERFLOW</code> will be returned, and this method
must be called again with a character buffer that has more remaining
space. Otherwise this method will return
<code>CoderResult.UNDERFLOW</code>, which means one decoding process
has been completed successfully.
<p>
During the flush, the output buffer's position will be changed
accordingly, while its mark and limit will be intact.

@param out
           the given output buffer.
@return <code>CoderResult.UNDERFLOW</code> or
        <code>CoderResult.OVERFLOW</code>.
@throws IllegalStateException
            if this decoder hasn't read all input bytes during one
            decoding process, which means neither after calling
            {@link #decode(ByteBuffer) decode(ByteBuffer)} nor after
            calling {@link #decode(ByteBuffer, CharBuffer, boolean)
            decode(ByteBuffer, CharBuffer, boolean)} with true as value
            for the last boolean parameter."
      end

      operation 791067 "implFlush"
	protected return_type class_ref 192795 // CoderResult
	nparams 1
	  param inout name "out" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this decoder. The default implementation does nothing and always
returns <code>CoderResult.UNDERFLOW</code>; this method can be
overridden if needed.

@param out
           the output buffer.
@return <code>CoderResult.UNDERFLOW</code> or
        <code>CoderResult.OVERFLOW</code>."
      end

      operation 791195 "implOnMalformedInput"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies that this decoder's <code>CodingErrorAction</code> specified
for malformed input error has been changed. The default implementation
does nothing; this method can be overridden if needed.

@param newAction
           the new action."
      end

      operation 791323 "implOnUnmappableCharacter"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies that this decoder's <code>CodingErrorAction</code> specified
for unmappable character error has been changed. The default
implementation does nothing; this method can be overridden if needed.

@param newAction
           the new action."
      end

      operation 791451 "implReplaceWith"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newReplacement" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies that this decoder's replacement has been changed. The default
implementation does nothing; this method can be overridden if needed.

@param newReplacement
           the new replacement string."
      end

      operation 791579 "implReset"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset this decoder's charset related state. The default implementation
does nothing; this method can be overridden if needed."
      end

      operation 791707 "isAutoDetecting"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this decoder implements an auto-detecting charset.

@return <code>true</code> if this decoder implements an auto-detecting
        charset."
      end

      operation 791835 "isCharsetDetected"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this decoder has detected a charset; this method is
optional.
<p>
If this decoder implements an auto-detecting charset, then this method
may start to return true during decoding operation to indicate that a
charset has been detected in the input bytes and that the charset can be
retrieved by invoking the {@link #detectedCharset() detectedCharset}
method.
<p>
Note that a decoder that implements an auto-detecting charset may still
succeed in decoding a portion of the given input even when it is unable
to detect the charset. For this reason users should be aware that a
<code>false</code> return value does not indicate that no decoding took
place.
<p>
The default implementation always throws an
<code>UnsupportedOperationException</code>; it should be overridden by
a subclass if needed.

@return <code>true</code> if this decoder has detected a charset.
@throws UnsupportedOperationException
            if this decoder doesn't implement an auto-detecting charset."
      end

      operation 791963 "malformedInputAction"
	public return_type class_ref 192667 // CodingErrorAction
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this decoder's <code>CodingErrorAction</code> when malformed input
occurred during the decoding process."
      end

      operation 792091 "maxCharsPerByte"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of characters which can be created by this
decoder for one input byte, must be positive."
      end

      operation 792219 "onMalformedInput"
	public return_type class_ref 142235 // CharsetDecoder
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this decoder's action on malformed input errors.

This method will call the
{@link #implOnMalformedInput(CodingErrorAction) implOnMalformedInput}
method with the given new action as argument.

@param newAction
           the new action on malformed input error.
@return this decoder.
@throws IllegalArgumentException
            if {@code newAction} is {@code null}."
      end

      operation 792347 "onUnmappableCharacter"
	public return_type class_ref 142235 // CharsetDecoder
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this decoder's action on unmappable character errors.

This method will call the
{@link #implOnUnmappableCharacter(CodingErrorAction) implOnUnmappableCharacter}
method with the given new action as argument.

@param newAction
           the new action on unmappable character error.
@return this decoder.
@throws IllegalArgumentException
            if {@code newAction} is {@code null}."
      end

      operation 792475 "replacement"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the replacement string, which is never null or empty."
      end

      operation 792603 "replaceWith"
	public return_type class_ref 142235 // CharsetDecoder
	nparams 1
	  param inout name "replacement" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the new replacement string.

This method first checks the given replacement's validity, then changes
the replacement value, and at last calls the
{@link #implReplaceWith(String) implReplaceWith} method with the given
new replacement as argument.

@param replacement
           the replacement string, cannot be null or empty. Its length
           cannot be larger than {@link #maxCharsPerByte()}.
@return this decoder.
@throws IllegalArgumentException
            if the given replacement cannot satisfy the requirement
            mentioned above."
      end

      operation 792731 "reset"
	public return_type class_ref 142235 // CharsetDecoder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this decoder. This method will reset the internal status, and then
calls <code>implReset()</code> to reset any status related to the
specific charset.

@return this decoder."
      end

      operation 792859 "unmappableCharacterAction"
	public return_type class_ref 192667 // CodingErrorAction
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this decoder's <code>CodingErrorAction</code> when an unmappable
character error occurred during the decoding process."
      end
    end

    class 142491 "Charset"
      abstract visibility public 
      nactuals 1
      actual class class_ref 139675 // Comparable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A charset is a named mapping between Unicode characters and byte sequences. Every
{@code Charset} can <i>decode</i>, converting a byte sequence into a sequence of characters,
and some can also <i>encode</i>, converting a sequence of characters into a byte sequence.
Use the method {@link #canEncode} to find out whether a charset supports both.

<h4>Characters</h4>
<p>In the context of this class, <i>character</i> always refers to a Java character: a Unicode
code point in the range U+0000 to U+FFFF. (Java represents supplementary characters using surrogates.)
Not all byte sequences will represent a character, and not
all characters can necessarily be represented by a given charset. The method {@link #contains}
can be used to determine whether every character representable by one charset can also be
represented by another (meaning that a lossless transformation is possible from the contained
to the container).

<h4>Encodings</h4>
<p>There are many possible ways to represent Unicode characters as byte sequences.
See <a href=\"http://www.unicode.org/reports/tr17/\">UTR#17: Unicode Character Encoding Model</a>
for detailed discussion.

<p>The most important mappings capable of representing every character are the Unicode
Transformation Format (UTF) charsets. Of those, UTF-8 and the UTF-16 family are the most
common. UTF-8 (described in <a href=\"http://www.ietf.org/rfc/rfc3629.txt\">RFC 3629</a>)
encodes a character using 1 to 4 bytes. UTF-16 uses exactly 2 bytes per character (potentially
wasting space, but allowing efficient random access into BMP text), and UTF-32 uses
exactly 4 bytes per character (trading off even more space for efficient random access into text
that includes supplementary characters).

<p>UTF-16 and UTF-32 encode characters directly, using their code point as a two- or four-byte
integer. This means that any given UTF-16 or UTF-32 byte sequence is either big- or
little-endian. To assist decoders, Unicode includes a special <i>byte order mark</i> (BOM)
character U+FEFF used to determine the endianness of a sequence. The corresponding byte-swapped
code point U+FFFE is guaranteed never to be assigned. If a UTF-16 decoder sees
{@code 0xfe, 0xff}, for example, it knows it's reading a big-endian byte sequence, while
{@code 0xff, 0xfe}, would indicate a little-endian byte sequence.

<p>UTF-8 can contain a BOM, but since the UTF-8 encoding of a character always uses the same
byte sequence, there is no information about endianness to convey. Seeing the bytes
corresponding to the UTF-8 encoding of U+FEFF ({@code 0xef, 0xbb, 0xbf}) would only serve to
suggest that you're reading UTF-8. Note that BOMs are decoded as the U+FEFF character, and
will appear in the output character sequence. This means that a disadvantage to including a BOM
in UTF-8 is that most applications that use UTF-8 do not expect to see a BOM. (This is also a
reason to prefer UTF-8: it's one less complication to worry about.)

<p>Because a BOM indicates how the data that follows should be interpreted, a BOM should occur
as the first character in a character sequence.

<p>See the <a href=\"http://unicode.org/faq/utf_bom.html#BOM\">Byte Order Mark (BOM) FAQ</a> for
more about dealing with BOMs.

<h4>Endianness and BOM behavior</h4>

<p>The following tables show the endianness and BOM behavior of the UTF-16 variants.

<p>This table shows what the encoder writes. \"BE\" means that the byte sequence is big-endian,
\"LE\" means little-endian. \"BE BOM\" means a big-endian BOM (that is, {@code 0xfe, 0xff}).
<p><table width=\"100%\">
<tr> <th>Charset</th>  <th>Encoder writes</th>  </tr>
<tr> <td>UTF-16BE</td> <td>BE, no BOM</td>      </tr>
<tr> <td>UTF-16LE</td> <td>LE, no BOM</td>      </tr>
<tr> <td>UTF-16</td>   <td>BE, with BE BOM</td> </tr>
</table>

<p>The next table shows how each variant's decoder behaves when reading a byte sequence.
The exact meaning of \"failure\" in the table is dependent on the
{@link CodingErrorAction} supplied to {@link CharsetDecoder#malformedInputAction}, so
\"BE, failure\" means \"the byte sequence is treated as big-endian, and a little-endian BOM
triggers the malformedInputAction\".

<p>The phrase \"includes BOM\" means that the output includes the U+FEFF byte order mark character.

<p><table width=\"100%\">
<tr> <th>Charset</th>  <th>BE BOM</th>           <th>LE BOM</th>           <th>No BOM</th> </tr>
<tr> <td>UTF-16BE</td> <td>BE, includes BOM</td> <td>BE, failure</td>      <td>BE</td>     </tr>
<tr> <td>UTF-16LE</td> <td>LE, failure</td>      <td>LE, includes BOM</td> <td>LE</td>     </tr>
<tr> <td>UTF-16</td>   <td>BE</td>               <td>LE</td>               <td>BE</td>     </tr>
</table>

<h4>Charset names</h4>
<p>A charset has a canonical name, returned by {@link #name}. Most charsets will
also have one or more aliases, returned by {@link #aliases}. A charset can be looked up
by canonical name or any of its aliases using {@link #forName}.

<h4>Guaranteed-available charsets</h4>
<p>The following charsets are available on every Java implementation:
<ul>
<li>ISO-8859-1
<li>US-ASCII
<li>UTF-16
<li>UTF-16BE
<li>UTF-16LE
<li>UTF-8
</ul>
<p>All of these charsets support both decoding and encoding. The charsets whose names begin
\"UTF\" can represent all characters, as mentioned above. The \"ISO-8859-1\" and \"US-ASCII\" charsets
can only represent small subsets of these characters. Except when required to do otherwise for
compatibility, new code should use one of the UTF charsets listed above. The platform's default
charset is UTF-8. (This is in contrast to some older implementations, where the default charset
depended on the user's locale.)

<p>Most implementations will support hundreds of charsets. Use {@link #availableCharsets} or
{@link #isSupported} to see what's available. If you intend to use the charset if it's
available, just call {@link #forName} and catch the exceptions it throws if the charset isn't
available.

<p>Additional charsets can be made available by configuring one or more charset
providers through provider configuration files. Such files are always named
as \"java.nio.charset.spi.CharsetProvider\" and located in the
\"META-INF/services\" directory of one or more classpaths. The files should be
encoded in \"UTF-8\". Each line of their content specifies the class name of a
charset provider which extends {@link java.nio.charset.spi.CharsetProvider}.
A line should end with '\\r', '\\n' or '\\r\\n'. Leading and trailing whitespace
is trimmed. Blank lines, and lines (after trimming) starting with \"#\" which are
regarded as comments, are both ignored. Duplicates of names already found are also
ignored. Both the configuration files and the provider classes will be loaded
using the thread context class loader.

<p>Although class is thread-safe, the {@link CharsetDecoder} and {@link CharsetEncoder} instances
it returns are inherently stateful."
      classrelation 274075 // <realization>
	relation 274075 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 274075 // <realization>
	  b parent class_ref 139675 // Comparable
      end

      classrelation 274203 // CACHED_CHARSETS (<unidirectional association>)
	relation 274203 --->
	  a role_name "CACHED_CHARSETS" init_value " new HashMap<String, Charset>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, Charset> ${name}${value};
"
	    classrelation_ref 274203 // CACHED_CHARSETS (<unidirectional association>)
	  b parent class_ref 138651 // HashMap
      end

      classrelation 274331 // DEFAULT_CHARSET (<unidirectional association>)
	relation 274331 --->
	  a role_name "DEFAULT_CHARSET" init_value " getDefaultCharset()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 274331 // DEFAULT_CHARSET (<unidirectional association>)
	  b parent class_ref 142491 // Charset
      end

      classrelation 274459 // canonicalName (<unidirectional association>)
	relation 274459 --->
	  a role_name "canonicalName" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 274459 // canonicalName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 274587 // aliasesSet (<unidirectional association>)
	relation 274587 --->
	  a role_name "aliasesSet" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String> ${name}${value};
"
	    classrelation_ref 274587 // aliasesSet (<unidirectional association>)
	  b parent class_ref 192411 // HashSet
      end

      operation 786459 "Charset"
	protected explicit_return_type ""
	nparams 2
	  param inout name "canonicalName" type class_ref 3399692 // String
	  param inout name "aliases" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>Charset</code> object. Duplicated aliases are
ignored.

@param canonicalName
           the canonical name of the charset.
@param aliases
           an array containing all aliases of the charset. May be null.
@throws IllegalCharsetNameException
            on an illegal value being supplied for either
            <code>canonicalName</code> or for any element of
            <code>aliases</code>."
      end

      operation 786587 "checkCharsetName"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "name" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 786715 "isValidCharsetNameCharacter"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 786843 "availableCharsets"
	class_operation public return_type class_ref 192539 // SortedMap
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String, Charset> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an immutable case-insensitive map from canonical names to {@code Charset} instances.
If multiple charsets have the same canonical name, it is unspecified which is returned in
the map. This method may be slow. If you know which charset you're looking for, use
{@link #forName}.
@return an immutable case-insensitive map from canonical names to {@code Charset} instances"
      end

      operation 786971 "cacheCharset"
	class_operation private return_type class_ref 142491 // Charset
	nparams 2
	  param inout name "charsetName" type class_ref 3399692 // String
	  param inout name "cs" type class_ref 142491 // Charset
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 787099 "forName"
	class_operation public return_type class_ref 142491 // Charset
	nparams 1
	  param inout name "charsetName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@code Charset} instance for the named charset.

@param charsetName a charset name (either canonical or an alias)
@throws IllegalCharsetNameException
            if the specified charset name is illegal.
@throws UnsupportedCharsetException
            if the desired charset is not supported by this runtime."
      end

      operation 787227 "forNameUEE"
	class_operation public return_type class_ref 142491 // Charset
	nparams 1
	  param inout name "charsetName" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 134171 // UnsupportedEncodingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code forName} but only throws {@code UnsupportedEncodingException},
which is all pre-nio code claims to throw.

@hide internal use only"
      end

      operation 787355 "isSupported"
	class_operation public explicit_return_type "boolean"
	nparams 1
	  param inout name "charsetName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether the specified charset is supported by this runtime.

@param charsetName
           the name of the charset.
@return true if the specified charset is supported, otherwise false.
@throws IllegalCharsetNameException
            if the specified charset name is illegal."
      end

      operation 787483 "contains"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "charset" type class_ref 142491 // Charset
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this charset is a superset of the given charset. A charset C1 contains
charset C2 if every character representable by C2 is also representable by C1. This means
that lossless conversion is possible from C2 to C1 (but not necessarily the other way
round). It does <i>not</i> imply that the two charsets use the same byte sequences for the
characters they share.

<p>Note that this method is allowed to be conservative, and some implementations may return
false when this charset does contain the other charset. Android's implementation is precise,
and will always return true in such cases.

@param charset
           a given charset.
@return true if this charset is a super set of the given charset,
        false if it's unknown or this charset is not a superset of
        the given charset."
      end

      operation 787611 "newEncoder"
	abstract public return_type class_ref 142875 // CharsetEncoder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a new instance of an encoder for this charset.

@return a new instance of an encoder for this charset."
      end

      operation 787739 "newDecoder"
	abstract public return_type class_ref 142235 // CharsetDecoder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a new instance of a decoder for this charset.

@return a new instance of a decoder for this charset."
      end

      operation 787867 "name"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the canonical name of this charset.

@return this charset's name in canonical form."
      end

      operation 787995 "aliases"
	public return_type class_ref 129691 // Set
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<String> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the set of this charset's aliases.

@return an unmodifiable set of this charset's aliases."
      end

      operation 788123 "displayName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of this charset for the default locale.

<p>The default implementation returns the canonical name of this charset.
Subclasses may return a localized display name.

@return the name of this charset for the default locale."
      end

      operation 788251 "displayName"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "l" type class_ref 135835 // Locale
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the name of this charset for the specified locale.

<p>The default implementation returns the canonical name of this charset.
Subclasses may return a localized display name.

@param l
           a certain locale
@return the name of this charset for the specified locale"
      end

      operation 788379 "isRegistered"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this charset is known to be registered in the IANA
Charset Registry.

@return true if the charset is known to be registered, otherwise returns
        false."
      end

      operation 788507 "canEncode"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this charset supports encoding, false otherwise.

@return true if this charset supports encoding, false otherwise."
      end

      operation 788635 "encode"
	public return_type class_ref 142363 // ByteBuffer
	nparams 1
	  param inout name "buffer" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code ByteBuffer} containing the bytes encoding the characters from
{@code buffer}.
This method uses {@code CodingErrorAction.REPLACE}.

<p>Applications should generally create a {@link CharsetEncoder} using {@link #newEncoder}
for performance.

@param buffer
           the character buffer containing the content to be encoded.
@return the result of the encoding."
      end

      operation 788763 "encode"
	public return_type class_ref 142363 // ByteBuffer
	nparams 1
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code ByteBuffer} containing the bytes encoding the characters from {@code s}.
This method uses {@code CodingErrorAction.REPLACE}.

<p>Applications should generally create a {@link CharsetEncoder} using {@link #newEncoder}
for performance.

@param s the string to be encoded.
@return the result of the encoding."
      end

      operation 788891 "decode"
	public return_type class_ref 133275 // CharBuffer
	nparams 1
	  param inout name "buffer" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code CharBuffer} containing the characters decoded from {@code buffer}.
This method uses {@code CodingErrorAction.REPLACE}.

<p>Applications should generally create a {@link CharsetDecoder} using {@link #newDecoder}
for performance.

@param buffer
           the byte buffer containing the content to be decoded.
@return a character buffer containing the output of the decoding."
      end

      operation 789019 "compareTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "charset" type class_ref 142491 // Charset
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "-------------------------------------------------------------------
Methods implementing parent interface Comparable
-------------------------------------------------------------------


Compares this charset with the given charset. This comparison is
based on the case insensitive canonical names of the charsets.

@param charset
           the given object to be compared with.
@return a negative integer if less than the given object, a positive
        integer if larger than it, or 0 if equal to it."
      end

      operation 789147 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "-------------------------------------------------------------------
Methods overriding parent class Object
-------------------------------------------------------------------


Determines whether this charset equals to the given object. They are
considered to be equal if they have the same canonical name.

@param obj
           the given object to be compared with.
@return true if they have the same canonical name, otherwise false."
      end

      operation 789275 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the hash code of this charset.

@return the hash code of this charset."
      end

      operation 789403 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets a string representation of this charset. Usually this contains the
canonical name of the charset.

@return a string representation of this charset."
      end

      operation 789531 "defaultCharset"
	class_operation public return_type class_ref 142491 // Charset
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the system's default charset. This is determined during VM startup, and will not
change thereafter. On Android, the default charset is UTF-8."
      end

      operation 789659 "getDefaultCharset"
	class_operation private return_type class_ref 142491 // Charset
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 142875 "CharsetEncoder"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Transforms a sequence of 16-bit Java characters to a byte sequence in some encoding.

<p>The input character sequence is a {@link java.nio.CharBuffer CharBuffer} and the
output byte sequence is a {@link java.nio.ByteBuffer ByteBuffer}.

<p>Use {@link #encode(CharBuffer)} to encode an entire {@code CharBuffer} to a
new {@code ByteBuffer}, or {@link #encode(CharBuffer, ByteBuffer, boolean)} for more
control. When using the latter method, the entire operation proceeds as follows:
<ol>
<li>Invoke {@link #reset()} to reset the encoder if this instance has been used before.</li>
<li>Invoke {@link #encode(CharBuffer, ByteBuffer, boolean) encode} with the {@code endOfInput}
parameter set to false until additional input is not needed (as signaled by the return value).
The input buffer must be filled and the output buffer must be flushed between invocations.
<p>The {@link #encode(CharBuffer, ByteBuffer, boolean) encode} method will
convert as many characters as possible, and the process won't stop until the
input buffer has been exhausted, the output buffer has been filled, or an
error has occurred. A {@link CoderResult CoderResult} instance will be
returned to indicate the current state. The caller should fill the input buffer, flush
the output buffer, or recovering from an error and try again, accordingly.
</li>
<li>Invoke {@link #encode(CharBuffer, ByteBuffer, boolean) encode} for the last time with
{@code endOfInput} set to true.</li>
<li>Invoke {@link #flush(ByteBuffer)} to flush remaining output.</li>
</ol>

<p>There are two classes of encoding error: <i>malformed input</i>
signifies that the input character sequence is not legal, while <i>unmappable character</i>
signifies that the input is legal but cannot be mapped to a byte sequence (because the charset
cannot represent the character, for example).

<p>Errors can be handled in three ways. The default is to
{@link CodingErrorAction#REPORT report} the error to the caller. The alternatives are to
{@link CodingErrorAction#IGNORE ignore} the error or {@link CodingErrorAction#REPLACE replace}
the problematic input with the byte sequence returned by {@link #replacement}. The disposition
for each of the two kinds of error can be set independently using the {@link #onMalformedInput}
and {@link #onUnmappableCharacter} methods.

<p>The default replacement bytes depend on the charset but can be overridden using the
{@link #replaceWith} method.

<p>This class is abstract and encapsulates many common operations of the
encoding process for all charsets. Encoders for a specific charset should
extend this class and need only to implement the
{@link #encodeLoop(CharBuffer, ByteBuffer) encodeLoop} method for basic
encoding. If a subclass maintains internal state, it should also override the
{@link #implFlush(ByteBuffer) implFlush} and {@link #implReset() implReset} methods.

<p>This class is not thread-safe.

@see java.nio.charset.Charset
@see java.nio.charset.CharsetDecoder"
      attribute 243483 "READY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 243611 "ONGOING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 243739 "END"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 243867 "FLUSH"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 243995 "INIT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 275355 // cs (<unidirectional association>)
	relation 275355 --->
	  a role_name "cs" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 275355 // cs (<unidirectional association>)
	  b parent class_ref 142491 // Charset
      end

      attribute 244123 "averageBytesPerChar"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 244251 "maxBytesPerChar"
	const_attribute private explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 244379 "replacementBytes"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 244507 "status"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 244635 "finished"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " internal status indicates encode(CharBuffer) operation is finished"
      end

      classrelation 275483 // malformedInputAction (<unidirectional association>)
	relation 275483 --->
	  a role_name "malformedInputAction" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 275483 // malformedInputAction (<unidirectional association>)
	  b parent class_ref 192667 // CodingErrorAction
      end

      classrelation 275611 // unmappableCharacterAction (<unidirectional association>)
	relation 275611 --->
	  a role_name "unmappableCharacterAction" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 275611 // unmappableCharacterAction (<unidirectional association>)
	  b parent class_ref 192667 // CodingErrorAction
      end

      classrelation 275739 // decoder (<unidirectional association>)
	relation 275739 --->
	  a role_name "decoder" private
	    comment " decoder instance for this encoder's charset, used for replacement value checking
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 275739 // decoder (<unidirectional association>)
	  b parent class_ref 142235 // CharsetDecoder
      end

      operation 794779 "CharsetEncoder"
	protected explicit_return_type ""
	nparams 3
	  param inout name "cs" type class_ref 142491 // Charset
	  param in name "averageBytesPerChar" explicit_type "float"
	  param in name "maxBytesPerChar" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code CharsetEncoder} using the given parameters and
the replacement byte array {@code { (byte) '?' }}."
      end

      operation 794907 "CharsetEncoder"
	protected explicit_return_type ""
	nparams 4
	  param inout name "cs" type class_ref 142491 // Charset
	  param in name "averageBytesPerChar" explicit_type "float"
	  param in name "maxBytesPerChar" explicit_type "float"
	  param inout name "replacement" explicit_type "byte"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new <code>CharsetEncoder</code> using the given
<code>Charset</code>, replacement byte array, average number and
maximum number of bytes created by this encoder for one input character.

@param cs
           the <code>Charset</code> to be used by this encoder.
@param averageBytesPerChar
           average number of bytes created by this encoder for one single
           input character, must be positive.
@param maxBytesPerChar
           maximum number of bytes which can be created by this encoder
           for one single input character, must be positive.
@param replacement
           the replacement byte array, cannot be null or empty, its
           length cannot be larger than <code>maxBytesPerChar</code>,
           and must be a legal replacement, which can be justified by
           {@link #isLegalReplacement(byte[]) isLegalReplacement}.
@throws IllegalArgumentException
            if any parameters are invalid."
      end

      operation 795035 "CharsetEncoder"
	package explicit_return_type ""
	nparams 5
	  param inout name "cs" type class_ref 142491 // Charset
	  param in name "averageBytesPerChar" explicit_type "float"
	  param in name "maxBytesPerChar" explicit_type "float"
	  param inout name "replacement" explicit_type "byte"
	  param inout name "trusted" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 795163 "averageBytesPerChar"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the average number of bytes created by this encoder for a single
input character."
      end

      operation 795291 "canEncode"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the given character can be encoded by this encoder.
<p>
Note that this method can change the internal status of this encoder, so
it should not be called when another encoding process is ongoing,
otherwise it will throw an <code>IllegalStateException</code>.
<p>
This method can be overridden for performance improvement.

@param c
           the given encoder.
@return true if given character can be encoded by this encoder.
@throws IllegalStateException
            if another encode process is ongoing so that the current
            internal status is neither RESET or FLUSH."
      end

      operation 795419 "implCanEncode"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "cb" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " implementation of canEncode"
      end

      operation 795547 "canEncode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "sequence" type class_ref 133787 // CharSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if a given <code>CharSequence</code> can be encoded by this
encoder.

Note that this method can change the internal status of this encoder, so
it should not be called when another encode process is ongoing, otherwise
it will throw an <code>IllegalStateException</code>.

This method can be overridden for performance improvement.

@param sequence
           the given <code>CharSequence</code>.
@return true if the given <code>CharSequence</code> can be encoded by
        this encoder.
@throws IllegalStateException
            if current internal status is neither RESET or FLUSH."
      end

      operation 795675 "charset"
	public return_type class_ref 142491 // Charset
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link Charset} which this encoder uses."
      end

      operation 795803 "encode"
	public return_type class_ref 142363 // ByteBuffer
	nparams 1
	  param inout name "in" type class_ref 133275 // CharBuffer
	nexceptions 1
	  exception class_ref 192283 // CharacterCodingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This is a facade method for the encoding operation.
<p>
This method encodes the remaining character sequence of the given
character buffer into a new byte buffer. This method performs a complete
encoding operation, resets at first, then encodes, and flushes at last.
<p>
This method should not be invoked if another encode operation is ongoing.

@param in
           the input buffer.
@return a new <code>ByteBuffer</code> containing the bytes produced by
        this encoding operation. The buffer's limit will be the position
        of the last byte in the buffer, and the position will be zero.
@throws IllegalStateException
            if another encoding operation is ongoing.
@throws MalformedInputException
            if an illegal input character sequence for this charset is
            encountered, and the action for malformed error is
            {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}
@throws UnmappableCharacterException
            if a legal but unmappable input character sequence for this
            charset is encountered, and the action for unmappable
            character error is
            {@link CodingErrorAction#REPORT CodingErrorAction.REPORT}.
            Unmappable means the Unicode character sequence at the input
            buffer's current position cannot be mapped to a equivalent
            byte sequence.
@throws CharacterCodingException
            if other exception happened during the encode operation."
      end

      operation 795931 "checkCoderResult"
	private explicit_return_type "void"
	nparams 1
	  param inout name "result" type class_ref 192795 // CoderResult
	nexceptions 1
	  exception class_ref 192283 // CharacterCodingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "checks the result whether it needs to throw CharacterCodingException."
      end

      operation 796059 "allocateMore"
	private return_type class_ref 142363 // ByteBuffer
	nparams 1
	  param inout name "output" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " allocate more spaces to the given ByteBuffer"
      end

      operation 796187 "encode"
	public return_type class_ref 192795 // CoderResult
	nparams 3
	  param inout name "in" type class_ref 133275 // CharBuffer
	  param inout name "out" type class_ref 142363 // ByteBuffer
	  param inout name "endOfInput" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes characters starting at the current position of the given input
buffer, and writes the equivalent byte sequence into the given output
buffer from its current position.
<p>
The buffers' position will be changed with the reading and writing
operation, but their limits and marks will be kept intact.
<p>
A <code>CoderResult</code> instance will be returned according to
following rules:
<ul>
<li>A {@link CoderResult#malformedForLength(int) malformed input} result
indicates that some malformed input error was encountered, and the
erroneous characters start at the input buffer's position and their
number can be got by result's {@link CoderResult#length() length}. This
kind of result can be returned only if the malformed action is
{@link CodingErrorAction#REPORT CodingErrorAction.REPORT}.</li>
<li>{@link CoderResult#UNDERFLOW CoderResult.UNDERFLOW} indicates that
as many characters as possible in the input buffer have been encoded. If
there is no further input and no characters left in the input buffer then
this task is complete. If this is not the case then the client should
call this method again supplying some more input characters.</li>
<li>{@link CoderResult#OVERFLOW CoderResult.OVERFLOW} indicates that the
output buffer has been filled, while there are still some characters
remaining in the input buffer. This method should be invoked again with a
non-full output buffer.</li>
<li>A {@link CoderResult#unmappableForLength(int) unmappable character}
result indicates that some unmappable character error was encountered,
and the erroneous characters start at the input buffer's position and
their number can be got by result's {@link CoderResult#length() length}.
This kind of result can be returned only on
{@link CodingErrorAction#REPORT CodingErrorAction.REPORT}.</li>
</ul>
<p>
The <code>endOfInput</code> parameter indicates if the invoker can
provider further input. This parameter is true if and only if the
characters in the current input buffer are all inputs for this encoding
operation. Note that it is common and won't cause an error if the invoker
sets false and then has no more input available, while it may cause an
error if the invoker always sets true in several consecutive invocations.
This would make the remaining input to be treated as malformed input.
input.
<p>
This method invokes the
{@link #encodeLoop(CharBuffer, ByteBuffer) encodeLoop} method to
implement the basic encode logic for a specific charset.

@param in
           the input buffer.
@param out
           the output buffer.
@param endOfInput
           true if all the input characters have been provided.
@return a <code>CoderResult</code> instance indicating the result.
@throws IllegalStateException
            if the encoding operation has already started or no more
            input is needed in this encoding process.
@throws CoderMalfunctionError
            If the {@link #encodeLoop(CharBuffer, ByteBuffer) encodeLoop}
            method threw an <code>BufferUnderflowException</code> or
            <code>BufferUnderflowException</code>."
      end

      operation 796315 "encodeLoop"
	abstract protected return_type class_ref 192795 // CoderResult
	nparams 2
	  param inout name "in" type class_ref 133275 // CharBuffer
	  param inout name "out" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes characters into bytes. This method is called by
{@link #encode(CharBuffer, ByteBuffer, boolean) encode}.
<p>
This method will implement the essential encoding operation, and it won't
stop encoding until either all the input characters are read, the output
buffer is filled, or some exception is encountered. Then it will
return a <code>CoderResult</code> object indicating the result of the
current encoding operation. The rule to construct the
<code>CoderResult</code> is the same as for
{@link #encode(CharBuffer, ByteBuffer, boolean) encode}. When an
exception is encountered in the encoding operation, most implementations
of this method will return a relevant result object to the
{@link #encode(CharBuffer, ByteBuffer, boolean) encode} method, and some
performance optimized implementation may handle the exception and
implement the error action itself.
<p>
The buffers are scanned from their current positions, and their positions
will be modified accordingly, while their marks and limits will be
intact. At most {@link CharBuffer#remaining() in.remaining()} characters
will be read, and {@link ByteBuffer#remaining() out.remaining()} bytes
will be written.
<p>
Note that some implementations may pre-scan the input buffer and return
<code>CoderResult.UNDERFLOW</code> until it receives sufficient input.
<p>
@param in
           the input buffer.
@param out
           the output buffer.
@return a <code>CoderResult</code> instance indicating the result."
      end

      operation 796443 "flush"
	public return_type class_ref 192795 // CoderResult
	nparams 1
	  param inout name "out" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this encoder.
<p>
This method will call {@link #implFlush(ByteBuffer) implFlush}. Some
encoders may need to write some bytes to the output buffer when they have
read all input characters, subclasses can overridden
{@link #implFlush(ByteBuffer) implFlush} to perform writing action.
<p>
The maximum number of written bytes won't larger than
{@link ByteBuffer#remaining() out.remaining()}. If some encoder wants to
write more bytes than the output buffer's available remaining space, then
<code>CoderResult.OVERFLOW</code> will be returned, and this method
must be called again with a byte buffer that has free space. Otherwise
this method will return <code>CoderResult.UNDERFLOW</code>, which
means one encoding process has been completed successfully.
<p>
During the flush, the output buffer's position will be changed
accordingly, while its mark and limit will be intact.

@param out
           the given output buffer.
@return <code>CoderResult.UNDERFLOW</code> or
        <code>CoderResult.OVERFLOW</code>.
@throws IllegalStateException
            if this encoder hasn't read all input characters during one
            encoding process, which means neither after calling
            {@link #encode(CharBuffer) encode(CharBuffer)} nor after
            calling {@link #encode(CharBuffer, ByteBuffer, boolean)
            encode(CharBuffer, ByteBuffer, boolean)} with {@code true}
            for the last boolean parameter."
      end

      operation 796571 "implFlush"
	protected return_type class_ref 192795 // CoderResult
	nparams 1
	  param inout name "out" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Flushes this encoder. The default implementation does nothing and always
returns <code>CoderResult.UNDERFLOW</code>; this method can be
overridden if needed.

@param out
           the output buffer.
@return <code>CoderResult.UNDERFLOW</code> or
        <code>CoderResult.OVERFLOW</code>."
      end

      operation 796699 "implOnMalformedInput"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies that this encoder's <code>CodingErrorAction</code> specified
for malformed input error has been changed. The default implementation
does nothing; this method can be overridden if needed.

@param newAction
           the new action."
      end

      operation 796827 "implOnUnmappableCharacter"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies that this encoder's <code>CodingErrorAction</code> specified
for unmappable character error has been changed. The default
implementation does nothing; this method can be overridden if needed.

@param newAction
           the new action."
      end

      operation 796955 "implReplaceWith"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newReplacement" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies that this encoder's replacement has been changed. The default
implementation does nothing; this method can be overridden if needed.

@param newReplacement
           the new replacement string."
      end

      operation 797083 "implReset"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this encoder's charset related state. The default implementation
does nothing; this method can be overridden if needed."
      end

      operation 797211 "isLegalReplacement"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "replacement" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks if the given argument is legal as this encoder's replacement byte
array.

The given byte array is legal if and only if it can be decode into
sixteen bits Unicode characters.

This method can be overridden for performance improvement.

@param replacement
           the given byte array to be checked.
@return true if the the given argument is legal as this encoder's
        replacement byte array."
      end

      operation 797339 "malformedInputAction"
	public return_type class_ref 192667 // CodingErrorAction
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this encoder's <code>CodingErrorAction</code> when a malformed
input error occurred during the encoding process."
      end

      operation 797467 "maxBytesPerChar"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum number of bytes which can be created by this encoder for
one input character, must be positive."
      end

      operation 797595 "onMalformedInput"
	public return_type class_ref 142875 // CharsetEncoder
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this encoder's action on malformed input error.

This method will call the
{@link #implOnMalformedInput(CodingErrorAction) implOnMalformedInput}
method with the given new action as argument.

@param newAction
           the new action on malformed input error.
@return this encoder.
@throws IllegalArgumentException
            if the given newAction is null."
      end

      operation 797723 "onUnmappableCharacter"
	public return_type class_ref 142875 // CharsetEncoder
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this encoder's action on unmappable character error.

This method will call the
{@link #implOnUnmappableCharacter(CodingErrorAction) implOnUnmappableCharacter}
method with the given new action as argument.

@param newAction
           the new action on unmappable character error.
@return this encoder.
@throws IllegalArgumentException
            if the given newAction is null."
      end

      operation 797851 "replacement"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the replacement byte array, which is never null or empty."
      end

      operation 797979 "replaceWith"
	public return_type class_ref 142875 // CharsetEncoder
	nparams 1
	  param inout name "replacement" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the new replacement value.

This method first checks the given replacement's validity, then changes
the replacement value and finally calls the
{@link #implReplaceWith(byte[]) implReplaceWith} method with the given
new replacement as argument.

@param replacement
           the replacement byte array, cannot be null or empty, its
           length cannot be larger than <code>maxBytesPerChar</code>,
           and it must be legal replacement, which can be justified by
           calling <code>isLegalReplacement(byte[] replacement)</code>.
@return this encoder.
@throws IllegalArgumentException
            if the given replacement cannot satisfy the requirement
            mentioned above."
      end

      operation 798107 "reset"
	public return_type class_ref 142875 // CharsetEncoder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this encoder. This method will reset the internal status and then
calls <code>implReset()</code> to reset any status related to the
specific charset.

@return this encoder."
      end

      operation 798235 "unmappableCharacterAction"
	public return_type class_ref 192667 // CodingErrorAction
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this encoder's <code>CodingErrorAction</code> when unmappable
character occurred during encoding process."
      end
    end

    class 192283 "CharacterCodingException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code CharacterCodingException} is thrown when an encoding or decoding
error occurs."
      classrelation 273947 // <generalisation>
	relation 273947 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 273947 // <generalisation>
	  b parent class_ref 128539 // IOException
      end

      attribute 240923 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8421532232154627783L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant is used during deserialization to check the version
which created the serialized object.
"
      end

      operation 786331 "CharacterCodingException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code CharacterCodingException}."
      end
    end

    class 192667 "CodingErrorAction"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Used to indicate what kind of actions to take in case of encoding/decoding
errors. Currently three actions are defined: {@code IGNORE}, {@code REPLACE}
and {@code REPORT}."
      classrelation 277403 // IGNORE (<unidirectional association>)
	relation 277403 --->
	  a role_name "IGNORE" init_value " new CodingErrorAction(
            \"IGNORE\")" class_relation const_relation public
	    comment "
Denotes the action to ignore any errors.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 277403 // IGNORE (<unidirectional association>)
	  b parent class_ref 192667 // CodingErrorAction
      end

      classrelation 277531 // REPLACE (<unidirectional association>)
	relation 277531 --->
	  a role_name "REPLACE" init_value " new CodingErrorAction(
            \"REPLACE\")" class_relation const_relation public
	    comment "
Denotes the action to fill in the output with a replacement character
when malformed input or an unmappable character is encountered.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 277531 // REPLACE (<unidirectional association>)
	  b parent class_ref 192667 // CodingErrorAction
      end

      classrelation 277659 // REPORT (<unidirectional association>)
	relation 277659 --->
	  a role_name "REPORT" init_value " new CodingErrorAction(
            \"REPORT\")" class_relation const_relation public
	    comment "
Denotes the action to report the encountered error in an appropriate
manner, for example to throw an exception or return an informative
result.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 277659 // REPORT (<unidirectional association>)
	  b parent class_ref 192667 // CodingErrorAction
      end

      classrelation 277787 // action (<unidirectional association>)
	relation 277787 --->
	  a role_name "action" private
	    comment " The name of this action
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 277787 // action (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 803483 "CodingErrorAction"
	private explicit_return_type ""
	nparams 1
	  param inout name "action" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Can't instantiate outside."
      end

      operation 803611 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a text description of this action indication.

@return a text description of this action indication."
      end
    end

    class 192795 "CoderResult"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Used to indicate the result of encoding/decoding. There are four types of
results:
<ol>
<li>UNDERFLOW indicates that all input has been processed but more input is
required. It is represented by the unique object
<code>CoderResult.UNDERFLOW</code>.
<li>OVERFLOW indicates an insufficient output buffer size. It is represented
by the unique object <code>CoderResult.OVERFLOW</code>.
<li>A malformed-input error indicates that an unrecognizable sequence of
input units has been encountered. Get an instance of this type of result by
calling <code>CoderResult.malformedForLength(int)</code> with the length of
the malformed-input.
<li>An unmappable-character error indicates that a sequence of input units
can not be mapped to the output charset. Get an instance of this type of
result by calling <code>CoderResult.unmappableForLength(int)</code> with
the input sequence size indicating the identity of the unmappable character.
</ol>"
      attribute 246299 "TYPE_UNDERFLOW"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicating underflow error type"
      end

      attribute 246427 "TYPE_OVERFLOW"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicating overflow error type"
      end

      attribute 246555 "TYPE_MALFORMED_INPUT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicating malformed-input error type"
      end

      attribute 246683 "TYPE_UNMAPPABLE_CHAR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indicating unmappable character error type"
      end

      classrelation 276891 // UNDERFLOW (<unidirectional association>)
	relation 276891 --->
	  a role_name "UNDERFLOW" init_value " new CoderResult(TYPE_UNDERFLOW,
            0)" class_relation const_relation public
	    comment "
Result object indicating that there is insufficient data in the
encoding/decoding buffer or that additional data is required.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 276891 // UNDERFLOW (<unidirectional association>)
	  b parent class_ref 192795 // CoderResult
      end

      classrelation 277019 // OVERFLOW (<unidirectional association>)
	relation 277019 --->
	  a role_name "OVERFLOW" init_value " new CoderResult(TYPE_OVERFLOW, 0)" class_relation const_relation public
	    comment "
Result object used to indicate that the output buffer does not have
enough space available to store the result of the encoding/decoding.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 277019 // OVERFLOW (<unidirectional association>)
	  b parent class_ref 192795 // CoderResult
      end

      classrelation 277147 // _malformedErrors (<unidirectional association>)
	relation 277147 --->
	  a role_name "_malformedErrors" init_value " new WeakHashMap<Integer, CoderResult>()" class_relation private
	    comment "
Stores unique result objects for each malformed-input error of a certain
length

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer, CoderResult> ${name}${value};
"
	    classrelation_ref 277147 // _malformedErrors (<unidirectional association>)
	  b parent class_ref 144795 // WeakHashMap
      end

      classrelation 277275 // _unmappableErrors (<unidirectional association>)
	relation 277275 --->
	  a role_name "_unmappableErrors" init_value " new WeakHashMap<Integer, CoderResult>()" class_relation private
	    comment "
Stores unique result objects for each unmappable-character error of a
certain length

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Integer, CoderResult> ${name}${value};
"
	    classrelation_ref 277275 // _unmappableErrors (<unidirectional association>)
	  b parent class_ref 144795 // WeakHashMap
      end

      attribute 246811 "type"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the type of this result"
      end

      attribute 246939 "length"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the length of the erroneous input"
      end

      operation 802075 "CoderResult"
	private explicit_return_type ""
	nparams 2
	  param in name "type" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <code>CoderResult</code> object with its text description.

@param type
           the type of this result
@param length
           the length of the erroneous input"
      end

      operation 802203 "malformedForLength"
	class_operation public return_type class_ref 192795 // CoderResult
	nparams 1
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a <code>CoderResult</code> object indicating a malformed-input
error.

@param length
           the length of the malformed-input.
@return a <code>CoderResult</code> object indicating a malformed-input
        error.
@throws IllegalArgumentException
            if <code>length</code> is non-positive."
      end

      operation 802331 "unmappableForLength"
	class_operation public return_type class_ref 192795 // CoderResult
	nparams 1
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128283 // IllegalArgumentException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a <code>CoderResult</code> object indicating an unmappable
character error.

@param length
           the length of the input unit sequence denoting the unmappable
           character.
@return a <code>CoderResult</code> object indicating an unmappable
        character error.
@throws IllegalArgumentException
            if <code>length</code> is non-positive."
      end

      operation 802459 "isUnderflow"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this result is an underflow condition.

@return true if an underflow, otherwise false."
      end

      operation 802587 "isError"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this result represents a malformed-input error or an
unmappable-character error.

@return true if this is a malformed-input error or an
        unmappable-character error, otherwise false."
      end

      operation 802715 "isMalformed"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this result represents a malformed-input error.

@return true if this is a malformed-input error, otherwise false."
      end

      operation 802843 "isOverflow"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this result is an overflow condition.

@return true if this is an overflow, otherwise false."
      end

      operation 802971 "isUnmappable"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this result represents an unmappable-character error.

@return true if this is an unmappable-character error, otherwise false."
      end

      operation 803099 "length"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 162331 // UnsupportedOperationException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the length of the erroneous input. The length is only meaningful to
a malformed-input error or an unmappable character error.

@return the length, as an integer, of this object's erroneous input.
@throws UnsupportedOperationException
            if this result is an overflow or underflow."
      end

      operation 803227 "throwException"
	public explicit_return_type "void"
	nparams 0
	nexceptions 5
	  exception class_ref 179995 // BufferUnderflowException
	  exception class_ref 179867 // BufferOverflowException
	  exception class_ref 193563 // UnmappableCharacterException
	  exception class_ref 193691 // MalformedInputException
	  exception class_ref 192283 // CharacterCodingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws an exception corresponding to this coder result.

@throws BufferUnderflowException
            in case this is an underflow.
@throws BufferOverflowException
            in case this is an overflow.
@throws UnmappableCharacterException
            in case this is an unmappable-character error.
@throws MalformedInputException
            in case this is a malformed-input error.
@throws CharacterCodingException
            the default exception."
      end

      operation 803355 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a text description of this result.

@return a text description of this result."
      end
    end

    class 192923 "CharsetDecoderICU"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 275227 // <generalisation>
	relation 275227 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 275227 // <generalisation>
	  b parent class_ref 142235 // CharsetDecoder
      end

      attribute 241947 "MAX_CHARS_PER_BYTE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 242075 "INPUT_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 242203 "OUTPUT_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 242331 "INVALID_BYTES"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 242459 "data"
	private explicit_type "int"
	multiplicity "[]"
	init_value " new int[3]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "data[INPUT_OFFSET]   = on input contains the start of input and on output the number of input bytes consumed
data[OUTPUT_OFFSET]  = on input contains the start of output and on output the number of output chars written
data[INVALID_BYTES]  = number of invalid bytes
"
      end

      attribute 242587 "converterHandle"
	private explicit_type "long"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " handle to the ICU converter that is opened "
      end

      attribute 242715 "input"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 242843 "output"
	private explicit_type "char"
	multiplicity "[]"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 242971 "allocatedInput"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 243099 "allocatedOutput"
	private explicit_type "char"
	multiplicity "[]"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 243227 "inEnd"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " These instance variables are always assigned in the methods before being used. This class
 is inherently thread-unsafe so we don't have to worry about synchronization."
      end

      attribute 243355 "outEnd"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 792987 "newInstance"
	class_operation public return_type class_ref 192923 // CharsetDecoderICU
	nparams 2
	  param inout name "cs" type class_ref 142491 // Charset
	  param inout name "icuCanonicalName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 793115 "CharsetDecoderICU"
	private explicit_return_type ""
	nparams 3
	  param inout name "cs" type class_ref 142491 // Charset
	  param in name "averageCharsPerByte" explicit_type "float"
	  param in name "address" explicit_type "long"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 793243 "implReplaceWith"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newReplacement" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 793371 "implOnMalformedInput"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 793499 "implOnUnmappableCharacter"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 793627 "updateCallback"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 793755 "implReset"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 793883 "implFlush"
	protected return_type class_ref 192795 // CoderResult
	nparams 1
	  param inout name "out" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 794011 "decodeLoop"
	protected return_type class_ref 192795 // CoderResult
	nparams 2
	  param inout name "in" type class_ref 142363 // ByteBuffer
	  param inout name "out" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 794139 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 794267 "getArray"
	private explicit_return_type "int"
	nparams 1
	  param inout name "out" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 794395 "getArray"
	private explicit_return_type "int"
	nparams 1
	  param inout name "in" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 794523 "setPosition"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 794651 "setPosition"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 193051 "CharsetEncoderICU"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 275867 // <generalisation>
	relation 275867 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 275867 // <generalisation>
	  b parent class_ref 142875 // CharsetEncoder
      end

      classrelation 275995 // DEFAULT_REPLACEMENTS (<unidirectional association>)
	relation 275995 --->
	  a role_name "DEFAULT_REPLACEMENTS" init_value " new HashMap<String, byte[]>()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<String, byte[]> ${name}${value};
"
	    classrelation_ref 275995 // DEFAULT_REPLACEMENTS (<unidirectional association>)
	  b parent class_ref 129819 // Map
      end

      extra_member 130331 "initialization"
	
	cpp "" ""
	java "  static {
        // ICU has different default replacements to the RI in some cases. There are many
        // additional cases, but this covers all the charsets that Java guarantees will be
        // available, which is where compatibility seems most important. (The RI even uses
        // the byte corresponding to '?' in ASCII as the replacement byte for charsets where that
        // byte corresponds to an entirely different character.)
        // It's odd that UTF-8 doesn't use U+FFFD, given that (unlike ISO-8859-1 and US-ASCII) it
        // can represent it, but this is what the RI does...
        byte[] questionMark = new byte[] { (byte) '?' };
        DEFAULT_REPLACEMENTS.put(\"UTF-8\",      questionMark);
        DEFAULT_REPLACEMENTS.put(\"ISO-8859-1\", questionMark);
        DEFAULT_REPLACEMENTS.put(\"US-ASCII\",   questionMark);
    }"
	php ""
	python ""
	idl ""
      end

      attribute 244763 "INPUT_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 244891 "OUTPUT_OFFSET"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 245019 "INVALID_CHARS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 245147 "data"
	private explicit_type "int"
	multiplicity "[]"
	init_value " new int[3]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "data[INPUT_OFFSET]   = on input contains the start of input and on output the number of input chars consumed
data[OUTPUT_OFFSET]  = on input contains the start of output and on output the number of output bytes written
data[INVALID_CHARS]  = number of invalid chars
"
      end

      attribute 245275 "converterHandle"
	private explicit_type "long"
	init_value "0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " handle to the ICU converter that is opened "
      end

      attribute 245403 "input"
	private explicit_type "char"
	multiplicity "[]"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 245531 "output"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 245659 "allocatedInput"
	private explicit_type "char"
	multiplicity "[]"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 245787 "allocatedOutput"
	private explicit_type "byte"
	multiplicity "[]"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 245915 "inEnd"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " These instance variables are always assigned in the methods before being used. This class
 is inherently thread-unsafe so we don't have to worry about synchronization."
      end

      attribute 246043 "outEnd"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 798363 "newInstance"
	class_operation public return_type class_ref 193051 // CharsetEncoderICU
	nparams 2
	  param inout name "cs" type class_ref 142491 // Charset
	  param inout name "icuCanonicalName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 798491 "makeReplacement"
	class_operation private explicit_return_type "byte"
	nparams 2
	  param inout name "icuCanonicalName" type class_ref 3399692 // String
	  param in name "address" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 798619 "CharsetEncoderICU"
	private explicit_return_type ""
	nparams 5
	  param inout name "cs" type class_ref 142491 // Charset
	  param in name "averageBytesPerChar" explicit_type "float"
	  param in name "maxBytesPerChar" explicit_type "float"
	  param inout name "replacement" explicit_type "byte"
	  param in name "address" explicit_type "long"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 798747 "implReplaceWith"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newReplacement" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 798875 "implOnMalformedInput"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 799003 "implOnUnmappableCharacter"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "newAction" type class_ref 192667 // CodingErrorAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 799131 "updateCallback"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 799259 "implReset"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 799387 "implFlush"
	protected return_type class_ref 192795 // CoderResult
	nparams 1
	  param inout name "out" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 799515 "encodeLoop"
	protected return_type class_ref 192795 // CoderResult
	nparams 2
	  param inout name "in" type class_ref 133275 // CharBuffer
	  param inout name "out" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 799643 "canEncode"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 799771 "canEncode"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "codePoint" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 799899 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 800027 "getArray"
	private explicit_return_type "int"
	nparams 1
	  param inout name "out" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 800155 "getArray"
	private explicit_return_type "int"
	nparams 1
	  param inout name "in" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 800283 "setPosition"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 800411 "setPosition"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 133275 // CharBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 193179 "CharsetICU"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 276123 // <generalisation>
	relation 276123 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 276123 // <generalisation>
	  b parent class_ref 142491 // Charset
      end

      classrelation 276251 // icuCanonicalName (<unidirectional association>)
	relation 276251 --->
	  a role_name "icuCanonicalName" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 276251 // icuCanonicalName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 800539 "CharsetICU"
	protected explicit_return_type ""
	nparams 3
	  param inout name "canonicalName" type class_ref 3399692 // String
	  param inout name "icuCanonName" type class_ref 3399692 // String
	  param inout name "aliases" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 800667 "newDecoder"
	public return_type class_ref 142235 // CharsetDecoder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 800795 "newEncoder"
	public return_type class_ref 142875 // CharsetEncoder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 800923 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "cs" type class_ref 142491 // Charset
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 193307 "Charsets"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provides convenient access to the most important built-in charsets. Saves a hash lookup and
unnecessary handling of UnsupportedEncodingException at call sites, compared to using the
charset's name.

Also various special-case charset conversions (for performance).

@hide internal use only"
      classrelation 276379 // ISO_8859_1 (<unidirectional association>)
	relation 276379 --->
	  a role_name "ISO_8859_1" init_value " Charset.forName(\"ISO-8859-1\")" class_relation const_relation public
	    comment "
A cheap and type-safe constant for the ISO-8859-1 Charset.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 276379 // ISO_8859_1 (<unidirectional association>)
	  b parent class_ref 142491 // Charset
      end

      classrelation 276507 // US_ASCII (<unidirectional association>)
	relation 276507 --->
	  a role_name "US_ASCII" init_value " Charset.forName(\"US-ASCII\")" class_relation const_relation public
	    comment "
A cheap and type-safe constant for the US-ASCII Charset.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 276507 // US_ASCII (<unidirectional association>)
	  b parent class_ref 142491 // Charset
      end

      classrelation 276635 // UTF_8 (<unidirectional association>)
	relation 276635 --->
	  a role_name "UTF_8" init_value " Charset.forName(\"UTF-8\")" class_relation const_relation public
	    comment "
A cheap and type-safe constant for the UTF-8 Charset.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 276635 // UTF_8 (<unidirectional association>)
	  b parent class_ref 142491 // Charset
      end

      operation 801051 "toAsciiBytes"
	class_operation public explicit_return_type "byte"
	nparams 3
	  param inout name "chars" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Returns a new byte array containing the bytes corresponding to the given characters,
encoded in US-ASCII. Unrepresentable characters are replaced by (byte) '?'."
      end

      operation 801179 "toIsoLatin1Bytes"
	class_operation public explicit_return_type "byte"
	nparams 3
	  param inout name "chars" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Returns a new byte array containing the bytes corresponding to the given characters,
encoded in ISO-8859-1. Unrepresentable characters are replaced by (byte) '?'."
      end

      operation 801307 "toUtf8Bytes"
	class_operation public explicit_return_type "byte"
	nparams 3
	  param inout name "chars" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Returns a new byte array containing the bytes corresponding to the given characters,
encoded in UTF-8. All characters are representable in UTF-8."
      end

      operation 801435 "toBigEndianUtf16Bytes"
	class_operation public explicit_return_type "byte"
	nparams 3
	  param inout name "chars" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new byte array containing the bytes corresponding to the given characters,
encoded in UTF-16BE. All characters are representable in UTF-16BE."
      end

      operation 801563 "asciiBytesToChars"
	class_operation public explicit_return_type "void"
	nparams 4
	  param inout name "bytes" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param inout name "chars" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws};
"
	
	
	
	comment "Decodes the given US-ASCII bytes into the given char[]. Equivalent to but faster than:

for (int i = 0; i < count; ++i) {
    char ch = (char) (data[start++] & 0xff);
    value[i] = (ch <= 0x7f) ? ch : REPLACEMENT_CHAR;
}"
      end

      operation 801691 "isoLatin1BytesToChars"
	class_operation public explicit_return_type "void"
	nparams 4
	  param inout name "bytes" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param inout name "chars" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws};
"
	
	
	
	comment "Decodes the given ISO-8859-1 bytes into the given char[]. Equivalent to but faster than:

for (int i = 0; i < count; ++i) {
    value[i] = (char) (data[start++] & 0xff);
}"
      end

      operation 801819 "Charsets"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 193435 "CoderMalfunctionError"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code CoderMalfunctionError} is thrown when the encoder/decoder is
malfunctioning."
      classrelation 276763 // <generalisation>
	relation 276763 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 276763 // <generalisation>
	  b parent class_ref 143643 // Error
      end

      attribute 246171 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1151412348057794301L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant is used during deserialization to check the version
which created the serialized object.
"
      end

      operation 801947 "CoderMalfunctionError"
	public explicit_return_type ""
	nparams 1
	  param inout name "ex" type class_ref 132251 // Exception
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code CoderMalfunctionError}.

@param ex
           the original exception thrown by the encoder/decoder."
      end
    end

    class 193563 "UnmappableCharacterException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code UnmappableCharacterException} is thrown when an unmappable
character for the given charset is encountered."
      classrelation 278299 // <generalisation>
	relation 278299 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 278299 // <generalisation>
	  b parent class_ref 192283 // CharacterCodingException
      end

      attribute 247451 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7026962371537706123L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant is used during deserialization to check the version
which created the serialized object.
"
      end

      attribute 247579 "inputLength"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The length of the unmappable character"
      end

      operation 805019 "UnmappableCharacterException"
	public explicit_return_type ""
	nparams 1
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UnmappableCharacterException}.

@param length
           the length of the unmappable character."
      end

      operation 805147 "getInputLength"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the unmappable character."
      end

      operation 805275 "getMessage"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 193691 "MalformedInputException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code MalformedInputException} is thrown when a malformed input is
encountered, for example if a byte sequence is illegal for the given charset."
      classrelation 278171 // <generalisation>
	relation 278171 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 278171 // <generalisation>
	  b parent class_ref 192283 // CharacterCodingException
      end

      attribute 247195 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3438823399834806194L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant is used during deserialization to check the version
which created the serialized object.
"
      end

      attribute 247323 "inputLength"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " the length of the malformed input"
      end

      operation 803995 "MalformedInputException"
	public explicit_return_type ""
	nparams 1
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code MalformedInputException}.

@param length
           the length of the malformed input."
      end

      operation 804123 "getInputLength"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the length of the malformed input.

@return the length of the malformed input."
      end

      operation 804251 "getMessage"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 193819 "IllegalCharsetNameException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code IllegalCharsetNameException} is thrown when an illegal charset name
is encountered."
      classrelation 277915 // <generalisation>
	relation 277915 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 277915 // <generalisation>
	  b parent class_ref 128283 // IllegalArgumentException
      end

      attribute 247067 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1457525358470002989L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant is used during deserialization to check the version
which created the serialized object.
"
      end

      classrelation 278043 // charsetName (<unidirectional association>)
	relation 278043 --->
	  a role_name "charsetName" private
	    comment " The illegal charset name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 278043 // charsetName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 803739 "IllegalCharsetNameException"
	public explicit_return_type ""
	nparams 1
	  param inout name "charsetName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code IllegalCharsetNameException} with the supplied
charset name.

@param charsetName
           the encountered illegal charset name."
      end

      operation 803867 "getCharsetName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encountered illegal charset name."
      end
    end

    class 193947 "ModifiedUtf8"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "@hide internal use only"
      operation 804379 "decode"
	class_operation public return_type class_ref 3399692 // String
	nparams 4
	  param inout name "in" explicit_type "byte"
	  param inout name "out" explicit_type "char"
	  param in name "offset" explicit_type "int"
	  param in name "utfSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 146843 // UTFDataFormatException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decodes a byte array containing <i>modified UTF-8</i> bytes into a string.

<p>Note that although this method decodes the (supposedly impossible) zero byte to U+0000,
that's what the RI does too."
      end

      operation 804507 "countBytes"
	class_operation public explicit_return_type "long"
	nparams 2
	  param inout name "s" type class_ref 3399692 // String
	  param inout name "shortLength" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 146843 // UTFDataFormatException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of bytes the modified UTF-8 representation of 's' would take. Note
that this is just the space for the bytes representing the characters, not the length
which precedes those bytes, because different callers represent the length differently,
as two, four, or even eight bytes. If {@code shortLength} is true, we'll throw an
exception if the string is too long for its length to be represented by a short."
      end

      operation 804635 "encode"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "dst" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Encodes the <i>modified UTF-8</i> bytes corresponding to string {@code s} into the
byte array {@code dst}, starting at the given {@code offset}."
      end

      operation 804763 "encode"
	class_operation public explicit_return_type "byte"
	nparams 1
	  param inout name "s" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 146843 // UTFDataFormatException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing the <i>modified UTF-8</i> form of {@code s}, using a
big-endian 16-bit length. Throws UTFDataFormatException if {@code s} is too long
for a two-byte length."
      end

      operation 804891 "ModifiedUtf8"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 194075 "UnsupportedCharsetException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code UnsupportedCharsetException} is thrown when an unsupported charset
name is encountered."
      classrelation 278427 // <generalisation>
	relation 278427 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 278427 // <generalisation>
	  b parent class_ref 128283 // IllegalArgumentException
      end

      attribute 247707 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1490765524727386367L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant is used during deserialization to check the version
which created the serialized object.
"
      end

      classrelation 278555 // charsetName (<unidirectional association>)
	relation 278555 --->
	  a role_name "charsetName" private
	    comment " the unsupported charset name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 278555 // charsetName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 805403 "UnsupportedCharsetException"
	public explicit_return_type ""
	nparams 1
	  param inout name "charsetName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code UnsupportedCharsetException} with the supplied
charset name.

@param charsetName
           the encountered unsupported charset name."
      end

      operation 805531 "getCharsetName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the encountered unsupported charset name.

@return the encountered unsupported charset name."
      end
    end
  end

  deploymentview 129947 "charset"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 180251 "CharacterCodingException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 192283 // CharacterCodingException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 180379 "Charset"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.spi.CharsetProvider;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;
import libcore.icu.NativeConverter;
${definition}"
      associated_classes
	class_ref 142491 // Charset
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 180507 "CharsetDecoder"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
${definition}"
      associated_classes
	class_ref 142235 // CharsetDecoder
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 180635 "CharsetDecoderICU"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import libcore.icu.ICU;
import libcore.icu.NativeConverter;
import libcore.util.EmptyArray;
${definition}"
      associated_classes
	class_ref 192923 // CharsetDecoderICU
      end
      comment "******************************************************************************
Copyright (C) 1996-2006, International Business Machines Corporation and    *
others. All Rights Reserved.                                                *
******************************************************************************

******************************************************************************


A JNI interface for ICU converters.


@author Ram Viswanadha, IBM"
    end

    artifact 180763 "CharsetEncoder"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 142875 // CharsetEncoder
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 180891 "CharsetEncoderICU"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.util.HashMap;
import java.util.Map;
import libcore.icu.ICU;
import libcore.icu.NativeConverter;
import libcore.util.EmptyArray;
${definition}"
      associated_classes
	class_ref 193051 // CharsetEncoderICU
      end
      comment "******************************************************************************
Copyright (C) 1996-2006, International Business Machines Corporation and    *
others. All Rights Reserved.                                                  *
******************************************************************************

******************************************************************************


A JNI interface for ICU converters.


@author Ram Viswanadha, IBM"
    end

    artifact 181019 "CharsetICU"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import libcore.icu.NativeConverter;
${definition}"
      associated_classes
	class_ref 193179 // CharsetICU
      end
      comment "******************************************************************************
Copyright (C) 1996-2005, International Business Machines Corporation and    *
others. All Rights Reserved.                                                *
******************************************************************************

******************************************************************************"
    end

    artifact 181147 "Charsets"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 193307 // Charsets
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 181275 "CoderMalfunctionError"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 193435 // CoderMalfunctionError
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 181403 "CoderResult"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.WeakHashMap;
${definition}"
      associated_classes
	class_ref 192795 // CoderResult
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 181531 "CodingErrorAction"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 192667 // CodingErrorAction
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 181659 "IllegalCharsetNameException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 193819 // IllegalCharsetNameException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 181787 "MalformedInputException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 193691 // MalformedInputException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 181915 "ModifiedUtf8"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.UTFDataFormatException;
import java.nio.ByteOrder;
import libcore.io.Memory;
import libcore.io.SizeOf;
${definition}"
      associated_classes
	class_ref 193947 // ModifiedUtf8
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 182043 "UnmappableCharacterException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 193563 // UnmappableCharacterException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 182171 "UnsupportedCharsetException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 194075 // UnsupportedCharsetException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end
  end

  package_ref 131483 // spi
end
