class ByteBufferAsFloatBuffer
!!!678299.java!!!	asFloatBuffer(inout byteBuffer : ByteBuffer) : FloatBuffer
        ByteBuffer slice = byteBuffer.slice();
        slice.order(byteBuffer.order());
        return new ByteBufferAsFloatBuffer(slice);
!!!678427.java!!!	ByteBufferAsFloatBuffer(inout byteBuffer : ByteBuffer)
        super(byteBuffer.capacity() / SizeOf.FLOAT);
        this.byteBuffer = byteBuffer;
        this.byteBuffer.clear();
        this.effectiveDirectAddress = byteBuffer.effectiveDirectAddress;
!!!678555.java!!!	asReadOnlyBuffer() : FloatBuffer
        ByteBufferAsFloatBuffer buf = new ByteBufferAsFloatBuffer(byteBuffer.asReadOnlyBuffer());
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        buf.byteBuffer.order = byteBuffer.order;
        return buf;
!!!678683.java!!!	compact() : FloatBuffer
        if (byteBuffer.isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        byteBuffer.limit(limit * SizeOf.FLOAT);
        byteBuffer.position(position * SizeOf.FLOAT);
        byteBuffer.compact();
        byteBuffer.clear();
        position = limit - position;
        limit = capacity;
        mark = UNSET_MARK;
        return this;
!!!678811.java!!!	duplicate() : FloatBuffer
        ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());
        ByteBufferAsFloatBuffer buf = new ByteBufferAsFloatBuffer(bb);
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        return buf;
!!!678939.java!!!	get() : float
        if (position == limit) {
            throw new BufferUnderflowException();
        }
        return byteBuffer.getFloat(position++ * SizeOf.FLOAT);
!!!679067.java!!!	get(in index : int) : float
        checkIndex(index);
        return byteBuffer.getFloat(index * SizeOf.FLOAT);
!!!679195.java!!!	get(inout dst : float, in dstOffset : int, in floatCount : int) : FloatBuffer
        byteBuffer.limit(limit * SizeOf.FLOAT);
        byteBuffer.position(position * SizeOf.FLOAT);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).get(dst, dstOffset, floatCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).get(dst, dstOffset, floatCount);
        }
        this.position += floatCount;
        return this;
!!!679323.java!!!	isDirect() : boolean
        return byteBuffer.isDirect();
!!!679451.java!!!	isReadOnly() : boolean
        return byteBuffer.isReadOnly();
!!!679579.java!!!	order() : ByteOrder
        return byteBuffer.order();
!!!679707.java!!!	protectedArray() : float
        throw new UnsupportedOperationException();
!!!679835.java!!!	protectedArrayOffset() : int
        throw new UnsupportedOperationException();
!!!679963.java!!!	protectedHasArray() : boolean
        return false;
!!!680091.java!!!	put(in c : float) : FloatBuffer
        if (position == limit) {
            throw new BufferOverflowException();
        }
        byteBuffer.putFloat(position++ * SizeOf.FLOAT, c);
        return this;
!!!680219.java!!!	put(in index : int, in c : float) : FloatBuffer
        checkIndex(index);
        byteBuffer.putFloat(index * SizeOf.FLOAT, c);
        return this;
!!!680347.java!!!	put(inout src : float, in srcOffset : int, in floatCount : int) : FloatBuffer
        byteBuffer.limit(limit * SizeOf.FLOAT);
        byteBuffer.position(position * SizeOf.FLOAT);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).put(src, srcOffset, floatCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).put(src, srcOffset, floatCount);
        }
        this.position += floatCount;
        return this;
!!!680475.java!!!	slice() : FloatBuffer
        byteBuffer.limit(limit * SizeOf.FLOAT);
        byteBuffer.position(position * SizeOf.FLOAT);
        ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());
        FloatBuffer result = new ByteBufferAsFloatBuffer(bb);
        byteBuffer.clear();
        return result;
