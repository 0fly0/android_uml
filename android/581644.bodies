class egl_tls_t
!!!1677964.cpp!!!	validateTLSKey() : void
    if (sKey == -1) {
        pthread_mutex_lock(&sLockKey);
        if (sKey == -1)
            pthread_key_create(&sKey, NULL);
        pthread_mutex_unlock(&sLockKey);
    }
!!!1678092.cpp!!!	setErrorEtcImpl(in caller : char, in line : int, in error : EGLint, in quiet : bool) : void
    validateTLSKey();
    egl_tls_t* tls = getTLS();
    if (tls->error != error) {
        if (!quiet) {
            ALOGE("%s:%d error %x (%s)",
                    caller, line, error, egl_strerror(error));
            char value[PROPERTY_VALUE_MAX];
            property_get("debug.egl.callstack", value, "0");
            if (atoi(value)) {
                CallStack stack;
                stack.update();
                stack.dump();
            }
        }
        tls->error = error;
    }
!!!1678220.cpp!!!	getTLS() : egl_tls_t
    egl_tls_t* tls = (egl_tls_t*)pthread_getspecific(sKey);
    if (tls == 0) {
        tls = new egl_tls_t;
        pthread_setspecific(sKey, tls);
    }
    return tls;
!!!1678348.cpp!!!	clearTLS() : void
    if (sKey != -1) {
        egl_tls_t* tls = (egl_tls_t*)pthread_getspecific(sKey);
        if (tls) {
            delete tls;
            pthread_setspecific(sKey, 0);
        }
    }
!!!1678476.cpp!!!	clearError() : void
    // This must clear the error from all the underlying EGL implementations as
    // well as the EGL wrapper layer.
    eglGetError();
!!!1678604.cpp!!!	getError() : EGLint
    if (sKey == -1)
        return EGL_SUCCESS;
    egl_tls_t* tls = (egl_tls_t*)pthread_getspecific(sKey);
    if (!tls) return EGL_SUCCESS;
    EGLint error = tls->error;
    tls->error = EGL_SUCCESS;
    return error;
!!!1678732.cpp!!!	setContext(in ctx : EGLContext) : void
    validateTLSKey();
    getTLS()->ctx = ctx;
!!!1678860.cpp!!!	getContext() : EGLContext
    if (sKey == -1)
        return EGL_NO_CONTEXT;
    egl_tls_t* tls = (egl_tls_t *)pthread_getspecific(sKey);
    if (!tls) return EGL_NO_CONTEXT;
    return tls->ctx;
!!!1678988.cpp!!!	logNoContextCall() : bool
    egl_tls_t* tls = getTLS();
    if (tls->logCallWithNoContext == true) {
        tls->logCallWithNoContext = false;
        return true;
    }
    return false;
!!!1679116.cpp!!!	egl_strerror(in err : EGLint) : char
    switch (err) {
        case EGL_SUCCESS:               return "EGL_SUCCESS";
        case EGL_NOT_INITIALIZED:       return "EGL_NOT_INITIALIZED";
        case EGL_BAD_ACCESS:            return "EGL_BAD_ACCESS";
        case EGL_BAD_ALLOC:             return "EGL_BAD_ALLOC";
        case EGL_BAD_ATTRIBUTE:         return "EGL_BAD_ATTRIBUTE";
        case EGL_BAD_CONFIG:            return "EGL_BAD_CONFIG";
        case EGL_BAD_CONTEXT:           return "EGL_BAD_CONTEXT";
        case EGL_BAD_CURRENT_SURFACE:   return "EGL_BAD_CURRENT_SURFACE";
        case EGL_BAD_DISPLAY:           return "EGL_BAD_DISPLAY";
        case EGL_BAD_MATCH:             return "EGL_BAD_MATCH";
        case EGL_BAD_NATIVE_PIXMAP:     return "EGL_BAD_NATIVE_PIXMAP";
        case EGL_BAD_NATIVE_WINDOW:     return "EGL_BAD_NATIVE_WINDOW";
        case EGL_BAD_PARAMETER:         return "EGL_BAD_PARAMETER";
        case EGL_BAD_SURFACE:           return "EGL_BAD_SURFACE";
        case EGL_CONTEXT_LOST:          return "EGL_CONTEXT_LOST";
        default: return "UNKNOWN";
    }
