class Forwarder
!!!9088140.java!!!	Forwarder(in port : int, in remoteMachineIpAddress : String)
        mPort = port;
        mRemoteMachineIpAddress = remoteMachineIpAddress;
!!!9088268.java!!!	start() : void
        Log.i(LOG_TAG, "start(): Starting fowarder on port: " + mPort);

        try {
            mServerSocket = new ServerSocket(mPort);
        } catch (IOException e) {
            Log.e(LOG_TAG, "mPort=" + mPort, e);
            return;
        }

        super.start();
!!!9088396.java!!!	run() : void
        while (true) {
            Socket localSocket;
            try {
                localSocket = mServerSocket.accept();
            } catch (IOException e) {
                /** This most likely means that mServerSocket is already closed */
                Log.w(LOG_TAG, "mPort=" + mPort, e);
                break;
            }

            Socket remoteSocket = null;
            final ConnectionHandler connectionHandler;
            try {
                remoteSocket = AdbUtils.createSocket();
                connectionHandler = new ConnectionHandler(
                        mRemoteMachineIpAddress, mPort, localSocket, remoteSocket);
            } catch (IOException exception) {
                try {
                    localSocket.close();
                } catch (IOException e) {
                    Log.e(LOG_TAG, "mPort=" + mPort, e);
                }
                if (remoteSocket != null) {
                    try {
                        remoteSocket.close();
                    } catch (IOException e) {
                        Log.e(LOG_TAG, "mPort=" + mPort, e);
                    }
                }
                continue;
            }

            /**
             * We have to close the sockets after the ConnectionHandler finishes, so we
             * don't get "Too may open files" exception. We also remove the ConnectionHandler
             * from the collection to avoid memory issues.
             * */
            ConnectionHandler.OnFinishedCallback callback =
                    new ConnectionHandler.OnFinishedCallback() {
                @Override
                public void onFinished() {
                    synchronized (this) {
                        if (!mConnectionHandlers.remove(connectionHandler)) {
                            assert false : "removeConnectionHandler(): not in the collection";
                        }
                    }
                }
            };
            connectionHandler.registerOnConnectionHandlerFinishedCallback(callback);

            synchronized (this) {
                mConnectionHandlers.add(connectionHandler);
            }
            connectionHandler.start();
        }

        synchronized (this) {
            for (ConnectionHandler connectionHandler : mConnectionHandlers) {
                connectionHandler.stop();
            }
        }
!!!9088524.java!!!	finish() : void
        try {
            mServerSocket.close();
        } catch (IOException e) {
            Log.e(LOG_TAG, "mPort=" + mPort, e);
        }
