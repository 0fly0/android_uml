class UnitTestCaseService
!!!12016780.java!!!	UnitTestCaseService(inout context : Context)
        this.dbh = new DBOpenHelper(context);
!!!12016908.java!!!	clear() : void
        SQLiteDatabase db = dbh.getWritableDatabase();
        db.execSQL("delete from cases");
!!!12017036.java!!!	add(inout testCase : UnitTestCase) : void
        SQLiteDatabase db = dbh.getWritableDatabase();

        if (testCase.getId() >= 0) {
            db.execSQL("insert into cases(id, name, category) values(?, ?, ?)",
                    new Object[] {testCase.getId(), testCase.getName(), testCase.getCategory()});
        } else {
            db.execSQL("insert into cases(name, category) values(?, ?)",
                    new Object[] {testCase.getName(), testCase.getCategory()});
        }
!!!12017164.java!!!	delete(inout caseId : Integer) : void
        SQLiteDatabase db = dbh.getWritableDatabase();
        db.execSQL("delete from cases where id=?", new Object[] {caseId});
!!!12017292.java!!!	update(inout testCase : UnitTestCase) : void
        SQLiteDatabase db = dbh.getWritableDatabase();
        db.execSQL("update cases set name=?, category=? where id=?",
                new Object[] {testCase.getName(), testCase.getCategory(), testCase.getId()});
!!!12017420.java!!!	find(inout caseId : Integer) : UnitTestCase
        SQLiteDatabase db = dbh.getWritableDatabase();
        Cursor cursor = db.rawQuery("select * from cases where id=?",
                                    new String[] {caseId.toString()});

        if (cursor.moveToFirst()) {
            String name = cursor.getString(cursor.getColumnIndex("name"));
            String category = cursor.getString(cursor.getColumnIndex("category"));
            cursor.close();
            return new UnitTestCase(caseId, name, category);
        }

        cursor.close();
        return null;
!!!12017548.java!!!	getScrollData(in offset : int, in amount : int) : UnitTestCase
        SQLiteDatabase db = dbh.getWritableDatabase();
        Cursor cursor = db.rawQuery("select * from cases order by id asc limit ?,?",
                new String[] {String.valueOf(offset), String.valueOf(amount)});
        List<UnitTestCase> cases = new ArrayList<UnitTestCase>();
        while (cursor.moveToNext()) {
            Integer id = cursor.getInt(cursor.getColumnIndex("id"));
            String name = cursor.getString(cursor.getColumnIndex("name"));
            String category = cursor.getString(cursor.getColumnIndex("category"));
            cases.add(new UnitTestCase(id, name, category));
        }

        cursor.close();
        return cases;
!!!12017676.java!!!	getScrollCursorData(in offset : int, in amount : int) : Cursor
        SQLiteDatabase db = dbh.getWritableDatabase();
        return db.rawQuery("select id as _id, name, category from cases order by id asc limit ?,?",
                new String[] {String.valueOf(offset), String.valueOf(amount)});
!!!12017804.java!!!	getAllData() : UnitTestCase
        SQLiteDatabase db = dbh.getWritableDatabase();
        Cursor cursor = db.rawQuery("select * from cases order by id asc", null);
        List<UnitTestCase> cases = new ArrayList<UnitTestCase>();
        while (cursor.moveToNext()) {
            Integer id = cursor.getInt(cursor.getColumnIndex("id"));
            String name = cursor.getString(cursor.getColumnIndex("name"));
            String category = cursor.getString(cursor.getColumnIndex("category"));
            cases.add(new UnitTestCase(id, name, category));
        }

        cursor.close();
        return cases;
!!!12017932.java!!!	getAllCursorData() : Cursor
        SQLiteDatabase db = dbh.getWritableDatabase();
        return db.rawQuery("select id as _id, name, category from cases order by id asc", null);
!!!12018060.java!!!	getCount() : long
        SQLiteDatabase db = dbh.getWritableDatabase();
        Cursor cursor = db.rawQuery("select * from cases", null);
        long count = cursor.getLong(0);
        cursor.close();

        return count;
