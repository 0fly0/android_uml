class Secure
!!!4095372.java!!!	getMovedKeys(inout outKeySet : HashSet<String>) : void
            outKeySet.addAll(MOVED_TO_GLOBAL);
!!!4095500.java!!!	getString(inout resolver : ContentResolver, in name : String) : String
            return getStringForUser(resolver, name, UserHandle.myUserId());
!!!4095628.java!!!	getStringForUser(inout resolver : ContentResolver, in name : String, in userHandle : int) : String
            if (MOVED_TO_GLOBAL.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.Secure"
                        + " to android.provider.Settings.Global.");
                return Global.getStringForUser(resolver, name, userHandle);
            }

            if (MOVED_TO_LOCK_SETTINGS.contains(name)) {
                synchronized (Secure.class) {
                    if (sLockSettings == null) {
                        sLockSettings = ILockSettings.Stub.asInterface(
                                (IBinder) ServiceManager.getService("lock_settings"));
                        sIsSystemProcess = Process.myUid() == Process.SYSTEM_UID;
                    }
                }
                if (sLockSettings != null && !sIsSystemProcess) {
                    try {
                        return sLockSettings.getString(name, "0", userHandle);
                    } catch (RemoteException re) {
                        // Fall through
                    }
                }
            }

            return sNameValueCache.getStringForUser(resolver, name, userHandle);
!!!4095756.java!!!	putString(inout resolver : ContentResolver, in name : String, in value : String) : boolean
            return putStringForUser(resolver, name, value, UserHandle.myUserId());
!!!4095884.java!!!	putStringForUser(inout resolver : ContentResolver, in name : String, in value : String, in userHandle : int) : boolean
            if (MOVED_TO_GLOBAL.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.System"
                        + " to android.provider.Settings.Global");
                return Global.putStringForUser(resolver, name, value, userHandle);
            }
            return sNameValueCache.putStringForUser(resolver, name, value, userHandle);
!!!4096012.java!!!	getUriFor(in name : String) : Uri
            if (MOVED_TO_GLOBAL.contains(name)) {
                Log.w(TAG, "Setting " + name + " has moved from android.provider.Settings.Secure"
                        + " to android.provider.Settings.Global, returning global URI.");
                return Global.getUriFor(Global.CONTENT_URI, name);
            }
            return getUriFor(CONTENT_URI, name);
!!!4096140.java!!!	getInt(inout cr : ContentResolver, in name : String, in def : int) : int
            return getIntForUser(cr, name, def, UserHandle.myUserId());
!!!4096268.java!!!	getIntForUser(inout cr : ContentResolver, in name : String, in def : int, in userHandle : int) : int
            String v = getStringForUser(cr, name, userHandle);
            try {
                return v != null ? Integer.parseInt(v) : def;
            } catch (NumberFormatException e) {
                return def;
            }
!!!4096396.java!!!	getInt(inout cr : ContentResolver, in name : String) : int
            return getIntForUser(cr, name, UserHandle.myUserId());
!!!4096524.java!!!	getIntForUser(inout cr : ContentResolver, in name : String, in userHandle : int) : int
            String v = getStringForUser(cr, name, userHandle);
            try {
                return Integer.parseInt(v);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!4096652.java!!!	putInt(inout cr : ContentResolver, in name : String, in value : int) : boolean
            return putIntForUser(cr, name, value, UserHandle.myUserId());
!!!4096780.java!!!	putIntForUser(inout cr : ContentResolver, in name : String, in value : int, in userHandle : int) : boolean
            return putStringForUser(cr, name, Integer.toString(value), userHandle);
!!!4096908.java!!!	getLong(inout cr : ContentResolver, in name : String, in def : long) : long
            return getLongForUser(cr, name, def, UserHandle.myUserId());
!!!4097036.java!!!	getLongForUser(inout cr : ContentResolver, in name : String, in def : long, in userHandle : int) : long
            String valString = getStringForUser(cr, name, userHandle);
            long value;
            try {
                value = valString != null ? Long.parseLong(valString) : def;
            } catch (NumberFormatException e) {
                value = def;
            }
            return value;
!!!4097164.java!!!	getLong(inout cr : ContentResolver, in name : String) : long
            return getLongForUser(cr, name, UserHandle.myUserId());
!!!4097292.java!!!	getLongForUser(inout cr : ContentResolver, in name : String, in userHandle : int) : long
            String valString = getStringForUser(cr, name, userHandle);
            try {
                return Long.parseLong(valString);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!4097420.java!!!	putLong(inout cr : ContentResolver, in name : String, in value : long) : boolean
            return putLongForUser(cr, name, value, UserHandle.myUserId());
!!!4097548.java!!!	putLongForUser(inout cr : ContentResolver, in name : String, in value : long, in userHandle : int) : boolean
            return putStringForUser(cr, name, Long.toString(value), userHandle);
!!!4097676.java!!!	getFloat(inout cr : ContentResolver, in name : String, in def : float) : float
            return getFloatForUser(cr, name, def, UserHandle.myUserId());
!!!4097804.java!!!	getFloatForUser(inout cr : ContentResolver, in name : String, in def : float, in userHandle : int) : float
            String v = getStringForUser(cr, name, userHandle);
            try {
                return v != null ? Float.parseFloat(v) : def;
            } catch (NumberFormatException e) {
                return def;
            }
!!!4097932.java!!!	getFloat(inout cr : ContentResolver, in name : String) : float
            return getFloatForUser(cr, name, UserHandle.myUserId());
!!!4098060.java!!!	getFloatForUser(inout cr : ContentResolver, in name : String, in userHandle : int) : float
            String v = getStringForUser(cr, name, userHandle);
            if (v == null) {
                throw new SettingNotFoundException(name);
            }
            try {
                return Float.parseFloat(v);
            } catch (NumberFormatException e) {
                throw new SettingNotFoundException(name);
            }
!!!4098188.java!!!	putFloat(inout cr : ContentResolver, in name : String, in value : float) : boolean
            return putFloatForUser(cr, name, value, UserHandle.myUserId());
!!!4098316.java!!!	putFloatForUser(inout cr : ContentResolver, in name : String, in value : float, in userHandle : int) : boolean
            return putStringForUser(cr, name, Float.toString(value), userHandle);
!!!4098444.java!!!	isLocationProviderEnabled(inout cr : ContentResolver, in provider : String) : boolean
            return isLocationProviderEnabledForUser(cr, provider, UserHandle.myUserId());
!!!4098572.java!!!	isLocationProviderEnabledForUser(inout cr : ContentResolver, in provider : String, in userId : int) : boolean
            String allowedProviders = Settings.Secure.getStringForUser(cr,
                    LOCATION_PROVIDERS_ALLOWED, userId);
            return TextUtils.delimitedStringContains(allowedProviders, ',', provider);
!!!4098700.java!!!	setLocationProviderEnabled(inout cr : ContentResolver, in provider : String, inout enabled : boolean) : void
            setLocationProviderEnabledForUser(cr, provider, enabled, UserHandle.myUserId());
!!!4098828.java!!!	setLocationProviderEnabledForUser(inout cr : ContentResolver, in provider : String, inout enabled : boolean, in userId : int) : void
            // to ensure thread safety, we write the provider name with a '+' or '-'
            // and let the SettingsProvider handle it rather than reading and modifying
            // the list of enabled providers.
            if (enabled) {
                provider = "+" + provider;
            } else {
                provider = "-" + provider;
            }
            putStringForUser(cr, Settings.Secure.LOCATION_PROVIDERS_ALLOWED, provider,
                    userId);
