class CameraMetadata
!!!919180.cpp!!!	CameraMetadata(in entryCapacity : size_t, in dataCapacity : size_t = 10)
    mBuffer = allocate_camera_metadata(entryCapacity, dataCapacity);
!!!919308.cpp!!!	~CameraMetadata()
    clear();
!!!919564.cpp!!!	CameraMetadata(in other : CameraMetadata)
    mBuffer = clone_camera_metadata(other.mBuffer);
!!!919692.cpp!!!	operator =(in other : CameraMetadata) : CameraMetadata
    return operator=(other.mBuffer);
!!!919820.cpp!!!	operator =(in buffer : camera_metadata_t) : CameraMetadata
    if (CC_LIKELY(buffer != mBuffer)) {
        camera_metadata_t *newBuffer = clone_camera_metadata(buffer);
        clear();
        mBuffer = newBuffer;
    }
    return *this;
!!!919948.cpp!!!	release() : camera_metadata_t
    camera_metadata_t *released = mBuffer;
    mBuffer = NULL;
    return released;
!!!920076.cpp!!!	clear() : void
    if (mBuffer) {
        free_camera_metadata(mBuffer);
        mBuffer = NULL;
    }
!!!920204.cpp!!!	acquire(inout buffer : camera_metadata_t) : void
    clear();
    mBuffer = buffer;
!!!920332.cpp!!!	acquire(inout other : CameraMetadata) : void
    acquire(other.release());
!!!920460.cpp!!!	append(in other : CameraMetadata) : status_t
    return append_camera_metadata(mBuffer, other.mBuffer);
!!!920588.cpp!!!	entryCount() : size_t
    return (mBuffer == NULL) ? 0 :
            get_camera_metadata_entry_count(mBuffer);
!!!920716.cpp!!!	isEmpty() : bool
    return entryCount() == 0;
!!!920844.cpp!!!	sort() : status_t
    return sort_camera_metadata(mBuffer);
!!!920972.cpp!!!	update(in tag : uint32_t, in data : uint8_t, in data_count : size_t) : status_t
    status_t res;
    if ( (res = checkType(tag, TYPE_BYTE)) != OK) {
        return res;
    }
    return update(tag, (const void*)data, data_count);
!!!921100.cpp!!!	update(in tag : uint32_t, in data : int32_t, in data_count : size_t) : status_t
    status_t res;
    if ( (res = checkType(tag, TYPE_INT32)) != OK) {
        return res;
    }
    return update(tag, (const void*)data, data_count);
!!!921228.cpp!!!	update(in tag : uint32_t, in data : float, in data_count : size_t) : status_t
    status_t res;
    if ( (res = checkType(tag, TYPE_FLOAT)) != OK) {
        return res;
    }
    return update(tag, (const void*)data, data_count);
!!!921356.cpp!!!	update(in tag : uint32_t, in data : int64_t, in data_count : size_t) : status_t
    status_t res;
    if ( (res = checkType(tag, TYPE_INT64)) != OK) {
        return res;
    }
    return update(tag, (const void*)data, data_count);
!!!921484.cpp!!!	update(in tag : uint32_t, in data : double, in data_count : size_t) : status_t
    status_t res;
    if ( (res = checkType(tag, TYPE_DOUBLE)) != OK) {
        return res;
    }
    return update(tag, (const void*)data, data_count);
!!!921612.cpp!!!	update(in tag : uint32_t, in data : camera_metadata_rational_t, in data_count : size_t) : status_t
    status_t res;
    if ( (res = checkType(tag, TYPE_RATIONAL)) != OK) {
        return res;
    }
    return update(tag, (const void*)data, data_count);
!!!921740.cpp!!!	update(in tag : uint32_t, in string : String8) : status_t
    status_t res;
    if ( (res = checkType(tag, TYPE_BYTE)) != OK) {
        return res;
    }
    return update(tag, (const void*)string.string(), string.size());
!!!921996.cpp!!!	find(in tag : uint32_t) : camera_metadata_entry
    status_t res;
    camera_metadata_entry entry;
    res = find_camera_metadata_entry(mBuffer, tag, &entry);
    if (CC_UNLIKELY( res != OK )) {
        entry.count = 0;
        entry.data.u8 = NULL;
    }
    return entry;
!!!922124.cpp!!!	find(in tag : uint32_t) : camera_metadata_ro_entry
    status_t res;
    camera_metadata_ro_entry entry;
    res = find_camera_metadata_ro_entry(mBuffer, tag, &entry);
    if (CC_UNLIKELY( res != OK )) {
        entry.count = 0;
        entry.data.u8 = NULL;
    }
    return entry;
!!!922252.cpp!!!	erase(in tag : uint32_t) : status_t
    camera_metadata_entry_t entry;
    status_t res;
    res = find_camera_metadata_entry(mBuffer, tag, &entry);
    if (res == NAME_NOT_FOUND) {
        return OK;
    } else if (res != OK) {
        ALOGE("%s: Error looking for entry %s.%s (%x): %s %d",
                __FUNCTION__,
                get_camera_metadata_section_name(tag),
                get_camera_metadata_tag_name(tag), tag, strerror(-res), res);
        return res;
    }
    res = delete_camera_metadata_entry(mBuffer, entry.index);
    if (res != OK) {
        ALOGE("%s: Error deleting entry %s.%s (%x): %s %d",
                __FUNCTION__,
                get_camera_metadata_section_name(tag),
                get_camera_metadata_tag_name(tag), tag, strerror(-res), res);
    }
    return res;
!!!922380.cpp!!!	dump(in fd : int, in verbosity : int = 1, in indentation : int = 0) : void
    dump_indented_camera_metadata(mBuffer, fd, verbosity, indentation);
!!!922508.cpp!!!	checkType(in tag : uint32_t, in expectedType : uint8_t) : status_t
    int tagType = get_camera_metadata_tag_type(tag);
    if ( CC_UNLIKELY(tagType == -1)) {
        ALOGE("Update metadata entry: Unknown tag %d", tag);
        return INVALID_OPERATION;
    }
    if ( CC_UNLIKELY(tagType != expectedType) ) {
        ALOGE("Mismatched tag type when updating entry %s (%d) of type %s; "
                "got type %s data instead ",
                get_camera_metadata_tag_name(tag), tag,
                camera_metadata_type_names[tagType],
                camera_metadata_type_names[expectedType]);
        return INVALID_OPERATION;
    }
    return OK;
!!!922636.cpp!!!	update(in tag : uint32_t, in data : void, in data_count : size_t) : status_t
    status_t res;
    int type = get_camera_metadata_tag_type(tag);
    if (type == -1) {
        ALOGE("%s: Tag %d not found", __FUNCTION__, tag);
        return BAD_VALUE;
    }
    size_t data_size = calculate_camera_metadata_entry_data_size(type,
            data_count);

    res = resizeIfNeeded(1, data_size);

    if (res == OK) {
        camera_metadata_entry_t entry;
        res = find_camera_metadata_entry(mBuffer, tag, &entry);
        if (res == NAME_NOT_FOUND) {
            res = add_camera_metadata_entry(mBuffer,
                    tag, data, data_count);
        } else if (res == OK) {
            res = update_camera_metadata_entry(mBuffer,
                    entry.index, data, data_count, NULL);
        }
    }

    if (res != OK) {
        ALOGE("%s: Unable to update metadata entry %s.%s (%x): %s (%d)",
                __FUNCTION__, get_camera_metadata_section_name(tag),
                get_camera_metadata_tag_name(tag), tag, strerror(-res), res);
    }
    return res;
!!!922764.cpp!!!	resizeIfNeeded(in extraEntries : size_t, in extraData : size_t) : status_t
    if (mBuffer == NULL) {
        mBuffer = allocate_camera_metadata(extraEntries * 2, extraData * 2);
        if (mBuffer == NULL) {
            ALOGE("%s: Can't allocate larger metadata buffer", __FUNCTION__);
            return NO_MEMORY;
        }
    } else {
        size_t currentEntryCount = get_camera_metadata_entry_count(mBuffer);
        size_t currentEntryCap = get_camera_metadata_entry_capacity(mBuffer);
        size_t newEntryCount = currentEntryCount +
                extraEntries;
        newEntryCount = (newEntryCount > currentEntryCap) ?
                newEntryCount * 2 : currentEntryCap;

        size_t currentDataCount = get_camera_metadata_data_count(mBuffer);
        size_t currentDataCap = get_camera_metadata_data_capacity(mBuffer);
        size_t newDataCount = currentDataCount +
                extraData;
        newDataCount = (newDataCount > currentDataCap) ?
                newDataCount * 2 : currentDataCap;

        if (newEntryCount > currentEntryCap ||
                newDataCount > currentDataCap) {
            camera_metadata_t *oldBuffer = mBuffer;
            mBuffer = allocate_camera_metadata(newEntryCount,
                    newDataCount);
            if (mBuffer == NULL) {
                ALOGE("%s: Can't allocate larger metadata buffer", __FUNCTION__);
                return NO_MEMORY;
            }
            append_camera_metadata(mBuffer, oldBuffer);
            free_camera_metadata(oldBuffer);
        }
    }
    return OK;
