class ObjectAnimator
!!!2435596.java!!!	setPropertyName(in propertyName : String) : void
        // mValues could be null if this is being constructed piecemeal. Just record the
        // propertyName to be used later when setValues() is called if so.
        if (mValues != null) {
            PropertyValuesHolder valuesHolder = mValues[0];
            String oldName = valuesHolder.getPropertyName();
            valuesHolder.setPropertyName(propertyName);
            mValuesMap.remove(oldName);
            mValuesMap.put(propertyName, valuesHolder);
        }
        mPropertyName = propertyName;
        // New property/values/target should cause re-initialization prior to starting
        mInitialized = false;
!!!2435724.java!!!	setProperty(inout property : Property) : void
        // mValues could be null if this is being constructed piecemeal. Just record the
        // propertyName to be used later when setValues() is called if so.
        if (mValues != null) {
            PropertyValuesHolder valuesHolder = mValues[0];
            String oldName = valuesHolder.getPropertyName();
            valuesHolder.setProperty(property);
            mValuesMap.remove(oldName);
            mValuesMap.put(mPropertyName, valuesHolder);
        }
        if (mProperty != null) {
            mPropertyName = property.getName();
        }
        mProperty = property;
        // New property/values/target should cause re-initialization prior to starting
        mInitialized = false;
!!!2435852.java!!!	getPropertyName() : String
        return mPropertyName;
!!!2436108.java!!!	ObjectAnimator(inout target : Object, in propertyName : String)
        mTarget = target;
        setPropertyName(propertyName);
!!!2436236.java!!!	ObjectAnimator(inout target : T, inout property : Property)
        mTarget = target;
        setProperty(property);
!!!2436364.java!!!	ofInt(inout target : Object, in propertyName : String, inout  : int...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, propertyName);
        anim.setIntValues(values);
        return anim;
!!!2436492.java!!!	ofInt(inout target : T, inout property : Property, inout  : int...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, property);
        anim.setIntValues(values);
        return anim;
!!!2436620.java!!!	ofFloat(inout target : Object, in propertyName : String, inout  : float...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, propertyName);
        anim.setFloatValues(values);
        return anim;
!!!2436748.java!!!	ofFloat(inout target : T, inout property : Property, inout  : float...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, property);
        anim.setFloatValues(values);
        return anim;
!!!2436876.java!!!	ofObject(inout target : Object, in propertyName : String, inout evaluator : TypeEvaluator, inout  : Object...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, propertyName);
        anim.setObjectValues(values);
        anim.setEvaluator(evaluator);
        return anim;
!!!2437004.java!!!	ofObject(inout target : T, inout property : Property, inout evaluator : TypeEvaluator, inout  : V...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator(target, property);
        anim.setObjectValues(values);
        anim.setEvaluator(evaluator);
        return anim;
!!!2437132.java!!!	ofPropertyValuesHolder(inout target : Object, inout  : PropertyValuesHolder...values) : ObjectAnimator
        ObjectAnimator anim = new ObjectAnimator();
        anim.mTarget = target;
        anim.setValues(values);
        return anim;
!!!2437260.java!!!	setIntValues(inout  : int...values) : void
        if (mValues == null || mValues.length == 0) {
            // No values yet - this animator is being constructed piecemeal. Init the values with
            // whatever the current propertyName is
            if (mProperty != null) {
                setValues(PropertyValuesHolder.ofInt(mProperty, values));
            } else {
                setValues(PropertyValuesHolder.ofInt(mPropertyName, values));
            }
        } else {
            super.setIntValues(values);
        }
!!!2437388.java!!!	setFloatValues(inout  : float...values) : void
        if (mValues == null || mValues.length == 0) {
            // No values yet - this animator is being constructed piecemeal. Init the values with
            // whatever the current propertyName is
            if (mProperty != null) {
                setValues(PropertyValuesHolder.ofFloat(mProperty, values));
            } else {
                setValues(PropertyValuesHolder.ofFloat(mPropertyName, values));
            }
        } else {
            super.setFloatValues(values);
        }
!!!2437516.java!!!	setObjectValues(inout  : Object...values) : void
        if (mValues == null || mValues.length == 0) {
            // No values yet - this animator is being constructed piecemeal. Init the values with
            // whatever the current propertyName is
            if (mProperty != null) {
                setValues(PropertyValuesHolder.ofObject(mProperty, (TypeEvaluator)null, values));
            } else {
                setValues(PropertyValuesHolder.ofObject(mPropertyName, (TypeEvaluator)null, values));
            }
        } else {
            super.setObjectValues(values);
        }
!!!2437644.java!!!	start() : void
        if (DBG) {
            Log.d("ObjectAnimator", "Anim target, duration: " + mTarget + ", " + getDuration());
            for (int i = 0; i < mValues.length; ++i) {
                PropertyValuesHolder pvh = mValues[i];
                ArrayList<Keyframe> keyframes = pvh.mKeyframeSet.mKeyframes;
                Log.d("ObjectAnimator", "   Values[" + i + "]: " +
                    pvh.getPropertyName() + ", " + keyframes.get(0).getValue() + ", " +
                    keyframes.get(pvh.mKeyframeSet.mNumKeyframes - 1).getValue());
            }
        }
        super.start();
!!!2437772.java!!!	initAnimation() : void
        if (!mInitialized) {
            // mValueType may change due to setter/getter setup; do this before calling super.init(),
            // which uses mValueType to set up the default type evaluator.
            int numValues = mValues.length;
            for (int i = 0; i < numValues; ++i) {
                mValues[i].setupSetterAndGetter(mTarget);
            }
            super.initAnimation();
        }
!!!2437900.java!!!	setDuration(in duration : long) : ObjectAnimator
        super.setDuration(duration);
        return this;
!!!2438028.java!!!	getTarget() : Object
        return mTarget;
!!!2438156.java!!!	setTarget(inout target : Object) : void
        if (mTarget != target) {
            final Object oldTarget = mTarget;
            mTarget = target;
            if (oldTarget != null && target != null && oldTarget.getClass() == target.getClass()) {
                return;
            }
            // New target type should cause re-initialization prior to starting
            mInitialized = false;
        }
!!!2438284.java!!!	setupStartValues() : void
        initAnimation();
        int numValues = mValues.length;
        for (int i = 0; i < numValues; ++i) {
            mValues[i].setupStartValue(mTarget);
        }
!!!2438412.java!!!	setupEndValues() : void
        initAnimation();
        int numValues = mValues.length;
        for (int i = 0; i < numValues; ++i) {
            mValues[i].setupEndValue(mTarget);
        }
!!!2438540.java!!!	animateValue(in fraction : float) : void
        super.animateValue(fraction);
        int numValues = mValues.length;
        for (int i = 0; i < numValues; ++i) {
            mValues[i].setAnimatedValue(mTarget);
        }
!!!2438668.java!!!	clone() : ObjectAnimator
        final ObjectAnimator anim = (ObjectAnimator) super.clone();
        return anim;
!!!2438796.java!!!	toString() : String
        String returnVal = "ObjectAnimator@" + Integer.toHexString(hashCode()) + ", target " +
            mTarget;
        if (mValues != null) {
            for (int i = 0; i < mValues.length; ++i) {
                returnVal += "\n    " + mValues[i].toString();
            }
        }
        return returnVal;
