class StreamElementParser
!!!12670348.java!!!	parseStartTag(inout parser : XmlPullParser) : ElementBase
            mElement = new StreamElement();

            String value;
            try {
                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_TYPE);
                if (value != null) {
                    if (SmoothStreamingConstants.KEY_TYPE_AUDIO.equalsIgnoreCase(value)) {
                        mElement.setType(StreamType.STREAM_AUDIO);
                    } else if (SmoothStreamingConstants.KEY_TYPE_VIDEO.equalsIgnoreCase(value)) {
                        mElement.setType(StreamType.STREAM_VIDEO);
                    } else if (SmoothStreamingConstants.KEY_TYPE_TEXT.equalsIgnoreCase(value)) {
                        mElement.setType(StreamType.STREAM_TEXT);
                    } else {
                        throw new SmoothStreamingParseException(
                                "Invalid key value[" + value + "]");
                    }
                }

                // Required
                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_SUB_TYPE);
                if (value != null) {
                    mElement.setSubType(value);
                } else if (mElement.getType() == StreamType.STREAM_TEXT) {
                    throw new SmoothStreamingMissingFieldException(
                            SmoothStreamingConstants.KEY_SUB_TYPE);
                }

                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_TIME_SCALE);
                // If not exist, use parent's time scale?
                if (value != null) {
                    mElement.setTimeScale(Long.parseLong(value));
                }

                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_NAME);
                if (value != null) {
                    mElement.setName(value);
                }

                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_CHUNKS);
                if (value != null) {
                    mElement.setChunks(Integer.parseInt(value));
                }

                value = parser.getAttributeValue(
                        null, SmoothStreamingConstants.KEY_QUALITY_LEVELS);
                if (value != null) {
                    mElement.setQualityLevels(Integer.parseInt(value));
                }

                // Required
                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_URL);
                if (value != null) {
                    mElement.setUrl(value);
                } else {
                    throw new SmoothStreamingMissingFieldException(
                            SmoothStreamingConstants.KEY_URL);
                }

                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_MAX_WIDTH);
                if (value != null) {
                    if (mElement.getType() != StreamType.STREAM_VIDEO) {
                        throw new SmoothStreamingMissingFieldException(
                                SmoothStreamingConstants.KEY_MAX_WIDTH);
                    }
                    mElement.setMaxWidth(Integer.parseInt(value));
                }

                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_MAX_HEIGHT);
                if (value != null) {
                    if (mElement.getType() != StreamType.STREAM_VIDEO) {
                        throw new SmoothStreamingMissingFieldException(
                                SmoothStreamingConstants.KEY_MAX_HEIGHT);
                    }
                    mElement.setMaxHeight(Integer.parseInt(value));
                }

                value = parser.getAttributeValue(null, SmoothStreamingConstants.KEY_DISPLAY_WIDTH);
                if (value != null) {
                    if (mElement.getType() != StreamType.STREAM_VIDEO) {
                        throw new SmoothStreamingMissingFieldException(
                                SmoothStreamingConstants.KEY_DISPLAY_WIDTH);
                    }
                    mElement.setDisplayWidth(Integer.parseInt(value));
                }

                value = parser.getAttributeValue(
                        null, SmoothStreamingConstants.KEY_DISPLAY_HEIGHT);
                if (value != null) {
                    if (mElement.getType() != StreamType.STREAM_VIDEO) {
                        throw new SmoothStreamingMissingFieldException(
                                SmoothStreamingConstants.KEY_DISPLAY_HEIGHT);
                    }
                    mElement.setDisplayHeight(Integer.parseInt(value));
                }

                value = parser.getAttributeValue(
                        null, SmoothStreamingConstants.KEY_PARENT_STREAM_INDEX);
                if (value != null) {
                    mElement.setParentStreamIndex(value);
                }

                value = parser.getAttributeValue(
                        null, SmoothStreamingConstants.KEY_MANIFEST_OUTPUT);
                if (value != null) {
                    if (SmoothStreamingConstants.KEY_TRUE.equalsIgnoreCase(value)) {
                        mElement.setManifestOutput(true);
                    } else if (SmoothStreamingConstants.KEY_FALSE.equalsIgnoreCase(value)) {
                        mElement.setManifestOutput(false);
                    } else {
                        throw new SmoothStreamingParseException("Invalid boolean type["
                                + SmoothStreamingConstants.KEY_MANIFEST_OUTPUT + "]");
                    }
                }
            } catch (NumberFormatException e) {
                throw new SmoothStreamingParseException(e);
            }

            // If needs vendor specific attribute add them here.

            return mElement;
!!!12670604.java!!!	parseEndTag(inout parser : XmlPullParser) : ElementBase
            return mElement;
