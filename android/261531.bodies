class CopyOnWriteArrayList
!!!1508379.java!!!	CopyOnWriteArrayList()
        elements = EmptyArray.OBJECT;
!!!1508507.java!!!	CopyOnWriteArrayList(inout collection : Collection)
        this((E[]) collection.toArray());
!!!1508635.java!!!	CopyOnWriteArrayList(inout array : E)
        this.elements = Arrays.copyOf(array, array.length, Object[].class);
!!!1508763.java!!!	clone() : Object
        try {
            CopyOnWriteArrayList result = (CopyOnWriteArrayList) super.clone();
            result.elements = result.elements.clone();
            return result;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!1508891.java!!!	size() : int
        return elements.length;
!!!1509019.java!!!	get(in index : int) : E
        return (E) elements[index];
!!!1509147.java!!!	contains(inout o : Object) : boolean
        return indexOf(o) != -1;
!!!1509275.java!!!	containsAll(inout collection : Collection) : boolean
        Object[] snapshot = elements;
        return containsAll(collection, snapshot, 0, snapshot.length);
!!!1509403.java!!!	containsAll(inout collection : Collection, inout snapshot : Object, in from : int, in to : int) : boolean
        for (Object o : collection) {
            if (indexOf(o, snapshot, from, to) == -1) {
                return false;
            }
        }
        return true;
!!!1509531.java!!!	indexOf(inout object : E, in from : int) : int
        Object[] snapshot = elements;
        return indexOf(object, snapshot, from, snapshot.length);
!!!1509659.java!!!	indexOf(inout object : Object) : int
        Object[] snapshot = elements;
        return indexOf(object, snapshot, 0, snapshot.length);
!!!1509787.java!!!	lastIndexOf(inout object : E, in to : int) : int
        Object[] snapshot = elements;
        return lastIndexOf(object, snapshot, 0, to);
!!!1509915.java!!!	lastIndexOf(inout object : Object) : int
        Object[] snapshot = elements;
        return lastIndexOf(object, snapshot, 0, snapshot.length);
!!!1510043.java!!!	isEmpty() : boolean
        return elements.length == 0;
!!!1510171.java!!!	iterator() : Iterator
        Object[] snapshot = elements;
        return new CowIterator<E>(snapshot, 0, snapshot.length);
!!!1510299.java!!!	listIterator(in index : int) : ListIterator
        Object[] snapshot = elements;
        if (index < 0 || index > snapshot.length) {
            throw new IndexOutOfBoundsException("index=" + index + ", length=" + snapshot.length);
        }
        CowIterator<E> result = new CowIterator<E>(snapshot, 0, snapshot.length);
        result.index = index;
        return result;
!!!1510427.java!!!	listIterator() : ListIterator
        Object[] snapshot = elements;
        return new CowIterator<E>(snapshot, 0, snapshot.length);
!!!1510555.java!!!	subList(in from : int, in to : int) : List
        Object[] snapshot = elements;
        if (from < 0 || from > to || to > snapshot.length) {
            throw new IndexOutOfBoundsException("from=" + from + ", to=" + to +
                    ", list size=" + snapshot.length);
        }
        return new CowSubList(snapshot, from, to);
!!!1510683.java!!!	toArray() : Object
        return elements.clone();
!!!1510811.java!!!	toArray(inout contents : T) : T
        Object[] snapshot = elements;
        if (snapshot.length > contents.length) {
            return (T[]) Arrays.copyOf(snapshot, snapshot.length, contents.getClass());
        }
        System.arraycopy(snapshot, 0, contents, 0, snapshot.length);
        if (snapshot.length < contents.length) {
            contents[snapshot.length] = null;
        }
        return contents;
!!!1510939.java!!!	equals(inout other : Object) : boolean
        if (other instanceof CopyOnWriteArrayList) {
            return this == other
                    || Arrays.equals(elements, ((CopyOnWriteArrayList<?>) other).elements);
        } else if (other instanceof List) {
            Object[] snapshot = elements;
            Iterator<?> i = ((List<?>) other).iterator();
            for (Object o : snapshot) {
                if (!i.hasNext() || !Objects.equal(o, i.next())) {
                    return false;
                }
            }
            return !i.hasNext();
        } else {
            return false;
        }
!!!1511067.java!!!	hashCode() : int
        return Arrays.hashCode(elements);
!!!1511195.java!!!	toString() : String
        return Arrays.toString(elements);
!!!1511323.java!!!	add(inout e : E) : boolean
        Object[] newElements = new Object[elements.length + 1];
        System.arraycopy(elements, 0, newElements, 0, elements.length);
        newElements[elements.length] = e;
        elements = newElements;
        return true;
!!!1511451.java!!!	add(in index : int, inout e : E) : void
        Object[] newElements = new Object[elements.length + 1];
        System.arraycopy(elements, 0, newElements, 0, index);
        newElements[index] = e;
        System.arraycopy(elements, index, newElements, index + 1, elements.length - index);
        elements = newElements;
!!!1511579.java!!!	addAll(inout collection : Collection) : boolean
        return addAll(elements.length, collection);
!!!1511707.java!!!	addAll(in index : int, inout collection : Collection) : boolean
        Object[] toAdd = collection.toArray();
        Object[] newElements = new Object[elements.length + toAdd.length];
        System.arraycopy(elements, 0, newElements, 0, index);
        System.arraycopy(toAdd, 0, newElements, index, toAdd.length);
        System.arraycopy(elements, index,
                newElements, index + toAdd.length, elements.length - index);
        elements = newElements;
        return toAdd.length > 0;
!!!1511835.java!!!	addAllAbsent(inout collection : Collection) : int
        Object[] toAdd = collection.toArray();
        Object[] newElements = new Object[elements.length + toAdd.length];
        System.arraycopy(elements, 0, newElements, 0, elements.length);
        int addedCount = 0;
        for (Object o : toAdd) {
            if (indexOf(o, newElements, 0, elements.length + addedCount) == -1) {
                newElements[elements.length + addedCount++] = o;
            }
        }
        if (addedCount < toAdd.length) {
            newElements = Arrays.copyOfRange(
                    newElements, 0, elements.length + addedCount); // trim to size
        }
        elements = newElements;
        return addedCount;
!!!1511963.java!!!	addIfAbsent(inout object : E) : boolean
        if (contains(object)) {
            return false;
        }
        add(object);
        return true;
!!!1512091.java!!!	clear() : void
        elements = EmptyArray.OBJECT;
!!!1512219.java!!!	remove(in index : int) : E
        @SuppressWarnings("unchecked")
        E removed = (E) elements[index];
        removeRange(index, index + 1);
        return removed;
!!!1512347.java!!!	remove(inout o : Object) : boolean
        int index = indexOf(o);
        if (index == -1) {
            return false;
        }
        remove(index);
        return true;
!!!1512475.java!!!	removeAll(inout collection : Collection) : boolean
        return removeOrRetain(collection, false, 0, elements.length) != 0;
!!!1512603.java!!!	retainAll(inout collection : Collection) : boolean
        return removeOrRetain(collection, true, 0, elements.length) != 0;
!!!1512731.java!!!	removeOrRetain(inout collection : Collection, inout retain : boolean, in from : int, in to : int) : int
        for (int i = from; i < to; i++) {
            if (collection.contains(elements[i]) == retain) {
                continue;
            }

            /*
             * We've encountered an element that must be removed! Create a new
             * array and copy in the surviving elements one by one.
             */
            Object[] newElements = new Object[elements.length - 1];
            System.arraycopy(elements, 0, newElements, 0, i);
            int newSize = i;
            for (int j = i + 1; j < to; j++) {
                if (collection.contains(elements[j]) == retain) {
                    newElements[newSize++] = elements[j];
                }
            }

            /*
             * Copy the elements after 'to'. This is only useful for sub lists,
             * where 'to' will be less than elements.length.
             */
            System.arraycopy(elements, to, newElements, newSize, elements.length - to);
            newSize += (elements.length - to);

            if (newSize < newElements.length) {
                newElements = Arrays.copyOfRange(newElements, 0, newSize); // trim to size
            }
            int removed = elements.length - newElements.length;
            elements = newElements;
            return removed;
        }

        // we made it all the way through the loop without making any changes
        return 0;
!!!1512859.java!!!	set(in index : int, inout e : E) : E
        Object[] newElements = elements.clone();
        @SuppressWarnings("unchecked")
        E result = (E) newElements[index];
        newElements[index] = e;
        elements = newElements;
        return result;
!!!1512987.java!!!	removeRange(in from : int, in to : int) : void
        Object[] newElements = new Object[elements.length - (to - from)];
        System.arraycopy(elements, 0, newElements, 0, from);
        System.arraycopy(elements, to, newElements, from, elements.length - to);
        elements = newElements;
!!!1513115.java!!!	lastIndexOf(inout o : Object, inout data : Object, in from : int, in to : int) : int
        if (o == null) {
            for (int i = to - 1; i >= from; i--) {
                if (data[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = to - 1; i >= from; i--) {
                if (o.equals(data[i])) {
                    return i;
                }
            }
        }
        return -1;
!!!1513243.java!!!	indexOf(inout o : Object, inout data : Object, in from : int, in to : int) : int
        if (o == null) {
            for (int i = from; i < to; i++) {
                if (data[i] == null) {
                    return i;
                }
            }
        } else {
            for (int i = from; i < to; i++) {
                if (o.equals(data[i])) {
                    return i;
                }
            }
        }
        return -1;
!!!1513371.java!!!	getArray() : Object
        // CopyOnWriteArraySet needs this.
        return elements;
!!!1518107.java!!!	writeObject(inout out : ObjectOutputStream) : void
        Object[] snapshot = elements;
        out.defaultWriteObject();
        out.writeInt(snapshot.length);
        for (Object o : snapshot) {
            out.writeObject(o);
        }
!!!1518235.java!!!	readObject(inout in : ObjectInputStream) : void
        in.defaultReadObject();
        Object[] snapshot = new Object[in.readInt()];
        for (int i = 0; i < snapshot.length; i++) {
            snapshot[i] = in.readObject();
        }
        elements = snapshot;
