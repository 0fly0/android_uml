class HprofData
!!!15467148.java!!!	HprofData(inout stackTraces : Map<StackTrace, int[]>)
        if (stackTraces == null) {
            throw new NullPointerException("stackTraces == null");
        }
        this.stackTraces = stackTraces;
!!!15467276.java!!!	getStartMillis() : long
        return startMillis;
!!!15467404.java!!!	setStartMillis(in startMillis : long) : void
        this.startMillis = startMillis;
!!!15467532.java!!!	getFlags() : int
        return flags;
!!!15467660.java!!!	setFlags(in flags : int) : void
        this.flags = flags;
!!!15467788.java!!!	getDepth() : int
        return depth;
!!!15467916.java!!!	setDepth(in depth : int) : void
        this.depth = depth;
!!!15468044.java!!!	getThreadHistory() : ThreadEvent
        return Collections.unmodifiableList(threadHistory);
!!!15468172.java!!!	getSamples() : Sample
        Set<Sample> samples = new HashSet<Sample>(stackTraces.size());
        for (Entry<StackTrace, int[]> e : stackTraces.entrySet()) {
            StackTrace stackTrace = e.getKey();
            int countCell[] = e.getValue();
            int count = countCell[0];
            Sample sample = new Sample(stackTrace, count);
            samples.add(sample);
        }
        return samples;
!!!15468300.java!!!	addThreadEvent(inout event : ThreadEvent) : void
        if (event == null) {
            throw new NullPointerException("event == null");
        }
        ThreadEvent old = threadIdToThreadEvent.put(event.threadId, event);
        switch (event.type) {
            case START:
                if (old != null) {
                    throw new IllegalArgumentException("ThreadEvent already registered for id "
                                                       + event.threadId);
                }
                break;
            case END:
                // Do not assert that the END_THREAD matches a
                // START_THREAD unless in strict mode. While thhis
                // hold true in the binary hprof BinaryHprofWriter
                // produces, it is not true of hprof files created
                // by the RI. However, if there is an event
                // already registed for a thread id, it should be
                // the matching start, not a duplicate end.
                if (old != null && old.type == ThreadEventType.END) {
                    throw new IllegalArgumentException("Duplicate ThreadEvent.end for id "
                                                       + event.threadId);
                }
                break;
        }
        threadHistory.add(event);
!!!15468428.java!!!	addStackTrace(inout stackTrace : StackTrace, inout countCell : int) : void
        if (!threadIdToThreadEvent.containsKey(stackTrace.threadId)) {
            throw new IllegalArgumentException("Unknown thread id " + stackTrace.threadId);
        }
        int[] old = stackTraces.put(stackTrace, countCell);
        if (old != null) {
            throw new IllegalArgumentException("StackTrace already registered for id "
                                               + stackTrace.stackTraceId + ":\n" + stackTrace);
        }
