class WifiConfigUiForSetupWizardXL
!!!14162060.java!!!	WifiConfigUiForSetupWizardXL(inout activity : WifiSettingsForSetupWizardXL, inout parent : ViewGroup, inout accessPoint : AccessPoint, inout edit : boolean)
        mActivity = activity;
        mConnectButton = (Button)activity.findViewById(R.id.wifi_setup_connect);
        mCancelButton = (Button)activity.findViewById(R.id.wifi_setup_cancel);
        mAccessPoint = accessPoint;
        mEdit = edit;
        mInflater = (LayoutInflater)activity.getSystemService(Context.LAYOUT_INFLATER_SERVICE);

        mView = mInflater.inflate(R.layout.wifi_config_ui_for_setup_wizard, parent, true);
        mController = new WifiConfigController(this, mView, mAccessPoint, edit);

        mInputMethodManager = (InputMethodManager)
                activity.getSystemService(Context.INPUT_METHOD_SERVICE);

        if (mView.findViewById(R.id.security_fields).getVisibility() == View.VISIBLE) {
            requestFocusAndShowKeyboard(R.id.password);
        } else if (mView.findViewById(R.id.type_ssid).getVisibility() == View.VISIBLE) {
            // Add Network flow.
            requestFocusAndShowKeyboard(R.id.ssid);
        }
!!!14162188.java!!!	requestFocusAndShowKeyboard(in editViewId : int) : void
        // Set Focus to password View.
        final View viewToBeFocused = mView.findViewById(editViewId);
        if (viewToBeFocused == null) {
            Log.w(TAG, "password field to be focused not found.");
        } else if (!(viewToBeFocused instanceof EditText)) {
            Log.w(TAG, "password field is not EditText");
        } else {
            if (viewToBeFocused.isFocused()) {
                Log.i(TAG, "Already focused");
                if (!mInputMethodManager.showSoftInput(viewToBeFocused, 0)) {
                    Log.w(TAG, "Failed to show SoftInput");
                }
            } else {
                // After acquiring the focus, we show software keyboard.
                viewToBeFocused.setOnFocusChangeListener(this);
                final boolean requestFocusResult = viewToBeFocused.requestFocus();
                Log.i(TAG, String.format("Focus request: %s",
                        (requestFocusResult ? "successful" : "failed")));
                if (!requestFocusResult) {
                    viewToBeFocused.setOnFocusChangeListener(null);
                }
            }
        }
!!!14162316.java!!!	getView() : View
        return mView;
!!!14162444.java!!!	getAccessPoint() : AccessPoint
        return mAccessPoint;
!!!14162572.java!!!	getController() : WifiConfigController
        return mController;
!!!14162700.java!!!	isEdit() : boolean
        return mEdit;
!!!14162828.java!!!	getLayoutInflater() : LayoutInflater
        return mInflater;
!!!14162956.java!!!	getSubmitButton() : Button
        return mConnectButton;
!!!14163084.java!!!	getForgetButton() : Button
        return null;
!!!14163212.java!!!	getCancelButton() : Button
        return mCancelButton;
!!!14163340.java!!!	setSubmitButton(inout text : CharSequence) : void
        mConnectButton.setVisibility(View.VISIBLE);
        mConnectButton.setText(text);
!!!14163468.java!!!	setForgetButton(inout text : CharSequence) : void
        // In XL setup screen, we won't show Forget button for simplifying the UI.
!!!14163596.java!!!	setCancelButton(inout text : CharSequence) : void
        mCancelButton.setVisibility(View.VISIBLE);
        // We don't want "cancel" label given from caller.
        // mCancelButton.setText(text);
!!!14163724.java!!!	getContext() : Context
        return mActivity;
!!!14163852.java!!!	setTitle(in id : int) : void
        Log.d(TAG, "Ignoring setTitle");
!!!14163980.java!!!	setTitle(inout title : CharSequence) : void
        Log.d(TAG, "Ignoring setTitle");
!!!14164364.java!!!	onFocusChange(inout view : View, inout hasFocus : boolean) : void
        view.setOnFocusChangeListener(null);
        if (hasFocus) {
            mHandler.post(new FocusRunnable(view));
        }
