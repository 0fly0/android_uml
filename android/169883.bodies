class HttpCookie
!!!548891.java!!!	domainMatches(inout domainPattern : String, inout host : String) : boolean
        if (domainPattern == null || host == null) {
            return false;
        }

        String a = host.toLowerCase(Locale.US);
        String b = domainPattern.toLowerCase(Locale.US);

        /*
         * From the spec: "both host names are IP addresses and their host name strings match
         * exactly; or both host names are FQDN strings and their host name strings match exactly"
         */
        if (a.equals(b) && (isFullyQualifiedDomainName(a, 0) || InetAddress.isNumeric(a))) {
            return true;
        }
        if (!isFullyQualifiedDomainName(a, 0)) {
            return b.equals(".local");
        }

        /*
         * Not in the spec! If prefixing a hostname with "." causes it to equal the domain pattern,
         * then it should match. This is necessary so that the pattern ".google.com" will match the
         * host "google.com".
         */
        if (b.length() == 1 + a.length()
                && b.startsWith(".")
                && b.endsWith(a)
                && isFullyQualifiedDomainName(b, 1)) {
            return true;
        }

        /*
         * From the spec: "A is a HDN string and has the form NB, where N is a
         * non-empty name string, B has the form .B', and B' is a HDN string.
         * (So, x.y.com domain-matches .Y.com but not Y.com.)
         */
        return a.length() > b.length()
                && a.endsWith(b)
                && ((b.startsWith(".") && isFullyQualifiedDomainName(b, 1)) || b.equals(".local"));
!!!549019.java!!!	pathMatches(inout cookie : HttpCookie, inout uri : URI) : boolean
        String uriPath = matchablePath(uri.getPath());
        String cookiePath = matchablePath(cookie.getPath());
        return uriPath.startsWith(cookiePath);
!!!549147.java!!!	secureMatches(inout cookie : HttpCookie, inout uri : URI) : boolean
        return !cookie.getSecure() || "https".equalsIgnoreCase(uri.getScheme());
!!!549275.java!!!	portMatches(inout cookie : HttpCookie, inout uri : URI) : boolean
        if (cookie.getPortlist() == null) {
            return true;
        }
        return Arrays.asList(cookie.getPortlist().split(","))
                .contains(Integer.toString(uri.getEffectivePort()));
!!!549403.java!!!	matchablePath(inout path : String) : String
        if (path == null) {
            return "/";
        } else if (path.endsWith("/")) {
            return path;
        } else {
            return path + "/";
        }
!!!549531.java!!!	isFullyQualifiedDomainName(inout s : String, in firstCharacter : int) : boolean
        int dotPosition = s.indexOf('.', firstCharacter + 1);
        return dotPosition != -1 && dotPosition < s.length() - 1;
!!!549659.java!!!	parse(inout header : String) : List
        return new CookieParser(header).parse();
!!!550811.java!!!	HttpCookie(inout name : String, inout value : String)
        String ntrim = name.trim(); // erase leading and trailing whitespace
        if (!isValidName(ntrim)) {
            throw new IllegalArgumentException("Invalid name: " + name);
        }

        this.name = ntrim;
        this.value = value;
!!!550939.java!!!	isValidName(inout n : String) : boolean
        // name cannot be empty or begin with '$' or equals the reserved
        // attributes (case-insensitive)
        boolean isValid = !(n.length() == 0 || n.startsWith("$")
                || RESERVED_NAMES.contains(n.toLowerCase(Locale.US)));
        if (isValid) {
            for (int i = 0; i < n.length(); i++) {
                char nameChar = n.charAt(i);
                // name must be ASCII characters and cannot contain ';', ',' and
                // whitespace
                if (nameChar < 0
                        || nameChar >= 127
                        || nameChar == ';'
                        || nameChar == ','
                        || (Character.isWhitespace(nameChar) && nameChar != ' ')) {
                    isValid = false;
                    break;
                }
            }
        }
        return isValid;
!!!551067.java!!!	getComment() : String
        return comment;
!!!551195.java!!!	getCommentURL() : String
        return commentURL;
!!!551323.java!!!	getDiscard() : boolean
        return discard;
!!!551451.java!!!	getDomain() : String
        return domain;
!!!551579.java!!!	getMaxAge() : long
        return maxAge;
!!!551707.java!!!	getName() : String
        return name;
!!!551835.java!!!	getPath() : String
        return path;
!!!551963.java!!!	getPortlist() : String
        return portList;
!!!552091.java!!!	getSecure() : boolean
        return secure;
!!!552219.java!!!	getValue() : String
        return value;
!!!552347.java!!!	getVersion() : int
        return version;
!!!552475.java!!!	hasExpired() : boolean
        // -1 indicates the cookie will persist until browser shutdown
        // so the cookie is not expired.
        if (maxAge == -1l) {
            return false;
        }

        boolean expired = false;
        if (maxAge <= 0l) {
            expired = true;
        }
        return expired;
!!!552603.java!!!	setComment(inout comment : String) : void
        this.comment = comment;
!!!552731.java!!!	setCommentURL(inout commentURL : String) : void
        this.commentURL = commentURL;
!!!552859.java!!!	setDiscard(inout discard : boolean) : void
        this.discard = discard;
!!!552987.java!!!	setDomain(inout pattern : String) : void
        domain = pattern == null ? null : pattern.toLowerCase(Locale.US);
!!!553115.java!!!	setMaxAge(in deltaSeconds : long) : void
        maxAge = deltaSeconds;
!!!553243.java!!!	setExpires(inout expires : Date) : void
        maxAge = (expires.getTime() - System.currentTimeMillis()) / 1000;
!!!553371.java!!!	setPath(inout path : String) : void
        this.path = path;
!!!553499.java!!!	setPortlist(inout portList : String) : void
        this.portList = portList;
!!!553627.java!!!	setSecure(inout secure : boolean) : void
        this.secure = secure;
!!!553755.java!!!	setValue(inout value : String) : void
        // FIXME: According to spec, version 0 cookie value does not allow many
        // symbols. But RI does not implement it. Follow RI temporarily.
        this.value = value;
!!!553883.java!!!	setVersion(in newVersion : int) : void
        if (newVersion != 0 && newVersion != 1) {
            throw new IllegalArgumentException("Bad version: " + newVersion);
        }
        version = newVersion;
!!!554011.java!!!	clone() : Object
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError();
        }
!!!554139.java!!!	equals(inout object : Object) : boolean
        if (object == this) {
            return true;
        }
        if (object instanceof HttpCookie) {
            HttpCookie that = (HttpCookie) object;
            return name.equalsIgnoreCase(that.getName())
                    && (domain != null ? domain.equalsIgnoreCase(that.domain) : that.domain == null)
                    && Objects.equal(path, that.path);
        }
        return false;
!!!554267.java!!!	hashCode() : int
        return name.toLowerCase(Locale.US).hashCode()
                + (domain == null ? 0 : domain.toLowerCase(Locale.US).hashCode())
                + (path == null ? 0 : path.hashCode());
!!!554395.java!!!	toString() : String
        if (version == 0) {
            return name + "=" + value;
        }

        StringBuilder result = new StringBuilder()
                .append(name)
                .append("=")
                .append("\"")
                .append(value)
                .append("\"");
        appendAttribute(result, "Path", path);
        appendAttribute(result, "Domain", domain);
        appendAttribute(result, "Port", portList);
        return result.toString();
!!!554523.java!!!	appendAttribute(inout builder : StringBuilder, inout name : String, inout value : String) : void
        if (value != null && builder != null) {
            builder.append(";$");
            builder.append(name);
            builder.append("=\"");
            builder.append(value);
            builder.append("\"");
        }
