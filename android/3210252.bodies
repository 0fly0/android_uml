class PieChartView
!!!14133516.java!!!	PieChartView(inout context : Context)
        this(context, null);
!!!14133644.java!!!	PieChartView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!14133772.java!!!	PieChartView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        mPaintOutline.setColor(Color.BLACK);
        mPaintOutline.setStyle(Style.STROKE);
        mPaintOutline.setStrokeWidth(3f * getResources().getDisplayMetrics().density);
        mPaintOutline.setAntiAlias(true);

        mSideWidth = (int) (20 * getResources().getDisplayMetrics().density);

        setWillNotDraw(false);
!!!14133900.java!!!	buildFillPaint(in color : int, inout res : Resources) : Paint
        final Paint paint = new Paint();

        paint.setColor(color);
        paint.setStyle(Style.FILL_AND_STROKE);
        paint.setAntiAlias(true);

        if (FILL_GRADIENT) {
            final int width = (int) (280 * res.getDisplayMetrics().density);
            paint.setShader(new RadialGradient(0, 0, width, color, darken(color), TileMode.MIRROR));
        }

        return paint;
!!!14134028.java!!!	setOriginAngle(in originAngle : int) : void
        mOriginAngle = originAngle;
!!!14134156.java!!!	addSlice(in value : long, in color : int) : void
        mSlices.add(new Slice(value, color));
!!!14134284.java!!!	removeAllSlices() : void
        mSlices.clear();
!!!14134412.java!!!	onLayout(inout changed : boolean, in left : int, in top : int, in right : int, in bottom : int) : void
        final float centerX = getWidth() / 2;
        final float centerY = getHeight() / 2;

        mMatrix.reset();
        mMatrix.postScale(0.665f, 0.95f, centerX, centerY);
        mMatrix.postRotate(-40, centerX, centerY);

        generatePath();
!!!14134540.java!!!	generatePath() : void
        if (LOGD) Log.d(TAG, "generatePath()");

        long total = 0;
        for (Slice slice : mSlices) {
            slice.path.reset();
            slice.pathSide.reset();
            slice.pathOutline.reset();
            total += slice.value;
        }

        mPathSide.reset();
        mPathSideOutline.reset();
        mPathOutline.reset();

        // bail when not enough stats to render
        if (total == 0) {
            invalidate();
            return;
        }

        final int width = getWidth();
        final int height = getHeight();

        final RectF rect = new RectF(0, 0, width, height);
        final RectF rectSide = new RectF();
        rectSide.set(rect);
        rectSide.offset(-mSideWidth, 0);

        mPathSide.addOval(rectSide, Direction.CW);
        mPathSideOutline.addOval(rectSide, Direction.CW);
        mPathOutline.addOval(rect, Direction.CW);

        int startAngle = mOriginAngle;
        for (Slice slice : mSlices) {
            final int sweepAngle = (int) (slice.value * 360 / total);
            final int endAngle = startAngle + sweepAngle;

            final float startAngleMod = startAngle % 360;
            final float endAngleMod = endAngle % 360;
            final boolean startSideVisible = startAngleMod > 90 && startAngleMod < 270;
            final boolean endSideVisible = endAngleMod > 90 && endAngleMod < 270;

            // draw slice
            slice.path.moveTo(rect.centerX(), rect.centerY());
            slice.path.arcTo(rect, startAngle, sweepAngle);
            slice.path.lineTo(rect.centerX(), rect.centerY());

            if (startSideVisible || endSideVisible) {

                // when start is beyond horizon, push until visible
                final float startAngleSide = startSideVisible ? startAngle : 450;
                final float endAngleSide = endSideVisible ? endAngle : 270;
                final float sweepAngleSide = endAngleSide - startAngleSide;

                // draw slice side
                slice.pathSide.moveTo(rect.centerX(), rect.centerY());
                slice.pathSide.arcTo(rect, startAngleSide, 0);
                slice.pathSide.rLineTo(-mSideWidth, 0);
                slice.pathSide.arcTo(rectSide, startAngleSide, sweepAngleSide);
                slice.pathSide.rLineTo(mSideWidth, 0);
                slice.pathSide.arcTo(rect, endAngleSide, -sweepAngleSide);
            }

            // draw slice outline
            slice.pathOutline.moveTo(rect.centerX(), rect.centerY());
            slice.pathOutline.arcTo(rect, startAngle, 0);
            if (startSideVisible) {
                slice.pathOutline.rLineTo(-mSideWidth, 0);
            }
            slice.pathOutline.moveTo(rect.centerX(), rect.centerY());
            slice.pathOutline.arcTo(rect, startAngle + sweepAngle, 0);
            if (endSideVisible) {
                slice.pathOutline.rLineTo(-mSideWidth, 0);
            }

            startAngle += sweepAngle;
        }

        invalidate();
!!!14134668.java!!!	onDraw(inout canvas : Canvas) : void

        canvas.concat(mMatrix);

        for (Slice slice : mSlices) {
            canvas.drawPath(slice.pathSide, slice.paint);
        }
        canvas.drawPath(mPathSideOutline, mPaintOutline);

        for (Slice slice : mSlices) {
            canvas.drawPath(slice.path, slice.paint);
            canvas.drawPath(slice.pathOutline, mPaintOutline);
        }
        canvas.drawPath(mPathOutline, mPaintOutline);
!!!14134796.java!!!	darken(in color : int) : int
        float[] hsv = new float[3];
        Color.colorToHSV(color, hsv);
        hsv[2] /= 2;
        hsv[1] /= 2;
        return Color.HSVToColor(hsv);
