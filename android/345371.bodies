class DocumentImpl
!!!2299931.java!!!	DocumentImpl(inout impl : DOMImplementationImpl, inout namespaceURI : String, inout qualifiedName : String, inout doctype : DocumentType, inout inputEncoding : String)
        super(null);
        this.document = this;
        this.domImplementation = impl;
        this.inputEncoding = inputEncoding;

        if (doctype != null) {
            appendChild(doctype);
        }

        if (qualifiedName != null) {
            appendChild(createElementNS(namespaceURI, qualifiedName));
        }
!!!2300059.java!!!	isXMLIdentifierStart(in c : char) : boolean
        return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c == '_');
!!!2300187.java!!!	isXMLIdentifierPart(in c : char) : boolean
        return isXMLIdentifierStart(c) || (c >= '0' && c <= '9') || (c == '-') || (c == '.');
!!!2300315.java!!!	isXMLIdentifier(inout s : String) : boolean
        if (s.length() == 0) {
            return false;
        }

        if (!isXMLIdentifierStart(s.charAt(0))) {
            return false;
        }

        for (int i = 1; i < s.length(); i++) {
            if (!isXMLIdentifierPart(s.charAt(i))) {
                return false;
            }
        }

        return true;
!!!2300443.java!!!	shallowCopy(in operation : short, inout node : Node) : NodeImpl
        switch (node.getNodeType()) {
        case Node.ATTRIBUTE_NODE:
            AttrImpl attr = (AttrImpl) node;
            AttrImpl attrCopy;
            if (attr.namespaceAware) {
                attrCopy = createAttributeNS(attr.getNamespaceURI(), attr.getLocalName());
                attrCopy.setPrefix(attr.getPrefix());
            } else {
                attrCopy = createAttribute(attr.getName());
            }
            attrCopy.setNodeValue(attr.getValue());
            return attrCopy;

        case Node.CDATA_SECTION_NODE:
            return createCDATASection(((CharacterData) node).getData());

        case Node.COMMENT_NODE:
            return createComment(((Comment) node).getData());

        case Node.DOCUMENT_FRAGMENT_NODE:
            return createDocumentFragment();

        case Node.DOCUMENT_NODE:
        case Node.DOCUMENT_TYPE_NODE:
            throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                    "Cannot copy node of type " + node.getNodeType());

        case Node.ELEMENT_NODE:
            ElementImpl element = (ElementImpl) node;
            ElementImpl elementCopy;
            if (element.namespaceAware) {
                elementCopy = createElementNS(element.getNamespaceURI(), element.getLocalName());
                elementCopy.setPrefix(element.getPrefix());
            } else {
                elementCopy = createElement(element.getTagName());
            }

            NamedNodeMap attributes = element.getAttributes();
            for (int i = 0; i < attributes.getLength(); i++) {
                AttrImpl elementAttr = (AttrImpl) attributes.item(i);
                AttrImpl elementAttrCopy = (AttrImpl) shallowCopy(operation, elementAttr);
                notifyUserDataHandlers(operation, elementAttr, elementAttrCopy);
                if (elementAttr.namespaceAware) {
                    elementCopy.setAttributeNodeNS(elementAttrCopy);
                } else {
                    elementCopy.setAttributeNode(elementAttrCopy);
                }
            }
            return elementCopy;

        case Node.ENTITY_NODE:
        case Node.NOTATION_NODE:
            // TODO: implement this when we support these node types
            throw new UnsupportedOperationException();

        case Node.ENTITY_REFERENCE_NODE:
            /*
             * When we support entities in the doctype, this will need to
             * behave differently for clones vs. imports. Clones copy
             * entities by value, copying the referenced subtree from the
             * original document. Imports copy entities by reference,
             * possibly referring to a different subtree in the new
             * document.
             */
            return createEntityReference(node.getNodeName());

        case Node.PROCESSING_INSTRUCTION_NODE:
            ProcessingInstruction pi = (ProcessingInstruction) node;
            return createProcessingInstruction(pi.getTarget(), pi.getData());

        case Node.TEXT_NODE:
            return createTextNode(((Text) node).getData());

        default:
            throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                    "Unsupported node type " + node.getNodeType());
        }
!!!2300571.java!!!	cloneOrImportNode(in operation : short, inout node : Node, inout deep : boolean) : Node
        NodeImpl copy = shallowCopy(operation, node);

        if (deep) {
            NodeList list = node.getChildNodes();
            for (int i = 0; i < list.getLength(); i++) {
                copy.appendChild(cloneOrImportNode(operation, list.item(i), deep));
            }
        }

        notifyUserDataHandlers(operation, node, copy);
        return copy;
!!!2300699.java!!!	importNode(inout importedNode : Node, inout deep : boolean) : Node
        return cloneOrImportNode(UserDataHandler.NODE_IMPORTED, importedNode, deep);
!!!2300827.java!!!	adoptNode(inout node : Node) : Node
        if (!(node instanceof NodeImpl)) {
            return null; // the API specifies this quiet failure
        }
        NodeImpl nodeImpl = (NodeImpl) node;
        switch (nodeImpl.getNodeType()) {
            case Node.ATTRIBUTE_NODE:
                AttrImpl attr = (AttrImpl) node;
                if (attr.ownerElement != null) {
                    attr.ownerElement.removeAttributeNode(attr);
                }
                break;

            case Node.DOCUMENT_FRAGMENT_NODE:
            case Node.ENTITY_REFERENCE_NODE:
            case Node.PROCESSING_INSTRUCTION_NODE:
            case Node.TEXT_NODE:
            case Node.CDATA_SECTION_NODE:
            case Node.COMMENT_NODE:
            case Node.ELEMENT_NODE:
                break;

            case Node.DOCUMENT_NODE:
            case Node.DOCUMENT_TYPE_NODE:
            case Node.ENTITY_NODE:
            case Node.NOTATION_NODE:
                throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                        "Cannot adopt nodes of type " + nodeImpl.getNodeType());

            default:
                throw new DOMException(DOMException.NOT_SUPPORTED_ERR,
                        "Unsupported node type " + node.getNodeType());
        }

        Node parent = nodeImpl.getParentNode();
        if (parent != null) {
            parent.removeChild(nodeImpl);
        }

        changeDocumentToThis(nodeImpl);
        notifyUserDataHandlers(UserDataHandler.NODE_ADOPTED, node, null);
        return nodeImpl;
!!!2300955.java!!!	changeDocumentToThis(inout node : NodeImpl) : void
        Map<String, UserData> userData = node.document.getUserDataMapForRead(node);
        if (!userData.isEmpty()) {
            getUserDataMap(node).putAll(userData);
        }
        node.document = this;

        // change the document on all child nodes
        NodeList list = node.getChildNodes();
        for (int i = 0; i < list.getLength(); i++) {
            changeDocumentToThis((NodeImpl) list.item(i));
        }

        // change the document on all attribute nodes
        if (node.getNodeType() == Node.ELEMENT_NODE) {
            NamedNodeMap attributes = node.getAttributes();
            for (int i = 0; i < attributes.getLength(); i++) {
                changeDocumentToThis((AttrImpl) attributes.item(i));
            }
        }
!!!2301083.java!!!	renameNode(inout node : Node, inout namespaceURI : String, inout qualifiedName : String) : Node
        if (node.getOwnerDocument() != this) {
            throw new DOMException(DOMException.WRONG_DOCUMENT_ERR, null);
        }

        setNameNS((NodeImpl) node, namespaceURI, qualifiedName);
        notifyUserDataHandlers(UserDataHandler.NODE_RENAMED, node, null);
        return node;
!!!2301211.java!!!	createAttribute(inout name : String) : AttrImpl
        return new AttrImpl(this, name);
!!!2301339.java!!!	createAttributeNS(inout namespaceURI : String, inout qualifiedName : String) : AttrImpl
        return new AttrImpl(this, namespaceURI, qualifiedName);
!!!2301467.java!!!	createCDATASection(inout data : String) : CDATASectionImpl
        return new CDATASectionImpl(this, data);
!!!2301595.java!!!	createComment(inout data : String) : CommentImpl
        return new CommentImpl(this, data);
!!!2301723.java!!!	createDocumentFragment() : DocumentFragmentImpl
        return new DocumentFragmentImpl(this);
!!!2301851.java!!!	createElement(inout tagName : String) : ElementImpl
        return new ElementImpl(this, tagName);
!!!2301979.java!!!	createElementNS(inout namespaceURI : String, inout qualifiedName : String) : ElementImpl
        return new ElementImpl(this, namespaceURI, qualifiedName);
!!!2302107.java!!!	createEntityReference(inout name : String) : EntityReferenceImpl
        return new EntityReferenceImpl(this, name);
!!!2302235.java!!!	createProcessingInstruction(inout target : String, inout data : String) : ProcessingInstructionImpl
        return new ProcessingInstructionImpl(this, target, data);
!!!2302363.java!!!	createTextNode(inout data : String) : TextImpl
        return new TextImpl(this, data);
!!!2302491.java!!!	getDoctype() : DocumentType
        for (LeafNodeImpl child : children) {
            if (child instanceof DocumentType) {
                return (DocumentType) child;
            }
        }

        return null;
!!!2302619.java!!!	getDocumentElement() : Element
        for (LeafNodeImpl child : children) {
            if (child instanceof Element) {
                return (Element) child;
            }
        }

        return null;
!!!2302747.java!!!	getElementById(inout elementId : String) : Element
        ElementImpl root = (ElementImpl) getDocumentElement();

        return (root == null ? null : root.getElementById(elementId));
!!!2302875.java!!!	getElementsByTagName(inout name : String) : NodeList
        NodeListImpl result = new NodeListImpl();
        getElementsByTagName(result, name);
        return result;
!!!2303003.java!!!	getElementsByTagNameNS(inout namespaceURI : String, inout localName : String) : NodeList
        NodeListImpl result = new NodeListImpl();
        getElementsByTagNameNS(result, namespaceURI, localName);
        return result;
!!!2303131.java!!!	getImplementation() : DOMImplementation
        return domImplementation;
!!!2303259.java!!!	getNodeName() : String
        return "#document";
!!!2303387.java!!!	getNodeType() : short
        return Node.DOCUMENT_NODE;
!!!2303515.java!!!	insertChildAt(inout toInsert : Node, in index : int) : Node
        if (toInsert instanceof Element && getDocumentElement() != null) {
            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,
                    "Only one root element allowed");
        }
        if (toInsert instanceof DocumentType && getDoctype() != null) {
            throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,
                    "Only one DOCTYPE element allowed");
        }
        return super.insertChildAt(toInsert, index);
!!!2303643.java!!!	getTextContent() : String
        return null;
!!!2303771.java!!!	getInputEncoding() : String
        return inputEncoding;
!!!2303899.java!!!	getXmlEncoding() : String
        return xmlEncoding;
!!!2304027.java!!!	getXmlStandalone() : boolean
        return xmlStandalone;
!!!2304155.java!!!	setXmlStandalone(inout xmlStandalone : boolean) : void
        this.xmlStandalone = xmlStandalone;
!!!2304283.java!!!	getXmlVersion() : String
        return xmlVersion;
!!!2304411.java!!!	setXmlVersion(inout xmlVersion : String) : void
        this.xmlVersion = xmlVersion;
!!!2304539.java!!!	getStrictErrorChecking() : boolean
        return strictErrorChecking;
!!!2304667.java!!!	setStrictErrorChecking(inout strictErrorChecking : boolean) : void
        this.strictErrorChecking = strictErrorChecking;
!!!2304795.java!!!	getDocumentURI() : String
        return documentUri;
!!!2304923.java!!!	setDocumentURI(inout documentUri : String) : void
        this.documentUri = documentUri;
!!!2305051.java!!!	getDomConfig() : DOMConfiguration
        if (domConfiguration == null) {
            domConfiguration = new DOMConfigurationImpl();
        }
        return domConfiguration;
!!!2305179.java!!!	normalizeDocument() : void
        Element root = getDocumentElement();
        if (root == null) {
            return;
        }

        ((DOMConfigurationImpl) getDomConfig()).normalize(root);
!!!2305307.java!!!	getUserDataMap(inout node : NodeImpl) : Map
        if (nodeToUserData == null) {
            nodeToUserData = new WeakHashMap<NodeImpl, Map<String, UserData>>();
        }
        Map<String, UserData> userDataMap = nodeToUserData.get(node);
        if (userDataMap == null) {
            userDataMap = new HashMap<String, UserData>();
            nodeToUserData.put(node, userDataMap);
        }
        return userDataMap;
!!!2305435.java!!!	getUserDataMapForRead(inout node : NodeImpl) : Map
        if (nodeToUserData == null) {
            return Collections.emptyMap();
        }
        Map<String, UserData> userDataMap = nodeToUserData.get(node);
        return userDataMap == null
                ? Collections.<String, UserData>emptyMap()
                : userDataMap;
!!!2305563.java!!!	notifyUserDataHandlers(in operation : short, inout source : Node, inout destination : NodeImpl) : void
        if (!(source instanceof NodeImpl)) {
            return;
        }

        NodeImpl srcImpl = (NodeImpl) source;
        if (srcImpl.document == null) {
            return;
        }

        for (Map.Entry<String, UserData> entry
                : srcImpl.document.getUserDataMapForRead(srcImpl).entrySet()) {
            UserData userData = entry.getValue();
            if (userData.handler != null) {
                userData.handler.handle(
                        operation, entry.getKey(), userData.value, source, destination);
            }
        }
