format 74
"inputmethod" // framework::base::core::java::android::view::inputmethod
  revision 3
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/jellybean/framework/base/core/java/android/view/inputmethod/"
  java_package "android.view.inputmethod"
  classview 165260 "inputmethod"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 702860 "InputConnection"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The InputConnection interface is the communication channel from an
{@link InputMethod} back to the application that is receiving its input. It
is used to perform such things as reading text around the cursor,
committing text to the text box, and sending raw key events to the application.

<p>Applications should never directly implement this interface, but instead
subclass from {@link BaseInputConnection}.  This will ensure that the
application does not break when new methods are added to the interface."
      attribute 3419020 "GET_TEXT_WITH_STYLES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for use with {@link #getTextAfterCursor} and
{@link #getTextBeforeCursor} to have style information returned along
with the text.  If not set, you will receive only the raw text.  If
set, you may receive a complex CharSequence of both text and style
spans.
"
      end

      attribute 3419148 "GET_EXTRACTED_TEXT_MONITOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for use with {@link #getExtractedText} to indicate you would
like to receive updates when the extracted text changes.
"
      end

      operation 4750604 "getTextBeforeCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "n" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get <var>n</var> characters of text before the current cursor position.

<p>This method may fail either if the input connection has become invalid
(such as its process crashing) or the client is taking too long to
respond with the text (it is given a couple seconds to return).
In either case, a null is returned.

@param n The expected length of the text.
@param flags Supplies additional options controlling how the text is
returned.  May be either 0 or {@link #GET_TEXT_WITH_STYLES}.

@return Returns the text before the cursor position; the length of the
returned text might be less than <var>n</var>."
      end

      operation 4750732 "getTextAfterCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "n" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get <var>n</var> characters of text after the current cursor position.

<p>This method may fail either if the input connection has become invalid
(such as its process crashing) or the client is taking too long to
respond with the text (it is given a couple seconds to return).
In either case, a null is returned.

@param n The expected length of the text.
@param flags Supplies additional options controlling how the text is
returned.  May be either 0 or {@link #GET_TEXT_WITH_STYLES}.

@return Returns the text after the cursor position; the length of the
returned text might be less than <var>n</var>."
      end

      operation 4750860 "getSelectedText"
	public explicit_return_type "CharSequence"
	nparams 1
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the selected text, if any.

<p>This method may fail if either the input connection has become
invalid (such as its process crashing) or the client is taking too
long to respond with the text (it is given a couple of seconds to return).
In either case, a null is returned.

@param flags Supplies additional options controlling how the text is
returned.  May be either 0 or {@link #GET_TEXT_WITH_STYLES}.
@return Returns the text that is currently selected, if any, or null if
no text is selected."
      end

      operation 4750988 "getCursorCapsMode"
	public explicit_return_type "int"
	nparams 1
	  param in name "reqModes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current capitalization mode in effect at the current
cursor position in the text.  See
{@link android.text.TextUtils#getCapsMode TextUtils.getCapsMode} for
more information.

<p>This method may fail either if the input connection has become invalid
(such as its process crashing) or the client is taking too long to
respond with the text (it is given a couple seconds to return).
In either case, a 0 is returned.

@param reqModes The desired modes to retrieve, as defined by
{@link android.text.TextUtils#getCapsMode TextUtils.getCapsMode}.  These
constants are defined so that you can simply pass the current
{@link EditorInfo#inputType TextBoxAttribute.contentType} value
directly in to here.

@return Returns the caps mode flags that are in effect."
      end

      operation 4751116 "getExtractedText"
	public return_type class_ref 769036 // ExtractedText
	nparams 2
	  param inout name "request" type class_ref 768396 // ExtractedTextRequest
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the current text in the input connection's editor, and monitor
for any changes to it.  This function returns with the current text,
and optionally the input connection can send updates to the
input method when its text changes.

<p>This method may fail either if the input connection has become invalid
(such as its process crashing) or the client is taking too long to
respond with the text (it is given a couple seconds to return).
In either case, a null is returned.

@param request Description of how the text should be returned.
@param flags Additional options to control the client, either 0 or
{@link #GET_EXTRACTED_TEXT_MONITOR}.

@return Returns an ExtractedText object describing the state of the
text view and containing the extracted text itself."
      end

      operation 4751244 "deleteSurroundingText"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "beforeLength" explicit_type "int"
	  param in name "afterLength" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Delete <var>beforeLength</var> characters of text before the current cursor
position, and delete <var>afterLength</var> characters of text after the
current cursor position, excluding composing text. Before and after refer
to the order of the characters in the string, not to their visual representation.


@param beforeLength The number of characters to be deleted before the
       current cursor position.
@param afterLength The number of characters to be deleted after the
       current cursor position.

@return Returns true on success, false if the input connection is no longer
valid."
      end

      operation 4751372 "setComposingText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set composing text around the current cursor position with the given text,
and set the new cursor position.  Any composing text set previously will
be removed automatically.

@param text The composing text with styles if necessary. If no style
       object attached to the text, the default style for composing text
       is used. See {#link android.text.Spanned} for how to attach style
       object to the text. {#link android.text.SpannableString} and
       {#link android.text.SpannableStringBuilder} are two
       implementations of the interface {#link android.text.Spanned}.
@param newCursorPosition The new cursor position around the text.  If
       > 0, this is relative to the end of the text - 1; if <= 0, this
       is relative to the start of the text.  So a value of 1 will
       always advance you to the position after the full text being
       inserted.  Note that this means you can't position the cursor
       within the text, because the editor can make modifications to
       the text you are providing so it is not possible to correctly
       specify locations there.

@return Returns true on success, false if the input connection is no longer
valid."
      end

      operation 4751500 "setComposingRegion"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mark a certain region of text as composing text. Any composing text set
previously will be removed automatically. The default style for composing
text is used.

@param start the position in the text at which the composing region begins
@param end the position in the text at which the composing region ends
@return Returns true on success, false if the input connection is no longer
valid."
      end

      operation 4751628 "finishComposingText"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Have the text editor finish whatever composing text is currently
active.  This simply leaves the text as-is, removing any special
composing styling or other state that was around it.  The cursor
position remains unchanged."
      end

      operation 4751756 "commitText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Commit text to the text box and set the new cursor position.
Any composing text set previously will be removed
automatically.

@param text The committed text.
@param newCursorPosition The new cursor position around the text.  If
       > 0, this is relative to the end of the text - 1; if <= 0, this
       is relative to the start of the text.  So a value of 1 will
       always advance you to the position after the full text being
       inserted.  Note that this means you can't position the cursor
       within the text, because the editor can make modifications to
       the text you are providing so it is not possible to correctly
       specify locations there.

       
@return Returns true on success, false if the input connection is no longer
valid."
      end

      operation 4751884 "commitCompletion"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "text" type class_ref 767628 // CompletionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Commit a completion the user has selected from the possible ones
previously reported to {@link InputMethodSession#displayCompletions
InputMethodSession.displayCompletions()}.  This will result in the
same behavior as if the user had selected the completion from the
actual UI.

@param text The committed completion.
       
@return Returns true on success, false if the input connection is no longer
valid."
      end

      operation 4752012 "commitCorrection"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "correctionInfo" type class_ref 768524 // CorrectionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Commit a correction automatically performed on the raw user's input. A typical example would
be to correct typos using a dictionary.

@param correctionInfo Detailed information about the correction.

@return True on success, false if the input connection is no longer valid."
      end

      operation 4752140 "setSelection"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the selection of the text editor.  To set the cursor position,
start and end should have the same value.
@return Returns true on success, false if the input connection is no longer
valid."
      end

      operation 4752268 "performEditorAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "editorAction" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Have the editor perform an action it has said it can do.

@param editorAction This must be one of the action constants for
{@link EditorInfo#imeOptions EditorInfo.editorType}, such as
{@link EditorInfo#IME_ACTION_GO EditorInfo.EDITOR_ACTION_GO}.

@return Returns true on success, false if the input connection is no longer
valid."
      end

      operation 4752396 "performContextMenuAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Perform a context menu action on the field.  The given id may be one of:
{@link android.R.id#selectAll},
{@link android.R.id#startSelectingText}, {@link android.R.id#stopSelectingText},
{@link android.R.id#cut}, {@link android.R.id#copy},
{@link android.R.id#paste}, {@link android.R.id#copyUrl},
or {@link android.R.id#switchInputMethod}"
      end

      operation 4752524 "beginBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell the editor that you are starting a batch of editor operations.
The editor will try to avoid sending you updates about its state
until {@link #endBatchEdit} is called."
      end

      operation 4752652 "endBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tell the editor that you are done with a batch edit previously
initiated with {@link #beginBatchEdit}."
      end

      operation 4752780 "sendKeyEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 681740 // KeyEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Send a key event to the process that is currently attached through
this input connection.  The event will be dispatched like a normal
key event, to the currently focused; this generally is the view that
is providing this InputConnection, but due to the asynchronous nature
of this protocol that can not be guaranteed and the focus may have
changed by the time the event is received.

<p>
This method can be used to send key events to the application. For
example, an on-screen keyboard may use this method to simulate a hardware
keyboard. There are three types of standard keyboards, numeric (12-key),
predictive (20-key) and ALPHA (QWERTY). You can specify the keyboard type
by specify the device id of the key event.

<p>
You will usually want to set the flag
{@link KeyEvent#FLAG_SOFT_KEYBOARD KeyEvent.FLAG_SOFT_KEYBOARD} on all
key event objects you give to this API; the flag will not be set
for you.

<p>Note that it's discouraged to send such key events in normal operation;
this is mainly for use with {@link android.text.InputType#TYPE_NULL} type
text fields. Use the {@link #commitText} family of methods to send text
to the application instead.
@param event The key event.
       
@return Returns true on success, false if the input connection is no longer
valid.

@see KeyEvent
@see KeyCharacterMap#NUMERIC
@see KeyCharacterMap#PREDICTIVE
@see KeyCharacterMap#ALPHA"
      end

      operation 4752908 "clearMetaKeyStates"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "states" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clear the given meta key pressed states in the given input connection.

@param states The states to be cleared, may be one or more bits as
per {@link KeyEvent#getMetaState() KeyEvent.getMetaState()}.

@return Returns true on success, false if the input connection is no longer
valid."
      end

      operation 4753036 "reportFullscreenMode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by the IME to tell the client when it switches between fullscreen
and normal modes.  This will normally be called for you by the standard
implementation of {@link android.inputmethodservice.InputMethodService}."
      end

      operation 4753164 "performPrivateCommand"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "action" explicit_type "String"
	  param inout name "data" type class_ref 678924 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "API to send private commands from an input method to its connected
editor.  This can be used to provide domain-specific features that are
only known between certain input methods and their clients.  Note that
because the InputConnection protocol is asynchronous, you have no way
to get a result back or know if the client understood the command; you
can use the information in {@link EditorInfo} to determine if
a client supports a particular command.

@param action Name of the command to be performed.  This <em>must</em>
be a scoped name, i.e. prefixed with a package name you own, so that
different developers will not create conflicting commands.
@param data Any data to include with the command.
@return Returns true if the command was sent (whether or not the
associated editor understood it), false if the input connection is no longer
valid."
      end
    end

    class 702988 "EditorInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An EditorInfo describes several attributes of a text editing object
that an input method is communicating with (typically an EditText), most
importantly the type of text content it contains."
      classrelation 1936140 // <realization>
	relation 1936140 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1936140 // <realization>
	  b parent class_ref 924300 // InputType
      end

      classrelation 1936268 // <realization>
	relation 1936268 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1936268 // <realization>
	  b parent class_ref 691212 // Parcelable
      end

      attribute 3420812 "inputType"
	public explicit_type "int"
	init_value " TYPE_NULL"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The content type of the text box, whose bits are defined by
{@link InputType}.

@see InputType
@see #TYPE_MASK_CLASS
@see #TYPE_MASK_VARIATION
@see #TYPE_MASK_FLAGS
"
      end

      attribute 3420940 "IME_MASK_ACTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x000000ff"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Set of bits in {@link #imeOptions} that provide alternative actions
associated with the \"enter\" key.  This both helps the IME provide
better feedback about what the enter key will do, and also allows it
to provide alternative mechanisms for providing that command.
"
      end

      attribute 3421068 "IME_ACTION_UNSPECIFIED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: no specific action has been
associated with this editor, let the editor come up with its own if
it can.
"
      end

      attribute 3421196 "IME_ACTION_NONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: there is no available action.
"
      end

      attribute 3421324 "IME_ACTION_GO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: the action key performs a \"go\"
operation to take the user to the target of the text they typed.
Typically used, for example, when entering a URL.
"
      end

      attribute 3421452 "IME_ACTION_SEARCH"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000003"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: the action key performs a \"search\"
operation, taking the user to the results of searching for the text
the have typed (in whatever context is appropriate).
"
      end

      attribute 3421580 "IME_ACTION_SEND"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000004"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: the action key performs a \"send\"
operation, delivering the text to its target.  This is typically used
when composing a message.
"
      end

      attribute 3421708 "IME_ACTION_NEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000005"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: the action key performs a \"next\"
operation, taking the user to the next field that will accept text.
"
      end

      attribute 3421836 "IME_ACTION_DONE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000006"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: the action key performs a \"done\"
operation, typically meaning the IME will be closed.
"
      end

      attribute 3421964 "IME_ACTION_PREVIOUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000007"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bits of {@link #IME_MASK_ACTION}: Like {@link #IME_ACTION_NEXT}, but
for moving to the previous field.  This will normally not be used to
specify an action (since it precludes {@link #IME_ACTION_NEXT}, but
can be returned to the app if it sets {@link #IME_FLAG_NAVIGATE_PREVIOUS}.
"
      end

      attribute 3422092 "IME_FLAG_NO_FULLSCREEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x2000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used to request that the IME never go
into fullscreen mode.  Applications need to be aware that the flag is not
a guarantee, and not all IMEs will respect it.
"
      end

      attribute 3422220 "IME_FLAG_NAVIGATE_PREVIOUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: like {@link #IME_FLAG_NAVIGATE_NEXT}, but
specifies there is something interesting that a backward navigation
can focus on.  If the user selects the IME's facility to backward
navigate, this will show up in the application as an {@link #IME_ACTION_PREVIOUS}
at {@link InputConnection#performEditorAction(int)
InputConnection.performEditorAction(int)}.
"
      end

      attribute 3422348 "IME_FLAG_NAVIGATE_NEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used to specify that there is something
interesting that a forward navigation can focus on. This is like using
{@link #IME_ACTION_NEXT}, except allows the IME to be multiline (with
an enter key) as well as provide forward navigation.  Note that some
IMEs may not be able to do this, especially when running on a small
screen where there is little space.  In that case it does not need to
present a UI for this option.  Like {@link #IME_ACTION_NEXT}, if the
user selects the IME's facility to forward navigate, this will show up
in the application at {@link InputConnection#performEditorAction(int)
InputConnection.performEditorAction(int)}.
"
      end

      attribute 3422476 "IME_FLAG_NO_EXTRACT_UI"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used to specify that the IME does not need
to show its extracted text UI.  For input methods that may be fullscreen,
often when in landscape mode, this allows them to be smaller and let part
of the application be shown behind.  Though there will likely be limited
access to the application available from the user, it can make the
experience of a (mostly) fullscreen IME less jarring.  Note that when
this flag is specified the IME may <em>not</em> be set up to be able
to display text, so it should only be used in situations where this is
not needed.
"
      end

      attribute 3422604 "IME_FLAG_NO_ACCESSORY_ACTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x20000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used in conjunction with
{@link #IME_MASK_ACTION}, this indicates that the action should not
be available as an accessory button when the input method is full-screen.
Note that by setting this flag, there can be cases where the action
is simply never available to the user.  Setting this generally means
that you think showing text being edited is more important than the
action you have supplied. 
"
      end

      attribute 3422732 "IME_FLAG_NO_ENTER_ACTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x40000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used in conjunction with
{@link #IME_MASK_ACTION}, this indicates that the action should not
be available in-line as a replacement for \"enter\" key.  Typically this is
because the action has such a significant impact or is not recoverable
enough that accidentally hitting it should be avoided, such as sending
a message.  Note that {@link android.widget.TextView} will automatically set this
flag for you on multi-line text views.
"
      end

      attribute 3422860 "IME_FLAG_FORCE_ASCII"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x80000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag of {@link #imeOptions}: used to request that the IME is capable of
inputting ASCII characters.  The intention of this flag is to ensure that
the user can type Roman alphabet characters in a {@link android.widget.TextView}
used for, typically, account ID or password input.  It is expected that IMEs
normally are able to input ASCII even without being told so (such IMEs
already respect this flag in a sense), but there could be some cases they
aren't when, for instance, only non-ASCII input languagaes like Arabic,
Greek, Hebrew, Russian are enabled in the IME.  Applications need to be
aware that the flag is not a guarantee, and not all IMEs will respect it.
However, it is strongly recommended for IME authors to respect this flag
especially when their IME could end up with a state that has only non-ASCII
input languages enabled.
"
      end

      attribute 3422988 "IME_NULL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Generic unspecified type for {@link #imeOptions}.
"
      end

      attribute 3423116 "imeOptions"
	public explicit_type "int"
	init_value " IME_NULL"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Extended type information for the editor, to help the IME better
integrate with it.
"
      end

      attribute 3423244 "privateImeOptions"
	public explicit_type "String"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A string supplying additional information options that are
private to a particular IME implementation.  The string must be
scoped to a package owned by the implementation, to ensure there are
no conflicts between implementations, but other than that you can put
whatever you want in it to communicate with the IME.  For example,
you could have a string that supplies an argument like
<code>\"com.example.myapp.SpecialMode=3\"</code>.  This field is can be
filled in from the {@link android.R.attr#privateImeOptions}
attribute of a TextView.
"
      end

      attribute 3423372 "actionLabel"
	public explicit_type "CharSequence"
	init_value " null"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "In some cases an IME may be able to display an arbitrary label for
a command the user can perform, which you can specify here.  You can
not count on this being used.
"
      end

      attribute 3423500 "actionId"
	public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If {@link #actionLabel} has been given, this is the id for that command
when the user presses its button that is delivered back with
{@link InputConnection#performEditorAction(int)
InputConnection.performEditorAction()}.
"
      end

      attribute 3423628 "initialSelStart"
	public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The text offset of the start of the selection at the time editing
began; -1 if not known.
"
      end

      attribute 3423756 "initialSelEnd"
	public explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The text offset of the end of the selection at the time editing
began; -1 if not known.
"
      end

      attribute 3423884 "initialCapsMode"
	public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The capitalization mode of the first character being edited in the
text.  Values may be any combination of
{@link TextUtils#CAP_MODE_CHARACTERS TextUtils.CAP_MODE_CHARACTERS},
{@link TextUtils#CAP_MODE_WORDS TextUtils.CAP_MODE_WORDS}, and
{@link TextUtils#CAP_MODE_SENTENCES TextUtils.CAP_MODE_SENTENCES}, though
you should generally just take a non-zero value to mean start out in
caps mode.
"
      end

      attribute 3424012 "hintText"
	public explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The \"hint\" text of the text view, typically shown in-line when the
text is empty to tell the user what to enter.
"
      end

      attribute 3424140 "label"
	public explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "A label to show to the user describing the text they are writing.
"
      end

      attribute 3424268 "packageName"
	public explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Name of the package that owns this editor.
"
      end

      attribute 3424396 "fieldId"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Identifier for the editor's field.  This is optional, and may be
0.  By default it is filled in with the result of
{@link android.view.View#getId() View.getId()} on the View that
is being edited.
"
      end

      attribute 3424524 "fieldName"
	public explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Additional name for the editor's field.  This can supply additional
name information for the field.  By default it is null.  The actual
contents have no meaning.
"
      end

      classrelation 1936396 // extras (<unidirectional association>)
	relation 1936396 --->
	  a role_name "extras" public
	    comment "
Any extra data to supply to the input method.  This is for extended
communication with specific input methods; the name fields in the
bundle should be scoped (such as \"com.mydomain.im.SOME_FIELD\") so
that they don't conflict with others.  This field is can be
filled in from the {@link android.R.attr#editorExtras}
attribute of a TextView.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1936396 // extras (<unidirectional association>)
	  b parent class_ref 678924 // Bundle
      end

      operation 4759820 "makeCompatible"
	public explicit_return_type "void"
	nparams 1
	  param in name "targetSdkVersion" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensure that the data in this EditorInfo is compatible with an application
that was developed against the given target API version.  This can
impact the following input types:
{@link InputType#TYPE_TEXT_VARIATION_WEB_EMAIL_ADDRESS},
{@link InputType#TYPE_TEXT_VARIATION_WEB_PASSWORD},
{@link InputType#TYPE_NUMBER_VARIATION_NORMAL},
{@link InputType#TYPE_NUMBER_VARIATION_PASSWORD}.

<p>This is called by the framework for input method implementations;
you should not generally need to call it yourself.

@param targetSdkVersion The API version number that the compatible
application was developed against."
      end

      operation 4759948 "dump"
	public explicit_return_type "void"
	nparams 2
	  param inout name "pw" type class_ref 690572 // Printer
	  param in name "prefix" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write debug output of this object."
      end

      operation 4760076 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 691340 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 1936524 // CREATOR (<unidirectional association>)
	relation 1936524 --->
	  a role_name "CREATOR" init_value " new Parcelable.Creator<EditorInfo>() {
        public EditorInfo createFromParcel(Parcel source) {
            EditorInfo res = new EditorInfo();
            res.inputType = source.readInt();
            res.imeOptions = source.readInt();
            res.privateImeOptions = source.readString();
            res.actionLabel = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
            res.actionId = source.readInt();
            res.initialSelStart = source.readInt();
            res.initialSelEnd = source.readInt();
            res.initialCapsMode = source.readInt();
            res.hintText = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
            res.label = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
            res.packageName = source.readString();
            res.fieldId = source.readInt();
            res.fieldName = source.readString();
            res.extras = source.readBundle();
            return res;
        }

        public EditorInfo[] newArray(int size) {
            return new EditorInfo[size];
        }
    }" class_relation const_relation public
	    comment "
Used to make this class parcelable.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<EditorInfo> ${name}${value};
"
	    classrelation_ref 1936524 // CREATOR (<unidirectional association>)
	  b parent class_ref 691468 // Creator
      end

      operation 4760204 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 754316 "InputConnectionWrapper"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Wrapper class for proxying calls to another InputConnection.  Subclass
and have fun!"
      classrelation 1937676 // <realization>
	relation 1937676 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1937676 // <realization>
	  b parent class_ref 702860 // InputConnection
      end

      classrelation 1937804 // mTarget (<unidirectional association>)
	relation 1937804 --->
	  a role_name "mTarget" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1937804 // mTarget (<unidirectional association>)
	  b parent class_ref 702860 // InputConnection
      end

      attribute 3426700 "mMutable"
	const_attribute package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4762124 "InputConnectionWrapper"
	public explicit_return_type ""
	nparams 2
	  param inout name "target" type class_ref 702860 // InputConnection
	  param inout name "mutable" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4762252 "setTarget"
	public explicit_return_type "void"
	nparams 1
	  param inout name "target" type class_ref 702860 // InputConnection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Change the target of the input connection."
      end

      operation 4762380 "getTextBeforeCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "n" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4762508 "getTextAfterCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "n" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4762636 "getSelectedText"
	public explicit_return_type "CharSequence"
	nparams 1
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4762764 "getCursorCapsMode"
	public explicit_return_type "int"
	nparams 1
	  param in name "reqModes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4762892 "getExtractedText"
	public return_type class_ref 769036 // ExtractedText
	nparams 2
	  param inout name "request" type class_ref 768396 // ExtractedTextRequest
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4763020 "deleteSurroundingText"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "beforeLength" explicit_type "int"
	  param in name "afterLength" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4763148 "setComposingText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4763276 "setComposingRegion"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4763404 "finishComposingText"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4763532 "commitText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4763660 "commitCompletion"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "text" type class_ref 767628 // CompletionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4763788 "commitCorrection"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "correctionInfo" type class_ref 768524 // CorrectionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4763916 "setSelection"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4764044 "performEditorAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "editorAction" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4764172 "performContextMenuAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4764300 "beginBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4764428 "endBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4764556 "sendKeyEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 681740 // KeyEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4764684 "clearMetaKeyStates"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "states" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4764812 "reportFullscreenMode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4764940 "performPrivateCommand"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "action" explicit_type "String"
	  param inout name "data" type class_ref 678924 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 766988 "InputMethodManager"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Central system API to the overall input method framework (IMF) architecture,
which arbitrates interaction between applications and the current input method.
You can retrieve an instance of this interface with
{@link Context#getSystemService(String) Context.getSystemService()}.

<p>Topics covered here:
<ol>
<li><a href=\"#ArchitectureOverview\">Architecture Overview</a>
<li><a href=\"#Applications\">Applications</a>
<li><a href=\"#InputMethods\">Input Methods</a>
<li><a href=\"#Security\">Security</a>
</ol>

<a name=\"ArchitectureOverview\"></a>
<h3>Architecture Overview</h3>

<p>There are three primary parties involved in the input method
framework (IMF) architecture:</p>

<ul>
<li> The <strong>input method manager</strong> as expressed by this class
is the central point of the system that manages interaction between all
other parts.  It is expressed as the client-side API here which exists
in each application context and communicates with a global system service
that manages the interaction across all processes.
<li> An <strong>input method (IME)</strong> implements a particular
interaction model allowing the user to generate text.  The system binds
to the current input method that is use, causing it to be created and run,
and tells it when to hide and show its UI.  Only one IME is running at a time.
<li> Multiple <strong>client applications</strong> arbitrate with the input
method manager for input focus and control over the state of the IME.  Only
one such client is ever active (working with the IME) at a time.
</ul>


<a name=\"Applications\"></a>
<h3>Applications</h3>

<p>In most cases, applications that are using the standard
{@link android.widget.TextView} or its subclasses will have little they need
to do to work well with soft input methods.  The main things you need to
be aware of are:</p>

<ul>
<li> Properly set the {@link android.R.attr#inputType} in your editable
text views, so that the input method will have enough context to help the
user in entering text into them.
<li> Deal well with losing screen space when the input method is
displayed.  Ideally an application should handle its window being resized
smaller, but it can rely on the system performing panning of the window
if needed.  You should set the {@link android.R.attr#windowSoftInputMode}
attribute on your activity or the corresponding values on windows you
create to help the system determine whether to pan or resize (it will
try to determine this automatically but may get it wrong).
<li> You can also control the preferred soft input state (open, closed, etc)
for your window using the same {@link android.R.attr#windowSoftInputMode}
attribute.
</ul>

<p>More finer-grained control is available through the APIs here to directly
interact with the IMF and its IME -- either showing or hiding the input
area, letting the user pick an input method, etc.</p>

<p>For the rare people amongst us writing their own text editors, you
will need to implement {@link android.view.View#onCreateInputConnection}
to return a new instance of your own {@link InputConnection} interface
allowing the IME to interact with your editor.</p>


<a name=\"InputMethods\"></a>
<h3>Input Methods</h3>

<p>An input method (IME) is implemented
as a {@link android.app.Service}, typically deriving from
{@link android.inputmethodservice.InputMethodService}.  It must provide
the core {@link InputMethod} interface, though this is normally handled by
{@link android.inputmethodservice.InputMethodService} and implementors will
only need to deal with the higher-level API there.</p>

See the {@link android.inputmethodservice.InputMethodService} class for
more information on implementing IMEs.


<a name=\"Security\"></a>
<h3>Security</h3>

<p>There are a lot of security issues associated with input methods,
since they essentially have freedom to completely drive the UI and monitor
everything the user enters.  The Android input method framework also allows
arbitrary third party IMEs, so care must be taken to restrict their
selection and interactions.</p>

<p>Here are some key points about the security architecture behind the
IMF:</p>

<ul>
<li> <p>Only the system is allowed to directly access an IME's
{@link InputMethod} interface, via the
{@link android.Manifest.permission#BIND_INPUT_METHOD} permission.  This is
enforced in the system by not binding to an input method service that does
not require this permission, so the system can guarantee no other untrusted
clients are accessing the current input method outside of its control.</p>

<li> <p>There may be many client processes of the IMF, but only one may
be active at a time.  The inactive clients can not interact with key
parts of the IMF through the mechanisms described below.</p>

<li> <p>Clients of an input method are only given access to its
{@link InputMethodSession} interface.  One instance of this interface is
created for each client, and only calls from the session associated with
the active client will be processed by the current IME.  This is enforced
by {@link android.inputmethodservice.AbstractInputMethodService} for normal
IMEs, but must be explicitly handled by an IME that is customizing the
raw {@link InputMethodSession} implementation.</p>

<li> <p>Only the active client's {@link InputConnection} will accept
operations.  The IMF tells each client process whether it is active, and
the framework enforces that in inactive processes calls on to the current
InputConnection will be ignored.  This ensures that the current IME can
only deliver events and text edits to the UI that the user sees as
being in focus.</p>

<li> <p>An IME can never interact with an {@link InputConnection} while
the screen is off.  This is enforced by making all clients inactive while
the screen is off, and prevents bad IMEs from driving the UI when the user
can not be aware of its behavior.</p>

<li> <p>A client application can ask that the system let the user pick a
new IME, but can not programmatically switch to one itself.  This avoids
malicious applications from switching the user to their own IME, which
remains running when the user navigates away to another application.  An
IME, on the other hand, <em>is</em> allowed to programmatically switch
the system to another IME, since it already has full control of user
input.</p>

<li> <p>The user must explicitly enable a new IME in settings before
they can switch to it, to confirm with the system that they know about it
and want to make it available for use.</p>
</ul>"
      class 767244 "FinishedEventCallback"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 2878860 "finishedEvent"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "seq" explicit_type "int"
	    param inout name "handled" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 2166796 "DEBUG"
	class_attribute const_attribute package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2166924 "TAG"
	class_attribute const_attribute package explicit_type "String"
	init_value " \"InputMethodManager\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2167052 "mInstanceSync"
	class_attribute const_attribute package explicit_type "Object"
	init_value " new Object()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1548044 // mInstance (<unidirectional association>)
	relation 1548044 --->
	  a role_name "mInstance" class_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1548044 // mInstance (<unidirectional association>)
	  b parent class_ref 766988 // InputMethodManager
      end

      attribute 2167180 "CONTROL_WINDOW_VIEW_HAS_FOCUS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@hide Flag for IInputMethodManager.windowGainedFocus: a view in
the window has input focus.
"
      end

      attribute 2167308 "CONTROL_WINDOW_IS_TEXT_EDITOR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@hide Flag for IInputMethodManager.windowGainedFocus: the focus
is a text editor.
"
      end

      attribute 2167436 "CONTROL_WINDOW_FIRST"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@hide Flag for IInputMethodManager.windowGainedFocus: this is the first
time the window has gotten focus.
"
      end

      attribute 2167564 "CONTROL_START_INITIAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1<<8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@hide Flag for IInputMethodManager.startInput: this is the first
time the window has gotten focus.
"
      end

      attribute 2167692 "INPUT_METHOD_NOT_RESPONDING_TIMEOUT"
	class_attribute const_attribute package explicit_type "long"
	init_value " 2500"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Timeout in milliseconds for delivering a key to an IME.
"
      end

      attribute 2167820 "MAX_PENDING_EVENT_POOL_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1548172 // mMainLooper (<unidirectional association>)
	relation 1548172 --->
	  a role_name "mMainLooper" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1548172 // mMainLooper (<unidirectional association>)
	  b parent class_ref 685324 // Looper
      end

      class 767372 "H"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1549836 // <generalisation>
	  relation 1549836 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1549836 // <generalisation>
	    b parent class_ref 687500 // Handler
	end

	operation 2864268 "H"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "looper" type class_ref 685324 // Looper
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2864396 "handleMessage"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "msg" type class_ref 690316 // Message
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      classrelation 1548300 // mH (<unidirectional association>)
	relation 1548300 --->
	  a role_name "mH" const_relation package
	    comment " For scheduling work on the main thread.  This also serves as our
 global lock.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1548300 // mH (<unidirectional association>)
	  b parent class_ref 767372 // H
      end

      attribute 2168076 "mIInputContext"
	const_attribute package explicit_type "IInputContext"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Our generic input connection if the current target does not have its own."
      end

      attribute 2168204 "mActive"
	package explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if this input method client is active, initially false.
"
      end

      attribute 2168332 "mHasBeenInactive"
	package explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Set whenever this client becomes inactive, to know we need to reset
state with the IME the next time we receive focus.
"
      end

      attribute 2168460 "mFullscreenMode"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "As reported by IME through InputConnection.
"
      end

      classrelation 1548428 // mCurRootView (<unidirectional association>)
	relation 1548428 --->
	  a role_name "mCurRootView" package
	    comment " -----------------------------------------------------------

This is the root view of the overall window that currently has input
method focus.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1548428 // mCurRootView (<unidirectional association>)
	  b parent class_ref 694028 // View
      end

      classrelation 1548556 // mServedView (<unidirectional association>)
	relation 1548556 --->
	  a role_name "mServedView" package
	    comment "
This is the view that should currently be served by an input method,
regardless of the state of setting that up.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1548556 // mServedView (<unidirectional association>)
	  b parent class_ref 694028 // View
      end

      classrelation 1548684 // mNextServedView (<unidirectional association>)
	relation 1548684 --->
	  a role_name "mNextServedView" package
	    comment "
This is then next view that will be served by the input method, when
we get around to updating things.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1548684 // mNextServedView (<unidirectional association>)
	  b parent class_ref 694028 // View
      end

      attribute 2168588 "mServedConnecting"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is set when we are in the process of connecting, to determine
when we have actually finished.
"
      end

      classrelation 1548812 // mCurrentTextBoxAttribute (<unidirectional association>)
	relation 1548812 --->
	  a role_name "mCurrentTextBoxAttribute" package
	    comment "
This is non-null when we have connected the served view; it holds
the attributes that were last retrieved from the served view and given
to the input connection.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1548812 // mCurrentTextBoxAttribute (<unidirectional association>)
	  b parent class_ref 702988 // EditorInfo
      end

      classrelation 1548940 // mServedInputConnection (<unidirectional association>)
	relation 1548940 --->
	  a role_name "mServedInputConnection" package
	    comment "
The InputConnection that was last retrieved from the served view.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1548940 // mServedInputConnection (<unidirectional association>)
	  b parent class_ref 702860 // InputConnection
      end

      class 767500 "ControlledInputConnectionWrapper"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1550604 // <generalisation>
	  relation 1550604 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 1550604 // <generalisation>
	    b parent class_ref 767884 // IInputConnectionWrapper
	end

	classrelation 1550732 // mParentInputMethodManager (<unidirectional association>)
	  relation 1550732 --->
	    a role_name "mParentInputMethodManager" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1550732 // mParentInputMethodManager (<unidirectional association>)
	    b parent class_ref 766988 // InputMethodManager
	end

	attribute 2173708 "mActive"
	  private explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 2869004 "ControlledInputConnectionWrapper"
	  public explicit_return_type ""
	  nparams 3
	    param in name "mainLooper" type class_ref 685324 // Looper
	    param in name "conn" type class_ref 702860 // InputConnection
	    param in name "inputMethodManager" type class_ref 766988 // InputMethodManager
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}, final ${t1} ${p1}, final ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 2869132 "isActive"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 2869260 "deactivate"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 1549068 // mServedInputConnectionWrapper (<unidirectional association>)
	relation 1549068 --->
	  a role_name "mServedInputConnectionWrapper" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1549068 // mServedInputConnectionWrapper (<unidirectional association>)
	  b parent class_ref 767500 // ControlledInputConnectionWrapper
      end

      classrelation 1549196 // mCompletions (<unidirectional association>)
	relation 1549196 --->
	  a role_name "mCompletions" multiplicity "[]" package
	    comment "
The completions that were last provided by the served view.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 1549196 // mCompletions (<unidirectional association>)
	  b parent class_ref 767628 // CompletionInfo
      end

      classrelation 1549324 // mTmpCursorRect (<unidirectional association>)
	relation 1549324 --->
	  a role_name "mTmpCursorRect" init_value " new Rect()" package
	    comment " Cursor position on the screen.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1549324 // mTmpCursorRect (<unidirectional association>)
	  b parent class_ref 694924 // Rect
      end

      classrelation 1549452 // mCursorRect (<unidirectional association>)
	relation 1549452 --->
	  a role_name "mCursorRect" init_value " new Rect()" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1549452 // mCursorRect (<unidirectional association>)
	  b parent class_ref 694924 // Rect
      end

      attribute 2168716 "mCursorSelStart"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2168844 "mCursorSelEnd"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2168972 "mCursorCandStart"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2169100 "mCursorCandEnd"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2169228 "mBindSequence"
	package explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " -----------------------------------------------------------

Sequence number of this binding, as returned by the server.
"
      end

      attribute 2169356 "mCurId"
	package explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "ID of the method we are bound to.
"
      end

      attribute 2169484 "mCurMethod"
	package explicit_type "IInputMethodSession"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The actual instance of the method to make calls on it.
"
      end

      class 767756 "PendingEvent"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 1550988 // mNext (<unidirectional association>)
	  relation 1550988 --->
	    a role_name "mNext" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1550988 // mNext (<unidirectional association>)
	    b parent class_ref 767756 // PendingEvent
	end

	attribute 2175116 "mStartTime"
	  public explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2175244 "mSeq"
	  public explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 2175372 "mInputMethodId"
	  public explicit_type "String"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 1551116 // mCallback (<unidirectional association>)
	  relation 1551116 --->
	    a role_name "mCallback" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 1551116 // mCallback (<unidirectional association>)
	    b parent class_ref 767244 // FinishedEventCallback
	end
      end

      classrelation 1549580 // mPendingEventPool (<unidirectional association>)
	relation 1549580 --->
	  a role_name "mPendingEventPool" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1549580 // mPendingEventPool (<unidirectional association>)
	  b parent class_ref 767756 // PendingEvent
      end

      attribute 2169612 "mPendingEventPoolSize"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1549708 // mFirstPendingEvent (<unidirectional association>)
	relation 1549708 --->
	  a role_name "mFirstPendingEvent" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1549708 // mFirstPendingEvent (<unidirectional association>)
	  b parent class_ref 767756 // PendingEvent
      end

      attribute 2169740 "MSG_DUMP"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " -----------------------------------------------------------"
      end

      attribute 2169868 "MSG_BIND"
	class_attribute const_attribute package explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2169996 "MSG_UNBIND"
	class_attribute const_attribute package explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2170124 "MSG_SET_ACTIVE"
	class_attribute const_attribute package explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2170252 "MSG_EVENT_TIMEOUT"
	class_attribute const_attribute package explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 2173836 "mClient"
	const_attribute package explicit_type "IInputMethodClient.Stub"
	init_value " new IInputMethodClient.Stub() {
        @Override protected void dump(FileDescriptor fd, PrintWriter fout, String[] args) {
            // No need to check for dump permission, since we only give this
            // interface to the system.
            
            CountDownLatch latch = new CountDownLatch(1);
            SomeArgs sargs = SomeArgs.obtain();
            sargs.arg1 = fd;
            sargs.arg2 = fout;
            sargs.arg3 = args;
            sargs.arg4 = latch;
            mH.sendMessage(mH.obtainMessage(MSG_DUMP, sargs));
            try {
                if (!latch.await(5, TimeUnit.SECONDS)) {
                    fout.println(\"Timeout waiting for dump\");
                }
            } catch (InterruptedException e) {
                fout.println(\"Interrupted waiting for dump\");
            }
        }
        
        public void setUsingInputMethod(boolean state) {
        }
        
        public void onBindMethod(InputBindResult res) {
            mH.sendMessage(mH.obtainMessage(MSG_BIND, res));
        }
        
        public void onUnbindMethod(int sequence) {
            mH.sendMessage(mH.obtainMessage(MSG_UNBIND, sequence, 0));
        }
        
        public void setActive(boolean active) {
            mH.sendMessage(mH.obtainMessage(MSG_SET_ACTIVE, active ? 1 : 0, 0));
        }
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1550860 // mDummyInputConnection (<unidirectional association>)
	relation 1550860 --->
	  a role_name "mDummyInputConnection" init_value " new BaseInputConnection(this, false)" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1550860 // mDummyInputConnection (<unidirectional association>)
	  b parent class_ref 702860 // InputConnection
      end

      attribute 2173964 "mInputMethodCallback"
	const_attribute package explicit_type "IInputMethodCallback"
	init_value " new IInputMethodCallback.Stub() {
        @Override
        public void finishedEvent(int seq, boolean handled) {
            InputMethodManager.this.finishedEvent(seq, handled);
        }

        @Override
        public void sessionCreated(IInputMethodSession session) {
            // Stub -- not for use in the client.
        }
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 2869388 "InputMethodManager"
	package explicit_return_type ""
	nparams 2
	  param inout name "service" explicit_type "IInputMethodManager"
	  param inout name "looper" type class_ref 685324 // Looper
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2869516 "getInstance"
	class_operation public return_type class_ref 766988 // InputMethodManager
	nparams 1
	  param inout name "context" type class_ref 684812 // Context
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieve the global InputMethodManager instance, creating it if it
doesn't already exist.
@hide"
      end

      operation 2869644 "getInstance"
	class_operation public return_type class_ref 766988 // InputMethodManager
	nparams 1
	  param inout name "mainLooper" type class_ref 685324 // Looper
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internally, the input method manager can't be context-dependent, so
we have this here for the places that need it.
@hide"
      end

      operation 2869772 "peekInstance"
	class_operation public return_type class_ref 766988 // InputMethodManager
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Private optimization: retrieve the global InputMethodManager instance,
if it exists.
@hide"
      end

      operation 2869900 "getClient"
	public explicit_return_type "IInputMethodClient"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 2870028 "getInputContext"
	public explicit_return_type "IInputContext"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 2870156 "getInputMethodList"
	public return_type class_ref 768652 // InputMethodInfo
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2870284 "getEnabledInputMethodList"
	public return_type class_ref 768652 // InputMethodInfo
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2870412 "getEnabledInputMethodSubtypeList"
	public return_type class_ref 768780 // InputMethodSubtype
	nparams 2
	  param inout name "imi" type class_ref 768652 // InputMethodInfo
	  param inout name "allowsImplicitlySelectedSubtypes" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a list of enabled input method subtypes for the specified input method info.
@param imi An input method info whose subtypes list will be returned.
@param allowsImplicitlySelectedSubtypes A boolean flag to allow to return the implicitly
selected subtypes. If an input method info doesn't have enabled subtypes, the framework
will implicitly enable subtypes according to the current system language."
      end

      operation 2870540 "showStatusIcon"
	public explicit_return_type "void"
	nparams 3
	  param inout name "imeToken" type class_ref 688652 // IBinder
	  param in name "packageName" explicit_type "String"
	  param in name "iconId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2870668 "hideStatusIcon"
	public explicit_return_type "void"
	nparams 1
	  param inout name "imeToken" type class_ref 688652 // IBinder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2870796 "setImeWindowStatus"
	public explicit_return_type "void"
	nparams 3
	  param inout name "imeToken" type class_ref 688652 // IBinder
	  param in name "vis" explicit_type "int"
	  param in name "backDisposition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 2870924 "setFullscreenMode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "fullScreen" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 2871052 "registerSuggestionSpansForNotification"
	public explicit_return_type "void"
	nparams 1
	  param inout name "spans" type class_ref 768908 // SuggestionSpan
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 2871180 "notifySuggestionPicked"
	public explicit_return_type "void"
	nparams 3
	  param inout name "span" type class_ref 768908 // SuggestionSpan
	  param in name "originalString" explicit_type "String"
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 2871308 "isFullscreenMode"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Allows you to discover whether the attached input method is running
in fullscreen mode.  Return true if it is fullscreen, entirely covering
your UI, else returns false."
      end

      operation 2871436 "isActive"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "view" type class_ref 694028 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the given view is the currently active view for the
input method."
      end

      operation 2871564 "isActive"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if any view is currently active in the input method."
      end

      operation 2871692 "isAcceptingText"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return true if the currently served view is accepting full text edits.
If false, it has no input connection, so can only handle raw key events."
      end

      operation 2871820 "clearBindingLocked"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset all of the state associated with being bound to an input method."
      end

      operation 2871948 "clearConnectionLocked"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reset all of the state associated with a served view being connected
to an input method"
      end

      operation 2872076 "finishInputLocked"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disconnect any existing input connection, clearing the served view."
      end

      operation 2872204 "notifyInputConnectionFinished"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notifies the served view that the current InputConnection will no longer be used."
      end

      operation 2872332 "reportFinishInputConnection"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ic" type class_ref 702860 // InputConnection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called from the FINISH_INPUT_CONNECTION message above.
@hide"
      end

      operation 2872460 "displayCompletions"
	public explicit_return_type "void"
	nparams 2
	  param inout name "view" type class_ref 694028 // View
	  param inout name "completions" type class_ref 767628 // CompletionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2872588 "updateExtractedText"
	public explicit_return_type "void"
	nparams 3
	  param inout name "view" type class_ref 694028 // View
	  param in name "token" explicit_type "int"
	  param inout name "text" type class_ref 769036 // ExtractedText
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 2174092 "SHOW_IMPLICIT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #showSoftInput} to indicate that this is an implicit
request to show the input window, not as the result of a direct request
by the user.  The window may not be shown in this case.
"
      end

      attribute 2174220 "SHOW_FORCED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #showSoftInput} to indicate that the user has forced
the input method open (such as by long-pressing menu) so it should
not be closed until they explicitly do so.
"
      end

      operation 2872716 "showSoftInput"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "view" type class_ref 694028 // View
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Synonym for {@link #showSoftInput(View, int, ResultReceiver)} without
a result receiver: explicitly request that the current input method's
soft input area be shown to the user, if needed.

@param view The currently focused view, which would like to receive
soft keyboard input.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #SHOW_IMPLICIT} bit set."
      end

      attribute 2174348 "RESULT_UNCHANGED_SHOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for the {@link ResultReceiver} result code from
{@link #showSoftInput(View, int, ResultReceiver)} and
{@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
state of the soft input window was unchanged and remains shown.
"
      end

      attribute 2174476 "RESULT_UNCHANGED_HIDDEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for the {@link ResultReceiver} result code from
{@link #showSoftInput(View, int, ResultReceiver)} and
{@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
state of the soft input window was unchanged and remains hidden.
"
      end

      attribute 2174604 "RESULT_SHOWN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for the {@link ResultReceiver} result code from
{@link #showSoftInput(View, int, ResultReceiver)} and
{@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
state of the soft input window changed from hidden to shown.
"
      end

      attribute 2174732 "RESULT_HIDDEN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for the {@link ResultReceiver} result code from
{@link #showSoftInput(View, int, ResultReceiver)} and
{@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}: the
state of the soft input window changed from shown to hidden.
"
      end

      operation 2872844 "showSoftInput"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "view" type class_ref 694028 // View
	  param in name "flags" explicit_type "int"
	  param inout name "resultReceiver" type class_ref 769164 // ResultReceiver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Explicitly request that the current input method's soft input area be
shown to the user, if needed.  Call this if the user interacts with
your view in such a way that they have expressed they would like to
start performing input into it.

@param view The currently focused view, which would like to receive
soft keyboard input.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #SHOW_IMPLICIT} bit set.
@param resultReceiver If non-null, this will be called by the IME when
it has processed your request to tell you what it has done.  The result
code you receive may be either {@link #RESULT_UNCHANGED_SHOWN},
{@link #RESULT_UNCHANGED_HIDDEN}, {@link #RESULT_SHOWN}, or
{@link #RESULT_HIDDEN}."
      end

      operation 2872972 "showSoftInputUnchecked"
	public explicit_return_type "void"
	nparams 2
	  param in name "flags" explicit_type "int"
	  param inout name "resultReceiver" type class_ref 769164 // ResultReceiver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      attribute 2174860 "HIDE_IMPLICIT_ONLY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #hideSoftInputFromWindow} to indicate that the soft
input window should only be hidden if it was not explicitly shown
by the user.
"
      end

      attribute 2174988 "HIDE_NOT_ALWAYS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #hideSoftInputFromWindow} to indicate that the soft
input window should normally be hidden, unless it was originally
shown with {@link #SHOW_FORCED}.
"
      end

      operation 2873100 "hideSoftInputFromWindow"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "windowToken" type class_ref 688652 // IBinder
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Synonym for {@link #hideSoftInputFromWindow(IBinder, int, ResultReceiver)}
without a result: request to hide the soft input window from the
context of the window that is currently accepting input.

@param windowToken The token of the window that is making the request,
as returned by {@link View#getWindowToken() View.getWindowToken()}.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #HIDE_IMPLICIT_ONLY} bit set."
      end

      operation 2873228 "hideSoftInputFromWindow"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "windowToken" type class_ref 688652 // IBinder
	  param in name "flags" explicit_type "int"
	  param inout name "resultReceiver" type class_ref 769164 // ResultReceiver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Request to hide the soft input window from the context of the window
that is currently accepting input.  This should be called as a result
of the user doing some actually than fairly explicitly requests to
have the input window hidden.

@param windowToken The token of the window that is making the request,
as returned by {@link View#getWindowToken() View.getWindowToken()}.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #HIDE_IMPLICIT_ONLY} bit set.
@param resultReceiver If non-null, this will be called by the IME when
it has processed your request to tell you what it has done.  The result
code you receive may be either {@link #RESULT_UNCHANGED_SHOWN},
{@link #RESULT_UNCHANGED_HIDDEN}, {@link #RESULT_SHOWN}, or
{@link #RESULT_HIDDEN}."
      end

      operation 2873356 "toggleSoftInputFromWindow"
	public explicit_return_type "void"
	nparams 3
	  param inout name "windowToken" type class_ref 688652 // IBinder
	  param in name "showFlags" explicit_type "int"
	  param in name "hideFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method toggles the input method window display.
If the input window is already displayed, it gets hidden. 
If not the input window will be displayed.
@param windowToken The token of the window that is making the request,
as returned by {@link View#getWindowToken() View.getWindowToken()}.
@param showFlags Provides additional operating flags.  May be
0 or have the {@link #SHOW_IMPLICIT},
{@link #SHOW_FORCED} bit set.
@param hideFlags Provides additional operating flags.  May be
0 or have the {@link #HIDE_IMPLICIT_ONLY},
{@link #HIDE_NOT_ALWAYS} bit set."
      end

      operation 2873484 "toggleSoftInput"
	public explicit_return_type "void"
	nparams 2
	  param in name "showFlags" explicit_type "int"
	  param in name "hideFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method toggles the input method window display.
If the input window is already displayed, it gets hidden. 
If not the input window will be displayed.
@param showFlags Provides additional operating flags.  May be
0 or have the {@link #SHOW_IMPLICIT},
{@link #SHOW_FORCED} bit set.
@param hideFlags Provides additional operating flags.  May be
0 or have the {@link #HIDE_IMPLICIT_ONLY},
{@link #HIDE_NOT_ALWAYS} bit set.
@hide"
      end

      operation 2873612 "restartInput"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 694028 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the input method is currently connected to the given view,
restart it with its new contents.  You should call this when the text
within your view changes outside of the normal input method or key
input flow, such as when an application calls TextView.setText().

@param view The view whose text has changed."
      end

      operation 2873740 "startInputInner"
	package explicit_return_type "boolean"
	nparams 4
	  param inout name "windowGainingFocus" type class_ref 688652 // IBinder
	  param in name "controlFlags" explicit_type "int"
	  param in name "softInputMode" explicit_type "int"
	  param in name "windowFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2873868 "windowDismissed"
	public explicit_return_type "void"
	nparams 1
	  param inout name "appWindowToken" type class_ref 688652 // IBinder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "When the focused window is dismissed, this method is called to finish the
input method started before.
@hide"
      end

      operation 2873996 "focusIn"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 694028 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call this when a view receives focus.
@hide"
      end

      operation 2874124 "focusInLocked"
	package explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 694028 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2874252 "focusOut"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 694028 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call this when a view loses focus.
@hide"
      end

      operation 2874380 "scheduleCheckFocusLocked"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 694028 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2874508 "checkFocus"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2874636 "checkFocusNoStartInput"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "forceNewFocus" explicit_type "boolean"
	  param inout name "finishComposingText" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2874764 "closeCurrentInput"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2874892 "onWindowFocus"
	public explicit_return_type "void"
	nparams 5
	  param inout name "rootView" type class_ref 694028 // View
	  param inout name "focusedView" type class_ref 694028 // View
	  param in name "softInputMode" explicit_type "int"
	  param inout name "first" explicit_type "boolean"
	  param in name "windowFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by ViewAncestor when its window gets input focus.
@hide"
      end

      operation 2875020 "startGettingWindowFocus"
	public explicit_return_type "void"
	nparams 1
	  param inout name "rootView" type class_ref 694028 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 2875148 "updateSelection"
	public explicit_return_type "void"
	nparams 5
	  param inout name "view" type class_ref 694028 // View
	  param in name "selStart" explicit_type "int"
	  param in name "selEnd" explicit_type "int"
	  param in name "candidatesStart" explicit_type "int"
	  param in name "candidatesEnd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the current selection range."
      end

      operation 2875276 "viewClicked"
	public explicit_return_type "void"
	nparams 1
	  param inout name "view" type class_ref 694028 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notify the event when the user tapped or clicked the text view."
      end

      operation 2875404 "isWatchingCursor"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "view" type class_ref 694028 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the current input method wants to watch the location
of the input editor's cursor in its window."
      end

      operation 2875532 "updateCursor"
	public explicit_return_type "void"
	nparams 5
	  param inout name "view" type class_ref 694028 // View
	  param in name "left" explicit_type "int"
	  param in name "top" explicit_type "int"
	  param in name "right" explicit_type "int"
	  param in name "bottom" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the current cursor location in its window."
      end

      operation 2875660 "sendAppPrivateCommand"
	public explicit_return_type "void"
	nparams 3
	  param inout name "view" type class_ref 694028 // View
	  param in name "action" explicit_type "String"
	  param inout name "data" type class_ref 678924 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Call {@link InputMethodSession#appPrivateCommand(String, Bundle)
InputMethodSession.appPrivateCommand()} on the current Input Method.
@param view Optional View that is sending the command, or null if
you want to send the command regardless of the view that is attached
to the input method.
@param action Name of the command to be performed.  This <em>must</em>
be a scoped name, i.e. prefixed with a package name you own, so that
different developers will not create conflicting commands.
@param data Any data to include with the command."
      end

      operation 2875788 "setInputMethod"
	public explicit_return_type "void"
	nparams 2
	  param inout name "token" type class_ref 688652 // IBinder
	  param in name "id" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force switch to a new input method component. This can only be called
from an application or a service which has a token of the currently active input method.
@param token Supplies the identifying token given to an input method
when it was started, which allows it to perform this operation on
itself.
@param id The unique identifier for the new input method to be switched to."
      end

      operation 2875916 "setInputMethodAndSubtype"
	public explicit_return_type "void"
	nparams 3
	  param inout name "token" type class_ref 688652 // IBinder
	  param in name "id" explicit_type "String"
	  param inout name "subtype" type class_ref 768780 // InputMethodSubtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force switch to a new input method and subtype. This can only be called
from an application or a service which has a token of the currently active input method.
@param token Supplies the identifying token given to an input method
when it was started, which allows it to perform this operation on
itself.
@param id The unique identifier for the new input method to be switched to.
@param subtype The new subtype of the new input method to be switched to."
      end

      operation 2876044 "hideSoftInputFromInputMethod"
	public explicit_return_type "void"
	nparams 2
	  param inout name "token" type class_ref 688652 // IBinder
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Close/hide the input method's soft input area, so the user no longer
sees it or can interact with it.  This can only be called
from the currently active input method, as validated by the given token.

@param token Supplies the identifying token given to an input method
when it was started, which allows it to perform this operation on
itself.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #HIDE_IMPLICIT_ONLY},
{@link #HIDE_NOT_ALWAYS} bit set."
      end

      operation 2876172 "showSoftInputFromInputMethod"
	public explicit_return_type "void"
	nparams 2
	  param inout name "token" type class_ref 688652 // IBinder
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Show the input method's soft input area, so the user 
sees the input method window and can interact with it.
This can only be called from the currently active input method,
as validated by the given token.

@param token Supplies the identifying token given to an input method
when it was started, which allows it to perform this operation on
itself.
@param flags Provides additional operating flags.  Currently may be
0 or have the {@link #SHOW_IMPLICIT} or
{@link #SHOW_FORCED} bit set."
      end

      operation 2876300 "dispatchKeyEvent"
	public explicit_return_type "void"
	nparams 4
	  param inout name "context" type class_ref 684812 // Context
	  param in name "seq" explicit_type "int"
	  param inout name "key" type class_ref 681740 // KeyEvent
	  param inout name "callback" type class_ref 767244 // FinishedEventCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2876428 "dispatchTrackballEvent"
	public explicit_return_type "void"
	nparams 4
	  param inout name "context" type class_ref 684812 // Context
	  param in name "seq" explicit_type "int"
	  param inout name "motion" type class_ref 702092 // MotionEvent
	  param inout name "callback" type class_ref 767244 // FinishedEventCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2876556 "dispatchGenericMotionEvent"
	public explicit_return_type "void"
	nparams 4
	  param inout name "context" type class_ref 684812 // Context
	  param in name "seq" explicit_type "int"
	  param inout name "motion" type class_ref 702092 // MotionEvent
	  param inout name "callback" type class_ref 767244 // FinishedEventCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 2876684 "finishedEvent"
	package explicit_return_type "void"
	nparams 2
	  param in name "seq" explicit_type "int"
	  param inout name "handled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2876812 "timeoutEvent"
	package explicit_return_type "void"
	nparams 1
	  param in name "seq" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2876940 "enqueuePendingEventLocked"
	private explicit_return_type "void"
	nparams 4
	  param in name "startTime" explicit_type "long"
	  param in name "seq" explicit_type "int"
	  param in name "inputMethodId" explicit_type "String"
	  param inout name "callback" type class_ref 767244 // FinishedEventCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2877068 "dequeuePendingEventLocked"
	private return_type class_ref 767756 // PendingEvent
	nparams 1
	  param in name "seq" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2877196 "obtainPendingEventLocked"
	private return_type class_ref 767756 // PendingEvent
	nparams 4
	  param in name "startTime" explicit_type "long"
	  param in name "seq" explicit_type "int"
	  param in name "inputMethodId" explicit_type "String"
	  param inout name "callback" type class_ref 767244 // FinishedEventCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2877324 "recyclePendingEventLocked"
	private explicit_return_type "void"
	nparams 1
	  param inout name "p" type class_ref 767756 // PendingEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2877452 "showInputMethodPicker"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2877580 "showInputMethodPickerLocked"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2877708 "showInputMethodAndSubtypeEnabler"
	public explicit_return_type "void"
	nparams 1
	  param in name "imiId" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Show the settings for enabling subtypes of the specified input method.
@param imiId An input method, whose subtypes settings will be shown. If imiId is null,
subtypes of all input methods will be shown."
      end

      operation 2877836 "getCurrentInputMethodSubtype"
	public return_type class_ref 768780 // InputMethodSubtype
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current input method subtype. This subtype is one of the subtypes in
the current input method. This method returns null when the current input method doesn't
have any input method subtype."
      end

      operation 2877964 "setCurrentInputMethodSubtype"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "subtype" type class_ref 768780 // InputMethodSubtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Switch to a new input method subtype of the current input method.
@param subtype A new input method subtype to switch.
@return true if the current subtype was successfully switched. When the specified subtype is
null, this method returns false."
      end

      operation 2878092 "getShortcutInputMethodsAndSubtypes"
	public return_type class_ref 768652 // InputMethodInfo
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}Map<${type}, List<InputMethodSubtype>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a map of all shortcut input method info and their subtypes."
      end

      operation 2878220 "switchToLastInputMethod"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "imeToken" type class_ref 688652 // IBinder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force switch to the last used input method and subtype. If the last input method didn't have
any subtypes, the framework will simply switch to the last input method with no subtype
specified.
@param imeToken Supplies the identifying token given to an input method when it was started,
which allows it to perform this operation on itself.
@return true if the current input method and subtype was successfully switched to the last
used input method and subtype."
      end

      operation 2878348 "switchToNextInputMethod"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "imeToken" type class_ref 688652 // IBinder
	  param inout name "onlyCurrentIme" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Force switch to the next input method and subtype. If there is no IME enabled except
current IME and subtype, do nothing.
@param imeToken Supplies the identifying token given to an input method when it was started,
which allows it to perform this operation on itself.
@param onlyCurrentIme if true, the framework will find the next subtype which
belongs to the current IME
@return true if the current input method and subtype was successfully switched to the next
input method and subtype."
      end

      operation 2878476 "setAdditionalInputMethodSubtypes"
	public explicit_return_type "void"
	nparams 2
	  param in name "imiId" explicit_type "String"
	  param inout name "subtypes" type class_ref 768780 // InputMethodSubtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set additional input method subtypes. Only a process which shares the same uid with the IME
can add additional input method subtypes to the IME.
Please note that a subtype's status is stored in the system.
For example, enabled subtypes are remembered by the framework even after they are removed
by using this method. If you re-add the same subtypes again,
they will just get enabled. If you want to avoid such conflicts, for instance, you may
want to create a \"different\" new subtype even with the same locale and mode,
by changing its extra value. The different subtype won't get affected by the stored past
status. (You may want to take a look at {@link InputMethodSubtype#hashCode()} to refer
to the current implementation.)
@param imiId Id of InputMethodInfo which additional input method subtypes will be added to.
@param subtypes subtypes will be added as additional subtypes of the current input method."
      end

      operation 2878604 "getLastInputMethodSubtype"
	public return_type class_ref 768780 // InputMethodSubtype
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 2878732 "doDump"
	package explicit_return_type "void"
	nparams 3
	  param inout name "fd" explicit_type "FileDescriptor"
	  param inout name "fout" explicit_type "PrintWriter"
	  param inout name "args" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 7322380 // mService (<unidirectional association>)
	relation 7322252 --->
	  a role_name "mService" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 7322380 // mService (<unidirectional association>)
	  b parent class_ref 2317452 // IInputMethodManager
      end
    end

    class 767628 "CompletionInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Information about a single text completion that an editor has reported to
an input method."
      classrelation 1935628 // <realization>
	relation 1935628 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1935628 // <realization>
	  b parent class_ref 691212 // Parcelable
      end

      attribute 3419916 "mId"
	const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3420044 "mPosition"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3420172 "mText"
	const_attribute private explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3420300 "mLabel"
	const_attribute private explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4757516 "CompletionInfo"
	public explicit_return_type ""
	nparams 3
	  param in name "id" explicit_type "long"
	  param in name "index" explicit_type "int"
	  param inout name "text" explicit_type "CharSequence"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a simple completion with just text, no label."
      end

      operation 4757644 "CompletionInfo"
	public explicit_return_type ""
	nparams 4
	  param in name "id" explicit_type "long"
	  param in name "index" explicit_type "int"
	  param inout name "text" explicit_type "CharSequence"
	  param inout name "label" explicit_type "CharSequence"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a full completion with both text and label."
      end

      operation 4757772 "CompletionInfo"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 691340 // Parcel
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4757900 "getId"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the abstract identifier for this completion, typically
corresponding to the id associated with it in the original adapter."
      end

      operation 4758028 "getPosition"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the original position of this completion, typically
corresponding to its position in the original adapter."
      end

      operation 4758156 "getText"
	public explicit_return_type "CharSequence"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the actual text associated with this completion.  This is the
real text that will be inserted into the editor if the user selects it."
      end

      operation 4758284 "getLabel"
	public explicit_return_type "CharSequence"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the user-visible label for the completion, or null if the plain
text should be shown.  If non-null, this will be what the user sees as
the completion option instead of the actual text."
      end

      operation 4758412 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4758540 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 691340 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 1935756 // CREATOR (<unidirectional association>)
	relation 1935756 --->
	  a role_name "CREATOR" init_value " new Parcelable.Creator<CompletionInfo>() {
        public CompletionInfo createFromParcel(Parcel source) {
            return new CompletionInfo(source);
        }

        public CompletionInfo[] newArray(int size) {
            return new CompletionInfo[size];
        }
    }" class_relation const_relation public
	    comment "
Used to make this class parcelable.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<CompletionInfo> ${name}${value};
"
	    classrelation_ref 1935756 // CREATOR (<unidirectional association>)
	  b parent class_ref 691468 // Creator
      end

      operation 4758668 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 768396 "ExtractedTextRequest"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Description of what an input method would like from an application when
extract text from its input editor."
      classrelation 1936908 // <realization>
	relation 1936908 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1936908 // <realization>
	  b parent class_ref 691212 // Parcelable
      end

      attribute 3425804 "token"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Arbitrary integer that can be supplied in the request, which will be
delivered back when reporting updates.
"
      end

      attribute 3425932 "flags"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Additional request flags, having the same possible values as the
flags parameter of {@link InputConnection#getTextBeforeCursor
InputConnection.getTextBeforeCursor()}.
"
      end

      attribute 3426060 "hintMaxLines"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Hint for the maximum number of lines to return.
"
      end

      attribute 3426188 "hintMaxChars"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Hint for the maximum number of characters to return.
"
      end

      operation 4760588 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 691340 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 1937036 // CREATOR (<unidirectional association>)
	relation 1937036 --->
	  a role_name "CREATOR" init_value " new Parcelable.Creator<ExtractedTextRequest>() {
        public ExtractedTextRequest createFromParcel(Parcel source) {
            ExtractedTextRequest res = new ExtractedTextRequest();
            res.token = source.readInt();
            res.flags = source.readInt();
            res.hintMaxLines = source.readInt();
            res.hintMaxChars = source.readInt();
            return res;
        }

        public ExtractedTextRequest[] newArray(int size) {
            return new ExtractedTextRequest[size];
        }
    }" class_relation const_relation public
	    comment "
Used to make this class parcelable.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ExtractedTextRequest> ${name}${value};
"
	    classrelation_ref 1937036 // CREATOR (<unidirectional association>)
	  b parent class_ref 691468 // Creator
      end

      operation 4760716 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 768524 "CorrectionInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Information about a single text correction that an editor has reported to
an input method."
      classrelation 1935884 // <realization>
	relation 1935884 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1935884 // <realization>
	  b parent class_ref 691212 // Parcelable
      end

      attribute 3420428 "mOffset"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3420556 "mOldText"
	const_attribute private explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3420684 "mNewText"
	const_attribute private explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4758796 "CorrectionInfo"
	public explicit_return_type ""
	nparams 3
	  param in name "offset" explicit_type "int"
	  param inout name "oldText" explicit_type "CharSequence"
	  param inout name "newText" explicit_type "CharSequence"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param offset The offset in the edited text where the old and new text start.
@param oldText The old text that has been replaced.
@param newText The replacement text."
      end

      operation 4758924 "CorrectionInfo"
	private explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 691340 // Parcel
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4759052 "getOffset"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the offset position of this correction in the text. Both the {@link #getOldText()} and
{@link #getNewText()} start at this offset."
      end

      operation 4759180 "getOldText"
	public explicit_return_type "CharSequence"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the text that has actually been typed by the user, and which has been corrected."
      end

      operation 4759308 "getNewText"
	public explicit_return_type "CharSequence"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the new text that corrects what was typed by the user."
      end

      operation 4759436 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4759564 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 691340 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 1936012 // CREATOR (<unidirectional association>)
	relation 1936012 --->
	  a role_name "CREATOR" init_value " new Parcelable.Creator<CorrectionInfo>() {
        public CorrectionInfo createFromParcel(Parcel source) {
            return new CorrectionInfo(source);
        }

        public CorrectionInfo[] newArray(int size) {
            return new CorrectionInfo[size];
        }
    }" class_relation const_relation public
	    comment "
Used to make this class parcelable.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<CorrectionInfo> ${name}${value};
"
	    classrelation_ref 1936012 // CREATOR (<unidirectional association>)
	  b parent class_ref 691468 // Creator
      end

      operation 4759692 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 768652 "InputMethodInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is used to specify meta information of an input method."
      classrelation 1937932 // <realization>
	relation 1937932 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1937932 // <realization>
	  b parent class_ref 691212 // Parcelable
      end

      attribute 3426828 "TAG"
	class_attribute const_attribute package explicit_type "String"
	init_value " \"InputMethodInfo\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1938060 // mService (<unidirectional association>)
	relation 1938060 --->
	  a role_name "mService" const_relation package
	    comment "
The Service that implements this input method component.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1938060 // mService (<unidirectional association>)
	  b parent class_ref 691724 // ResolveInfo
      end

      attribute 3426956 "mId"
	const_attribute package explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The unique string Id to identify the input method.  This is generated
from the input method component.
"
      end

      attribute 3427084 "mSettingsActivityName"
	const_attribute package explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The input method setting activity's name, used by the system settings to
launch the setting activity of this input method.
"
      end

      attribute 3427212 "mIsDefaultResId"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The resource in the input method's .apk that holds a boolean indicating
whether it should be considered the default input method for this
system.  This is a resource ID instead of the final value so that it
can change based on the configuration (in particular locale).
"
      end

      classrelation 1938188 // mSubtypes (<unidirectional association>)
	relation 1938188 --->
	  stereotype "ArrayList"
	  a role_name "mSubtypes" init_value " new ArrayList<InputMethodSubtype>()" const_relation private
	    comment "The array of the subtypes.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 1938188 // mSubtypes (<unidirectional association>)
	  b parent class_ref 768780 // InputMethodSubtype
      end

      attribute 3427340 "mIsAuxIme"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4765068 "InputMethodInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "context" type class_ref 684812 // Context
	  param inout name "service" type class_ref 691724 // ResolveInfo
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param context The Context in which we are parsing the input method.
@param service The ResolveInfo returned from the package manager about
this input method's component."
      end

      operation 4765196 "InputMethodInfo"
	public explicit_return_type ""
	nparams 3
	  param inout name "context" type class_ref 684812 // Context
	  param inout name "service" type class_ref 691724 // ResolveInfo
	  param inout name "additionalSubtypesMap" explicit_type "Map<String, List<InputMethodSubtype>>"
	nexceptions 2
	  explicit_exception "XmlPullParserException"
	  explicit_exception "IOException"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param context The Context in which we are parsing the input method.
@param service The ResolveInfo returned from the package manager about
this input method's component.
@param additionalSubtypes additional subtypes being added to this InputMethodInfo
@hide"
      end

      operation 4765324 "InputMethodInfo"
	package explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 691340 // Parcel
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4765452 "InputMethodInfo"
	public explicit_return_type ""
	nparams 4
	  param in name "packageName" explicit_type "String"
	  param in name "className" explicit_type "String"
	  param inout name "label" explicit_type "CharSequence"
	  param in name "settingsActivity" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Temporary API for creating a built-in input method."
      end

      operation 4765580 "getId"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return a unique ID for this input method.  The ID is generated from
the package and class name implementing the method."
      end

      operation 4765708 "getPackageName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the .apk package that implements this input method."
      end

      operation 4765836 "getServiceName"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the class name of the service component that implements
this input method."
      end

      operation 4765964 "getServiceInfo"
	public return_type class_ref 734220 // ServiceInfo
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the raw information about the Service implementing this
input method.  Do not modify the returned object."
      end

      operation 4766092 "getComponent"
	public return_type class_ref 679308 // ComponentName
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the component of the service that implements this input
method."
      end

      operation 4766220 "loadLabel"
	public explicit_return_type "CharSequence"
	nparams 1
	  param inout name "pm" type class_ref 685068 // PackageManager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the user-displayed label for this input method.

@param pm Supply a PackageManager used to load the input method's
resources."
      end

      operation 4766348 "loadIcon"
	public return_type class_ref 686732 // Drawable
	nparams 1
	  param inout name "pm" type class_ref 685068 // PackageManager
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Load the user-displayed icon for this input method.

@param pm Supply a PackageManager used to load the input method's
resources."
      end

      operation 4766476 "getSettingsActivity"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the class name of an activity that provides a settings UI for
the input method.  You can launch this activity be starting it with
an {@link android.content.Intent} whose action is MAIN and with an
explicit {@link android.content.ComponentName}
composed of {@link #getPackageName} and the class name returned here.

<p>A null will be returned if there is no settings activity associated
with the input method."
      end

      operation 4766604 "getSubtypeCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the count of the subtypes of Input Method."
      end

      operation 4766732 "getSubtypeAt"
	public return_type class_ref 768780 // InputMethodSubtype
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the Input Method's subtype at the specified index.

@param index the index of the subtype to return."
      end

      operation 4766860 "getIsDefaultResourceId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the resource identifier of a resource inside of this input
method's .apk that determines whether it should be considered a
default input method for the system."
      end

      operation 4766988 "dump"
	public explicit_return_type "void"
	nparams 2
	  param inout name "pw" type class_ref 690572 // Printer
	  param in name "prefix" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4767116 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4767244 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Used to test whether the given parameter object is an
{@link InputMethodInfo} and its Id is the same to this one.

@return true if the given parameter object is an
        {@link InputMethodInfo} and its Id is the same to this one."
      end

      operation 4767372 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4767500 "isAuxiliaryIme"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@hide"
      end

      operation 4767628 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 691340 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 1938316 // CREATOR (<unidirectional association>)
	relation 1938316 --->
	  a role_name "CREATOR" init_value " new Parcelable.Creator<InputMethodInfo>() {
        @Override
        public InputMethodInfo createFromParcel(Parcel source) {
            return new InputMethodInfo(source);
        }

        @Override
        public InputMethodInfo[] newArray(int size) {
            return new InputMethodInfo[size];
        }
    }" class_relation const_relation public
	    comment "
Used to make this class parcelable.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<InputMethodInfo> ${name}${value};
"
	    classrelation_ref 1938316 // CREATOR (<unidirectional association>)
	  b parent class_ref 691468 // Creator
      end

      operation 4767756 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end
    end

    class 768780 "InputMethodSubtype"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class is used to specify meta information of a subtype contained in an input method editor
(IME). Subtype can describe locale (e.g. en_US, fr_FR...) and mode (e.g. voice, keyboard...),
and is used for IME switch and settings. The input method subtype allows the system to bring up
the specified subtype of the designated IME directly.

<p>It should be defined in an XML resource file of the input method with the
<code>&lt;subtype&gt;</code> element. For more information, see the guide to
<a href=\"{@docRoot}resources/articles/creating-input-method.html\">
Creating an Input Method</a>.</p>"
      classrelation 1938444 // <realization>
	relation 1938444 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1938444 // <realization>
	  b parent class_ref 691212 // Parcelable
      end

      attribute 3427468 "TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " InputMethodSubtype.class.getSimpleName()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3427596 "EXTRA_VALUE_PAIR_SEPARATOR"
	class_attribute const_attribute private explicit_type "String"
	init_value " \",\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3427724 "EXTRA_VALUE_KEY_VALUE_SEPARATOR"
	class_attribute const_attribute private explicit_type "String"
	init_value " \"=\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3427852 "EXTRA_KEY_UNTRANSLATABLE_STRING_IN_SUBTYPE_NAME"
	class_attribute const_attribute private explicit_type "String"
	init_value "
            \"UntranslatableReplacementStringInSubtypeName\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " TODO: remove this"
      end

      attribute 3427980 "mIsAuxiliary"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3428108 "mOverridesImplicitlyEnabledSubtype"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3428236 "mSubtypeHashCode"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3428364 "mSubtypeIconResId"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3428492 "mSubtypeNameResId"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3428620 "mSubtypeId"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3428748 "mSubtypeLocale"
	const_attribute private explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3428876 "mSubtypeMode"
	const_attribute private explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3429004 "mSubtypeExtraValue"
	const_attribute private explicit_type "String"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3429132 "mExtraValueHashMapCache"
	volatile private explicit_type "String, String"
	stereotype "HashMap"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 4767884 "InputMethodSubtype"
	public explicit_return_type ""
	nparams 6
	  param in name "nameId" explicit_type "int"
	  param in name "iconId" explicit_type "int"
	  param in name "locale" explicit_type "String"
	  param in name "mode" explicit_type "String"
	  param in name "extraValue" explicit_type "String"
	  param inout name "isAuxiliary" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with no subtype ID specified, overridesImplicitlyEnabledSubtype not specified.
@param nameId Resource ID of the subtype name string. The string resource may have exactly
one %s in it. If there is, the %s part will be replaced with the locale's display name by
the formatter. Please refer to {@link #getDisplayName} for details.
@param iconId Resource ID of the subtype icon drawable.
@param locale The locale supported by the subtype
@param mode The mode supported by the subtype
@param extraValue The extra value of the subtype. This string is free-form, but the API
supplies tools to deal with a key-value comma-separated list; see
{@link #containsExtraValueKey} and {@link #getExtraValueOf}.
@param isAuxiliary true when this subtype is auxiliary, false otherwise. An auxiliary
subtype will not be shown in the list of enabled IMEs for choosing the current IME in
the Settings even when this subtype is enabled. Please note that this subtype will still
be shown in the list of IMEs in the IME switcher to allow the user to tentatively switch
to this subtype while an IME is shown. The framework will never switch the current IME to
this subtype by {@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.
The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as
auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input).
@hide"
      end

      operation 4768012 "InputMethodSubtype"
	public explicit_return_type ""
	nparams 7
	  param in name "nameId" explicit_type "int"
	  param in name "iconId" explicit_type "int"
	  param in name "locale" explicit_type "String"
	  param in name "mode" explicit_type "String"
	  param in name "extraValue" explicit_type "String"
	  param inout name "isAuxiliary" explicit_type "boolean"
	  param inout name "overridesImplicitlyEnabledSubtype" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor with no subtype ID specified.
@param nameId Resource ID of the subtype name string. The string resource may have exactly
one %s in it. If there is, the %s part will be replaced with the locale's display name by
the formatter. Please refer to {@link #getDisplayName} for details.
@param iconId Resource ID of the subtype icon drawable.
@param locale The locale supported by the subtype
@param mode The mode supported by the subtype
@param extraValue The extra value of the subtype. This string is free-form, but the API
supplies tools to deal with a key-value comma-separated list; see
{@link #containsExtraValueKey} and {@link #getExtraValueOf}.
@param isAuxiliary true when this subtype is auxiliary, false otherwise. An auxiliary
subtype will not be shown in the list of enabled IMEs for choosing the current IME in
the Settings even when this subtype is enabled. Please note that this subtype will still
be shown in the list of IMEs in the IME switcher to allow the user to tentatively switch
to this subtype while an IME is shown. The framework will never switch the current IME to
this subtype by {@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.
The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as
auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input).
@param overridesImplicitlyEnabledSubtype true when this subtype should be enabled by default
if no other subtypes in the IME are enabled explicitly. Note that a subtype with this
parameter being true will not be shown in the list of subtypes in each IME's subtype enabler.
Having an \"automatic\" subtype is an example use of this flag."
      end

      operation 4768140 "InputMethodSubtype"
	public explicit_return_type ""
	nparams 8
	  param in name "nameId" explicit_type "int"
	  param in name "iconId" explicit_type "int"
	  param in name "locale" explicit_type "String"
	  param in name "mode" explicit_type "String"
	  param in name "extraValue" explicit_type "String"
	  param inout name "isAuxiliary" explicit_type "boolean"
	  param inout name "overridesImplicitlyEnabledSubtype" explicit_type "boolean"
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}, ${t7} ${p7}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.
@param nameId Resource ID of the subtype name string. The string resource may have exactly
one %s in it. If there is, the %s part will be replaced with the locale's display name by
the formatter. Please refer to {@link #getDisplayName} for details.
@param iconId Resource ID of the subtype icon drawable.
@param locale The locale supported by the subtype
@param mode The mode supported by the subtype
@param extraValue The extra value of the subtype. This string is free-form, but the API
supplies tools to deal with a key-value comma-separated list; see
{@link #containsExtraValueKey} and {@link #getExtraValueOf}.
@param isAuxiliary true when this subtype is auxiliary, false otherwise. An auxiliary
subtype will not be shown in the list of enabled IMEs for choosing the current IME in
the Settings even when this subtype is enabled. Please note that this subtype will still
be shown in the list of IMEs in the IME switcher to allow the user to tentatively switch
to this subtype while an IME is shown. The framework will never switch the current IME to
this subtype by {@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.
The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as
auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input).
@param overridesImplicitlyEnabledSubtype true when this subtype should be enabled by default
if no other subtypes in the IME are enabled explicitly. Note that a subtype with this
parameter being true will not be shown in the list of subtypes in each IME's subtype enabler.
Having an \"automatic\" subtype is an example use of this flag.
@param id The unique ID for the subtype. The input method framework keeps track of enabled
subtypes by ID. When the IME package gets upgraded, enabled IDs will stay enabled even if
other attributes are different. If the ID is unspecified or 0,
Arrays.hashCode(new Object[] {locale, mode, extraValue,
isAuxiliary, overridesImplicitlyEnabledSubtype}) will be used instead."
      end

      operation 4768268 "InputMethodSubtype"
	package explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 691340 // Parcel
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4768396 "getNameResId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return Resource ID of the subtype name string."
      end

      operation 4768524 "getIconResId"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return Resource ID of the subtype icon drawable."
      end

      operation 4768652 "getLocale"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The locale of the subtype. This method returns the \"locale\" string parameter passed
to the constructor."
      end

      operation 4768780 "getMode"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The mode of the subtype."
      end

      operation 4768908 "getExtraValue"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return The extra value of the subtype."
      end

      operation 4769036 "isAuxiliary"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true if this subtype is auxiliary, false otherwise. An auxiliary subtype will not be
shown in the list of enabled IMEs for choosing the current IME in the Settings even when this
subtype is enabled. Please note that this subtype will still be shown in the list of IMEs in
the IME switcher to allow the user to tentatively switch to this subtype while an IME is
shown. The framework will never switch the current IME to this subtype by
{@link android.view.inputmethod.InputMethodManager#switchToLastInputMethod}.
The intent of having this flag is to allow for IMEs that are invoked in a one-shot way as
auxiliary input mode, and return to the previous IME once it is finished (e.g. voice input)."
      end

      operation 4769164 "overridesImplicitlyEnabledSubtype"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return true when this subtype will be enabled by default if no other subtypes in the IME
are enabled explicitly, false otherwise. Note that a subtype with this method returning true
will not be shown in the list of subtypes in each IME's subtype enabler. Having an
\"automatic\" subtype is an example use of this flag."
      end

      operation 4769292 "getDisplayName"
	public explicit_return_type "CharSequence"
	nparams 3
	  param inout name "context" type class_ref 684812 // Context
	  param in name "packageName" explicit_type "String"
	  param inout name "appInfo" type class_ref 686092 // ApplicationInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param context Context will be used for getting Locale and PackageManager.
@param packageName The package name of the IME
@param appInfo The application info of the IME
@return a display name for this subtype. The string resource of the label (mSubtypeNameResId)
may have exactly one %s in it. If there is, the %s part will be replaced with the locale's
display name by the formatter. If there is not, this method returns the string specified by
mSubtypeNameResId. If mSubtypeNameResId is not specified (== 0), it's up to the framework to
generate an appropriate display name."
      end

      operation 4769420 "getExtraValueHashMap"
	private explicit_return_type "HashMap<String, String>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4769548 "containsExtraValueKey"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The string of ExtraValue in subtype should be defined as follows:
example: key0,key1=value1,key2,key3,key4=value4
@param key The key of extra value
@return The subtype contains specified the extra value"
      end

      operation 4769676 "getExtraValueOf"
	public explicit_return_type "String"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The string of ExtraValue in subtype should be defined as follows:
example: key0,key1=value1,key2,key3,key4=value4
@param key The key of extra value
@return The value of the specified key"
      end

      operation 4769804 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4769932 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4770060 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4770188 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 691340 // Parcel
	  param in name "parcelableFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      classrelation 1938572 // CREATOR (<unidirectional association>)
	relation 1938572 --->
	  a role_name "CREATOR" init_value " new Parcelable.Creator<InputMethodSubtype>() {
        @Override
        public InputMethodSubtype createFromParcel(Parcel source) {
            return new InputMethodSubtype(source);
        }

        @Override
        public InputMethodSubtype[] newArray(int size) {
            return new InputMethodSubtype[size];
        }
    }" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<InputMethodSubtype> ${name}${value};
"
	    classrelation_ref 1938572 // CREATOR (<unidirectional association>)
	  b parent class_ref 691468 // Creator
      end

      operation 4770316 "constructLocaleFromString"
	class_operation private explicit_return_type "Locale"
	nparams 1
	  param in name "localeStr" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4770444 "hashCodeInternal"
	class_operation private explicit_return_type "int"
	nparams 5
	  param in name "locale" explicit_type "String"
	  param in name "mode" explicit_type "String"
	  param in name "extraValue" explicit_type "String"
	  param inout name "isAuxiliary" explicit_type "boolean"
	  param inout name "overridesImplicitlyEnabledSubtype" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4770572 "sort"
	class_operation public return_type class_ref 768780 // InputMethodSubtype
	nparams 4
	  param inout name "context" type class_ref 684812 // Context
	  param in name "flags" explicit_type "int"
	  param inout name "imi" type class_ref 768652 // InputMethodInfo
	  param inout name "subtypeList" explicit_type "List<InputMethodSubtype>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}List<${type}> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sort the list of InputMethodSubtype
@param context Context will be used for getting localized strings from IME
@param flags Flags for the sort order
@param imi InputMethodInfo of which subtypes are subject to be sorted
@param subtypeList List of InputMethodSubtype which will be sorted
@return Sorted list of subtypes
@hide"
      end
    end

    class 769036 "ExtractedText"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Information about text that has been extracted for use by an input method."
      classrelation 1936652 // <realization>
	relation 1936652 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1936652 // <realization>
	  b parent class_ref 691212 // Parcelable
      end

      attribute 3424652 "text"
	public explicit_type "CharSequence"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The text that has been extracted.
"
      end

      attribute 3424780 "startOffset"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The offset in the overall text at which the extracted text starts.
"
      end

      attribute 3424908 "partialStartOffset"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If the content is a report of a partial text change, this is the
offset where the change starts and it runs until
{@link #partialEndOffset}.  If the content is the full text, this
field is -1.
"
      end

      attribute 3425036 "partialEndOffset"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If the content is a report of a partial text change, this is the offset
where the change ends.  Note that the actual text may be larger or
smaller than the difference between this and {@link #partialStartOffset},
meaning a reduction or increase, respectively, in the total text.
"
      end

      attribute 3425164 "selectionStart"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The offset where the selection currently starts within the extracted
text.  The real selection start position is at
<var>startOffset</var>+<var>selectionStart</var>.
"
      end

      attribute 3425292 "selectionEnd"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The offset where the selection currently ends within the extracted
text.  The real selection end position is at
<var>startOffset</var>+<var>selectionEnd</var>.
"
      end

      attribute 3425420 "FLAG_SINGLE_LINE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit for {@link #flags}: set if the text being edited can only be on
a single line.
"
      end

      attribute 3425548 "FLAG_SELECTING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit for {@link #flags}: set if the editor is currently in selection mode.
"
      end

      attribute 3425676 "flags"
	public explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Additional bit flags of information about the edited text.
"
      end

      operation 4760332 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 691340 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 1936780 // CREATOR (<unidirectional association>)
	relation 1936780 --->
	  a role_name "CREATOR" init_value " new Parcelable.Creator<ExtractedText>() {
        public ExtractedText createFromParcel(Parcel source) {
            ExtractedText res = new ExtractedText();
            res.text = TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(source);
            res.startOffset = source.readInt();
            res.partialStartOffset = source.readInt();
            res.partialEndOffset = source.readInt();
            res.selectionStart = source.readInt();
            res.selectionEnd = source.readInt();
            res.flags = source.readInt();
            return res;
        }

        public ExtractedText[] newArray(int size) {
            return new ExtractedText[size];
        }
    }" class_relation const_relation public
	    comment "
Used to make this class parcelable.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ExtractedText> ${name}${value};
"
	    classrelation_ref 1936780 // CREATOR (<unidirectional association>)
	  b parent class_ref 691468 // Creator
      end

      operation 4760460 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 823820 "InputMethod"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The InputMethod interface represents an input method which can generate key
events and text, such as digital, email addresses, CJK characters, other
language characters, and etc., while handling various input events, and send
the text back to the application that requests text input.  See
{@link InputMethodManager} for more general information about the
architecture.

<p>Applications will not normally use this interface themselves, instead
relying on the standard interaction provided by
{@link android.widget.TextView} and {@link android.widget.EditText}.

<p>Those implementing input methods should normally do so by deriving from
{@link InputMethodService} or one of its subclasses.  When implementing
an input method, the service component containing it must also supply
a {@link #SERVICE_META_DATA} meta-data field, referencing an XML resource
providing details about the input method.  All input methods also must
require that clients hold the
{@link android.Manifest.permission#BIND_INPUT_METHOD} in order to interact
with the service; if this is not required, the system will not use that
input method, because it can not trust that it is not compromised.

<p>The InputMethod interface is actually split into two parts: the interface
here is the top-level interface to the input method, providing all
access to it, which only the system can access (due to the BIND_INPUT_METHOD
permission requirement).  In addition its method
{@link #createSession(android.view.inputmethod.InputMethod.SessionCallback)}
can be called to instantate a secondary {@link InputMethodSession} interface
which is what clients use to communicate with the input method."
      attribute 2547596 "SERVICE_INTERFACE"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.view.InputMethod\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	java_annotation "@SdkConstant(SdkConstantType.SERVICE_ACTION)
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is the interface name that a service implementing an input
method should say that it supports -- that is, this is the action it
uses for its intent filter.
To be supported, the service must also require the
{@link android.Manifest.permission#BIND_INPUT_METHOD} permission so
that other applications can not abuse it.
"
      end

      attribute 2547724 "SERVICE_META_DATA"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"android.view.im\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Name under which an InputMethod service component publishes information
about itself.  This meta-data must reference an XML resource containing
an
<code>&lt;{@link android.R.styleable#InputMethod input-method}&gt;</code>
tag.
"
      end

      class 824076 "SessionCallback"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 3452044 "sessionCreated"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "session" type class_ref 824204 // InputMethodSession
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 3452172 "attachToken"
	public explicit_return_type "void"
	nparams 1
	  param inout name "token" type class_ref 688652 // IBinder
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called first thing after an input method is created, this supplies a
unique token for the session it has with the system service.  It is
needed to identify itself with the service to validate its operations.
This token <strong>must not</strong> be passed to applications, since
it grants special priviledges that should not be given to applications.

<p>Note: to protect yourself from malicious clients, you should only
accept the first token given to you.  Any after that may come from the
client."
      end

      operation 3452300 "bindInput"
	public explicit_return_type "void"
	nparams 1
	  param inout name "binding" type class_ref 824332 // InputBinding
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bind a new application environment in to the input method, so that it
can later start and stop input processing.
Typically this method is called when this input method is enabled in an
application for the first time.

@param binding Information about the application window that is binding
to the input method.

@see InputBinding
@see #unbindInput()"
      end

      operation 3452428 "unbindInput"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unbind an application environment, called when the information previously
set by {@link #bindInput} is no longer valid for this input method.

<p>
Typically this method is called when the application changes to be
non-foreground."
      end

      operation 3452556 "startInput"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inputConnection" type class_ref 702860 // InputConnection
	  param inout name "info" type class_ref 702988 // EditorInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when the application starts to receive text and it
is ready for this input method to process received events and send result
text back to the application.

@param inputConnection Optional specific input connection for
communicating with the text box; if null, you should use the generic
bound input connection.
@param info Information about the text box (typically, an EditText)
       that requests input.

@see EditorInfo"
      end

      operation 3452684 "restartInput"
	public explicit_return_type "void"
	nparams 2
	  param inout name "inputConnection" type class_ref 702860 // InputConnection
	  param inout name "attribute" type class_ref 702988 // EditorInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when the state of this input method needs to be
reset.

<p>
Typically, this method is called when the input focus is moved from one
text box to another.

@param inputConnection Optional specific input connection for
communicating with the text box; if null, you should use the generic
bound input connection.
@param attribute The attribute of the text box (typically, a EditText)
       that requests input.

@see EditorInfo"
      end

      operation 3452812 "createSession"
	public explicit_return_type "void"
	nparams 1
	  param inout name "callback" type class_ref 824076 // SessionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@link InputMethodSession} that can be handed to client
applications for interacting with the input method.  You can later
use {@link #revokeSession(InputMethodSession)} to destroy the session
so that it can no longer be used by any clients.

@param callback Interface that is called with the newly created session."
      end

      operation 3452940 "setSessionEnabled"
	public explicit_return_type "void"
	nparams 2
	  param inout name "session" type class_ref 824204 // InputMethodSession
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Control whether a particular input method session is active.

@param session The {@link InputMethodSession} previously provided through
SessionCallback.sessionCreated() that is to be changed."
      end

      operation 3453068 "revokeSession"
	public explicit_return_type "void"
	nparams 1
	  param inout name "session" type class_ref 824204 // InputMethodSession
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disable and destroy a session that was previously created with
{@link #createSession(android.view.inputmethod.InputMethod.SessionCallback)}.
After this call, the given session interface is no longer active and
calls on it will fail.

@param session The {@link InputMethodSession} previously provided through
SessionCallback.sessionCreated() that is to be revoked."
      end

      attribute 2547852 "SHOW_EXPLICIT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #showSoftInput}: this show has been explicitly
requested by the user.  If not set, the system has decided it may be
a good idea to show the input method based on a navigation operation
in the UI.
"
      end

      attribute 2547980 "SHOW_FORCED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Flag for {@link #showSoftInput}: this show has been forced to
happen by the user.  If set, the input method should remain visible
until deliberated dismissed by the user in its UI.
"
      end

      operation 3453196 "showSoftInput"
	public explicit_return_type "void"
	nparams 2
	  param in name "flags" explicit_type "int"
	  param inout name "resultReceiver" type class_ref 769164 // ResultReceiver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Request that any soft input part of the input method be shown to the user.

@param flags Provides additional information about the show request.
Currently may be 0 or have the bit {@link #SHOW_EXPLICIT} set.
@param resultReceiver The client requesting the show may wish to
be told the impact of their request, which should be supplied here.
The result code should be
{@link InputMethodManager#RESULT_UNCHANGED_SHOWN InputMethodManager.RESULT_UNCHANGED_SHOWN},
{@link InputMethodManager#RESULT_UNCHANGED_HIDDEN InputMethodManager.RESULT_UNCHANGED_HIDDEN},
{@link InputMethodManager#RESULT_SHOWN InputMethodManager.RESULT_SHOWN}, or
{@link InputMethodManager#RESULT_HIDDEN InputMethodManager.RESULT_HIDDEN}."
      end

      operation 3453324 "hideSoftInput"
	public explicit_return_type "void"
	nparams 2
	  param in name "flags" explicit_type "int"
	  param inout name "resultReceiver" type class_ref 769164 // ResultReceiver
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Request that any soft input part of the input method be hidden from the user.
@param flags Provides additional information about the show request.
Currently always 0.
@param resultReceiver The client requesting the show may wish to
be told the impact of their request, which should be supplied here.
The result code should be
{@link InputMethodManager#RESULT_UNCHANGED_SHOWN InputMethodManager.RESULT_UNCHANGED_SHOWN},
{@link InputMethodManager#RESULT_UNCHANGED_HIDDEN InputMethodManager.RESULT_UNCHANGED_HIDDEN},
{@link InputMethodManager#RESULT_SHOWN InputMethodManager.RESULT_SHOWN}, or
{@link InputMethodManager#RESULT_HIDDEN InputMethodManager.RESULT_HIDDEN}."
      end

      operation 3453452 "changeInputMethodSubtype"
	public explicit_return_type "void"
	nparams 1
	  param inout name "subtype" type class_ref 768780 // InputMethodSubtype
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Notify that the input method subtype is being changed in the same input method.
@param subtype New subtype of the notified input method"
      end
    end

    class 824204 "InputMethodSession"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The InputMethodSession interface provides the per-client functionality
of {@link InputMethod} that is safe to expose to applications.

<p>Applications will not normally use this interface themselves, instead
relying on the standard interaction provided by
{@link android.widget.TextView} and {@link android.widget.EditText}."
      class 824588 "EventCallback"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 3453964 "finishedEvent"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "seq" explicit_type "int"
	    param inout name "handled" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 3454092 "finishInput"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when the application would like to stop
receiving text input."
      end

      operation 3454220 "updateSelection"
	public explicit_return_type "void"
	nparams 6
	  param in name "oldSelStart" explicit_type "int"
	  param in name "oldSelEnd" explicit_type "int"
	  param in name "newSelStart" explicit_type "int"
	  param in name "newSelEnd" explicit_type "int"
	  param in name "candidatesStart" explicit_type "int"
	  param in name "candidatesEnd" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when the selection or cursor in the current
target input field has changed.

@param oldSelStart The previous text offset of the cursor selection
start position.
@param oldSelEnd The previous text offset of the cursor selection
end position.
@param newSelStart The new text offset of the cursor selection
start position.
@param newSelEnd The new text offset of the cursor selection
end position.
@param candidatesStart The text offset of the current candidate
text start position.
@param candidatesEnd The text offset of the current candidate
text end position."
      end

      operation 3454348 "viewClicked"
	public explicit_return_type "void"
	nparams 1
	  param inout name "focusChanged" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when the user tapped a text view.
IMEs can't rely on this method being called because this was not part of the original IME
protocol, so applications with custom text editing written before this method appeared will
not call to inform the IME of this interaction.
@param focusChanged true if the user changed the focused view by this click."
      end

      operation 3454476 "updateCursor"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newCursor" type class_ref 694924 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when cursor location of the target input field
has changed within its window.  This is not normally called, but will
only be reported if requested by the input method.

@param newCursor The rectangle of the cursor currently being shown in
the input field's window coordinates."
      end

      operation 3454604 "displayCompletions"
	public explicit_return_type "void"
	nparams 1
	  param inout name "completions" type class_ref 767628 // CompletionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a text editor that performs auto completion, to tell the
input method about the completions it has available.  This can be used
by the input method to display them to the user to select the text to
be inserted.

@param completions Array of text completions that are available, starting with
the best.  If this array is null, any existing completions will be
removed."
      end

      operation 3454732 "updateExtractedText"
	public explicit_return_type "void"
	nparams 2
	  param in name "token" explicit_type "int"
	  param inout name "text" type class_ref 769036 // ExtractedText
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called by a text editor to report its new extracted text when its
contents change.  This will only be called if the input method
calls {@link InputConnection#getExtractedText(ExtractedTextRequest, int)
InputConnection.getExtractedText()} with the option to report updates.

@param token The input method supplied token for identifying its request.
@param text The new extracted text."
      end

      operation 3454860 "dispatchKeyEvent"
	public explicit_return_type "void"
	nparams 3
	  param in name "seq" explicit_type "int"
	  param inout name "event" type class_ref 681740 // KeyEvent
	  param inout name "callback" type class_ref 824588 // EventCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when a key is pressed.  When done with the event,
the implementation must call back on <var>callback</var> with its
result.

<p>
If the input method wants to handle this event, return true, otherwise
return false and the caller (i.e. the application) will handle the event.

@param event The key event.

@return Whether the input method wants to handle this event.

@see #dispatchKeyUp
@see android.view.KeyEvent"
      end

      operation 3454988 "dispatchTrackballEvent"
	public explicit_return_type "void"
	nparams 3
	  param in name "seq" explicit_type "int"
	  param inout name "event" type class_ref 702092 // MotionEvent
	  param inout name "callback" type class_ref 824588 // EventCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when there is a track ball event.

<p>
If the input method wants to handle this event, return true, otherwise
return false and the caller (i.e. the application) will handle the event.

@param event The motion event.

@return Whether the input method wants to handle this event.

@see android.view.MotionEvent"
      end

      operation 3455116 "dispatchGenericMotionEvent"
	public explicit_return_type "void"
	nparams 3
	  param in name "seq" explicit_type "int"
	  param inout name "event" type class_ref 702092 // MotionEvent
	  param inout name "callback" type class_ref 824588 // EventCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is called when there is a generic motion event.

<p>
If the input method wants to handle this event, return true, otherwise
return false and the caller (i.e. the application) will handle the event.

@param event The motion event.

@return Whether the input method wants to handle this event.

@see android.view.MotionEvent"
      end

      operation 3455244 "appPrivateCommand"
	public explicit_return_type "void"
	nparams 2
	  param in name "action" explicit_type "String"
	  param inout name "data" type class_ref 678924 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Process a private command sent from the application to the input method.
This can be used to provide domain-specific features that are
only known between certain input methods and their clients.

@param action Name of the command to be performed.  This <em>must</em>
be a scoped name, i.e. prefixed with a package name you own, so that
different developers will not create conflicting commands.
@param data Any data to include with the command."
      end

      operation 3455372 "toggleSoftInput"
	public explicit_return_type "void"
	nparams 2
	  param in name "showFlags" explicit_type "int"
	  param in name "hideFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Toggle the soft input window. 
Applications can toggle the state of the soft input window.
@param showFlags Provides additional operating flags.  May be
0 or have the {@link InputMethodManager#SHOW_IMPLICIT},
{@link InputMethodManager#SHOW_FORCED} bit set.
@param hideFlags Provides additional operating flags.  May be
0 or have the {@link  InputMethodManager#HIDE_IMPLICIT_ONLY},
{@link  InputMethodManager#HIDE_NOT_ALWAYS} bit set."
      end
    end

    class 824332 "InputBinding"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Information given to an {@link InputMethod} about a client connecting
to it."
      classrelation 1937164 // <realization>
	relation 1937164 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1937164 // <realization>
	  b parent class_ref 691212 // Parcelable
      end

      attribute 3426316 "TAG"
	class_attribute const_attribute package explicit_type "String"
	init_value " \"InputBinding\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1937292 // mConnection (<unidirectional association>)
	relation 1937292 --->
	  a role_name "mConnection" const_relation package
	    comment "
The connection back to the client.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1937292 // mConnection (<unidirectional association>)
	  b parent class_ref 702860 // InputConnection
      end

      classrelation 1937420 // mConnectionToken (<unidirectional association>)
	relation 1937420 --->
	  a role_name "mConnectionToken" const_relation package
	    comment "
A remotable token for the connection back to the client.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1937420 // mConnectionToken (<unidirectional association>)
	  b parent class_ref 688652 // IBinder
      end

      attribute 3426444 "mUid"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The UID where this binding came from.
"
      end

      attribute 3426572 "mPid"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The PID where this binding came from.
"
      end

      operation 4760844 "InputBinding"
	public explicit_return_type ""
	nparams 4
	  param inout name "conn" type class_ref 702860 // InputConnection
	  param inout name "connToken" type class_ref 688652 // IBinder
	  param in name "uid" explicit_type "int"
	  param in name "pid" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor.

@param conn The interface for communicating back with the application.
@param connToken A remoteable token for communicating across processes.
@param uid The user id of the client of this binding.
@param pid The process id of where the binding came from."
      end

      operation 4760972 "InputBinding"
	public explicit_return_type ""
	nparams 2
	  param inout name "conn" type class_ref 702860 // InputConnection
	  param inout name "binding" type class_ref 824332 // InputBinding
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor from an existing InputBinding taking a new local input
connection interface.

@param conn The new connection interface.
@param binding Existing binding to copy."
      end

      operation 4761100 "InputBinding"
	package explicit_return_type ""
	nparams 1
	  param inout name "source" type class_ref 691340 // Parcel
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4761228 "getConnection"
	public return_type class_ref 702860 // InputConnection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the connection for interacting back with the application."
      end

      operation 4761356 "getConnectionToken"
	public return_type class_ref 688652 // IBinder
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the token for the connection back to the application.  You can
not use this directly, it must be converted to a {@link InputConnection}
for you."
      end

      operation 4761484 "getUid"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the user id of the client associated with this binding."
      end

      operation 4761612 "getPid"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the process id where this binding came from."
      end

      operation 4761740 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 4761868 "writeToParcel"
	public explicit_return_type "void"
	nparams 2
	  param inout name "dest" type class_ref 691340 // Parcel
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Used to package this object into a {@link Parcel}.

@param dest The {@link Parcel} to be written.
@param flags The flags used for parceling."
      end

      classrelation 1937548 // CREATOR (<unidirectional association>)
	relation 1937548 --->
	  a role_name "CREATOR" init_value " new Parcelable.Creator<InputBinding>() {
        public InputBinding createFromParcel(Parcel source) {
            return new InputBinding(source);
        }

        public InputBinding[] newArray(int size) {
            return new InputBinding[size];
        }
    }" class_relation const_relation public
	    comment "
Used to make this class parcelable.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<InputBinding> ${name}${value};
"
	    classrelation_ref 1937548 // CREATOR (<unidirectional association>)
	  b parent class_ref 691468 // Creator
      end

      operation 4761996 "describeContents"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 965772 "ComposingText"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1934860 // <realization>
	relation 1934860 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1934860 // <realization>
	  b parent class_ref 749708 // NoCopySpan
      end
    end

    class 965900 "BaseInputConnection"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base class for implementors of the InputConnection interface, taking care
of most of the common behavior for providing a connection to an Editable.
Implementors of this class will want to be sure to implement
{@link #getEditable} to provide access to their own editable object."
      classrelation 1934988 // <realization>
	relation 1934988 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 1934988 // <realization>
	  b parent class_ref 702860 // InputConnection
      end

      attribute 3419276 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3419404 "TAG"
	class_attribute const_attribute private explicit_type "String"
	init_value " \"BaseInputConnection\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3419532 "COMPOSING"
	class_attribute const_attribute package explicit_type "Object"
	init_value " new ComposingText()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1935116 // mIMM (<unidirectional association>)
	relation 1935116 --->
	  a role_name "mIMM" const_relation protected
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1935116 // mIMM (<unidirectional association>)
	  b parent class_ref 766988 // InputMethodManager
      end

      classrelation 1935244 // mTargetView (<unidirectional association>)
	relation 1935244 --->
	  a role_name "mTargetView" const_relation package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1935244 // mTargetView (<unidirectional association>)
	  b parent class_ref 694028 // View
      end

      attribute 3419660 "mDummyMode"
	const_attribute package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 3419788 "mDefaultComposingSpans"
	private explicit_type "Object"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 1935372 // mEditable (<unidirectional association>)
	relation 1935372 --->
	  a role_name "mEditable" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1935372 // mEditable (<unidirectional association>)
	  b parent class_ref 749964 // Editable
      end

      classrelation 1935500 // mKeyCharacterMap (<unidirectional association>)
	relation 1935500 --->
	  a role_name "mKeyCharacterMap" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 1935500 // mKeyCharacterMap (<unidirectional association>)
	  b parent class_ref 696844 // KeyCharacterMap
      end

      operation 4753292 "BaseInputConnection"
	package explicit_return_type ""
	nparams 2
	  param inout name "mgr" type class_ref 766988 // InputMethodManager
	  param inout name "fullEditor" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4753420 "BaseInputConnection"
	public explicit_return_type ""
	nparams 2
	  param inout name "targetView" type class_ref 694028 // View
	  param inout name "fullEditor" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4753548 "removeComposingSpans"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "text" type class_ref 801292 // Spannable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4753676 "setComposingSpans"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "text" type class_ref 801292 // Spannable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4753804 "setComposingSpans"
	class_operation public explicit_return_type "void"
	nparams 3
	  param inout name "text" type class_ref 801292 // Spannable
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " @hide "
      end

      operation 4753932 "getComposingSpanStart"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "text" type class_ref 801292 // Spannable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4754060 "getComposingSpanEnd"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "text" type class_ref 801292 // Spannable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4754188 "getEditable"
	public return_type class_ref 749964 // Editable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the target of edit operations.  The default implementation
returns its own fake editable that is just used for composing text;
subclasses that are real text editors should override this and
supply their own."
      end

      operation 4754316 "beginBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation does nothing."
      end

      operation 4754444 "endBatchEdit"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation does nothing."
      end

      operation 4754572 "reportFinish"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Called when this InputConnection is no longer used by the InputMethodManager.

@hide"
      end

      operation 4754700 "clearMetaKeyStates"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "states" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation uses
{@link MetaKeyKeyListener#clearMetaKeyState(long, int)
MetaKeyKeyListener.clearMetaKeyState(long, int)} to clear the state."
      end

      operation 4754828 "commitCompletion"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "text" type class_ref 767628 // CompletionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation does nothing and returns false."
      end

      operation 4754956 "commitCorrection"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "correctionInfo" type class_ref 768524 // CorrectionInfo
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation does nothing and returns false."
      end

      operation 4755084 "commitText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Default implementation replaces any existing composing text with
the given text.  In addition, only if dummy mode, a key event is
sent for the new text and the current editable buffer cleared."
      end

      operation 4755212 "deleteSurroundingText"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "beforeLength" explicit_type "int"
	  param in name "afterLength" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation performs the deletion around the current
selection position of the editable text.
@param beforeLength
@param afterLength"
      end

      operation 4755340 "finishComposingText"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation removes the composing state from the
current editable text.  In addition, only if dummy mode, a key event is
sent for the new text and the current editable buffer cleared."
      end

      operation 4755468 "getCursorCapsMode"
	public explicit_return_type "int"
	nparams 1
	  param in name "reqModes" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation uses TextUtils.getCapsMode to get the
cursor caps mode for the current selection position in the editable
text, unless in dummy mode in which case 0 is always returned."
      end

      operation 4755596 "getExtractedText"
	public return_type class_ref 769036 // ExtractedText
	nparams 2
	  param inout name "request" type class_ref 768396 // ExtractedTextRequest
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation always returns null."
      end

      operation 4755724 "getTextBeforeCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "length" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation returns the given amount of text from the
current cursor position in the buffer."
      end

      operation 4755852 "getSelectedText"
	public explicit_return_type "CharSequence"
	nparams 1
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation returns the text currently selected, or null if none is
selected."
      end

      operation 4755980 "getTextAfterCursor"
	public explicit_return_type "CharSequence"
	nparams 2
	  param in name "length" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation returns the given amount of text from the
current cursor position in the buffer."
      end

      operation 4756108 "performEditorAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "actionCode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation turns this into the enter key."
      end

      operation 4756236 "performContextMenuAction"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation does nothing."
      end

      operation 4756364 "performPrivateCommand"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "action" explicit_type "String"
	  param inout name "data" type class_ref 678924 // Bundle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation does nothing."
      end

      operation 4756492 "setComposingText"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation places the given text into the editable,
replacing any existing composing text.  The new text is marked as
in a composing state with the composing style."
      end

      operation 4756620 "setComposingRegion"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4756748 "setSelection"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The default implementation changes the selection position in the
current editable text."
      end

      operation 4756876 "sendKeyEvent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "event" type class_ref 681740 // KeyEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides standard implementation for sending a key event to the window
attached to the input connection's view."
      end

      operation 4757004 "reportFullscreenMode"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "enabled" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates InputMethodManager with the current fullscreen mode."
      end

      operation 4757132 "sendCurrentText"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4757260 "ensureDefaultComposingSpans"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 4757388 "replaceText"
	private explicit_return_type "void"
	nparams 3
	  param inout name "text" explicit_type "CharSequence"
	  param in name "newCursorPosition" explicit_type "int"
	  param inout name "composing" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1541132 "InputMethodManager_Accessor"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Class allowing access to package-protected methods/fields."
      operation 9484044 "resetInstance"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 1541260 "InputMethodManager_Delegate"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Delegate used to provide new implementation of a select few methods of {@link InputMethodManager}

Through the layoutlib_create tool, the original  methods of InputMethodManager have been replaced
by calls to methods of the same name in this delegate class.
"
      operation 9484172 "getInstance"
	class_operation package return_type class_ref 766988 // InputMethodManager
	nparams 1
	  param inout name "mainLooper" type class_ref 685324 // Looper
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment " ---- Overridden methods ----
package"
      end

      operation 9484300 "getInstance"
	class_operation package return_type class_ref 766988 // InputMethodManager
	nparams 1
	  param inout name "context" type class_ref 684812 // Context
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@LayoutlibDelegate
"
	
	
	
	comment "package"
      end
    end
  end

  deploymentview 168844 "inputmethod"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 341644 "InputMethodManager"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.internal.os.SomeArgs;
import com.android.internal.view.IInputConnectionWrapper;
import com.android.internal.view.IInputContext;
import com.android.internal.view.IInputMethodCallback;
import com.android.internal.view.IInputMethodClient;
import com.android.internal.view.IInputMethodManager;
import com.android.internal.view.IInputMethodSession;
import com.android.internal.view.InputBindResult;
import android.content.Context;
import android.graphics.Rect;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.Message;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.os.ServiceManager;
import android.os.SystemClock;
import android.text.style.SuggestionSpan;
import android.util.Log;
import android.util.PrintWriterPrinter;
import android.util.Printer;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewRootImpl;
import java.io.FileDescriptor;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
${definition}"
      associated_classes
	class_ref 766988 // InputMethodManager
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 376972 "InputMethod"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.annotation.SdkConstant;
import android.annotation.SdkConstant.SdkConstantType;
import android.inputmethodservice.InputMethodService;
import android.os.IBinder;
import android.os.ResultReceiver;
${definition}"
      associated_classes
	class_ref 823820 // InputMethod
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 377100 "InputMethodSession"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.graphics.Rect;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.MotionEvent;
${definition}"
      associated_classes
	class_ref 824204 // InputMethodSession
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 445708 "BaseInputConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.content.res.TypedArray;
import android.os.Bundle;
import android.os.SystemClock;
import android.text.Editable;
import android.text.NoCopySpan;
import android.text.Selection;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.method.MetaKeyKeyListener;
import android.util.Log;
import android.util.LogPrinter;
import android.view.KeyCharacterMap;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewRootImpl;
${definition}"
      associated_classes
	class_ref 965772 // ComposingText
	class_ref 965900 // BaseInputConnection
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 445836 "InputConnection"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Bundle;
import android.view.KeyCharacterMap;
import android.view.KeyEvent;
${definition}"
      associated_classes
	class_ref 702860 // InputConnection
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 445964 "CompletionInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
${definition}"
      associated_classes
	class_ref 767628 // CompletionInfo
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 446092 "CorrectionInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
${definition}"
      associated_classes
	class_ref 768524 // CorrectionInfo
      end
      comment "Copyright (C) 2007-2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 446220 "EditorInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.InputType;
import android.text.TextUtils;
import android.util.Printer;
${definition}"
      associated_classes
	class_ref 702988 // EditorInfo
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 446348 "ExtractedText"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
${definition}"
      associated_classes
	class_ref 769036 // ExtractedText
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 446476 "ExtractedTextRequest"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
${definition}"
      associated_classes
	class_ref 768396 // ExtractedTextRequest
      end
      comment "Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 446604 "InputBinding"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.IBinder;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
${definition}"
      associated_classes
	class_ref 824332 // InputBinding
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 446732 "InputConnectionWrapper"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.os.Bundle;
import android.view.KeyEvent;
${definition}"
      associated_classes
	class_ref 754316 // InputConnectionWrapper
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 446860 "InputMethodInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import android.content.ComponentName;
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.content.res.Resources;
import android.content.res.TypedArray;
import android.content.res.XmlResourceParser;
import android.graphics.drawable.Drawable;
import android.os.Parcel;
import android.os.Parcelable;
import android.util.AttributeSet;
import android.util.Printer;
import android.util.Slog;
import android.util.Xml;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 768652 // InputMethodInfo
      end
      comment "Copyright (C) 2007-2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\"); you may not
use this file except in compliance with the License. You may obtain a copy of
the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT
WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
License for the specific language governing permissions and limitations under
the License."
    end

    artifact 446988 "InputMethodSubtype"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import android.content.Context;
import android.content.pm.ApplicationInfo;
import android.os.Parcel;
import android.os.Parcelable;
import android.text.TextUtils;
import android.util.Slog;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.IllegalFormatException;
import java.util.List;
import java.util.Locale;
${definition}"
      associated_classes
	class_ref 768780 // InputMethodSubtype
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 777740 "InputMethodManager_Accessor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1541132 // InputMethodManager_Accessor
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 777868 "InputMethodManager_Delegate"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.layoutlib.bridge.android.BridgeIInputMethodManager;
import com.android.tools.layoutlib.annotations.LayoutlibDelegate;
import android.content.Context;
import android.os.Looper;
${definition}"
      associated_classes
	class_ref 1541260 // InputMethodManager_Delegate
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
