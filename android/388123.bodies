class OldDataInputStreamTest
!!!2649243.java!!!	test_ConstructorLjava_io_InputStream() : void
        try {
            os.writeChar('t');
            os.close();
            openDataInputStream();
        } catch (IOException e) {
            fail("IOException during constructor test : " + e.getMessage());
        } finally {
            try {
                dis.close();
            } catch (IOException e) {
                fail("IOException during constructor test : " + e.getMessage());
            }
        }
!!!2649371.java!!!	test_read$B() : void
        byte rbytes[] = new byte[testLength - 5];
        Support_ASimpleInputStream sis = new Support_ASimpleInputStream();
        int r;

        os.write(fileString.getBytes());
        os.close();
        openDataInputStream();

        r = dis.read(rbytes);
        assertEquals("Test 1: Incorrect number of bytes read;",
                testLength - 5, r);
        assertTrue("Test 2: Incorrect data written or read.",
                new String(rbytes).equals(fileString.substring(0, testLength - 5)));

        r = dis.read(rbytes);
        assertEquals("Test 3: Incorrect number of bytes read;", 5, r);
        assertTrue("Test 4: Incorrect data written or read.",
                new String(rbytes, 0, 5).equals(fileString.substring(testLength - 5)));

        dis.close();
        sis.throwExceptionOnNextUse = true;
        dis = new DataInputStream(sis);
        try {
            dis.read(rbytes);
            fail("Test 5: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2649499.java!!!	test_read$BII() : void
        byte rbytes[] = new byte[testLength - 5];
        Support_ASimpleInputStream sis = new Support_ASimpleInputStream();
        int r;

        os.write(fileString.getBytes());
        os.close();
        openDataInputStream();

        r = dis.read(rbytes, 1, testLength - 10);
        assertEquals("Test 1: Incorrect number of bytes read;",
                testLength - 10, r);
        assertEquals("Test 2: Incorrect data read.", 0, rbytes[0]);
        assertTrue("Test 3: Incorrect data written or read.",
                new String(rbytes, 1, r).equals(fileString.substring(0, r)));

        r = dis.read(rbytes, 0, 15);
        assertEquals("Test 3: Incorrect number of bytes read;", 10, r);
        assertTrue("Test 4: Incorrect data written or read.",
                new String(rbytes, 0, r).equals(fileString.substring(testLength - 10)));

        dis.close();
        sis.throwExceptionOnNextUse = true;
        dis = new DataInputStream(sis);
        try {
            dis.read(rbytes, 1, 5);
            fail("Test 5: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2649627.java!!!	test_read$BII_Exception() : void
        byte rbytes[] = new byte[testLength - 5];

        os.write(fileString.getBytes());
        os.close();
        openDataInputStream();

        try {
            dis.read(rbytes, -1, 1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            dis.read(rbytes, 0, -1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            dis.read(rbytes, rbytes.length, 1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }
!!!2649755.java!!!	test_readFully$B() : void
        byte rbytes[] = new byte[testLength];

        os.write(fileString.getBytes());
        os.close();
        openDataInputStream();

        dis.readFully(rbytes);
        assertTrue("Test 1: Incorrect data written or read.",
                new String(rbytes, 0, testLength).equals(fileString));

        dis.close();
        try {
            dis.readFully(rbytes);
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }

        openDataInputStream();
        dis.readByte();
        try {
            dis.readFully(rbytes);
            fail("Test 3: EOFException expected.");
        } catch (EOFException e) {
            // Expected.
        }
!!!2649883.java!!!	test_readFully$BII() : void
        byte rbytes[] = new byte[testLength];

        os.write(fileString.getBytes());
        os.close();
        openDataInputStream();

        dis.readFully(rbytes, 2, testLength - 4);
        assertTrue("Test 1: Incorrect data written or read.",
                new String(rbytes, 2, testLength - 4).equals(
                        fileString.substring(0, testLength - 4)));

        dis.close();
        try {
            dis.readFully(rbytes, 0, testLength);
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }

        openDataInputStream();
        dis.readByte();
        try {
            dis.readFully(rbytes, 0, testLength);
            fail("Test 3: EOFException expected.");
        } catch (EOFException e) {
            // Expected.
        }
!!!2650011.java!!!	test_readFully$BII_Exception() : void
        DataInputStream is =  new DataInputStream(new ByteArrayInputStream(new byte[testLength]));

        byte[] byteArray = new byte[testLength];

        try {
            is.readFully(byteArray, 0, -1);
            fail("Test 1: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            is.readFully(byteArray, 0, byteArray.length + 1);
            fail("Test 2: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            is.readFully(byteArray, 1, byteArray.length);
            fail("Test 3: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            is.readFully(byteArray, -1, byteArray.length);
            fail("Test 4: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            is.readFully(null, 0, 1);
            fail("Test 5: NullPointerException expected.");
        } catch (NullPointerException e) {
            // Expected.
        }

        is = new DataInputStream(null);

        try {
            is.readFully(byteArray, 0, 1);
            fail("Test 6: NullPointerException expected.");
        } catch (NullPointerException e) {
            // Expected.
        }
!!!2650139.java!!!	test_readLine() : void
        String line;
        os.writeBytes("Lorem\nipsum\rdolor sit amet...");
        os.close();
        openDataInputStream();
        line = dis.readLine();
        assertTrue("Test 1: Incorrect line written or read: " + line,
                line.equals("Lorem"));
        line = dis.readLine();
        assertTrue("Test 2: Incorrect line written or read: " + line,
                line.equals("ipsum"));
        line = dis.readLine();
        assertTrue("Test 3: Incorrect line written or read: " + line,
                line.equals("dolor sit amet..."));

        dis.close();
        try {
            dis.readLine();
            fail("Test 4: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2650267.java!!!	test_readUnsignedByte() : void
        os.writeByte((byte) -127);
        os.close();
        openDataInputStream();
        assertEquals("Test 1: Incorrect byte written or read;",
                129, dis.readUnsignedByte());

        try {
            dis.readUnsignedByte();
            fail("Test 2: EOFException expected.");
        } catch (EOFException e) {
            // Expected.
        }

        dis.close();
        try {
            dis.readUnsignedByte();
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2650395.java!!!	test_readUnsignedShort() : void
        os.writeShort(Short.MIN_VALUE);
        os.close();
        openDataInputStream();
        assertEquals("Test 1: Incorrect short written or read;",
                (Short.MAX_VALUE + 1), dis.readUnsignedShort());

        try {
            dis.readUnsignedShort();
            fail("Test 2: EOFException expected.");
        } catch (EOFException e) {
            // Expected.
        }

        dis.close();
        try {
            dis.readUnsignedShort();
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2650523.java!!!	test_readUTFLjava_io_DataInput() : void
        os.writeUTF(unihw);
        os.close();
        openDataInputStream();
        assertTrue("Test 1: Incorrect UTF-8 string written or read.",
                DataInputStream.readUTF(dis).equals(unihw));

        try {
            DataInputStream.readUTF(dis);
            fail("Test 2: EOFException expected.");
        } catch (EOFException e) {
            // Expected.
        }

        dis.close();
        try {
            DataInputStream.readUTF(dis);
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2650651.java!!!	openDataInputStream() : void
        dis = new DataInputStream(new ByteArrayInputStream(bos.toByteArray()));
!!!2650779.java!!!	setUp() : void
        bos = new ByteArrayOutputStream();
        os = new DataOutputStream(bos);
!!!2650907.java!!!	tearDown() : void
        try {
            os.close();
        } catch (Exception e) {
        }
        try {
            dis.close();
        } catch (Exception e) {
        }
