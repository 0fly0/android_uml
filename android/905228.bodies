class DreamService
!!!4110988.java!!!	setDebug(inout dbg : boolean) : void
        mDebug = dbg;
!!!4111116.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        // TODO: create more flexible version of mInteractive that allows use of KEYCODE_BACK
        if (!mInteractive) {
            if (mDebug) Slog.v(TAG, "Finishing on keyEvent");
            safelyFinish();
            return true;
        } else if (event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
            if (mDebug) Slog.v(TAG, "Finishing on back key");
            safelyFinish();
            return true;
        }
        return mWindow.superDispatchKeyEvent(event);
!!!4111244.java!!!	dispatchKeyShortcutEvent(inout event : KeyEvent) : boolean
        if (!mInteractive) {
            if (mDebug) Slog.v(TAG, "Finishing on keyShortcutEvent");
            safelyFinish();
            return true;
        }
        return mWindow.superDispatchKeyShortcutEvent(event);
!!!4111372.java!!!	dispatchTouchEvent(inout event : MotionEvent) : boolean
        // TODO: create more flexible version of mInteractive that allows clicks
        // but finish()es on any other kind of activity
        if (!mInteractive) {
            if (mDebug) Slog.v(TAG, "Finishing on touchEvent");
            safelyFinish();
            return true;
        }
        return mWindow.superDispatchTouchEvent(event);
!!!4111500.java!!!	dispatchTrackballEvent(inout event : MotionEvent) : boolean
        if (!mInteractive) {
            if (mDebug) Slog.v(TAG, "Finishing on trackballEvent");
            safelyFinish();
            return true;
        }
        return mWindow.superDispatchTrackballEvent(event);
!!!4111628.java!!!	dispatchGenericMotionEvent(inout event : MotionEvent) : boolean
        if (!mInteractive) {
            if (mDebug) Slog.v(TAG, "Finishing on genericMotionEvent");
            safelyFinish();
            return true;
        }
        return mWindow.superDispatchGenericMotionEvent(event);
!!!4111756.java!!!	dispatchPopulateAccessibilityEvent(inout event : AccessibilityEvent) : boolean
        return false;
!!!4111884.java!!!	onCreatePanelView(in featureId : int) : View
        return null;
!!!4112012.java!!!	onCreatePanelMenu(in featureId : int, inout menu : Menu) : boolean
        return false;
!!!4112140.java!!!	onPreparePanel(in featureId : int, inout view : View, inout menu : Menu) : boolean
        return false;
!!!4112268.java!!!	onMenuOpened(in featureId : int, inout menu : Menu) : boolean
        return false;
!!!4112396.java!!!	onMenuItemSelected(in featureId : int, inout item : MenuItem) : boolean
        return false;
!!!4113292.java!!!	onSearchRequested() : boolean
        return false;
!!!4113420.java!!!	onWindowStartingActionMode(inout callback : Callback) : ActionMode
        return null;
!!!4113804.java!!!	getWindowManager() : WindowManager
        return mWindowManager;
!!!4113932.java!!!	getWindow() : Window
        return mWindow;
!!!4114060.java!!!	setContentView(in layoutResID : int) : void
        getWindow().setContentView(layoutResID);
!!!4114188.java!!!	setContentView(inout view : View) : void
        getWindow().setContentView(view);
!!!4114316.java!!!	setContentView(inout view : View, inout params : LayoutParams) : void
        getWindow().setContentView(view, params);
!!!4114444.java!!!	addContentView(inout view : View, inout params : LayoutParams) : void
        getWindow().addContentView(view, params);
!!!4114572.java!!!	findViewById(in id : int) : View
        return getWindow().findViewById(id);
!!!4114700.java!!!	setInteractive(inout interactive : boolean) : void
        mInteractive = interactive;
!!!4114828.java!!!	isInteractive() : boolean
        return mInteractive;
!!!4114956.java!!!	setLowProfile(inout lowProfile : boolean) : void
        mLowProfile = lowProfile;
        int flag = View.SYSTEM_UI_FLAG_LOW_PROFILE;
        applySystemUiVisibilityFlags(mLowProfile ? flag : 0, flag);
!!!4115084.java!!!	isLowProfile() : boolean
        return getSystemUiVisibilityFlagValue(View.SYSTEM_UI_FLAG_LOW_PROFILE, mLowProfile);
!!!4115212.java!!!	setFullscreen(inout fullscreen : boolean) : void
        mFullscreen = fullscreen;
        int flag = WindowManager.LayoutParams.FLAG_FULLSCREEN;
        applyWindowFlags(mFullscreen ? flag : 0, flag);
!!!4115340.java!!!	isFullscreen() : boolean
        return mFullscreen;
!!!4115468.java!!!	setScreenBright(inout screenBright : boolean) : void
        mScreenBright = screenBright;
        int flag = WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON;
        applyWindowFlags(mScreenBright ? flag : 0, flag);
!!!4115596.java!!!	isScreenBright() : boolean
        return getWindowFlagValue(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, mScreenBright);
!!!4115724.java!!!	onCreate() : void
        if (mDebug) Slog.v(TAG, "onCreate() on thread " + Thread.currentThread().getId());
        super.onCreate();
!!!4115852.java!!!	onDreamingStarted() : void
        if (mDebug) Slog.v(TAG, "onDreamingStarted()");
        // hook for subclasses
!!!4115980.java!!!	onDreamingStopped() : void
        if (mDebug) Slog.v(TAG, "onDreamingStopped()");
        // hook for subclasses
!!!4116108.java!!!	onBind(inout intent : Intent) : IBinder
        if (mDebug) Slog.v(TAG, "onBind() intent = " + intent);
        return new DreamServiceWrapper();
!!!4116236.java!!!	finish() : void
        if (mDebug) Slog.v(TAG, "finish()");
        finishInternal();
!!!4116364.java!!!	onDestroy() : void
        if (mDebug) Slog.v(TAG, "onDestroy()");
        // hook for subclasses

        // Just in case destroy came in before detach, let's take care of that now
        detach();

        super.onDestroy();
!!!4116492.java!!!	loadSandman() : void
        mSandman = IDreamManager.Stub.asInterface(ServiceManager.getService(DREAM_SERVICE));
!!!4116620.java!!!	detach() : void
        if (mWindow == null) {
            // already detached!
            return;
        }

        try {
            onDreamingStopped();
        } catch (Throwable t) {
            Slog.w(TAG, "Crashed in onDreamingStopped()", t);
            // we were going to stop anyway
        }

        if (mDebug) Slog.v(TAG, "detach(): Removing window from window manager");
        try {
            // force our window to be removed synchronously
            mWindowManager.removeViewImmediate(mWindow.getDecorView());
            // the following will print a log message if it finds any other leaked windows
            WindowManagerGlobal.getInstance().closeAll(mWindowToken,
                    this.getClass().getName(), "Dream");
        } catch (Throwable t) {
            Slog.w(TAG, "Crashed removing window view", t);
        }

        mWindow = null;
        mWindowToken = null;
!!!4116748.java!!!	attach(inout windowToken : IBinder) : void
        if (mWindowToken != null) {
            Slog.e(TAG, "attach() called when already attached with token=" + mWindowToken);
            return;
        }

        if (mDebug) Slog.v(TAG, "Attached on thread " + Thread.currentThread().getId());

        if (mSandman == null) {
            loadSandman();
        }
        mWindowToken = windowToken;
        mWindow = PolicyManager.makeNewWindow(this);
        mWindow.setCallback(this);
        mWindow.requestFeature(Window.FEATURE_NO_TITLE);
        mWindow.setBackgroundDrawable(new ColorDrawable(0xFF000000));
        mWindow.setFormat(PixelFormat.OPAQUE);

        if (mDebug) Slog.v(TAG, String.format("Attaching window token: %s to window of type %s",
                windowToken, WindowManager.LayoutParams.TYPE_DREAM));

        WindowManager.LayoutParams lp = mWindow.getAttributes();
        lp.type = WindowManager.LayoutParams.TYPE_DREAM;
        lp.token = windowToken;
        lp.windowAnimations = com.android.internal.R.style.Animation_Dream;
        lp.flags |= ( WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
                    | WindowManager.LayoutParams.FLAG_LAYOUT_INSET_DECOR
                    | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED
                    | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD
                    | WindowManager.LayoutParams.FLAG_ALLOW_LOCK_WHILE_SCREEN_ON
                    | (mFullscreen ? WindowManager.LayoutParams.FLAG_FULLSCREEN : 0)
                    | (mScreenBright ? WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON : 0)
                    );
        mWindow.setAttributes(lp);

        if (mDebug) Slog.v(TAG, "Created and attached window: " + mWindow);

        mWindow.setWindowManager(null, windowToken, "dream", true);
        mWindowManager = mWindow.getWindowManager();

        if (mDebug) Slog.v(TAG, "Window added on thread " + Thread.currentThread().getId());
        try {
            applySystemUiVisibilityFlags(
                    (mLowProfile ? View.SYSTEM_UI_FLAG_LOW_PROFILE : 0),
                    View.SYSTEM_UI_FLAG_LOW_PROFILE);
            getWindowManager().addView(mWindow.getDecorView(), mWindow.getAttributes());
        } catch (Throwable t) {
            Slog.w(TAG, "Crashed adding window view", t);
            safelyFinish();
            return;
        }

        // start it up
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    onDreamingStarted();
                } catch (Throwable t) {
                    Slog.w(TAG, "Crashed in onDreamingStarted()", t);
                    safelyFinish();
                }
            }
        });
!!!4116876.java!!!	safelyFinish() : void
        if (mDebug) Slog.v(TAG, "safelyFinish()");
        try {
            finish();
        } catch (Throwable t) {
            Slog.w(TAG, "Crashed in safelyFinish()", t);
            finishInternal();
            return;
        }

        if (!mFinished) {
            Slog.w(TAG, "Bad dream, did not call super.finish()");
            finishInternal();
        }
!!!4117004.java!!!	finishInternal() : void
        if (mDebug) Slog.v(TAG, "finishInternal() mFinished = " + mFinished);
        if (mFinished) return;
        try {
            mFinished = true;

            if (mSandman != null) {
                mSandman.finishSelf(mWindowToken);
            } else {
                Slog.w(TAG, "No dream manager found");
            }
            stopSelf(); // if launched via any other means

        } catch (Throwable t) {
            Slog.w(TAG, "Crashed in finishInternal()", t);
        }
!!!4117132.java!!!	getWindowFlagValue(in flag : int, inout defaultValue : boolean) : boolean
        return mWindow == null ? defaultValue : (mWindow.getAttributes().flags & flag) != 0;
!!!4117260.java!!!	applyWindowFlags(in flags : int, in mask : int) : void
        if (mWindow != null) {
            WindowManager.LayoutParams lp = mWindow.getAttributes();
            lp.flags = applyFlags(lp.flags, flags, mask);
            mWindow.setAttributes(lp);
            mWindowManager.updateViewLayout(mWindow.getDecorView(), lp);
        }
!!!4117388.java!!!	getSystemUiVisibilityFlagValue(in flag : int, inout defaultValue : boolean) : boolean
        View v = mWindow == null ? null : mWindow.getDecorView();
        return v == null ? defaultValue : (v.getSystemUiVisibility() & flag) != 0;
!!!4117516.java!!!	applySystemUiVisibilityFlags(in flags : int, in mask : int) : void
        View v = mWindow == null ? null : mWindow.getDecorView();
        if (v != null) {
            v.setSystemUiVisibility(applyFlags(v.getSystemUiVisibility(), flags, mask));
        }
!!!4117644.java!!!	applyFlags(in oldFlags : int, in flags : int, in mask : int) : int
        return (oldFlags&~mask) | (flags&mask);
!!!4117772.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        super.dump(fd, pw, args);

        pw.print(TAG + ": ");
        if (mWindowToken == null) {
            pw.println("stopped");
        } else {
            pw.println("running (token=" + mWindowToken + ")");
        }
        pw.println("  window: " + mWindow);
        pw.print("  flags:");
        if (isInteractive()) pw.print(" interactive");
        if (isLowProfile()) pw.print(" lowprofile");
        if (isFullscreen()) pw.print(" fullscreen");
        if (isScreenBright()) pw.print(" bright");
        pw.println();
