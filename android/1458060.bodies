class FileFilter
!!!9066124.java!!!	FileFilter()
        loadTestExpectations();
!!!9066252.java!!!	trimTrailingSlashIfPresent(in path : String) : String
        File file = new File(path);
        return file.getPath();
!!!9066380.java!!!	loadTestExpectations() : void
        URL url = null;
        try {
            url = new URL(ForwarderManager.getHostSchemePort(false) +
                    "LayoutTests/" + TEST_EXPECTATIONS_TXT_PATH);
        } catch (MalformedURLException e) {
            assert false;
        }

        try {
            InputStream inputStream = null;
            BufferedReader bufferedReader = null;
            try {
                byte[] httpAnswer = FsUtils.readDataFromUrl(url);
                if (httpAnswer == null) {
                    Log.w(LOG_TAG, "loadTestExpectations(): File not found: " +
                            TEST_EXPECTATIONS_TXT_PATH);
                    return;
                }
                bufferedReader = new BufferedReader(new StringReader(
                        new String(httpAnswer)));
                String line;
                String entry;
                String[] parts;
                String path;
                Set<String> tokens;
                while (true) {
                    line = bufferedReader.readLine();
                    if (line == null) {
                        break;
                    }

                    /** Remove the comment and trim */
                    entry = line.split("//", 2)[0].trim();

                    /** Omit empty lines, advance to next line */
                    if (entry.isEmpty()) {
                        continue;
                    }

                    /** Split on whitespace into path part and the rest */
                    parts = entry.split("\\s", 2);

                    /** At this point parts.length >= 1 */
                    if (parts.length == 1) {
                        Log.w(LOG_TAG + "::reloadConfiguration",
                                "There are no options specified for the test!");
                        continue;
                    }

                    path = trimTrailingSlashIfPresent(parts[0]);

                    /** Split on whitespace */
                    tokens = new HashSet<String>(Arrays.asList(
                            parts[1].split("\\s", 0)));

                    /** Chose the right collections to add to */
                    if (tokens.contains(TOKEN_CRASH)) {
                        mCrashList.add(path);

                        /** If test is on skip list we ignore any further options */
                        continue;
                    }

                    if (tokens.contains(TOKEN_FAIL)) {
                        mFailList.add(path);
                    }
                    if (tokens.contains(TOKEN_SLOW)) {
                        mSlowList.add(path);
                    }
                }
            } finally {
                if (inputStream != null) {
                    inputStream.close();
                }
                if (bufferedReader != null) {
                    bufferedReader.close();
                }
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "url=" + url, e);
        }
!!!9066508.java!!!	isCrash(in testPath : String) : boolean
        for (String prefix : getPrefixes(testPath)) {
            if (mCrashList.contains(prefix)) {
                return true;
            }
        }

        return false;
!!!9066636.java!!!	isFail(in testPath : String) : boolean
        for (String prefix : getPrefixes(testPath)) {
            if (mFailList.contains(prefix)) {
                return true;
            }
        }

        return false;
!!!9066764.java!!!	isSlow(in testPath : String) : boolean
        for (String prefix : getPrefixes(testPath)) {
            if (mSlowList.contains(prefix)) {
                return true;
            }
        }

        return false;
!!!9066892.java!!!	getPrefixes(in path : String) : List<String>
        File file = new File(path);
        List<String> prefixes = new ArrayList<String>(8);

        do {
            prefixes.add(file.getPath());
            file = file.getParentFile();
        } while (file != null);

        return prefixes;
!!!9067020.java!!!	isTestDir(in dirName : String) : boolean
        return (!dirName.equals("script-tests")
                && !dirName.equals("resources") && !dirName.startsWith("."));
!!!9067148.java!!!	isTestFile(in testName : String) : boolean
        return testName.endsWith(".html")
            || testName.endsWith(".xhtml")
            || testName.endsWith(".php");
!!!9067276.java!!!	getUrl(in relativePath : String, inout allowHttps : boolean) : URL
        String urlBase = ForwarderManager.getHostSchemePort(false);

        /**
         * URL is formed differently for HTTP vs non-HTTP tests, because HTTP tests
         * expect different document root. See run_apache2.py and .conf file for details
         */
        if (relativePath.startsWith(HTTP_TESTS_PATH)) {
            relativePath = relativePath.substring(HTTP_TESTS_PATH.length());
            if (relativePath.startsWith(SSL_PATH) && allowHttps) {
                urlBase = ForwarderManager.getHostSchemePort(true);
            }
        } else {
            relativePath = "LayoutTests/" + relativePath;
        }

        try {
            return new URL(urlBase + relativePath);
        } catch (MalformedURLException e) {
            Log.e(LOG_TAG, "Malformed URL!", e);
        }

        return null;
!!!9067404.java!!!	setPathEnding(in relativePath : String, in newEnding : String) : String
        int dotPos = relativePath.lastIndexOf('.');
        if (dotPos == -1) {
            return relativePath + newEnding;
        }

        return relativePath.substring(0, dotPos) + newEnding;
