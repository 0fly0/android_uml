class Scene
!!!9276300.java!!!	Scene()
        mRenderPasses = new ArrayList<RenderPass>();
        mLights = new ArrayList<LightBase>();
        mCameras = new ArrayList<Camera>();
        mFragmentShaders = new ArrayList<FragmentShader>();
        mVertexShaders = new ArrayList<VertexShader>();
        mRenderables = new ArrayList<RenderableBase>();
        mRenderableMap = new HashMap<String, RenderableBase>();
        mRenderableMeshMap = new HashMap<String, ArrayList<Renderable> >();
        mTextures = new ArrayList<Texture2D>();
        mRootTransforms = new CompoundTransform();
        mRootTransforms.setName("_scene_root_");
        mTransformMap = new HashMap<String, Transform>();
!!!9276428.java!!!	appendTransform(inout t : Transform) : void
        if (t == null) {
            throw new RuntimeException("Adding null object");
        }
        mRootTransforms.appendChild(t);
!!!9276556.java!!!	appendNewCompoundTransform() : CompoundTransform
        CompoundTransform t = new CompoundTransform();
        appendTransform(t);
        return t;
!!!9276684.java!!!	appendNewMatrixTransform() : MatrixTransform
        MatrixTransform t = new MatrixTransform();
        appendTransform(t);
        return t;
!!!9276812.java!!!	addToTransformMap(inout t : Transform) : void
        mTransformMap.put(t.getName(), t);
!!!9276940.java!!!	getTransformByName(in name : String) : Transform
        return mTransformMap.get(name);
!!!9277068.java!!!	appendRenderPass(inout p : RenderPass) : void
        if (p == null) {
            throw new RuntimeException("Adding null object");
        }
        mRenderPasses.add(p);
!!!9277196.java!!!	appendNewRenderPass() : RenderPass
        RenderPass p = new RenderPass();
        appendRenderPass(p);
        return p;
!!!9277324.java!!!	clearRenderPasses() : void
        mRenderPasses.clear();
!!!9277452.java!!!	appendLight(inout l : LightBase) : void
        if (l == null) {
            throw new RuntimeException("Adding null object");
        }
        mLights.add(l);
!!!9277580.java!!!	appendCamera(inout c : Camera) : void
        if (c == null) {
            throw new RuntimeException("Adding null object");
        }
        mCameras.add(c);
!!!9277708.java!!!	appendNewCamera() : Camera
        Camera c = new Camera();
        appendCamera(c);
        return c;
!!!9277836.java!!!	appendShader(inout f : FragmentShader) : void
        if (f == null) {
            throw new RuntimeException("Adding null object");
        }
        mFragmentShaders.add(f);
!!!9277964.java!!!	appendShader(inout v : VertexShader) : void
        if (v == null) {
            throw new RuntimeException("Adding null object");
        }
        mVertexShaders.add(v);
!!!9278092.java!!!	getCameras() : Camera
        return mCameras;
!!!9278220.java!!!	getLights() : LightBase
        return mLights;
!!!9278348.java!!!	appendRenderable(inout d : RenderableBase) : void
        if (d == null) {
            throw new RuntimeException("Adding null object");
        }
        mRenderables.add(d);
        if (d.getName() != null) {
            mRenderableMap.put(d.getName(), d);
        }
!!!9278476.java!!!	appendNewRenderable() : Renderable
        Renderable r = new Renderable();
        appendRenderable(r);
        return r;
!!!9278604.java!!!	getRenderables() : RenderableBase
        return mRenderables;
!!!9278732.java!!!	getRenderableByName(in name : String) : RenderableBase
        return mRenderableMap.get(name);
!!!9278860.java!!!	appendTextures(inout tex : Texture2D) : void
        if (tex == null) {
            throw new RuntimeException("Adding null object");
        }
        mTextures.add(tex);
!!!9278988.java!!!	assignRenderStateToMaterial(inout renderState : RenderState, in regex : String) : void
        Pattern pattern = Pattern.compile(regex);
        int numRenderables = mRenderables.size();
        for (int i = 0; i < numRenderables; i ++) {
            Renderable shape = (Renderable)mRenderables.get(i);
            Matcher m = pattern.matcher(shape.mMaterialName);
            if (m.find()) {
                shape.setRenderState(renderState);
            }
        }
!!!9279116.java!!!	assignRenderState(inout renderState : RenderState) : void
        int numRenderables = mRenderables.size();
        for (int i = 0; i < numRenderables; i ++) {
            Renderable shape = (Renderable)mRenderables.get(i);
            shape.setRenderState(renderState);
        }
!!!9279244.java!!!	meshLoaded(inout m : Mesh) : void
        ArrayList<Renderable> entries = mRenderableMeshMap.get(m.getName());
        int numEntries = entries.size();
        for (int i = 0; i < numEntries; i++) {
            Renderable d = entries.get(i);
            d.resolveMeshData(m);
        }
!!!9279372.java!!!	addToMeshMap(inout d : Renderable) : void
        ArrayList<Renderable> entries = mRenderableMeshMap.get(d.mMeshName);
        if (entries == null) {
            entries = new ArrayList<Renderable>();
            mRenderableMeshMap.put(d.mMeshName, entries);
        }
        entries.add(d);
!!!9279500.java!!!	destroyRS() : void
        SceneManager sceneManager = SceneManager.getInstance();
        mTransformRSData = null;
        sceneManager.mRenderLoop.bind_gRootNode(mTransformRSData);
        sceneManager.mRenderLoop.set_gRenderableObjects(null);
        mRenderPassAlloc = null;
        sceneManager.mRenderLoop.set_gRenderPasses(null);
        sceneManager.mRenderLoop.bind_gFrontToBack(null);
        sceneManager.mRenderLoop.bind_gBackToFront(null);
        sceneManager.mRenderLoop.set_gCameras(null);

        mTransformMap = null;
        mRenderPasses = null;
        mLights = null;
        mCameras = null;
        mRenderables = null;
        mRenderableMap = null;
        mTextures = null;
        mRenderableMeshMap = null;
        mRootTransforms = null;
!!!9279628.java!!!	initRenderPassRS(inout rs : RenderScriptGL, inout sceneManager : SceneManager) : void
        if (mRenderPasses.size() != 0) {
            mRenderPassAlloc = new ScriptField_RenderPass_s(mRS, mRenderPasses.size());
            for (int i = 0; i < mRenderPasses.size(); i ++) {
                mRenderPassAlloc.set(mRenderPasses.get(i).getRsField(mRS, mRes), i, false);
            }
            mRenderPassAlloc.copyAll();
            sceneManager.mRenderLoop.set_gRenderPasses(mRenderPassAlloc.getAllocation());
        }
!!!9279756.java!!!	addDrawables(inout rs : RenderScriptGL, inout res : Resources, inout sceneManager : SceneManager) : void
        Allocation drawableData = Allocation.createSized(rs,
                                                         Element.ALLOCATION(rs),
                                                         mRenderables.size());
        Allocation[] drawableAllocs = new Allocation[mRenderables.size()];
        for (int i = 0; i < mRenderables.size(); i ++) {
            Renderable dI = (Renderable)mRenderables.get(i);
            addToMeshMap(dI);
            drawableAllocs[i] = dI.getRsField(rs, res).getAllocation();
        }
        drawableData.copyFrom(drawableAllocs);
        sceneManager.mRenderLoop.set_gRenderableObjects(drawableData);

        initRenderPassRS(rs, sceneManager);
!!!9279884.java!!!	addShaders(inout rs : RenderScriptGL, inout res : Resources, inout sceneManager : SceneManager) : void
        if (mVertexShaders.size() > 0) {
            Allocation shaderData = Allocation.createSized(rs, Element.ALLOCATION(rs),
                                                           mVertexShaders.size());
            Allocation[] shaderAllocs = new Allocation[mVertexShaders.size()];
            for (int i = 0; i < mVertexShaders.size(); i ++) {
                VertexShader sI = mVertexShaders.get(i);
                shaderAllocs[i] = sI.getRSData().getAllocation();
            }
            shaderData.copyFrom(shaderAllocs);
            sceneManager.mRenderLoop.set_gVertexShaders(shaderData);
        }

        if (mFragmentShaders.size() > 0) {
            Allocation shaderData = Allocation.createSized(rs, Element.ALLOCATION(rs),
                                                           mFragmentShaders.size());
            Allocation[] shaderAllocs = new Allocation[mFragmentShaders.size()];
            for (int i = 0; i < mFragmentShaders.size(); i ++) {
                FragmentShader sI = mFragmentShaders.get(i);
                shaderAllocs[i] = sI.getRSData().getAllocation();
            }
            shaderData.copyFrom(shaderAllocs);
            sceneManager.mRenderLoop.set_gFragmentShaders(shaderData);
        }
!!!9280012.java!!!	initRS() : void
        SceneManager sceneManager = SceneManager.getInstance();
        mRS = SceneManager.getRS();
        mRes = SceneManager.getRes();
        long start = System.currentTimeMillis();
        mTransformRSData = mRootTransforms.getRSData();
        long end = System.currentTimeMillis();
        Log.v(TIMER_TAG, "Transform init time: " + (end - start));

        start = System.currentTimeMillis();

        sceneManager.mRenderLoop.bind_gRootNode(mTransformRSData);
        end = System.currentTimeMillis();
        Log.v(TIMER_TAG, "Script init time: " + (end - start));

        start = System.currentTimeMillis();
        addDrawables(mRS, mRes, sceneManager);
        end = System.currentTimeMillis();
        Log.v(TIMER_TAG, "Renderable init time: " + (end - start));

        addShaders(mRS, mRes, sceneManager);

        Allocation opaqueBuffer = null;
        if (mRenderables.size() > 0) {
            opaqueBuffer = Allocation.createSized(mRS, Element.U32(mRS), mRenderables.size());
        }
        Allocation transparentBuffer = null;
        if (mRenderables.size() > 0) {
            transparentBuffer = Allocation.createSized(mRS, Element.U32(mRS), mRenderables.size());
        }

        sceneManager.mRenderLoop.bind_gFrontToBack(opaqueBuffer);
        sceneManager.mRenderLoop.bind_gBackToFront(transparentBuffer);

        if (mCameras.size() > 0) {
            Allocation cameraData;
            cameraData = Allocation.createSized(mRS, Element.ALLOCATION(mRS), mCameras.size());
            Allocation[] cameraAllocs = new Allocation[mCameras.size()];
            for (int i = 0; i < mCameras.size(); i ++) {
                cameraAllocs[i] = mCameras.get(i).getRSData().getAllocation();
            }
            cameraData.copyFrom(cameraAllocs);
            sceneManager.mRenderLoop.set_gCameras(cameraData);
        }

        if (mLights.size() > 0) {
            Allocation lightData = Allocation.createSized(mRS,
                                                          Element.ALLOCATION(mRS),
                                                          mLights.size());
            Allocation[] lightAllocs = new Allocation[mLights.size()];
            for (int i = 0; i < mLights.size(); i ++) {
                lightAllocs[i] = mLights.get(i).getRSData().getAllocation();
            }
            lightData.copyFrom(lightAllocs);
            sceneManager.mRenderLoop.set_gLights(lightData);
        }
