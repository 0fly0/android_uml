class IoUtils
!!!2039579.java!!!	close(inout fd : FileDescriptor) : void
        try {
            if (fd != null && fd.valid()) {
                Libcore.os.close(fd);
            }
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsIOException();
        }
!!!2039707.java!!!	closeQuietly(inout closeable : AutoCloseable) : void
        if (closeable != null) {
            try {
                closeable.close();
            } catch (RuntimeException rethrown) {
                throw rethrown;
            } catch (Exception ignored) {
            }
        }
!!!2039835.java!!!	closeQuietly(inout fd : FileDescriptor) : void
        try {
            IoUtils.close(fd);
        } catch (IOException ignored) {
        }
!!!2039963.java!!!	closeQuietly(inout socket : Socket) : void
        if (socket != null) {
            try {
                socket.close();
            } catch (Exception ignored) {
            }
        }
!!!2040091.java!!!	setBlocking(inout fd : FileDescriptor, inout blocking : boolean) : void
        try {
            int flags = Libcore.os.fcntlVoid(fd, F_GETFL);
            if (!blocking) {
                flags |= O_NONBLOCK;
            } else {
                flags &= ~O_NONBLOCK;
            }
            Libcore.os.fcntlLong(fd, F_SETFL, flags);
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsIOException();
        }
!!!2040219.java!!!	readFileAsByteArray(inout path : String) : byte
        return readFileAsBytes(path).toByteArray();
!!!2040347.java!!!	readFileAsString(inout path : String) : String
        return readFileAsBytes(path).toString(Charsets.UTF_8);
!!!2040475.java!!!	readFileAsBytes(inout path : String) : UnsafeByteSequence
        RandomAccessFile f = null;
        try {
            f = new RandomAccessFile(path, "r");
            UnsafeByteSequence bytes = new UnsafeByteSequence((int) f.length());
            byte[] buffer = new byte[8192];
            while (true) {
                int byteCount = f.read(buffer);
                if (byteCount == -1) {
                    return bytes;
                }
                bytes.write(buffer, 0, byteCount);
            }
        } finally {
            IoUtils.closeQuietly(f);
        }
!!!2040603.java!!!	deleteContents(inout dir : File) : void
        File[] files = dir.listFiles();
        if (files == null) {
            throw new IOException("listFiles returned null: " + dir);
        }
        for (File file : files) {
            if (file.isDirectory()) {
                deleteContents(file);
            }
            if (!file.delete()) {
                throw new IOException("failed to delete file: " + file);
            }
        }
!!!2040731.java!!!	canOpenReadOnly(inout path : String) : boolean
        try {
            // Use open(2) rather than stat(2) so we require fewer permissions. http://b/6485312.
            FileDescriptor fd = Libcore.os.open(path, O_RDONLY, 0);
            Libcore.os.close(fd);
            return true;
        } catch (ErrnoException errnoException) {
            return false;
        }
!!!2040859.java!!!	throwInterruptedIoException() : void
        // This is typically thrown in response to an
        // InterruptedException which does not leave the thread in an
        // interrupted state, so explicitly interrupt here.
        Thread.currentThread().interrupt();
        // TODO: set InterruptedIOException.bytesTransferred
        throw new InterruptedIOException();
