class OmxSubtitleDecoder
!!!11159564.cpp!!!	OmxSubtitleDecoder(in name : OMX_STRING)
  strncpy(mName, name, OMX_MAX_STRINGNAME_SIZE);
!!!11159692.cpp!!!	~OmxSubtitleDecoder()
  delete mSubDecoder;
  OMX_LOGD("destroyed");
!!!11159820.cpp!!!	initRole() : OMX_ERRORTYPE
  if (strncmp(mName, kCompNamePrefix, kCompNamePrefixLength)) {
    return OMX_ErrorInvalidComponentName;
  }
  char * role_name = mName + kCompNamePrefixLength;
  if (!strncmp(role_name, OMX_ROLE_SUBTITLE_DECODER_SRT,
      strlen(OMX_ROLE_SUBTITLE_DECODER_SRT))) {
    addRole(OMX_ROLE_SUBTITLE_DECODER_SRT);
    mSubDecoder = new SrtDecoder();
  } else {
    return OMX_ErrorInvalidComponentName;
  }
  return OMX_ErrorNone;
!!!11159948.cpp!!!	initPort() : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNoMore;
  if (!strncmp(mActiveRole, OMX_ROLE_SUBTITLE_DECODER_SRT, strlen(OMX_ROLE_SUBTITLE_DECODER_SRT))) {
    mInputPort = new OmxSrtPort(kTextPortStartNumber, OMX_DirInput);
  }

  addPort(mInputPort);
  mOutputPort = new OmxSubtitlePort(kTextPortStartNumber + 1, OMX_DirOutput);
  addPort(mOutputPort);

  OMX_PARAM_PORTDEFINITIONTYPE def;
  mInputPort->getDefinition(&def);
  def.nBufferCountActual = 64;
  mInputPort->setDefinition(&def);


  mOutputPort->getDefinition(&def);
  def.nBufferCountActual = 64;
  mOutputPort->setDefinition(&def);
  return err;
!!!11160076.cpp!!!	componentDeInit(in hComponent : OMX_HANDLETYPE) : OMX_ERRORTYPE
  // ASSERT(hComponent != NULL)
  OmxComponent *comp = reinterpret_cast<OmxComponent *>(
      reinterpret_cast<OMX_COMPONENTTYPE *>(hComponent)->pComponentPrivate);
  OmxSubtitleDecoder *subtitle_decoder = static_cast<OmxSubtitleDecoder *>(comp);
  delete subtitle_decoder;
  return OMX_ErrorNone;
!!!11160204.cpp!!!	getParameter(in index : OMX_INDEXTYPE, in params : OMX_PTR) : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  switch (index) {
    default:
      return OmxComponentImpl::getParameter(index, params);
  }
  return err;
!!!11160460.cpp!!!	getConfig(in index : OMX_INDEXTYPE, in config : OMX_PTR) : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  return err;
!!!11160588.cpp!!!	setConfig(in index : OMX_INDEXTYPE, in config : OMX_PTR) : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  return err;
!!!11160716.cpp!!!	createComponent(inout handle : OMX_HANDLETYPE, in componentName : OMX_STRING, in appData : OMX_PTR, inout callBacks : OMX_CALLBACKTYPE) : OMX_ERRORTYPE
  OmxSubtitleDecoder* comp = new OmxSubtitleDecoder(componentName);
  *handle = comp->makeComponent(comp);
  comp->setCallbacks(callBacks, appData);
  comp->componentInit();
  return OMX_ErrorNone;
!!!11161100.cpp!!!	start() : OMX_ERRORTYPE
  mThread = kdThreadCreate(mThreadAttr, threadEntry,(void *)this);
  return OMX_ErrorNone;
!!!11161484.cpp!!!	stop() : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  mShouldExit = OMX_TRUE;

  if (mThread) {
    KDint ret;
    void *retval;
    ret = kdThreadJoin(mThread, &retval);
    OMX_LOGD("Stop decoding thread");
    mThread = NULL;
  }
  return err;
!!!11161868.cpp!!!	threadEntry(inout args : void) : void
  OmxSubtitleDecoder *decoder = (OmxSubtitleDecoder *)args;
  decoder->decodeLoop();
  return NULL;
!!!11161996.cpp!!!	decodeLoop() : void
  OMX_BUFFERHEADERTYPE *in_head = NULL;
  OMX_BUFFERHEADERTYPE *out_head = NULL;

  while(!mShouldExit) {
    if (!mInputPort->isEmpty()) {
      in_head = mInputPort->popBuffer();
      if (NULL != in_head) {
    /*    if (!mOutputPort->isEmpty()) {
          out_head = mOutputPort->getBuffer();
          mSubDecoder->processOneChunk(in_head, out_head);

        } else {
          OMX_LOGD("FFFFFFFFFFFFFFFFFFFFFFFFFFuck empty");
        }
    */
      }
    }
    usleep(5000);

  }
