class OldFilterOutputStreamTest
!!!2657563.java!!!	test_ConstructorLjava_io_OutputStream() : void
        // Test for method java.io.FilterOutputStream(java.io.OutputStream)
        try {
            bos = new ByteArrayOutputStream();
            os = new FilterOutputStream(bos);
            os.write('t');
        } catch (java.io.IOException e) {
            fail("Constructor test failed : " + e.getMessage());
        }
!!!2657691.java!!!	test_close() : void
        Support_OutputStream sos = new Support_OutputStream();
        os = new FilterOutputStream(sos);
        os.close();

        try {
            os.write(42);
        } catch (java.io.IOException e) {
            fail("Test 1: Unexpected IOException.");
        }

        sos.setThrowsException(true);
        try {
            os.write(42);
            fail("Test 2: IOException expected.");
        } catch (java.io.IOException e) {
            // Expected.
        }

        os = new FilterOutputStream(sos);
        try {
            os.close();
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2657819.java!!!	test_flush() : void
        Support_OutputStream sos = new Support_OutputStream(550);
        os = new FilterOutputStream(sos);
        os.write(fileString.getBytes(), 0, 500);
        os.flush();
        assertEquals("Test 1: Bytes not written after flush;",
                500, sos.size());

        sos.setThrowsException(true);
        try {
            os.flush();
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
        sos.setThrowsException(false);
!!!2657947.java!!!	test_write$B() : void
        Support_OutputStream sos = new Support_OutputStream(testLength);
        os = new FilterOutputStream(sos);
        os.write(fileString.getBytes());

        bis = new ByteArrayInputStream(sos.toByteArray());
        assertTrue("Test 1: Bytes have not been written.",
                bis.available() == testLength);
        byte[] wbytes = new byte[testLength];
        bis.read(wbytes, 0, testLength);
        assertTrue("Test 2: Incorrect bytes written or read.",
                fileString.equals(new String(wbytes)));

        try {
            // Support_OutputStream throws an IOException if the internal
            // buffer is full, which it should be now.
            os.write(42);
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2658075.java!!!	test_write$BII() : void
        Support_OutputStream sos = new Support_OutputStream(testLength);
        os = new FilterOutputStream(sos);
        os.write(fileString.getBytes(), 10, testLength - 10);

        bis = new ByteArrayInputStream(sos.toByteArray());
        assertTrue("Test 1: Bytes have not been written.",
                bis.available() == testLength - 10);
        byte[] wbytes = new byte[testLength - 10];
        bis.read(wbytes);
        assertTrue("Test 2: Incorrect bytes written or read.",
                fileString.substring(10).equals(new String(wbytes)));

        try {
            // Support_OutputStream throws an IOException if the internal
            // buffer is full, which it should be eventually.
            os.write(fileString.getBytes());
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2658203.java!!!	test_write$BII_Exception() : void
        Support_OutputStream sos = new Support_OutputStream(testLength);
        os = new FilterOutputStream(sos);
        byte[] buf = new byte[10];

        try {
            os.write(buf, -1, 1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            os.write(buf, 0, -1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            os.write(buf, 10, 1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }
!!!2658331.java!!!	test_writeI() : void
        Support_OutputStream sos = new Support_OutputStream(1);
        os = new FilterOutputStream(sos);
        os.write(42);

        bis = new ByteArrayInputStream(sos.toByteArray());
        assertTrue("Test 1: Byte has not been written.",
                bis.available() == 1);
        assertEquals("Test 2: Incorrect byte written or read;",
                42, bis.read());

        try {
            // Support_OutputStream throws an IOException if the internal
            // buffer is full, which it should be now.
            os.write(42);
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2658459.java!!!	tearDown() : void
        try {
            if (bos != null)
                bos.close();
            if (bis != null)
                bis.close();
            if (os != null)
                os.close();
        } catch (Exception e) {
        }
