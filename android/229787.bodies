class NativeDecimalFormat
!!!1975067.java!!!	NativeDecimalFormat(inout pattern : String, inout dfs : DecimalFormatSymbols)
        try {
            this.address = open(pattern, dfs.getCurrencySymbol(),
                    dfs.getDecimalSeparator(), dfs.getDigit(), dfs.getExponentSeparator(),
                    dfs.getGroupingSeparator(), dfs.getInfinity(),
                    dfs.getInternationalCurrencySymbol(), dfs.getMinusSign(),
                    dfs.getMonetaryDecimalSeparator(), dfs.getNaN(), dfs.getPatternSeparator(),
                    dfs.getPercent(), dfs.getPerMill(), dfs.getZeroDigit());
            this.lastPattern = pattern;
        } catch (NullPointerException npe) {
            throw npe;
        } catch (RuntimeException re) {
            throw new IllegalArgumentException("syntax error: " + re.getMessage() + ": " + pattern);
        }
!!!1975195.java!!!	NativeDecimalFormat(inout pattern : String, inout data : LocaleData)
        this.address = open(pattern, data.currencySymbol,
                data.decimalSeparator, '#', data.exponentSeparator, data.groupingSeparator,
                data.infinity, data.internationalCurrencySymbol, data.minusSign,
                data.monetarySeparator, data.NaN, data.patternSeparator,
                data.percent, data.perMill, data.zeroDigit);
        this.lastPattern = pattern;
!!!1975323.java!!!	close() : void
        if (address != 0) {
            close(address);
            address = 0;
        }
!!!1975451.java!!!	finalize() : void
        try {
            close();
        } finally {
            super.finalize();
        }
!!!1975579.java!!!	clone() : Object
        try {
            NativeDecimalFormat clone = (NativeDecimalFormat) super.clone();
            clone.address = cloneImpl(address);
            clone.lastPattern = lastPattern;
            clone.negPrefNull = negPrefNull;
            clone.negSuffNull = negSuffNull;
            clone.posPrefNull = posPrefNull;
            clone.posSuffNull = posSuffNull;
            return clone;
        } catch (CloneNotSupportedException unexpected) {
            throw new AssertionError(unexpected);
        }
!!!1975707.java!!!	equals(inout object : Object) : boolean
        if (object == this) {
            return true;
        }
        if (!(object instanceof NativeDecimalFormat)) {
            return false;
        }
        NativeDecimalFormat obj = (NativeDecimalFormat) object;
        if (obj.address == this.address) {
            return true;
        }
        return obj.toPattern().equals(this.toPattern()) &&
                obj.isDecimalSeparatorAlwaysShown() == this.isDecimalSeparatorAlwaysShown() &&
                obj.getGroupingSize() == this.getGroupingSize() &&
                obj.getMultiplier() == this.getMultiplier() &&
                obj.getNegativePrefix().equals(this.getNegativePrefix()) &&
                obj.getNegativeSuffix().equals(this.getNegativeSuffix()) &&
                obj.getPositivePrefix().equals(this.getPositivePrefix()) &&
                obj.getPositiveSuffix().equals(this.getPositiveSuffix()) &&
                obj.getMaximumIntegerDigits() == this.getMaximumIntegerDigits() &&
                obj.getMaximumFractionDigits() == this.getMaximumFractionDigits() &&
                obj.getMinimumIntegerDigits() == this.getMinimumIntegerDigits() &&
                obj.getMinimumFractionDigits() == this.getMinimumFractionDigits() &&
                obj.isGroupingUsed() == this.isGroupingUsed();
!!!1975835.java!!!	setDecimalFormatSymbols(in dfs : DecimalFormatSymbols) : void
        setDecimalFormatSymbols(this.address, dfs.getCurrencySymbol(), dfs.getDecimalSeparator(),
                dfs.getDigit(), dfs.getExponentSeparator(), dfs.getGroupingSeparator(),
                dfs.getInfinity(), dfs.getInternationalCurrencySymbol(), dfs.getMinusSign(),
                dfs.getMonetaryDecimalSeparator(), dfs.getNaN(), dfs.getPatternSeparator(),
                dfs.getPercent(), dfs.getPerMill(), dfs.getZeroDigit());
!!!1975963.java!!!	setDecimalFormatSymbols(in localeData : LocaleData) : void
        setDecimalFormatSymbols(this.address, localeData.currencySymbol, localeData.decimalSeparator,
                '#', localeData.exponentSeparator, localeData.groupingSeparator,
                localeData.infinity, localeData.internationalCurrencySymbol, localeData.minusSign,
                localeData.monetarySeparator, localeData.NaN, localeData.patternSeparator,
                localeData.percent, localeData.perMill, localeData.zeroDigit);
!!!1976091.java!!!	formatBigDecimal(inout value : BigDecimal, inout field : FieldPosition) : char
        FieldPositionIterator fpi = FieldPositionIterator.forFieldPosition(field);
        char[] result = formatDigitList(this.address, value.toString(), fpi);
        if (fpi != null) {
            FieldPositionIterator.setFieldPosition(fpi, field);
        }
        return result;
!!!1976219.java!!!	formatBigInteger(inout value : BigInteger, inout field : FieldPosition) : char
        FieldPositionIterator fpi = FieldPositionIterator.forFieldPosition(field);
        char[] result = formatDigitList(this.address, value.toString(10), fpi);
        if (fpi != null) {
            FieldPositionIterator.setFieldPosition(fpi, field);
        }
        return result;
!!!1976347.java!!!	formatLong(in value : long, inout field : FieldPosition) : char
        FieldPositionIterator fpi = FieldPositionIterator.forFieldPosition(field);
        char[] result = formatLong(this.address, value, fpi);
        if (fpi != null) {
            FieldPositionIterator.setFieldPosition(fpi, field);
        }
        return result;
!!!1976475.java!!!	formatDouble(in value : double, inout field : FieldPosition) : char
        FieldPositionIterator fpi = FieldPositionIterator.forFieldPosition(field);
        char[] result = formatDouble(this.address, value, fpi);
        if (fpi != null) {
            FieldPositionIterator.setFieldPosition(fpi, field);
        }
        return result;
!!!1976603.java!!!	applyLocalizedPattern(inout pattern : String) : void
        applyPattern(this.address, true, pattern);
        lastPattern = null;
!!!1976731.java!!!	applyPattern(inout pattern : String) : void
        if (lastPattern != null && pattern.equals(lastPattern)) {
            return;
        }
        applyPattern(this.address, false, pattern);
        lastPattern = pattern;
!!!1976859.java!!!	formatToCharacterIterator(inout object : Object) : AttributedCharacterIterator
        if (object == null) {
            throw new NullPointerException("object == null");
        }
        if (!(object instanceof Number)) {
            throw new IllegalArgumentException("object not a Number: " + object.getClass());
        }
        Number number = (Number) object;
        FieldPositionIterator fpIter = new FieldPositionIterator();
        String text;
        if (number instanceof BigInteger || number instanceof BigDecimal) {
            text = new String(formatDigitList(this.address, number.toString(), fpIter));
        } else if (number instanceof Double || number instanceof Float) {
            double dv = number.doubleValue();
            text = new String(formatDouble(this.address, dv, fpIter));
        } else {
            long lv = number.longValue();
            text = new String(formatLong(this.address, lv, fpIter));
        }

        AttributedString as = new AttributedString(text);

        while (fpIter.next()) {
            Format.Field field = fpIter.field();
            as.addAttribute(field, field, fpIter.start(), fpIter.limit());
        }

        // return the CharacterIterator from AttributedString
        return as.getIterator();
!!!1976987.java!!!	makeScalePositive(in scale : int, inout val : StringBuilder) : int
        if (scale < 0) {
            scale = -scale;
            for (int i = scale; i > 0; i--) {
                val.append('0');
            }
            scale = 0;
        }
        return scale;
!!!1977115.java!!!	toLocalizedPattern() : String
        return toPatternImpl(this.address, true);
!!!1977243.java!!!	toPattern() : String
        return toPatternImpl(this.address, false);
!!!1977371.java!!!	parse(inout string : String, inout position : ParsePosition) : Number
        return parse(address, string, position, parseBigDecimal);
!!!1977499.java!!!	getMaximumFractionDigits() : int
        return getAttribute(this.address, UNUM_MAX_FRACTION_DIGITS);
!!!1977627.java!!!	getMaximumIntegerDigits() : int
        return getAttribute(this.address, UNUM_MAX_INTEGER_DIGITS);
!!!1977755.java!!!	getMinimumFractionDigits() : int
        return getAttribute(this.address, UNUM_MIN_FRACTION_DIGITS);
!!!1977883.java!!!	getMinimumIntegerDigits() : int
        return getAttribute(this.address, UNUM_MIN_INTEGER_DIGITS);
!!!1978011.java!!!	getGroupingSize() : int
        return getAttribute(this.address, UNUM_GROUPING_SIZE);
!!!1978139.java!!!	getMultiplier() : int
        return getAttribute(this.address, UNUM_MULTIPLIER);
!!!1978267.java!!!	getNegativePrefix() : String
        if (negPrefNull) {
            return null;
        }
        return getTextAttribute(this.address, UNUM_NEGATIVE_PREFIX);
!!!1978395.java!!!	getNegativeSuffix() : String
        if (negSuffNull) {
            return null;
        }
        return getTextAttribute(this.address, UNUM_NEGATIVE_SUFFIX);
!!!1978523.java!!!	getPositivePrefix() : String
        if (posPrefNull) {
            return null;
        }
        return getTextAttribute(this.address, UNUM_POSITIVE_PREFIX);
!!!1978651.java!!!	getPositiveSuffix() : String
        if (posSuffNull) {
            return null;
        }
        return getTextAttribute(this.address, UNUM_POSITIVE_SUFFIX);
!!!1978779.java!!!	isDecimalSeparatorAlwaysShown() : boolean
        return getAttribute(this.address, UNUM_DECIMAL_ALWAYS_SHOWN) != 0;
!!!1978907.java!!!	isParseBigDecimal() : boolean
        return parseBigDecimal;
!!!1979035.java!!!	isParseIntegerOnly() : boolean
        return getAttribute(this.address, UNUM_PARSE_INT_ONLY) != 0;
!!!1979163.java!!!	isGroupingUsed() : boolean
        return getAttribute(this.address, UNUM_GROUPING_USED) != 0;
!!!1979291.java!!!	setDecimalSeparatorAlwaysShown(inout value : boolean) : void
        int i = value ? -1 : 0;
        setAttribute(this.address, UNUM_DECIMAL_ALWAYS_SHOWN, i);
!!!1979419.java!!!	setCurrency(inout currency : Currency) : void
        setSymbol(this.address, UNUM_CURRENCY_SYMBOL, currency.getSymbol());
        setSymbol(this.address, UNUM_INTL_CURRENCY_SYMBOL, currency.getCurrencyCode());
!!!1979547.java!!!	setGroupingSize(in value : int) : void
        setAttribute(this.address, UNUM_GROUPING_SIZE, value);
!!!1979675.java!!!	setGroupingUsed(inout value : boolean) : void
        int i = value ? -1 : 0;
        setAttribute(this.address, UNUM_GROUPING_USED, i);
!!!1979803.java!!!	setMaximumFractionDigits(in value : int) : void
        setAttribute(this.address, UNUM_MAX_FRACTION_DIGITS, value);
!!!1979931.java!!!	setMaximumIntegerDigits(in value : int) : void
        setAttribute(this.address, UNUM_MAX_INTEGER_DIGITS, value);
!!!1980059.java!!!	setMinimumFractionDigits(in value : int) : void
        setAttribute(this.address, UNUM_MIN_FRACTION_DIGITS, value);
!!!1980187.java!!!	setMinimumIntegerDigits(in value : int) : void
        setAttribute(this.address, UNUM_MIN_INTEGER_DIGITS, value);
!!!1980315.java!!!	setMultiplier(in value : int) : void
        setAttribute(this.address, UNUM_MULTIPLIER, value);
        // Update the cached BigDecimal for multiplier.
        multiplierBigDecimal = BigDecimal.valueOf(value);
!!!1980443.java!!!	setNegativePrefix(inout value : String) : void
        negPrefNull = value == null;
        if (!negPrefNull) {
            setTextAttribute(this.address, UNUM_NEGATIVE_PREFIX, value);
        }
!!!1980571.java!!!	setNegativeSuffix(inout value : String) : void
        negSuffNull = value == null;
        if (!negSuffNull) {
            setTextAttribute(this.address, UNUM_NEGATIVE_SUFFIX, value);
        }
!!!1980699.java!!!	setPositivePrefix(inout value : String) : void
        posPrefNull = value == null;
        if (!posPrefNull) {
            setTextAttribute(this.address, UNUM_POSITIVE_PREFIX, value);
        }
!!!1980827.java!!!	setPositiveSuffix(inout value : String) : void
        posSuffNull = value == null;
        if (!posSuffNull) {
            setTextAttribute(this.address, UNUM_POSITIVE_SUFFIX, value);
        }
!!!1980955.java!!!	setParseBigDecimal(inout value : boolean) : void
        parseBigDecimal = value;
!!!1981083.java!!!	setParseIntegerOnly(inout value : boolean) : void
        int i = value ? -1 : 0;
        setAttribute(this.address, UNUM_PARSE_INT_ONLY, i);
!!!1981211.java!!!	applyPattern(in addr : long, inout localized : boolean, inout pattern : String) : void
        try {
            applyPatternImpl(addr, localized, pattern);
        } catch (NullPointerException npe) {
            throw npe;
        } catch (RuntimeException re) {
            throw new IllegalArgumentException("syntax error: " + re.getMessage() + ": " + pattern);
        }
!!!1981339.java!!!	setRoundingMode(inout roundingMode : RoundingMode, in roundingIncrement : double) : void
        final int nativeRoundingMode;
        switch (roundingMode) {
        case CEILING: nativeRoundingMode = 0; break;
        case FLOOR: nativeRoundingMode = 1; break;
        case DOWN: nativeRoundingMode = 2; break;
        case UP: nativeRoundingMode = 3; break;
        case HALF_EVEN: nativeRoundingMode = 4; break;
        case HALF_DOWN: nativeRoundingMode = 5; break;
        case HALF_UP: nativeRoundingMode = 6; break;
        default: throw new AssertionError();
        }
        setRoundingMode(address, nativeRoundingMode, roundingIncrement);
