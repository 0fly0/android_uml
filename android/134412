format 74
"libmedia" // framework::av::media::libmedia
  revision 4
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/framework/av/media/libmedia/"
  cpp_src_dir "/home/shchen/work/jellybean/framework/av/media/libmedia/"
  cpp_namespace "android"
  classview 131340 "libmedia"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 169228 "SoundPoolThread"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * This class handles background requests from the SoundPool"
      operation 495500 "SoundPoolThread"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "soundPool" type class_ref 169100 // SoundPool
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)} :
    mSoundPool(soundPool)
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 495628 "~SoundPoolThread"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 495756 "loadSample"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "sampleID" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 495884 "quit"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 496012 "write"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "msg" type class_ref 268556 // SoundPoolMsg
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 509068 "maxMessages"
	class_attribute const_attribute private explicit_type "size_t"
	init_value "=  5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 496140 "beginThread"
	class_operation preserve_cpp_body_indent private explicit_return_type "int"
	nparams 1
	  param inout name "arg" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 496268 "run"
	preserve_cpp_body_indent private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 496396 "doLoadSample"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "sampleID" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 496524 "read"
	preserve_cpp_body_indent private return_type class_ref 268556 // SoundPoolMsg
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 490380 // mLock (<directional composition>)
	relation 490380 *-->
	  a role_name "mLock" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 490380 // mLock (<directional composition>)
	  b parent class_ref 133132 // Mutex
      end

      classrelation 490508 // mCondition (<directional composition>)
	relation 490508 *-->
	  a role_name "mCondition" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 490508 // mCondition (<directional composition>)
	  b parent class_ref 159244 // Condition
      end

      classrelation 490636 // mMsgQueue (<directional composition>)
	relation 490636 *-->
	  stereotype "Vector"
	  a role_name "mMsgQueue" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 490636 // mMsgQueue (<directional composition>)
	  b parent class_ref 268556 // SoundPoolMsg
      end

      classrelation 490764 // mSoundPool (<unidirectional association>)
	relation 490764 --->
	  a role_name "mSoundPool" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 490764 // mSoundPool (<unidirectional association>)
	  b parent class_ref 169100 // SoundPool
      end

      attribute 509196 "mRunning"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 268556 "SoundPoolMsg"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 268684 "MessageType"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 508428 "INVALID"
	  public type class_ref 268684 // MessageType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 508556 "KILL"
	  public type class_ref 268684 // MessageType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 508684 "LOAD_SAMPLE"
	  public type class_ref 268684 // MessageType
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 495244 "SoundPoolMsg"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mMessageType(INVALID), mData(0) {};
"
	
	
	
	
      end

      operation 495372 "SoundPoolMsg"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "MessageType" type class_ref 268684 // MessageType
	  param in name "data" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} :
        mMessageType(MessageType), mData(data) {};
"
	
	
	
	
      end

      attribute 508812 "mMessageType"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 508940 "mData"
	public explicit_type "uint16_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 611468 "BpAudioFlinger"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 149516 // IAudioFlinger
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " obsolete"
      classrelation 1305228 // <realization>
	relation 1305228 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1305228 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1814156 "BpAudioFlinger"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IAudioFlinger>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1814284 "createTrack"
	cpp_virtual cpp_inline public explicit_return_type "sp<IAudioTrack>"
	nparams 12
	  param in name "pid" explicit_type "pid_t"
	  param in name "streamType" explicit_type "audio_stream_type_t"
	  param in name "sampleRate" explicit_type "uint32_t"
	  param in name "format" explicit_type "audio_format_t"
	  param in name "channelMask" explicit_type "audio_channel_mask_t"
	  param in name "frameCount" explicit_type "int"
	  param in name "flags" explicit_type "track_flags_t"
	  param in name "sharedBuffer" explicit_type "sp<IMemory>"
	  param in name "output" explicit_type "audio_io_handle_t"
	  param in name "tid" explicit_type "pid_t"
	  param inout name "sessionId" explicit_type "int"
	  param inout name "status" type class_ref 128268 // status_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, const ${t7} & ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}, ${t10} * ${p10}${v10}, ${t11} * ${p11}${v11}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        sp<IAudioTrack> track;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(pid);
        data.writeInt32((int32_t) streamType);
        data.writeInt32(sampleRate);
        data.writeInt32(format);
        data.writeInt32(channelMask);
        data.writeInt32(frameCount);
        data.writeInt32((int32_t) flags);
        data.writeStrongBinder(sharedBuffer->asBinder());
        data.writeInt32((int32_t) output);
        data.writeInt32((int32_t) tid);
        int lSessionId = 0;
        if (sessionId != NULL) {
            lSessionId = *sessionId;
        }
        data.writeInt32(lSessionId);
        status_t lStatus = remote()->transact(CREATE_TRACK, data, &reply);
        if (lStatus != NO_ERROR) {
            ALOGE(\"createTrack error: %s\", strerror(-lStatus));
        } else {
            lSessionId = reply.readInt32();
            if (sessionId != NULL) {
                *sessionId = lSessionId;
            }
            lStatus = reply.readInt32();
            track = interface_cast<IAudioTrack>(reply.readStrongBinder());
        }
        if (status) {
            *status = lStatus;
        }
        return track;
    };
"
	
	
	
	
      end

      operation 1814412 "openRecord"
	cpp_virtual cpp_inline public explicit_return_type "sp<IAudioRecord>"
	nparams 10
	  param in name "pid" explicit_type "pid_t"
	  param in name "input" explicit_type "audio_io_handle_t"
	  param in name "sampleRate" explicit_type "uint32_t"
	  param in name "format" explicit_type "audio_format_t"
	  param in name "channelMask" explicit_type "audio_channel_mask_t"
	  param in name "frameCount" explicit_type "int"
	  param in name "flags" explicit_type "track_flags_t"
	  param in name "tid" explicit_type "pid_t"
	  param inout name "sessionId" explicit_type "int"
	  param inout name "status" type class_ref 128268 // status_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} * ${p8}${v8}, ${t9} * ${p9}${v9}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        sp<IAudioRecord> record;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(pid);
        data.writeInt32((int32_t) input);
        data.writeInt32(sampleRate);
        data.writeInt32(format);
        data.writeInt32(channelMask);
        data.writeInt32(frameCount);
        data.writeInt32(flags);
        data.writeInt32((int32_t) tid);
        int lSessionId = 0;
        if (sessionId != NULL) {
            lSessionId = *sessionId;
        }
        data.writeInt32(lSessionId);
        status_t lStatus = remote()->transact(OPEN_RECORD, data, &reply);
        if (lStatus != NO_ERROR) {
            ALOGE(\"openRecord error: %s\", strerror(-lStatus));
        } else {
            lSessionId = reply.readInt32();
            if (sessionId != NULL) {
                *sessionId = lSessionId;
            }
            lStatus = reply.readInt32();
            record = interface_cast<IAudioRecord>(reply.readStrongBinder());
        }
        if (status) {
            *status = lStatus;
        }
        return record;
    };
"
	
	
	
	
      end

      operation 1814540 "sampleRate"
	const cpp_virtual cpp_inline public explicit_return_type "uint32_t"
	nparams 1
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) output);
        remote()->transact(SAMPLE_RATE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1814668 "channelCount"
	const cpp_virtual cpp_inline public explicit_return_type "int"
	nparams 1
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) output);
        remote()->transact(CHANNEL_COUNT, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1814796 "format"
	const cpp_virtual cpp_inline public explicit_return_type "audio_format_t"
	nparams 1
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) output);
        remote()->transact(FORMAT, data, &reply);
        return (audio_format_t) reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1814924 "frameCount"
	const cpp_virtual cpp_inline public explicit_return_type "size_t"
	nparams 1
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) output);
        remote()->transact(FRAME_COUNT, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1815052 "latency"
	const cpp_virtual cpp_inline public explicit_return_type "uint32_t"
	nparams 1
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) output);
        remote()->transact(LATENCY, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1815180 "setMasterVolume"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "value" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeFloat(value);
        remote()->transact(SET_MASTER_VOLUME, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1815308 "setMasterMute"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "muted" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(muted);
        remote()->transact(SET_MASTER_MUTE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1815436 "masterVolume"
	const cpp_virtual cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        remote()->transact(MASTER_VOLUME, data, &reply);
        return reply.readFloat();
    };
"
	
	
	
	
      end

      operation 1815564 "masterMute"
	const cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        remote()->transact(MASTER_MUTE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1815692 "setStreamVolume"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "stream" explicit_type "audio_stream_type_t"
	  param in name "value" explicit_type "float"
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) stream);
        data.writeFloat(value);
        data.writeInt32((int32_t) output);
        remote()->transact(SET_STREAM_VOLUME, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1815820 "setStreamMute"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "stream" explicit_type "audio_stream_type_t"
	  param in name "muted" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) stream);
        data.writeInt32(muted);
        remote()->transact(SET_STREAM_MUTE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1815948 "streamVolume"
	const cpp_virtual cpp_inline public explicit_return_type "float"
	nparams 2
	  param in name "stream" explicit_type "audio_stream_type_t"
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) stream);
        data.writeInt32((int32_t) output);
        remote()->transact(STREAM_VOLUME, data, &reply);
        return reply.readFloat();
    };
"
	
	
	
	
      end

      operation 1816076 "streamMute"
	const cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "stream" explicit_type "audio_stream_type_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) stream);
        remote()->transact(STREAM_MUTE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1816204 "setMode"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "mode" explicit_type "audio_mode_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(mode);
        remote()->transact(SET_MODE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1816332 "setMicMute"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "state" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(state);
        remote()->transact(SET_MIC_MUTE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1816460 "getMicMute"
	const cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        remote()->transact(GET_MIC_MUTE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1816588 "setParameters"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "ioHandle" explicit_type "audio_io_handle_t"
	  param in name "keyValuePairs" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) ioHandle);
        data.writeString8(keyValuePairs);
        remote()->transact(SET_PARAMETERS, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1816716 "getParameters"
	const cpp_virtual cpp_inline public return_type class_ref 131340 // String8
	nparams 2
	  param in name "ioHandle" explicit_type "audio_io_handle_t"
	  param in name "keys" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) ioHandle);
        data.writeString8(keys);
        remote()->transact(GET_PARAMETERS, data, &reply);
        return reply.readString8();
    };
"
	
	
	
	
      end

      operation 1816844 "registerClient"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "client" explicit_type "sp<IAudioFlingerClient>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeStrongBinder(client->asBinder());
        remote()->transact(REGISTER_CLIENT, data, &reply);
    };
"
	
	
	
	
      end

      operation 1816972 "getInputBufferSize"
	const cpp_virtual cpp_inline public explicit_return_type "size_t"
	nparams 3
	  param in name "sampleRate" explicit_type "uint32_t"
	  param in name "format" explicit_type "audio_format_t"
	  param in name "channelMask" explicit_type "audio_channel_mask_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(sampleRate);
        data.writeInt32(format);
        data.writeInt32(channelMask);
        remote()->transact(GET_INPUTBUFFERSIZE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1817100 "openOutput"
	cpp_virtual cpp_inline public explicit_return_type "audio_io_handle_t"
	nparams 7
	  param in name "module" explicit_type "audio_module_handle_t"
	  param inout name "pDevices" explicit_type "audio_devices_t"
	  param inout name "pSamplingRate" explicit_type "uint32_t"
	  param inout name "pFormat" explicit_type "audio_format_t"
	  param inout name "pChannelMask" explicit_type "audio_channel_mask_t"
	  param inout name "pLatencyMs" explicit_type "uint32_t"
	  param in name "flags" explicit_type "audio_output_flags_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        audio_devices_t devices = pDevices ? *pDevices : (audio_devices_t)0;
        uint32_t samplingRate = pSamplingRate ? *pSamplingRate : 0;
        audio_format_t format = pFormat ? *pFormat : AUDIO_FORMAT_DEFAULT;
        audio_channel_mask_t channelMask = pChannelMask ? *pChannelMask : (audio_channel_mask_t)0;
        uint32_t latency = pLatencyMs ? *pLatencyMs : 0;

        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(module);
        data.writeInt32(devices);
        data.writeInt32(samplingRate);
        data.writeInt32(format);
        data.writeInt32(channelMask);
        data.writeInt32(latency);
        data.writeInt32((int32_t) flags);
        remote()->transact(OPEN_OUTPUT, data, &reply);
        audio_io_handle_t output = (audio_io_handle_t) reply.readInt32();
        ALOGV(\"openOutput() returned output, %d\", output);
        devices = (audio_devices_t)reply.readInt32();
        if (pDevices) *pDevices = devices;
        samplingRate = reply.readInt32();
        if (pSamplingRate) *pSamplingRate = samplingRate;
        format = (audio_format_t) reply.readInt32();
        if (pFormat) *pFormat = format;
        channelMask = (audio_channel_mask_t)reply.readInt32();
        if (pChannelMask) *pChannelMask = channelMask;
        latency = reply.readInt32();
        if (pLatencyMs) *pLatencyMs = latency;
        return output;
    };
"
	
	
	
	
      end

      operation 1817228 "openDuplicateOutput"
	cpp_virtual cpp_inline public explicit_return_type "audio_io_handle_t"
	nparams 2
	  param in name "output1" explicit_type "audio_io_handle_t"
	  param in name "output2" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) output1);
        data.writeInt32((int32_t) output2);
        remote()->transact(OPEN_DUPLICATE_OUTPUT, data, &reply);
        return (audio_io_handle_t) reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1817356 "closeOutput"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) output);
        remote()->transact(CLOSE_OUTPUT, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1817484 "suspendOutput"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) output);
        remote()->transact(SUSPEND_OUTPUT, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1817612 "restoreOutput"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) output);
        remote()->transact(RESTORE_OUTPUT, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1817740 "openInput"
	cpp_virtual cpp_inline public explicit_return_type "audio_io_handle_t"
	nparams 5
	  param in name "module" explicit_type "audio_module_handle_t"
	  param inout name "pDevices" explicit_type "audio_devices_t"
	  param inout name "pSamplingRate" explicit_type "uint32_t"
	  param inout name "pFormat" explicit_type "audio_format_t"
	  param inout name "pChannelMask" explicit_type "audio_channel_mask_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        audio_devices_t devices = pDevices ? *pDevices : (audio_devices_t)0;
        uint32_t samplingRate = pSamplingRate ? *pSamplingRate : 0;
        audio_format_t format = pFormat ? *pFormat : AUDIO_FORMAT_DEFAULT;
        audio_channel_mask_t channelMask = pChannelMask ? *pChannelMask : (audio_channel_mask_t)0;

        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(module);
        data.writeInt32(devices);
        data.writeInt32(samplingRate);
        data.writeInt32(format);
        data.writeInt32(channelMask);
        remote()->transact(OPEN_INPUT, data, &reply);
        audio_io_handle_t input = (audio_io_handle_t) reply.readInt32();
        devices = (audio_devices_t)reply.readInt32();
        if (pDevices) *pDevices = devices;
        samplingRate = reply.readInt32();
        if (pSamplingRate) *pSamplingRate = samplingRate;
        format = (audio_format_t) reply.readInt32();
        if (pFormat) *pFormat = format;
        channelMask = (audio_channel_mask_t)reply.readInt32();
        if (pChannelMask) *pChannelMask = channelMask;
        return input;
    };
"
	
	
	
	
      end

      operation 1817868 "closeInput"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "input" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(input);
        remote()->transact(CLOSE_INPUT, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1817996 "setStreamOutput"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "stream" explicit_type "audio_stream_type_t"
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) stream);
        data.writeInt32((int32_t) output);
        remote()->transact(SET_STREAM_OUTPUT, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1818124 "setVoiceVolume"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "volume" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeFloat(volume);
        remote()->transact(SET_VOICE_VOLUME, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1818252 "getRenderPosition"
	const cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param inout name "halFrames" explicit_type "uint32_t"
	  param inout name "dspFrames" explicit_type "uint32_t"
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) output);
        remote()->transact(GET_RENDER_POSITION, data, &reply);
        status_t status = reply.readInt32();
        if (status == NO_ERROR) {
            uint32_t tmp = reply.readInt32();
            if (halFrames) {
                *halFrames = tmp;
            }
            tmp = reply.readInt32();
            if (dspFrames) {
                *dspFrames = tmp;
            }
        }
        return status;
    };
"
	
	
	
	
      end

      operation 1818380 "getInputFramesLost"
	const cpp_virtual cpp_inline public explicit_return_type "uint"
	nparams 1
	  param in name "ioHandle" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32((int32_t) ioHandle);
        remote()->transact(GET_INPUT_FRAMES_LOST, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1818508 "newAudioSessionId"
	cpp_virtual cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        status_t status = remote()->transact(NEW_AUDIO_SESSION_ID, data, &reply);
        int id = 0;
        if (status == NO_ERROR) {
            id = reply.readInt32();
        }
        return id;
    };
"
	
	
	
	
      end

      operation 1818636 "acquireAudioSessionId"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "audioSession" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(audioSession);
        remote()->transact(ACQUIRE_AUDIO_SESSION_ID, data, &reply);
    };
"
	
	
	
	
      end

      operation 1818764 "releaseAudioSessionId"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "audioSession" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(audioSession);
        remote()->transact(RELEASE_AUDIO_SESSION_ID, data, &reply);
    };
"
	
	
	
	
      end

      operation 1818892 "queryNumberEffects"
	const cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "numEffects" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        status_t status = remote()->transact(QUERY_NUM_EFFECTS, data, &reply);
        if (status != NO_ERROR) {
            return status;
        }
        status = reply.readInt32();
        if (status != NO_ERROR) {
            return status;
        }
        if (numEffects != NULL) {
            *numEffects = (uint32_t)reply.readInt32();
        }
        return NO_ERROR;
    };
"
	
	
	
	
      end

      operation 1819020 "queryEffect"
	const cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "index" explicit_type "uint32_t"
	  param inout name "pDescriptor" explicit_type "effect_descriptor_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if (pDescriptor == NULL) {
            return BAD_VALUE;
        }
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(index);
        status_t status = remote()->transact(QUERY_EFFECT, data, &reply);
        if (status != NO_ERROR) {
            return status;
        }
        status = reply.readInt32();
        if (status != NO_ERROR) {
            return status;
        }
        reply.read(pDescriptor, sizeof(effect_descriptor_t));
        return NO_ERROR;
    };
"
	
	
	
	
      end

      operation 1819148 "getEffectDescriptor"
	const cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "pUuid" explicit_type "effect_uuid_t"
	  param inout name "pDescriptor" explicit_type "effect_descriptor_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        if (pUuid == NULL || pDescriptor == NULL) {
            return BAD_VALUE;
        }
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.write(pUuid, sizeof(effect_uuid_t));
        status_t status = remote()->transact(GET_EFFECT_DESCRIPTOR, data, &reply);
        if (status != NO_ERROR) {
            return status;
        }
        status = reply.readInt32();
        if (status != NO_ERROR) {
            return status;
        }
        reply.read(pDescriptor, sizeof(effect_descriptor_t));
        return NO_ERROR;
    };
"
	
	
	
	
      end

      operation 1819276 "createEffect"
	cpp_virtual cpp_inline public explicit_return_type "sp<IEffect>"
	nparams 9
	  param in name "pid" explicit_type "pid_t"
	  param inout name "pDesc" explicit_type "effect_descriptor_t"
	  param in name "client" explicit_type "sp<IEffectClient>"
	  param in name "priority" explicit_type "int32_t"
	  param in name "output" explicit_type "audio_io_handle_t"
	  param in name "sessionId" explicit_type "int"
	  param inout name "status" type class_ref 128268 // status_t
	  param inout name "id" explicit_type "int"
	  param inout name "enabled" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}, ${t7} * ${p7}${v7}, ${t8} * ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        sp<IEffect> effect;

        if (pDesc == NULL) {
            return effect;
            if (status) {
                *status = BAD_VALUE;
            }
        }

        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(pid);
        data.write(pDesc, sizeof(effect_descriptor_t));
        data.writeStrongBinder(client->asBinder());
        data.writeInt32(priority);
        data.writeInt32((int32_t) output);
        data.writeInt32(sessionId);

        status_t lStatus = remote()->transact(CREATE_EFFECT, data, &reply);
        if (lStatus != NO_ERROR) {
            ALOGE(\"createEffect error: %s\", strerror(-lStatus));
        } else {
            lStatus = reply.readInt32();
            int tmp = reply.readInt32();
            if (id) {
                *id = tmp;
            }
            tmp = reply.readInt32();
            if (enabled != NULL) {
                *enabled = tmp;
            }
            effect = interface_cast<IEffect>(reply.readStrongBinder());
            reply.read(pDesc, sizeof(effect_descriptor_t));
        }
        if (status) {
            *status = lStatus;
        }

        return effect;
    };
"
	
	
	
	
      end

      operation 1819404 "moveEffects"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "session" explicit_type "int"
	  param in name "srcOutput" explicit_type "audio_io_handle_t"
	  param in name "dstOutput" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeInt32(session);
        data.writeInt32((int32_t) srcOutput);
        data.writeInt32((int32_t) dstOutput);
        remote()->transact(MOVE_EFFECTS, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1819532 "loadHwModule"
	cpp_virtual cpp_inline public explicit_return_type "audio_module_handle_t"
	nparams 1
	  param in name "name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        data.writeCString(name);
        remote()->transact(LOAD_HW_MODULE, data, &reply);
        return (audio_module_handle_t) reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1819660 "getPrimaryOutputSamplingRate"
	cpp_virtual cpp_inline public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        remote()->transact(GET_PRIMARY_OUTPUT_SAMPLING_RATE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1819788 "getPrimaryOutputFrameCount"
	cpp_virtual cpp_inline public explicit_return_type "int32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlinger::getInterfaceDescriptor());
        remote()->transact(GET_PRIMARY_OUTPUT_FRAME_COUNT, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end
    end

    class 611724 "BpAudioFlingerClient"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 151052 // IAudioFlingerClient
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1305356 // <realization>
	relation 1305356 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1305356 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1819916 "BpAudioFlingerClient"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IAudioFlingerClient>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1820044 "ioConfigChanged"
	cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "event" explicit_type "int"
	  param in name "ioHandle" explicit_type "audio_io_handle_t"
	  param in name "param2" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioFlingerClient::getInterfaceDescriptor());
        data.writeInt32(event);
        data.writeInt32((int32_t) ioHandle);
        if (event == AudioSystem::STREAM_CONFIG_CHANGED) {
            uint32_t stream = *(const uint32_t *)param2;
            ALOGV(\"ioConfigChanged stream %d\", stream);
            data.writeInt32(stream);
        } else if (event != AudioSystem::OUTPUT_CLOSED && event != AudioSystem::INPUT_CLOSED) {
            const AudioSystem::OutputDescriptor *desc = (const AudioSystem::OutputDescriptor *)param2;
            data.writeInt32(desc->samplingRate);
            data.writeInt32(desc->format);
            data.writeInt32(desc->channels);
            data.writeInt32(desc->frameCount);
            data.writeInt32(desc->latency);
        }
        remote()->transact(IO_CONFIG_CHANGED, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end
    end

    class 611980 "BpAudioPolicyService"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 149644 // IAudioPolicyService
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " reserved, no longer used"
      classrelation 1305484 // <realization>
	relation 1305484 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1305484 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1820172 "BpAudioPolicyService"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IAudioPolicyService>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1820300 "setDeviceConnectionState"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "device" explicit_type "audio_devices_t"
	  param in name "state" explicit_type "audio_policy_dev_state_t"
	  param in name "device_address" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(static_cast <uint32_t>(device));
        data.writeInt32(static_cast <uint32_t>(state));
        data.writeCString(device_address);
        remote()->transact(SET_DEVICE_CONNECTION_STATE, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1820428 "getDeviceConnectionState"
	cpp_virtual cpp_inline public explicit_return_type "audio_policy_dev_state_t"
	nparams 2
	  param in name "device" explicit_type "audio_devices_t"
	  param in name "device_address" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(static_cast <uint32_t>(device));
        data.writeCString(device_address);
        remote()->transact(GET_DEVICE_CONNECTION_STATE, data, &reply);
        return static_cast <audio_policy_dev_state_t>(reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1820556 "setPhoneState"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "state" explicit_type "audio_mode_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(state);
        remote()->transact(SET_PHONE_STATE, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1820684 "setForceUse"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "usage" explicit_type "audio_policy_force_use_t"
	  param in name "config" explicit_type "audio_policy_forced_cfg_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(static_cast <uint32_t>(usage));
        data.writeInt32(static_cast <uint32_t>(config));
        remote()->transact(SET_FORCE_USE, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1820812 "getForceUse"
	cpp_virtual cpp_inline public explicit_return_type "audio_policy_forced_cfg_t"
	nparams 1
	  param in name "usage" explicit_type "audio_policy_force_use_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(static_cast <uint32_t>(usage));
        remote()->transact(GET_FORCE_USE, data, &reply);
        return static_cast <audio_policy_forced_cfg_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1820940 "getOutput"
	cpp_virtual cpp_inline public explicit_return_type "audio_io_handle_t"
	nparams 5
	  param in name "stream" explicit_type "audio_stream_type_t"
	  param in name "samplingRate" explicit_type "uint32_t"
	  param in name "format" explicit_type "audio_format_t"
	  param in name "channelMask" explicit_type "audio_channel_mask_t"
	  param in name "flags" explicit_type "audio_output_flags_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(static_cast <uint32_t>(stream));
        data.writeInt32(samplingRate);
        data.writeInt32(static_cast <uint32_t>(format));
        data.writeInt32(channelMask);
        data.writeInt32(static_cast <uint32_t>(flags));
        remote()->transact(GET_OUTPUT, data, &reply);
        return static_cast <audio_io_handle_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1821068 "startOutput"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "output" explicit_type "audio_io_handle_t"
	  param in name "stream" explicit_type "audio_stream_type_t"
	  param in name "session" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(output);
        data.writeInt32((int32_t) stream);
        data.writeInt32(session);
        remote()->transact(START_OUTPUT, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1821196 "stopOutput"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "output" explicit_type "audio_io_handle_t"
	  param in name "stream" explicit_type "audio_stream_type_t"
	  param in name "session" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(output);
        data.writeInt32((int32_t) stream);
        data.writeInt32(session);
        remote()->transact(STOP_OUTPUT, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1821324 "releaseOutput"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "output" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(output);
        remote()->transact(RELEASE_OUTPUT, data, &reply);
    };
"
	
	
	
	
      end

      operation 1821452 "getInput"
	cpp_virtual cpp_inline public explicit_return_type "audio_io_handle_t"
	nparams 5
	  param in name "inputSource" explicit_type "audio_source_t"
	  param in name "samplingRate" explicit_type "uint32_t"
	  param in name "format" explicit_type "audio_format_t"
	  param in name "channelMask" explicit_type "audio_channel_mask_t"
	  param in name "audioSession" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32((int32_t) inputSource);
        data.writeInt32(samplingRate);
        data.writeInt32(static_cast <uint32_t>(format));
        data.writeInt32(channelMask);
        data.writeInt32(audioSession);
        remote()->transact(GET_INPUT, data, &reply);
        return static_cast <audio_io_handle_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1821580 "startInput"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "input" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(input);
        remote()->transact(START_INPUT, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1821708 "stopInput"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "input" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(input);
        remote()->transact(STOP_INPUT, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1821836 "releaseInput"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "input" explicit_type "audio_io_handle_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(input);
        remote()->transact(RELEASE_INPUT, data, &reply);
    };
"
	
	
	
	
      end

      operation 1821964 "initStreamVolume"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "stream" explicit_type "audio_stream_type_t"
	  param in name "indexMin" explicit_type "int"
	  param in name "indexMax" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(static_cast <uint32_t>(stream));
        data.writeInt32(indexMin);
        data.writeInt32(indexMax);
        remote()->transact(INIT_STREAM_VOLUME, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1822092 "setStreamVolumeIndex"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "stream" explicit_type "audio_stream_type_t"
	  param in name "index" explicit_type "int"
	  param in name "device" explicit_type "audio_devices_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(static_cast <uint32_t>(stream));
        data.writeInt32(index);
        data.writeInt32(static_cast <uint32_t>(device));
        remote()->transact(SET_STREAM_VOLUME, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1822220 "getStreamVolumeIndex"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "stream" explicit_type "audio_stream_type_t"
	  param inout name "index" explicit_type "int"
	  param in name "device" explicit_type "audio_devices_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(static_cast <uint32_t>(stream));
        data.writeInt32(static_cast <uint32_t>(device));

        remote()->transact(GET_STREAM_VOLUME, data, &reply);
        int lIndex = reply.readInt32();
        if (index) *index = lIndex;
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1822348 "getStrategyForStream"
	cpp_virtual cpp_inline public explicit_return_type "uint32_t"
	nparams 1
	  param in name "stream" explicit_type "audio_stream_type_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(static_cast <uint32_t>(stream));
        remote()->transact(GET_STRATEGY_FOR_STREAM, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1822476 "getDevicesForStream"
	cpp_virtual cpp_inline public explicit_return_type "audio_devices_t"
	nparams 1
	  param in name "stream" explicit_type "audio_stream_type_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(static_cast <uint32_t>(stream));
        remote()->transact(GET_DEVICES_FOR_STREAM, data, &reply);
        return (audio_devices_t) reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1822604 "getOutputForEffect"
	cpp_virtual cpp_inline public explicit_return_type "audio_io_handle_t"
	nparams 1
	  param in name "desc" explicit_type "effect_descriptor_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.write(desc, sizeof(effect_descriptor_t));
        remote()->transact(GET_OUTPUT_FOR_EFFECT, data, &reply);
        return static_cast <audio_io_handle_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1822732 "registerEffect"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 5
	  param in name "desc" explicit_type "effect_descriptor_t"
	  param in name "io" explicit_type "audio_io_handle_t"
	  param in name "strategy" explicit_type "uint32_t"
	  param in name "session" explicit_type "int"
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.write(desc, sizeof(effect_descriptor_t));
        data.writeInt32(io);
        data.writeInt32(strategy);
        data.writeInt32(session);
        data.writeInt32(id);
        remote()->transact(REGISTER_EFFECT, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1822860 "unregisterEffect"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "id" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(id);
        remote()->transact(UNREGISTER_EFFECT, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1822988 "setEffectEnabled"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "id" explicit_type "int"
	  param in name "enabled" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(id);
        data.writeInt32(enabled);
        remote()->transact(SET_EFFECT_ENABLED, data, &reply);
        return static_cast <status_t> (reply.readInt32());
    };
"
	
	
	
	
      end

      operation 1823116 "isStreamActive"
	const cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "stream" explicit_type "audio_stream_type_t"
	  param in name "inPastMs" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32((int32_t) stream);
        data.writeInt32(inPastMs);
        remote()->transact(IS_STREAM_ACTIVE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1823244 "isSourceActive"
	const cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "source" explicit_type "audio_source_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32((int32_t) source);
        remote()->transact(IS_SOURCE_ACTIVE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1823372 "queryDefaultPreProcessing"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "audioSession" explicit_type "int"
	  param inout name "descriptors" explicit_type "effect_descriptor_t"
	  param inout name "count" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        if (descriptors == NULL || count == NULL) {
            return BAD_VALUE;
        }
        Parcel data, reply;
        data.writeInterfaceToken(IAudioPolicyService::getInterfaceDescriptor());
        data.writeInt32(audioSession);
        data.writeInt32(*count);
        status_t status = remote()->transact(QUERY_DEFAULT_PRE_PROCESSING, data, &reply);
        if (status != NO_ERROR) {
            return status;
        }
        status = static_cast <status_t> (reply.readInt32());
        uint32_t retCount = reply.readInt32();
        if (retCount != 0) {
            uint32_t numDesc = (retCount < *count) ? retCount : *count;
            reply.read(descriptors, sizeof(effect_descriptor_t) * numDesc);
        }
        *count = retCount;
        return status;
    };
"
	
	
	
	
      end
    end

    class 612236 "BpAudioRecord"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 151308 // IAudioRecord
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1305612 // <realization>
	relation 1305612 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1305612 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1823500 "BpAudioRecord"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IAudioRecord>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1823628 "start"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "event" explicit_type "int"
	  param in name "triggerSession" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioRecord::getInterfaceDescriptor());
        data.writeInt32(event);
        data.writeInt32(triggerSession);
        status_t status = remote()->transact(START, data, &reply);
        if (status == NO_ERROR) {
            status = reply.readInt32();
        } else {
            ALOGW(\"start() error: %s\", strerror(-status));
        }
        return status;
    };
"
	
	
	
	
      end

      operation 1823756 "stop"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioRecord::getInterfaceDescriptor());
        remote()->transact(STOP, data, &reply);
    };
"
	
	
	
	
      end

      operation 1823884 "getCblk"
	const cpp_virtual cpp_inline public explicit_return_type "sp<IMemory>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        sp<IMemory> cblk;
        data.writeInterfaceToken(IAudioRecord::getInterfaceDescriptor());
        status_t status = remote()->transact(GET_CBLK, data, &reply);
        if (status == NO_ERROR) {
            cblk = interface_cast<IMemory>(reply.readStrongBinder());
        }
        return cblk;
    };
"
	
	
	
	
      end
    end

    class 612492 "BpAudioTrack"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 151564 // IAudioTrack
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1305740 // <realization>
	relation 1305740 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1305740 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1824012 "BpAudioTrack"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IAudioTrack>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1824140 "getCblk"
	const cpp_virtual cpp_inline public explicit_return_type "sp<IMemory>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        sp<IMemory> cblk;
        data.writeInterfaceToken(IAudioTrack::getInterfaceDescriptor());
        status_t status = remote()->transact(GET_CBLK, data, &reply);
        if (status == NO_ERROR) {
            cblk = interface_cast<IMemory>(reply.readStrongBinder());
        }
        return cblk;
    };
"
	
	
	
	
      end

      operation 1824268 "start"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioTrack::getInterfaceDescriptor());
        status_t status = remote()->transact(START, data, &reply);
        if (status == NO_ERROR) {
            status = reply.readInt32();
        } else {
            ALOGW(\"start() error: %s\", strerror(-status));
        }
        return status;
    };
"
	
	
	
	
      end

      operation 1824396 "stop"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioTrack::getInterfaceDescriptor());
        remote()->transact(STOP, data, &reply);
    };
"
	
	
	
	
      end

      operation 1824524 "flush"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioTrack::getInterfaceDescriptor());
        remote()->transact(FLUSH, data, &reply);
    };
"
	
	
	
	
      end

      operation 1824652 "mute"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "e" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioTrack::getInterfaceDescriptor());
        data.writeInt32(e);
        remote()->transact(MUTE, data, &reply);
    };
"
	
	
	
	
      end

      operation 1824780 "pause"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioTrack::getInterfaceDescriptor());
        remote()->transact(PAUSE, data, &reply);
    };
"
	
	
	
	
      end

      operation 1824908 "attachAuxEffect"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "effectId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioTrack::getInterfaceDescriptor());
        data.writeInt32(effectId);
        status_t status = remote()->transact(ATTACH_AUX_EFFECT, data, &reply);
        if (status == NO_ERROR) {
            status = reply.readInt32();
        } else {
            ALOGW(\"attachAuxEffect() error: %s\", strerror(-status));
        }
        return status;
    };
"
	
	
	
	
      end

      operation 1825036 "allocateTimedBuffer"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "size" explicit_type "size_t"
	  param inout name "buffer" explicit_type "sp<IMemory>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioTrack::getInterfaceDescriptor());
        data.writeInt32(size);
        status_t status = remote()->transact(ALLOCATE_TIMED_BUFFER,
                                             data, &reply);
        if (status == NO_ERROR) {
            status = reply.readInt32();
            if (status == NO_ERROR) {
                *buffer = interface_cast<IMemory>(reply.readStrongBinder());
            }
        }
        return status;
    };
"
	
	
	
	
      end

      operation 1825164 "queueTimedBuffer"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "buffer" explicit_type "sp<IMemory>"
	  param in name "pts" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioTrack::getInterfaceDescriptor());
        data.writeStrongBinder(buffer->asBinder());
        data.writeInt64(pts);
        status_t status = remote()->transact(QUEUE_TIMED_BUFFER,
                                             data, &reply);
        if (status == NO_ERROR) {
            status = reply.readInt32();
        }
        return status;
    };
"
	
	
	
	
      end

      operation 1825292 "setMediaTimeTransform"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "xform" type class_ref 151692 // LinearTransform
	  param in name "target" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IAudioTrack::getInterfaceDescriptor());
        data.writeInt64(xform.a_zero);
        data.writeInt64(xform.b_zero);
        data.writeInt32(xform.a_to_b_numer);
        data.writeInt32(xform.a_to_b_denom);
        data.writeInt32(target);
        status_t status = remote()->transact(SET_MEDIA_TIME_TRANSFORM,
                                             data, &reply);
        if (status == NO_ERROR) {
            status = reply.readInt32();
        }
        return status;
    };
"
	
	
	
	
      end
    end

    class 612748 "BpCrypto"
      visibility package stereotype "struct"
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 151948 // ICrypto
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1305868 // <realization>
	relation 1305868 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1305868 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1825420 "BpCrypto"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<ICrypto>(impl) {
    };
"
	
	
	
	
      end

      operation 1825548 "initCheck"
	const cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ICrypto::getInterfaceDescriptor());
        remote()->transact(INIT_CHECK, data, &reply);

        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1825676 "isCryptoSchemeSupported"
	const cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "uuid" explicit_type "uint8_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[16]${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ICrypto::getInterfaceDescriptor());
        data.write(uuid, 16);
        remote()->transact(IS_CRYPTO_SUPPORTED, data, &reply);

        return reply.readInt32() != 0;
    };
"
	
	
	
	
      end

      operation 1825804 "createPlugin"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "uuid" explicit_type "uint8_t"
	  param in name "opaqueData" explicit_type "void"
	  param in name "opaqueSize" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[16]${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ICrypto::getInterfaceDescriptor());
        data.write(uuid, 16);
        data.writeInt32(opaqueSize);

        if (opaqueSize > 0) {
            data.write(opaqueData, opaqueSize);
        }

        remote()->transact(CREATE_PLUGIN, data, &reply);

        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1825932 "destroyPlugin"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ICrypto::getInterfaceDescriptor());
        remote()->transact(DESTROY_PLUGIN, data, &reply);

        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1826060 "requiresSecureDecoderComponent"
	const cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 1
	  param in name "mime" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ICrypto::getInterfaceDescriptor());
        data.writeCString(mime);
        remote()->transact(REQUIRES_SECURE_COMPONENT, data, &reply);

        return reply.readInt32() != 0;
    };
"
	
	
	
	
      end

      operation 1826188 "decrypt"
	cpp_virtual cpp_inline public explicit_return_type "ssize_t"
	nparams 9
	  param in name "secure" explicit_type "bool"
	  param in name "key" explicit_type "uint8_t"
	  param in name "iv" explicit_type "uint8_t"
	  param in name "mode" type class_ref 152204 // Mode
	  param in name "srcPtr" explicit_type "void"
	  param in name "subSamples" type class_ref 152332 // SubSample
	  param in name "numSubSamples" explicit_type "size_t"
	  param inout name "dstPtr" explicit_type "void"
	  param inout name "errorDetailMsg" type class_ref 129548 // AString
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} ${p1}[16]${v1}, const ${t2} ${p2}[16]${v2}, ${t3} ${p3}${v3}, const ${t4} * ${p4}${v4}, const ${t5} * ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} * ${p7}${v7}, ${t8} * ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(ICrypto::getInterfaceDescriptor());
        data.writeInt32(secure);
        data.writeInt32(mode);

        static const uint8_t kDummy[16] = { 0 };

        if (key == NULL) {
            key = kDummy;
        }

        if (iv == NULL) {
            iv = kDummy;
        }

        data.write(key, 16);
        data.write(iv, 16);

        size_t totalSize = 0;
        for (size_t i = 0; i < numSubSamples; ++i) {
            totalSize += subSamples[i].mNumBytesOfEncryptedData;
            totalSize += subSamples[i].mNumBytesOfClearData;
        }

        data.writeInt32(totalSize);
        data.write(srcPtr, totalSize);

        data.writeInt32(numSubSamples);
        data.write(subSamples, sizeof(CryptoPlugin::SubSample) * numSubSamples);

        if (secure) {
            data.writeIntPtr((intptr_t)dstPtr);
        }

        remote()->transact(DECRYPT, data, &reply);

        ssize_t result = reply.readInt32();

        if (result >= ERROR_DRM_VENDOR_MIN && result <= ERROR_DRM_VENDOR_MAX) {
            errorDetailMsg->setTo(reply.readCString());
        }

        if (!secure && result >= 0) {
            reply.read(dstPtr, result);
        }

        return result;
    };
"
	
	
	
	
      end
    end

    class 613004 "BpEffect"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 147340 // IEffect
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1305996 // <realization>
	relation 1305996 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1305996 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1826316 "BpEffect"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IEffect>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1826444 "enable"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"enable\");
        Parcel data, reply;
        data.writeInterfaceToken(IEffect::getInterfaceDescriptor());
        remote()->transact(ENABLE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1826572 "disable"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"disable\");
        Parcel data, reply;
        data.writeInterfaceToken(IEffect::getInterfaceDescriptor());
        remote()->transact(DISABLE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1826700 "command"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 5
	  param in name "cmdCode" explicit_type "uint32_t"
	  param in name "cmdSize" explicit_type "uint32_t"
	  param inout name "pCmdData" explicit_type "void"
	  param inout name "pReplySize" explicit_type "uint32_t"
	  param inout name "pReplyData" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"command\");
        Parcel data, reply;
        data.writeInterfaceToken(IEffect::getInterfaceDescriptor());
        data.writeInt32(cmdCode);
        int size = cmdSize;
        if (pCmdData == NULL) {
            size = 0;
        }
        data.writeInt32(size);
        if (size) {
            data.write(pCmdData, size);
        }
        if (pReplySize == NULL) {
            size = 0;
        } else {
            size = *pReplySize;
        }
        data.writeInt32(size);

        status_t status = remote()->transact(COMMAND, data, &reply);
        if (status != NO_ERROR) {
            if (pReplySize != NULL)
                *pReplySize = 0;
            return status;
        }

        status = reply.readInt32();
        size = reply.readInt32();
        if (size != 0 && pReplyData != NULL && pReplySize != NULL) {
            reply.read(pReplyData, size);
            *pReplySize = size;
        }
        return status;
    };
"
	
	
	
	
      end

      operation 1826828 "disconnect"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"disconnect\");
        Parcel data, reply;
        data.writeInterfaceToken(IEffect::getInterfaceDescriptor());
        remote()->transact(DISCONNECT, data, &reply);
        return;
    };
"
	
	
	
	
      end

      operation 1826956 "getCblk"
	const cpp_virtual cpp_inline public explicit_return_type "sp<IMemory>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        sp<IMemory> cblk;
        data.writeInterfaceToken(IEffect::getInterfaceDescriptor());
        status_t status = remote()->transact(GET_CBLK, data, &reply);
        if (status == NO_ERROR) {
            cblk = interface_cast<IMemory>(reply.readStrongBinder());
        }
        return cblk;
    };
"
	
	
	
	
      end
    end

    class 613260 "BpEffectClient"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 152716 // IEffectClient
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1306124 // <realization>
	relation 1306124 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1306124 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1827084 "BpEffectClient"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IEffectClient>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1827212 "controlStatusChanged"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "controlGranted" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"controlStatusChanged\");
        Parcel data, reply;
        data.writeInterfaceToken(IEffectClient::getInterfaceDescriptor());
        data.writeInt32((uint32_t)controlGranted);
        remote()->transact(CONTROL_STATUS_CHANGED, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end

      operation 1827340 "enableStatusChanged"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "enabled" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"enableStatusChanged\");
        Parcel data, reply;
        data.writeInterfaceToken(IEffectClient::getInterfaceDescriptor());
        data.writeInt32((uint32_t)enabled);
        remote()->transact(ENABLE_STATUS_CHANGED, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end

      operation 1827468 "commandExecuted"
	cpp_inline public explicit_return_type "void"
	nparams 5
	  param in name "cmdCode" explicit_type "uint32_t"
	  param in name "cmdSize" explicit_type "uint32_t"
	  param inout name "pCmdData" explicit_type "void"
	  param in name "replySize" explicit_type "uint32_t"
	  param inout name "pReplyData" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"commandExecuted\");
        Parcel data, reply;
        data.writeInterfaceToken(IEffectClient::getInterfaceDescriptor());
        data.writeInt32(cmdCode);
        int size = cmdSize;
        if (pCmdData == NULL) {
            size = 0;
        }
        data.writeInt32(size);
        if (size) {
            data.write(pCmdData, size);
        }
        size = replySize;
        if (pReplyData == NULL) {
            size = 0;
        }
        data.writeInt32(size);
        if (size) {
            data.write(pReplyData, size);
        }
        remote()->transact(COMMAND_EXECUTED, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end
    end

    class 613516 "BpHDCPObserver"
      visibility package stereotype "struct"
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 152844 // IHDCPObserver
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1306252 // <realization>
	relation 1306252 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1306252 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1827596 "BpHDCPObserver"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IHDCPObserver>(impl) {
    };
"
	
	
	
	
      end

      operation 1827724 "notify"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 4
	  param in name "msg" explicit_type "int"
	  param in name "ext1" explicit_type "int"
	  param in name "ext2" explicit_type "int"
	  param in name "obj" type class_ref 135436 // Parcel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IHDCPObserver::getInterfaceDescriptor());
        data.writeInt32(msg);
        data.writeInt32(ext1);
        data.writeInt32(ext2);
        if (obj && obj->dataSize() > 0) {
            data.appendFrom(const_cast<Parcel *>(obj), 0, obj->dataSize());
        }
        remote()->transact(OBSERVER_NOTIFY, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end
    end

    class 613644 "BpHDCP"
      visibility package stereotype "struct"
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 152972 // IHDCP
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1306380 // <realization>
	relation 1306380 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1306380 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1827852 "BpHDCP"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IHDCP>(impl) {
    };
"
	
	
	
	
      end

      operation 1827980 "setObserver"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "observer" explicit_type "sp<IHDCPObserver>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IHDCP::getInterfaceDescriptor());
        data.writeStrongBinder(observer->asBinder());
        remote()->transact(HDCP_SET_OBSERVER, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1828108 "initAsync"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "host" explicit_type "char"
	  param in name "port" explicit_type "uint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IHDCP::getInterfaceDescriptor());
        data.writeCString(host);
        data.writeInt32(port);
        remote()->transact(HDCP_INIT_ASYNC, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1828236 "shutdownAsync"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IHDCP::getInterfaceDescriptor());
        remote()->transact(HDCP_SHUTDOWN_ASYNC, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1828364 "encrypt"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 5
	  param in name "inData" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	  param in name "streamCTR" explicit_type "uint32_t"
	  param inout name "outInputCTR" explicit_type "uint64_t"
	  param inout name "outData" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IHDCP::getInterfaceDescriptor());
        data.writeInt32(size);
        data.write(inData, size);
        data.writeInt32(streamCTR);
        remote()->transact(HDCP_ENCRYPT, data, &reply);

        status_t err = reply.readInt32();

        if (err != OK) {
            *outInputCTR = 0;

            return err;
        }

        *outInputCTR = reply.readInt64();
        reply.read(outData, size);

        return err;
    };
"
	
	
	
	
      end
    end

    class 613900 "BpMediaMetadataRetriever"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 153868 // IMediaMetadataRetriever
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1306508 // <realization>
	relation 1306508 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1306508 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1828492 "BpMediaMetadataRetriever"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IMediaMetadataRetriever>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1828620 "disconnect"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaMetadataRetriever::getInterfaceDescriptor());
        remote()->transact(DISCONNECT, data, &reply);
    };
"
	
	
	
	
	comment " disconnect from media metadata retriever service"
      end

      operation 1828748 "setDataSource"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "srcUrl" explicit_type "char"
	  param in name "headers" explicit_type "KeyedVector<String8, String8>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaMetadataRetriever::getInterfaceDescriptor());
        data.writeCString(srcUrl);

        if (headers == NULL) {
            data.writeInt32(0);
        } else {
            // serialize the headers
            data.writeInt32(headers->size());
            for (size_t i = 0; i < headers->size(); ++i) {
                data.writeString8(headers->keyAt(i));
                data.writeString8(headers->valueAt(i));
            }
        }

        remote()->transact(SET_DATA_SOURCE_URL, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1828876 "setDataSource"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "fd" explicit_type "int"
	  param in name "offset" explicit_type "int64_t"
	  param in name "length" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaMetadataRetriever::getInterfaceDescriptor());
        data.writeFileDescriptor(fd);
        data.writeInt64(offset);
        data.writeInt64(length);
        remote()->transact(SET_DATA_SOURCE_FD, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1829004 "getFrameAtTime"
	cpp_inline public explicit_return_type "sp<IMemory>"
	nparams 2
	  param in name "timeUs" explicit_type "int64_t"
	  param in name "option" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"getTimeAtTime: time(%lld us) and option(%d)\", timeUs, option);
        Parcel data, reply;
        data.writeInterfaceToken(IMediaMetadataRetriever::getInterfaceDescriptor());
        data.writeInt64(timeUs);
        data.writeInt32(option);
#ifndef DISABLE_GROUP_SCHEDULE_HACK
        sendSchedPolicy(data);
#endif
        remote()->transact(GET_FRAME_AT_TIME, data, &reply);
        status_t ret = reply.readInt32();
        if (ret != NO_ERROR) {
            return NULL;
        }
        return interface_cast<IMemory>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 1829132 "extractAlbumArt"
	cpp_inline public explicit_return_type "sp<IMemory>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaMetadataRetriever::getInterfaceDescriptor());
#ifndef DISABLE_GROUP_SCHEDULE_HACK
        sendSchedPolicy(data);
#endif
        remote()->transact(EXTRACT_ALBUM_ART, data, &reply);
        status_t ret = reply.readInt32();
        if (ret != NO_ERROR) {
            return NULL;
        }
        return interface_cast<IMemory>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 1829260 "extractMetadata"
	cpp_inline public explicit_return_type "char"
	nparams 1
	  param in name "keyCode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaMetadataRetriever::getInterfaceDescriptor());
#ifndef DISABLE_GROUP_SCHEDULE_HACK
        sendSchedPolicy(data);
#endif
        data.writeInt32(keyCode);
        remote()->transact(EXTRACT_METADATA, data, &reply);
        status_t ret = reply.readInt32();
        if (ret != NO_ERROR) {
            return NULL;
        }
        return reply.readCString();
    };
"
	
	
	
	
      end
    end

    class 614156 "BpMediaPlayer"
      visibility package 
      nactuals 4
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 154124 // IMediaPlayer
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      actual class class_ref 135308 // BnInterface
        rank 0 explicit_value ""
      actual class class_ref 135308 // BnInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1306636 // <generalisation>
	relation 1306636 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 1306636 // <generalisation>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1829388 "BpMediaPlayer"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IMediaPlayer>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1829516 "disconnect"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        remote()->transact(DISCONNECT, data, &reply);
    };
"
	
	
	
	
	comment " disconnect from media player service"
      end

      operation 1829644 "setDataSource"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "url" explicit_type "char"
	  param in name "headers" explicit_type "KeyedVector<String8, String8>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        data.writeCString(url);
        if (headers == NULL) {
            data.writeInt32(0);
        } else {
            // serialize the headers
            data.writeInt32(headers->size());
            for (size_t i = 0; i < headers->size(); ++i) {
                data.writeString8(headers->keyAt(i));
                data.writeString8(headers->valueAt(i));
            }
        }
        remote()->transact(SET_DATA_SOURCE_URL, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1829772 "setDataSource"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "fd" explicit_type "int"
	  param in name "offset" explicit_type "int64_t"
	  param in name "length" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        data.writeFileDescriptor(fd);
        data.writeInt64(offset);
        data.writeInt64(length);
        remote()->transact(SET_DATA_SOURCE_FD, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1829900 "setDataSource"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "source" explicit_type "sp<IStreamSource>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        data.writeStrongBinder(source->asBinder());
        remote()->transact(SET_DATA_SOURCE_STREAM, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1830028 "setVideoSurfaceTexture"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "surfaceTexture" explicit_type "sp<ISurfaceTexture>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        sp<IBinder> b(surfaceTexture->asBinder());
        data.writeStrongBinder(b);
        remote()->transact(SET_VIDEO_SURFACETEXTURE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
	comment " pass the buffered ISurfaceTexture to the media player service"
      end

      operation 1830156 "prepareAsync"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        remote()->transact(PREPARE_ASYNC, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1830284 "start"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        remote()->transact(START, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1830412 "stop"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        remote()->transact(STOP, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1830540 "isPlaying"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "state" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        remote()->transact(IS_PLAYING, data, &reply);
        *state = reply.readInt32();
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1830668 "pause"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        remote()->transact(PAUSE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1830796 "seekTo"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "msec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        data.writeInt32(msec);
        remote()->transact(SEEK_TO, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1830924 "getCurrentPosition"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "msec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        remote()->transact(GET_CURRENT_POSITION, data, &reply);
        *msec = reply.readInt32();
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1831052 "getDuration"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "msec" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        remote()->transact(GET_DURATION, data, &reply);
        *msec = reply.readInt32();
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1831180 "reset"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        remote()->transact(RESET, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1831308 "setAudioStreamType"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "stream" explicit_type "audio_stream_type_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        data.writeInt32((int32_t) stream);
        remote()->transact(SET_AUDIO_STREAM_TYPE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1831436 "setLooping"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "loop" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        data.writeInt32(loop);
        remote()->transact(SET_LOOPING, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1831564 "setVolume"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "leftVolume" explicit_type "float"
	  param in name "rightVolume" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        data.writeFloat(leftVolume);
        data.writeFloat(rightVolume);
        remote()->transact(SET_VOLUME, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1831692 "invoke"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "request" type class_ref 135436 // Parcel
	  param inout name "reply" type class_ref 135436 // Parcel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        // Avoid doing any extra copy. The interface descriptor should
        // have been set by MediaPlayer.java.
        return remote()->transact(INVOKE, request, reply);
    };
"
	
	
	
	
      end

      operation 1831820 "setMetadataFilter"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "request" type class_ref 135436 // Parcel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel reply;
        // Avoid doing any extra copy of the request. The interface
        // descriptor should have been set by MediaPlayer.java.
        remote()->transact(SET_METADATA_FILTER, request, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1831948 "getMetadata"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "update_only" explicit_type "bool"
	  param in name "apply_filter" explicit_type "bool"
	  param inout name "reply" type class_ref 135436 // Parcel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel request;
        request.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        // TODO: Burning 2 ints for 2 boolean. Should probably use flags in an int here.
        request.writeInt32(update_only);
        request.writeInt32(apply_filter);
        remote()->transact(GET_METADATA, request, reply);
        return reply->readInt32();
    };
"
	
	
	
	
      end

      operation 1832076 "setAuxEffectSendLevel"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "level" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        data.writeFloat(level);
        remote()->transact(SET_AUX_EFFECT_SEND_LEVEL, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1832204 "attachAuxEffect"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "effectId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        data.writeInt32(effectId);
        remote()->transact(ATTACH_AUX_EFFECT, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1832332 "setParameter"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "key" explicit_type "int"
	  param in name "request" type class_ref 135436 // Parcel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        data.writeInt32(key);
        if (request.dataSize() > 0) {
            data.appendFrom(const_cast<Parcel *>(&request), 0, request.dataSize());
        }
        remote()->transact(SET_PARAMETER, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1832460 "getParameter"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "key" explicit_type "int"
	  param inout name "reply" type class_ref 135436 // Parcel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        data.writeInt32(key);
        return remote()->transact(GET_PARAMETER, data, reply);
    };
"
	
	
	
	
      end

      operation 1832588 "setRetransmitEndpoint"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "endpoint" explicit_type "sockaddr_in"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        status_t err;

        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        if (NULL != endpoint) {
            data.writeInt32(sizeof(*endpoint));
            data.write(endpoint, sizeof(*endpoint));
        } else {
            data.writeInt32(0);
        }

        err = remote()->transact(SET_RETRANSMIT_ENDPOINT, data, &reply);
        if (OK != err) {
            return err;
        }
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1832716 "setNextPlayer"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "player" explicit_type "sp<IMediaPlayer>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        sp<IBinder> b(player->asBinder());
        data.writeStrongBinder(b);
        remote()->transact(SET_NEXT_PLAYER, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1832844 "getRetransmitEndpoint"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "endpoint" explicit_type "sockaddr_in"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        status_t err;

        data.writeInterfaceToken(IMediaPlayer::getInterfaceDescriptor());
        err = remote()->transact(GET_RETRANSMIT_ENDPOINT, data, &reply);

        if ((OK != err) || (OK != (err = reply.readInt32()))) {
            return err;
        }

        data.read(endpoint, sizeof(*endpoint));

        return err;
    };
"
	
	
	
	
      end

      classrelation 825371 // <realization>
	relation 825371 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 825371 // <realization>
	  b parent class_ref 154124 // IMediaPlayer
      end

      classrelation 846491 // <unidirectional association>
	relation 846491 --->
	  a role_name "" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 846491 // <unidirectional association>
	  b parent class_ref 504076 // BpBinder
      end

      classrelation 846619 // <generalisation>
	relation 846619 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 846619 // <generalisation>
	  b parent class_ref 135308 // BnInterface
      end
    end

    class 614412 "BpMediaPlayerClient"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 154380 // IMediaPlayerClient
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1306764 // <realization>
	relation 1306764 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1306764 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1832972 "BpMediaPlayerClient"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IMediaPlayerClient>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1833100 "notify"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 4
	  param in name "msg" explicit_type "int"
	  param in name "ext1" explicit_type "int"
	  param in name "ext2" explicit_type "int"
	  param in name "obj" type class_ref 135436 // Parcel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerClient::getInterfaceDescriptor());
        data.writeInt32(msg);
        data.writeInt32(ext1);
        data.writeInt32(ext2);
        if (obj && obj->dataSize() > 0) {
            data.appendFrom(const_cast<Parcel *>(obj), 0, obj->dataSize());
        }
        remote()->transact(NOTIFY, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end
    end

    class 614668 "BpMediaPlayerService"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 153612 // IMediaPlayerService
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1306892 // <realization>
	relation 1306892 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1306892 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1833228 "BpMediaPlayerService"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IMediaPlayerService>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1833356 "createMetadataRetriever"
	cpp_virtual cpp_inline public explicit_return_type "sp<IMediaMetadataRetriever>"
	nparams 1
	  param in name "pid" explicit_type "pid_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        data.writeInt32(pid);
        remote()->transact(CREATE_METADATA_RETRIEVER, data, &reply);
        return interface_cast<IMediaMetadataRetriever>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 1833484 "create"
	cpp_virtual cpp_inline public explicit_return_type "sp<IMediaPlayer>"
	nparams 3
	  param in name "pid" explicit_type "pid_t"
	  param in name "client" explicit_type "sp<IMediaPlayerClient>"
	  param in name "audioSessionId" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        data.writeInt32(pid);
        data.writeStrongBinder(client->asBinder());
        data.writeInt32(audioSessionId);

        remote()->transact(CREATE, data, &reply);
        return interface_cast<IMediaPlayer>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 1833612 "createMediaRecorder"
	cpp_virtual cpp_inline public explicit_return_type "sp<IMediaRecorder>"
	nparams 1
	  param in name "pid" explicit_type "pid_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        data.writeInt32(pid);
        remote()->transact(CREATE_MEDIA_RECORDER, data, &reply);
        return interface_cast<IMediaRecorder>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 1833740 "decode"
	cpp_virtual cpp_inline public explicit_return_type "sp<IMemory>"
	nparams 4
	  param in name "url" explicit_type "char"
	  param inout name "pSampleRate" explicit_type "uint32_t"
	  param inout name "pNumChannels" explicit_type "int"
	  param inout name "pFormat" explicit_type "audio_format_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        data.writeCString(url);
        remote()->transact(DECODE_URL, data, &reply);
        *pSampleRate = uint32_t(reply.readInt32());
        *pNumChannels = reply.readInt32();
        *pFormat = (audio_format_t) reply.readInt32();
        return interface_cast<IMemory>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 1833868 "decode"
	cpp_virtual cpp_inline public explicit_return_type "sp<IMemory>"
	nparams 6
	  param in name "fd" explicit_type "int"
	  param in name "offset" explicit_type "int64_t"
	  param in name "length" explicit_type "int64_t"
	  param inout name "pSampleRate" explicit_type "uint32_t"
	  param inout name "pNumChannels" explicit_type "int"
	  param inout name "pFormat" explicit_type "audio_format_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        data.writeFileDescriptor(fd);
        data.writeInt64(offset);
        data.writeInt64(length);
        remote()->transact(DECODE_FD, data, &reply);
        *pSampleRate = uint32_t(reply.readInt32());
        *pNumChannels = reply.readInt32();
        *pFormat = (audio_format_t) reply.readInt32();
        return interface_cast<IMemory>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 1833996 "getOMX"
	cpp_virtual cpp_inline public explicit_return_type "sp<IOMX>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        remote()->transact(GET_OMX, data, &reply);
        return interface_cast<IOMX>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 1834124 "makeCrypto"
	cpp_virtual cpp_inline public explicit_return_type "sp<ICrypto>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        remote()->transact(MAKE_CRYPTO, data, &reply);
        return interface_cast<ICrypto>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 1834252 "makeHDCP"
	cpp_virtual cpp_inline public explicit_return_type "sp<IHDCP>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        remote()->transact(MAKE_HDCP, data, &reply);
        return interface_cast<IHDCP>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 1834380 "addBatteryData"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "params" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        data.writeInt32(params);
        remote()->transact(ADD_BATTERY_DATA, data, &reply);
    };
"
	
	
	
	
      end

      operation 1834508 "pullBatteryData"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "reply" type class_ref 135436 // Parcel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        return remote()->transact(PULL_BATTERY_DATA, data, reply);
    };
"
	
	
	
	
      end

      operation 1834636 "listenForRemoteDisplay"
	cpp_virtual cpp_inline public explicit_return_type "sp<IRemoteDisplay>"
	nparams 2
	  param in name "client" explicit_type "sp<IRemoteDisplayClient>"
	  param in name "iface" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaPlayerService::getInterfaceDescriptor());
        data.writeStrongBinder(client->asBinder());
        data.writeString8(iface);
        remote()->transact(LISTEN_FOR_REMOTE_DISPLAY, data, &reply);
        return interface_cast<IRemoteDisplay>(reply.readStrongBinder());
    };
"
	
	
	
	
      end
    end

    class 614924 "BpMediaRecorder"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 154892 // IMediaRecorder
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1307020 // <realization>
	relation 1307020 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1307020 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1834764 "BpMediaRecorder"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IMediaRecorder>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1834892 "setCamera"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "camera" explicit_type "sp<ICamera>"
	  param in name "proxy" explicit_type "sp<ICameraRecordingProxy>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setCamera(%p,%p)\", camera.get(), proxy.get());
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeStrongBinder(camera->asBinder());
        data.writeStrongBinder(proxy->asBinder());
        remote()->transact(SET_CAMERA, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1835020 "querySurfaceMediaSource"
	cpp_inline public explicit_return_type "sp<ISurfaceTexture>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"Query SurfaceMediaSource\");
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        remote()->transact(QUERY_SURFACE_MEDIASOURCE, data, &reply);
        int returnedNull = reply.readInt32();
        if (returnedNull) {
            return NULL;
        }
        return interface_cast<ISurfaceTexture>(reply.readStrongBinder());
    };
"
	
	
	
	
      end

      operation 1835148 "setPreviewSurface"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "surface" explicit_type "sp<Surface>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setPreviewSurface(%p)\", surface.get());
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        Surface::writeToParcel(surface, &data);
        remote()->transact(SET_PREVIEW_SURFACE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1835276 "init"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"init\");
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        remote()->transact(INIT, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1835404 "setVideoSource"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "vs" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setVideoSource(%d)\", vs);
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeInt32(vs);
        remote()->transact(SET_VIDEO_SOURCE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1835532 "setAudioSource"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "as" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setAudioSource(%d)\", as);
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeInt32(as);
        remote()->transact(SET_AUDIO_SOURCE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1835660 "setOutputFormat"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "of" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setOutputFormat(%d)\", of);
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeInt32(of);
        remote()->transact(SET_OUTPUT_FORMAT, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1835788 "setVideoEncoder"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "ve" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setVideoEncoder(%d)\", ve);
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeInt32(ve);
        remote()->transact(SET_VIDEO_ENCODER, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1835916 "setAudioEncoder"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "ae" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setAudioEncoder(%d)\", ae);
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeInt32(ae);
        remote()->transact(SET_AUDIO_ENCODER, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1836044 "setOutputFile"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "path" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setOutputFile(%s)\", path);
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeCString(path);
        remote()->transact(SET_OUTPUT_FILE_PATH, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1836172 "setOutputFile"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "fd" explicit_type "int"
	  param in name "offset" explicit_type "int64_t"
	  param in name "length" explicit_type "int64_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setOutputFile(%d, %lld, %lld)\", fd, offset, length);
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeFileDescriptor(fd);
        data.writeInt64(offset);
        data.writeInt64(length);
        remote()->transact(SET_OUTPUT_FILE_FD, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1836300 "setVideoSize"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setVideoSize(%dx%d)\", width, height);
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeInt32(width);
        data.writeInt32(height);
        remote()->transact(SET_VIDEO_SIZE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1836428 "setVideoFrameRate"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "frames_per_second" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setVideoFrameRate(%d)\", frames_per_second);
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeInt32(frames_per_second);
        remote()->transact(SET_VIDEO_FRAMERATE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1836556 "setParameters"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "params" type class_ref 131340 // String8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setParameter(%s)\", params.string());
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeString8(params);
        remote()->transact(SET_PARAMETERS, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1836684 "setListener"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "listener" explicit_type "sp<IMediaRecorderClient>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"setListener(%p)\", listener.get());
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        data.writeStrongBinder(listener->asBinder());
        remote()->transact(SET_LISTENER, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1836812 "prepare"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"prepare\");
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        remote()->transact(PREPARE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1836940 "getMaxAmplitude"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "max" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"getMaxAmplitude\");
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        remote()->transact(GET_MAX_AMPLITUDE, data, &reply);
        *max = reply.readInt32();
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1837068 "start"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"start\");
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        remote()->transact(START, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1837196 "stop"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"stop\");
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        remote()->transact(STOP, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1837324 "reset"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"reset\");
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        remote()->transact(RESET, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1837452 "close"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"close\");
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        remote()->transact(CLOSE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1837580 "release"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        ALOGV(\"release\");
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorder::getInterfaceDescriptor());
        remote()->transact(RELEASE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end
    end

    class 615180 "BpMediaRecorderClient"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 155148 // IMediaRecorderClient
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1307148 // <realization>
	relation 1307148 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1307148 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1837708 "BpMediaRecorderClient"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IMediaRecorderClient>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1837836 "notify"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "msg" explicit_type "int"
	  param in name "ext1" explicit_type "int"
	  param in name "ext2" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IMediaRecorderClient::getInterfaceDescriptor());
        data.writeInt32(msg);
        data.writeInt32(ext1);
        data.writeInt32(ext2);
        remote()->transact(NOTIFY, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end
    end

    class 615436 "BpOMX"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 155404 // IOMX
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1307276 // <realization>
	relation 1307276 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1307276 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1837964 "BpOMX"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IOMX>(impl) {
    };
"
	
	
	
	
      end

      operation 1838092 "livesLocally"
	cpp_virtual cpp_inline public explicit_return_type "bool"
	nparams 2
	  param in name "node" explicit_type "node_id"
	  param in name "pid" explicit_type "pid_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(pid);
        remote()->transact(LIVES_LOCALLY, data, &reply);

        return reply.readInt32() != 0;
    };
"
	
	
	
	
      end

      operation 1838220 "listNodes"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param inout name "list" explicit_type "List<ComponentInfo>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        list->clear();

        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        remote()->transact(LIST_NODES, data, &reply);

        int32_t n = reply.readInt32();
        for (int32_t i = 0; i < n; ++i) {
            list->push_back(ComponentInfo());
            ComponentInfo &info = *--list->end();

            info.mName = reply.readString8();
            int32_t numRoles = reply.readInt32();
            for (int32_t j = 0; j < numRoles; ++j) {
                info.mRoles.push_back(reply.readString8());
            }
        }

        return OK;
    };
"
	
	
	
	
      end

      operation 1838348 "allocateNode"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "name" explicit_type "char"
	  param in name "observer" explicit_type "sp<IOMXObserver>"
	  param inout name "node" explicit_type "node_id"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeCString(name);
        data.writeStrongBinder(observer->asBinder());
        remote()->transact(ALLOCATE_NODE, data, &reply);

        status_t err = reply.readInt32();
        if (err == OK) {
            *node = (void*)reply.readIntPtr();
        } else {
            *node = 0;
        }

        return err;
    };
"
	
	
	
	
      end

      operation 1838476 "freeNode"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 1
	  param in name "node" explicit_type "node_id"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        remote()->transact(FREE_NODE, data, &reply);

        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1838604 "sendCommand"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "node" explicit_type "node_id"
	  param in name "cmd" type class_ref 155916 // OMX_COMMANDTYPE
	  param in name "param" type class_ref 156044 // OMX_S32
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(cmd);
        data.writeInt32(param);
        remote()->transact(SEND_COMMAND, data, &reply);

        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1838732 "getParameter"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 4
	  param in name "node" explicit_type "node_id"
	  param in name "index" type class_ref 156172 // OMX_INDEXTYPE
	  param inout name "params" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(index);
        data.writeInt32(size);
        data.write(params, size);
        remote()->transact(GET_PARAMETER, data, &reply);

        status_t err = reply.readInt32();
        if (err != OK) {
            return err;
        }

        reply.read(params, size);

        return OK;
    };
"
	
	
	
	
      end

      operation 1838860 "setParameter"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 4
	  param in name "node" explicit_type "node_id"
	  param in name "index" type class_ref 156172 // OMX_INDEXTYPE
	  param in name "params" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(index);
        data.writeInt32(size);
        data.write(params, size);
        remote()->transact(SET_PARAMETER, data, &reply);

        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1838988 "getConfig"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 4
	  param in name "node" explicit_type "node_id"
	  param in name "index" type class_ref 156172 // OMX_INDEXTYPE
	  param inout name "params" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(index);
        data.writeInt32(size);
        data.write(params, size);
        remote()->transact(GET_CONFIG, data, &reply);

        status_t err = reply.readInt32();
        if (err != OK) {
            return err;
        }

        reply.read(params, size);

        return OK;
    };
"
	
	
	
	
      end

      operation 1839116 "setConfig"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 4
	  param in name "node" explicit_type "node_id"
	  param in name "index" type class_ref 156172 // OMX_INDEXTYPE
	  param in name "params" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(index);
        data.writeInt32(size);
        data.write(params, size);
        remote()->transact(SET_CONFIG, data, &reply);

        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1839244 "getState"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "node" explicit_type "node_id"
	  param inout name "state" type class_ref 156300 // OMX_STATETYPE
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        remote()->transact(GET_STATE, data, &reply);

        *state = static_cast<OMX_STATETYPE>(reply.readInt32());
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1839372 "enableGraphicBuffers"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "node" explicit_type "node_id"
	  param in name "port_index" type class_ref 156428 // OMX_U32
	  param in name "enable" type class_ref 156556 // OMX_BOOL
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(port_index);
        data.writeInt32((uint32_t)enable);
        remote()->transact(ENABLE_GRAPHIC_BUFFERS, data, &reply);

        status_t err = reply.readInt32();
        return err;
    };
"
	
	
	
	
      end

      operation 1839500 "getGraphicBufferUsage"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "node" explicit_type "node_id"
	  param in name "port_index" type class_ref 156428 // OMX_U32
	  param inout name "usage" type class_ref 156428 // OMX_U32
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(port_index);
        remote()->transact(GET_GRAPHIC_BUFFER_USAGE, data, &reply);

        status_t err = reply.readInt32();
        *usage = reply.readInt32();
        return err;
    };
"
	
	
	
	
      end

      operation 1839628 "useBuffer"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 4
	  param in name "node" explicit_type "node_id"
	  param in name "port_index" type class_ref 156428 // OMX_U32
	  param in name "params" explicit_type "sp<IMemory>"
	  param inout name "buffer" explicit_type "buffer_id"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(port_index);
        data.writeStrongBinder(params->asBinder());
        remote()->transact(USE_BUFFER, data, &reply);

        status_t err = reply.readInt32();
        if (err != OK) {
            *buffer = 0;

            return err;
        }

        *buffer = (void*)reply.readIntPtr();

        return err;
    };
"
	
	
	
	
      end

      operation 1839756 "useGraphicBuffer"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 4
	  param in name "node" explicit_type "node_id"
	  param in name "port_index" type class_ref 156428 // OMX_U32
	  param in name "graphicBuffer" explicit_type "sp<GraphicBuffer>"
	  param inout name "buffer" explicit_type "buffer_id"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(port_index);
        data.write(*graphicBuffer);
        remote()->transact(USE_GRAPHIC_BUFFER, data, &reply);

        status_t err = reply.readInt32();
        if (err != OK) {
            *buffer = 0;

            return err;
        }

        *buffer = (void*)reply.readIntPtr();

        return err;
    };
"
	
	
	
	
      end

      operation 1839884 "storeMetaDataInBuffers"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "node" explicit_type "node_id"
	  param in name "port_index" type class_ref 156428 // OMX_U32
	  param in name "enable" type class_ref 156556 // OMX_BOOL
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(port_index);
        data.writeInt32((uint32_t)enable);
        remote()->transact(STORE_META_DATA_IN_BUFFERS, data, &reply);

        status_t err = reply.readInt32();
        return err;
    };
"
	
	
	
	
      end

      operation 1840012 "allocateBuffer"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 5
	  param in name "node" explicit_type "node_id"
	  param in name "port_index" type class_ref 156428 // OMX_U32
	  param in name "size" explicit_type "size_t"
	  param inout name "buffer" explicit_type "buffer_id"
	  param inout name "buffer_data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(port_index);
        data.writeInt32(size);
        remote()->transact(ALLOC_BUFFER, data, &reply);

        status_t err = reply.readInt32();
        if (err != OK) {
            *buffer = 0;

            return err;
        }

        *buffer = (void *)reply.readIntPtr();
        *buffer_data = (void *)reply.readIntPtr();

        return err;
    };
"
	
	
	
	
      end

      operation 1840140 "allocateBufferWithBackup"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 4
	  param in name "node" explicit_type "node_id"
	  param in name "port_index" type class_ref 156428 // OMX_U32
	  param in name "params" explicit_type "sp<IMemory>"
	  param inout name "buffer" explicit_type "buffer_id"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(port_index);
        data.writeStrongBinder(params->asBinder());
        remote()->transact(ALLOC_BUFFER_WITH_BACKUP, data, &reply);

        status_t err = reply.readInt32();
        if (err != OK) {
            *buffer = 0;

            return err;
        }

        *buffer = (void*)reply.readIntPtr();

        return err;
    };
"
	
	
	
	
      end

      operation 1840268 "freeBuffer"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "node" explicit_type "node_id"
	  param in name "port_index" type class_ref 156428 // OMX_U32
	  param in name "buffer" explicit_type "buffer_id"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeInt32(port_index);
        data.writeIntPtr((intptr_t)buffer);
        remote()->transact(FREE_BUFFER, data, &reply);

        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1840396 "fillBuffer"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 2
	  param in name "node" explicit_type "node_id"
	  param in name "buffer" explicit_type "buffer_id"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeIntPtr((intptr_t)buffer);
        remote()->transact(FILL_BUFFER, data, &reply);

        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1840524 "emptyBuffer"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 6
	  param in name "node" explicit_type "node_id"
	  param in name "buffer" explicit_type "buffer_id"
	  param in name "range_offset" type class_ref 156428 // OMX_U32
	  param in name "range_length" type class_ref 156428 // OMX_U32
	  param in name "flags" type class_ref 156428 // OMX_U32
	  param in name "timestamp" type class_ref 156684 // OMX_TICKS
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeIntPtr((intptr_t)buffer);
        data.writeInt32(range_offset);
        data.writeInt32(range_length);
        data.writeInt32(flags);
        data.writeInt64(timestamp);
        remote()->transact(EMPTY_BUFFER, data, &reply);

        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1840652 "getExtensionIndex"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 3
	  param in name "node" explicit_type "node_id"
	  param in name "parameter_name" explicit_type "char"
	  param inout name "index" type class_ref 156172 // OMX_INDEXTYPE
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMX::getInterfaceDescriptor());
        data.writeIntPtr((intptr_t)node);
        data.writeCString(parameter_name);

        remote()->transact(GET_EXTENSION_INDEX, data, &reply);

        status_t err = reply.readInt32();
        if (err == OK) {
            *index = static_cast<OMX_INDEXTYPE>(reply.readInt32());
        } else {
            *index = OMX_IndexComponentStartUnused;
        }

        return err;
    };
"
	
	
	
	
      end
    end

    class 615564 "BpOMXObserver"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 156940 // IOMXObserver
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "//////////////////////////////////////////////////////////////////////////////"
      classrelation 1307404 // <realization>
	relation 1307404 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1307404 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1840780 "BpOMXObserver"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IOMXObserver>(impl) {
    };
"
	
	
	
	
      end

      operation 1840908 "onMessage"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "msg" type class_ref 156812 // omx_message
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IOMXObserver::getInterfaceDescriptor());
        data.write(&msg, sizeof(msg));

        remote()->transact(OBSERVER_ON_MSG, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end
    end

    class 615820 "BpRemoteDisplay"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 157452 // IRemoteDisplay
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1307532 // <realization>
	relation 1307532 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1307532 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1841036 "BpRemoteDisplay"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IRemoteDisplay>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1841164 "pause"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IRemoteDisplay::getInterfaceDescriptor());
        remote()->transact(PAUSE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1841292 "resume"
	cpp_virtual cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IRemoteDisplay::getInterfaceDescriptor());
        remote()->transact(RESUME, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end

      operation 1841420 "dispose"
	cpp_inline public return_type class_ref 128268 // status_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IRemoteDisplay::getInterfaceDescriptor());
        remote()->transact(DISPOSE, data, &reply);
        return reply.readInt32();
    };
"
	
	
	
	
      end
    end

    class 616076 "BpRemoteDisplayClient"
      visibility package 
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 157708 // IRemoteDisplayClient
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 1307660 // <realization>
	relation 1307660 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1307660 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1841548 "BpRemoteDisplayClient"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IRemoteDisplayClient>(impl)
    {
    };
"
	
	
	
	
      end

      operation 1841676 "onDisplayConnected"
	cpp_inline public explicit_return_type "void"
	nparams 4
	  param in name "surfaceTexture" explicit_type "sp<ISurfaceTexture>"
	  param in name "width" explicit_type "uint32_t"
	  param in name "height" explicit_type "uint32_t"
	  param in name "flags" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IRemoteDisplayClient::getInterfaceDescriptor());
        data.writeStrongBinder(surfaceTexture->asBinder());
        data.writeInt32(width);
        data.writeInt32(height);
        data.writeInt32(flags);
        remote()->transact(ON_DISPLAY_CONNECTED, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end

      operation 1841804 "onDisplayDisconnected"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IRemoteDisplayClient::getInterfaceDescriptor());
        remote()->transact(ON_DISPLAY_DISCONNECTED, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end

      operation 1841932 "onDisplayError"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "error" explicit_type "int32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IRemoteDisplayClient::getInterfaceDescriptor());
        data.writeInt32(error);
        remote()->transact(ON_DISPLAY_ERROR, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end
    end

    class 616332 "BpStreamSource"
      visibility package stereotype "struct"
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 158220 // IStreamSource
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " IStreamSource
 IStreamListener"
      classrelation 1307788 // <realization>
	relation 1307788 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1307788 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1842060 "BpStreamSource"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IStreamSource>(impl) {
    };
"
	
	
	
	
      end

      operation 1842188 "setListener"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "listener" explicit_type "sp<IStreamListener>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IStreamSource::getInterfaceDescriptor());
        data.writeStrongBinder(listener->asBinder());
        remote()->transact(SET_LISTENER, data, &reply);
    };
"
	
	
	
	
      end

      operation 1842316 "setBuffers"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "buffers" explicit_type "Vector<sp<IMemory> >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IStreamSource::getInterfaceDescriptor());
        data.writeInt32(static_cast<int32_t>(buffers.size()));
        for (size_t i = 0; i < buffers.size(); ++i) {
            data.writeStrongBinder(buffers.itemAt(i)->asBinder());
        }
        remote()->transact(SET_BUFFERS, data, &reply);
    };
"
	
	
	
	
      end

      operation 1842444 "onBufferAvailable"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IStreamSource::getInterfaceDescriptor());
        data.writeInt32(static_cast<int32_t>(index));
        remote()->transact(
                ON_BUFFER_AVAILABLE, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end

      operation 1842572 "flags"
	const cpp_virtual cpp_inline public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IStreamSource::getInterfaceDescriptor());
        remote()->transact(FLAGS, data, &reply);

        return reply.readInt32();
    };
"
	
	
	
	
      end
    end

    class 616460 "BpStreamListener"
      visibility package stereotype "struct"
      nactuals 2
      actual class class_ref 135180 // BpInterface
        rank 0 value class_ref 158476 // IStreamListener
      actual class class_ref 135180 // BpInterface
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "//////////////////////////////////////////////////////////////////////////////"
      classrelation 1307916 // <realization>
	relation 1307916 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    classrelation_ref 1307916 // <realization>
	  b parent class_ref 135180 // BpInterface
      end

      operation 1842700 "BpStreamListener"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "impl" explicit_type "sp<IBinder>"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : BpInterface<IStreamListener>(impl) {
    };
"
	
	
	
	
      end

      operation 1842828 "queueBuffer"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "size_t"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IStreamListener::getInterfaceDescriptor());
        data.writeInt32(static_cast<int32_t>(index));
        data.writeInt32(static_cast<int32_t>(size));

        remote()->transact(QUEUE_BUFFER, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end

      operation 1842956 "issueCommand"
	cpp_virtual cpp_inline public explicit_return_type "void"
	nparams 3
	  param in name "cmd" type class_ref 275212 // Command
	  param in name "synchronous" explicit_type "bool"
	  param in name "msg" explicit_type "sp<AMessage>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        Parcel data, reply;
        data.writeInterfaceToken(IStreamListener::getInterfaceDescriptor());
        data.writeInt32(static_cast<int32_t>(cmd));
        data.writeInt32(static_cast<int32_t>(synchronous));

        if (msg != NULL) {
            data.writeInt32(1);
            msg->writeToParcel(&data);
        } else {
            data.writeInt32(0);
        }

        remote()->transact(ISSUE_COMMAND, data, &reply, IBinder::FLAG_ONEWAY);
    };
"
	
	
	
	
      end
    end

    class 616588 "MyString8"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Use the String-class below instead of String8 to allocate all memory
 beforehand and not reenter the heap while we are examining it..."
      attribute 1657868 "MAX_SIZE"
	class_attribute const_attribute public explicit_type "size_t"
	init_value "=  256 * 1024"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${h_value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1843084 "MyString8"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : mPtr((char *)malloc(MAX_SIZE)) {
        *mPtr = '\\0';
    };
"
	
	
	
	
      end

      operation 1843212 "~MyString8"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        free(mPtr);
    };
"
	
	
	
	
      end

      operation 1843340 "append"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
        strcat(mPtr, s);
    };
"
	
	
	
	
      end

      operation 1843468 "string"
	const cpp_inline public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mPtr;
    };
"
	
	
	
	
      end

      operation 1843596 "size"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return strlen(mPtr);
    };
"
	
	
	
	
      end

      attribute 1657996 "mPtr"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1843724 "MyString8"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 616588 // MyString8
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1843852 "operator ="
	private return_type class_ref 616588 // MyString8
	nparams 1
	  param in name "" type class_ref 616588 // MyString8
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end
  end

  package_ref 143628 // libmedia

  deploymentview 134668 "libmedia"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 159756 "SoundPoolThread"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 268556 // SoundPoolMsg
	class_ref 169228 // SoundPoolThread
      end
    end

    artifact 251788 "BpAudioFlinger"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 611468 // BpAudioFlinger
      end
    end

    artifact 252044 "BpAudioFlingerClient"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 611724 // BpAudioFlingerClient
      end
    end

    artifact 252300 "BpAudioPolicyService"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 611980 // BpAudioPolicyService
      end
    end

    artifact 252556 "BpAudioRecord"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 612236 // BpAudioRecord
      end
    end

    artifact 252812 "BpAudioTrack"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 612492 // BpAudioTrack
      end
    end

    artifact 253068 "BpCrypto"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 612748 // BpCrypto
      end
    end

    artifact 253324 "BpEffect"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 613004 // BpEffect
      end
    end

    artifact 253580 "BpEffectClient"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 613260 // BpEffectClient
      end
    end

    artifact 253836 "BpHDCPObserver"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 613516 // BpHDCPObserver
      end
    end

    artifact 253964 "BpHDCP"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 613644 // BpHDCP
      end
    end

    artifact 254220 "BpMediaMetadataRetriever"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 613900 // BpMediaMetadataRetriever
      end
    end

    artifact 254476 "BpMediaPlayer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 614156 // BpMediaPlayer
      end
    end

    artifact 254732 "BpMediaPlayerClient"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 614412 // BpMediaPlayerClient
      end
    end

    artifact 254988 "BpMediaPlayerService"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 614668 // BpMediaPlayerService
      end
    end

    artifact 255244 "BpMediaRecorder"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 614924 // BpMediaRecorder
      end
    end

    artifact 255500 "BpMediaRecorderClient"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 615180 // BpMediaRecorderClient
      end
    end

    artifact 255756 "BpOMX"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 615436 // BpOMX
      end
    end

    artifact 255884 "BpOMXObserver"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 615564 // BpOMXObserver
      end
    end

    artifact 256140 "BpRemoteDisplay"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 615820 // BpRemoteDisplay
      end
    end

    artifact 256396 "BpRemoteDisplayClient"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 616076 // BpRemoteDisplayClient
      end
    end

    artifact 256652 "BpStreamSource"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 616332 // BpStreamSource
      end
    end

    artifact 256780 "BpStreamListener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 616460 // BpStreamListener
      end
    end

    artifact 256908 "MyString8"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 616588 // MyString8
      end
    end
  end
end
