format 74
"c" // vendor::tv::chrome::plugins::drmserver_adapter::jni::ppapi::c
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/vendor/tv/chrome/plugins/drmserver_adapter/jni/ppapi/c/"
  cpp_src_dir "/home/shchen/work/jellybean/vendor/tv/chrome/plugins/drmserver_adapter/jni/ppapi/c/"
  classview 262284 "c"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 2347788 "uint16_t"
      visibility package stereotype "typedef" explicit_base_type "unsigned short"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* This value represents a guaranteed unsigned 16 bit short. "
    end

    class 2584076 "int16_t"
      visibility package stereotype "typedef" explicit_base_type "short"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* This value represents a guaranteed signed 16 bit short. "
    end

    class 2584204 "int8_t"
      visibility package stereotype "typedef" explicit_base_type "signed char"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* This value represents a guaranteed signed 8 bit integer. "
    end

    class 2734220 "PP_Resource"
      visibility package stereotype "typedef" base_type class_ref 2409996 // int32_t
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PP_Resource</code> type which represents data
 * associated with the module.
 
*
 * @addtogroup Typedefs
 * @{
 
*
 * This typdef represents an opaque handle assigned by the browser to the
 * resource. The handle is guaranteed never to be 0 for a valid resource, so a
 * module can initialize it to 0 to indicate a \"NULL handle.\" Some interfaces
 * may return a NULL resource to indicate failure.
 *
 * While a Var represents something callable to JS or from the module to
 * the DOM, a resource has no meaning or visibility outside of the module
 * interface.
 *
 * Resources are reference counted. Use <code>AddRefResource()</code>
 * and <code>ReleaseResource()</code> in <code>ppb_core.h</code> to manage the
 * reference count of a resource. The data will be automatically destroyed when
 * the internal reference count reaches 0."
      classrelation 5187212 // <dependency>
	relation 5187084 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5187212 // <dependency>
	  b parent class_ref 2409996 // int32_t
      end
    end

    class 2737932 "PP_ArrayOutput_GetDataBuffer"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}* (* ${name})(void* user_data,
                                              uint32_t element_count,
                                              uint32_t element_size);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * PP_ArrayOutput_GetDataBuffer is a callback function to allocate plugin
 * memory for an array. It returns the allocated memory or null on failure.
 *
 * This function will be called reentrantly. This means that if you call a
 * function PPB_Foo.GetData(&array_output), GetData will call your
 * GetDataBuffer function before it returns.
 *
 * This function will be called even when returning 0-length arrays, so be sure
 * your implementation can support that. You can return NULL for 0 length
 * arrays and it will not be treated as a failure.
 *
 * You should not perform any processing in this callback, including calling
 * other PPAPI functions, outside of allocating memory. You should not throw
 * any exceptions. In C++, this means using \"new (nothrow)\" or being sure to
 * catch any exceptions before returning.
 *
 * The C++ wrapper provides a convenient templatized implementation around
 * std::vector which you should generally use instead of coding this
 * specifically.
 *
 * @param user_data The pointer provided in the PP_ArrayOutput structure. This
 * has no meaning to the browser, it is intended to be used by the
 * implementation to figure out where to put the data.
 *
 * @param element_count The number of elements in the array. This will be 0
 * if there is no data to return.
 *
 * @param element_size The size of each element in bytes.
 *
 * @return Returns a pointer to the allocated memory. On failure, returns null.
 * You can also return null if the element_count is 0.
 
*
 * @addtogroup Typedefs
 * @{"
    end

    class 2738060 "PP_ArrayOutput"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Structs
 * @{
 
*
 * A structure that defines a way for the browser to return arrays of data
 * to the plugin. The browser can not allocate memory on behalf of the plugin
 * becaues the plugin and browser may have different allocators.
 *
 * Array output works by having the browser call to the plugin to allocate a
 * buffer, and then the browser will copy the contents of the array into that
 * buffer.
 *
 * In C, you would typically implement this as follows:
 *
 * @code
 * struct MyArrayOutput {
 *   void* data;
 *   int element_count;
 * };
 * void* MyGetDataBuffer(void* user_data, uint32_t count, uint32_t size) {
 *   MyArrayOutput* output = (MyArrayOutput*)user_data;
 *   output->element_count = count;
 *   if (size) {
 *     output->data = malloc(count * size);
 *     if (!output->data)  // Be careful to set size properly on malloc failure.
 *       output->element_count = 0;
 *   } else {
 *     output->data = NULL;
 *   }
 *   return output->data;
 * }
 * void MyFunction() {
 *   MyArrayOutput array = { NULL, 0 };
 *   PP_ArrayOutput output = { &MyGetDataBuffer, &array };
 *   ppb_foo->GetData(&output);
 * }
 * @endcode"
      classrelation 5184268 // GetDataBuffer (<directional composition>)
	relation 5184140 *-->
	  a role_name "GetDataBuffer" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5184268 // GetDataBuffer (<directional composition>)
	  b parent class_ref 2737932 // PP_ArrayOutput_GetDataBuffer
      end

      attribute 9873804 "user_data"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2738188 "PP_Bool"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PP_Bool</code> enumeration for use in PPAPI C
 * headers.
 
*
 * @addtogroup Enums
 * @{
 
*
 * The <code>PP_Bool</code> enum is a boolean value for use in PPAPI C headers.
 * The standard bool type is not available to pre-C99 compilers, and is not
 * guaranteed to be compatible between C and C++, whereas the PPAPI C headers
 * can be included from C or C++ code."
      attribute 9873932 "PP_FALSE"
	public type class_ref 2738188 // PP_Bool
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9874060 "PP_TRUE"
	public type class_ref 2738188 // PP_Bool
	init_value " 1
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2738316 "PP_CompletionCallback_Func"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(void* user_data, int32_t result);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the API to create and run a callback.
 
*
 * @addtogroup Typedefs
 * @{
 
*
 * This typedef defines the signature that you implement to receive callbacks
 * on asynchronous completion of an operation.
 *
 * @param[in] user_data A pointer to user data passed to a callback function.
 * @param[in] result If result is 0 (PP_OK), the operation succeeded.  Negative
 * values (other than -1 or PP_OK_COMPLETE) indicate error and are specified
 * in pp_errors.h. Positive values for result usually indicate success and have
 * some operation-dependent meaning (such as bytes read)."
    end

    class 2738444 "PP_CompletionCallback_Flag"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Enums
 * @{
 
*
 * This enumeration contains flags used to control how non-NULL callbacks are
 * scheduled by asynchronous methods."
      attribute 9874188 "PP_COMPLETIONCALLBACK_FLAG_NONE"
	public type class_ref 2738444 // PP_CompletionCallback_Flag
	init_value " 0 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9874316 "PP_COMPLETIONCALLBACK_FLAG_OPTIONAL"
	public type class_ref 2738444 // PP_CompletionCallback_Flag
	init_value " 1 << 0
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2738572 "PP_CompletionCallback"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Structs
 * @{
 
*
 * <code>PP_CompletionCallback</code> is a common mechanism for supporting
 * potentially asynchronous calls in browser interfaces. Any method that takes a
 * <code>PP_CompletionCallback</code> can be used in one of three different
 * ways:
 *   - Required: The callback will always be invoked asynchronously on the
 *               thread where the associated PPB method was invoked. The method
 *               will always return <code>PP_OK_COMPLETIONPENDING when a
 *               required callback, and the callback will be invoked later
 *               (barring system or thread shutdown; see PPB_MessageLoop for
 *               details). Required callbacks are the default.
 *
 *               NOTE: If you use a required callback on a background thread,
 *               you must have created and attached a PPB_MessageLoop.
 *               Otherwise, the system can not run your callback on that thread,
 *               and will instead emit a log message and crash your plugin to
 *               make the problem more obvious.
 *
 *   - Optional: The callback may be invoked asynchronously, or the PPB method
 *               may complete synchronously if it can do so without blocking.
 *               If the method will complete asynchronously, it will return
 *               PP_OK_COMPLETIONPENDING. Otherwise, it will complete
 *               synchronously and return an appropriate code (see below for
 *               more information on the return code). Optional callbacks are
 *               generally more difficult to use correctly than Required
 *               callbacks, but can provide better performance for some APIs
 *               (especially APIs with buffered reads, such as PPB_URLLoader or
 *               PPB_FileIO).
 *
 *               NOTE: If you use an optional callback on a background thread,
 *               and you have not created and attached a PPB_MessageLoop, then
 *               the method you invoke will fail without running and return
 *               PP_ERROR_NO_MESSAGE_LOOP.
 *
 *   - Blocking: In this case, the callback's function pointer is NULL, and the
 *               invoked method must complete synchronously. The method will
 *               run to completion and return an appropriate code when finished
 *               (see below for more information). Blocking completion
 *               callbacks are only supported on background threads.
 *
 *               <code>PP_BlockUntilComplete()</code> provides a convenient way
 *               to specify blocking behavior. Refer to
 *                <code>PP_BlockUntilComplete</code> for more information.
 *
 * When the callback is run asynchronously, the result parameter passed to
 * <code>func</code> is an int32_t that, if negative indicates an error code
 * whose meaning is specific to the calling method (refer to
 * <code>pp_error.h</code> for further information). A positive or 0 value is a
 * return result indicating success whose meaning depends on the calling method
 * (e.g. number of bytes read)."
      classrelation 5184396 // func (<directional composition>)
	relation 5184268 *-->
	  a role_name "func" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5184396 // func (<directional composition>)
	  b parent class_ref 2738316 // PP_CompletionCallback_Func
      end

      attribute 9874444 "user_data"
	public explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5184524 // flags (<directional composition>)
	relation 5184396 *-->
	  a role_name "flags" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5184524 // flags (<directional composition>)
	  b parent class_ref 2409996 // int32_t
      end
    end

    class 2738700 "anonymous43"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines an enumeration of all PPAPI error codes.
 
*
 * @addtogroup Enums
 * @{
 
*
 * This enumeration contains enumerators of all PPAPI error codes.
 *
 * Errors are negative valued. Callers should treat all negative values as a
 * failure, even if it's not in the list, since the possible errors are likely
 * to expand and change over time."
      attribute 9874572 "PP_OK"
	public type class_ref 2738700 // anonymous43
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9874700 "PP_OK_COMPLETIONPENDING"
	public type class_ref 2738700 // anonymous43
	init_value " -1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9874828 "PP_ERROR_FAILED"
	public type class_ref 2738700 // anonymous43
	init_value " -2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9874956 "PP_ERROR_ABORTED"
	public type class_ref 2738700 // anonymous43
	init_value " -3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9875084 "PP_ERROR_BADARGUMENT"
	public type class_ref 2738700 // anonymous43
	init_value " -4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9875212 "PP_ERROR_BADRESOURCE"
	public type class_ref 2738700 // anonymous43
	init_value " -5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9875340 "PP_ERROR_NOINTERFACE"
	public type class_ref 2738700 // anonymous43
	init_value " -6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9875468 "PP_ERROR_NOACCESS"
	public type class_ref 2738700 // anonymous43
	init_value " -7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9875596 "PP_ERROR_NOMEMORY"
	public type class_ref 2738700 // anonymous43
	init_value " -8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9875724 "PP_ERROR_NOSPACE"
	public type class_ref 2738700 // anonymous43
	init_value " -9"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9875852 "PP_ERROR_NOQUOTA"
	public type class_ref 2738700 // anonymous43
	init_value " -10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9875980 "PP_ERROR_INPROGRESS"
	public type class_ref 2738700 // anonymous43
	init_value " -11"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9876108 "PP_ERROR_NOTSUPPORTED"
	public type class_ref 2738700 // anonymous43
	init_value " -12"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9876236 "PP_ERROR_BLOCKS_MAIN_THREAD"
	public type class_ref 2738700 // anonymous43
	init_value " -13"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9876364 "PP_ERROR_FILENOTFOUND"
	public type class_ref 2738700 // anonymous43
	init_value " -20"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9876492 "PP_ERROR_FILEEXISTS"
	public type class_ref 2738700 // anonymous43
	init_value " -21"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9876620 "PP_ERROR_FILETOOBIG"
	public type class_ref 2738700 // anonymous43
	init_value " -22"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9876748 "PP_ERROR_FILECHANGED"
	public type class_ref 2738700 // anonymous43
	init_value " -23"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9876876 "PP_ERROR_NOTAFILE"
	public type class_ref 2738700 // anonymous43
	init_value " -24"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9877004 "PP_ERROR_TIMEDOUT"
	public type class_ref 2738700 // anonymous43
	init_value " -30"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9877132 "PP_ERROR_USERCANCEL"
	public type class_ref 2738700 // anonymous43
	init_value " -40"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9877260 "PP_ERROR_NO_USER_GESTURE"
	public type class_ref 2738700 // anonymous43
	init_value " -41"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9877388 "PP_ERROR_CONTEXT_LOST"
	public type class_ref 2738700 // anonymous43
	init_value " -50"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9877516 "PP_ERROR_NO_MESSAGE_LOOP"
	public type class_ref 2738700 // anonymous43
	init_value " -51"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9877644 "PP_ERROR_WRONG_THREAD"
	public type class_ref 2738700 // anonymous43
	init_value " -52
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2738828 "PP_FileType"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines three enumerations for use in the PPAPI C file IO APIs.
 
*
 * @addtogroup Enums
 * @{
 
*
 * The <code>PP_FileType</code> enum contains file type constants."
      attribute 9877772 "PP_FILETYPE_REGULAR"
	public type class_ref 2738828 // PP_FileType
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9877900 "PP_FILETYPE_DIRECTORY"
	public type class_ref 2738828 // PP_FileType
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9878028 "PP_FILETYPE_OTHER"
	public type class_ref 2738828 // PP_FileType
	init_value " 2
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2738956 "PP_FileSystemType"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The <code>PP_FileSystemType</code> enum contains file system type constants."
      attribute 9878156 "PP_FILESYSTEMTYPE_INVALID"
	public type class_ref 2738956 // PP_FileSystemType
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9878284 "PP_FILESYSTEMTYPE_EXTERNAL"
	public type class_ref 2738956 // PP_FileSystemType
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9878412 "PP_FILESYSTEMTYPE_LOCALPERSISTENT"
	public type class_ref 2738956 // PP_FileSystemType
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9878540 "PP_FILESYSTEMTYPE_LOCALTEMPORARY"
	public type class_ref 2738956 // PP_FileSystemType
	init_value " 3
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2739084 "PP_FileInfo"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Structs
 * @{
 
*
 * The <code>PP_FileInfo</code> struct represents all information about a file,
 * such as size, type, and creation time."
      classrelation 5184652 // size (<directional composition>)
	relation 5184524 *-->
	  a role_name "size" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5184652 // size (<directional composition>)
	  b parent class_ref 2603788 // int64_t
      end

      classrelation 5184780 // type (<directional composition>)
	relation 5184652 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5184780 // type (<directional composition>)
	  b parent class_ref 2738828 // PP_FileType
      end

      classrelation 5184908 // system_type (<directional composition>)
	relation 5184780 *-->
	  a role_name "system_type" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5184908 // system_type (<directional composition>)
	  b parent class_ref 2738956 // PP_FileSystemType
      end

      classrelation 5185036 // creation_time (<directional composition>)
	relation 5184908 *-->
	  a role_name "creation_time" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5185036 // creation_time (<directional composition>)
	  b parent class_ref 2739212 // PP_Time
      end

      classrelation 5185164 // last_access_time (<directional composition>)
	relation 5185036 *-->
	  a role_name "last_access_time" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5185164 // last_access_time (<directional composition>)
	  b parent class_ref 2739212 // PP_Time
      end

      classrelation 5185292 // last_modified_time (<directional composition>)
	relation 5185164 *-->
	  a role_name "last_modified_time" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5185292 // last_modified_time (<directional composition>)
	  b parent class_ref 2739212 // PP_Time
      end
    end

    class 2739212 "PP_Time"
      visibility package stereotype "typedef" explicit_base_type "double"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines time and time ticks types.
 
*
 * @addtogroup Typedefs
 * @{
 
*
 * The <code>PP_Time</code> type represents the \"wall clock time\" according
 * to the browser and is defined as the number of seconds since the Epoch
 * (00:00:00 UTC, January 1, 1970)."
    end

    class 2739340 "PP_Graphics3DAttrib"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PP_Graphics3DAttrib</code> enumeration for use in
 * PPAPI C headers.
 
*
 * @addtogroup Enums
 * @{"
      attribute 9878668 "PP_GRAPHICS3DATTRIB_ALPHA_SIZE"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3021"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9878796 "PP_GRAPHICS3DATTRIB_BLUE_SIZE"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3022"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9878924 "PP_GRAPHICS3DATTRIB_GREEN_SIZE"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3023"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9879052 "PP_GRAPHICS3DATTRIB_RED_SIZE"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3024"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9879180 "PP_GRAPHICS3DATTRIB_DEPTH_SIZE"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3025"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9879308 "PP_GRAPHICS3DATTRIB_STENCIL_SIZE"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3026"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9879436 "PP_GRAPHICS3DATTRIB_SAMPLES"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3031"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9879564 "PP_GRAPHICS3DATTRIB_SAMPLE_BUFFERS"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3032"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9879692 "PP_GRAPHICS3DATTRIB_NONE"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3038"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9879820 "PP_GRAPHICS3DATTRIB_HEIGHT"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3056"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9879948 "PP_GRAPHICS3DATTRIB_WIDTH"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3057"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9880076 "PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3093"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9880204 "PP_GRAPHICS3DATTRIB_BUFFER_PRESERVED"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3094"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9880332 "PP_GRAPHICS3DATTRIB_BUFFER_DESTROYED"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x3095"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9880460 "PP_GRAPHICS3DATTRIB_GPU_PREFERENCE"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x11000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9880588 "PP_GRAPHICS3DATTRIB_GPU_PREFERENCE_LOW_POWER"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x11001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9880716 "PP_GRAPHICS3DATTRIB_GPU_PREFERENCE_PERFORMANCE"
	public type class_ref 2739340 // PP_Graphics3DAttrib
	init_value " 0x11002
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2739468 "PP_InputEvent_Key"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the API used to handle mouse and keyboard input events.
 
*
 * @addtogroup Structs
 * @{
 
*
 * The <code>PP_InputEvent_Key</code> struct represents a key up or key down
 * event.
 *
 * Key up and key down events correspond to physical keys on the keyboard. The
 * actual character that the user typed (if any) will be delivered in a
 * \"character\" event.
 *
 * If the user loses focus on the module while a key is down, a key up
 * event might not occur. For example, if the module has focus and the user
 * presses and holds the shift key, the module will see a \"shift down\" message.
 * Then if the user clicks elsewhere on the web page, the module's focus will
 * be lost and no more input events will be delivered.
 *
 * If your module depends on receiving key up events, it should also handle
 * \"lost focus\" as the equivalent of \"all keys up.\""
      classrelation 5185420 // modifier (<directional composition>)
	relation 5185292 *-->
	  a role_name "modifier" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5185420 // modifier (<directional composition>)
	  b parent class_ref 2345996 // uint32_t
      end

      classrelation 5185548 // key_code (<directional composition>)
	relation 5185420 *-->
	  a role_name "key_code" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5185548 // key_code (<directional composition>)
	  b parent class_ref 2345996 // uint32_t
      end
    end

    class 2739596 "PP_InputEvent_Character"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The <code>PP_InputEvent_Character</code> struct represents a typed character
 * event.
 *
 * Normally, the program will receive a key down event, followed by a character
 * event, followed by a key up event. The character event will have any
 * modifier keys applied. Obvious examples are symbols, where Shift-5 gives you
 * a '%'. The key down and up events will give you the scan code for the \"5\"
 * key, and the character event will give you the '%' character.
 *
 * You may not get a character event for all key down events if the key doesn't
 * generate a character. Likewise, you may actually get multiple character
 * events in a row. For example, some locales have an accent key that modifies
 * the next character typed. You might get this stream of events: accent down,
 * accent up (it didn't generate a character), letter key down, letter with
 * accent character event (it was modified by the previous accent key), letter
 * key up.  If the letter can't be combined with the accent, like an umlaut and
 * an 'R', the system might send unlaut down, umlaut up, 'R' key down, umlaut
 * character (can't combine it with 'R', so just send the raw unlaut so it
 * isn't lost\"), 'R' character event, 'R' key up."
      classrelation 5185676 // modifier (<directional composition>)
	relation 5185548 *-->
	  a role_name "modifier" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5185676 // modifier (<directional composition>)
	  b parent class_ref 2345996 // uint32_t
      end

      attribute 9880844 "text"
	public explicit_type "char"
	multiplicity "[5]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2739724 "PP_InputEvent_Mouse"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The <code>PP_InputEvent_Mouse</code> struct represents all mouse events
 * except mouse wheel events."
      classrelation 5185804 // modifier (<directional composition>)
	relation 5185676 *-->
	  a role_name "modifier" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5185804 // modifier (<directional composition>)
	  b parent class_ref 2345996 // uint32_t
      end

      classrelation 5185932 // button (<directional composition>)
	relation 5185804 *-->
	  a role_name "button" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5185932 // button (<directional composition>)
	  b parent class_ref 2739852 // PP_InputEvent_MouseButton
      end

      attribute 9880972 "x"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9881100 "y"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5186060 // click_count (<directional composition>)
	relation 5185932 *-->
	  a role_name "click_count" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5186060 // click_count (<directional composition>)
	  b parent class_ref 2409996 // int32_t
      end
    end

    class 2739852 "PP_InputEvent_MouseButton"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * This enumeration contains constants representing each mouse button. To get
 * the mouse button for a mouse down or up event, use GetMouseButton on
 * PPB_InputEvent."
      attribute 9901196 "PP_INPUTEVENT_MOUSEBUTTON_NONE"
	public type class_ref 2739852 // PP_InputEvent_MouseButton
	init_value " -1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9901324 "PP_INPUTEVENT_MOUSEBUTTON_LEFT"
	public type class_ref 2739852 // PP_InputEvent_MouseButton
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9901452 "PP_INPUTEVENT_MOUSEBUTTON_MIDDLE"
	public type class_ref 2739852 // PP_InputEvent_MouseButton
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9901580 "PP_INPUTEVENT_MOUSEBUTTON_RIGHT"
	public type class_ref 2739852 // PP_InputEvent_MouseButton
	init_value " 2
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2739980 "PP_InputEvent_Wheel"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The <code>PP_InputEvent_Wheel</code> struct represents all mouse wheel
 * events."
      classrelation 5186188 // modifier (<directional composition>)
	relation 5186060 *-->
	  a role_name "modifier" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5186188 // modifier (<directional composition>)
	  b parent class_ref 2345996 // uint32_t
      end

      attribute 9881228 "delta_x"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9881356 "delta_y"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9881484 "wheel_ticks_x"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9881612 "wheel_ticks_y"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5186316 // scroll_by_page (<directional composition>)
	relation 5186188 *-->
	  a role_name "scroll_by_page" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5186316 // scroll_by_page (<directional composition>)
	  b parent class_ref 2738188 // PP_Bool
      end
    end

    class 2740108 "PP_Instance"
      visibility package stereotype "typedef" base_type class_ref 2409996 // int32_t
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the PP_Instance type which uniquely identifies one module
 * instance.
 
*
 * @addtogroup Typedefs
 * @{
 
*
 * The <code>PP_Instance</code> value uniquely identifies one instance of a
 * module (.nexe/PP_Module). There will be one module instance for every
 * \\<embed> tag on a page.
 *
 * This identifier is an opaque handle assigned by the browser to the module.
 * It is guaranteed never to be 0, so a module can initialize it to 0 to
 * indicate a \"NULL handle.\""
      classrelation 5186444 // <dependency>
	relation 5186316 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5186444 // <dependency>
	  b parent class_ref 2409996 // int32_t
      end
    end

    class 2740236 "PP_Module"
      visibility package stereotype "typedef" base_type class_ref 2409996 // int32_t
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the PP_Module type which uniquely identifies the module
 * or .nexe.
 
*
 * @addtogroup Typedefs
 * @{
 
*
 * The PP_Module value uniquely identifies the module or .nexe.
 *
 * This identifier is an opaque handle assigned by the browser to the module. It
 * is guaranteed never to be 0, so a module can initialize it to 0 to
 * indicate a \"NULL handle.\""
      classrelation 5186572 // <dependency>
	relation 5186444 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5186572 // <dependency>
	  b parent class_ref 2409996 // int32_t
      end
    end

    class 2740364 "PP_Point"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the API to create a 2 dimensional point.
 * 0,0 is the upper-left starting coordinate.
 
*
 * @addtogroup Structs
 * @{
 
*
 * The PP_Point structure defines the integer x and y coordinates of a point."
      classrelation 5186700 // x (<directional composition>)
	relation 5186572 *-->
	  a role_name "x" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5186700 // x (<directional composition>)
	  b parent class_ref 2409996 // int32_t
      end

      classrelation 5186828 // y (<directional composition>)
	relation 5186700 *-->
	  a role_name "y" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5186828 // y (<directional composition>)
	  b parent class_ref 2409996 // int32_t
      end
    end

    class 2740492 "PP_FloatPoint"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The PP_FloatPoint structure defines the floating-point x and y coordinates
 * of a point."
      attribute 9881740 "x"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9881868 "y"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2740620 "PP_Rect"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the APIs for creating a 2 dimensional rectangle.
 
*
 * @addtogroup Structs
 * @{
 
*
 * The <code>PP_Rect</code> struct contains the size and location of a 2D
 * rectangle."
      classrelation 5186956 // point (<directional composition>)
	relation 5186828 *-->
	  a role_name "point" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5186956 // point (<directional composition>)
	  b parent class_ref 2740364 // PP_Point
      end

      classrelation 5187084 // size (<directional composition>)
	relation 5186956 *-->
	  a role_name "size" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5187084 // size (<directional composition>)
	  b parent class_ref 2740748 // PP_Size
      end
    end

    class 2740748 "PP_Size"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the width and height of a 2D rectangle.
 
*
 * @addtogroup Structs
 * @{
 
*
 * The <code>PP_Size</code> struct contains the size of a 2D rectangle."
      classrelation 5187340 // width (<directional composition>)
	relation 5187212 *-->
	  a role_name "width" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5187340 // width (<directional composition>)
	  b parent class_ref 2409996 // int32_t
      end

      classrelation 5187468 // height (<directional composition>)
	relation 5187340 *-->
	  a role_name "height" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5187468 // height (<directional composition>)
	  b parent class_ref 2409996 // int32_t
      end
    end

    class 2740876 "PP_TimeTicks"
      visibility package stereotype "typedef" explicit_base_type "double"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * A <code>PP_TimeTicks</code> value represents time ticks which are measured
 * in seconds and are used for indicating the time that certain messages were
 * received. In contrast to <code>PP_Time</code>, <code>PP_TimeTicks</code>
 * does not correspond to any actual wall clock time and will not change
 * discontinuously if the user changes their computer clock.
 *
 * The units are in seconds, but are not measured relative to any particular
 * epoch, so the most you can do is compare two values."
    end

    class 2741004 "PP_TouchPoint"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the API to create a touch point or position where fingers
 * makes contact with touch screen device.
 
*
 * @addtogroup Structs
 * @{
 
*
 * The <code>PP_TouchPoint</code> struct represents all information about a
 * single touch point, such ase position, id, rotation angle, and pressure."
      classrelation 5187596 // id (<directional composition>)
	relation 5187468 *-->
	  a role_name "id" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5187596 // id (<directional composition>)
	  b parent class_ref 2345996 // uint32_t
      end

      classrelation 5187724 // position (<directional composition>)
	relation 5187596 *-->
	  a role_name "position" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5187724 // position (<directional composition>)
	  b parent class_ref 2740492 // PP_FloatPoint
      end

      classrelation 5187852 // radius (<directional composition>)
	relation 5187724 *-->
	  a role_name "radius" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5187852 // radius (<directional composition>)
	  b parent class_ref 2740492 // PP_FloatPoint
      end

      attribute 9881996 "rotation_angle"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9882124 "pressure"
	public explicit_type "float"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2741132 "PP_VarType"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the API for handling the passing of data types between
 * your module and the page.
 
*
 * @addtogroup Enums
 * @{
 
*
 * The <code>PP_VarType</code> is an enumeration of the different types that
 * can be contained within a <code>PP_Var</code> structure."
      attribute 9882252 "PP_VARTYPE_UNDEFINED"
	public type class_ref 2741132 // PP_VarType
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9882380 "PP_VARTYPE_NULL"
	public type class_ref 2741132 // PP_VarType
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9882508 "PP_VARTYPE_BOOL"
	public type class_ref 2741132 // PP_VarType
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9882636 "PP_VARTYPE_INT32"
	public type class_ref 2741132 // PP_VarType
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9882764 "PP_VARTYPE_DOUBLE"
	public type class_ref 2741132 // PP_VarType
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9882892 "PP_VARTYPE_STRING"
	public type class_ref 2741132 // PP_VarType
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9883020 "PP_VARTYPE_OBJECT"
	public type class_ref 2741132 // PP_VarType
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9883148 "PP_VARTYPE_ARRAY"
	public type class_ref 2741132 // PP_VarType
	init_value " 7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9883276 "PP_VARTYPE_DICTIONARY"
	public type class_ref 2741132 // PP_VarType
	init_value " 8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9883404 "PP_VARTYPE_ARRAY_BUFFER"
	public type class_ref 2741132 // PP_VarType
	init_value " 9
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2741260 "PP_VarValue"
      visibility package stereotype "union"
      cpp_decl "${comment}${template}union ${name} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Structs
 * @{
 
*
 * The PP_VarValue union stores the data for any one of the types listed
 * in the PP_VarType enum."
      classrelation 5187980 // as_bool (<directional composition>)
	relation 5187852 *-->
	  a role_name "as_bool" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5187980 // as_bool (<directional composition>)
	  b parent class_ref 2738188 // PP_Bool
      end

      classrelation 5188108 // as_int (<directional composition>)
	relation 5187980 *-->
	  a role_name "as_int" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5188108 // as_int (<directional composition>)
	  b parent class_ref 2409996 // int32_t
      end

      attribute 9883532 "as_double"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5188236 // as_id (<directional composition>)
	relation 5188108 *-->
	  a role_name "as_id" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5188236 // as_id (<directional composition>)
	  b parent class_ref 2603788 // int64_t
      end
    end

    class 2741388 "PP_Var"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The <code>PP_VAR</code> struct is a variant data type and can contain any
 * value of one of the types named in the <code>PP_VarType</code> enum. This
 * structure is for passing data between native code which can be strongly
 * typed and the browser (JavaScript) which isn't strongly typed.
 *
 * JavaScript has a \"number\" type for holding a number, and does not
 * differentiate between floating point and integer numbers. The
 * JavaScript operations will try to optimize operations by using
 * integers when possible, but could end up with doubles. Therefore,
 * you can't assume a numeric <code>PP_Var</code> will be the type you expect.
 * Your code should be capable of handling either int32_t or double for numeric
 * PP_Vars sent from JavaScript."
      classrelation 5188364 // type (<directional composition>)
	relation 5188236 *-->
	  a role_name "type" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5188364 // type (<directional composition>)
	  b parent class_ref 2741132 // PP_VarType
      end

      classrelation 5188492 // padding (<directional composition>)
	relation 5188364 *-->
	  a role_name "padding" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5188492 // padding (<directional composition>)
	  b parent class_ref 2409996 // int32_t
      end

      classrelation 5188620 // value (<directional composition>)
	relation 5188492 *-->
	  a role_name "value" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}union ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5188620 // value (<directional composition>)
	  b parent class_ref 2741260 // PP_VarValue
      end
    end

    class 2741516 "PPB_GetInterface"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef  const ${type}* (* ${name})(const char* interface_name);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines a function pointer type for the
 * <code>PPB_GetInterface</code> function.
 
*
 * @addtogroup Typedefs
 * @{
 
*
 * This function pointer type defines the signature for the
 * <code>PPB_GetInterface</code> function. A generic
 * <code>PPB_GetInterface</code> pointer is passed to
 * <code>PPP_InitializedModule</code> when your module is loaded. You can use
 * this pointer to request a pointer to a specific browser interface. Browser
 * interface names are ASCII strings and are generally defined in the header
 * file for the interface, such as <code>PPB_AUDIO_INTERFACE</code> found in
 * <code>ppb.audio.h</code> or
 * <code>PPB_GRAPHICS_2D_INTERFACE</code> in <code>ppb_graphics_2d.h</code>.
 * Click
 * <a href=\"/native-client/{{pepperversion}}/pepperc/globals_defs\"
 * title=\"macros\">here</a> for a complete list of interface
 * names.
 *
 * This value will be NULL if the interface is not supported on the browser."
    end

    class 2741644 "PPB_Audio_Callback"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(void* sample_buffer,
                                   uint32_t buffer_size_in_bytes,
                                   void* user_data);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_Audio</code> interface, which provides
 * realtime stereo audio streaming capabilities.
 
*
 * @addtogroup Typedefs
 * @{
 
*
 * <code>PPB_Audio_Callback</code> defines the type of an audio callback
 * function used to fill the audio buffer with data. Please see the
 * Create() function in the <code>PPB_Audio</code> interface for
 * more details on this callback."
    end

    class 2741772 "PPB_Audio_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_Audio</code> interface contains pointers to several functions
 * for handling audio resources. Refer to the
 * <a href=\"/native-client/{{pepperversion}}/devguide/coding/audio\">Audio</a>
 * chapter in the Developer's Guide for information on using this interface.
 * Please see descriptions for each <code>PPB_Audio</code> and
 * <code>PPB_AudioConfig</code> function for more details. A C example using
 * <code>PPB_Audio</code> and <code>PPB_AudioConfig</code> follows.
 *
 * <strong>Example: </strong>
 *
 * @code
 * void audio_callback(void* sample_buffer,
 *                     uint32_t buffer_size_in_bytes,
 *                     void* user_data) {
 *   ... quickly fill in the buffer with samples and return to caller ...
 *  }
 *
 * ...Assume the application has cached the audio configuration interface in
 * audio_config_interface and the audio interface in
 * audio_interface...
 *
 * uint32_t count = audio_config_interface->RecommendSampleFrameCount(
 *     PP_AUDIOSAMPLERATE_44100, 4096);
 * PP_Resource pp_audio_config = audio_config_interface->CreateStereo16Bit(
 *     pp_instance, PP_AUDIOSAMPLERATE_44100, count);
 * PP_Resource pp_audio = audio_interface->Create(pp_instance, pp_audio_config,
 *     audio_callback, NULL);
 * audio_interface->StartPlayback(pp_audio);
 *
 * ...audio_callback() will now be periodically invoked on a separate thread...
 * @endcode"
      attribute 9883660 "Create"
	public explicit_type "/** * Create() creates an audio resource. No sound will be heard until * StartPlayback() is called. The callback is called with the buffer address * and given user data whenever the buffer needs to be filled. From within the * callback, you should not call <code>PPB_Audio</code> functions. The * callback will be called on a different thread than the one which created * the interface. For performance-critical applications (i.e. low-latency * audio), the callback should avoid blocking or calling functions that can * obtain locks, such as malloc. The layout and the size of the buffer passed * to the audio callback will be determined by the device configuration and is * specified in the <code>AudioConfig</code> documentation. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * @param[in] config A <code>PP_Resource</code> corresponding to an audio * config resource. * @param[in] audio_callback A <code>PPB_Audio_Callback</code> callback * function that the browser calls when it needs more samples to play. * @param[in] user_data A pointer to user data used in the callback function. * * @return A <code>PP_Resource</code> containing the audio resource if * successful or 0 if the configuration cannot be honored or the callback is * null. */ PP_Resource (*)(PP_Instance instance, PP_Resource config, PPB_Audio_Callback audio_callback, void* user_data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Create() creates an audio resource. No sound will be heard until
   * StartPlayback() is called. The callback is called with the buffer address
   * and given user data whenever the buffer needs to be filled. From within the
   * callback, you should not call <code>PPB_Audio</code> functions. The
   * callback will be called on a different thread than the one which created
   * the interface. For performance-critical applications (i.e. low-latency
   * audio), the callback should avoid blocking or calling functions that can
   * obtain locks, such as malloc. The layout and the size of the buffer passed
   * to the audio callback will be determined by the device configuration and is
   * specified in the <code>AudioConfig</code> documentation.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   * @param[in] config A <code>PP_Resource</code> corresponding to an audio
   * config resource.
   * @param[in] audio_callback A <code>PPB_Audio_Callback</code> callback
   * function that the browser calls when it needs more samples to play.
   * @param[in] user_data A pointer to user data used in the callback function.
   *
   * @return A <code>PP_Resource</code> containing the audio resource if
   * successful or 0 if the configuration cannot be honored or the callback is
   * null.
   */
  PP_Resource (*${name})(PP_Instance instance,
                        PP_Resource config,
                        PPB_Audio_Callback audio_callback,
                        void* user_data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9883788 "IsAudio"
	public explicit_type "/** * IsAudio() determines if the provided resource is an audio resource. * * @param[in] resource A <code>PP_Resource</code> corresponding to a generic * resource. * * @return A <code>PP_Bool</code> containing containing <code>PP_TRUE</code> * if the given resource is an Audio resource, otherwise * <code>PP_FALSE</code>. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsAudio() determines if the provided resource is an audio resource.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to a generic
   * resource.
   *
   * @return A <code>PP_Bool</code> containing containing <code>PP_TRUE</code>
   * if the given resource is an Audio resource, otherwise
   * <code>PP_FALSE</code>.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9883916 "GetCurrentConfig"
	public explicit_type "/** * GetCurrrentConfig() returns an audio config resource for the given audio * resource. * * @param[in] config A <code>PP_Resource</code> corresponding to an audio * resource. * * @return A <code>PP_Resource</code> containing the audio config resource if * successful. */ PP_Resource (*)(PP_Resource audio)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetCurrrentConfig() returns an audio config resource for the given audio
   * resource.
   *
   * @param[in] config A <code>PP_Resource</code> corresponding to an audio
   * resource.
   *
   * @return A <code>PP_Resource</code> containing the audio config resource if
   * successful.
   */
  PP_Resource (*${name})(PP_Resource audio)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9884044 "StartPlayback"
	public explicit_type "/** * StartPlayback() starts the playback of the audio resource and begins * periodically calling the callback. * * @param[in] config A <code>PP_Resource</code> corresponding to an audio * resource. * * @return A <code>PP_Bool</code> containing <code>PP_TRUE</code> if * successful, otherwise <code>PP_FALSE</code>. Also returns * <code>PP_TRUE</code> (and be a no-op) if called while playback is already * in progress. */ PP_Bool (*)(PP_Resource audio)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * StartPlayback() starts the playback of the audio resource and begins
   * periodically calling the callback.
   *
   * @param[in] config A <code>PP_Resource</code> corresponding to an audio
   * resource.
   *
   * @return A <code>PP_Bool</code> containing <code>PP_TRUE</code> if
   * successful, otherwise <code>PP_FALSE</code>. Also returns
   * <code>PP_TRUE</code> (and be a no-op) if called while playback is already
   * in progress.
   */
  PP_Bool (*${name})(PP_Resource audio)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9884172 "StopPlayback"
	public explicit_type "/** * StopPlayback() stops the playback of the audio resource. * * @param[in] config A <code>PP_Resource</code> corresponding to an audio * resource. * * @return A <code>PP_Bool</code> containing <code>PP_TRUE</code> if * successful, otherwise <code>PP_FALSE</code>. Also returns * <code>PP_TRUE</code> (and is a no-op) if called while playback is already * stopped. If a callback is in progress, StopPlayback() will block until the * callback completes. */ PP_Bool (*)(PP_Resource audio)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * StopPlayback() stops the playback of the audio resource.
   *
   * @param[in] config A <code>PP_Resource</code> corresponding to an audio
   * resource.
   *
   * @return A <code>PP_Bool</code> containing <code>PP_TRUE</code> if
   * successful, otherwise <code>PP_FALSE</code>. Also returns
   * <code>PP_TRUE</code> (and is a no-op) if called while playback is already
   * stopped. If a callback is in progress, StopPlayback() will block until the
   * callback completes.
   */
  PP_Bool (*${name})(PP_Resource audio)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2741900 "PPB_Audio"
      visibility package stereotype "typedef" base_type class_ref 2741772 // PPB_Audio_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5188748 // <dependency>
	relation 5188620 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5188748 // <dependency>
	  b parent class_ref 2741772 // PPB_Audio_1_0
      end
    end

    class 2742028 "anonymous44"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum  {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the PPB_AudioConfig interface for establishing an
 * audio configuration resource within the browser.
 
*
 * @addtogroup Enums
 * @{
 
*
 * This enumeration contains audio frame count constants.
 * <code>PP_AUDIOMINSAMPLEFRAMECOUNT</code> is the minimum possible frame
 * count. <code>PP_AUDIOMAXSAMPLEFRAMECOUNT</code> is the maximum possible
 * frame count."
      attribute 9884300 "PP_AUDIOMINSAMPLEFRAMECOUNT"
	public type class_ref 2742028 // anonymous44
	init_value " 64"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9884428 "PP_AUDIOMAXSAMPLEFRAMECOUNT"
	public type class_ref 2742028 // anonymous44
	init_value " 32768
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2742156 "PP_AudioSampleRate"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * PP_AudioSampleRate is an enumeration of the different audio sampling rates.
 * <code>PP_AUDIOSAMPLERATE_44100</code> is the sample rate used on CDs and
 * <code>PP_AUDIOSAMPLERATE_48000</code> is the sample rate used on DVDs and
 * Digital Audio Tapes."
      attribute 9884556 "PP_AUDIOSAMPLERATE_NONE"
	public type class_ref 2742156 // PP_AudioSampleRate
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9884684 "PP_AUDIOSAMPLERATE_44100"
	public type class_ref 2742156 // PP_AudioSampleRate
	init_value " 44100"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9884812 "PP_AUDIOSAMPLERATE_48000"
	public type class_ref 2742156 // PP_AudioSampleRate
	init_value " 48000
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2742284 "PPB_AudioConfig_1_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_AudioConfig</code> interface contains pointers to several
 * functions for establishing your audio configuration within the browser.
 * This interface only supports 16-bit stereo output.
 *
 * Refer to the
 * <a href=\"/native-client/{{pepperversion}}/devguide/coding/audio\">Audio
 * </a> chapter in the Developer's Guide for information on using this
 * interface."
      attribute 9884940 "CreateStereo16Bit"
	public explicit_type "/** * CreateStereo16bit() creates a 16 bit audio configuration resource. The * <code>sample_rate</code> should be the result of calling * <code>RecommendSampleRate</code> and <code>sample_frame_count</code> should * be the result of calling <code>RecommendSampleFrameCount</code>. If the * sample frame count or bit rate isn't supported, this function will fail and * return a null resource. * * A single sample frame on a stereo device means one value for the left * channel and one value for the right channel. * * Buffer layout for a stereo int16 configuration: * <code>int16_t *buffer16;</code> * <code>buffer16[0]</code> is the first left channel sample. * <code>buffer16[1]</code> is the first right channel sample. * <code>buffer16[2]</code> is the second left channel sample. * <code>buffer16[3]</code> is the second right channel sample. * ... * <code>buffer16[2 * (sample_frame_count - 1)]</code> is the last left * channel sample. * <code>buffer16[2 * (sample_frame_count - 1) + 1]</code> is the last * right channel sample. * Data will always be in the native endian format of the platform. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * @param[in] sample_rate A <code>PP_AudioSampleRate</code> which is either * <code>PP_AUDIOSAMPLERATE_44100</code> or * <code>PP_AUDIOSAMPLERATE_48000</code>. * @param[in] sample_frame_count A <code>uint32_t</code> frame count returned * from the <code>RecommendSampleFrameCount</code> function. * * @return A <code>PP_Resource</code> containing the * <code>PPB_Audio_Config</code> if successful or a null resource if the * sample frame count or bit rate are not supported. */ PP_Resource (*)(PP_Instance instance, PP_AudioSampleRate sample_rate, uint32_t sample_frame_count)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * CreateStereo16bit() creates a 16 bit audio configuration resource. The
   * <code>sample_rate</code> should be the result of calling
   * <code>RecommendSampleRate</code> and <code>sample_frame_count</code> should
   * be the result of calling <code>RecommendSampleFrameCount</code>. If the
   * sample frame count or bit rate isn't supported, this function will fail and
   * return a null resource.
   *
   * A single sample frame on a stereo device means one value for the left
   * channel and one value for the right channel.
   *
   * Buffer layout for a stereo int16 configuration:
   * <code>int16_t *buffer16;</code>
   * <code>buffer16[0]</code> is the first left channel sample.
   * <code>buffer16[1]</code> is the first right channel sample.
   * <code>buffer16[2]</code> is the second left channel sample.
   * <code>buffer16[3]</code> is the second right channel sample.
   * ...
   * <code>buffer16[2 * (sample_frame_count - 1)]</code> is the last left
   * channel sample.
   * <code>buffer16[2 * (sample_frame_count - 1) + 1]</code> is the last
   * right channel sample.
   * Data will always be in the native endian format of the platform.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   * @param[in] sample_rate A <code>PP_AudioSampleRate</code> which is either
   * <code>PP_AUDIOSAMPLERATE_44100</code> or
   * <code>PP_AUDIOSAMPLERATE_48000</code>.
   * @param[in] sample_frame_count A <code>uint32_t</code> frame count returned
   * from the <code>RecommendSampleFrameCount</code> function.
   *
   * @return A <code>PP_Resource</code> containing the
   * <code>PPB_Audio_Config</code> if successful or a null resource if the
   * sample frame count or bit rate are not supported.
   */
  PP_Resource (*${name})(PP_Instance instance,
                                   PP_AudioSampleRate sample_rate,
                                   uint32_t sample_frame_count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9885068 "RecommendSampleFrameCount"
	public explicit_type "/** * RecommendSampleFrameCount() returns the supported sample frame count * closest to the requested count. The sample frame count determines the * overall latency of audio. Since one \"frame\" is always buffered in advance, * smaller frame counts will yield lower latency, but higher CPU utilization. * * Supported sample frame counts will vary by hardware and system (consider * that the local system might be anywhere from a cell phone or a high-end * audio workstation). Sample counts less than * <code>PP_AUDIOMINSAMPLEFRAMECOUNT</code> and greater than * <code>PP_AUDIOMAXSAMPLEFRAMECOUNT</code> are never supported on any * system, but values in between aren't necessarily valid. This function * will return a supported count closest to the requested frame count. * * RecommendSampleFrameCount() result is intended for audio output devices. * * @param[in] instance * @param[in] sample_rate A <code>PP_AudioSampleRate</code> which is either * <code>PP_AUDIOSAMPLERATE_44100</code> or * <code>PP_AUDIOSAMPLERATE_48000.</code> * @param[in] requested_sample_frame_count A <code>uint_32t</code> requested * frame count. * * @return A <code>uint32_t</code> containing the recommended sample frame * count if successful. */ uint32_t (*)( PP_Instance instance, PP_AudioSampleRate sample_rate, uint32_t requested_sample_frame_count)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * RecommendSampleFrameCount() returns the supported sample frame count
   * closest to the requested count. The sample frame count determines the
   * overall latency of audio. Since one \"frame\" is always buffered in advance,
   * smaller frame counts will yield lower latency, but higher CPU utilization.
   *
   * Supported sample frame counts will vary by hardware and system (consider
   * that the local system might be anywhere from a cell phone or a high-end
   * audio workstation). Sample counts less than
   * <code>PP_AUDIOMINSAMPLEFRAMECOUNT</code> and greater than
   * <code>PP_AUDIOMAXSAMPLEFRAMECOUNT</code> are never supported on any
   * system, but values in between aren't necessarily valid. This function
   * will return a supported count closest to the requested frame count.
   *
   * RecommendSampleFrameCount() result is intended for audio output devices.
   *
   * @param[in] instance
   * @param[in] sample_rate A <code>PP_AudioSampleRate</code> which is either
   * <code>PP_AUDIOSAMPLERATE_44100</code> or
   * <code>PP_AUDIOSAMPLERATE_48000.</code>
   * @param[in] requested_sample_frame_count A <code>uint_32t</code> requested
   * frame count.
   *
   * @return A <code>uint32_t</code> containing the recommended sample frame
   * count if successful.
   */
  uint32_t (*${name})(
      PP_Instance instance,
      PP_AudioSampleRate sample_rate,
      uint32_t requested_sample_frame_count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9885196 "IsAudioConfig"
	public explicit_type "/** * IsAudioConfig() determines if the given resource is a * <code>PPB_Audio_Config</code>. * * @param[in] resource A <code>PP_Resource</code> corresponding to an audio * config resource. * * @return A <code>PP_Bool</code> containing <code>PP_TRUE</code> if the given * resource is an <code>AudioConfig</code> resource, otherwise * <code>PP_FALSE</code>. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsAudioConfig() determines if the given resource is a
   * <code>PPB_Audio_Config</code>.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to an audio
   * config resource.
   *
   * @return A <code>PP_Bool</code> containing <code>PP_TRUE</code> if the given
   * resource is an <code>AudioConfig</code> resource, otherwise
   * <code>PP_FALSE</code>.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9885324 "GetSampleRate"
	public explicit_type "/** * GetSampleRate() returns the sample rate for the given * <code>PPB_Audio_Config</code>. * * @param[in] config A <code>PP_Resource</code> corresponding to a * <code>PPB_Audio_Config</code>. * * @return A <code>PP_AudioSampleRate</code> containing sample rate or * <code>PP_AUDIOSAMPLERATE_NONE</code> if the resource is invalid. */ PP_AudioSampleRate (*)(PP_Resource config)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetSampleRate() returns the sample rate for the given
   * <code>PPB_Audio_Config</code>.
   *
   * @param[in] config A <code>PP_Resource</code> corresponding to a
   * <code>PPB_Audio_Config</code>.
   *
   * @return A <code>PP_AudioSampleRate</code> containing sample rate or
   * <code>PP_AUDIOSAMPLERATE_NONE</code> if the resource is invalid.
   */
  PP_AudioSampleRate (*${name})(PP_Resource config)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9885452 "GetSampleFrameCount"
	public explicit_type "/** * GetSampleFrameCount() returns the sample frame count for the given * <code>PPB_Audio_Config</code>. * * @param[in] config A <code>PP_Resource</code> corresponding to an audio * config resource. * * @return A <code>uint32_t</code> containing sample frame count or * 0 if the resource is invalid. Refer to * RecommendSampleFrameCount() for more on sample frame counts. */ uint32_t (*)(PP_Resource config)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetSampleFrameCount() returns the sample frame count for the given
   * <code>PPB_Audio_Config</code>.
   *
   * @param[in] config A <code>PP_Resource</code> corresponding to an audio
   * config resource.
   *
   * @return A <code>uint32_t</code> containing sample frame count or
   * 0 if the resource is invalid. Refer to
   * RecommendSampleFrameCount() for more on sample frame counts.
   */
  uint32_t (*${name})(PP_Resource config)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9885580 "RecommendSampleRate"
	public explicit_type "/** * RecommendSampleRate() returns the native sample rate that the browser * is using in the backend. Applications that use the recommended sample * rate will have potentially better latency and fidelity. The return value * is indended for audio output devices. If the output sample rate cannot be * determined, this function can return PP_AUDIOSAMPLERATE_NONE. * * @param[in] instance * * @return A <code>uint32_t</code> containing the recommended sample frame * count if successful. */ PP_AudioSampleRate (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * RecommendSampleRate() returns the native sample rate that the browser
   * is using in the backend.  Applications that use the recommended sample
   * rate will have potentially better latency and fidelity.  The return value
   * is indended for audio output devices.  If the output sample rate cannot be
   * determined, this function can return PP_AUDIOSAMPLERATE_NONE.
   *
   * @param[in] instance
   *
   * @return A <code>uint32_t</code> containing the recommended sample frame
   * count if successful.
   */
  PP_AudioSampleRate (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2742412 "PPB_AudioConfig"
      visibility package stereotype "typedef" base_type class_ref 2742284 // PPB_AudioConfig_1_1
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5188876 // <dependency>
	relation 5188748 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5188876 // <dependency>
	  b parent class_ref 2742284 // PPB_AudioConfig_1_1
      end
    end

    class 2742540 "PPB_AudioConfig_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9885708 "CreateStereo16Bit"
	public explicit_type "PP_Resource (*)(PP_Instance instance, PP_AudioSampleRate sample_rate, uint32_t sample_frame_count)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  PP_Resource (*${name})(PP_Instance instance,
                                   PP_AudioSampleRate sample_rate,
                                   uint32_t sample_frame_count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9885836 "RecommendSampleFrameCount"
	public explicit_type "uint32_t (*)( PP_AudioSampleRate sample_rate, uint32_t requested_sample_frame_count)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  uint32_t (*${name})(
      PP_AudioSampleRate sample_rate,
      uint32_t requested_sample_frame_count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9885964 "IsAudioConfig"
	public explicit_type "PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9886092 "GetSampleRate"
	public explicit_type "PP_AudioSampleRate (*)(PP_Resource config)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  PP_AudioSampleRate (*${name})(PP_Resource config)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9886220 "GetSampleFrameCount"
	public explicit_type "uint32_t (*)(PP_Resource config)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  uint32_t (*${name})(PP_Resource config)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2742668 "PP_LogLevel"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_Console</code> interface.
 
*
 * @addtogroup Enums
 * @{"
      attribute 9886348 "PP_LOGLEVEL_TIP"
	public type class_ref 2742668 // PP_LogLevel
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9886476 "PP_LOGLEVEL_LOG"
	public type class_ref 2742668 // PP_LogLevel
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9886604 "PP_LOGLEVEL_WARNING"
	public type class_ref 2742668 // PP_LogLevel
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9886732 "PP_LOGLEVEL_ERROR"
	public type class_ref 2742668 // PP_LogLevel
	init_value " 3
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2742796 "PPB_Console_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{"
      attribute 9886860 "Log"
	public explicit_type "/** * Logs the given message to the JavaScript console associated with the * given plugin instance with the given logging level. The name of the plugin * issuing the log message will be automatically prepended to the message. * The value may be any type of Var. */ void (*)(PP_Instance instance, PP_LogLevel level, struct PP_Var value)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Logs the given message to the JavaScript console associated with the
   * given plugin instance with the given logging level. The name of the plugin
   * issuing the log message will be automatically prepended to the message.
   * The value may be any type of Var.
   */
  void (*${name})(PP_Instance instance, PP_LogLevel level, struct PP_Var value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9886988 "LogWithSource"
	public explicit_type "/** * Logs a message to the console with the given source information rather * than using the internal PPAPI plugin name. The name must be a string var. * * The regular log function will automatically prepend the name of your * plugin to the message as the \"source\" of the message. Some plugins may * wish to override this. For example, if your plugin is a Python * interpreter, you would want log messages to contain the source .py file * doing the log statement rather than have \"python\" show up in the console. */ void (*)(PP_Instance instance, PP_LogLevel level, struct PP_Var source, struct PP_Var value)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Logs a message to the console with the given source information rather
   * than using the internal PPAPI plugin name. The name must be a string var.
   *
   * The regular log function will automatically prepend the name of your
   * plugin to the message as the \"source\" of the message. Some plugins may
   * wish to override this. For example, if your plugin is a Python
   * interpreter, you would want log messages to contain the source .py file
   * doing the log statement rather than have \"python\" show up in the console.
   */
  void (*${name})(PP_Instance instance,
                        PP_LogLevel level,
                        struct PP_Var source,
                        struct PP_Var value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2742924 "PPB_Console"
      visibility package stereotype "typedef" base_type class_ref 2742796 // PPB_Console_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5189004 // <dependency>
	relation 5188876 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5189004 // <dependency>
	  b parent class_ref 2742796 // PPB_Console_1_0
      end
    end

    class 2743052 "PPB_Core_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_Core</code> interface defined by the browser
 * and containing pointers to functions related to memory management, time, and
 * threads.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_Core</code> interface contains pointers to functions related
 * to memory management, time, and threads on the browser.
 *"
      attribute 9887116 "AddRefResource"
	public explicit_type "/** * * AddRefResource() adds a reference to a resource. * * @param[in] config A <code>PP_Resource</code> corresponding to a * resource. */ void (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   *
   * AddRefResource() adds a reference to a resource.
   *
   * @param[in] config A <code>PP_Resource</code> corresponding to a
   * resource.
   */
  void (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9887244 "ReleaseResource"
	public explicit_type "/** * ReleaseResource() removes a reference from a resource. * * @param[in] config A <code>PP_Resource</code> corresponding to a * resource. */ void (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * ReleaseResource() removes a reference from a resource.
   *
   * @param[in] config A <code>PP_Resource</code> corresponding to a
   * resource.
   */
  void (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9887372 "GetTime"
	public explicit_type "/** * GetTime() returns the \"wall clock time\" according to the * browser. * * @return A <code>PP_Time</code> containing the \"wall clock time\" according * to the browser. */ PP_Time (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetTime() returns the \"wall clock time\" according to the
   * browser.
   *
   * @return A <code>PP_Time</code> containing the \"wall clock time\" according
   * to the browser.
   */
  PP_Time (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9887500 "GetTimeTicks"
	public explicit_type "/** * GetTimeTicks() returns the \"tick time\" according to the browser. * This clock is used by the browser when passing some event times to the * module (e.g. using the <code>PP_InputEvent::time_stamp_seconds</code> * field). It is not correlated to any actual wall clock time * (like GetTime()). Because of this, it will not run change if the user * changes their computer clock. * * @return A <code>PP_TimeTicks</code> containing the \"tick time\" according * to the browser. */ PP_TimeTicks (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetTimeTicks() returns the \"tick time\" according to the browser.
   * This clock is used by the browser when passing some event times to the
   * module (e.g. using the <code>PP_InputEvent::time_stamp_seconds</code>
   * field). It is not correlated to any actual wall clock time
   * (like GetTime()). Because of this, it will not run change if the user
   * changes their computer clock.
   *
   * @return A <code>PP_TimeTicks</code> containing the \"tick time\" according
   * to the browser.
   */
  PP_TimeTicks (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9887628 "CallOnMainThread"
	public explicit_type "/** * CallOnMainThread() schedules work to be executed on the main module thread * after the specified delay. The delay may be 0 to specify a call back as * soon as possible. * * The <code>result</code> parameter will just be passed as the second * argument to the callback. Many applications won't need this, but it allows * a module to emulate calls of some callbacks which do use this value. * * <strong>Note:</strong> CallOnMainThread, even when used from the main * thread with a delay of 0 milliseconds, will never directly invoke the * callback. Even in this case, the callback will be scheduled * asynchronously. * * <strong>Note:</strong> If the browser is shutting down or if the module * has no instances, then the callback function may not be called. * * @param[in] delay_in_milliseconds An int32_t delay in milliseconds. * @param[in] callback A <code>PP_CompletionCallback</code> callback function * that the browser will call after the specified delay. * @param[in] result An int32_t that the browser will pass to the given * <code>PP_CompletionCallback</code>. */ void (*)(int32_t delay_in_milliseconds, struct PP_CompletionCallback callback, int32_t result)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * CallOnMainThread() schedules work to be executed on the main module thread
   * after the specified delay. The delay may be 0 to specify a call back as
   * soon as possible.
   *
   * The <code>result</code> parameter will just be passed as the second
   * argument to the callback. Many applications won't need this, but it allows
   * a module to emulate calls of some callbacks which do use this value.
   *
   * <strong>Note:</strong> CallOnMainThread, even when used from the main
   * thread with a delay of 0 milliseconds, will never directly invoke the
   * callback.  Even in this case, the callback will be scheduled
   * asynchronously.
   *
   * <strong>Note:</strong> If the browser is shutting down or if the module
   * has no instances, then the callback function may not be called.
   *
   * @param[in] delay_in_milliseconds An int32_t delay in milliseconds.
   * @param[in] callback A <code>PP_CompletionCallback</code> callback function
   * that the browser will call after the specified delay.
   * @param[in] result An int32_t that the browser will pass to the given
   * <code>PP_CompletionCallback</code>.
   */
  void (*${name})(int32_t delay_in_milliseconds,
                           struct PP_CompletionCallback callback,
                           int32_t result)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9887756 "IsMainThread"
	public explicit_type "/** * IsMainThread() returns true if the current thread is the main pepper * thread. * * This function is useful for implementing sanity checks, and deciding if * dispatching using CallOnMainThread() is required. * * @return A <code>PP_Bool</code> containing <code>PP_TRUE</code> if the * current thread is the main pepper thread, otherwise <code>PP_FALSE</code>. */ PP_Bool (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsMainThread() returns true if the current thread is the main pepper
   * thread.
   *
   * This function is useful for implementing sanity checks, and deciding if
   * dispatching using CallOnMainThread() is required.
   *
   * @return A <code>PP_Bool</code> containing <code>PP_TRUE</code> if the
   * current thread is the main pepper thread, otherwise <code>PP_FALSE</code>.
   */
  PP_Bool (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2743180 "PPB_Core"
      visibility package stereotype "typedef" base_type class_ref 2743052 // PPB_Core_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5189132 // <dependency>
	relation 5189004 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5189132 // <dependency>
	  b parent class_ref 2743052 // PPB_Core_1_0
      end
    end

    class 2743308 "PP_FileOpenFlags"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the API to create a file i/o object.
 
*
 * @addtogroup Enums
 * @{
 
*
 * The PP_FileOpenFlags enum contains file open constants."
      attribute 9887884 "PP_FILEOPENFLAG_READ"
	public type class_ref 2743308 // PP_FileOpenFlags
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9888012 "PP_FILEOPENFLAG_WRITE"
	public type class_ref 2743308 // PP_FileOpenFlags
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9888140 "PP_FILEOPENFLAG_CREATE"
	public type class_ref 2743308 // PP_FileOpenFlags
	init_value " 1 << 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9888268 "PP_FILEOPENFLAG_TRUNCATE"
	public type class_ref 2743308 // PP_FileOpenFlags
	init_value " 1 << 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9888396 "PP_FILEOPENFLAG_EXCLUSIVE"
	public type class_ref 2743308 // PP_FileOpenFlags
	init_value " 1 << 4
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2743436 "PPB_FileIO_1_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_FileIO</code> struct is used to operate on a regular file
 * (PP_FileType_Regular)."
      attribute 9888524 "Create"
	public explicit_type "/** * Create() creates a new FileIO object. * * @param[in] instance A <code>PP_Instance</code> identifying the instance * with the file. * * @return A <code>PP_Resource</code> corresponding to a FileIO if * successful or 0 if the module is invalid. */ PP_Resource (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Create() creates a new FileIO object.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying the instance
   * with the file.
   *
   * @return A <code>PP_Resource</code> corresponding to a FileIO if
   * successful or 0 if the module is invalid.
   */
  PP_Resource (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9888652 "IsFileIO"
	public explicit_type "/** * IsFileIO() determines if the provided resource is a FileIO. * * @param[in] resource A <code>PP_Resource</code> corresponding to a FileIO. * * @return <code>PP_TRUE</code> if the resource is a * <code>PPB_FileIO</code>, <code>PP_FALSE</code> if the resource is * invalid or some type other than <code>PPB_FileIO</code>. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsFileIO() determines if the provided resource is a FileIO.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to a FileIO.
   *
   * @return <code>PP_TRUE</code> if the resource is a
   * <code>PPB_FileIO</code>, <code>PP_FALSE</code> if the resource is
   * invalid or some type other than <code>PPB_FileIO</code>.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9888780 "Open"
	public explicit_type "/** * Open() opens the specified regular file for I/O according to the given * open flags, which is a bit-mask of the <code>PP_FileOpenFlags</code> * values. Upon success, the corresponding file is classified as \"in use\" * by this FileIO object until such time as the FileIO object is closed * or destroyed. * * @param[in] file_io A <code>PP_Resource</code> corresponding to a * FileIO. * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file * reference. * @param[in] open_flags A bit-mask of the <code>PP_FileOpenFlags</code> * values. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of Open(). * * @return An int32_t containing an error code from <code>pp_errors.h</code>. */ int32_t (*)(PP_Resource file_io, PP_Resource file_ref, int32_t open_flags, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Open() opens the specified regular file for I/O according to the given
   * open flags, which is a bit-mask of the <code>PP_FileOpenFlags</code>
   * values. Upon success, the corresponding file is classified as \"in use\"
   * by this FileIO object until such time as the FileIO object is closed
   * or destroyed.
   *
   * @param[in] file_io A <code>PP_Resource</code> corresponding to a
   * FileIO.
   * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file
   * reference.
   * @param[in] open_flags A bit-mask of the <code>PP_FileOpenFlags</code>
   * values.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of Open().
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   */
  int32_t (*${name})(PP_Resource file_io,
                  PP_Resource file_ref,
                  int32_t open_flags,
                  struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9888908 "Query"
	public explicit_type "/** * Query() queries info about the file opened by this FileIO object. The * FileIO object must be opened, and there must be no other operations * pending. * * @param[in] file_io A <code>PP_Resource</code> corresponding to a * FileIO. * @param[out] info The <code>PP_FileInfo</code> structure representing all * information about the file. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of Query(). * * @return An int32_t containing an error code from <code>pp_errors.h</code>. * PP_ERROR_FAILED will be returned if the file isn't opened, and * PP_ERROR_INPROGRESS will be returned if there is another operation pending. */ int32_t (*)(PP_Resource file_io, struct PP_FileInfo* info, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Query() queries info about the file opened by this FileIO object. The
   * FileIO object must be opened, and there must be no other operations
   * pending.
   *
   * @param[in] file_io A <code>PP_Resource</code> corresponding to a
   * FileIO.
   * @param[out] info The <code>PP_FileInfo</code> structure representing all
   * information about the file.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of Query().
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   * PP_ERROR_FAILED will be returned if the file isn't opened, and
   * PP_ERROR_INPROGRESS will be returned if there is another operation pending.
   */
  int32_t (*${name})(PP_Resource file_io,
                   struct PP_FileInfo* info,
                   struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9889036 "Touch"
	public explicit_type "/** * Touch() Updates time stamps for the file opened by this FileIO object. * This function will fail if the FileIO object has not been opened. The * FileIO object must be opened, and there must be no other operations * pending. * * @param[in] file_io A <code>PP_Resource</code> corresponding to a file * FileIO. * @param[in] last_access_time The last time the FileIO was accessed. * @param[in] last_modified_time The last time the FileIO was modified. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of Touch(). * * @return An int32_t containing an error code from <code>pp_errors.h</code>. * PP_ERROR_FAILED will be returned if the file isn't opened, and * PP_ERROR_INPROGRESS will be returned if there is another operation pending. */ int32_t (*)(PP_Resource file_io, PP_Time last_access_time, PP_Time last_modified_time, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Touch() Updates time stamps for the file opened by this FileIO object.
   * This function will fail if the FileIO object has not been opened. The
   * FileIO object must be opened, and there must be no other operations
   * pending.
   *
   * @param[in] file_io A <code>PP_Resource</code> corresponding to a file
   * FileIO.
   * @param[in] last_access_time The last time the FileIO was accessed.
   * @param[in] last_modified_time The last time the FileIO was modified.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of Touch().
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   * PP_ERROR_FAILED will be returned if the file isn't opened, and
   * PP_ERROR_INPROGRESS will be returned if there is another operation pending.
   */
  int32_t (*${name})(PP_Resource file_io,
                   PP_Time last_access_time,
                   PP_Time last_modified_time,
                   struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9889164 "Read"
	public explicit_type "/** * Read() reads from an offset in the file. The size of the buffer must be * large enough to hold the specified number of bytes to read. This function * might perform a partial read, meaning all the requested bytes * might not be returned, even if the end of the file has not been reached. * * ReadToArray() is preferred to Read() when doing asynchronous operations. * * @param[in] file_io A <code>PP_Resource</code> corresponding to a file * FileIO. * @param[in] offset The offset into the file. * @param[in] buffer The buffer to hold the specified number of bytes read. * @param[in] bytes_to_read The number of bytes to read from * <code>offset</code>. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of Read(). * * @return The number of bytes read or an error code from * <code>pp_errors.h</code>. If the return value is 0, then end-of-file was * reached. It is valid to call Read() multiple times with a completion * callback to queue up parallel reads from the file, but pending reads * cannot be interleaved with other operations. */ int32_t (*)(PP_Resource file_io, int64_t offset, char* buffer, int32_t bytes_to_read, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Read() reads from an offset in the file.  The size of the buffer must be
   * large enough to hold the specified number of bytes to read.  This function
   * might perform a partial read, meaning all the requested bytes
   * might not be returned, even if the end of the file has not been reached.
   *
   * ReadToArray() is preferred to Read() when doing asynchronous operations.
   *
   * @param[in] file_io A <code>PP_Resource</code> corresponding to a file
   * FileIO.
   * @param[in] offset The offset into the file.
   * @param[in] buffer The buffer to hold the specified number of bytes read.
   * @param[in] bytes_to_read The number of bytes to read from
   * <code>offset</code>.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of Read().
   *
   * @return The number of bytes read or an error code from
   * <code>pp_errors.h</code>. If the return value is 0, then end-of-file was
   * reached. It is valid to call Read() multiple times with a completion
   * callback to queue up parallel reads from the file, but pending reads
   * cannot be interleaved with other operations.
   */
  int32_t (*${name})(PP_Resource file_io,
                  int64_t offset,
                  char* buffer,
                  int32_t bytes_to_read,
                  struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9889292 "Write"
	public explicit_type "/** * Write() writes to an offset in the file. This function might perform a * partial write. The FileIO object must have been opened with write access. * * @param[in] file_io A <code>PP_Resource</code> corresponding to a file * FileIO. * @param[in] offset The offset into the file. * @param[in] buffer The buffer to hold the specified number of bytes read. * @param[in] bytes_to_write The number of bytes to write to * <code>offset</code>. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of Write(). * * @return The number of bytes written or an error code from * <code>pp_errors.h</code>. If the return value is 0, then end-of-file was * reached. It is valid to call Write() multiple times with a completion * callback to queue up parallel writes to the file, but pending writes * cannot be interleaved with other operations. */ int32_t (*)(PP_Resource file_io, int64_t offset, const char* buffer, int32_t bytes_to_write, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Write() writes to an offset in the file.  This function might perform a
   * partial write. The FileIO object must have been opened with write access.
   *
   * @param[in] file_io A <code>PP_Resource</code> corresponding to a file
   * FileIO.
   * @param[in] offset The offset into the file.
   * @param[in] buffer The buffer to hold the specified number of bytes read.
   * @param[in] bytes_to_write The number of bytes to write to
   * <code>offset</code>.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of Write().
   *
   * @return The number of bytes written or an error code from
   * <code>pp_errors.h</code>. If the return value is 0, then end-of-file was
   * reached. It is valid to call Write() multiple times with a completion
   * callback to queue up parallel writes to the file, but pending writes
   * cannot be interleaved with other operations.
   */
  int32_t (*${name})(PP_Resource file_io,
                   int64_t offset,
                   const char* buffer,
                   int32_t bytes_to_write,
                   struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9889420 "SetLength"
	public explicit_type "/** * SetLength() sets the length of the file. If the file size is extended, * then the extended area of the file is zero-filled. The FileIO object must * have been opened with write access and there must be no other operations * pending. * * @param[in] file_io A <code>PP_Resource</code> corresponding to a file * FileIO. * @param[in] length The length of the file to be set. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of SetLength(). * * @return An int32_t containing an error code from <code>pp_errors.h</code>. * PP_ERROR_FAILED will be returned if the file isn't opened, and * PP_ERROR_INPROGRESS will be returned if there is another operation pending. */ int32_t (*)(PP_Resource file_io, int64_t length, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * SetLength() sets the length of the file.  If the file size is extended,
   * then the extended area of the file is zero-filled. The FileIO object must
   * have been opened with write access and there must be no other operations
   * pending.
   *
   * @param[in] file_io A <code>PP_Resource</code> corresponding to a file
   * FileIO.
   * @param[in] length The length of the file to be set.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of SetLength().
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   * PP_ERROR_FAILED will be returned if the file isn't opened, and
   * PP_ERROR_INPROGRESS will be returned if there is another operation pending.
   */
  int32_t (*${name})(PP_Resource file_io,
                       int64_t length,
                       struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9889548 "Flush"
	public explicit_type "/** * Flush() flushes changes to disk. This call can be very expensive! The * FileIO object must have been opened with write access and there must be no * other operations pending. * * @param[in] file_io A <code>PP_Resource</code> corresponding to a file * FileIO. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of Flush(). * * @return An int32_t containing an error code from <code>pp_errors.h</code>. * PP_ERROR_FAILED will be returned if the file isn't opened, and * PP_ERROR_INPROGRESS will be returned if there is another operation pending. */ int32_t (*)(PP_Resource file_io, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Flush() flushes changes to disk.  This call can be very expensive! The
   * FileIO object must have been opened with write access and there must be no
   * other operations pending.
   *
   * @param[in] file_io A <code>PP_Resource</code> corresponding to a file
   * FileIO.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of Flush().
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   * PP_ERROR_FAILED will be returned if the file isn't opened, and
   * PP_ERROR_INPROGRESS will be returned if there is another operation pending.
   */
  int32_t (*${name})(PP_Resource file_io, struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9889676 "Close"
	public explicit_type "/** * Close() cancels any IO that may be pending, and closes the FileIO object. * Any pending callbacks will still run, reporting * <code>PP_ERROR_ABORTED</code> if pending IO was interrupted. It is not * valid to call Open() again after a call to this method. * <strong>Note:</strong> If the FileIO object is destroyed, and it is still * open, then it will be implicitly closed, so you are not required to call * Close(). * * @param[in] file_io A <code>PP_Resource</code> corresponding to a file * FileIO. */ void (*)(PP_Resource file_io)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Close() cancels any IO that may be pending, and closes the FileIO object.
   * Any pending callbacks will still run, reporting
   * <code>PP_ERROR_ABORTED</code> if pending IO was interrupted.  It is not
   * valid to call Open() again after a call to this method.
   * <strong>Note:</strong> If the FileIO object is destroyed, and it is still
   * open, then it will be implicitly closed, so you are not required to call
   * Close().
   *
   * @param[in] file_io A <code>PP_Resource</code> corresponding to a file
   * FileIO.
   */
  void (*${name})(PP_Resource file_io)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9889804 "ReadToArray"
	public explicit_type "/** * ReadToArray() reads from an offset in the file. A PP_ArrayOutput must be * provided so that output will be stored in its allocated buffer. This * function might perform a partial read. * * @param[in] file_io A <code>PP_Resource</code> corresponding to a file * FileIO. * @param[in] offset The offset into the file. * @param[in] max_read_length The maximum number of bytes to read from * <code>offset</code>. * @param[in] output A <code>PP_ArrayOutput</code> to hold the output data. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of ReadToArray(). * * @return The number of bytes read or an error code from * <code>pp_errors.h</code>. If the return value is 0, then end-of-file was * reached. It is valid to call ReadToArray() multiple times with a completion * callback to queue up parallel reads from the file, but pending reads * cannot be interleaved with other operations. */ int32_t (*)(PP_Resource file_io, int64_t offset, int32_t max_read_length, struct PP_ArrayOutput* output, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * ReadToArray() reads from an offset in the file.  A PP_ArrayOutput must be
   * provided so that output will be stored in its allocated buffer.  This
   * function might perform a partial read.
   *
   * @param[in] file_io A <code>PP_Resource</code> corresponding to a file
   * FileIO.
   * @param[in] offset The offset into the file.
   * @param[in] max_read_length The maximum number of bytes to read from
   * <code>offset</code>.
   * @param[in] output A <code>PP_ArrayOutput</code> to hold the output data.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of ReadToArray().
   *
   * @return The number of bytes read or an error code from
   * <code>pp_errors.h</code>. If the return value is 0, then end-of-file was
   * reached. It is valid to call ReadToArray() multiple times with a completion
   * callback to queue up parallel reads from the file, but pending reads
   * cannot be interleaved with other operations.
   */
  int32_t (*${name})(PP_Resource file_io,
                         int64_t offset,
                         int32_t max_read_length,
                         struct PP_ArrayOutput* output,
                         struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2743564 "PPB_FileIO"
      visibility package stereotype "typedef" base_type class_ref 2743436 // PPB_FileIO_1_1
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5189260 // <dependency>
	relation 5189132 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5189260 // <dependency>
	  b parent class_ref 2743436 // PPB_FileIO_1_1
      end
    end

    class 2743692 "PPB_FileIO_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9889932 "Create"
	public explicit_type "PP_Resource (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  PP_Resource (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9890060 "IsFileIO"
	public explicit_type "PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9890188 "Open"
	public explicit_type "int32_t (*)(PP_Resource file_io, PP_Resource file_ref, int32_t open_flags, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  int32_t (*${name})(PP_Resource file_io,
                  PP_Resource file_ref,
                  int32_t open_flags,
                  struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9890316 "Query"
	public explicit_type "int32_t (*)(PP_Resource file_io, struct PP_FileInfo* info, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  int32_t (*${name})(PP_Resource file_io,
                   struct PP_FileInfo* info,
                   struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9890444 "Touch"
	public explicit_type "int32_t (*)(PP_Resource file_io, PP_Time last_access_time, PP_Time last_modified_time, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  int32_t (*${name})(PP_Resource file_io,
                   PP_Time last_access_time,
                   PP_Time last_modified_time,
                   struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9890572 "Read"
	public explicit_type "int32_t (*)(PP_Resource file_io, int64_t offset, char* buffer, int32_t bytes_to_read, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  int32_t (*${name})(PP_Resource file_io,
                  int64_t offset,
                  char* buffer,
                  int32_t bytes_to_read,
                  struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9890700 "Write"
	public explicit_type "int32_t (*)(PP_Resource file_io, int64_t offset, const char* buffer, int32_t bytes_to_write, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  int32_t (*${name})(PP_Resource file_io,
                   int64_t offset,
                   const char* buffer,
                   int32_t bytes_to_write,
                   struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9890828 "SetLength"
	public explicit_type "int32_t (*)(PP_Resource file_io, int64_t length, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  int32_t (*${name})(PP_Resource file_io,
                       int64_t length,
                       struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9890956 "Flush"
	public explicit_type "int32_t (*)(PP_Resource file_io, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  int32_t (*${name})(PP_Resource file_io, struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9891084 "Close"
	public explicit_type "void (*)(PP_Resource file_io)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource file_io)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2743820 "PPB_FileRef_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the API to create a file reference or \"weak pointer\" to a
 * file in a file system.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_FileRef</code> struct represents a \"weak pointer\" to a file in
 * a file system.  This struct contains a <code>PP_FileSystemType</code>
 * identifier and a file path string."
      attribute 9891212 "Create"
	public explicit_type "/** * Create() creates a weak pointer to a file in the given file system. File * paths are POSIX style. * * @param[in] resource A <code>PP_Resource</code> corresponding to a file * system. * @param[in] path A path to the file. * * @return A <code>PP_Resource</code> corresponding to a file reference if * successful or 0 if the path is malformed. */ PP_Resource (*)(PP_Resource file_system, const char* path)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Create() creates a weak pointer to a file in the given file system. File
   * paths are POSIX style.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to a file
   * system.
   * @param[in] path A path to the file.
   *
   * @return A <code>PP_Resource</code> corresponding to a file reference if
   * successful or 0 if the path is malformed.
   */
  PP_Resource (*${name})(PP_Resource file_system, const char* path)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9891340 "IsFileRef"
	public explicit_type "/** * IsFileRef() determines if the provided resource is a file reference. * * @param[in] resource A <code>PP_Resource</code> corresponding to a file * reference. * * @return <code>PP_TRUE</code> if the resource is a * <code>PPB_FileRef</code>, <code>PP_FALSE</code> if the resource is * invalid or some type other than <code>PPB_FileRef</code>. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsFileRef() determines if the provided resource is a file reference.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to a file
   * reference.
   *
   * @return <code>PP_TRUE</code> if the resource is a
   * <code>PPB_FileRef</code>, <code>PP_FALSE</code> if the resource is
   * invalid or some type other than <code>PPB_FileRef</code>.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9891468 "GetFileSystemType"
	public explicit_type "/** * GetFileSystemType() returns the type of the file system. * * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file * reference. * * @return A <code>PP_FileSystemType</code> with the file system type if * valid or <code>PP_FILESYSTEMTYPE_INVALID</code> if the provided resource * is not a valid file reference. */ PP_FileSystemType (*)(PP_Resource file_ref)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetFileSystemType() returns the type of the file system.
   *
   * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file
   * reference.
   *
   * @return A <code>PP_FileSystemType</code> with the file system type if
   * valid or <code>PP_FILESYSTEMTYPE_INVALID</code> if the provided resource
   * is not a valid file reference.
   */
  PP_FileSystemType (*${name})(PP_Resource file_ref)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9891596 "GetName"
	public explicit_type "PP_Var (*)(PP_Resource file_ref)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Var (*${name})(PP_Resource file_ref)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9891724 "GetPath"
	public explicit_type "PP_Var (*)(PP_Resource file_ref)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Var (*${name})(PP_Resource file_ref)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9891852 "GetParent"
	public explicit_type "/** * GetParent() returns the parent directory of this file. If * <code>file_ref</code> points to the root of the filesystem, then the root * is returned. * * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file * reference. * * @return A <code>PP_Resource</code> containing the parent directory of the * file. This function fails if the file system type is * <code>PP_FileSystemType_External</code>. */ PP_Resource (*)(PP_Resource file_ref)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetParent() returns the parent directory of this file.  If
   * <code>file_ref</code> points to the root of the filesystem, then the root
   * is returned.
   *
   * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file
   * reference.
   *
   * @return A <code>PP_Resource</code> containing the parent directory of the
   * file. This function fails if the file system type is
   * <code>PP_FileSystemType_External</code>.
   */
  PP_Resource (*${name})(PP_Resource file_ref)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9891980 "MakeDirectory"
	public explicit_type "/** * MakeDirectory() makes a new directory in the file system as well as any * parent directories if the <code>make_ancestors</code> argument is * <code>PP_TRUE</code>. It is not valid to make a directory in the external * file system. * * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file * reference. * @param[in] make_ancestors A <code>PP_Bool</code> set to * <code>PP_TRUE</code> to make ancestor directories or <code>PP_FALSE</code> * if ancestor directories are not needed. * * @return An int32_t containing an error code from <code>pp_errors.h</code>. * Fails if the directory already exists or if ancestor directories do not * exist and <code>make_ancestors</code> was not passed as * <code>PP_TRUE</code>. */ int32_t (*)(PP_Resource directory_ref, PP_Bool make_ancestors, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * MakeDirectory() makes a new directory in the file system as well as any
   * parent directories if the <code>make_ancestors</code> argument is
   * <code>PP_TRUE</code>.  It is not valid to make a directory in the external
   * file system.
   *
   * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file
   * reference.
   * @param[in] make_ancestors A <code>PP_Bool</code> set to
   * <code>PP_TRUE</code> to make ancestor directories or <code>PP_FALSE</code>
   * if ancestor directories are not needed.
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   * Fails if the directory already exists or if ancestor directories do not
   * exist and <code>make_ancestors</code> was not passed as
   * <code>PP_TRUE</code>.
   */
  int32_t (*${name})(PP_Resource directory_ref,
                           PP_Bool make_ancestors,
                           struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9892108 "Touch"
	public explicit_type "/** * Touch() Updates time stamps for a file. You must have write access to the * file if it exists in the external filesystem. * * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file * reference. * @param[in] last_access_time The last time the file was accessed. * @param[in] last_modified_time The last time the file was modified. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of Touch(). * * @return An int32_t containing an error code from <code>pp_errors.h</code>. */ int32_t (*)(PP_Resource file_ref, PP_Time last_access_time, PP_Time last_modified_time, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Touch() Updates time stamps for a file.  You must have write access to the
   * file if it exists in the external filesystem.
   *
   * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file
   * reference.
   * @param[in] last_access_time The last time the file was accessed.
   * @param[in] last_modified_time The last time the file was modified.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of Touch().
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   */
  int32_t (*${name})(PP_Resource file_ref,
                   PP_Time last_access_time,
                   PP_Time last_modified_time,
                   struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9892236 "Delete"
	public explicit_type "/** * Delete() deletes a file or directory. If <code>file_ref</code> refers to * a directory, then the directory must be empty. It is an error to delete a * file or directory that is in use. It is not valid to delete a file in * the external file system. * * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file * reference. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of Delete(). * * @return An int32_t containing an error code from <code>pp_errors.h</code>. */ int32_t (*)(PP_Resource file_ref, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Delete() deletes a file or directory. If <code>file_ref</code> refers to
   * a directory, then the directory must be empty. It is an error to delete a
   * file or directory that is in use.  It is not valid to delete a file in
   * the external file system.
   *
   * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file
   * reference.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of Delete().
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   */
  int32_t (*${name})(PP_Resource file_ref,
                    struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9892364 "Rename"
	public explicit_type "/** * Rename() renames a file or directory. Arguments <code>file_ref</code> and * <code>new_file_ref</code> must both refer to files in the same file * system. It is an error to rename a file or directory that is in use. It * is not valid to rename a file in the external file system. * * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file * reference. * @param[in] new_file_ref A <code>PP_Resource</code> corresponding to a new * file reference. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of Rename(). * * @return An int32_t containing an error code from <code>pp_errors.h</code>. */ int32_t (*)(PP_Resource file_ref, PP_Resource new_file_ref, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Rename() renames a file or directory.  Arguments <code>file_ref</code> and
   * <code>new_file_ref</code> must both refer to files in the same file
   * system. It is an error to rename a file or directory that is in use.  It
   * is not valid to rename a file in the external file system.
   *
   * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file
   * reference.
   * @param[in] new_file_ref A <code>PP_Resource</code> corresponding to a new
   * file reference.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of Rename().
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   */
  int32_t (*${name})(PP_Resource file_ref,
                    PP_Resource new_file_ref,
                    struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2743948 "PPB_FileRef"
      visibility package stereotype "typedef" base_type class_ref 2743820 // PPB_FileRef_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5189388 // <dependency>
	relation 5189260 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5189388 // <dependency>
	  b parent class_ref 2743820 // PPB_FileRef_1_0
      end
    end

    class 2744076 "PPB_FileSystem_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the API to create a file system associated with a file.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_FileSystem</code> struct identifies the file system type
 * associated with a file."
      attribute 9892492 "Create"
	public explicit_type "/** Create() creates a file system object of the given type. * * @param[in] instance A <code>PP_Instance</code> identifying the instance * with the file. * @param[in] type A file system type as defined by * <code>PP_FileSystemType</code> enum. * * @return A <code>PP_Resource</code> corresponding to a file system if * successful. */ PP_Resource (*)(PP_Instance instance, PP_FileSystemType type)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /** Create() creates a file system object of the given type.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying the instance
   * with the file.
   * @param[in] type A file system type as defined by
   * <code>PP_FileSystemType</code> enum.
   *
   * @return A <code>PP_Resource</code> corresponding to a file system if
   * successful.
   */
  PP_Resource (*${name})(PP_Instance instance, PP_FileSystemType type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9892620 "IsFileSystem"
	public explicit_type "/** * IsFileSystem() determines if the provided resource is a file system. * * @param[in] resource A <code>PP_Resource</code> corresponding to a file * system. * * @return <code>PP_TRUE</code> if the resource is a * <code>PPB_FileSystem</code>, <code>PP_FALSE</code> if the resource is * invalid or some type other than <code>PPB_FileSystem</code>. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsFileSystem() determines if the provided resource is a file system.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to a file
   * system.
   *
   * @return <code>PP_TRUE</code> if the resource is a
   * <code>PPB_FileSystem</code>, <code>PP_FALSE</code> if the resource is
   * invalid or some type other than <code>PPB_FileSystem</code>.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9892748 "Open"
	public explicit_type "/** * Open() opens the file system. A file system must be opened before running * any other operation on it. * * @param[in] file_system A <code>PP_Resource</code> corresponding to a file * system. * * @param[in] expected_size The expected size of the file system. Note that * this does not request quota; to do that, you must either invoke * requestQuota from JavaScript: * http://www.html5rocks.com/en/tutorials/file/filesystem/#toc-requesting-quota * or set the unlimitedStorage permission for Chrome Web Store apps: * http://code.google.com/chrome/extensions/manifest.html#permissions * * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion of Open(). * * @return An int32_t containing an error code from <code>pp_errors.h</code>. */ int32_t (*)(PP_Resource file_system, int64_t expected_size, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Open() opens the file system. A file system must be opened before running
   * any other operation on it.
   *
   * @param[in] file_system A <code>PP_Resource</code> corresponding to a file
   * system.
   *
   * @param[in] expected_size The expected size of the file system. Note that
   * this does not request quota; to do that, you must either invoke
   * requestQuota from JavaScript:


    * http://www.html5rocks.com/en/tutorials/file/filesystem/#toc-requesting-quota
   * or set the unlimitedStorage permission for Chrome Web Store apps:
   * http://code.google.com/chrome/extensions/manifest.html#permissions
   *
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion of Open().
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   */
  int32_t (*${name})(PP_Resource file_system,
                  int64_t expected_size,
                  struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9892876 "GetType"
	public explicit_type "/** * GetType() returns the type of the provided file system. * * @param[in] file_system A <code>PP_Resource</code> corresponding to a file * system. * * @return A <code>PP_FileSystemType</code> with the file system type if * valid or <code>PP_FILESYSTEMTYPE_INVALID</code> if the provided resource * is not a valid file system. It is valid to call this function even before * Open() completes. */ PP_FileSystemType (*)(PP_Resource file_system)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetType() returns the type of the provided file system.
   *
   * @param[in] file_system A <code>PP_Resource</code> corresponding to a file
   * system.
   *
   * @return A <code>PP_FileSystemType</code> with the file system type if
   * valid or <code>PP_FILESYSTEMTYPE_INVALID</code> if the provided resource
   * is not a valid file system. It is valid to call this function even before
   * Open() completes.
   */
  PP_FileSystemType (*${name})(PP_Resource file_system)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2744204 "PPB_FileSystem"
      visibility package stereotype "typedef" base_type class_ref 2744076 // PPB_FileSystem_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5189516 // <dependency>
	relation 5189388 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5189516 // <dependency>
	  b parent class_ref 2744076 // PPB_FileSystem_1_0
      end
    end

    class 2744332 "PPB_Fullscreen_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_Fullscreen</code> interface for
 * handling transitions of a module instance to and from fullscreen mode.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_Fullscreen</code> interface is implemented by the browser.
 * This interface provides a way of checking the current screen mode and
 * toggling fullscreen mode."
      attribute 9893004 "IsFullscreen"
	public explicit_type "/** * IsFullscreen() checks whether the module instance is currently in * fullscreen mode. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * * @return <code>PP_TRUE</code> if the module instance is in fullscreen mode, * <code>PP_FALSE</code> if the module instance is not in fullscreen mode. */ PP_Bool (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * IsFullscreen() checks whether the module instance is currently in
   * fullscreen mode.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   *
   * @return <code>PP_TRUE</code> if the module instance is in fullscreen mode,
   * <code>PP_FALSE</code> if the module instance is not in fullscreen mode.
   */
  PP_Bool (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9893132 "SetFullscreen"
	public explicit_type "/** * SetFullscreen() switches the module instance to and from fullscreen * mode. * * The transition to and from fullscreen mode is asynchronous. During the * transition, IsFullscreen() will return the previous value and * no 2D or 3D device can be bound. The transition ends at DidChangeView() * when IsFullscreen() returns the new value. You might receive other * DidChangeView() calls while in transition. * * The transition to fullscreen mode can only occur while the browser is * processing a user gesture, even if <code>PP_TRUE</code> is returned. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * @param[in] fullscreen <code>PP_TRUE</code> to enter fullscreen mode, or * <code>PP_FALSE</code> to exit fullscreen mode. * * @return <code>PP_TRUE</code> on success or <code>PP_FALSE</code> on * failure. */ PP_Bool (*)(PP_Instance instance, PP_Bool fullscreen)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * SetFullscreen() switches the module instance to and from fullscreen
   * mode.
   *
   * The transition to and from fullscreen mode is asynchronous. During the
   * transition, IsFullscreen() will return the previous value and
   * no 2D or 3D device can be bound. The transition ends at DidChangeView()
   * when IsFullscreen() returns the new value. You might receive other
   * DidChangeView() calls while in transition.
   *
   * The transition to fullscreen mode can only occur while the browser is
   * processing a user gesture, even if <code>PP_TRUE</code> is returned.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   * @param[in] fullscreen <code>PP_TRUE</code> to enter fullscreen mode, or
   * <code>PP_FALSE</code> to exit fullscreen mode.
   *
   * @return <code>PP_TRUE</code> on success or <code>PP_FALSE</code> on
   * failure.
   */
  PP_Bool (*${name})(PP_Instance instance, PP_Bool fullscreen)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9893260 "GetScreenSize"
	public explicit_type "/** * GetScreenSize() gets the size of the screen in pixels. The module instance * will be resized to this size when SetFullscreen() is called to enter * fullscreen mode. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * @param[out] size The size of the entire screen in pixels. * * @return <code>PP_TRUE</code> on success or <code>PP_FALSE</code> on * failure. */ PP_Bool (*)(PP_Instance instance, struct PP_Size* size)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetScreenSize() gets the size of the screen in pixels. The module instance
   * will be resized to this size when SetFullscreen() is called to enter
   * fullscreen mode.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   * @param[out] size The size of the entire screen in pixels.
   *
   * @return <code>PP_TRUE</code> on success or <code>PP_FALSE</code> on
   * failure.
   */
  PP_Bool (*${name})(PP_Instance instance, struct PP_Size* size)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2744460 "PPB_Fullscreen"
      visibility package stereotype "typedef" base_type class_ref 2744332 // PPB_Fullscreen_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5189644 // <dependency>
	relation 5189516 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5189644 // <dependency>
	  b parent class_ref 2744332 // PPB_Fullscreen_1_0
      end
    end

    class 2744588 "PP_GamepadSampleData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_Gamepad</code> interface, which
 * provides access to gamepad devices.
 
*
 * @addtogroup Structs
 * @{
 
*
 * The data for one gamepad device."
      classrelation 5189772 // axes_length (<directional composition>)
	relation 5189644 *-->
	  a role_name "axes_length" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5189772 // axes_length (<directional composition>)
	  b parent class_ref 2345996 // uint32_t
      end

      attribute 9893388 "axes"
	public explicit_type "float"
	multiplicity "[16]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5189900 // buttons_length (<directional composition>)
	relation 5189772 *-->
	  a role_name "buttons_length" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5189900 // buttons_length (<directional composition>)
	  b parent class_ref 2345996 // uint32_t
      end

      attribute 9893516 "buttons"
	public explicit_type "float"
	multiplicity "[32]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9893644 "timestamp"
	public explicit_type "double"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5190028 // id (<directional composition>)
	relation 5189900 *-->
	  a role_name "id" multiplicity "[128]" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5190028 // id (<directional composition>)
	  b parent class_ref 2347788 // uint16_t
      end

      classrelation 5190156 // connected (<directional composition>)
	relation 5190028 *-->
	  a role_name "connected" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5190156 // connected (<directional composition>)
	  b parent class_ref 2738188 // PP_Bool
      end

      attribute 9893772 "unused_pad_"
	public explicit_type "char"
	multiplicity "[4]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2744716 "PP_GamepadsSampleData"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The data for all gamepads connected to the system."
      classrelation 5190284 // length (<directional composition>)
	relation 5190156 *-->
	  a role_name "length" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5190284 // length (<directional composition>)
	  b parent class_ref 2345996 // uint32_t
      end

      attribute 9893900 "unused_pad_"
	public explicit_type "char"
	multiplicity "[4]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${multiplicity}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5190412 // items (<directional composition>)
	relation 5190284 *-->
	  a role_name "items" multiplicity "[4]" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${multiplicity}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5190412 // items (<directional composition>)
	  b parent class_ref 2744588 // PP_GamepadSampleData
      end
    end

    class 2744844 "PPB_Gamepad_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_Gamepad</code> interface allows retrieving data from
 * gamepad/joystick devices that are connected to the system."
      attribute 9894028 "Sample"
	public explicit_type "/** * Samples the current state of the connected gamepads. */ void (*)(PP_Instance instance, struct PP_GamepadsSampleData* data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Samples the current state of the connected gamepads.
   */
  void (*${name})(PP_Instance instance, struct PP_GamepadsSampleData* data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2744972 "PPB_Gamepad"
      visibility package stereotype "typedef" base_type class_ref 2744844 // PPB_Gamepad_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5190540 // <dependency>
	relation 5190412 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5190540 // <dependency>
	  b parent class_ref 2744844 // PPB_Gamepad_1_0
      end
    end

    class 2745100 "PPB_Graphics2D_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * Defines the <code>PPB_Graphics2D</code> struct representing a 2D graphics
 * context within the browser.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * <code>PPB_Graphics2D</code> defines the interface for a 2D graphics context."
      attribute 9894156 "Create"
	public explicit_type "/** * Create() creates a 2D graphics context. The returned graphics context will * not be bound to the module instance on creation (call BindGraphics() on * the module instance to bind the returned graphics context to the module * instance). * * @param[in] instance The module instance. * @param[in] size The size of the graphic context. * @param[in] is_always_opaque Set the <code>is_always_opaque</code> flag to * <code>PP_TRUE</code> if you know that you will be painting only opaque * data to this context. This option will disable blending when compositing * the module with the web page, which might give higher performance on some * computers. * * If you set <code>is_always_opaque</code>, your alpha channel should always * be set to 0xFF or there may be painting artifacts. The alpha values * overwrite the destination alpha values without blending when * <code>is_always_opaque</code> is true. * * @return A <code>PP_Resource</code> containing the 2D graphics context if * successful or 0 if unsuccessful. */ PP_Resource (*)(PP_Instance instance, const struct PP_Size* size, PP_Bool is_always_opaque)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Create() creates a 2D graphics context. The returned graphics context will
   * not be bound to the module instance on creation (call BindGraphics() on
   * the module instance to bind the returned graphics context to the module
   * instance).
   *
   * @param[in] instance The module instance.
   * @param[in] size The size of the graphic context.
   * @param[in] is_always_opaque Set the <code>is_always_opaque</code> flag to
   * <code>PP_TRUE</code> if you know that you will be painting only opaque
   * data to this context. This option will disable blending when compositing
   * the module with the web page, which might give higher performance on some
   * computers.
   *
   * If you set <code>is_always_opaque</code>, your alpha channel should always
   * be set to 0xFF or there may be painting artifacts. The alpha values
   * overwrite the destination alpha values without blending when
   * <code>is_always_opaque</code> is true.
   *
   * @return A <code>PP_Resource</code> containing the 2D graphics context if
   * successful or 0 if unsuccessful.
   */
  PP_Resource (*${name})(PP_Instance instance,
                        const struct PP_Size* size,
                        PP_Bool is_always_opaque)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9894284 "IsGraphics2D"
	public explicit_type "/** * IsGraphics2D() determines if the given resource is a valid * <code>Graphics2D</code>. * * @param[in] resource A <code>Graphics2D</code> context resource. * * @return PP_TRUE if the given resource is a valid <code>Graphics2D</code>, * <code>PP_FALSE</code> if it is an invalid resource or is a resource of * another type. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsGraphics2D() determines if the given resource is a valid
   * <code>Graphics2D</code>.
   *
   * @param[in] resource A <code>Graphics2D</code> context resource.
   *
   * @return PP_TRUE if the given resource is a valid <code>Graphics2D</code>,
   * <code>PP_FALSE</code> if it is an invalid resource or is a resource of
   * another type.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5190668 // Describe (<unidirectional association>)
	relation 5190540 --->
	  stereotype "PP_Bool(*${name})(PP_Resource graphics_2d,struct PP_Size*size,${type}*is_always_opqaue)"
	  a role_name "Describe" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5190668 // Describe (<unidirectional association>)
	  b parent class_ref 2738188 // PP_Bool
      end

      attribute 9894412 "PaintImageData"
	public explicit_type "/** * PaintImageData() enqueues a paint of the given image into the context. * This function has no effect until you call Flush() As a result, what * counts is the contents of the bitmap when you call Flush(), not when * you call this function. * * The provided image will be placed at <code>top_left</code> from the top * left of the context's internal backing store. Then the pixels contained * in <code>src_rect</code> will be copied into the backing store. This * means that the rectangle being painted will be at <code>src_rect</code> * offset by <code>top_left</code>. * * The <code>src_rect</code> is specified in the coordinate system of the * image being painted, not the context. For the common case of copying the * entire image, you may specify an empty <code>src_rect</code>. * * The painted area of the source bitmap must fall entirely within the * context. Attempting to paint outside of the context will result in an * error. However, the source bitmap may fall outside the context, as long * as the <code>src_rect</code> subset of it falls entirely within the * context. * * There are two methods most modules will use for painting. The first * method is to generate a new <code>ImageData</code> and then paint it. In * this case, you'll set the location of your painting to * <code>top_left</code> and set <code>src_rect</code> to <code>NULL</code>. * The second is that you're generating small invalid regions out of a larger * bitmap representing your entire instance. In this case, you would set the * location of your image to (0,0) and then set <code>src_rect</code> to the * pixels you changed. * * @param[in] resource The 2D Graphics resource. * @param[in] image The <code>ImageData</code> to be painted. * @param[in] top_left A <code>Point</code> representing the * <code>top_left</code> location where the <code>ImageData</code> will be * painted. * @param[in] src_rect The rectangular area where the <code>ImageData</code> * will be painted. */ void (*)(PP_Resource graphics_2d, PP_Resource image_data, const struct PP_Point* top_left, const struct PP_Rect* src_rect)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * PaintImageData() enqueues a paint of the given image into the context.
   * This function has no effect until you call Flush() As a result, what
   * counts is the contents of the bitmap when you call Flush(), not when
   * you call this function.
   *
   * The provided image will be placed at <code>top_left</code> from the top
   *  left of the context's internal backing store. Then the pixels contained
   * in <code>src_rect</code> will be copied into the backing store. This
   * means that the rectangle being painted will be at <code>src_rect</code>
   * offset by <code>top_left</code>.
   *
   * The <code>src_rect</code> is specified in the coordinate system of the
   * image being painted, not the context. For the common case of copying the
   * entire image, you may specify an empty <code>src_rect</code>.
   *
   * The painted area of the source bitmap must fall entirely within the
   * context. Attempting to paint outside of the context will result in an
   * error. However, the source bitmap may fall outside the context, as long
   * as the <code>src_rect</code> subset of it falls entirely within the
   * context.
   *
   * There are two methods most modules will use for painting. The first
   * method is to generate a new <code>ImageData</code> and then paint it. In
   * this case, you'll set the location of your painting to
   * <code>top_left</code> and set <code>src_rect</code> to <code>NULL</code>.
   * The second is that you're generating small invalid regions out of a larger
   * bitmap representing your entire instance. In this case, you would set the
   * location of your image to (0,0) and then set <code>src_rect</code> to the
   * pixels you changed.
   *
   * @param[in] resource The 2D Graphics resource.
   * @param[in] image The <code>ImageData</code> to be painted.
   * @param[in] top_left A <code>Point</code> representing the
   * <code>top_left</code> location where the <code>ImageData</code> will be
   * painted.
   * @param[in] src_rect The rectangular area where the <code>ImageData</code>
   * will be painted.
   */
  void (*${name})(PP_Resource graphics_2d,
                         PP_Resource image_data,
                         const struct PP_Point* top_left,
                         const struct PP_Rect* src_rect)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9894540 "Scroll"
	public explicit_type "/** * Scroll() enqueues a scroll of the context's backing store. This * function has no effect until you call Flush(). The data within the * provided clipping rectangle will be shifted by (dx, dy) pixels. * * This function will result in some exposed region which will have undefined * contents. The module should call PaintImageData() on these exposed regions * to give the correct contents. * * The scroll can be larger than the area of the clipping rectangle, which * means the current image will be scrolled out of the rectangle. This * scenario is not an error but will result in a no-op. * * @param[in] graphics_2d The 2D Graphics resource. * @param[in] clip The clipping rectangle. * @param[in] amount The amount the area in the clipping rectangle will * shifted. */ void (*)(PP_Resource graphics_2d, const struct PP_Rect* clip_rect, const struct PP_Point* amount)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Scroll() enqueues a scroll of the context's backing store. This
   * function has no effect until you call Flush(). The data within the
   * provided clipping rectangle will be shifted by (dx, dy) pixels.
   *
   * This function will result in some exposed region which will have undefined
   * contents. The module should call PaintImageData() on these exposed regions
   * to give the correct contents.
   *
   * The scroll can be larger than the area of the clipping rectangle, which
   * means the current image will be scrolled out of the rectangle. This
   * scenario is not an error but will result in a no-op.
   *
   * @param[in] graphics_2d The 2D Graphics resource.
   * @param[in] clip The clipping rectangle.
   * @param[in] amount The amount the area in the clipping rectangle will
   * shifted.
   */
  void (*${name})(PP_Resource graphics_2d,
                 const struct PP_Rect* clip_rect,
                 const struct PP_Point* amount)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9894668 "ReplaceContents"
	public explicit_type "/** * ReplaceContents() provides a slightly more efficient way to paint the * entire module's image. Normally, calling PaintImageData() requires that * the browser copy the pixels out of the image and into the graphics * context's backing store. This function replaces the graphics context's * backing store with the given image, avoiding the copy. * * The new image must be the exact same size as this graphics context. If the * new image uses a different image format than the browser's native bitmap * format (use <code>PPB_ImageData.GetNativeImageDataFormat()</code> to * retrieve the format), then a conversion will be done inside the browser * which may slow the performance a little bit. * * <strong>Note:</strong> The new image will not be painted until you call * Flush(). * * After this call, you should take care to release your references to the * image. If you paint to the image after ReplaceContents(), there is the * possibility of significant painting artifacts because the page might use * partially-rendered data when copying out of the backing store. * * In the case of an animation, you will want to allocate a new image for the * next frame. It is best if you wait until the flush callback has executed * before allocating this bitmap. This gives the browser the option of * caching the previous backing store and handing it back to you (assuming * the sizes match). In the optimal case, this means no bitmaps are allocated * during the animation, and the backing store and \"front buffer\" (which the * plugin is painting into) are just being swapped back and forth. * * @param[in] graphics_2d The 2D Graphics resource. * @param[in] image The <code>ImageData</code> to be painted. */ void (*)(PP_Resource graphics_2d, PP_Resource image_data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * ReplaceContents() provides a slightly more efficient way to paint the
   * entire module's image. Normally, calling PaintImageData() requires that
   * the browser copy the pixels out of the image and into the graphics
   * context's backing store. This function replaces the graphics context's
   * backing store with the given image, avoiding the copy.
   *
   * The new image must be the exact same size as this graphics context. If the
   * new image uses a different image format than the browser's native bitmap
   * format (use <code>PPB_ImageData.GetNativeImageDataFormat()</code> to
   * retrieve the format), then a conversion will be done inside the browser
   * which may slow the performance a little bit.
   *
   * <strong>Note:</strong> The new image will not be painted until you call
   * Flush().
   *
   * After this call, you should take care to release your references to the
   * image. If you paint to the image after ReplaceContents(), there is the
   * possibility of significant painting artifacts because the page might use
   * partially-rendered data when copying out of the backing store.
   *
   * In the case of an animation, you will want to allocate a new image for the
   * next frame. It is best if you wait until the flush callback has executed
   * before allocating this bitmap. This gives the browser the option of
   * caching the previous backing store and handing it back to you (assuming
   * the sizes match). In the optimal case, this means no bitmaps are allocated
   * during the animation, and the backing store and \"front buffer\" (which the
   * plugin is painting into) are just being swapped back and forth.
   *
   * @param[in] graphics_2d The 2D Graphics resource.
   * @param[in] image The <code>ImageData</code> to be painted.
   */
  void (*${name})(PP_Resource graphics_2d, PP_Resource image_data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9894796 "Flush"
	public explicit_type "/** * Flush() flushes any enqueued paint, scroll, and replace commands to the * backing store. This function actually executes the updates, and causes a * repaint of the webpage, assuming this graphics context is bound to a module * instance. * * Flush() runs in asynchronous mode. Specify a callback function and the * argument for that callback function. The callback function will be * executed on the calling thread when the image has been painted to the * screen. While you are waiting for a flush callback, additional calls to * Flush() will fail. * * Because the callback is executed (or thread unblocked) only when the * instance's image is actually on the screen, this function provides * a way to rate limit animations. By waiting until the image is on the * screen before painting the next frame, you can ensure you're not * flushing 2D graphics faster than the screen can be updated. * * <strong>Unbound contexts</strong> * If the context is not bound to a module instance, you will * still get a callback. The callback will execute after Flush() returns * to avoid reentrancy. The callback will not wait until anything is * painted to the screen because there will be nothing on the screen. The * timing of this callback is not guaranteed and may be deprioritized by * the browser because it is not affecting the user experience. * * <strong>Off-screen instances</strong> * If the context is bound to an instance that is currently not visible (for * example, scrolled out of view) it will behave like the \"unbound context\" * case. * * <strong>Detaching a context</strong> * If you detach a context from a module instance, any pending flush * callbacks will be converted into the \"unbound context\" case. * * <strong>Released contexts</strong> * A callback may or may not get called even if you have released all * of your references to the context. This scenario can occur if there are * internal references to the context suggesting it has not been internally * destroyed (for example, if it is still bound to an instance) or due to * other implementation details. As a result, you should be careful to * check that flush callbacks are for the context you expect and that * you're capable of handling callbacks for unreferenced contexts. * * <strong>Shutdown</strong> * If a module instance is removed when a flush is pending, the * callback will not be executed. * * @param[in] graphics_2d The 2D Graphics resource. * @param[in] callback A <code>CompletionCallback</code> to be called when * the image has been painted on the screen. * * @return Returns <code>PP_OK</code> on success or * <code>PP_ERROR_BADRESOURCE</code> if the graphics context is invalid, * <code>PP_ERROR_BADARGUMENT</code> if the callback is null and flush is * being called from the main thread of the module, or * <code>PP_ERROR_INPROGRESS</code> if a flush is already pending that has * not issued its callback yet. In the failure case, nothing will be updated * and no callback will be scheduled. */ int32_t (*)(PP_Resource graphics_2d, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Flush() flushes any enqueued paint, scroll, and replace commands to the
   * backing store. This function actually executes the updates, and causes a
   * repaint of the webpage, assuming this graphics context is bound to a module
   * instance.
   *
   * Flush() runs in asynchronous mode. Specify a callback function and the
   * argument for that callback function. The callback function will be
   * executed on the calling thread when the image has been painted to the
   * screen. While you are waiting for a flush callback, additional calls to
   * Flush() will fail.
   *
   * Because the callback is executed (or thread unblocked) only when the
   * instance's image is actually on the screen, this function provides
   * a way to rate limit animations. By waiting until the image is on the
   * screen before painting the next frame, you can ensure you're not
   * flushing 2D graphics faster than the screen can be updated.
   *
   * <strong>Unbound contexts</strong>
   * If the context is not bound to a module instance, you will
   * still get a callback. The callback will execute after Flush() returns
   * to avoid reentrancy. The callback will not wait until anything is
   * painted to the screen because there will be nothing on the screen. The
   * timing of this callback is not guaranteed and may be deprioritized by
   * the browser because it is not affecting the user experience.
   *
   * <strong>Off-screen instances</strong>
   * If the context is bound to an instance that is currently not visible (for
   * example, scrolled out of view) it will behave like the \"unbound context\"
   * case.
   *
   * <strong>Detaching a context</strong>
   * If you detach a context from a module instance, any pending flush
   * callbacks will be converted into the \"unbound context\" case.
   *
   * <strong>Released contexts</strong>
   * A callback may or may not get called even if you have released all
   * of your references to the context. This scenario can occur if there are
   * internal references to the context suggesting it has not been internally
   * destroyed (for example, if it is still bound to an instance) or due to
   * other implementation details. As a result, you should be careful to
   * check that flush callbacks are for the context you expect and that
   * you're capable of handling callbacks for unreferenced contexts.
   *
   * <strong>Shutdown</strong>
   * If a module instance is removed when a flush is pending, the
   * callback will not be executed.
   *
   * @param[in] graphics_2d The 2D Graphics resource.
   * @param[in] callback A <code>CompletionCallback</code> to be called when
   * the image has been painted on the screen.
   *
   * @return Returns <code>PP_OK</code> on success or
   * <code>PP_ERROR_BADRESOURCE</code> if the graphics context is invalid,
   * <code>PP_ERROR_BADARGUMENT</code> if the callback is null and flush is
   * being called from the main thread of the module, or
   * <code>PP_ERROR_INPROGRESS</code> if a flush is already pending that has
   * not issued its callback yet.  In the failure case, nothing will be updated
   * and no callback will be scheduled.
   */
  int32_t (*${name})(PP_Resource graphics_2d,
                   struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2745228 "PPB_Graphics2D"
      visibility package stereotype "typedef" base_type class_ref 2745100 // PPB_Graphics2D_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5190796 // <dependency>
	relation 5190668 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5190796 // <dependency>
	  b parent class_ref 2745100 // PPB_Graphics2D_1_0
      end
    end

    class 2745356 "PPB_Graphics3D_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @addtogroup Interfaces
 * @{
 
*
 * <code>PPB_Graphics3D</code> defines the interface for a 3D graphics context.
 * <strong>Example usage from plugin code:</strong>
 *
 * <strong>Setup:</strong>
 * <code>
 * PP_Resource context;
 * int32_t attribs[] = {PP_GRAPHICS3DATTRIB_WIDTH, 800,
 *                      PP_GRAPHICS3DATTRIB_HEIGHT, 800,
 *                      PP_GRAPHICS3DATTRIB_NONE};
 * context = g3d->Create(instance, attribs, &context);
 * inst->BindGraphics(instance, context);
 * </code>
 *
 * <strong>Present one frame:</strong>
 * <code>
 * gles2->Clear(context, GL_COLOR_BUFFER);
 * g3d->SwapBuffers(context);
 * </code>
 *
 * <strong>Shutdown:</strong>
 * <code>
 * core->ReleaseResource(context);
 * </code>"
      classrelation 5190924 // GetAttribMaxValue (<unidirectional association>)
	relation 5190796 --->
	  stereotype "int32_t(*${name})(PP_Resource instance,int32_t attribute,${type}*value)"
	  a role_name "GetAttribMaxValue" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5190924 // GetAttribMaxValue (<unidirectional association>)
	  b parent class_ref 2409996 // int32_t
      end

      attribute 9894924 "Create"
	public explicit_type "/** * Create() creates and initializes a 3D rendering context. * The returned context is off-screen to start with. It must be attached to * a plugin instance using <code>PPB_Instance::BindGraphics</code> to draw * on the web page. * * @param[in] instance The module instance. * * @param[in] share_context The 3D context with which the created context * would share resources. If <code>share_context</code> is not 0, then all * shareable data, as defined by the client API (note that for OpenGL and * OpenGL ES, shareable data excludes texture objects named 0) will be shared * by <code>share_context<code>, all other contexts <code>share_context</code> * already shares with, and the newly created context. An arbitrary number of * <code>PPB_Graphics3D</code> can share data in this fashion. * * @param[out] attrib_list specifies a list of attributes for the context. * It is a list of attribute name-value pairs in which each attribute is * immediately followed by the corresponding desired value. The list is * terminated with <code>PP_GRAPHICS3DATTRIB_NONE</code>. * The <code>attrib_list<code> may be 0 or empty (first attribute is * <code>PP_GRAPHICS3DATTRIB_NONE</code>). If an attribute is not * specified in <code>attrib_list</code>, then the default value is used * (it is said to be specified implicitly). * Attributes for the context are chosen according to an attribute-specific * criteria. Attributes can be classified into two categories: * - AtLeast: The attribute value in the returned context meets or exceeds * the value specified in <code>attrib_list</code>. * - Exact: The attribute value in the returned context is equal to * the value specified in <code>attrib_list</code>. * * Attributes that can be specified in <code>attrib_list</code> include: * - <code>PP_GRAPHICS3DATTRIB_ALPHA_SIZE</code>: * Category: AtLeast Default: 0. * - <code>PP_GRAPHICS3DATTRIB_BLUE_SIZE</code>: * Category: AtLeast Default: 0. * - <code>PP_GRAPHICS3DATTRIB_GREEN_SIZE</code>: * Category: AtLeast Default: 0. * - <code>PP_GRAPHICS3DATTRIB_RED_SIZE</code>: * Category: AtLeast Default: 0. * - <code>PP_GRAPHICS3DATTRIB_DEPTH_SIZE</code>: * Category: AtLeast Default: 0. * - <code>PP_GRAPHICS3DATTRIB_STENCIL_SIZE</code>: * Category: AtLeast Default: 0. * - <code>PP_GRAPHICS3DATTRIB_SAMPLES</code>: * Category: AtLeast Default: 0. * - <code>PP_GRAPHICS3DATTRIB_SAMPLE_BUFFERS</code>: * Category: AtLeast Default: 0. * - <code>PP_GRAPHICS3DATTRIB_WIDTH</code>: * Category: Exact Default: 0. * - <code>PP_GRAPHICS3DATTRIB_HEIGHT</code>: * Category: Exact Default: 0. * - <code>PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR</code>: * Category: Exact Default: Implementation defined. * * @return A <code>PP_Resource</code> containing the 3D graphics context if * successful or 0 if unsuccessful. */ PP_Resource (*)(PP_Instance instance, PP_Resource share_context, const int32_t attrib_list[])"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Create() creates and initializes a 3D rendering context.
   * The returned context is off-screen to start with. It must be attached to
   * a plugin instance using <code>PPB_Instance::BindGraphics</code> to draw
   * on the web page.
   *
   * @param[in] instance The module instance.
   *
   * @param[in] share_context The 3D context with which the created context
   * would share resources. If <code>share_context</code> is not 0, then all
   * shareable data, as defined by the client API (note that for OpenGL and
   * OpenGL ES, shareable data excludes texture objects named 0) will be shared
   * by <code>share_context<code>, all other contexts <code>share_context</code>
   * already shares with, and the newly created context. An arbitrary number of
   * <code>PPB_Graphics3D</code> can share data in this fashion.
   *
   * @param[out] attrib_list specifies a list of attributes for the context.
   * It is a list of attribute name-value pairs in which each attribute is
   * immediately followed by the corresponding desired value. The list is
   * terminated with <code>PP_GRAPHICS3DATTRIB_NONE</code>.
   * The <code>attrib_list<code> may be 0 or empty (first attribute is
   * <code>PP_GRAPHICS3DATTRIB_NONE</code>). If an attribute is not
   * specified in <code>attrib_list</code>, then the default value is used
   * (it is said to be specified implicitly).
   * Attributes for the context are chosen according to an attribute-specific
   * criteria. Attributes can be classified into two categories:
   * - AtLeast: The attribute value in the returned context meets or exceeds
   *            the value specified in <code>attrib_list</code>.
   * - Exact: The attribute value in the returned context is equal to
   *          the value specified in <code>attrib_list</code>.
   *
   * Attributes that can be specified in <code>attrib_list</code> include:
   * - <code>PP_GRAPHICS3DATTRIB_ALPHA_SIZE</code>:
   *   Category: AtLeast Default: 0.
   * - <code>PP_GRAPHICS3DATTRIB_BLUE_SIZE</code>:
   *   Category: AtLeast Default: 0.
   * - <code>PP_GRAPHICS3DATTRIB_GREEN_SIZE</code>:
   *   Category: AtLeast Default: 0.
   * - <code>PP_GRAPHICS3DATTRIB_RED_SIZE</code>:
   *   Category: AtLeast Default: 0.
   * - <code>PP_GRAPHICS3DATTRIB_DEPTH_SIZE</code>:
   *   Category: AtLeast Default: 0.
   * - <code>PP_GRAPHICS3DATTRIB_STENCIL_SIZE</code>:
   *   Category: AtLeast Default: 0.
   * - <code>PP_GRAPHICS3DATTRIB_SAMPLES</code>:
   *   Category: AtLeast Default: 0.
   * - <code>PP_GRAPHICS3DATTRIB_SAMPLE_BUFFERS</code>:
   *   Category: AtLeast Default: 0.
   * - <code>PP_GRAPHICS3DATTRIB_WIDTH</code>:
   *   Category: Exact Default: 0.
   * - <code>PP_GRAPHICS3DATTRIB_HEIGHT</code>:
   *   Category: Exact Default: 0.
   * - <code>PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR</code>:
   *   Category: Exact Default: Implementation defined.
   *
   * @return A <code>PP_Resource</code> containing the 3D graphics context if
   * successful or 0 if unsuccessful.
   */
  PP_Resource (*${name})(PP_Instance instance,
                        PP_Resource share_context,
                        const int32_t attrib_list[])${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9895052 "IsGraphics3D"
	public explicit_type "/** * IsGraphics3D() determines if the given resource is a valid * <code>Graphics3D</code> context. * * @param[in] resource A <code>Graphics3D</code> context resource. * * @return PP_TRUE if the given resource is a valid <code>Graphics3D</code>, * <code>PP_FALSE</code> if it is an invalid resource or is a resource of * another type. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsGraphics3D() determines if the given resource is a valid
   * <code>Graphics3D</code> context.
   *
   * @param[in] resource A <code>Graphics3D</code> context resource.
   *
   * @return PP_TRUE if the given resource is a valid <code>Graphics3D</code>,
   * <code>PP_FALSE</code> if it is an invalid resource or is a resource of
   * another type.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9895180 "GetAttribs"
	public explicit_type "/** * GetAttribs() retrieves the value for each attribute in * <code>attrib_list</code>. * * @param[in] context The 3D graphics context. * @param[in,out] attrib_list The list of attributes that are queried. * <code>attrib_list</code> has the same structure as described for * <code>PPB_Graphics3D::Create</code>. It is both input and output * structure for this function. All attributes specified in * <code>PPB_Graphics3D::Create</code> can be queried for. * * @return Returns <code>PP_OK</code> on success or: * - <code>PP_ERROR_BADRESOURCE</code> if context is invalid * - <code>PP_ERROR_BADARGUMENT</code> if attrib_list is 0 or any attribute * in the <code>attrib_list</code> is not a valid attribute. * * <strong>Example usage:</strong> To get the values for rgb bits in the * color buffer, this function must be called as following: * <code> * int attrib_list[] = {PP_GRAPHICS3DATTRIB_RED_SIZE, 0, * PP_GRAPHICS3DATTRIB_GREEN_SIZE, 0, * PP_GRAPHICS3DATTRIB_BLUE_SIZE, 0, * PP_GRAPHICS3DATTRIB_NONE}; * GetAttribs(context, attrib_list); * int red_bits = attrib_list[1]; * int green_bits = attrib_list[3]; * int blue_bits = attrib_list[5]; * </code> */ int32_t (*)(PP_Resource context, int32_t attrib_list[])"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetAttribs() retrieves the value for each attribute in
   * <code>attrib_list</code>.
   *
   * @param[in] context The 3D graphics context.
   * @param[in,out] attrib_list The list of attributes that are queried.
   * <code>attrib_list</code> has the same structure as described for
   * <code>PPB_Graphics3D::Create</code>. It is both input and output
   * structure for this function. All attributes specified in
   * <code>PPB_Graphics3D::Create</code> can be queried for.
   *
   * @return Returns <code>PP_OK</code> on success or:
   * - <code>PP_ERROR_BADRESOURCE</code> if context is invalid
   * - <code>PP_ERROR_BADARGUMENT</code> if attrib_list is 0 or any attribute
   *   in the <code>attrib_list</code> is not a valid attribute.
   *
   * <strong>Example usage:</strong> To get the values for rgb bits in the
   * color buffer, this function must be called as following:
   * <code>
   * int attrib_list[] = {PP_GRAPHICS3DATTRIB_RED_SIZE, 0,
   *                      PP_GRAPHICS3DATTRIB_GREEN_SIZE, 0,
   *                      PP_GRAPHICS3DATTRIB_BLUE_SIZE, 0,
   *                      PP_GRAPHICS3DATTRIB_NONE};
   * GetAttribs(context, attrib_list);
   * int red_bits = attrib_list[1];
   * int green_bits = attrib_list[3];
   * int blue_bits = attrib_list[5];
   * </code>
   */
  int32_t (*${name})(PP_Resource context, int32_t attrib_list[])${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9895308 "SetAttribs"
	public explicit_type "/** * SetAttribs() sets the values for each attribute in * <code>attrib_list</code>. * * @param[in] context The 3D graphics context. * @param[in] attrib_list The list of attributes whose values need to be set. * <code>attrib_list</code> has the same structure as described for * <code>PPB_Graphics3D::Create</code>. * Attributes that can be specified are: * - <code>PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR</code> * * @return Returns <code>PP_OK</code> on success or: * - <code>PP_ERROR_BADRESOURCE</code> if <code>context</code> is invalid. * - <code>PP_ERROR_BADARGUMENT</code> if <code>attrib_list</code> is 0 or * any attribute in the <code>attrib_list</code> is not a valid attribute. */ int32_t (*)(PP_Resource context, const int32_t attrib_list[])"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * SetAttribs() sets the values for each attribute in
   * <code>attrib_list</code>.
   *
   * @param[in] context The 3D graphics context.
   * @param[in] attrib_list The list of attributes whose values need to be set.
   * <code>attrib_list</code> has the same structure as described for
   * <code>PPB_Graphics3D::Create</code>.
   * Attributes that can be specified are:
   * - <code>PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR</code>
   *
   * @return Returns <code>PP_OK</code> on success or:
   * - <code>PP_ERROR_BADRESOURCE</code> if <code>context</code> is invalid.
   * - <code>PP_ERROR_BADARGUMENT</code> if <code>attrib_list</code> is 0 or
   *   any attribute in the <code>attrib_list</code> is not a valid attribute.
   */
  int32_t (*${name})(PP_Resource context, const int32_t attrib_list[])${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9895436 "GetError"
	public explicit_type "/** * GetError() returns the current state of the given 3D context. * * The recoverable error conditions that have no side effect are * detected and returned immediately by all functions in this interface. * In addition the implementation may get into a fatal state while * processing a command. In this case the application must detroy the * context and reinitialize client API state and objects to continue * rendering. * * Note that the same error code is also returned in the SwapBuffers callback. * It is recommended to handle error in the SwapBuffers callback because * GetError is synchronous. This function may be useful in rare cases where * drawing a frame is expensive and you want to verify the result of * ResizeBuffers before attemptimg to draw a frame. * * @param[in] The 3D graphics context. * @return Returns: * - <code>PP_OK</code> if no error * - <code>PP_ERROR_NOMEMORY</code> * - <code>PP_ERROR_CONTEXT_LOST</code> */ int32_t (*)(PP_Resource context)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetError() returns the current state of the given 3D context.
   *
   * The recoverable error conditions that have no side effect are
   * detected and returned immediately by all functions in this interface.
   * In addition the implementation may get into a fatal state while
   * processing a command. In this case the application must detroy the
   * context and reinitialize client API state and objects to continue
   * rendering.
   *
   * Note that the same error code is also returned in the SwapBuffers callback.
   * It is recommended to handle error in the SwapBuffers callback because
   * GetError is synchronous. This function may be useful in rare cases where
   * drawing a frame is expensive and you want to verify the result of
   * ResizeBuffers before attemptimg to draw a frame.
   *
   * @param[in] The 3D graphics context.
   * @return Returns:
   * - <code>PP_OK</code> if no error
   * - <code>PP_ERROR_NOMEMORY</code>
   * - <code>PP_ERROR_CONTEXT_LOST</code>
   */
  int32_t (*${name})(PP_Resource context)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9895564 "ResizeBuffers"
	public explicit_type "/** * ResizeBuffers() resizes the backing surface for context. * * If the surface could not be resized due to insufficient resources, * <code>PP_ERROR_NOMEMORY</code> error is returned on the next * <code>SwapBuffers</code> callback. * * @param[in] context The 3D graphics context. * @param[in] width The width of the backing surface. * @param[in] height The height of the backing surface. * @return Returns <code>PP_OK</code> on success or: * - <code>PP_ERROR_BADRESOURCE</code> if context is invalid. * - <code>PP_ERROR_BADARGUMENT</code> if the value specified for * <code>width</code> or <code>height</code> is less than zero. */ int32_t (*)(PP_Resource context, int32_t width, int32_t height)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * ResizeBuffers() resizes the backing surface for context.
   *
   * If the surface could not be resized due to insufficient resources,
   * <code>PP_ERROR_NOMEMORY</code> error is returned on the next
   * <code>SwapBuffers</code> callback.
   *
   * @param[in] context The 3D graphics context.
   * @param[in] width The width of the backing surface.
   * @param[in] height The height of the backing surface.
   * @return Returns <code>PP_OK</code> on success or:
   * - <code>PP_ERROR_BADRESOURCE</code> if context is invalid.
   * - <code>PP_ERROR_BADARGUMENT</code> if the value specified for
   *   <code>width</code> or <code>height</code> is less than zero.
   */
  int32_t (*${name})(PP_Resource context, int32_t width, int32_t height)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9895692 "SwapBuffers"
	public explicit_type "/** * SwapBuffers() makes the contents of the color buffer available for * compositing. This function has no effect on off-screen surfaces - ones not * bound to any plugin instance. The contents of ancillary buffers are always * undefined after calling <code>SwapBuffers</code>. The contents of the color * buffer are undefined if the value of the * <code>PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR</code> attribute of context is not * <code>PP_GRAPHICS3DATTRIB_BUFFER_PRESERVED</code>. * * <code>SwapBuffers</code> runs in asynchronous mode. Specify a callback * function and the argument for that callback function. The callback function * will be executed on the calling thread after the color buffer has been * composited with rest of the html page. While you are waiting for a * SwapBuffers callback, additional calls to SwapBuffers will fail. * * Because the callback is executed (or thread unblocked) only when the * plugin's current state is actually on the screen, this function provides a * way to rate limit animations. By waiting until the image is on the screen * before painting the next frame, you can ensure you're not generating * updates faster than the screen can be updated. * * SwapBuffers performs an implicit flush operation on context. * If the context gets into an unrecoverable error condition while * processing a command, the error code will be returned as the argument * for the callback. The callback may return the following error codes: * - <code>PP_ERROR_NOMEMORY</code> * - <code>PP_ERROR_CONTEXT_LOST</code> * Note that the same error code may also be obtained by calling GetError. * * @param[in] context The 3D graphics context. * @param[in] callback The callback that will executed when * <code>SwapBuffers</code> completes. * * @return Returns PP_OK on success or: * - <code>PP_ERROR_BADRESOURCE</code> if context is invalid. * - <code>PP_ERROR_BADARGUMENT</code> if callback is invalid. * */ int32_t (*)(PP_Resource context, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * SwapBuffers() makes the contents of the color buffer available for
   * compositing. This function has no effect on off-screen surfaces - ones not
   * bound to any plugin instance. The contents of ancillary buffers are always
   * undefined after calling <code>SwapBuffers</code>. The contents of the color
   * buffer are undefined if the value of the
   * <code>PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR</code> attribute of context is not
   * <code>PP_GRAPHICS3DATTRIB_BUFFER_PRESERVED</code>.
   *
   * <code>SwapBuffers</code> runs in asynchronous mode. Specify a callback
   * function and the argument for that callback function. The callback function
   * will be executed on the calling thread after the color buffer has been
   * composited with rest of the html page. While you are waiting for a
   * SwapBuffers callback, additional calls to SwapBuffers will fail.
   *
   * Because the callback is executed (or thread unblocked) only when the
   * plugin's current state is actually on the screen, this function provides a
   * way to rate limit animations. By waiting until the image is on the screen
   * before painting the next frame, you can ensure you're not generating
   * updates faster than the screen can be updated.
   *
   * SwapBuffers performs an implicit flush operation on context.
   * If the context gets into an unrecoverable error condition while
   * processing a command, the error code will be returned as the argument
   * for the callback. The callback may return the following error codes:
   * - <code>PP_ERROR_NOMEMORY</code>
   * - <code>PP_ERROR_CONTEXT_LOST</code>
   * Note that the same error code may also be obtained by calling GetError.
   *
   * @param[in] context The 3D graphics context.
   * @param[in] callback The callback that will executed when
   * <code>SwapBuffers</code> completes.
   *
   * @return Returns PP_OK on success or:
   * - <code>PP_ERROR_BADRESOURCE</code> if context is invalid.
   * - <code>PP_ERROR_BADARGUMENT</code> if callback is invalid.
   *
   */
  int32_t (*${name})(PP_Resource context,
                         struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2745484 "PPB_Graphics3D"
      visibility package stereotype "typedef" base_type class_ref 2745356 // PPB_Graphics3D_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5191052 // <dependency>
	relation 5190924 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5191052 // <dependency>
	  b parent class_ref 2745356 // PPB_Graphics3D_1_0
      end
    end

    class 2745612 "PP_ImageDataFormat"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_ImageData</code> struct for determining how
 * a browser handles image data.
 
*
 * @addtogroup Enums
 * @{
 
*
 * <code>PP_ImageDataFormat</code> is an enumeration of the different types of
 * image data formats.
 *
 * The third part of each enumeration value describes the memory layout from
 * the lowest address to the highest. For example, BGRA means the B component
 * is stored in the lowest address, no matter what endianness the platform is
 * using.
 *
 * The PREMUL suffix implies pre-multiplied alpha is used. In this mode, the
 * red, green and blue color components of the pixel data supplied to an image
 * data should be pre-multiplied by their alpha value. For example: starting
 * with floating point color components, here is how to convert them to 8-bit
 * premultiplied components for image data:
 *
 * ...components of a pixel, floats ranging from 0 to 1...
 * <code>float red = 1.0f;</code>
 * <code>float green = 0.50f;</code>
 * <code>float blue = 0.0f;</code>
 * <code>float alpha = 0.75f;</code>
 * ...components for image data are 8-bit values ranging from 0 to 255...
 * <code>uint8_t image_data_red_premul = (uint8_t)(red * alpha * 255.0f);
 * </code>
 * <code>uint8_t image_data_green_premul = (uint8_t)(green * alpha * 255.0f);
 * </code>
 * <code>uint8_t image_data_blue_premul = (uint8_t)(blue * alpha * 255.0f);
 * </code>
 * <code>uint8_t image_data_alpha_premul = (uint8_t)(alpha * 255.0f);</code>
 *
 * <strong>Note:</strong> The resulting pre-multiplied red, green and blue
 * components should not be greater than the alpha value."
      attribute 9895820 "PP_IMAGEDATAFORMAT_BGRA_PREMUL"
	public type class_ref 2745612 // PP_ImageDataFormat
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9895948 "PP_IMAGEDATAFORMAT_RGBA_PREMUL"
	public type class_ref 2745612 // PP_ImageDataFormat
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2745740 "PP_ImageDataDesc"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Structs
 * @{
 
*
 * The <code>PP_ImageDataDesc</code> structure represents a description of
 * image data."
      classrelation 5191180 // format (<directional composition>)
	relation 5191052 *-->
	  a role_name "format" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5191180 // format (<directional composition>)
	  b parent class_ref 2745612 // PP_ImageDataFormat
      end

      classrelation 5191308 // size (<directional composition>)
	relation 5191180 *-->
	  a role_name "size" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}struct ${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5191308 // size (<directional composition>)
	  b parent class_ref 2740748 // PP_Size
      end

      classrelation 5191436 // stride (<directional composition>)
	relation 5191308 *-->
	  a role_name "stride" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5191436 // stride (<directional composition>)
	  b parent class_ref 2409996 // int32_t
      end
    end

    class 2745868 "PPB_ImageData_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_ImageData</code> interface contains pointers to several
 * functions for determining the browser's treatment of image data."
      attribute 9896076 "GetNativeImageDataFormat"
	public explicit_type "/** * GetNativeImageDataFormat() returns the browser's preferred format for * image data. The browser uses this format internally for painting. Other * formats may require internal conversions to paint or may have additional * restrictions depending on the function. * * @return A <code>PP_ImageDataFormat</code> containing the preferred format. */ PP_ImageDataFormat (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * GetNativeImageDataFormat() returns the browser's preferred format for
   * image data. The browser uses this format internally for painting. Other
   * formats may require internal conversions to paint or may have additional
   * restrictions depending on the function.
   *
   * @return A <code>PP_ImageDataFormat</code> containing the preferred format.
   */
  PP_ImageDataFormat (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9896204 "IsImageDataFormatSupported"
	public explicit_type "/** * IsImageDataFormatSupported() determines if the given image data format is * supported by the browser. Note: <code>PP_IMAGEDATAFORMAT_BGRA_PREMUL</code> * and <code>PP_IMAGEDATAFORMAT_RGBA_PREMUL</code> formats are always * supported. Other image formats do not make this guarantee, and should be * checked first with IsImageDataFormatSupported() before using. * * @param[in] format The image data format. * * @return A <code>PP_Bool</code> with <code>PP_TRUE</code> if the given * image data format is supported by the browser. */ PP_Bool (*)(PP_ImageDataFormat format)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsImageDataFormatSupported() determines if the given image data format is
   * supported by the browser. Note: <code>PP_IMAGEDATAFORMAT_BGRA_PREMUL</code>
   * and <code>PP_IMAGEDATAFORMAT_RGBA_PREMUL</code> formats are always
   * supported. Other image formats do not make this guarantee, and should be
   * checked first with IsImageDataFormatSupported() before using.
   *
   * @param[in] format The image data format.
   *
   * @return A <code>PP_Bool</code> with <code>PP_TRUE</code> if the given
   * image data format is supported by the browser.
   */
  PP_Bool (*${name})(PP_ImageDataFormat format)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9896332 "Create"
	public explicit_type "/** * Create() allocates an image data resource with the given format and size. * * For security reasons, if uninitialized, the bitmap will not contain random * memory, but may contain data from a previous image produced by the same * module if the bitmap was cached and re-used. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * @param[in] format The desired image data format. * @param[in] size A pointer to a <code>PP_Size</code> containing the image * size. * @param[in] init_to_zero A <code>PP_Bool</code> to determine transparency * at creation. * Set the <code>init_to_zero</code> flag if you want the bitmap initialized * to transparent during the creation process. If this flag is not set, the * current contents of the bitmap will be undefined, and the module should * be sure to set all the pixels. * * @return A <code>PP_Resource</code> with a nonzero ID on success or zero on * failure. Failure means the instance, image size, or format was invalid. */ PP_Resource (*)(PP_Instance instance, PP_ImageDataFormat format, const struct PP_Size* size, PP_Bool init_to_zero)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Create() allocates an image data resource with the given format and size.
   *
   * For security reasons, if uninitialized, the bitmap will not contain random
   * memory, but may contain data from a previous image produced by the same
   * module if the bitmap was cached and re-used.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   * @param[in] format The desired image data format.
   * @param[in] size A pointer to a <code>PP_Size</code> containing the image
   * size.
   * @param[in] init_to_zero A <code>PP_Bool</code> to determine transparency
   * at creation.
   * Set the <code>init_to_zero</code> flag if you want the bitmap initialized
   * to transparent during the creation process. If this flag is not set, the
   * current contents of the bitmap will be undefined, and the module should
   * be sure to set all the pixels.
   *
   * @return A <code>PP_Resource</code> with a nonzero ID on success or zero on
   * failure. Failure means the instance, image size, or format was invalid.
   */
  PP_Resource (*${name})(PP_Instance instance,
                        PP_ImageDataFormat format,
                        const struct PP_Size* size,
                        PP_Bool init_to_zero)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9896460 "IsImageData"
	public explicit_type "/** * IsImageData() determines if a given resource is image data. * * @param[in] image_data A <code>PP_Resource</code> corresponding to image * data. * * @return A <code>PP_Bool</code> with <code>PP_TRUE</code> if the given * resource is an image data or <code>PP_FALSE</code> if the resource is * invalid or some type other than image data. */ PP_Bool (*)(PP_Resource image_data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsImageData() determines if a given resource is image data.
   *
   * @param[in] image_data A <code>PP_Resource</code> corresponding to image
   * data.
   *
   * @return A <code>PP_Bool</code> with <code>PP_TRUE</code> if the given
   * resource is an image data or <code>PP_FALSE</code> if the resource is
   * invalid or some type other than image data.
   */
  PP_Bool (*${name})(PP_Resource image_data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9896588 "Describe"
	public explicit_type "/** * Describe() computes the description of the * image data. * * @param[in] image_data A <code>PP_Resource</code> corresponding to image * data. * @param[in,out] desc A pointer to a <code>PP_ImageDataDesc</code> * containing the description. * * @return A <code>PP_Bool</code> with <code>PP_TRUE</code> on success or * <code>PP_FALSE</code> if the resource is not an image data. On * <code>PP_FALSE</code>, the <code>desc</code> structure will be filled * with 0. */ PP_Bool (*)(PP_Resource image_data, struct PP_ImageDataDesc* desc)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Describe() computes the description of the
   * image data.
   *
   * @param[in] image_data A <code>PP_Resource</code> corresponding to image
   * data.
   * @param[in,out] desc A pointer to a <code>PP_ImageDataDesc</code>
   * containing the description.
   *
   * @return A <code>PP_Bool</code> with <code>PP_TRUE</code> on success or
   * <code>PP_FALSE</code> if the resource is not an image data. On
   * <code>PP_FALSE</code>, the <code>desc</code> structure will be filled
   * with 0.
   */
  PP_Bool (*${name})(PP_Resource image_data, struct PP_ImageDataDesc* desc)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9896716 "Map"
	public explicit_type "/** * Map() maps an image data into the module address space. * * @param[in] image_data A <code>PP_Resource</code> corresponding to image * data. * * @return A pointer to the beginning of the data. */ void* (*)(PP_Resource image_data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Map() maps an image data into the module address space.
   *
   * @param[in] image_data A <code>PP_Resource</code> corresponding to image
   * data.
   *
   * @return A pointer to the beginning of the data.
   */
  void* (*${name})(PP_Resource image_data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9896844 "Unmap"
	public explicit_type "/** * Unmap is a pointer to a function that unmaps an image data from the module * address space. * * @param[in] image_data A <code>PP_Resource</code> corresponding to image * data. */ void (*)(PP_Resource image_data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Unmap is a pointer to a function that unmaps an image data from the module
   * address space.
   *
   * @param[in] image_data A <code>PP_Resource</code> corresponding to image
   * data.
   */
  void (*${name})(PP_Resource image_data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2745996 "PPB_ImageData"
      visibility package stereotype "typedef" base_type class_ref 2745868 // PPB_ImageData_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5191564 // <dependency>
	relation 5191436 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5191564 // <dependency>
	  b parent class_ref 2745868 // PPB_ImageData_1_0
      end
    end

    class 2746124 "PP_InputEvent_Type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the Input Event interfaces.
 
*
 * @addtogroup Enums
 * @{
 
*
 * This enumeration contains the types of input events."
      attribute 9896972 "PP_INPUTEVENT_TYPE_UNDEFINED"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " -1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9897100 "PP_INPUTEVENT_TYPE_MOUSEDOWN"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9897228 "PP_INPUTEVENT_TYPE_MOUSEUP"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9897356 "PP_INPUTEVENT_TYPE_MOUSEMOVE"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9897484 "PP_INPUTEVENT_TYPE_MOUSEENTER"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9897612 "PP_INPUTEVENT_TYPE_MOUSELEAVE"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9897740 "PP_INPUTEVENT_TYPE_WHEEL"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9897868 "PP_INPUTEVENT_TYPE_RAWKEYDOWN"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9897996 "PP_INPUTEVENT_TYPE_KEYDOWN"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9898124 "PP_INPUTEVENT_TYPE_KEYUP"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9898252 "PP_INPUTEVENT_TYPE_CHAR"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 9"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9898380 "PP_INPUTEVENT_TYPE_CONTEXTMENU"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9898508 "PP_INPUTEVENT_TYPE_IME_COMPOSITION_START"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 11"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9898636 "PP_INPUTEVENT_TYPE_IME_COMPOSITION_UPDATE"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 12"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9898764 "PP_INPUTEVENT_TYPE_IME_COMPOSITION_END"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 13"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9898892 "PP_INPUTEVENT_TYPE_IME_TEXT"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 14"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9899020 "PP_INPUTEVENT_TYPE_TOUCHSTART"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 15"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9899148 "PP_INPUTEVENT_TYPE_TOUCHMOVE"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 16"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9899276 "PP_INPUTEVENT_TYPE_TOUCHEND"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 17"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9899404 "PP_INPUTEVENT_TYPE_TOUCHCANCEL"
	public type class_ref 2746124 // PP_InputEvent_Type
	init_value " 18
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2746252 "PP_InputEvent_Modifier"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * This enumeration contains event modifier constants. Each modifier is one
 * bit. Retrieve the modifiers from an input event using the GetEventModifiers
 * function on PPB_InputEvent."
      attribute 9899532 "PP_INPUTEVENT_MODIFIER_SHIFTKEY"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9899660 "PP_INPUTEVENT_MODIFIER_CONTROLKEY"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9899788 "PP_INPUTEVENT_MODIFIER_ALTKEY"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9899916 "PP_INPUTEVENT_MODIFIER_METAKEY"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9900044 "PP_INPUTEVENT_MODIFIER_ISKEYPAD"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9900172 "PP_INPUTEVENT_MODIFIER_ISAUTOREPEAT"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9900300 "PP_INPUTEVENT_MODIFIER_LEFTBUTTONDOWN"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9900428 "PP_INPUTEVENT_MODIFIER_MIDDLEBUTTONDOWN"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9900556 "PP_INPUTEVENT_MODIFIER_RIGHTBUTTONDOWN"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9900684 "PP_INPUTEVENT_MODIFIER_CAPSLOCKKEY"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 9"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9900812 "PP_INPUTEVENT_MODIFIER_NUMLOCKKEY"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9900940 "PP_INPUTEVENT_MODIFIER_ISLEFT"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 11"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9901068 "PP_INPUTEVENT_MODIFIER_ISRIGHT"
	public type class_ref 2746252 // PP_InputEvent_Modifier
	init_value " 1 << 12
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2746380 "PP_InputEvent_Class"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9901708 "PP_INPUTEVENT_CLASS_MOUSE"
	public type class_ref 2746380 // PP_InputEvent_Class
	init_value " 1 << 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9901836 "PP_INPUTEVENT_CLASS_KEYBOARD"
	public type class_ref 2746380 // PP_InputEvent_Class
	init_value " 1 << 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9901964 "PP_INPUTEVENT_CLASS_WHEEL"
	public type class_ref 2746380 // PP_InputEvent_Class
	init_value " 1 << 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9902092 "PP_INPUTEVENT_CLASS_TOUCH"
	public type class_ref 2746380 // PP_InputEvent_Class
	init_value " 1 << 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9902220 "PP_INPUTEVENT_CLASS_IME"
	public type class_ref 2746380 // PP_InputEvent_Class
	init_value " 1 << 4
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2746508 "PPB_InputEvent_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_InputEvent</code> interface contains pointers to several
 * functions related to generic input events on the browser."
      attribute 9902348 "RequestInputEvents"
	public explicit_type "/** * RequestInputEvent() requests that input events corresponding to the given * input events are delivered to the instance. * * It's recommended that you use RequestFilteringInputEvents() for keyboard * events instead of this function so that you don't interfere with normal * browser accelerators. * * By default, no input events are delivered. Call this function with the * classes of events you are interested in to have them be delivered to * the instance. Calling this function will override any previous setting for * each specified class of input events (for example, if you previously * called RequestFilteringInputEvents(), this function will set those events * to non-filtering mode). * * Input events may have high overhead, so you should only request input * events that your plugin will actually handle. For example, the browser may * do optimizations for scroll or touch events that can be processed * substantially faster if it knows there are no non-default receivers for * that message. Requesting that such messages be delivered, even if they are * processed very quickly, may have a noticeable effect on the performance of * the page. * * Note that synthetic mouse events will be generated from touch events if * (and only if) the you do not request touch events. * * When requesting input events through this function, the events will be * delivered and <i>not</i> bubbled to the page. This means that even if you * aren't interested in the message, no other parts of the page will get * a crack at the message. * * <strong>Example:</strong> * <code> * RequestInputEvents(instance, PP_INPUTEVENT_CLASS_MOUSE); * RequestFilteringInputEvents(instance, * PP_INPUTEVENT_CLASS_WHEEL | PP_INPUTEVENT_CLASS_KEYBOARD); * </code> * * @param instance The <code>PP_Instance</code> of the instance requesting * the given events. * * @param event_classes A combination of flags from * <code>PP_InputEvent_Class</code> that identifies the classes of events the * instance is requesting. The flags are combined by logically ORing their * values. * * @return <code>PP_OK</code> if the operation succeeded, * <code>PP_ERROR_BADARGUMENT</code> if instance is invalid, or * <code>PP_ERROR_NOTSUPPORTED</code> if one of the event class bits were * illegal. In the case of an invalid bit, all valid bits will be applied * and only the illegal bits will be ignored. The most common cause of a * <code>PP_ERROR_NOTSUPPORTED</code> return value is requesting keyboard * events, these must use RequestFilteringInputEvents(). */ int32_t (*)(PP_Instance instance, uint32_t event_classes)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * RequestInputEvent() requests that input events corresponding to the given
   * input events are delivered to the instance.
   *
   * It's recommended that you use RequestFilteringInputEvents() for keyboard
   * events instead of this function so that you don't interfere with normal
   * browser accelerators.
   *
   * By default, no input events are delivered. Call this function with the
   * classes of events you are interested in to have them be delivered to
   * the instance. Calling this function will override any previous setting for
   * each specified class of input events (for example, if you previously
   * called RequestFilteringInputEvents(), this function will set those events
   * to non-filtering mode).
   *
   * Input events may have high overhead, so you should only request input
   * events that your plugin will actually handle. For example, the browser may
   * do optimizations for scroll or touch events that can be processed
   * substantially faster if it knows there are no non-default receivers for
   * that message. Requesting that such messages be delivered, even if they are
   * processed very quickly, may have a noticeable effect on the performance of
   * the page.
   *
   * Note that synthetic mouse events will be generated from touch events if
   * (and only if) the you do not request touch events.
   *
   * When requesting input events through this function, the events will be
   * delivered and <i>not</i> bubbled to the page. This means that even if you
   * aren't interested in the message, no other parts of the page will get
   * a crack at the message.
   *
   * <strong>Example:</strong>
   * <code>
   *   RequestInputEvents(instance, PP_INPUTEVENT_CLASS_MOUSE);
   *   RequestFilteringInputEvents(instance,
   *       PP_INPUTEVENT_CLASS_WHEEL | PP_INPUTEVENT_CLASS_KEYBOARD);
   * </code>
   *
   * @param instance The <code>PP_Instance</code> of the instance requesting
   * the given events.
   *
   * @param event_classes A combination of flags from
   * <code>PP_InputEvent_Class</code> that identifies the classes of events the
   * instance is requesting. The flags are combined by logically ORing their
   * values.
   *
   * @return <code>PP_OK</code> if the operation succeeded,
   * <code>PP_ERROR_BADARGUMENT</code> if instance is invalid, or
   * <code>PP_ERROR_NOTSUPPORTED</code> if one of the event class bits were
   * illegal. In the case of an invalid bit, all valid bits will be applied
   * and only the illegal bits will be ignored. The most common cause of a
   * <code>PP_ERROR_NOTSUPPORTED</code> return value is requesting keyboard
   * events, these must use RequestFilteringInputEvents().
   */
  int32_t (*${name})(PP_Instance instance, uint32_t event_classes)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9902476 "RequestFilteringInputEvents"
	public explicit_type "/** * RequestFilteringInputEvents() requests that input events corresponding to * the given input events are delivered to the instance for filtering. * * By default, no input events are delivered. In most cases you would * register to receive events by calling RequestInputEvents(). In some cases, * however, you may wish to filter events such that they can be bubbled up * to the DOM. In this case, register for those classes of events using * this function instead of RequestInputEvents(). * * Filtering input events requires significantly more overhead than just * delivering them to the instance. As such, you should only request * filtering in those cases where it's absolutely necessary. The reason is * that it requires the browser to stop and block for the instance to handle * the input event, rather than sending the input event asynchronously. This * can have significant overhead. * * <strong>Example:</strong> * <code> * RequestInputEvents(instance, PP_INPUTEVENT_CLASS_MOUSE); * RequestFilteringInputEvents(instance, * PP_INPUTEVENT_CLASS_WHEEL | PP_INPUTEVENT_CLASS_KEYBOARD); * </code> * * @return <code>PP_OK</code> if the operation succeeded, * <code>PP_ERROR_BADARGUMENT</code> if instance is invalid, or * <code>PP_ERROR_NOTSUPPORTED</code> if one of the event class bits were * illegal. In the case of an invalid bit, all valid bits will be applied * and only the illegal bits will be ignored. */ int32_t (*)(PP_Instance instance, uint32_t event_classes)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * RequestFilteringInputEvents() requests that input events corresponding to
   * the given input events are delivered to the instance for filtering.
   *
   * By default, no input events are delivered. In most cases you would
   * register to receive events by calling RequestInputEvents(). In some cases,
   * however, you may wish to filter events such that they can be bubbled up
   * to the DOM. In this case, register for those classes of events using
   * this function instead of RequestInputEvents().
   *
   * Filtering input events requires significantly more overhead than just
   * delivering them to the instance. As such, you should only request
   * filtering in those cases where it's absolutely necessary. The reason is
   * that it requires the browser to stop and block for the instance to handle
   * the input event, rather than sending the input event asynchronously. This
   * can have significant overhead.
   *
   * <strong>Example:</strong>
   * <code>
   *   RequestInputEvents(instance, PP_INPUTEVENT_CLASS_MOUSE);
   *   RequestFilteringInputEvents(instance,
   *       PP_INPUTEVENT_CLASS_WHEEL | PP_INPUTEVENT_CLASS_KEYBOARD);
   * </code>
   *
   * @return <code>PP_OK</code> if the operation succeeded,
   * <code>PP_ERROR_BADARGUMENT</code> if instance is invalid, or
   * <code>PP_ERROR_NOTSUPPORTED</code> if one of the event class bits were
   * illegal. In the case of an invalid bit, all valid bits will be applied
   * and only the illegal bits will be ignored.
   */
  int32_t (*${name})(PP_Instance instance,
                                         uint32_t event_classes)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9902604 "ClearInputEventRequest"
	public explicit_type "/** * ClearInputEventRequest() requests that input events corresponding to the * given input classes no longer be delivered to the instance. * * By default, no input events are delivered. If you have previously * requested input events via RequestInputEvents() or * RequestFilteringInputEvents(), this function will unregister handling * for the given instance. This will allow greater browser performance for * those events. * * Note that you may still get some input events after clearing the flag if * they were dispatched before the request was cleared. For example, if * there are 3 mouse move events waiting to be delivered, and you clear the * mouse event class during the processing of the first one, you'll still * receive the next two. You just won't get more events generated. * * @param instance The <code>PP_Instance</code> of the instance requesting * to no longer receive the given events. * * @param event_classes A combination of flags from * <code>PP_InputEvent_Class</code> that identify the classes of events the * instance is no longer interested in. */ void (*)(PP_Instance instance, uint32_t event_classes)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * ClearInputEventRequest() requests that input events corresponding to the
   * given input classes no longer be delivered to the instance.
   *
   * By default, no input events are delivered. If you have previously
   * requested input events via RequestInputEvents() or
   * RequestFilteringInputEvents(), this function will unregister handling
   * for the given instance. This will allow greater browser performance for
   * those events.
   *
   * Note that you may still get some input events after clearing the flag if
   * they were dispatched before the request was cleared. For example, if
   * there are 3 mouse move events waiting to be delivered, and you clear the
   * mouse event class during the processing of the first one, you'll still
   * receive the next two. You just won't get more events generated.
   *
   * @param instance The <code>PP_Instance</code> of the instance requesting
   * to no longer receive the given events.
   *
   * @param event_classes A combination of flags from
   * <code>PP_InputEvent_Class</code> that identify the classes of events the
   * instance is no longer interested in.
   */
  void (*${name})(PP_Instance instance, uint32_t event_classes)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9902732 "IsInputEvent"
	public explicit_type "/** * IsInputEvent() returns true if the given resource is a valid input event * resource. * * @param[in] resource A <code>PP_Resource</code> corresponding to a generic * resource. * * @return <code>PP_TRUE</code> if the given resource is a valid input event * resource. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsInputEvent() returns true if the given resource is a valid input event
   * resource.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to a generic
   * resource.
   *
   * @return <code>PP_TRUE</code> if the given resource is a valid input event
   * resource.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9902860 "GetType"
	public explicit_type "/** * GetType() returns the type of input event for the given input event * resource. * * @param[in] resource A <code>PP_Resource</code> corresponding to an input * event. * * @return A <code>PP_InputEvent_Type</code> if its a valid input event or * <code>PP_INPUTEVENT_TYPE_UNDEFINED</code> if the resource is invalid. */ PP_InputEvent_Type (*)(PP_Resource event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetType() returns the type of input event for the given input event
   * resource.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to an input
   * event.
   *
   * @return A <code>PP_InputEvent_Type</code> if its a valid input event or
   * <code>PP_INPUTEVENT_TYPE_UNDEFINED</code> if the resource is invalid.
   */
  PP_InputEvent_Type (*${name})(PP_Resource event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9902988 "GetTimeStamp"
	public explicit_type "/** * GetTimeStamp() Returns the time that the event was generated. This will be * before the current time since processing and dispatching the event has * some overhead. Use this value to compare the times the user generated two * events without being sensitive to variable processing time. * * @param[in] resource A <code>PP_Resource</code> corresponding to the event. * * @return The return value is in time ticks, which is a monotonically * increasing clock not related to the wall clock time. It will not change * if the user changes their clock or daylight savings time starts, so can * be reliably used to compare events. This means, however, that you can't * correlate event times to a particular time of day on the system clock. */ PP_TimeTicks (*)(PP_Resource event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetTimeStamp() Returns the time that the event was generated. This will be
   *  before the current time since processing and dispatching the event has
   * some overhead. Use this value to compare the times the user generated two
   * events without being sensitive to variable processing time.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to the event.
   *
   * @return The return value is in time ticks, which is a monotonically
   * increasing clock not related to the wall clock time. It will not change
   * if the user changes their clock or daylight savings time starts, so can
   * be reliably used to compare events. This means, however, that you can't
   * correlate event times to a particular time of day on the system clock.
   */
  PP_TimeTicks (*${name})(PP_Resource event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9903116 "GetModifiers"
	public explicit_type "/** * GetModifiers() returns a bitfield indicating which modifiers were down * at the time of the event. This is a combination of the flags in the * <code>PP_InputEvent_Modifier</code> enum. * * @param[in] resource A <code>PP_Resource</code> corresponding to an input * event. * * @return The modifiers associated with the event, or 0 if the given * resource is not a valid event resource. */ uint32_t (*)(PP_Resource event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetModifiers() returns a bitfield indicating which modifiers were down
   * at the time of the event. This is a combination of the flags in the
   * <code>PP_InputEvent_Modifier</code> enum.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to an input
   * event.
   *
   * @return The modifiers associated with the event, or 0 if the given
   * resource is not a valid event resource.
   */
  uint32_t (*${name})(PP_Resource event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2746636 "PPB_InputEvent"
      visibility package stereotype "typedef" base_type class_ref 2746508 // PPB_InputEvent_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5191692 // <dependency>
	relation 5191564 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5191692 // <dependency>
	  b parent class_ref 2746508 // PPB_InputEvent_1_0
      end
    end

    class 2746764 "PPB_MouseInputEvent_1_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The <code>PPB_MouseInputEvent</code> interface contains pointers to several
 * functions related to mouse input events."
      attribute 9903244 "Create"
	public explicit_type "/** * Create() creates a mouse input event with the given parameters. Normally * you will get a mouse event passed through the * <code>HandleInputEvent</code> and will not need to create them, but some * applications may want to create their own for internal use. The type must * be one of the mouse event types. * * @param[in] instance The instance for which this event occurred. * * @param[in] type A <code>PP_InputEvent_Type</code> identifying the type of * input event. * * @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time * when the event occurred. * * @param[in] modifiers A bit field combination of the * <code>PP_InputEvent_Modifier</code> flags. * * @param[in] mouse_button The button that changed for mouse down or up * events. This value will be <code>PP_EVENT_MOUSEBUTTON_NONE</code> for * mouse move, enter, and leave events. * * @param[in] mouse_position A <code>Point</code> containing the x and y * position of the mouse when the event occurred. * * @param[in] mouse_movement The change in position of the mouse. * * @return A <code>PP_Resource</code> containing the new mouse input event. */ PP_Resource (*)(PP_Instance instance, PP_InputEvent_Type type, PP_TimeTicks time_stamp, uint32_t modifiers, PP_InputEvent_MouseButton mouse_button, const struct PP_Point* mouse_position, int32_t click_count, const struct PP_Point* mouse_movement)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Create() creates a mouse input event with the given parameters. Normally
   * you will get a mouse event passed through the
   * <code>HandleInputEvent</code> and will not need to create them, but some
   * applications may want to create their own for internal use. The type must
   * be one of the mouse event types.
   *
   * @param[in] instance The instance for which this event occurred.
   *
   * @param[in] type A <code>PP_InputEvent_Type</code> identifying the type of
   * input event.
   *
   * @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time
   * when the event occurred.
   *
   * @param[in] modifiers A bit field combination of the
   * <code>PP_InputEvent_Modifier</code> flags.
   *
   * @param[in] mouse_button The button that changed for mouse down or up
   * events. This value will be <code>PP_EVENT_MOUSEBUTTON_NONE</code> for
   * mouse move, enter, and leave events.
   *
   * @param[in] mouse_position A <code>Point</code> containing the x and y
   * position of the mouse when the event occurred.
   *
   * @param[in] mouse_movement The change in position of the mouse.
   *
   * @return A <code>PP_Resource</code> containing the new mouse input event.
   */
  PP_Resource (*${name})(PP_Instance instance,
                        PP_InputEvent_Type type,
                        PP_TimeTicks time_stamp,
                        uint32_t modifiers,
                        PP_InputEvent_MouseButton mouse_button,
                        const struct PP_Point* mouse_position,
                        int32_t click_count,
                        const struct PP_Point* mouse_movement)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9903372 "IsMouseInputEvent"
	public explicit_type "/** * IsMouseInputEvent() determines if a resource is a mouse event. * * @param[in] resource A <code>PP_Resource</code> corresponding to an event. * * @return <code>PP_TRUE</code> if the given resource is a valid mouse input * event, otherwise <code>PP_FALSE</code>. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsMouseInputEvent() determines if a resource is a mouse event.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to an event.
   *
   * @return <code>PP_TRUE</code> if the given resource is a valid mouse input
   * event, otherwise <code>PP_FALSE</code>.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9903500 "GetButton"
	public explicit_type "/** * GetButton() returns the mouse button that generated a mouse down or up * event. * * @param[in] mouse_event A <code>PP_Resource</code> corresponding to a * mouse event. * * @return The mouse button associated with mouse down and up events. This * value will be <code>PP_EVENT_MOUSEBUTTON_NONE</code> for mouse move, * enter, and leave events, and for all non-mouse events. */ PP_InputEvent_MouseButton (*)(PP_Resource mouse_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetButton() returns the mouse button that generated a mouse down or up
   * event.
   *
   * @param[in] mouse_event A <code>PP_Resource</code> corresponding to a
   * mouse event.
   *
   * @return The mouse button associated with mouse down and up events. This
   * value will be <code>PP_EVENT_MOUSEBUTTON_NONE</code> for mouse move,
   * enter, and leave events, and for all non-mouse events.
   */
  PP_InputEvent_MouseButton (*${name})(PP_Resource mouse_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9903628 "GetPosition"
	public explicit_type "PP_Point (*)(PP_Resource mouse_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Point (*${name})(PP_Resource mouse_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9903756 "GetClickCount"
	public explicit_type "/* * TODO(brettw) figure out exactly what this means. */ int32_t (*)(PP_Resource mouse_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /*
   * TODO(brettw) figure out exactly what this means.
   */
  int32_t (*${name})(PP_Resource mouse_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9903884 "GetMovement"
	public explicit_type "PP_Point (*)(PP_Resource mouse_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Point (*${name})(PP_Resource mouse_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2746892 "PPB_MouseInputEvent"
      visibility package stereotype "typedef" base_type class_ref 2746764 // PPB_MouseInputEvent_1_1
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5191820 // <dependency>
	relation 5191692 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5191820 // <dependency>
	  b parent class_ref 2746764 // PPB_MouseInputEvent_1_1
      end
    end

    class 2747020 "PPB_MouseInputEvent_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9904012 "Create"
	public explicit_type "PP_Resource (*)(PP_Instance instance, PP_InputEvent_Type type, PP_TimeTicks time_stamp, uint32_t modifiers, PP_InputEvent_MouseButton mouse_button, const struct PP_Point* mouse_position, int32_t click_count)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  PP_Resource (*${name})(PP_Instance instance,
                        PP_InputEvent_Type type,
                        PP_TimeTicks time_stamp,
                        uint32_t modifiers,
                        PP_InputEvent_MouseButton mouse_button,
                        const struct PP_Point* mouse_position,
                        int32_t click_count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9904140 "IsMouseInputEvent"
	public explicit_type "PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9904268 "GetButton"
	public explicit_type "PP_InputEvent_MouseButton (*)(PP_Resource mouse_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  PP_InputEvent_MouseButton (*${name})(PP_Resource mouse_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9904396 "GetPosition"
	public explicit_type "PP_Point (*)(PP_Resource mouse_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Point (*${name})(PP_Resource mouse_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9904524 "GetClickCount"
	public explicit_type "int32_t (*)(PP_Resource mouse_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  int32_t (*${name})(PP_Resource mouse_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2747148 "PPB_WheelInputEvent_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The <code>PPB_WheelIputEvent</code> interface contains pointers to several
 * functions related to wheel input events."
      attribute 9904652 "Create"
	public explicit_type "/** * Create() creates a wheel input event with the given parameters. Normally * you will get a wheel event passed through the * <code>HandleInputEvent</code> and will not need to create them, but some * applications may want to create their own for internal use. * * @param[in] instance The instance for which this event occurred. * * @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time * when the event occurred. * * @param[in] modifiers A bit field combination of the * <code>PP_InputEvent_Modifier</code> flags. * * @param[in] wheel_delta The scroll wheel's horizontal and vertical scroll * amounts. * * @param[in] wheel_ticks The number of \"clicks\" of the scroll wheel that * have produced the event. * * @param[in] scroll_by_page When true, the user is requesting to scroll * by pages. When false, the user is requesting to scroll by lines. * * @return A <code>PP_Resource</code> containing the new wheel input event. */ PP_Resource (*)(PP_Instance instance, PP_TimeTicks time_stamp, uint32_t modifiers, const struct PP_FloatPoint* wheel_delta, const struct PP_FloatPoint* wheel_ticks, PP_Bool scroll_by_page)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Create() creates a wheel input event with the given parameters. Normally
   * you will get a wheel event passed through the
   * <code>HandleInputEvent</code> and will not need to create them, but some
   * applications may want to create their own for internal use.
   *
   * @param[in] instance The instance for which this event occurred.
   *
   * @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time
   * when the event occurred.
   *
   * @param[in] modifiers A bit field combination of the
   * <code>PP_InputEvent_Modifier</code> flags.
   *
   * @param[in] wheel_delta The scroll wheel's horizontal and vertical scroll
   * amounts.
   *
   * @param[in] wheel_ticks The number of \"clicks\" of the scroll wheel that
   * have produced the event.
   *
   * @param[in] scroll_by_page When true, the user is requesting to scroll
   * by pages. When false, the user is requesting to scroll by lines.
   *
   * @return A <code>PP_Resource</code> containing the new wheel input event.
   */
  PP_Resource (*${name})(PP_Instance instance,
                        PP_TimeTicks time_stamp,
                        uint32_t modifiers,
                        const struct PP_FloatPoint* wheel_delta,
                        const struct PP_FloatPoint* wheel_ticks,
                        PP_Bool scroll_by_page)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9904780 "IsWheelInputEvent"
	public explicit_type "/** * IsWheelInputEvent() determines if a resource is a wheel event. * * @param[in] wheel_event A <code>PP_Resource</code> corresponding to an * event. * * @return <code>PP_TRUE</code> if the given resource is a valid wheel input * event. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsWheelInputEvent() determines if a resource is a wheel event.
   *
   * @param[in] wheel_event A <code>PP_Resource</code> corresponding to an
   * event.
   *
   * @return <code>PP_TRUE</code> if the given resource is a valid wheel input
   * event.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9904908 "GetDelta"
	public explicit_type "PP_FloatPoint (*)(PP_Resource wheel_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_FloatPoint (*${name})(PP_Resource wheel_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9905036 "GetTicks"
	public explicit_type "PP_FloatPoint (*)(PP_Resource wheel_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_FloatPoint (*${name})(PP_Resource wheel_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9905164 "GetScrollByPage"
	public explicit_type "/** * GetScrollByPage() indicates if the scroll delta x/y indicates pages or * lines to scroll by. * * @param[in] wheel_event A <code>PP_Resource</code> corresponding to a wheel * event. * * @return <code>PP_TRUE</code> if the event is a wheel event and the user is * scrolling by pages. <code>PP_FALSE</code> if not or if the resource is not * a wheel event. */ PP_Bool (*)(PP_Resource wheel_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetScrollByPage() indicates if the scroll delta x/y indicates pages or
   * lines to scroll by.
   *
   * @param[in] wheel_event A <code>PP_Resource</code> corresponding to a wheel
   * event.
   *
   * @return <code>PP_TRUE</code> if the event is a wheel event and the user is
   * scrolling by pages. <code>PP_FALSE</code> if not or if the resource is not
   * a wheel event.
   */
  PP_Bool (*${name})(PP_Resource wheel_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2747276 "PPB_WheelInputEvent"
      visibility package stereotype "typedef" base_type class_ref 2747148 // PPB_WheelInputEvent_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5191948 // <dependency>
	relation 5191820 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5191948 // <dependency>
	  b parent class_ref 2747148 // PPB_WheelInputEvent_1_0
      end
    end

    class 2747404 "PPB_KeyboardInputEvent_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * The <code>PPB_KeyboardInputEvent</code> interface contains pointers to
 * several functions related to keyboard input events."
      attribute 9905292 "Create"
	public explicit_type "/** * Creates a keyboard input event with the given parameters. Normally you * will get a keyboard event passed through the HandleInputEvent and will not * need to create them, but some applications may want to create their own * for internal use. The type must be one of the keyboard event types. * * @param[in] instance The instance for which this event occurred. * * @param[in] type A <code>PP_InputEvent_Type</code> identifying the type of * input event. * * @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time * when the event occurred. * * @param[in] modifiers A bit field combination of the * <code>PP_InputEvent_Modifier</code> flags. * * @param[in] key_code This value reflects the DOM KeyboardEvent * <code>keyCode</code> field. Chrome populates this with the Windows-style * Virtual Key code of the key. * * @param[in] character_text This value represents the typed character as a * UTF-8 string. * * @return A <code>PP_Resource</code> containing the new keyboard input * event. */ PP_Resource (*)(PP_Instance instance, PP_InputEvent_Type type, PP_TimeTicks time_stamp, uint32_t modifiers, uint32_t key_code, struct PP_Var character_text)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Creates a keyboard input event with the given parameters. Normally you
   * will get a keyboard event passed through the HandleInputEvent and will not
   * need to create them, but some applications may want to create their own
   * for internal use. The type must be one of the keyboard event types.
   *
   * @param[in] instance The instance for which this event occurred.
   *
   * @param[in] type A <code>PP_InputEvent_Type</code> identifying the type of
   * input event.
   *
   * @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time
   * when the event occurred.
   *
   * @param[in]  modifiers A bit field combination of the
   * <code>PP_InputEvent_Modifier</code> flags.
   *
   * @param[in] key_code This value reflects the DOM KeyboardEvent
   * <code>keyCode</code> field. Chrome populates this with the Windows-style
   * Virtual Key code of the key.
   *
   * @param[in] character_text This value represents the typed character as a
   * UTF-8 string.
   *
   * @return A <code>PP_Resource</code> containing the new keyboard input
   * event.
   */
  PP_Resource (*${name})(PP_Instance instance,
                        PP_InputEvent_Type type,
                        PP_TimeTicks time_stamp,
                        uint32_t modifiers,
                        uint32_t key_code,
                        struct PP_Var character_text)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9905420 "IsKeyboardInputEvent"
	public explicit_type "/** * IsKeyboardInputEvent() determines if a resource is a keyboard event. * * @param[in] resource A <code>PP_Resource</code> corresponding to an event. * * @return <code>PP_TRUE</code> if the given resource is a valid input event. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsKeyboardInputEvent() determines if a resource is a keyboard event.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to an event.
   *
   * @return <code>PP_TRUE</code> if the given resource is a valid input event.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9905548 "GetKeyCode"
	public explicit_type "/** * GetKeyCode() returns the DOM keyCode field for the keyboard event. * Chrome populates this with the Windows-style Virtual Key code of the key. * * @param[in] key_event A <code>PP_Resource</code> corresponding to a * keyboard event. * * @return The DOM keyCode field for the keyboard event. */ uint32_t (*)(PP_Resource key_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetKeyCode() returns the DOM keyCode field for the keyboard event.
   * Chrome populates this with the Windows-style Virtual Key code of the key.
   *
   * @param[in] key_event A <code>PP_Resource</code> corresponding to a
   * keyboard event.
   *
   * @return The DOM keyCode field for the keyboard event.
   */
  uint32_t (*${name})(PP_Resource key_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9905676 "GetCharacterText"
	public explicit_type "PP_Var (*)(PP_Resource character_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Var (*${name})(PP_Resource character_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2747532 "PPB_KeyboardInputEvent"
      visibility package stereotype "typedef" base_type class_ref 2747404 // PPB_KeyboardInputEvent_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5192076 // <dependency>
	relation 5191948 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5192076 // <dependency>
	  b parent class_ref 2747404 // PPB_KeyboardInputEvent_1_0
      end
    end

    class 2747660 "PP_TouchListType"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Enums
 * @{"
      attribute 9905804 "PP_TOUCHLIST_TYPE_TOUCHES"
	public type class_ref 2747660 // PP_TouchListType
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9905932 "PP_TOUCHLIST_TYPE_CHANGEDTOUCHES"
	public type class_ref 2747660 // PP_TouchListType
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9906060 "PP_TOUCHLIST_TYPE_TARGETTOUCHES"
	public type class_ref 2747660 // PP_TouchListType
	init_value " 2
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2747788 "PPB_TouchInputEvent_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_TouchInputEvent</code> interface contains pointers to several
 * functions related to touch events."
      attribute 9906188 "Create"
	public explicit_type "/** * Creates a touch input event with the given parameters. Normally you * will get a touch event passed through the HandleInputEvent and will not * need to create them, but some applications may want to create their own * for internal use. The type must be one of the touch event types. * This newly created touch input event does not have any touch point in any * of the touch-point lists. <code>AddTouchPoint</code> should be called to * add the touch-points. * * @param[in] instance The instance for which this event occurred. * * @param[in] type A <code>PP_InputEvent_Type</code> identifying the type of * input event. * * @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time * when the event occurred. * * @param[in] modifiers A bit field combination of the * <code>PP_InputEvent_Modifier</code> flags. * * @return A <code>PP_Resource</code> containing the new touch input event. */ PP_Resource (*)(PP_Instance instance, PP_InputEvent_Type type, PP_TimeTicks time_stamp, uint32_t modifiers)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Creates a touch input event with the given parameters. Normally you
   * will get a touch event passed through the HandleInputEvent and will not
   * need to create them, but some applications may want to create their own
   * for internal use. The type must be one of the touch event types.
   * This newly created touch input event does not have any touch point in any
   * of the touch-point lists. <code>AddTouchPoint</code> should be called to
   * add the touch-points.
   *
   * @param[in] instance The instance for which this event occurred.
   *
   * @param[in] type A <code>PP_InputEvent_Type</code> identifying the type of
   * input event.
   *
   * @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time
   * when the event occurred.
   *
   * @param[in]  modifiers A bit field combination of the
   * <code>PP_InputEvent_Modifier</code> flags.
   *
   * @return A <code>PP_Resource</code> containing the new touch input event.
   */
  PP_Resource (*${name})(PP_Instance instance,
                        PP_InputEvent_Type type,
                        PP_TimeTicks time_stamp,
                        uint32_t modifiers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9906316 "AddTouchPoint"
	public explicit_type "/** * Adds a touch point to the touch event in the specified touch-list. * * @param[in] touch_event A <code>PP_Resource</code> corresponding to a touch * event. * * @param[in] list The list to add the touch point to. * * @param[in] point The point to add to the list. */ void (*)(PP_Resource touch_event, PP_TouchListType list, const struct PP_TouchPoint* point)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Adds a touch point to the touch event in the specified touch-list.
   *
   * @param[in] touch_event A <code>PP_Resource</code> corresponding to a touch
   * event.
   *
   * @param[in] list The list to add the touch point to.
   *
   * @param[in] point The point to add to the list.
   */
  void (*${name})(PP_Resource touch_event,
                        PP_TouchListType list,
                        const struct PP_TouchPoint* point)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9906444 "IsTouchInputEvent"
	public explicit_type "/** * IsTouchInputEvent() determines if a resource is a touch event. * * @param[in] resource A <code>PP_Resource</code> corresponding to an event. * * @return <code>PP_TRUE</code> if the given resource is a valid touch input * event, otherwise <code>PP_FALSE</code>. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsTouchInputEvent() determines if a resource is a touch event.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to an event.
   *
   * @return <code>PP_TRUE</code> if the given resource is a valid touch input
   * event, otherwise <code>PP_FALSE</code>.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9906572 "GetTouchCount"
	public explicit_type "/** * Returns the number of touch-points in the specified list. * * @param[in] resource A <code>PP_Resource</code> corresponding to a touch * event. * * @param[in] list The list. * * @return The number of touch-points in the specified list. */ uint32_t (*)(PP_Resource resource, PP_TouchListType list)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Returns the number of touch-points in the specified list.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to a touch
   * event.
   *
   * @param[in] list The list.
   *
   * @return The number of touch-points in the specified list.
   */
  uint32_t (*${name})(PP_Resource resource, PP_TouchListType list)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9906700 "GetTouchByIndex"
	public explicit_type "PP_TouchPoint (*)(PP_Resource resource, PP_TouchListType list, uint32_t index)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_TouchPoint (*${name})(PP_Resource resource,
                                          PP_TouchListType list,
                                          uint32_t index)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9906828 "GetTouchById"
	public explicit_type "PP_TouchPoint (*)(PP_Resource resource, PP_TouchListType list, uint32_t touch_id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_TouchPoint (*${name})(PP_Resource resource,
                                       PP_TouchListType list,
                                       uint32_t touch_id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2747916 "PPB_TouchInputEvent"
      visibility package stereotype "typedef" base_type class_ref 2747788 // PPB_TouchInputEvent_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5192204 // <dependency>
	relation 5192076 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5192204 // <dependency>
	  b parent class_ref 2747788 // PPB_TouchInputEvent_1_0
      end
    end

    class 2748044 "PPB_Instance_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_Instance</code> interface implemented by the
 * browser and containing pointers to functions related to
 * the module instance on a web page.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The PPB_Instance interface contains pointers to functions
 * related to the module instance on a web page."
      attribute 9906956 "BindGraphics"
	public explicit_type "/** * BindGraphics() binds the given graphics as the current display surface. * The contents of this device is what will be displayed in the instance's * area on the web page. The device must be a 2D or a 3D device. * * You can pass a <code>NULL</code> resource as the device parameter to * unbind all devices from the given instance. The instance will then appear * transparent. Re-binding the same device will return <code>PP_TRUE</code> * and will do nothing. * * Any previously-bound device will be released. It is an error to bind * a device when it is already bound to another instance. If you want * to move a device between instances, first unbind it from the old one, and * then rebind it to the new one. * * Binding a device will invalidate that portion of the web page to flush the * contents of the new device to the screen. * * @param[in] instance A PP_Instance identifying one instance of a module. * @param[in] device A PP_Resource corresponding to a graphics device. * * @return <code>PP_Bool</code> containing <code>PP_TRUE</code> if bind was * successful or <code>PP_FALSE</code> if the device was not the correct * type. On success, a reference to the device will be held by the * instance, so the caller can release its reference if it chooses. */ PP_Bool (*)(PP_Instance instance, PP_Resource device)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * BindGraphics() binds the given graphics as the current display surface.
   * The contents of this device is what will be displayed in the instance's
   * area on the web page. The device must be a 2D or a 3D device.
   *
   * You can pass a <code>NULL</code> resource as the device parameter to
   * unbind all devices from the given instance. The instance will then appear
   * transparent. Re-binding the same device will return <code>PP_TRUE</code>
   * and will do nothing.
   *
   * Any previously-bound device will be released. It is an error to bind
   * a device when it is already bound to another instance. If you want
   * to move a device between instances, first unbind it from the old one, and
   * then rebind it to the new one.
   *
   * Binding a device will invalidate that portion of the web page to flush the
   * contents of the new device to the screen.
   *
   * @param[in] instance A PP_Instance identifying one instance of a module.
   * @param[in] device A PP_Resource corresponding to a graphics device.
   *
   * @return <code>PP_Bool</code> containing <code>PP_TRUE</code> if bind was
   * successful or <code>PP_FALSE</code> if the device was not the correct
   * type. On success, a reference to the device will be held by the
   * instance, so the caller can release its reference if it chooses.
   */
  PP_Bool (*${name})(PP_Instance instance, PP_Resource device)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9907084 "IsFullFrame"
	public explicit_type "/** * IsFullFrame() determines if the instance is full-frame. Such an instance * represents the entire document in a frame rather than an embedded * resource. This can happen if the user does a top-level navigation or the * page specifies an iframe to a resource with a MIME type registered by the * module. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * * @return A <code>PP_Bool</code> containing <code>PP_TRUE</code> if the * instance is full-frame. */ PP_Bool (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsFullFrame() determines if the instance is full-frame. Such an instance
   * represents the entire document in a frame rather than an embedded
   * resource. This can happen if the user does a top-level navigation or the
   * page specifies an iframe to a resource with a MIME type registered by the
   * module.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   *
   * @return A <code>PP_Bool</code> containing <code>PP_TRUE</code> if the
   * instance is full-frame.
   */
  PP_Bool (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2748172 "PPB_Instance"
      visibility package stereotype "typedef" base_type class_ref 2748044 // PPB_Instance_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5192332 // <dependency>
	relation 5192204 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5192332 // <dependency>
	  b parent class_ref 2748044 // PPB_Instance_1_0
      end
    end

    class 2748300 "PPB_MessageLoop_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * Defines the PPB_MessageLoop interface.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * A message loop allows PPAPI calls to be issued on a thread. You may not
 * issue any API calls on a thread without creating a message loop. It also
 * allows you to post work to the message loop for a thread.
 *
 * To process work posted to the message loop, as well as completion callbacks
 * for asynchronous operations, you must run the message loop via Run().
 *
 * Note the system manages the lifetime of the instance (and all associated
 * resources). If the instance is deleted from the page, background threads may
 * suddenly see their PP_Resource handles become invalid. In this case, calls
 * will fail with PP_ERROR_BADRESOURCE. If you need to access data associated
 * with your instance, you will probably want to create some kind of threadsafe
 * proxy object that can handle asynchonous destruction of the instance object.
 *
 * Typical usage:
 *   On the main thread:
 *    - Create the thread yourself (using pthreads).
 *    - Create the message loop resource.
 *    - Pass the message loop resource to your thread's main function.
 *    - Call PostWork() on the message loop to run functions on the thread.
 *
 *   From the background thread's main function:
 *    - Call AttachToCurrentThread() with the message loop resource.
 *    - Call Run() with the message loop resource.
 *
 *   Your callacks should look like this:
 *      void DoMyWork(void* user_data, int32_t status) {
 *        if (status != PP_OK) {
 *          Cleanup();  // e.g. free user_data.
 *          return;
 *        }
 *        ... do your work...
 *      }
 * For a C++ example, see ppapi/utility/threading/simple_thread.h
 *
 * (You can also create the message loop resource on the background thread,
 * but then the main thread will have no reference to it should you want to
 * call PostWork()).
 *
 *
 * THREAD HANDLING
 *
 * The main thread has an implicitly created message loop. The main thread is
 * the thread where PPP_InitializeModule and PPP_Instance functions are called.
 * You can retrieve a reference to this message loop by calling
 * GetForMainThread() or, if your code is on the main thread,
 * GetForCurrentThread() will also work.
 *
 * Some special threads created by the system can not have message loops. In
 * particular, the background thread created for audio processing has this
 * requirement because it's intended to be highly responsive to keep up with
 * the realtime requirements of audio processing. You can not make PPAPI calls
 * from these threads.
 *
 * Once you associate a message loop with a thread, you don't have to keep a
 * reference to it. The system will hold a reference to the message loop for as
 * long as the thread is running. The current message loop can be retrieved
 * using the GetCurrent() function.
 *
 * It is legal to create threads in your plugin without message loops, but
 * PPAPI calls will fail unless explicitly noted in the documentation.
 *
 * You can create a message loop object on a thread and never actually run the
 * message loop. This will allow you to call blocking PPAPI calls (via
 * PP_BlockUntilComplete()). If you make any asynchronous calls, the callbacks
 * from those calls will be queued in the message loop and never run. The same
 * thing will happen if work is scheduled after the message loop exits and
 * the message loop is not run again.
 *
 *
 * DESTRUCTION AND ERROR HANDLING
 *
 * Often, your application will associate memory with completion callbacks. For
 * example, the C++ CompletionCallbackFactory has a small amount of
 * heap-allocated memory for each callback. This memory will be leaked if the
 * callback is never run. To avoid this memory leak, you need to be careful
 * about error handling and shutdown.
 *
 * There are a number of cases where posted callbacks will never be run:
 *
 *  - You tear down the thread (via pthreads) without \"destroying\" the message
 *    loop (via PostQuit with should_destroy = PP_TRUE). In this case, any
 *    tasks in the message queue will be lost.
 *
 *  - You create a message loop, post callbacks to it, and never run it.
 *
 *  - You quit the message loop via PostQuit with should_destroy set to
 *    PP_FALSE. In this case, the system will assume the message loop will be
 *    run again later and keep your tasks.
 *
 * To do proper shutdown, call PostQuit with should_destroy = PP_TRUE. This
 * will prohibit future work from being posted, and will allow the message loop
 * to run until all pending tasks are run.
 *
 * If you post a callback to a message loop that's been destroyed, or to an
 * invalid message loop, PostWork will return an error and will not run the
 * callback. This is true even for callbacks with the \"required\" flag set,
 * since the system may not even know what thread to issue the error callback
 * on.
 *
 * Therefore, you should check for errors from PostWork and destroy any
 * associated memory to avoid leaks. If you're using the C++
 * CompletionCallbackFactory, use the following pattern:
 *
 *   pp::CompletionCallback callback = factory_.NewOptionalCallback(...);
 *   int32_t result = message_loop.PostWork(callback);
 *   if (result != PP_OK)
 *     callback.Run(result);
 *
 * This will run the callback with an error value, and assumes that the
 * implementation of your callback checks the \"result\" argument and returns
 * immediately on error."
      attribute 9907212 "Create"
	public explicit_type "/** * Creates a message loop resource. * * This may be called from any thread. After your thread starts but before * issuing any other PPAPI calls on it, you must associate it with a message * loop by calling AttachToCurrentThread. */ PP_Resource (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Creates a message loop resource.
   *
   * This may be called from any thread. After your thread starts but before
   * issuing any other PPAPI calls on it, you must associate it with a message
   * loop by calling AttachToCurrentThread.
   */
  PP_Resource (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9907340 "GetForMainThread"
	public explicit_type "/** * Returns a resource identifying the message loop for the main thread. The * main thread always has a message loop created by the system. */ PP_Resource (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Returns a resource identifying the message loop for the main thread. The
   * main thread always has a message loop created by the system.
   */
  PP_Resource (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9907468 "GetCurrent"
	public explicit_type "/** * Returns a reference to the PPB_MessageLoop object attached to the current * thread. If there is no attached message loop, the return value will be 0. */ PP_Resource (*)(void)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Returns a reference to the PPB_MessageLoop object attached to the current
   * thread. If there is no attached message loop, the return value will be 0.
   */
  PP_Resource (*${name})(void)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9907596 "AttachToCurrentThread"
	public explicit_type "/** * Sets the given message loop resource as being the associated message loop * for the currently running thread. * * You must call this function exactly once on a thread before making any * PPAPI calls. A message loop can only be attached to one thread, and the * message loop can not be changed later. The message loop will be attached * as long as the thread is running or until you quit with should_destroy * set to PP_TRUE. * * If this function fails, attempting to run the message loop will fail. * Note that you can still post work to the message loop: it will get queued * up should the message loop eventually be successfully attached and run. * * @return * - PP_OK: The message loop was successfully attached to the thread and is * ready to use. * - PP_ERROR_BADRESOURCE: The given message loop resource is invalid. * - PP_ERROR_INPROGRESS: The current thread already has a message loop * attached. This will always be the case for the main thread, which has * an implicit system-created message loop attached. * - PP_ERROR_WRONG_THREAD: The current thread type can not have a message * loop attached to it. See the interface level discussion about these * special threads, which include realtime audio threads. */ int32_t (*)(PP_Resource message_loop)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Sets the given message loop resource as being the associated message loop
   * for the currently running thread.
   *
   * You must call this function exactly once on a thread before making any
   * PPAPI calls. A message loop can only be attached to one thread, and the
   * message loop can not be changed later. The message loop will be attached
   * as long as the thread is running or until you quit with should_destroy
   * set to PP_TRUE.
   *
   * If this function fails, attempting to run the message loop will fail.
   * Note that you can still post work to the message loop: it will get queued
   * up should the message loop eventually be successfully attached and run.
   *
   * @return
   *   - PP_OK: The message loop was successfully attached to the thread and is
   *     ready to use.
   *   - PP_ERROR_BADRESOURCE: The given message loop resource is invalid.
   *   - PP_ERROR_INPROGRESS: The current thread already has a message loop
   *     attached. This will always be the case for the main thread, which has
   *     an implicit system-created message loop attached.
   *   - PP_ERROR_WRONG_THREAD: The current thread type can not have a message
   *     loop attached to it. See the interface level discussion about these
   *     special threads, which include realtime audio threads.
   */
  int32_t (*${name})(PP_Resource message_loop)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9907724 "Run"
	public explicit_type "/** * Runs the thread message loop. Running the message loop is required for you * to get issued completion callbacks on the thread. * * The message loop identified by the argument must have been previously * successfully attached to the current thread. * * You may not run nested message loops. Since the main thread has an * implicit message loop that the system runs, you may not call Run on the * main thread. * * @return * - PP_OK: The message loop was successfully run. Note that on * success, the message loop will only exit when you call PostQuit(). * - PP_ERROR_BADRESOURCE: The given message loop resource is invalid. * - PP_ERROR_WRONG_THREAD: You are attempting to run a message loop that * has not been successfully attached to the current thread. Call * AttachToCurrentThread(). * - PP_ERROR_INPROGRESS: You are attempting to call Run in a nested * fashion (Run is already on the stack). This will occur if you attempt * to call run on the main thread's message loop (see above). */ int32_t (*)(PP_Resource message_loop)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Runs the thread message loop. Running the message loop is required for you
   * to get issued completion callbacks on the thread.
   *
   * The message loop identified by the argument must have been previously
   * successfully attached to the current thread.
   *
   * You may not run nested message loops. Since the main thread has an
   * implicit message loop that the system runs, you may not call Run on the
   * main thread.
   *
   * @return
   *   - PP_OK: The message loop was successfully run. Note that on
   *     success, the message loop will only exit when you call PostQuit().
   *   - PP_ERROR_BADRESOURCE: The given message loop resource is invalid.
   *   - PP_ERROR_WRONG_THREAD: You are attempting to run a message loop that
   *     has not been successfully attached to the current thread. Call
   *     AttachToCurrentThread().
   *   - PP_ERROR_INPROGRESS: You are attempting to call Run in a nested
   *     fashion (Run is already on the stack). This will occur if you attempt
   *     to call run on the main thread's message loop (see above).
   */
  int32_t (*${name})(PP_Resource message_loop)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9907852 "PostWork"
	public explicit_type "/** * Schedules work to run on the given message loop. This may be called from * any thread. Posted work will be executed in the order it was posted when * the message loop is Run(). * * @param message_loop The message loop resource. * * @param callback The completion callback to execute from the message loop. * * @param delay_ms The number of millseconds to delay execution of the given * completion callback. Passing 0 means it will get queued normally and * executed in order. * * * The completion callback will be called with PP_OK as the \"result\" parameter * if it is run normally. It is good practice to check for PP_OK and return * early otherwise. * * The \"required\" flag on the completion callback is ignored. If there is an * error posting your callback, the error will be returned from PostWork and * the callback will never be run (because there is no appropriate place to * run your callback with an error without causing unexpected threading * problems). If you associate memory with the completion callback (for * example, you're using the C++ CompletionCallbackFactory), you will need to * free this or manually run the callback. See \"Desctruction and error * handling\" above. * * * You can call this function before the message loop has started and the * work will get queued until the message loop is run. You can also post * work after the message loop has exited as long as should_destroy was * PP_FALSE. It will be queued until the next invocation of Run(). * * @return * - PP_OK: The work was posted to the message loop's queue. As described * above, this does not mean that the work has been or will be executed * (if you never run the message loop after posting). * - PP_ERROR_BADRESOURCE: The given message loop resource is invalid. * - PP_ERROR_BADARGUMENT: The function pointer for the completion callback * is null (this will be the case if you pass PP_BlockUntilComplete()). * - PP_ERROR_FAILED: The message loop has been destroyed. */ int32_t (*)(PP_Resource message_loop, struct PP_CompletionCallback callback, int64_t delay_ms)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Schedules work to run on the given message loop. This may be called from
   * any thread. Posted work will be executed in the order it was posted when
   * the message loop is Run().
   *
   * @param message_loop The message loop resource.
   *
   * @param callback The completion callback to execute from the message loop.
   *
   * @param delay_ms The number of millseconds to delay execution of the given
   * completion callback. Passing 0 means it will get queued normally and
   * executed in order.
   *
   *
   * The completion callback will be called with PP_OK as the \"result\" parameter
   * if it is run normally. It is good practice to check for PP_OK and return
   * early otherwise.
   *
   * The \"required\" flag on the completion callback is ignored. If there is an
   * error posting your callback, the error will be returned from PostWork and
   * the callback will never be run (because there is no appropriate place to
   * run your callback with an error without causing unexpected threading
   * problems). If you associate memory with the completion callback (for
   * example, you're using the C++ CompletionCallbackFactory), you will need to
   * free this or manually run the callback. See \"Desctruction and error
   * handling\" above.
   *
   *
   * You can call this function before the message loop has started and the
   * work will get queued until the message loop is run. You can also post
   * work after the message loop has exited as long as should_destroy was
   * PP_FALSE. It will be queued until the next invocation of Run().
   *
   * @return
   *   - PP_OK: The work was posted to the message loop's queue. As described
   *     above, this does not mean that the work has been or will be executed
   *     (if you never run the message loop after posting).
   *   - PP_ERROR_BADRESOURCE: The given message loop resource is invalid.
   *   - PP_ERROR_BADARGUMENT: The function pointer for the completion callback
   *     is null (this will be the case if you pass PP_BlockUntilComplete()).
   *   - PP_ERROR_FAILED: The message loop has been destroyed.
   */
  int32_t (*${name})(PP_Resource message_loop,
                      struct PP_CompletionCallback callback,
                      int64_t delay_ms)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9907980 "PostQuit"
	public explicit_type "/** * Posts a quit message to the given message loop's work queue. Work posted * before that point will be processed before quitting. * * This may be called on the message loop registered for the current thread, * or it may be called on the message loop registered for another thread. It * is an error to attempt to PostQuit() the main thread loop. * * @param should_destroy Marks the message loop as being in a destroyed state * and prevents further posting of messages. * * If you quit a message loop without setting should_destroy, it will still * be attached to the thread and you can still run it again by calling Run() * again. If you destroy it, it will be detached from the current thread. * * @return * - PP_OK: The request to quit was successfully posted. * - PP_ERROR_BADRESOURCE: The message loop was invalid. * - PP_ERROR_WRONG_THREAD: You are attempting to quit the main thread. * The main thread's message loop is managed by the system and can't be * quit. */ int32_t (*)(PP_Resource message_loop, PP_Bool should_destroy)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Posts a quit message to the given message loop's work queue. Work posted
   * before that point will be processed before quitting.
   *
   * This may be called on the message loop registered for the current thread,
   * or it may be called on the message loop registered for another thread. It
   * is an error to attempt to PostQuit() the main thread loop.
   *
   * @param should_destroy Marks the message loop as being in a destroyed state
   * and prevents further posting of messages.
   *
   * If you quit a message loop without setting should_destroy, it will still
   * be attached to the thread and you can still run it again by calling Run()
   * again. If you destroy it, it will be detached from the current thread.
   *
   * @return
   *   - PP_OK: The request to quit was successfully posted.
   *   - PP_ERROR_BADRESOURCE: The message loop was invalid.
   *   - PP_ERROR_WRONG_THREAD: You are attempting to quit the main thread.
   *     The main thread's message loop is managed by the system and can't be
   *     quit.
   */
  int32_t (*${name})(PP_Resource message_loop, PP_Bool should_destroy)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2748428 "PPB_MessageLoop"
      visibility package stereotype "typedef" base_type class_ref 2748300 // PPB_MessageLoop_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5192460 // <dependency>
	relation 5192332 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5192460 // <dependency>
	  b parent class_ref 2748300 // PPB_MessageLoop_1_0
      end
    end

    class 2748556 "PPB_Messaging_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_Messaging</code> interface implemented
 * by the browser for sending messages to DOM elements associated with a
 * specific module instance.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_Messaging</code> interface is implemented by the browser
 * and is related to sending messages to JavaScript message event listeners on
 * the DOM element associated with specific module instance."
      attribute 9908108 "PostMessage"
	public explicit_type "/** * PostMessage() asynchronously invokes any listeners for message events on * the DOM element for the given module instance. A call to PostMessage() * will not block while the message is processed. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * @param[in] message A <code>PP_Var</code> containing the data to be sent to * JavaScript. * Message can have a numeric, boolean, or string value; arrays and * dictionaries are not yet supported. Ref-counted var types are copied, and * are therefore not shared between the module instance and the browser. * * Listeners for message events in JavaScript code will receive an object * conforming to the HTML 5 <code>MessageEvent</code> interface. * Specifically, the value of message will be contained as a property called * data in the received <code>MessageEvent</code>. * * This messaging system is similar to the system used for listening for * messages from Web Workers. Refer to * <code>http://www.whatwg.org/specs/web-workers/current-work/</code> for * further information. * * <strong>Example:</strong> * * @code * * <body> * <object id=\"plugin\" * type=\"application/x-ppapi-postMessage-example\"/> * <script type=\"text/javascript\"> * var plugin = document.getElementById('plugin'); * plugin.addEventListener(\"message\", * function(message) { alert(message.data); }, * false); * </script> * </body> * * @endcode * * The module instance then invokes PostMessage() as follows: * * @code * * char hello_world[] = \"Hello world!\"; * PP_Var hello_var = ppb_var_interface->VarFromUtf8(instance, * hello_world, * sizeof(hello_world)); * ppb_messaging_interface->PostMessage(instance, hello_var); // Copies var. * ppb_var_interface->Release(hello_var); * * @endcode * * The browser will pop-up an alert saying \"Hello world!\" */ void (*)(PP_Instance instance, struct PP_Var message)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * PostMessage() asynchronously invokes any listeners for message events on
   * the DOM element for the given module instance. A call to PostMessage()
   * will not block while the message is processed.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   * @param[in] message A <code>PP_Var</code> containing the data to be sent to
   * JavaScript.
   * Message can have a numeric, boolean, or string value; arrays and
   * dictionaries are not yet supported. Ref-counted var types are copied, and
   * are therefore not shared between the module instance and the browser.
   *
   * Listeners for message events in JavaScript code will receive an object
   * conforming to the HTML 5 <code>MessageEvent</code> interface.
   * Specifically, the value of message will be contained as a property called
   *  data in the received <code>MessageEvent</code>.
   *
   * This messaging system is similar to the system used for listening for
   * messages from Web Workers. Refer to
   * <code>http://www.whatwg.org/specs/web-workers/current-work/</code> for
   * further information.
   *
   * <strong>Example:</strong>
   *
   * @code
   *
   * <body>
   *   <object id=\"plugin\"
   *           type=\"application/x-ppapi-postMessage-example\"/>
   *   <script type=\"text/javascript\">
   *     var plugin = document.getElementById('plugin');
   *     plugin.addEventListener(\"message\",
   *                             function(message) { alert(message.data); },
   *                             false);
   *   </script>
   * </body>
   *
   * @endcode
   *
   * The module instance then invokes PostMessage() as follows:
   *
   * @code
   *
   *  char hello_world[] = \"Hello world!\";
   *  PP_Var hello_var = ppb_var_interface->VarFromUtf8(instance,
   *                                                    hello_world,
   *                                                    sizeof(hello_world));
   *  ppb_messaging_interface->PostMessage(instance, hello_var); // Copies var.
   *  ppb_var_interface->Release(hello_var);
   *
   * @endcode
   *
   * The browser will pop-up an alert saying \"Hello world!\"
   */
  void (*${name})(PP_Instance instance, struct PP_Var message)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2748684 "PPB_Messaging"
      visibility package stereotype "typedef" base_type class_ref 2748556 // PPB_Messaging_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5192588 // <dependency>
	relation 5192460 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5192588 // <dependency>
	  b parent class_ref 2748556 // PPB_Messaging_1_0
      end
    end

    class 2748812 "PP_MouseCursor_Type"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_MouseCursor</code> interface for setting
 * the mouse cursor.
 
*
 * @addtogroup Enums
 * @{
 
*
 * The <code>PP_MouseCursor_Type</code> enumeration lists the available stock
 * cursor types."
      attribute 9908236 "PP_MOUSECURSOR_TYPE_CUSTOM"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " -1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9908364 "PP_MOUSECURSOR_TYPE_POINTER"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9908492 "PP_MOUSECURSOR_TYPE_CROSS"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9908620 "PP_MOUSECURSOR_TYPE_HAND"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9908748 "PP_MOUSECURSOR_TYPE_IBEAM"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9908876 "PP_MOUSECURSOR_TYPE_WAIT"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9909004 "PP_MOUSECURSOR_TYPE_HELP"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9909132 "PP_MOUSECURSOR_TYPE_EASTRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9909260 "PP_MOUSECURSOR_TYPE_NORTHRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9909388 "PP_MOUSECURSOR_TYPE_NORTHEASTRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9909516 "PP_MOUSECURSOR_TYPE_NORTHWESTRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 9"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9909644 "PP_MOUSECURSOR_TYPE_SOUTHRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9909772 "PP_MOUSECURSOR_TYPE_SOUTHEASTRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 11"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9909900 "PP_MOUSECURSOR_TYPE_SOUTHWESTRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 12"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9910028 "PP_MOUSECURSOR_TYPE_WESTRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 13"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9910156 "PP_MOUSECURSOR_TYPE_NORTHSOUTHRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 14"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9910284 "PP_MOUSECURSOR_TYPE_EASTWESTRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 15"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9910412 "PP_MOUSECURSOR_TYPE_NORTHEASTSOUTHWESTRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 16"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9910540 "PP_MOUSECURSOR_TYPE_NORTHWESTSOUTHEASTRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 17"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9910668 "PP_MOUSECURSOR_TYPE_COLUMNRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 18"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9910796 "PP_MOUSECURSOR_TYPE_ROWRESIZE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 19"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9910924 "PP_MOUSECURSOR_TYPE_MIDDLEPANNING"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 20"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9911052 "PP_MOUSECURSOR_TYPE_EASTPANNING"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 21"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9911180 "PP_MOUSECURSOR_TYPE_NORTHPANNING"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 22"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9911308 "PP_MOUSECURSOR_TYPE_NORTHEASTPANNING"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 23"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9911436 "PP_MOUSECURSOR_TYPE_NORTHWESTPANNING"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 24"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9911564 "PP_MOUSECURSOR_TYPE_SOUTHPANNING"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 25"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9911692 "PP_MOUSECURSOR_TYPE_SOUTHEASTPANNING"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 26"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9911820 "PP_MOUSECURSOR_TYPE_SOUTHWESTPANNING"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 27"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9911948 "PP_MOUSECURSOR_TYPE_WESTPANNING"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 28"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9912076 "PP_MOUSECURSOR_TYPE_MOVE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 29"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9912204 "PP_MOUSECURSOR_TYPE_VERTICALTEXT"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 30"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9912332 "PP_MOUSECURSOR_TYPE_CELL"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 31"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9912460 "PP_MOUSECURSOR_TYPE_CONTEXTMENU"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 32"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9912588 "PP_MOUSECURSOR_TYPE_ALIAS"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 33"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9912716 "PP_MOUSECURSOR_TYPE_PROGRESS"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 34"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9912844 "PP_MOUSECURSOR_TYPE_NODROP"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 35"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9912972 "PP_MOUSECURSOR_TYPE_COPY"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 36"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9913100 "PP_MOUSECURSOR_TYPE_NONE"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 37"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9913228 "PP_MOUSECURSOR_TYPE_NOTALLOWED"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 38"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9913356 "PP_MOUSECURSOR_TYPE_ZOOMIN"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 39"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9913484 "PP_MOUSECURSOR_TYPE_ZOOMOUT"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 40"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9913612 "PP_MOUSECURSOR_TYPE_GRAB"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 41"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9913740 "PP_MOUSECURSOR_TYPE_GRABBING"
	public type class_ref 2748812 // PP_MouseCursor_Type
	init_value " 42
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2748940 "PPB_MouseCursor_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_MouseCursor</code> allows setting the mouse cursor."
      attribute 9913868 "SetCursor"
	public explicit_type "/** * Sets the given mouse cursor. The mouse cursor will be in effect whenever * the mouse is over the given instance until it is set again by another * call. Note that you can hide the mouse cursor by setting it to the * <code>PP_MOUSECURSOR_TYPE_NONE</code> type. * * This function allows setting both system defined mouse cursors and * custom cursors. To set a system-defined cursor, pass the type you want * and set the custom image to 0 and the hot spot to NULL. To set a custom * cursor, set the type to <code>PP_MOUSECURSOR_TYPE_CUSTOM</code> and * specify your image and hot spot. * * @param[in] instance A <code>PP_Instance</code> indentifying the instance * that the mouse cursor will affect. * * @param[in] type A <code>PP_MouseCursor_Type</code> identifying the type of * mouse cursor to show. * * @param[in] image A <code>PPB_ImageData</code> resource identifying the * custom image to set when the type is * <code>PP_MOUSECURSOR_TYPE_CUSTOM</code>. The image must be less than 32 * pixels in each direction and must be of the system's native image format. * When you are specifying a predefined cursor, this parameter must be 0. * * @param[in] hot_spot When setting a custom cursor, this idenfifies the * pixel position within the given image of the \"hot spot\" of the cursor. * When specifying a stock cursor, this parameter is ignored. * * @return PP_TRUE on success, or PP_FALSE if the instance or cursor type * is invalid, or if the image is too large. */ PP_Bool (*)(PP_Instance instance, enum PP_MouseCursor_Type type, PP_Resource image, const struct PP_Point* hot_spot)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Sets the given mouse cursor. The mouse cursor will be in effect whenever
   * the mouse is over the given instance until it is set again by another
   * call. Note that you can hide the mouse cursor by setting it to the
   * <code>PP_MOUSECURSOR_TYPE_NONE</code> type.
   *
   * This function allows setting both system defined mouse cursors and
   * custom cursors. To set a system-defined cursor, pass the type you want
   * and set the custom image to 0 and the hot spot to NULL. To set a custom
   * cursor, set the type to <code>PP_MOUSECURSOR_TYPE_CUSTOM</code> and
   * specify your image and hot spot.
   *
   * @param[in] instance A <code>PP_Instance</code> indentifying the instance
   * that the mouse cursor will affect.
   *
   * @param[in] type A <code>PP_MouseCursor_Type</code> identifying the type of
   * mouse cursor to show.
   *
   * @param[in] image A <code>PPB_ImageData</code> resource identifying the
   * custom image to set when the type is
   * <code>PP_MOUSECURSOR_TYPE_CUSTOM</code>. The image must be less than 32
   * pixels in each direction and must be of the system's native image format.
   * When you are specifying a predefined cursor, this parameter must be 0.
   *
   * @param[in] hot_spot When setting a custom cursor, this idenfifies the
   * pixel position within the given image of the \"hot spot\" of the cursor.
   * When specifying a stock cursor, this parameter is ignored.
   *
   * @return PP_TRUE on success, or PP_FALSE if the instance or cursor type
   * is invalid, or if the image is too large.
   */
  PP_Bool (*${name})(PP_Instance instance,
                       enum PP_MouseCursor_Type type,
                       PP_Resource image,
                       const struct PP_Point* hot_spot)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2749068 "PPB_MouseCursor"
      visibility package stereotype "typedef" base_type class_ref 2748940 // PPB_MouseCursor_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5192716 // <dependency>
	relation 5192588 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5192716 // <dependency>
	  b parent class_ref 2748940 // PPB_MouseCursor_1_0
      end
    end

    class 2749196 "PPB_MouseLock_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_MouseLock</code> interface for
 * locking the target of mouse events to a specific module instance.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_MouseLock</code> interface is implemented by the browser.
 * This interface provides a way of locking the target of mouse events to a
 * single module instance and removing the cursor from view. This mode is
 * useful for certain classes of applications, especially first-person
 * perspective 3D applications and 3D modeling software."
      attribute 9913996 "LockMouse"
	public explicit_type "/** * LockMouse() requests the mouse to be locked. * * While the mouse is locked, the cursor is implicitly hidden from the user. * Any movement of the mouse will generate a * <code>PP_INPUTEVENT_TYPE_MOUSEMOVE</code> event. The * <code>GetPosition()</code> function in the <code>PPB_MouseInputEvent</code> * interface reports the last known mouse position just as mouse lock was * entered. The <code>GetMovement()</code> function provides relative movement * information indicating what the change in position of the mouse would be * had it not been locked. * * The browser may revoke the mouse lock for reasons including (but not * limited to) the user pressing the ESC key, the user activating another * program using a reserved keystroke (e.g. ALT+TAB), or some other system * event. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon * completion. * * @return An int32_t containing an error code from <code>pp_errors.h</code>. */ int32_t (*)(PP_Instance instance, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * LockMouse() requests the mouse to be locked.
   *
   * While the mouse is locked, the cursor is implicitly hidden from the user.
   * Any movement of the mouse will generate a
   * <code>PP_INPUTEVENT_TYPE_MOUSEMOVE</code> event. The
   * <code>GetPosition()</code> function in the <code>PPB_MouseInputEvent</code>
   * interface reports the last known mouse position just as mouse lock was
   * entered. The <code>GetMovement()</code> function provides relative movement
   * information indicating what the change in position of the mouse would be
   * had it not been locked.
   *
   * The browser may revoke the mouse lock for reasons including (but not
   * limited to) the user pressing the ESC key, the user activating another
   * program using a reserved keystroke (e.g. ALT+TAB), or some other system
   * event.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   * @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
   * completion.
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   */
  int32_t (*${name})(PP_Instance instance,
                       struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9914124 "UnlockMouse"
	public explicit_type "/** * UnlockMouse() causes the mouse to be unlocked, allowing it to track user * movement again. This is an asynchronous operation. The module instance * will be notified using the <code>PPP_MouseLock</code> interface when it * has lost the mouse lock. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. */ void (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * UnlockMouse() causes the mouse to be unlocked, allowing it to track user
   * movement again. This is an asynchronous operation. The module instance
   * will be notified using the <code>PPP_MouseLock</code> interface when it
   * has lost the mouse lock.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   */
  void (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2749324 "PPB_MouseLock"
      visibility package stereotype "typedef" base_type class_ref 2749196 // PPB_MouseLock_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5192844 // <dependency>
	relation 5192716 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5192844 // <dependency>
	  b parent class_ref 2749196 // PPB_MouseLock_1_0
      end
    end

    class 2749452 "GLenum"
      visibility package stereotype "typedef" explicit_base_type "unsigned int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2749580 "GLvoid"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2749708 "GLintptr"
      visibility package stereotype "typedef" explicit_base_type "long int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2749836 "GLsizei"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2749964 "GLsizeiptr"
      visibility package stereotype "typedef" explicit_base_type "long int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2750092 "GLint"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2750220 "GLboolean"
      visibility package stereotype "typedef" explicit_base_type "unsigned char"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2750348 "GLuint"
      visibility package stereotype "typedef" explicit_base_type "unsigned int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2750476 "GLbitfield"
      visibility package stereotype "typedef" explicit_base_type "unsigned int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2750604 "GLshort"
      visibility package stereotype "typedef" explicit_base_type "short"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2750732 "GLfloat"
      visibility package stereotype "typedef" explicit_base_type "float"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2750860 "GLclampf"
      visibility package stereotype "typedef" explicit_base_type "float"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2750988 "GLbyte"
      visibility package stereotype "typedef" explicit_base_type "signed char"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2751116 "GLubyte"
      visibility package stereotype "typedef" explicit_base_type "unsigned char"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2751244 "GLfixed"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2751372 "GLushort"
      visibility package stereotype "typedef" explicit_base_type "unsigned short"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2751500 "GLclampx"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 2751628 "PPB_OpenGLES2"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9914252 "ActiveTexture"
	public explicit_type "void (*)(PP_Resource context, GLenum texture)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  void (*${name})(PP_Resource context, GLenum texture)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9914380 "AttachShader"
	public explicit_type "void (*)(PP_Resource context, GLuint program, GLuint shader)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint program, GLuint shader)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9914508 "BindAttribLocation"
	public explicit_type "void (*)( PP_Resource context, GLuint program, GLuint index, const char* name)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint program, GLuint index, const char* name)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9914636 "BindBuffer"
	public explicit_type "void (*)(PP_Resource context, GLenum target, GLuint buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum target, GLuint buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9914764 "BindFramebuffer"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLuint framebuffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLuint framebuffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9914892 "BindRenderbuffer"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLuint renderbuffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLuint renderbuffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9915020 "BindTexture"
	public explicit_type "void (*)(PP_Resource context, GLenum target, GLuint texture)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum target, GLuint texture)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9915148 "BlendColor"
	public explicit_type "void (*)( PP_Resource context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLclampf red, GLclampf green, GLclampf blue,
      GLclampf alpha)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9915276 "BlendEquation"
	public explicit_type "void (*)(PP_Resource context, GLenum mode)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum mode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9915404 "BlendEquationSeparate"
	public explicit_type "void (*)( PP_Resource context, GLenum modeRGB, GLenum modeAlpha)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum modeRGB, GLenum modeAlpha)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9915532 "BlendFunc"
	public explicit_type "void (*)(PP_Resource context, GLenum sfactor, GLenum dfactor)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum sfactor, GLenum dfactor)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9915660 "BlendFuncSeparate"
	public explicit_type "void (*)( PP_Resource context, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha,
      GLenum dstAlpha)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9915788 "BufferData"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLsizeiptr size, const void* data, GLenum usage)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLsizeiptr size, const void* data,
      GLenum usage)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9915916 "BufferSubData"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLintptr offset, GLsizeiptr size, const void* data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLintptr offset, GLsizeiptr size,
      const void* data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9916044 "CheckFramebufferStatus"
	public explicit_type "GLenum (*)(PP_Resource context, GLenum target)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLenum (*${name})(PP_Resource context, GLenum target)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9916172 "Clear"
	public explicit_type "void (*)(PP_Resource context, GLbitfield mask)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLbitfield mask)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9916300 "ClearColor"
	public explicit_type "void (*)( PP_Resource context, GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLclampf red, GLclampf green, GLclampf blue,
      GLclampf alpha)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9916428 "ClearDepthf"
	public explicit_type "void (*)(PP_Resource context, GLclampf depth)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLclampf depth)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9916556 "ClearStencil"
	public explicit_type "void (*)(PP_Resource context, GLint s)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLint s)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9916684 "ColorMask"
	public explicit_type "void (*)( PP_Resource context, GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLboolean red, GLboolean green, GLboolean blue,
      GLboolean alpha)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9916812 "CompileShader"
	public explicit_type "void (*)(PP_Resource context, GLuint shader)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint shader)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9916940 "CompressedTexImage2D"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void* data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLint level, GLenum internalformat,
      GLsizei width, GLsizei height, GLint border, GLsizei imageSize,
      const void* data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9917068 "CompressedTexSubImage2D"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void* data)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLint level, GLint xoffset,
      GLint yoffset, GLsizei width, GLsizei height, GLenum format,
      GLsizei imageSize, const void* data)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9917196 "CopyTexImage2D"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLint level, GLenum internalformat,
      GLint x, GLint y, GLsizei width, GLsizei height, GLint border)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9917324 "CopyTexSubImage2D"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLint level, GLint xoffset,
      GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9917452 "CreateProgram"
	public explicit_type "GLuint (*)(PP_Resource context)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLuint (*${name})(PP_Resource context)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9917580 "CreateShader"
	public explicit_type "GLuint (*)(PP_Resource context, GLenum type)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLuint (*${name})(PP_Resource context, GLenum type)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9917708 "CullFace"
	public explicit_type "void (*)(PP_Resource context, GLenum mode)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum mode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9917836 "DeleteBuffers"
	public explicit_type "void (*)(PP_Resource context, GLsizei n, const GLuint* buffers)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLsizei n, const GLuint* buffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9917964 "DeleteFramebuffers"
	public explicit_type "void (*)( PP_Resource context, GLsizei n, const GLuint* framebuffers)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLsizei n, const GLuint* framebuffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9918092 "DeleteProgram"
	public explicit_type "void (*)(PP_Resource context, GLuint program)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint program)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9918220 "DeleteRenderbuffers"
	public explicit_type "void (*)( PP_Resource context, GLsizei n, const GLuint* renderbuffers)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLsizei n, const GLuint* renderbuffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9918348 "DeleteShader"
	public explicit_type "void (*)(PP_Resource context, GLuint shader)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint shader)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9918476 "DeleteTextures"
	public explicit_type "void (*)( PP_Resource context, GLsizei n, const GLuint* textures)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLsizei n, const GLuint* textures)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9918604 "DepthFunc"
	public explicit_type "void (*)(PP_Resource context, GLenum func)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum func)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9918732 "DepthMask"
	public explicit_type "void (*)(PP_Resource context, GLboolean flag)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLboolean flag)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9918860 "DepthRangef"
	public explicit_type "void (*)(PP_Resource context, GLclampf zNear, GLclampf zFar)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLclampf zNear, GLclampf zFar)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9918988 "DetachShader"
	public explicit_type "void (*)(PP_Resource context, GLuint program, GLuint shader)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint program, GLuint shader)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9919116 "Disable"
	public explicit_type "void (*)(PP_Resource context, GLenum cap)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum cap)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9919244 "DisableVertexAttribArray"
	public explicit_type "void (*)(PP_Resource context, GLuint index)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint index)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9919372 "DrawArrays"
	public explicit_type "void (*)( PP_Resource context, GLenum mode, GLint first, GLsizei count)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum mode, GLint first, GLsizei count)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9919500 "DrawElements"
	public explicit_type "void (*)( PP_Resource context, GLenum mode, GLsizei count, GLenum type, const void* indices)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum mode, GLsizei count, GLenum type,
      const void* indices)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9919628 "Enable"
	public explicit_type "void (*)(PP_Resource context, GLenum cap)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum cap)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9919756 "EnableVertexAttribArray"
	public explicit_type "void (*)(PP_Resource context, GLuint index)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint index)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9919884 "Finish"
	public explicit_type "void (*)(PP_Resource context)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9920012 "Flush"
	public explicit_type "void (*)(PP_Resource context)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9920140 "FramebufferRenderbuffer"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum attachment,
      GLenum renderbuffertarget, GLuint renderbuffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9920268 "FramebufferTexture2D"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum attachment, GLenum textarget,
      GLuint texture, GLint level)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9920396 "FrontFace"
	public explicit_type "void (*)(PP_Resource context, GLenum mode)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum mode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9920524 "GenBuffers"
	public explicit_type "void (*)(PP_Resource context, GLsizei n, GLuint* buffers)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLsizei n, GLuint* buffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9920652 "GenerateMipmap"
	public explicit_type "void (*)(PP_Resource context, GLenum target)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum target)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9920780 "GenFramebuffers"
	public explicit_type "void (*)( PP_Resource context, GLsizei n, GLuint* framebuffers)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLsizei n, GLuint* framebuffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9920908 "GenRenderbuffers"
	public explicit_type "void (*)( PP_Resource context, GLsizei n, GLuint* renderbuffers)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLsizei n, GLuint* renderbuffers)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9921036 "GenTextures"
	public explicit_type "void (*)(PP_Resource context, GLsizei n, GLuint* textures)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLsizei n, GLuint* textures)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9921164 "GetActiveAttrib"
	public explicit_type "void (*)( PP_Resource context, GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint program, GLuint index, GLsizei bufsize,
      GLsizei* length, GLint* size, GLenum* type, char* name)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9921292 "GetActiveUniform"
	public explicit_type "void (*)( PP_Resource context, GLuint program, GLuint index, GLsizei bufsize, GLsizei* length, GLint* size, GLenum* type, char* name)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint program, GLuint index, GLsizei bufsize,
      GLsizei* length, GLint* size, GLenum* type, char* name)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9921420 "GetAttachedShaders"
	public explicit_type "void (*)( PP_Resource context, GLuint program, GLsizei maxcount, GLsizei* count, GLuint* shaders)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint program, GLsizei maxcount, GLsizei* count,
      GLuint* shaders)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9921548 "GetAttribLocation"
	public explicit_type "GLint (*)( PP_Resource context, GLuint program, const char* name)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLint (*${name})(
      PP_Resource context, GLuint program, const char* name)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9921676 "GetBooleanv"
	public explicit_type "void (*)(PP_Resource context, GLenum pname, GLboolean* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum pname, GLboolean* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9921804 "GetBufferParameteriv"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum pname, GLint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum pname, GLint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9921932 "GetError"
	public explicit_type "GLenum (*)(PP_Resource context)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLenum (*${name})(PP_Resource context)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9922060 "GetFloatv"
	public explicit_type "void (*)(PP_Resource context, GLenum pname, GLfloat* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum pname, GLfloat* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9922188 "GetFramebufferAttachmentParameteriv"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum attachment, GLenum pname, GLint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum attachment, GLenum pname,
      GLint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9922316 "GetIntegerv"
	public explicit_type "void (*)(PP_Resource context, GLenum pname, GLint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum pname, GLint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9922444 "GetProgramiv"
	public explicit_type "void (*)( PP_Resource context, GLuint program, GLenum pname, GLint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint program, GLenum pname, GLint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9922572 "GetProgramInfoLog"
	public explicit_type "void (*)( PP_Resource context, GLuint program, GLsizei bufsize, GLsizei* length, char* infolog)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint program, GLsizei bufsize, GLsizei* length,
      char* infolog)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9922700 "GetRenderbufferParameteriv"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum pname, GLint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum pname, GLint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9922828 "GetShaderiv"
	public explicit_type "void (*)( PP_Resource context, GLuint shader, GLenum pname, GLint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint shader, GLenum pname, GLint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9922956 "GetShaderInfoLog"
	public explicit_type "void (*)( PP_Resource context, GLuint shader, GLsizei bufsize, GLsizei* length, char* infolog)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint shader, GLsizei bufsize, GLsizei* length,
      char* infolog)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9923084 "GetShaderPrecisionFormat"
	public explicit_type "void (*)( PP_Resource context, GLenum shadertype, GLenum precisiontype, GLint* range, GLint* precision)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum shadertype, GLenum precisiontype,
      GLint* range, GLint* precision)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9923212 "GetShaderSource"
	public explicit_type "void (*)( PP_Resource context, GLuint shader, GLsizei bufsize, GLsizei* length, char* source)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint shader, GLsizei bufsize, GLsizei* length,
      char* source)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9923340 "GetString"
	const_attribute public explicit_type "GLubyte* (*)(PP_Resource context, GLenum name)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} GLubyte* (*${name})(PP_Resource context, GLenum name)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9923468 "GetTexParameterfv"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum pname, GLfloat* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum pname, GLfloat* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9923596 "GetTexParameteriv"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum pname, GLint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum pname, GLint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9923724 "GetUniformfv"
	public explicit_type "void (*)( PP_Resource context, GLuint program, GLint location, GLfloat* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint program, GLint location, GLfloat* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9923852 "GetUniformiv"
	public explicit_type "void (*)( PP_Resource context, GLuint program, GLint location, GLint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint program, GLint location, GLint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9923980 "GetUniformLocation"
	public explicit_type "GLint (*)( PP_Resource context, GLuint program, const char* name)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLint (*${name})(
      PP_Resource context, GLuint program, const char* name)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9924108 "GetVertexAttribfv"
	public explicit_type "void (*)( PP_Resource context, GLuint index, GLenum pname, GLfloat* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint index, GLenum pname, GLfloat* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9924236 "GetVertexAttribiv"
	public explicit_type "void (*)( PP_Resource context, GLuint index, GLenum pname, GLint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint index, GLenum pname, GLint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9924364 "GetVertexAttribPointerv"
	public explicit_type "void (*)( PP_Resource context, GLuint index, GLenum pname, void** pointer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint index, GLenum pname, void** pointer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9924492 "Hint"
	public explicit_type "void (*)(PP_Resource context, GLenum target, GLenum mode)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum target, GLenum mode)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9924620 "IsBuffer"
	public explicit_type "GLboolean (*)(PP_Resource context, GLuint buffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLboolean (*${name})(PP_Resource context, GLuint buffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9924748 "IsEnabled"
	public explicit_type "GLboolean (*)(PP_Resource context, GLenum cap)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLboolean (*${name})(PP_Resource context, GLenum cap)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9924876 "IsFramebuffer"
	public explicit_type "GLboolean (*)(PP_Resource context, GLuint framebuffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLboolean (*${name})(PP_Resource context, GLuint framebuffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9925004 "IsProgram"
	public explicit_type "GLboolean (*)(PP_Resource context, GLuint program)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLboolean (*${name})(PP_Resource context, GLuint program)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9925132 "IsRenderbuffer"
	public explicit_type "GLboolean (*)(PP_Resource context, GLuint renderbuffer)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLboolean (*${name})(PP_Resource context, GLuint renderbuffer)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9925260 "IsShader"
	public explicit_type "GLboolean (*)(PP_Resource context, GLuint shader)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLboolean (*${name})(PP_Resource context, GLuint shader)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9925388 "IsTexture"
	public explicit_type "GLboolean (*)(PP_Resource context, GLuint texture)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLboolean (*${name})(PP_Resource context, GLuint texture)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9925516 "LineWidth"
	public explicit_type "void (*)(PP_Resource context, GLfloat width)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLfloat width)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9925644 "LinkProgram"
	public explicit_type "void (*)(PP_Resource context, GLuint program)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint program)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9925772 "PixelStorei"
	public explicit_type "void (*)(PP_Resource context, GLenum pname, GLint param)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum pname, GLint param)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9925900 "PolygonOffset"
	public explicit_type "void (*)(PP_Resource context, GLfloat factor, GLfloat units)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLfloat factor, GLfloat units)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9926028 "ReadPixels"
	public explicit_type "void (*)( PP_Resource context, GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void* pixels)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint x, GLint y, GLsizei width, GLsizei height,
      GLenum format, GLenum type, void* pixels)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9926156 "ReleaseShaderCompiler"
	public explicit_type "void (*)(PP_Resource context)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9926284 "RenderbufferStorage"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum internalformat, GLsizei width,
      GLsizei height)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9926412 "SampleCoverage"
	public explicit_type "void (*)( PP_Resource context, GLclampf value, GLboolean invert)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLclampf value, GLboolean invert)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9926540 "Scissor"
	public explicit_type "void (*)( PP_Resource context, GLint x, GLint y, GLsizei width, GLsizei height)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint x, GLint y, GLsizei width, GLsizei height)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9926668 "ShaderBinary"
	public explicit_type "void (*)( PP_Resource context, GLsizei n, const GLuint* shaders, GLenum binaryformat, const void* binary, GLsizei length)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLsizei n, const GLuint* shaders,
      GLenum binaryformat, const void* binary, GLsizei length)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9926796 "ShaderSource"
	public explicit_type "void (*)( PP_Resource context, GLuint shader, GLsizei count, const char** str, const GLint* length)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint shader, GLsizei count, const char** str,
      const GLint* length)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9926924 "StencilFunc"
	public explicit_type "void (*)( PP_Resource context, GLenum func, GLint ref, GLuint mask)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum func, GLint ref, GLuint mask)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9927052 "StencilFuncSeparate"
	public explicit_type "void (*)( PP_Resource context, GLenum face, GLenum func, GLint ref, GLuint mask)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum face, GLenum func, GLint ref, GLuint mask)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9927180 "StencilMask"
	public explicit_type "void (*)(PP_Resource context, GLuint mask)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint mask)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9927308 "StencilMaskSeparate"
	public explicit_type "void (*)(PP_Resource context, GLenum face, GLuint mask)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum face, GLuint mask)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9927436 "StencilOp"
	public explicit_type "void (*)( PP_Resource context, GLenum fail, GLenum zfail, GLenum zpass)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum fail, GLenum zfail, GLenum zpass)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9927564 "StencilOpSeparate"
	public explicit_type "void (*)( PP_Resource context, GLenum face, GLenum fail, GLenum zfail, GLenum zpass)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum face, GLenum fail, GLenum zfail,
      GLenum zpass)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9927692 "TexImage2D"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void* pixels)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLint level, GLint internalformat,
      GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type,
      const void* pixels)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9927820 "TexParameterf"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum pname, GLfloat param)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum pname, GLfloat param)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9927948 "TexParameterfv"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum pname, const GLfloat* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum pname, const GLfloat* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9928076 "TexParameteri"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum pname, GLint param)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum pname, GLint param)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9928204 "TexParameteriv"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum pname, const GLint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum pname, const GLint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9928332 "TexSubImage2D"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void* pixels)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLint level, GLint xoffset,
      GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type,
      const void* pixels)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9928460 "Uniform1f"
	public explicit_type "void (*)(PP_Resource context, GLint location, GLfloat x)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLint location, GLfloat x)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9928588 "Uniform1fv"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLsizei count, const GLfloat* v)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLsizei count, const GLfloat* v)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9928716 "Uniform1i"
	public explicit_type "void (*)(PP_Resource context, GLint location, GLint x)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLint location, GLint x)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9928844 "Uniform1iv"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLsizei count, const GLint* v)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLsizei count, const GLint* v)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9928972 "Uniform2f"
	public explicit_type "void (*)(PP_Resource context, GLint location, GLfloat x, GLfloat y)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLint location, GLfloat x, GLfloat y)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9929100 "Uniform2fv"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLsizei count, const GLfloat* v)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLsizei count, const GLfloat* v)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9929228 "Uniform2i"
	public explicit_type "void (*)(PP_Resource context, GLint location, GLint x, GLint y)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLint location, GLint x, GLint y)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9929356 "Uniform2iv"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLsizei count, const GLint* v)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLsizei count, const GLint* v)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9929484 "Uniform3f"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLfloat x, GLfloat y, GLfloat z)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLfloat x, GLfloat y, GLfloat z)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9929612 "Uniform3fv"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLsizei count, const GLfloat* v)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLsizei count, const GLfloat* v)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9929740 "Uniform3i"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLint x, GLint y, GLint z)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLint x, GLint y, GLint z)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9929868 "Uniform3iv"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLsizei count, const GLint* v)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLsizei count, const GLint* v)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9929996 "Uniform4f"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLfloat x, GLfloat y, GLfloat z,
      GLfloat w)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9930124 "Uniform4fv"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLsizei count, const GLfloat* v)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLsizei count, const GLfloat* v)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9930252 "Uniform4i"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLint x, GLint y, GLint z, GLint w)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLint x, GLint y, GLint z, GLint w)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9930380 "Uniform4iv"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLsizei count, const GLint* v)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLsizei count, const GLint* v)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9930508 "UniformMatrix2fv"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLsizei count, GLboolean transpose,
      const GLfloat* value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9930636 "UniformMatrix3fv"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLsizei count, GLboolean transpose,
      const GLfloat* value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9930764 "UniformMatrix4fv"
	public explicit_type "void (*)( PP_Resource context, GLint location, GLsizei count, GLboolean transpose, const GLfloat* value)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint location, GLsizei count, GLboolean transpose,
      const GLfloat* value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9930892 "UseProgram"
	public explicit_type "void (*)(PP_Resource context, GLuint program)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint program)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9931020 "ValidateProgram"
	public explicit_type "void (*)(PP_Resource context, GLuint program)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint program)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9931148 "VertexAttrib1f"
	public explicit_type "void (*)(PP_Resource context, GLuint indx, GLfloat x)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLuint indx, GLfloat x)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9931276 "VertexAttrib1fv"
	public explicit_type "void (*)( PP_Resource context, GLuint indx, const GLfloat* values)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint indx, const GLfloat* values)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9931404 "VertexAttrib2f"
	public explicit_type "void (*)( PP_Resource context, GLuint indx, GLfloat x, GLfloat y)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint indx, GLfloat x, GLfloat y)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9931532 "VertexAttrib2fv"
	public explicit_type "void (*)( PP_Resource context, GLuint indx, const GLfloat* values)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint indx, const GLfloat* values)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9931660 "VertexAttrib3f"
	public explicit_type "void (*)( PP_Resource context, GLuint indx, GLfloat x, GLfloat y, GLfloat z)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint indx, GLfloat x, GLfloat y, GLfloat z)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9931788 "VertexAttrib3fv"
	public explicit_type "void (*)( PP_Resource context, GLuint indx, const GLfloat* values)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint indx, const GLfloat* values)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9931916 "VertexAttrib4f"
	public explicit_type "void (*)( PP_Resource context, GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint indx, GLfloat x, GLfloat y, GLfloat z,
      GLfloat w)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9932044 "VertexAttrib4fv"
	public explicit_type "void (*)( PP_Resource context, GLuint indx, const GLfloat* values)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint indx, const GLfloat* values)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9932172 "VertexAttribPointer"
	public explicit_type "void (*)( PP_Resource context, GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void* ptr)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint indx, GLint size, GLenum type,
      GLboolean normalized, GLsizei stride, const void* ptr)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9932300 "Viewport"
	public explicit_type "void (*)( PP_Resource context, GLint x, GLint y, GLsizei width, GLsizei height)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLint x, GLint y, GLsizei width, GLsizei height)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2751756 "PPB_OpenGLES2InstancedArrays"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9932428 "DrawArraysInstancedANGLE"
	public explicit_type "void (*)( PP_Resource context, GLenum mode, GLint first, GLsizei count, GLsizei primcount)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  void (*${name})(
      PP_Resource context, GLenum mode, GLint first, GLsizei count,
      GLsizei primcount)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9932556 "DrawElementsInstancedANGLE"
	public explicit_type "void (*)( PP_Resource context, GLenum mode, GLsizei count, GLenum type, const void* indices, GLsizei primcount)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum mode, GLsizei count, GLenum type,
      const void* indices, GLsizei primcount)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9932684 "VertexAttribDivisorANGLE"
	public explicit_type "void (*)( PP_Resource context, GLuint index, GLuint divisor)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint index, GLuint divisor)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2751884 "PPB_OpenGLES2FramebufferBlit"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9932812 "BlitFramebufferEXT"
	public explicit_type "void (*)( PP_Resource context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  void (*${name})(
      PP_Resource context, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1,
      GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask,
      GLenum filter)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2752012 "PPB_OpenGLES2FramebufferMultisample"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9932940 "RenderbufferStorageMultisampleEXT"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  void (*${name})(
      PP_Resource context, GLenum target, GLsizei samples,
      GLenum internalformat, GLsizei width, GLsizei height)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2752140 "PPB_OpenGLES2ChromiumEnableFeature"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9933068 "EnableFeatureCHROMIUM"
	public explicit_type "GLboolean (*)(PP_Resource context, const char* feature)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  GLboolean (*${name})(PP_Resource context, const char* feature)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2752268 "PPB_OpenGLES2ChromiumMapSub"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9933196 "MapBufferSubDataCHROMIUM"
	public explicit_type "void* (*)( PP_Resource context, GLuint target, GLintptr offset, GLsizeiptr size, GLenum access)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  void* (*${name})(
      PP_Resource context, GLuint target, GLintptr offset, GLsizeiptr size,
      GLenum access)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9933324 "UnmapBufferSubDataCHROMIUM"
	public explicit_type "void (*)(PP_Resource context, const void* mem)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, const void* mem)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9933452 "MapTexSubImage2DCHROMIUM"
	public explicit_type "void* (*)( PP_Resource context, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLenum access)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void* (*${name})(
      PP_Resource context, GLenum target, GLint level, GLint xoffset,
      GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type,
      GLenum access)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9933580 "UnmapTexSubImage2DCHROMIUM"
	public explicit_type "void (*)(PP_Resource context, const void* mem)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, const void* mem)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2752396 "PPB_OpenGLES2Query"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9933708 "GenQueriesEXT"
	public explicit_type "void (*)(PP_Resource context, GLsizei n, GLuint* queries)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  void (*${name})(PP_Resource context, GLsizei n, GLuint* queries)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9933836 "DeleteQueriesEXT"
	public explicit_type "void (*)( PP_Resource context, GLsizei n, const GLuint* queries)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLsizei n, const GLuint* queries)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9933964 "IsQueryEXT"
	public explicit_type "GLboolean (*)(PP_Resource context, GLuint id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  GLboolean (*${name})(PP_Resource context, GLuint id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9934092 "BeginQueryEXT"
	public explicit_type "void (*)(PP_Resource context, GLenum target, GLuint id)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum target, GLuint id)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9934220 "EndQueryEXT"
	public explicit_type "void (*)(PP_Resource context, GLenum target)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Resource context, GLenum target)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9934348 "GetQueryivEXT"
	public explicit_type "void (*)( PP_Resource context, GLenum target, GLenum pname, GLint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLenum target, GLenum pname, GLint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9934476 "GetQueryObjectuivEXT"
	public explicit_type "void (*)( PP_Resource context, GLuint id, GLenum pname, GLuint* params)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(
      PP_Resource context, GLuint id, GLenum pname, GLuint* params)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2752524 "PPB_URLLoader_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <strong>PPB_URLLoader</strong> interface for loading
 * URLs.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <strong>PPB_URLLoader</strong> interface contains pointers to functions
 * for loading URLs. The typical steps for loading a URL are:
 *
 * -# Call Create() to create a URLLoader object.
 * -# Create a <code>URLRequestInfo</code> object and set properties on it.
 * Refer to <code>PPB_URLRequestInfo</code> for further information.
 * -# Call Open() with the <code>URLRequestInfo</code> as an argument.
 * -# When Open() completes, call GetResponseInfo() to examine the response
 * headers. Refer to <code>PPB_URLResponseInfo</code> for further information.
 * -# Call ReadResponseBody() to stream the data for the response.
 *
 * Alternatively, if <code>PP_URLREQUESTPROPERTY_STREAMTOFILE</code> was set on
 * the <code>URLRequestInfo</code> in step #2:
 * - Call FinishStreamingToFile(), after examining the response headers
 * (step #4),  to wait for the downloaded file to be complete.
 * - Then, access the downloaded file using the GetBodyAsFileRef() function of
 * the <code>URLResponseInfo</code> returned in step #4."
      attribute 9934604 "Create"
	public explicit_type "/** * Create() creates a new <code>URLLoader</code> object. The * <code>URLLoader</code> is associated with a particular instance, so that * any UI dialogs that need to be shown to the user can be positioned * relative to the window containing the instance. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * * @return A <code>PP_Resource</code> corresponding to a URLLoader if * successful, 0 if the instance is invalid. */ PP_Resource (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Create() creates a new <code>URLLoader</code> object. The
   * <code>URLLoader</code> is associated with a particular instance, so that
   * any UI dialogs that need to be shown to the user can be positioned
   * relative to the window containing the instance.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   *
   * @return A <code>PP_Resource</code> corresponding to a URLLoader if
   * successful, 0 if the instance is invalid.
   */
  PP_Resource (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9934732 "IsURLLoader"
	public explicit_type "/** * IsURLLoader() determines if a resource is an <code>URLLoader</code>. * * @param[in] resource A <code>PP_Resource</code> corresponding to a * <code>URLLoader</code>. * * @return <code>PP_TRUE</code> if the resource is a <code>URLLoader</code>, * <code>PP_FALSE</code> if the resource is invalid or some type other * than <code>URLLoader</code>. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsURLLoader() determines if a resource is an <code>URLLoader</code>.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to a
   * <code>URLLoader</code>.
   *
   * @return <code>PP_TRUE</code> if the resource is a <code>URLLoader</code>,
   * <code>PP_FALSE</code> if the resource is invalid or some type other
   * than <code>URLLoader</code>.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9934860 "Open"
	public explicit_type "/** * Open() begins loading the <code>URLRequestInfo</code>. The operation * completes when response headers are received or when an error occurs. Use * GetResponseInfo() to access the response headers. * * @param[in] loader A <code>PP_Resource</code> corresponding to a * <code>URLLoader</code>. * @param[in] resource A <code>PP_Resource</code> corresponding to a * <code>URLRequestInfo</code>. * @param[in] callback A <code>PP_CompletionCallback</code> to run on * asynchronous completion of Open(). This callback will run when response * headers for the url are received or error occured. This callback * will only run if Open() returns <code>PP_OK_COMPLETIONPENDING</code>. * * @return An int32_t containing an error code from <code>pp_errors.h</code>. */ int32_t (*)(PP_Resource loader, PP_Resource request_info, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Open() begins loading the <code>URLRequestInfo</code>. The operation
   * completes when response headers are received or when an error occurs.  Use
   * GetResponseInfo() to access the response headers.
   *
   * @param[in] loader A <code>PP_Resource</code> corresponding to a
   * <code>URLLoader</code>.
   * @param[in] resource A <code>PP_Resource</code> corresponding to a
   * <code>URLRequestInfo</code>.
   * @param[in] callback A <code>PP_CompletionCallback</code> to run on
   * asynchronous completion of Open(). This callback will run when response
   * headers for the url are received or error occured. This callback
   * will only run if Open() returns <code>PP_OK_COMPLETIONPENDING</code>.
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   */
  int32_t (*${name})(PP_Resource loader,
                  PP_Resource request_info,
                  struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9934988 "FollowRedirect"
	public explicit_type "/** * FollowRedirect() can be invoked to follow a redirect after Open() * completed on receiving redirect headers. * * @param[in] loader A <code>PP_Resource</code> corresponding to a * <code>URLLoader</code>. * @param[in] callback A <code>PP_CompletionCallback</code> to run on * asynchronous completion of FollowRedirect(). This callback will run when * response headers for the redirect url are received or error occurred. This * callback will only run if FollowRedirect() returns * <code>PP_OK_COMPLETIONPENDING</code>. * * @return An int32_t containing an error code from <code>pp_errors.h</code>. */ int32_t (*)(PP_Resource loader, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * FollowRedirect() can be invoked to follow a redirect after Open()
   * completed on receiving redirect headers.
   *
   * @param[in] loader A <code>PP_Resource</code> corresponding to a
   * <code>URLLoader</code>.
   * @param[in] callback A <code>PP_CompletionCallback</code> to run on
   * asynchronous completion of FollowRedirect(). This callback will run when
   * response headers for the redirect url are received or error occurred. This
   * callback will only run if FollowRedirect() returns
   * <code>PP_OK_COMPLETIONPENDING</code>.
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   */
  int32_t (*${name})(PP_Resource loader,
                            struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5192972 // GetUploadProgress (<unidirectional association>)
	relation 5192844 --->
	  stereotype "PP_Bool(*${name})(PP_Resource loader,${type}*bytes_sent,int64_t*total_bytes_to_be_sent)"
	  a role_name "GetUploadProgress" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5192972 // GetUploadProgress (<unidirectional association>)
	  b parent class_ref 2603788 // int64_t
      end

      classrelation 5193100 // GetDownloadProgress (<unidirectional association>)
	relation 5192972 --->
	  stereotype "PP_Bool(*${name})(PP_Resource loader,${type}*bytes_received,int64_t*total_bytes_to_be_received)"
	  a role_name "GetDownloadProgress" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5193100 // GetDownloadProgress (<unidirectional association>)
	  b parent class_ref 2603788 // int64_t
      end

      attribute 9935116 "GetResponseInfo"
	public explicit_type "/** * GetResponseInfo() returns the current <code>URLResponseInfo</code> object. * * @param[in] instance A <code>PP_Resource</code> corresponding to a * <code>URLLoader</code>. * * @return A <code>PP_Resource</code> corresponding to the * <code>URLResponseInfo</code> if successful, 0 if the loader is not a valid * resource or if Open() has not been called. */ PP_Resource (*)(PP_Resource loader)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetResponseInfo() returns the current <code>URLResponseInfo</code> object.
   *
   * @param[in] instance A <code>PP_Resource</code> corresponding to a
   * <code>URLLoader</code>.
   *
   * @return A <code>PP_Resource</code> corresponding to the
   * <code>URLResponseInfo</code> if successful, 0 if the loader is not a valid
   * resource or if Open() has not been called.
   */
  PP_Resource (*${name})(PP_Resource loader)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9935244 "ReadResponseBody"
	public explicit_type "/** * ReadResponseBody() is used to read the response body. The size of the * buffer must be large enough to hold the specified number of bytes to read. * This function might perform a partial read. * * @param[in] loader A <code>PP_Resource</code> corresponding to a * <code>URLLoader</code>. * @param[in,out] buffer A pointer to the buffer for the response body. * @param[in] bytes_to_read The number of bytes to read. * @param[in] callback A <code>PP_CompletionCallback</code> to run on * asynchronous completion. The callback will run if the bytes (full or * partial) are read or an error occurs asynchronously. This callback will * run only if this function returns <code>PP_OK_COMPLETIONPENDING</code>. * * @return An int32_t containing the number of bytes read or an error code * from <code>pp_errors.h</code>. */ int32_t (*)(PP_Resource loader, void* buffer, int32_t bytes_to_read, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * ReadResponseBody() is used to read the response body. The size of the
   * buffer must be large enough to hold the specified number of bytes to read.
   * This function might perform a partial read.
   *
   * @param[in] loader A <code>PP_Resource</code> corresponding to a
   * <code>URLLoader</code>.
   * @param[in,out] buffer A pointer to the buffer for the response body.
   * @param[in] bytes_to_read The number of bytes to read.
   * @param[in] callback A <code>PP_CompletionCallback</code> to run on
   * asynchronous completion. The callback will run if the bytes (full or
   * partial) are read or an error occurs asynchronously. This callback will
   * run only if this function returns <code>PP_OK_COMPLETIONPENDING</code>.
   *
   * @return An int32_t containing the number of bytes read or an error code
   * from <code>pp_errors.h</code>.
   */
  int32_t (*${name})(PP_Resource loader,
                              void* buffer,
                              int32_t bytes_to_read,
                              struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9935372 "FinishStreamingToFile"
	public explicit_type "/** * FinishStreamingToFile() is used to wait for the response body to be * completely downloaded to the file provided by the GetBodyAsFileRef() * in the current <code>URLResponseInfo</code>. This function is only used if * <code>PP_URLREQUESTPROPERTY_STREAMTOFILE</code> was set on the * <code>URLRequestInfo</code> passed to Open(). * * @param[in] loader A <code>PP_Resource</code> corresponding to a * <code>URLLoader</code>. * @param[in] callback A <code>PP_CompletionCallback</code> to run on * asynchronous completion. This callback will run when body is downloaded * or an error occurs after FinishStreamingToFile() returns * <code>PP_OK_COMPLETIONPENDING</code>. * * @return An int32_t containing the number of bytes read or an error code * from <code>pp_errors.h</code>. */ int32_t (*)(PP_Resource loader, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * FinishStreamingToFile() is used to wait for the response body to be
   * completely downloaded to the file provided by the GetBodyAsFileRef()
   * in the current <code>URLResponseInfo</code>. This function is only used if
   * <code>PP_URLREQUESTPROPERTY_STREAMTOFILE</code> was set on the
   * <code>URLRequestInfo</code> passed to Open().
   *
   * @param[in] loader A <code>PP_Resource</code> corresponding to a
   * <code>URLLoader</code>.
   * @param[in] callback A <code>PP_CompletionCallback</code> to run on
   * asynchronous completion. This callback will run when body is downloaded
   * or an error occurs after FinishStreamingToFile() returns
   * <code>PP_OK_COMPLETIONPENDING</code>.
   *
   * @return An int32_t containing the number of bytes read or an error code
   * from <code>pp_errors.h</code>.
   */
  int32_t (*${name})(PP_Resource loader,
                                   struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9935500 "Close"
	public explicit_type "/** * Close is a pointer to a function used to cancel any pending IO and close * the <code>URLLoader</code> object. Any pending callbacks will still run, * reporting <code>PP_ERROR_ABORTED</code> if pending IO was interrupted. * It is NOT valid to call Open() again after a call to this function. * * <strong>Note:</strong> If the <code>URLLoader</code> object is destroyed * while it is still open, then it will be implicitly closed so you are not * required to call Close(). * * @param[in] loader A <code>PP_Resource</code> corresponding to a * <code>URLLoader</code>. */ void (*)(PP_Resource loader)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Close is a pointer to a function used to cancel any pending IO and close
   * the <code>URLLoader</code> object. Any pending callbacks will still run,
   * reporting <code>PP_ERROR_ABORTED</code> if pending IO was interrupted.
   * It is NOT valid to call Open() again after a call to this function.
   *
   * <strong>Note:</strong> If the <code>URLLoader</code> object is destroyed
   * while it is still open, then it will be implicitly closed so you are not
   * required to call Close().
   *
   * @param[in] loader A <code>PP_Resource</code> corresponding to a
   * <code>URLLoader</code>.
   */
  void (*${name})(PP_Resource loader)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2752652 "PPB_URLLoader"
      visibility package stereotype "typedef" base_type class_ref 2752524 // PPB_URLLoader_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5193228 // <dependency>
	relation 5193100 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5193228 // <dependency>
	  b parent class_ref 2752524 // PPB_URLLoader_1_0
      end
    end

    class 2752780 "PP_URLRequestProperty"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_URLRequestInfo</code> API for creating and
 * manipulating URL requests.
 
*
 * @addtogroup Enums
 * @{
 
*
 * This enumeration contains properties that can be set on a URL request."
      attribute 9935628 "PP_URLREQUESTPROPERTY_URL"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9935756 "PP_URLREQUESTPROPERTY_METHOD"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9935884 "PP_URLREQUESTPROPERTY_HEADERS"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9936012 "PP_URLREQUESTPROPERTY_STREAMTOFILE"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9936140 "PP_URLREQUESTPROPERTY_FOLLOWREDIRECTS"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9936268 "PP_URLREQUESTPROPERTY_RECORDDOWNLOADPROGRESS"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 5"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9936396 "PP_URLREQUESTPROPERTY_RECORDUPLOADPROGRESS"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 6"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9936524 "PP_URLREQUESTPROPERTY_CUSTOMREFERRERURL"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 7"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9936652 "PP_URLREQUESTPROPERTY_ALLOWCROSSORIGINREQUESTS"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 8"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9936780 "PP_URLREQUESTPROPERTY_ALLOWCREDENTIALS"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 9"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9936908 "PP_URLREQUESTPROPERTY_CUSTOMCONTENTTRANSFERENCODING"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 10"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9937036 "PP_URLREQUESTPROPERTY_PREFETCHBUFFERUPPERTHRESHOLD"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 11"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9937164 "PP_URLREQUESTPROPERTY_PREFETCHBUFFERLOWERTHRESHOLD"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 12"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9937292 "PP_URLREQUESTPROPERTY_CUSTOMUSERAGENT"
	public type class_ref 2752780 // PP_URLRequestProperty
	init_value " 13
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2752908 "PPB_URLRequestInfo_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_URLRequestInfo</code> interface is used to create
 * and handle URL requests. This API is used in conjunction with
 * <code>PPB_URLLoader</code>. Refer to <code>PPB_URLLoader</code> for further
 * information."
      attribute 9937420 "Create"
	public explicit_type "/** * Create() creates a new <code>URLRequestInfo</code> object. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * * @return A <code>PP_Resource</code> identifying the * <code>URLRequestInfo</code> if successful, 0 if the instance is invalid. */ PP_Resource (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Create() creates a new <code>URLRequestInfo</code> object.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   *
   * @return A <code>PP_Resource</code> identifying the
   * <code>URLRequestInfo</code> if successful, 0 if the instance is invalid.
   */
  PP_Resource (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9937548 "IsURLRequestInfo"
	public explicit_type "/** * IsURLRequestInfo() determines if a resource is a * <code>URLRequestInfo</code>. * * @param[in] resource A <code>PP_Resource</code> corresponding to a * <code>URLRequestInfo</code>. * * @return <code>PP_TRUE</code> if the resource is a * <code>URLRequestInfo</code>, <code>PP_FALSE</code> if the resource is * invalid or some type other than <code>URLRequestInfo</code>. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsURLRequestInfo() determines if a resource is a
   * <code>URLRequestInfo</code>.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to a
   * <code>URLRequestInfo</code>.
   *
   * @return <code>PP_TRUE</code> if the resource is a
   * <code>URLRequestInfo</code>, <code>PP_FALSE</code> if the resource is
   * invalid or some type other than <code>URLRequestInfo</code>.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9937676 "SetProperty"
	public explicit_type "/** * SetProperty() sets a request property. The value of the property must be * the correct type according to the property being set. * * @param[in] request A <code>PP_Resource</code> corresponding to a * <code>URLRequestInfo</code>. * @param[in] property A <code>PP_URLRequestProperty</code> identifying the * property to set. * @param[in] value A <code>PP_Var</code> containing the property value. * * @return <code>PP_TRUE</code> if successful, <code>PP_FALSE</code> if any * of the parameters are invalid. */ PP_Bool (*)(PP_Resource request, PP_URLRequestProperty property, struct PP_Var value)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * SetProperty() sets a request property. The value of the property must be
   * the correct type according to the property being set.
   *
   * @param[in] request A <code>PP_Resource</code> corresponding to a
   * <code>URLRequestInfo</code>.
   * @param[in] property A <code>PP_URLRequestProperty</code> identifying the
   * property to set.
   * @param[in] value A <code>PP_Var</code> containing the property value.
   *
   * @return <code>PP_TRUE</code> if successful, <code>PP_FALSE</code> if any
   * of the parameters are invalid.
   */
  PP_Bool (*${name})(PP_Resource request,
                         PP_URLRequestProperty property,
                         struct PP_Var value)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9937804 "AppendDataToBody"
	public explicit_type "/** * AppendDataToBody() appends data to the request body. A Content-Length * request header will be automatically generated. * * @param[in] request A <code>PP_Resource</code> corresponding to a * <code>URLRequestInfo</code>. * @param[in] data A pointer to a buffer holding the data. * @param[in] len The length, in bytes, of the data. * * @return <code>PP_TRUE</code> if successful, <code>PP_FALSE</code> if any * of the parameters are invalid. * * */ PP_Bool (*)(PP_Resource request, const void* data, uint32_t len)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * AppendDataToBody() appends data to the request body. A Content-Length
   * request header will be automatically generated.
   *
   * @param[in] request A <code>PP_Resource</code> corresponding to a
   * <code>URLRequestInfo</code>.
   * @param[in] data A pointer to a buffer holding the data.
   * @param[in] len The length, in bytes, of the data.
   *
   * @return <code>PP_TRUE</code> if successful, <code>PP_FALSE</code> if any
   * of the parameters are invalid.
   *
   *
   */
  PP_Bool (*${name})(PP_Resource request,
                              const void* data,
                              uint32_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9937932 "AppendFileToBody"
	public explicit_type "/** * AppendFileToBody() appends a file, to be uploaded, to the request body. * A content-length request header will be automatically generated. * * @param[in] request A <code>PP_Resource</code> corresponding to a * <code>URLRequestInfo</code>. * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file * reference. * @param[in] start_offset An optional starting point offset within the * file. * @param[in] number_of_bytes An optional number of bytes of the file to * be included. If <code>number_of_bytes</code> is -1, then the sub-range * to upload extends to the end of the file. * @param[in] expected_last_modified_time An optional (non-zero) last * modified time stamp used to validate that the file was not modified since * the given time before it was uploaded. The upload will fail with an error * code of <code>PP_ERROR_FILECHANGED</code> if the file has been modified * since the given time. If <code>expected_last_modified_time</code> is 0, * then no validation is performed. * * @return <code>PP_TRUE</code> if successful, <code>PP_FALSE</code> if any * of the parameters are invalid. */ PP_Bool (*)(PP_Resource request, PP_Resource file_ref, int64_t start_offset, int64_t number_of_bytes, PP_Time expected_last_modified_time)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * AppendFileToBody() appends a file, to be uploaded, to the request body.
   * A content-length request header will be automatically generated.
   *
   * @param[in] request A <code>PP_Resource</code> corresponding to a
   * <code>URLRequestInfo</code>.
   * @param[in] file_ref A <code>PP_Resource</code> corresponding to a file
   * reference.
   * @param[in] start_offset An optional starting point offset within the
   * file.
   * @param[in] number_of_bytes An optional number of bytes of the file to
   * be included. If <code>number_of_bytes</code> is -1, then the sub-range
   * to upload extends to the end of the file.
   * @param[in] expected_last_modified_time An optional (non-zero) last
   * modified time stamp used to validate that the file was not modified since
   * the given time before it was uploaded. The upload will fail with an error
   * code of <code>PP_ERROR_FILECHANGED</code> if the file has been modified
   * since the given time. If <code>expected_last_modified_time</code> is 0,
   * then no validation is performed.
   *
   * @return <code>PP_TRUE</code> if successful, <code>PP_FALSE</code> if any
   * of the parameters are invalid.
   */
  PP_Bool (*${name})(PP_Resource request,
                              PP_Resource file_ref,
                              int64_t start_offset,
                              int64_t number_of_bytes,
                              PP_Time expected_last_modified_time)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2753036 "PPB_URLRequestInfo"
      visibility package stereotype "typedef" base_type class_ref 2752908 // PPB_URLRequestInfo_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5193356 // <dependency>
	relation 5193228 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5193356 // <dependency>
	  b parent class_ref 2752908 // PPB_URLRequestInfo_1_0
      end
    end

    class 2753164 "PP_URLResponseProperty"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_URLResponseInfo</code> API for examining URL
 * responses.
 
*
 * @addtogroup Enums
 * @{
 
*
 * This enumeration contains properties set on a URL response."
      attribute 9938060 "PP_URLRESPONSEPROPERTY_URL"
	public type class_ref 2753164 // PP_URLResponseProperty
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9938188 "PP_URLRESPONSEPROPERTY_REDIRECTURL"
	public type class_ref 2753164 // PP_URLResponseProperty
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9938316 "PP_URLRESPONSEPROPERTY_REDIRECTMETHOD"
	public type class_ref 2753164 // PP_URLResponseProperty
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9938444 "PP_URLRESPONSEPROPERTY_STATUSCODE"
	public type class_ref 2753164 // PP_URLResponseProperty
	init_value " 3"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9938572 "PP_URLRESPONSEPROPERTY_STATUSLINE"
	public type class_ref 2753164 // PP_URLResponseProperty
	init_value " 4"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9938700 "PP_URLRESPONSEPROPERTY_HEADERS"
	public type class_ref 2753164 // PP_URLResponseProperty
	init_value " 5
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2753292 "PPB_URLResponseInfo_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The PPB_URLResponseInfo interface contains APIs for
 * examining URL responses. Refer to <code>PPB_URLLoader</code> for further
 * information."
      attribute 9938828 "IsURLResponseInfo"
	public explicit_type "/** * IsURLResponseInfo() determines if a response is a * <code>URLResponseInfo</code>. * * @param[in] resource A <code>PP_Resource</code> corresponding to a * <code>URLResponseInfo</code>. * * @return <code>PP_TRUE</code> if the resource is a * <code>URLResponseInfo</code>, <code>PP_FALSE</code> if the resource is * invalid or some type other than <code>URLResponseInfo</code>. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * IsURLResponseInfo() determines if a response is a
   * <code>URLResponseInfo</code>.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to a
   * <code>URLResponseInfo</code>.
   *
   * @return <code>PP_TRUE</code> if the resource is a
   * <code>URLResponseInfo</code>, <code>PP_FALSE</code> if the resource is
   * invalid or some type other than <code>URLResponseInfo</code>.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9938956 "GetProperty"
	public explicit_type "PP_Var (*)(PP_Resource response, PP_URLResponseProperty property)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Var (*${name})(PP_Resource response,
                               PP_URLResponseProperty property)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9939084 "GetBodyAsFileRef"
	public explicit_type "/** * GetBodyAsFileRef() returns a FileRef pointing to the file containing the * response body. This is only valid if * <code>PP_URLREQUESTPROPERTY_STREAMTOFILE</code> was set on the * <code>URLRequestInfo</code> used to produce this response. This file * remains valid until the <code>URLLoader</code> associated with this * <code>URLResponseInfo</code> is closed or destroyed. * * @param[in] request A <code>PP_Resource</code> corresponding to a * <code>URLResponseInfo</code>. * * @return A <code>PP_Resource</code> corresponding to a <code>FileRef</code> * if successful, 0 if <code>PP_URLREQUESTPROPERTY_STREAMTOFILE</code> was * not requested or if the <code>URLLoader</code> has not been opened yet. */ PP_Resource (*)(PP_Resource response)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetBodyAsFileRef() returns a FileRef pointing to the file containing the
   * response body.  This is only valid if
   * <code>PP_URLREQUESTPROPERTY_STREAMTOFILE</code> was set on the
   * <code>URLRequestInfo</code> used to produce this response.  This file
   * remains valid until the <code>URLLoader</code> associated with this
   * <code>URLResponseInfo</code> is closed or destroyed.
   *
   * @param[in] request A <code>PP_Resource</code> corresponding to a
   * <code>URLResponseInfo</code>.
   *
   * @return A <code>PP_Resource</code> corresponding to a <code>FileRef</code>
   * if successful, 0 if <code>PP_URLREQUESTPROPERTY_STREAMTOFILE</code> was
   * not requested or if the <code>URLLoader</code> has not been opened yet.
   */
  PP_Resource (*${name})(PP_Resource response)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2753420 "PPB_URLResponseInfo"
      visibility package stereotype "typedef" base_type class_ref 2753292 // PPB_URLResponseInfo_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5193484 // <dependency>
	relation 5193356 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5193484 // <dependency>
	  b parent class_ref 2753292 // PPB_URLResponseInfo_1_0
      end
    end

    class 2753548 "PPB_Var_1_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_Var</code> struct.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * PPB_Var API"
      attribute 9939212 "AddRef"
	public explicit_type "/** * AddRef() adds a reference to the given var. If this is not a refcounted * object, this function will do nothing so you can always call it no matter * what the type. * * @param[in] var A <code>PP_Var</code> that will have a reference added. */ void (*)(struct PP_Var var)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * AddRef() adds a reference to the given var. If this is not a refcounted
   * object, this function will do nothing so you can always call it no matter
   * what the type.
   *
   * @param[in] var A <code>PP_Var</code> that will have a reference added.
   */
  void (*${name})(struct PP_Var var)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9939340 "Release"
	public explicit_type "/** * Release() removes a reference to given var, deleting it if the internal * reference count becomes 0. If the given var is not a refcounted object, * this function will do nothing so you can always call it no matter what * the type. * * @param[in] var A <code>PP_Var</code> that will have a reference removed. */ void (*)(struct PP_Var var)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Release() removes a reference to given var, deleting it if the internal
   * reference count becomes 0. If the given var is not a refcounted object,
   * this function will do nothing so you can always call it no matter what
   * the type.
   *
   * @param[in] var A <code>PP_Var</code> that will have a reference removed.
   */
  void (*${name})(struct PP_Var var)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9939468 "VarFromUtf8"
	public explicit_type "PP_Var (*)(const char* data, uint32_t len)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Var (*${name})(const char* data, uint32_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9939596 "VarToUtf8"
	const_attribute public explicit_type "char* (*)(struct PP_Var var, uint32_t* len)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} char* (*${name})(struct PP_Var var, uint32_t* len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2753676 "PPB_Var"
      visibility package stereotype "typedef" base_type class_ref 2753548 // PPB_Var_1_1
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5193612 // <dependency>
	relation 5193484 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5193612 // <dependency>
	  b parent class_ref 2753548 // PPB_Var_1_1
      end
    end

    class 2753804 "PPB_Var_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9939724 "AddRef"
	public explicit_type "void (*)(struct PP_Var var)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  void (*${name})(struct PP_Var var)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9939852 "Release"
	public explicit_type "void (*)(struct PP_Var var)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(struct PP_Var var)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9939980 "VarFromUtf8"
	public explicit_type "PP_Var (*)(PP_Module module, const char* data, uint32_t len)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Var (*${name})(PP_Module module,
                               const char* data,
                               uint32_t len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9940108 "VarToUtf8"
	const_attribute public explicit_type "char* (*)(struct PP_Var var, uint32_t* len)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} char* (*${name})(struct PP_Var var, uint32_t* len)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2753932 "PPB_VarArrayBuffer_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_VarArrayBuffer</code> struct providing
 * a way to interact with JavaScript ArrayBuffers.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_VarArrayBuffer</code> interface provides a way to interact
 * with JavaScript ArrayBuffers, which represent a contiguous sequence of
 * bytes. Use <code>PPB_Var</code> to manage the reference count for a
 * <code>VarArrayBuffer</code>. Note that these Vars are not part of the
 * embedding page's DOM, and can only be shared with JavaScript using the
 * <code>PostMessage</code> and <code>HandleMessage</code> functions of
 * <code>pp::Instance</code>."
      attribute 9940236 "Create"
	public explicit_type "PP_Var (*)(uint32_t size_in_bytes)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Var (*${name})(uint32_t size_in_bytes)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5193740 // ByteLength (<unidirectional association>)
	relation 5193612 --->
	  stereotype "PP_Bool(*${name})(struct PP_Var array,${type}*byte_length)"
	  a role_name "ByteLength" public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5193740 // ByteLength (<unidirectional association>)
	  b parent class_ref 2345996 // uint32_t
      end

      attribute 9940364 "Map"
	public explicit_type "/** * Map() maps the <code>ArrayBuffer</code> in to the module's address space * and returns a pointer to the beginning of the buffer for the given * <code>ArrayBuffer PP_Var</code>. ArrayBuffers are copied when transmitted, * so changes to the underlying memory are not automatically available to * the embedding page. * * Note that calling Map() can be a relatively expensive operation. Use care * when calling it in performance-critical code. For example, you should call * it only once when looping over an <code>ArrayBuffer</code>. * * <strong>Example:</strong> * * @code * char* data = (char*)(array_buffer_if.Map(array_buffer_var)); * uint32_t byte_length = 0; * PP_Bool ok = array_buffer_if.ByteLength(array_buffer_var, &byte_length); * if (!ok) * return DoSomethingBecauseMyVarIsNotAnArrayBuffer(); * for (uint32_t i = 0; i < byte_length; ++i) * data[i] = 'A'; * @endcode * * @param[in] array The <code>ArrayBuffer</code> whose internal buffer should * be returned. * * @return A pointer to the internal buffer for this * <code>ArrayBuffer</code>. Returns <code>NULL</code> * if the given <code>PP_Var</code> is not of type * <code>PP_VARTYPE_ARRAY_BUFFER</code>. */ void* (*)(struct PP_Var array)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Map() maps the <code>ArrayBuffer</code> in to the module's address space
   * and returns a pointer to the beginning of the buffer for the given
   * <code>ArrayBuffer PP_Var</code>. ArrayBuffers are copied when transmitted,
   * so changes to the underlying memory are not automatically available to
   * the embedding page.
   *
   * Note that calling Map() can be a relatively expensive operation. Use care
   * when calling it in performance-critical code. For example, you should call
   * it only once when looping over an <code>ArrayBuffer</code>.
   *
   * <strong>Example:</strong>
   *
   * @code
   * char* data = (char*)(array_buffer_if.Map(array_buffer_var));
   * uint32_t byte_length = 0;
   * PP_Bool ok = array_buffer_if.ByteLength(array_buffer_var, &byte_length);
   * if (!ok)
   *   return DoSomethingBecauseMyVarIsNotAnArrayBuffer();
   * for (uint32_t i = 0; i < byte_length; ++i)
   *   data[i] = 'A';
   * @endcode
   *
   * @param[in] array The <code>ArrayBuffer</code> whose internal buffer should
   * be returned.
   *
   * @return A pointer to the internal buffer for this
   * <code>ArrayBuffer</code>. Returns <code>NULL</code>
   * if the given <code>PP_Var</code> is not of type
   * <code>PP_VARTYPE_ARRAY_BUFFER</code>.
   */
  void* (*${name})(struct PP_Var array)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9940492 "Unmap"
	public explicit_type "/** * Unmap() unmaps the given <code>ArrayBuffer</code> var from the module * address space. Use this if you want to save memory but might want to call * Map() to map the buffer again later. The <code>PP_Var</code> remains valid * and should still be released using <code>PPB_Var</code> when you are done * with the <code>ArrayBuffer</code>. * * @param[in] array The <code>ArrayBuffer</code> to be released. */ void (*)(struct PP_Var array)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Unmap() unmaps the given <code>ArrayBuffer</code> var from the module
   * address space. Use this if you want to save memory but might want to call
   * Map() to map the buffer again later. The <code>PP_Var</code> remains valid
   * and should still be released using <code>PPB_Var</code> when you are done
   * with the <code>ArrayBuffer</code>.
   *
   * @param[in] array The <code>ArrayBuffer</code> to be released.
   */
  void (*${name})(struct PP_Var array)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2754060 "PPB_VarArrayBuffer"
      visibility package stereotype "typedef" base_type class_ref 2753932 // PPB_VarArrayBuffer_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5193868 // <dependency>
	relation 5193740 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5193868 // <dependency>
	  b parent class_ref 2753932 // PPB_VarArrayBuffer_1_0
      end
    end

    class 2754188 "PPB_View_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_View</code> struct representing the state
 * of the view of an instance.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * <code>PPB_View</code> represents the state of the view of an instance.
 * You will receive new view information using
 * <code>PPP_Instance.DidChangeView</code>."
      attribute 9940620 "IsView"
	public explicit_type "/** * IsView() determines if the given resource is a valid * <code>PPB_View</code> resource. Note that <code>PPB_ViewChanged</code> * resources derive from <code>PPB_View</code> and will return true here * as well. * * @param resource A <code>PP_Resource</code> corresponding to a * <code>PPB_View</code> resource. * * @return <code>PP_TRUE</code> if the given resource supports * <code>PPB_View</code> or <code>PP_FALSE</code> if it is an invalid * resource or is a resource of another type. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * IsView() determines if the given resource is a valid
   * <code>PPB_View</code> resource. Note that <code>PPB_ViewChanged</code>
   * resources derive from <code>PPB_View</code> and will return true here
   * as well.
   *
   * @param resource A <code>PP_Resource</code> corresponding to a
   * <code>PPB_View</code> resource.
   *
   * @return <code>PP_TRUE</code> if the given resource supports
   * <code>PPB_View</code> or <code>PP_FALSE</code> if it is an invalid
   * resource or is a resource of another type.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9940748 "GetRect"
	public explicit_type "/** * GetRect() retrieves the rectangle of the module instance associated * with a view changed notification relative to the upper-left of the browser * viewport. This position changes when the page is scrolled. * * The returned rectangle may not be inside the visible portion of the * viewport if the module instance is scrolled off the page. Therefore, the * position may be negative or larger than the size of the page. The size will * always reflect the size of the module were it to be scrolled entirely into * view. * * In general, most modules will not need to worry about the position of the * module instance in the viewport, and only need to use the size. * * @param resource A <code>PP_Resource</code> corresponding to a * <code>PPB_View</code> resource. * * @param rect A <code>PP_Rect</code> receiving the rectangle on success. * * @return Returns <code>PP_TRUE</code> if the resource was valid and the * viewport rectangle was filled in, <code>PP_FALSE</code> if not. */ PP_Bool (*)(PP_Resource resource, struct PP_Rect* rect)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetRect() retrieves the rectangle of the module instance associated
   * with a view changed notification relative to the upper-left of the browser
   * viewport. This position changes when the page is scrolled.
   *
   * The returned rectangle may not be inside the visible portion of the
   * viewport if the module instance is scrolled off the page. Therefore, the
   * position may be negative or larger than the size of the page. The size will
   * always reflect the size of the module were it to be scrolled entirely into
   * view.
   *
   * In general, most modules will not need to worry about the position of the
   * module instance in the viewport, and only need to use the size.
   *
   * @param resource A <code>PP_Resource</code> corresponding to a
   * <code>PPB_View</code> resource.
   *
   * @param rect A <code>PP_Rect</code> receiving the rectangle on success.
   *
   * @return Returns <code>PP_TRUE</code> if the resource was valid and the
   * viewport rectangle was filled in, <code>PP_FALSE</code> if not.
   */
  PP_Bool (*${name})(PP_Resource resource, struct PP_Rect* rect)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9940876 "IsFullscreen"
	public explicit_type "/** * IsFullscreen() returns whether the instance is currently * displaying in fullscreen mode. * * @param resource A <code>PP_Resource</code> corresponding to a * <code>PPB_View</code> resource. * * @return <code>PP_TRUE</code> if the instance is in full screen mode, * or <code>PP_FALSE</code> if it's not or the resource is invalid. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsFullscreen() returns whether the instance is currently
   * displaying in fullscreen mode.
   *
   * @param resource A <code>PP_Resource</code> corresponding to a
   * <code>PPB_View</code> resource.
   *
   * @return <code>PP_TRUE</code> if the instance is in full screen mode,
   * or <code>PP_FALSE</code> if it's not or the resource is invalid.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9941004 "IsVisible"
	public explicit_type "/** * IsVisible() determines whether the module instance might be visible to * the user. For example, the Chrome window could be minimized or another * window could be over it. In both of these cases, the module instance * would not be visible to the user, but IsVisible() will return true. * * Use the result to speed up or stop updates for invisible module * instances. * * This function performs the duties of GetRect() (determining whether the * module instance is scrolled into view and the clip rectangle is nonempty) * and IsPageVisible() (whether the page is visible to the user). * * @param resource A <code>PP_Resource</code> corresponding to a * <code>PPB_View</code> resource. * * @return <code>PP_TRUE</code> if the instance might be visible to the * user, <code>PP_FALSE</code> if it is definitely not visible. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsVisible() determines whether the module instance might be visible to
   * the user. For example, the Chrome window could be minimized or another
   * window could be over it. In both of these cases, the module instance
   * would not be visible to the user, but IsVisible() will return true.
   *
   * Use the result to speed up or stop updates for invisible module
   * instances.
   *
   * This function performs the duties of GetRect() (determining whether the
   * module instance is scrolled into view and the clip rectangle is nonempty)
   * and IsPageVisible() (whether the page is visible to the user).
   *
   * @param resource A <code>PP_Resource</code> corresponding to a
   * <code>PPB_View</code> resource.
   *
   * @return <code>PP_TRUE</code> if the instance might be visible to the
   * user, <code>PP_FALSE</code> if it is definitely not visible.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9941132 "IsPageVisible"
	public explicit_type "/** * IsPageVisible() determines if the page that contains the module instance * is visible. The most common cause of invisible pages is that * the page is in a background tab in the browser. * * Most applications should use IsVisible() instead of this function since * the module instance could be scrolled off of a visible page, and this * function will still return true. However, depending on how your module * interacts with the page, there may be certain updates that you may want to * perform when the page is visible even if your specific module instance is * not visible. * * @param resource A <code>PP_Resource</code> corresponding to a * <code>PPB_View</code> resource. * * @return <code>PP_TRUE</code> if the instance is plausibly visible to the * user, <code>PP_FALSE</code> if it is definitely not visible. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsPageVisible() determines if the page that contains the module instance
   * is visible. The most common cause of invisible pages is that
   * the page is in a background tab in the browser.
   *
   * Most applications should use IsVisible() instead of this function since
   * the module instance could be scrolled off of a visible page, and this
   * function will still return true. However, depending on how your module
   * interacts with the page, there may be certain updates that you may want to
   * perform when the page is visible even if your specific module instance is
   * not visible.
   *
   * @param resource A <code>PP_Resource</code> corresponding to a
   * <code>PPB_View</code> resource.
   *
   * @return <code>PP_TRUE</code> if the instance is plausibly visible to the
   * user, <code>PP_FALSE</code> if it is definitely not visible.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9941260 "GetClipRect"
	public explicit_type "/** * GetClipRect() returns the clip rectangle relative to the upper-left corner * of the module instance. This rectangle indicates the portions of the module * instance that are scrolled into view. * * If the module instance is scrolled off the view, the return value will be * (0, 0, 0, 0). This clip rectangle does <i>not</i> take into account page * visibility. Therefore, if the module instance is scrolled into view, but * the page itself is on a tab that is not visible, the return rectangle will * contain the visible rectangle as though the page were visible. Refer to * IsPageVisible() and IsVisible() if you want to account for page * visibility. * * Most applications will not need to worry about the clip rectangle. The * recommended behavior is to do full updates if the module instance is * visible, as determined by IsVisible(), and do no updates if it is not * visible. * * However, if the cost for computing pixels is very high for your * application, or the pages you're targeting frequently have very large * module instances with small visible portions, you may wish to optimize * further. In this case, the clip rectangle will tell you which parts of * the module to update. * * Note that painting of the page and sending of view changed updates * happens asynchronously. This means when the user scrolls, for example, * it is likely that the previous backing store of the module instance will * be used for the first paint, and will be updated later when your * application generates new content with the new clip. This may cause * flickering at the boundaries when scrolling. If you do choose to do * partial updates, you may want to think about what color the invisible * portions of your backing store contain (be it transparent or some * background color) or to paint a certain region outside the clip to reduce * the visual distraction when this happens. * * @param resource A <code>PP_Resource</code> corresponding to a * <code>PPB_View</code> resource. * * @param clip Output argument receiving the clip rect on success. * * @return Returns <code>PP_TRUE</code> if the resource was valid and the * clip rect was filled in, <code>PP_FALSE</code> if not. */ PP_Bool (*)(PP_Resource resource, struct PP_Rect* clip)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetClipRect() returns the clip rectangle relative to the upper-left corner
   * of the module instance. This rectangle indicates the portions of the module
   * instance that are scrolled into view.
   *
   * If the module instance is scrolled off the view, the return value will be
   * (0, 0, 0, 0). This clip rectangle does <i>not</i> take into account page
   * visibility. Therefore, if the module instance is scrolled into view, but
   * the page itself is on a tab that is not visible, the return rectangle will
   * contain the visible rectangle as though the page were visible. Refer to
   * IsPageVisible() and IsVisible() if you want to account for page
   * visibility.
   *
   * Most applications will not need to worry about the clip rectangle. The
   * recommended behavior is to do full updates if the module instance is
   * visible, as determined by IsVisible(), and do no updates if it is not
   * visible.
   *
   * However, if the cost for computing pixels is very high for your
   * application, or the pages you're targeting frequently have very large
   * module instances with small visible portions, you may wish to optimize
   * further. In this case, the clip rectangle will tell you which parts of
   * the module to update.
   *
   * Note that painting of the page and sending of view changed updates
   * happens asynchronously. This means when the user scrolls, for example,
   * it is likely that the previous backing store of the module instance will
   * be used for the first paint, and will be updated later when your
   * application generates new content with the new clip. This may cause
   * flickering at the boundaries when scrolling. If you do choose to do
   * partial updates, you may want to think about what color the invisible
   * portions of your backing store contain (be it transparent or some
   * background color) or to paint a certain region outside the clip to reduce
   * the visual distraction when this happens.
   *
   * @param resource A <code>PP_Resource</code> corresponding to a
   * <code>PPB_View</code> resource.
   *
   * @param clip Output argument receiving the clip rect on success.
   *
   * @return Returns <code>PP_TRUE</code> if the resource was valid and the
   * clip rect was filled in, <code>PP_FALSE</code> if not.
   */
  PP_Bool (*${name})(PP_Resource resource, struct PP_Rect* clip)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2754316 "PPB_View"
      visibility package stereotype "typedef" base_type class_ref 2754188 // PPB_View_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5193996 // <dependency>
	relation 5193868 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5193996 // <dependency>
	  b parent class_ref 2754188 // PPB_View_1_0
      end
    end

    class 2754444 "PP_WebSocketReadyState"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPB_WebSocket</code> interface providing
 * bi-directional, full-duplex, communications over a single TCP socket.
 
*
 * @addtogroup Enums
 * @{
 
*
 * This enumeration contains the types representing the WebSocket ready state
 * and these states are based on the JavaScript WebSocket API specification.
 * GetReadyState() returns one of these states."
      attribute 9941388 "PP_WEBSOCKETREADYSTATE_INVALID"
	public type class_ref 2754444 // PP_WebSocketReadyState
	init_value " -1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9941516 "PP_WEBSOCKETREADYSTATE_CONNECTING"
	public type class_ref 2754444 // PP_WebSocketReadyState
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9941644 "PP_WEBSOCKETREADYSTATE_OPEN"
	public type class_ref 2754444 // PP_WebSocketReadyState
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9941772 "PP_WEBSOCKETREADYSTATE_CLOSING"
	public type class_ref 2754444 // PP_WebSocketReadyState
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9941900 "PP_WEBSOCKETREADYSTATE_CLOSED"
	public type class_ref 2754444 // PP_WebSocketReadyState
	init_value " 3
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2754572 "PP_WebSocketCloseCode"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * This enumeration contains status codes. These codes are used in Close() and
 * GetCloseCode(). Refer to RFC 6455, The WebSocket Protocol, for further
 * information.
 * <code>PP_WEBSOCKETSTATUSCODE_NORMAL_CLOSURE</code> and codes in the range
 * <code>PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MIN</code> to
 * <code>PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MAX</code>, and
 * <code>PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MIN</code> to
 * <code>PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MAX</code> are valid for Close()."
      attribute 9942028 "PP_WEBSOCKETSTATUSCODE_NOT_SPECIFIED"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1005"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9942156 "PP_WEBSOCKETSTATUSCODE_NORMAL_CLOSURE"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9942284 "PP_WEBSOCKETSTATUSCODE_GOING_AWAY"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1001"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9942412 "PP_WEBSOCKETSTATUSCODE_PROTOCOL_ERROR"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1002"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9942540 "PP_WEBSOCKETSTATUSCODE_UNSUPPORTED_DATA"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1003"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9942668 "PP_WEBSOCKETSTATUSCODE_NO_STATUS_RECEIVED"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1005"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9942796 "PP_WEBSOCKETSTATUSCODE_ABNORMAL_CLOSURE"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1006"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9942924 "PP_WEBSOCKETSTATUSCODE_INVALID_FRAME_PAYLOAD_DATA"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1007"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9943052 "PP_WEBSOCKETSTATUSCODE_POLICY_VIOLATION"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1008"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9943180 "PP_WEBSOCKETSTATUSCODE_MESSAGE_TOO_BIG"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1009"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9943308 "PP_WEBSOCKETSTATUSCODE_MANDATORY_EXTENSION"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1010"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9943436 "PP_WEBSOCKETSTATUSCODE_INTERNAL_SERVER_ERROR"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1011"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9943564 "PP_WEBSOCKETSTATUSCODE_TLS_HANDSHAKE"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 1015"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9943692 "PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MIN"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 3000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9943820 "PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MAX"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 3999"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9943948 "PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MIN"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 4000"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9944076 "PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MAX"
	public type class_ref 2754572 // PP_WebSocketCloseCode
	init_value " 4999
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2754700 "PPB_WebSocket_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @}
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPB_WebSocket</code> interface provides bi-directional,
 * full-duplex, communications over a single TCP socket."
      attribute 9944204 "Create"
	public explicit_type "/** * Create() creates a WebSocket instance. * * @param[in] instance A <code>PP_Instance</code> identifying the instance * with the WebSocket. * * @return A <code>PP_Resource</code> corresponding to a WebSocket if * successful. */ PP_Resource (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Create() creates a WebSocket instance.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying the instance
   * with the WebSocket.
   *
   * @return A <code>PP_Resource</code> corresponding to a WebSocket if
   * successful.
   */
  PP_Resource (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9944332 "IsWebSocket"
	public explicit_type "/** * IsWebSocket() determines if the provided <code>resource</code> is a * WebSocket instance. * * @param[in] resource A <code>PP_Resource</code> corresponding to a * WebSocket. * * @return Returns <code>PP_TRUE</code> if <code>resource</code> is a * <code>PPB_WebSocket</code>, <code>PP_FALSE</code> if the * <code>resource</code> is invalid or some type other than * <code>PPB_WebSocket</code>. */ PP_Bool (*)(PP_Resource resource)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * IsWebSocket() determines if the provided <code>resource</code> is a
   * WebSocket instance.
   *
   * @param[in] resource A <code>PP_Resource</code> corresponding to a
   * WebSocket.
   *
   * @return Returns <code>PP_TRUE</code> if <code>resource</code> is a
   * <code>PPB_WebSocket</code>, <code>PP_FALSE</code> if the
   * <code>resource</code> is invalid or some type other than
   * <code>PPB_WebSocket</code>.
   */
  PP_Bool (*${name})(PP_Resource resource)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9944460 "Connect"
	public explicit_type "/** * Connect() connects to the specified WebSocket server. You can call this * function once for a <code>web_socket</code>. * * @param[in] web_socket A <code>PP_Resource</code> corresponding to a * WebSocket. * * @param[in] url A <code>PP_Var</code> representing a WebSocket server URL. * The <code>PP_VarType</code> must be <code>PP_VARTYPE_STRING</code>. * * @param[in] protocols A pointer to an array of <code>PP_Var</code> * specifying sub-protocols. Each <code>PP_Var</code> represents one * sub-protocol and its <code>PP_VarType</code> must be * <code>PP_VARTYPE_STRING</code>. This argument can be null only if * <code>protocol_count</code> is 0. * * @param[in] protocol_count The number of sub-protocols in * <code>protocols</code>. * * @param[in] callback A <code>PP_CompletionCallback</code> called * when a connection is established or an error occurs in establishing * connection. * * @return An int32_t containing an error code from <code>pp_errors.h</code>. * Returns <code>PP_ERROR_BADARGUMENT</code> if the specified * <code>url</code>, or <code>protocols</code> contain an invalid string as * defined in the WebSocket API specification. * <code>PP_ERROR_BADARGUMENT</code> corresponds to a SyntaxError in the * WebSocket API specification. * Returns <code>PP_ERROR_NOACCESS</code> if the protocol specified in the * <code>url</code> is not a secure protocol, but the origin of the caller * has a secure scheme. Also returns <code>PP_ERROR_NOACCESS</code> if the * port specified in the <code>url</code> is a port that the user agent * is configured to block access to because it is a well-known port like * SMTP. <code>PP_ERROR_NOACCESS</code> corresponds to a SecurityError of the * specification. * Returns <code>PP_ERROR_INPROGRESS</code> if this is not the first call to * Connect(). */ int32_t (*)(PP_Resource web_socket, struct PP_Var url, const struct PP_Var protocols[], uint32_t protocol_count, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Connect() connects to the specified WebSocket server. You can call this
   * function once for a <code>web_socket</code>.
   *
   * @param[in] web_socket A <code>PP_Resource</code> corresponding to a
   * WebSocket.
   *
   * @param[in] url A <code>PP_Var</code> representing a WebSocket server URL.
   * The <code>PP_VarType</code> must be <code>PP_VARTYPE_STRING</code>.
   *
   * @param[in] protocols A pointer to an array of <code>PP_Var</code>
   * specifying sub-protocols. Each <code>PP_Var</code> represents one
   * sub-protocol and its <code>PP_VarType</code> must be
   * <code>PP_VARTYPE_STRING</code>. This argument can be null only if
   * <code>protocol_count</code> is 0.
   *
   * @param[in] protocol_count The number of sub-protocols in
   * <code>protocols</code>.
   *
   * @param[in] callback A <code>PP_CompletionCallback</code> called
   * when a connection is established or an error occurs in establishing
   * connection.
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   * Returns <code>PP_ERROR_BADARGUMENT</code> if the specified
   * <code>url</code>, or <code>protocols</code> contain an invalid string as
   * defined in the WebSocket API specification.
   * <code>PP_ERROR_BADARGUMENT</code> corresponds to a SyntaxError in the
   * WebSocket API specification.
   * Returns <code>PP_ERROR_NOACCESS</code> if the protocol specified in the
   * <code>url</code> is not a secure protocol, but the origin of the caller
   * has a secure scheme. Also returns <code>PP_ERROR_NOACCESS</code> if the
   * port specified in the <code>url</code> is a port that the user agent
   * is configured to block access to because it is a well-known port like
   * SMTP. <code>PP_ERROR_NOACCESS</code> corresponds to a SecurityError of the
   * specification.
   * Returns <code>PP_ERROR_INPROGRESS</code> if this is not the first call to
   * Connect().
   */
  int32_t (*${name})(PP_Resource web_socket,
                     struct PP_Var url,
                     const struct PP_Var protocols[],
                     uint32_t protocol_count,
                     struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9944588 "Close"
	public explicit_type "/** * Close() closes the specified WebSocket connection by specifying * <code>code</code> and <code>reason</code>. * * @param[in] web_socket A <code>PP_Resource</code> corresponding to a * WebSocket. * * @param[in] code The WebSocket close code. This is ignored if it is * <code>PP_WEBSOCKETSTATUSCODE_NOT_SPECIFIED</code>. * <code>PP_WEBSOCKETSTATUSCODE_NORMAL_CLOSURE</code> must be used for the * usual case. To indicate some specific error cases, codes in the range * <code>PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MIN</code> to * <code>PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MAX</code>, and in the range * <code>PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MIN</code> to * <code>PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MAX</code> are available. * * @param[in] reason A <code>PP_Var</code> representing the WebSocket * close reason. This is ignored if it is <code>PP_VARTYPE_UNDEFINED</code>. * Otherwise, its <code>PP_VarType</code> must be * <code>PP_VARTYPE_STRING</code>. * * @param[in] callback A <code>PP_CompletionCallback</code> called * when the connection is closed or an error occurs in closing the * connection. * * @return An int32_t containing an error code from <code>pp_errors.h</code>. * Returns <code>PP_ERROR_BADARGUMENT</code> if <code>reason</code> contains * an invalid character as a UTF-8 string, or is longer than 123 bytes. * <code>PP_ERROR_BADARGUMENT</code> corresponds to a JavaScript SyntaxError * in the WebSocket API specification. * Returns <code>PP_ERROR_NOACCESS</code> if the code is not an integer * equal to 1000 or in the range 3000 to 4999. <code>PP_ERROR_NOACCESS</code> * corresponds to an InvalidAccessError in the WebSocket API specification. * Returns <code>PP_ERROR_INPROGRESS</code> if a previous call to Close() is * not finished. */ int32_t (*)(PP_Resource web_socket, uint16_t code, struct PP_Var reason, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * Close() closes the specified WebSocket connection by specifying
   * <code>code</code> and <code>reason</code>.
   *
   * @param[in] web_socket A <code>PP_Resource</code> corresponding to a
   * WebSocket.
   *
   * @param[in] code The WebSocket close code. This is ignored if it is
   * <code>PP_WEBSOCKETSTATUSCODE_NOT_SPECIFIED</code>.
   * <code>PP_WEBSOCKETSTATUSCODE_NORMAL_CLOSURE</code> must be used for the
   * usual case. To indicate some specific error cases, codes in the range
   * <code>PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MIN</code> to
   * <code>PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MAX</code>, and in the range
   * <code>PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MIN</code> to
   * <code>PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MAX</code> are available.
   *
   * @param[in] reason A <code>PP_Var</code> representing the WebSocket
   * close reason. This is ignored if it is <code>PP_VARTYPE_UNDEFINED</code>.
   * Otherwise, its <code>PP_VarType</code> must be
   * <code>PP_VARTYPE_STRING</code>.
   *
   * @param[in] callback A <code>PP_CompletionCallback</code> called
   * when the connection is closed or an error occurs in closing the
   * connection.
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   * Returns <code>PP_ERROR_BADARGUMENT</code> if <code>reason</code> contains
   * an invalid character as a UTF-8 string, or is longer than 123 bytes.
   * <code>PP_ERROR_BADARGUMENT</code> corresponds to a JavaScript SyntaxError
   * in the WebSocket API specification.
   * Returns <code>PP_ERROR_NOACCESS</code> if the code is not an integer
   * equal to 1000 or in the range 3000 to 4999. <code>PP_ERROR_NOACCESS</code>
   * corresponds to an InvalidAccessError in the WebSocket API specification.
   * Returns <code>PP_ERROR_INPROGRESS</code> if a previous call to Close() is
   * not finished.
   */
  int32_t (*${name})(PP_Resource web_socket,
                   uint16_t code,
                   struct PP_Var reason,
                   struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9944716 "ReceiveMessage"
	public explicit_type "/** * ReceiveMessage() receives a message from the WebSocket server. * This interface only returns a single message. That is, this interface must * be called at least N times to receive N messages, no matter the size of * each message. * * @param[in] web_socket A <code>PP_Resource</code> corresponding to a * WebSocket. * * @param[out] message The received message is copied to provided * <code>message</code>. The <code>message</code> must remain valid until * ReceiveMessage() completes. Its received <code>PP_VarType</code> will be * <code>PP_VARTYPE_STRING</code> or <code>PP_VARTYPE_ARRAY_BUFFER</code>. * * @param[in] callback A <code>PP_CompletionCallback</code> called * when ReceiveMessage() completes. This callback is ignored if * ReceiveMessage() completes synchronously and returns <code>PP_OK</code>. * * @return An int32_t containing an error code from <code>pp_errors.h</code>. * If an error is detected or connection is closed, ReceiveMessage() returns * <code>PP_ERROR_FAILED</code> after all buffered messages are received. * Until buffered message become empty, ReceiveMessage() continues to return * <code>PP_OK</code> as if connection is still established without errors. */ int32_t (*)(PP_Resource web_socket, struct PP_Var* message, struct PP_CompletionCallback callback)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * ReceiveMessage() receives a message from the WebSocket server.
   * This interface only returns a single message. That is, this interface must
   * be called at least N times to receive N messages, no matter the size of
   * each message.
   *
   * @param[in] web_socket A <code>PP_Resource</code> corresponding to a
   * WebSocket.
   *
   * @param[out] message The received message is copied to provided
   * <code>message</code>. The <code>message</code> must remain valid until
   * ReceiveMessage() completes. Its received <code>PP_VarType</code> will be
   * <code>PP_VARTYPE_STRING</code> or <code>PP_VARTYPE_ARRAY_BUFFER</code>.
   *
   * @param[in] callback A <code>PP_CompletionCallback</code> called
   * when ReceiveMessage() completes. This callback is ignored if
   * ReceiveMessage() completes synchronously and returns <code>PP_OK</code>.
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   * If an error is detected or connection is closed, ReceiveMessage() returns
   * <code>PP_ERROR_FAILED</code> after all buffered messages are received.
   * Until buffered message become empty, ReceiveMessage() continues to return
   * <code>PP_OK</code> as if connection is still established without errors.
   */
  int32_t (*${name})(PP_Resource web_socket,
                            struct PP_Var* message,
                            struct PP_CompletionCallback callback)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9944844 "SendMessage"
	public explicit_type "/** * SendMessage() sends a message to the WebSocket server. * * @param[in] web_socket A <code>PP_Resource</code> corresponding to a * WebSocket. * * @param[in] message A message to send. The message is copied to an internal * buffer, so the caller can free <code>message</code> safely after returning * from the function. Its sent <code>PP_VarType</code> must be * <code>PP_VARTYPE_STRING</code> or <code>PP_VARTYPE_ARRAY_BUFFER</code>. * * @return An int32_t containing an error code from <code>pp_errors.h</code>. * Returns <code>PP_ERROR_FAILED</code> if the ReadyState is * <code>PP_WEBSOCKETREADYSTATE_CONNECTING</code>. * <code>PP_ERROR_FAILED</code> corresponds to a JavaScript * InvalidStateError in the WebSocket API specification. * Returns <code>PP_ERROR_BADARGUMENT</code> if the provided * <code>message</code> contains an invalid character as a UTF-8 string. * <code>PP_ERROR_BADARGUMENT</code> corresponds to a JavaScript * SyntaxError in the WebSocket API specification. * Otherwise, returns <code>PP_OK</code>, which doesn't necessarily mean * that the server received the message. */ int32_t (*)(PP_Resource web_socket, struct PP_Var message)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * SendMessage() sends a message to the WebSocket server.
   *
   * @param[in] web_socket A <code>PP_Resource</code> corresponding to a
   * WebSocket.
   *
   * @param[in] message A message to send. The message is copied to an internal
   * buffer, so the caller can free <code>message</code> safely after returning
   * from the function. Its sent <code>PP_VarType</code> must be
   * <code>PP_VARTYPE_STRING</code> or <code>PP_VARTYPE_ARRAY_BUFFER</code>.
   *
   * @return An int32_t containing an error code from <code>pp_errors.h</code>.
   * Returns <code>PP_ERROR_FAILED</code> if the ReadyState is
   * <code>PP_WEBSOCKETREADYSTATE_CONNECTING</code>.
   * <code>PP_ERROR_FAILED</code> corresponds to a JavaScript
   * InvalidStateError in the WebSocket API specification.
   * Returns <code>PP_ERROR_BADARGUMENT</code> if the provided
   * <code>message</code> contains an invalid character as a UTF-8 string.
   * <code>PP_ERROR_BADARGUMENT</code> corresponds to a JavaScript
   * SyntaxError in the WebSocket API specification.
   * Otherwise, returns <code>PP_OK</code>, which doesn't necessarily mean
   * that the server received the message.
   */
  int32_t (*${name})(PP_Resource web_socket, struct PP_Var message)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9944972 "GetBufferedAmount"
	public explicit_type "/** * GetBufferedAmount() returns the number of bytes of text and binary * messages that have been queued for the WebSocket connection to send, but * have not been transmitted to the network yet. * * @param[in] web_socket A <code>PP_Resource</code> corresponding to a * WebSocket. * * @return Returns the number of bytes. */ uint64_t (*)(PP_Resource web_socket)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetBufferedAmount() returns the number of bytes of text and binary
   * messages that have been queued for the WebSocket connection to send, but
   * have not been transmitted to the network yet.
   *
   * @param[in] web_socket A <code>PP_Resource</code> corresponding to a
   * WebSocket.
   *
   * @return Returns the number of bytes.
   */
  uint64_t (*${name})(PP_Resource web_socket)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9945100 "GetCloseCode"
	public explicit_type "/** * GetCloseCode() returns the connection close code for the WebSocket * connection. * * @param[in] web_socket A <code>PP_Resource</code> corresponding to a * WebSocket. * * @return Returns 0 if called before the close code is set. */ uint16_t (*)(PP_Resource web_socket)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetCloseCode() returns the connection close code for the WebSocket
   * connection.
   *
   * @param[in] web_socket A <code>PP_Resource</code> corresponding to a
   * WebSocket.
   *
   * @return Returns 0 if called before the close code is set.
   */
  uint16_t (*${name})(PP_Resource web_socket)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9945228 "GetCloseReason"
	public explicit_type "PP_Var (*)(PP_Resource web_socket)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Var (*${name})(PP_Resource web_socket)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9945356 "GetCloseWasClean"
	public explicit_type "/** * GetCloseWasClean() returns if the connection was closed cleanly for the * specified WebSocket connection. * * @param[in] web_socket A <code>PP_Resource</code> corresponding to a * WebSocket. * * @return Returns <code>PP_FALSE</code> if called before the connection is * closed, called on an invalid resource, or closed for abnormal reasons. * Otherwise, returns <code>PP_TRUE</code> if the connection was closed * cleanly. */ PP_Bool (*)(PP_Resource web_socket)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetCloseWasClean() returns if the connection was closed cleanly for the
   * specified WebSocket connection.
   *
   * @param[in] web_socket A <code>PP_Resource</code> corresponding to a
   * WebSocket.
   *
   * @return Returns <code>PP_FALSE</code> if called before the connection is
   * closed, called on an invalid resource, or closed for abnormal reasons.
   * Otherwise, returns <code>PP_TRUE</code> if the connection was closed
   * cleanly.
   */
  PP_Bool (*${name})(PP_Resource web_socket)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9945484 "GetExtensions"
	public explicit_type "PP_Var (*)(PP_Resource web_socket)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Var (*${name})(PP_Resource web_socket)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9945612 "GetProtocol"
	public explicit_type "PP_Var (*)(PP_Resource web_socket)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Var (*${name})(PP_Resource web_socket)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9945740 "GetReadyState"
	public explicit_type "/** * GetReadyState() returns the ready state of the specified WebSocket * connection. * * @param[in] web_socket A <code>PP_Resource</code> corresponding to a * WebSocket. * * @return Returns <code>PP_WEBSOCKETREADYSTATE_INVALID</code> if called * before Connect() is called, or if this function is called on an * invalid resource. */ PP_WebSocketReadyState (*)(PP_Resource web_socket)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * GetReadyState() returns the ready state of the specified WebSocket
   * connection.
   *
   * @param[in] web_socket A <code>PP_Resource</code> corresponding to a
   * WebSocket.
   *
   * @return Returns <code>PP_WEBSOCKETREADYSTATE_INVALID</code> if called
   * before Connect() is called, or if this function is called on an
   * invalid resource.
   */
  PP_WebSocketReadyState (*${name})(PP_Resource web_socket)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9945868 "GetURL"
	public explicit_type "PP_Var (*)(PP_Resource web_socket)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const} PP_Var (*${name})(PP_Resource web_socket)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2754828 "PPB_WebSocket"
      visibility package stereotype "typedef" base_type class_ref 2754700 // PPB_WebSocket_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5194124 // <dependency>
	relation 5193996 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5194124 // <dependency>
	  b parent class_ref 2754700 // PPB_WebSocket_1_0
      end
    end

    class 2754956 "PP_InitializeModule_Func"
      visibility package stereotype "typedef" base_type class_ref 2409996 // int32_t
      cpp_decl "${comment}typedef ${type}(* ${name})(
    PP_Module module,
    PPB_GetInterface get_browser_interface);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @addtogroup Typedefs
 * @{
 
*
 * Defines the type of the <code>PPP_InitializeModule</code> function."
      classrelation 5194252 // <dependency>
	relation 5194124 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5194252 // <dependency>
	  b parent class_ref 2409996 // int32_t
      end
    end

    class 2755084 "PP_ShutdownModule_Func"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}(* ${name})(void);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Defines the type of the <code>PPP_ShutdownModule</code> function."
    end

    class 2755212 "PP_GetInterface_Func"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef  const ${type}* (* ${name})(const char* interface_name);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Defines the type of the <code>PPP_ShutdownModule</code> function."
    end

    class 2755340 "PPP_Graphics3D_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * Defines the <code>PPP_Graphics3D</code> struct representing a 3D graphics
 * context within the browser.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * <code>PPP_Graphics3D</code> defines the notification interface for a 3D
 * graphics context."
      attribute 9945996 "Graphics3DContextLost"
	public explicit_type "/** * Called when the OpenGL ES window is invalidated and needs to be repainted. */ void (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Called when the OpenGL ES window is invalidated and needs to be repainted.
   */
  void (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2755468 "PPP_Graphics3D"
      visibility package stereotype "typedef" base_type class_ref 2755340 // PPP_Graphics3D_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5194380 // <dependency>
	relation 5194252 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5194380 // <dependency>
	  b parent class_ref 2755340 // PPP_Graphics3D_1_0
      end
    end

    class 2755596 "PPP_InputEvent_0_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the API for receiving input events from the browser.
 
*
 * @addtogroup Interfaces
 * @{"
      attribute 9946124 "HandleInputEvent"
	public explicit_type "/** * Function for receiving input events from the browser. * * In order to receive input events, you must register for them by calling * PPB_InputEvent.RequestInputEvents() or RequestFilteringInputEvents(). By * default, no events are delivered. * * If the event was handled, it will not be forwarded to the web page or * browser. If it was not handled, it will bubble according to the normal * rules. So it is important that an instance respond accurately with whether * event propagation should continue. * * Event propagation also controls focus. If you handle an event like a mouse * event, typically the instance will be given focus. Returning false from * a filtered event handler or not registering for an event type means that * the click will be given to a lower part of the page and your instance will * not receive focus. This allows an instance to be partially transparent, * where clicks on the transparent areas will behave like clicks to the * underlying page. * * In general, you should try to keep input event handling short. Especially * for filtered input events, the browser or page may be blocked waiting for * you to respond. * * The caller of this function will maintain a reference to the input event * resource during this call. Unless you take a reference to the resource * to hold it for later, you don't need to release it. * * <strong>Note:</strong> If you're not receiving input events, make sure you * register for the event classes you want by calling RequestInputEvents or * RequestFilteringInputEvents. If you're still not receiving keyboard input * events, make sure you're returning true (or using a non-filtered event * handler) for mouse events. Otherwise, the instance will not receive focus * and keyboard events will not be sent. * * \\see PPB_InputEvent.RequestInputEvents and * PPB_InputEvent.RequestFilteringInputEvents * * @return PP_TRUE if the event was handled, PP_FALSE if not. If you have * registered to filter this class of events by calling * RequestFilteringInputEvents, and you return PP_FALSE, the event will * be forwarded to the page (and eventually the browser) for the default * handling. For non-filtered events, the return value will be ignored. */ PP_Bool (*)(PP_Instance instance, PP_Resource input_event)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * Function for receiving input events from the browser.
   *
   * In order to receive input events, you must register for them by calling
   * PPB_InputEvent.RequestInputEvents() or RequestFilteringInputEvents(). By
   * default, no events are delivered.
   *
   * If the event was handled, it will not be forwarded to the web page or
   * browser. If it was not handled, it will bubble according to the normal
   * rules. So it is important that an instance respond accurately with whether
   * event propagation should continue.
   *
   * Event propagation also controls focus. If you handle an event like a mouse
   * event, typically the instance will be given focus. Returning false from
   * a filtered event handler or not registering for an event type means that
   * the click will be given to a lower part of the page and your instance will
   * not receive focus. This allows an instance to be partially transparent,
   * where clicks on the transparent areas will behave like clicks to the
   * underlying page.
   *
   * In general, you should try to keep input event handling short. Especially
   * for filtered input events, the browser or page may be blocked waiting for
   * you to respond.
   *
   * The caller of this function will maintain a reference to the input event
   * resource during this call. Unless you take a reference to the resource
   * to hold it for later, you don't need to release it.
   *
   * <strong>Note:</strong> If you're not receiving input events, make sure you
   * register for the event classes you want by calling RequestInputEvents or
   * RequestFilteringInputEvents. If you're still not receiving keyboard input
   * events, make sure you're returning true (or using a non-filtered event
   * handler) for mouse events. Otherwise, the instance will not receive focus
   * and keyboard events will not be sent.
   *
   * \\see PPB_InputEvent.RequestInputEvents and
   * PPB_InputEvent.RequestFilteringInputEvents
   *
   * @return PP_TRUE if the event was handled, PP_FALSE if not. If you have
   * registered to filter this class of events by calling
   * RequestFilteringInputEvents, and you return PP_FALSE, the event will
   * be forwarded to the page (and eventually the browser) for the default
   * handling. For non-filtered events, the return value will be ignored.
   */
  PP_Bool (*${name})(PP_Instance instance, PP_Resource input_event)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2755724 "PPP_InputEvent"
      visibility package stereotype "typedef" base_type class_ref 2755596 // PPP_InputEvent_0_1
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5194508 // <dependency>
	relation 5194380 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5194508 // <dependency>
	  b parent class_ref 2755596 // PPP_InputEvent_0_1
      end
    end

    class 2755852 "PPP_Instance_1_1"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPP_Instance</code> structure - a series of
 * pointers to methods that you must implement in your module.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPP_Instance</code> interface contains pointers to a series of
 * functions that you must implement in your module. These functions can be
 * trivial (simply return the default return value) unless you want your module
 * to handle events such as change of focus or input events (keyboard/mouse)
 * events."
      attribute 9946252 "DidCreate"
	public explicit_type "/** * DidCreate() is a creation handler that is called when a new instance is * created. This function is called for each instantiation on the page, * corresponding to one \\<embed\\> tag on the page. * * Generally you would handle this call by initializing the information * your module associates with an instance and creating a mapping from the * given <code>PP_Instance</code> handle to this data. The * <code>PP_Instance</code> handle will be used in subsequent calls to * identify which instance the call pertains to. * * It's possible for more than one instance to be created in a single module. * This means that you may get more than one <code>OnCreate</code> without an * <code>OnDestroy</code> in between, and should be prepared to maintain * multiple states associated with each instance. * * If this function reports a failure (by returning <code>PP_FALSE</code>), * the instance will be deleted. * * @param[in] instance A new <code>PP_Instance</code> identifying one * instance of a module. This is an opaque handle. * * @param[in] argc The number of arguments contained in <code>argn</code> * and <code>argv</code>. * * @param[in] argn An array of argument names. These argument names are * supplied in the \\<embed\\> tag, for example: * <code>\\<embed id=\"nacl_module\" dimensions=\"2\"\\></code> will produce two * argument names: \"id\" and \"dimensions.\" * * @param[in] argv An array of argument values. These are the values of the * arguments listed in the \\<embed\\> tag, for example * <code>\\<embed id=\"nacl_module\" dimensions=\"2\"\\></code> will produce two * argument values: \"nacl_module\" and \"2\". The indices of these values match * the indices of the corresponding names in <code>argn</code>. * * @return <code>PP_TRUE</code> on success or <code>PP_FALSE</code> on * failure. */ PP_Bool (*)(PP_Instance instance, uint32_t argc, const char* argn[], const char* argv[])"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * DidCreate() is a creation handler that is called when a new instance is
   * created. This function is called for each instantiation on the page,
   * corresponding to one \\<embed\\> tag on the page.
   *
   * Generally you would handle this call by initializing the information
   * your module associates with an instance and creating a mapping from the
   * given <code>PP_Instance</code> handle to this data. The
   * <code>PP_Instance</code> handle will be used in subsequent calls to
   * identify which instance the call pertains to.
   *
   * It's possible for more than one instance to be created in a single module.
   * This means that you may get more than one <code>OnCreate</code> without an
   * <code>OnDestroy</code> in between, and should be prepared to maintain
   * multiple states associated with each instance.
   *
   * If this function reports a failure (by returning <code>PP_FALSE</code>),
   * the instance will be deleted.
   *
   * @param[in] instance A new <code>PP_Instance</code> identifying one
   * instance of a module. This is an opaque handle.
   *
   * @param[in] argc The number of arguments contained in <code>argn</code>
   * and <code>argv</code>.
   *
   * @param[in] argn An array of argument names.  These argument names are
   * supplied in the \\<embed\\> tag, for example:
   * <code>\\<embed id=\"nacl_module\" dimensions=\"2\"\\></code> will produce two
   * argument names: \"id\" and \"dimensions.\"
   *
   * @param[in] argv An array of argument values.  These are the values of the
   * arguments listed in the \\<embed\\> tag, for example
   * <code>\\<embed id=\"nacl_module\" dimensions=\"2\"\\></code> will produce two
   * argument values: \"nacl_module\" and \"2\".  The indices of these values match
   * the indices of the corresponding names in <code>argn</code>.
   *
   * @return <code>PP_TRUE</code> on success or <code>PP_FALSE</code> on
   * failure.
   */
  PP_Bool (*${name})(PP_Instance instance,
                       uint32_t argc,
                       const char* argn[],
                       const char* argv[])${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9946380 "DidDestroy"
	public explicit_type "/** * DidDestroy() is an instance destruction handler. This function is called * in many cases (see below) when a module instance is destroyed. It will be * called even if DidCreate() returned failure. * * Generally you will handle this call by deallocating the tracking * information and the <code>PP_Instance</code> mapping you created in the * DidCreate() call. You can also free resources associated with this * instance but this isn't required; all resources associated with the deleted * instance will be automatically freed when this function returns. * * The instance identifier will still be valid during this call, so the module * can perform cleanup-related tasks. Once this function returns, the * <code>PP_Instance</code> handle will be invalid. This means that you can't * do any asynchronous operations like network requests, file writes or * messaging from this function since they will be immediately canceled. * * <strong>Note:</strong> This function will always be skipped on untrusted * (Native Client) implementations. This function may be skipped on trusted * implementations in certain circumstances when Chrome does \"fast shutdown\" * of a web page. Fast shutdown will happen in some cases when all module * instances are being deleted, and no cleanup functions will be called. * The module will just be unloaded and the process terminated. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. */ void (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * DidDestroy() is an instance destruction handler. This function is called
   * in many cases (see below) when a module instance is destroyed. It will be
   * called even if DidCreate() returned failure.
   *
   * Generally you will handle this call by deallocating the tracking
   * information and the <code>PP_Instance</code> mapping you created in the
   * DidCreate() call. You can also free resources associated with this
   * instance but this isn't required; all resources associated with the deleted
   * instance will be automatically freed when this function returns.
   *
   * The instance identifier will still be valid during this call, so the module
   * can perform cleanup-related tasks. Once this function returns, the
   * <code>PP_Instance</code> handle will be invalid. This means that you can't
   * do any asynchronous operations like network requests, file writes or
   * messaging from this function since they will be immediately canceled.
   *
   * <strong>Note:</strong> This function will always be skipped on untrusted
   * (Native Client) implementations. This function may be skipped on trusted
   * implementations in certain circumstances when Chrome does \"fast shutdown\"
   * of a web page. Fast shutdown will happen in some cases when all module
   * instances are being deleted, and no cleanup functions will be called.
   * The module will just be unloaded and the process terminated.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   */
  void (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9946508 "DidChangeView"
	public explicit_type "/** * <code>DidChangeView() is called when the position, size, or other view * attributes of the instance has changed. */ void (*)(PP_Instance instance, PP_Resource view)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * <code>DidChangeView() is called when the position, size, or other view
   * attributes of the instance has changed.
   */
  void (*${name})(PP_Instance instance, PP_Resource view)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9946636 "DidChangeFocus"
	public explicit_type "/** * DidChangeFocus() is called when an instance has gained or lost focus. * Having focus means that keyboard events will be sent to the instance. * An instance's default condition is that it will not have focus. * * The focus flag takes into account both browser tab and window focus as * well as focus of the plugin element on the page. In order to be deemed * to have focus, the browser window must be topmost, the tab must be * selected in the window, and the instance must be the focused element on * the page. * * <strong>Note:</strong>Clicks on instances will give focus only if you * handle the click event. Return <code>true</code> from * <code>HandleInputEvent</code> in <code>PPP_InputEvent</code> (or use * unfiltered events) to signal that the click event was handled. Otherwise, * the browser will bubble the event and give focus to the element on the page * that actually did end up consuming it. If you're not getting focus, check * to make sure you're either requesting them via * <code>RequestInputEvents()<code> (which implicitly marks all input events * as consumed) or via <code>RequestFilteringInputEvents()</code> and * returning true from your event handler. * * @param[in] instance A <code>PP_Instance</code> identifying the instance * receiving the input event. * * @param[in] has_focus Indicates the new focused state of the instance. */ void (*)(PP_Instance instance, PP_Bool has_focus)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * DidChangeFocus() is called when an instance has gained or lost focus.
   * Having focus means that keyboard events will be sent to the instance.
   * An instance's default condition is that it will not have focus.
   *
   * The focus flag takes into account both browser tab and window focus as
   * well as focus of the plugin element on the page. In order to be deemed
   * to have focus, the browser window must be topmost, the tab must be
   * selected in the window, and the instance must be the focused element on
   * the page.
   *
   * <strong>Note:</strong>Clicks on instances will give focus only if you
   * handle the click event. Return <code>true</code> from
   * <code>HandleInputEvent</code> in <code>PPP_InputEvent</code> (or use
   * unfiltered events) to signal that the click event was handled. Otherwise,
   * the browser will bubble the event and give focus to the element on the page
   * that actually did end up consuming it. If you're not getting focus, check
   * to make sure you're either requesting them via
   * <code>RequestInputEvents()<code> (which implicitly marks all input events
   * as consumed) or via <code>RequestFilteringInputEvents()</code> and
   * returning true from your event handler.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying the instance
   * receiving the input event.
   *
   * @param[in] has_focus Indicates the new focused state of the instance.
   */
  void (*${name})(PP_Instance instance, PP_Bool has_focus)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9946764 "HandleDocumentLoad"
	public explicit_type "/** * HandleDocumentLoad() is called after initialize for a full-frame * module that was instantiated based on the MIME type of a DOMWindow * navigation. This situation only applies to modules that are pre-registered * to handle certain MIME types. If you haven't specifically registered to * handle a MIME type or aren't positive this applies to you, your * implementation of this function can just return <code>PP_FALSE</code>. * * The given <code>url_loader</code> corresponds to a * <code>PPB_URLLoader</code> instance that is already opened. Its response * headers may be queried using <code>PPB_URLLoader::GetResponseInfo</code>. * The reference count for the URL loader is not incremented automatically on * behalf of the module. You need to increment the reference count yourself * if you are going to keep a reference to it. * * This method returns <code>PP_FALSE</code> if the module cannot handle the * data. In response to this method, the module should call * ReadResponseBody() to read the incoming data. * * @param[in] instance A <code>PP_Instance</code> identifying the instance * that should do the load. * * @param[in] url_loader An open <code>PPB_URLLoader</code> instance. * * @return <code>PP_TRUE</code> if the data was handled, * <code>PP_FALSE</code> otherwise. */ PP_Bool (*)(PP_Instance instance, PP_Resource url_loader)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  /**
   * HandleDocumentLoad() is called after initialize for a full-frame
   * module that was instantiated based on the MIME type of a DOMWindow
   * navigation. This situation only applies to modules that are pre-registered
   * to handle certain MIME types. If you haven't specifically registered to
   * handle a MIME type or aren't positive this applies to you, your
   * implementation of this function can just return <code>PP_FALSE</code>.
   *
   * The given <code>url_loader</code> corresponds to a
   * <code>PPB_URLLoader</code> instance that is already opened. Its response
   * headers may be queried using <code>PPB_URLLoader::GetResponseInfo</code>.
   * The reference count for the URL loader is not incremented automatically on
   * behalf of the module. You need to increment the reference count yourself
   * if you are going to keep a reference to it.
   *
   * This method returns <code>PP_FALSE</code> if the module cannot handle the
   * data. In response to this method, the module should call
   * ReadResponseBody() to read the incoming data.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying the instance
   * that should do the load.
   *
   * @param[in] url_loader An open <code>PPB_URLLoader</code> instance.
   *
   * @return <code>PP_TRUE</code> if the data was handled,
   * <code>PP_FALSE</code> otherwise.
   */
  PP_Bool (*${name})(PP_Instance instance, PP_Resource url_loader)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2755980 "PPP_Instance"
      visibility package stereotype "typedef" base_type class_ref 2755852 // PPP_Instance_1_1
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5194636 // <dependency>
	relation 5194508 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5194636 // <dependency>
	  b parent class_ref 2755852 // PPP_Instance_1_1
      end
    end

    class 2756108 "PPP_Instance_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 9946892 "DidCreate"
	public explicit_type "PP_Bool (*)(PP_Instance instance, uint32_t argc, const char* argn[], const char* argv[])"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  PP_Bool (*${name})(PP_Instance instance,
                       uint32_t argc,
                       const char* argn[],
                       const char* argv[])${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9947020 "DidDestroy"
	public explicit_type "void (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9947148 "DidChangeView"
	public explicit_type "void (*)(PP_Instance instance, const struct PP_Rect* position, const struct PP_Rect* clip)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Instance instance,
                        const struct PP_Rect* position,
                        const struct PP_Rect* clip)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9947276 "DidChangeFocus"
	public explicit_type "void (*)(PP_Instance instance, PP_Bool has_focus)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  void (*${name})(PP_Instance instance, PP_Bool has_focus)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 9947404 "HandleDocumentLoad"
	public explicit_type "PP_Bool (*)(PP_Instance instance, PP_Resource url_loader)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}  PP_Bool (*${name})(PP_Instance instance, PP_Resource url_loader)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2756236 "PPP_Messaging_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the PPP_Messaging interface containing pointers to
 * functions that you must implement to handle postMessage messages
 * on the associated DOM element.
 *
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPP_Messaging</code> interface contains pointers to functions
 * that you must implement to handle postMessage events on the associated
 * DOM element."
      attribute 9947532 "HandleMessage"
	public explicit_type "/** * HandleMessage() is a function that the browser calls when PostMessage() * is invoked on the DOM element for the module instance in JavaScript. Note * that PostMessage() in the JavaScript interface is asynchronous, meaning * JavaScript execution will not be blocked while HandleMessage() is * processing the message. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. * @param[in] message A <code>PP_Var</code> containing the data to be sent * to JavaScript. Message can have an int32_t, double, bool, or string value * (objects are not supported). * * The following JavaScript code invokes <code>HandleMessage</code>, passing * the module instance on which it was invoked, with <code>message</code> * being a string <code>PP_Var</code> containing \"Hello world!\" * * <strong>Example:</strong> * * @code * * <body> * <object id=\"plugin\" * type=\"application/x-ppapi-postMessage-example\"/> * <script type=\"text/javascript\"> * document.getElementById('plugin').postMessage(\"Hello world!\"); * </script> * </body> * * @endcode * */ void (*)(PP_Instance instance, struct PP_Var message)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * HandleMessage() is a function that the browser calls when PostMessage()
   * is invoked on the DOM element for the module instance in JavaScript. Note
   * that PostMessage() in the JavaScript interface is asynchronous, meaning
   * JavaScript execution will not be blocked while HandleMessage() is
   * processing the message.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   * @param[in] message A <code>PP_Var</code> containing the data to be sent
   * to JavaScript. Message can have an int32_t, double, bool, or string value
   * (objects are not supported).
   *
   * The following JavaScript code invokes <code>HandleMessage</code>, passing
   * the module instance on which it was invoked, with <code>message</code>
   * being a string <code>PP_Var</code> containing \"Hello world!\"
   *
   * <strong>Example:</strong>
   *
   * @code
   *
   * <body>
   *   <object id=\"plugin\"
   *           type=\"application/x-ppapi-postMessage-example\"/>
   *   <script type=\"text/javascript\">
   *     document.getElementById('plugin').postMessage(\"Hello world!\");
   *   </script>
   * </body>
   *
   * @endcode
   *
   */
  void (*${name})(PP_Instance instance, struct PP_Var message)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2756364 "PPP_Messaging"
      visibility package stereotype "typedef" base_type class_ref 2756236 // PPP_Messaging_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5194764 // <dependency>
	relation 5194636 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5194764 // <dependency>
	  b parent class_ref 2756236 // PPP_Messaging_1_0
      end
    end

    class 2756492 "PPP_MouseLock_1_0"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * @file
 * This file defines the <code>PPP_MouseLock</code> interface containing a
 * function that you must implement to receive mouse lock events from the
 * browser.
 
*
 * @addtogroup Interfaces
 * @{
 
*
 * The <code>PPP_MouseLock</code> interface contains a function that you must
 * implement to receive mouse lock events from the browser."
      attribute 9947660 "MouseLockLost"
	public explicit_type "/** * MouseLockLost() is called when the instance loses the mouse lock, such as * when the user presses the ESC key. * * @param[in] instance A <code>PP_Instance</code> identifying one instance * of a module. */ void (*)(PP_Instance instance)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}
  /**
   * MouseLockLost() is called when the instance loses the mouse lock, such as
   * when the user presses the ESC key.
   *
   * @param[in] instance A <code>PP_Instance</code> identifying one instance
   * of a module.
   */
  void (*${name})(PP_Instance instance)${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2756620 "PPP_MouseLock"
      visibility package stereotype "typedef" base_type class_ref 2756492 // PPP_MouseLock_1_0
      cpp_decl "${comment}typedef struct ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5194892 // <dependency>
	relation 5194764 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5194892 // <dependency>
	  b parent class_ref 2756492 // PPP_MouseLock_1_0
      end
    end
  end

  deploymentview 260492 "c"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1033484 "pp_array_output"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2737932 // PP_ArrayOutput_GetDataBuffer
	class_ref 2738060 // PP_ArrayOutput
      end
    end

    artifact 1033612 "pp_bool"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2738188 // PP_Bool
      end
    end

    artifact 1033740 "pp_completion_callback"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2738316 // PP_CompletionCallback_Func
	class_ref 2738444 // PP_CompletionCallback_Flag
	class_ref 2738572 // PP_CompletionCallback
      end
    end

    artifact 1033868 "pp_errors"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2738700 // anonymous43
      end
    end

    artifact 1033996 "pp_file_info"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2738828 // PP_FileType
	class_ref 2738956 // PP_FileSystemType
	class_ref 2739084 // PP_FileInfo
      end
    end

    artifact 1034124 "pp_graphics_3d"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2739340 // PP_Graphics3DAttrib
      end
    end

    artifact 1034252 "pp_input_event"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2739468 // PP_InputEvent_Key
	class_ref 2739596 // PP_InputEvent_Character
	class_ref 2739724 // PP_InputEvent_Mouse
	class_ref 2739980 // PP_InputEvent_Wheel
      end
    end

    artifact 1034380 "pp_instance"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2740108 // PP_Instance
      end
    end

    artifact 1034508 "pp_module"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2740236 // PP_Module
      end
    end

    artifact 1034636 "pp_point"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2740364 // PP_Point
	class_ref 2740492 // PP_FloatPoint
      end
    end

    artifact 1034764 "pp_rect"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2740620 // PP_Rect
      end
    end

    artifact 1034892 "pp_resource"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2734220 // PP_Resource
      end
    end

    artifact 1035020 "pp_size"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2740748 // PP_Size
      end
    end

    artifact 1035148 "pp_stdint"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2584204 // int8_t
	class_ref 2347788 // uint16_t
	class_ref 2584076 // int16_t
      end
    end

    artifact 1035276 "pp_time"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2739212 // PP_Time
	class_ref 2740876 // PP_TimeTicks
      end
    end

    artifact 1035404 "pp_touch_point"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2741004 // PP_TouchPoint
      end
    end

    artifact 1035532 "pp_var"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2741132 // PP_VarType
	class_ref 2741260 // PP_VarValue
	class_ref 2741388 // PP_Var
      end
    end

    artifact 1035660 "ppb"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2741516 // PPB_GetInterface
      end
    end

    artifact 1035788 "ppb_audio"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2741644 // PPB_Audio_Callback
	class_ref 2741772 // PPB_Audio_1_0
	class_ref 2741900 // PPB_Audio
      end
    end

    artifact 1035916 "ppb_audio_config"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2742028 // anonymous44
	class_ref 2742156 // PP_AudioSampleRate
	class_ref 2742284 // PPB_AudioConfig_1_1
	class_ref 2742412 // PPB_AudioConfig
	class_ref 2742540 // PPB_AudioConfig_1_0
      end
    end

    artifact 1036044 "ppb_console"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2742668 // PP_LogLevel
	class_ref 2742796 // PPB_Console_1_0
	class_ref 2742924 // PPB_Console
      end
    end

    artifact 1036172 "ppb_core"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2743052 // PPB_Core_1_0
	class_ref 2743180 // PPB_Core
      end
    end

    artifact 1036300 "ppb_file_io"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2743308 // PP_FileOpenFlags
	class_ref 2743436 // PPB_FileIO_1_1
	class_ref 2743564 // PPB_FileIO
	class_ref 2743692 // PPB_FileIO_1_0
      end
    end

    artifact 1036428 "ppb_file_ref"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2743820 // PPB_FileRef_1_0
	class_ref 2743948 // PPB_FileRef
      end
    end

    artifact 1036556 "ppb_file_system"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2744076 // PPB_FileSystem_1_0
	class_ref 2744204 // PPB_FileSystem
      end
    end

    artifact 1036684 "ppb_fullscreen"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2744332 // PPB_Fullscreen_1_0
	class_ref 2744460 // PPB_Fullscreen
      end
    end

    artifact 1036812 "ppb_gamepad"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2744588 // PP_GamepadSampleData
	class_ref 2744716 // PP_GamepadsSampleData
	class_ref 2744844 // PPB_Gamepad_1_0
	class_ref 2744972 // PPB_Gamepad
      end
    end

    artifact 1036940 "ppb_graphics_2d"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2745100 // PPB_Graphics2D_1_0
	class_ref 2745228 // PPB_Graphics2D
      end
    end

    artifact 1037068 "ppb_graphics_3d"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2745356 // PPB_Graphics3D_1_0
	class_ref 2745484 // PPB_Graphics3D
      end
    end

    artifact 1037196 "ppb_image_data"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2745612 // PP_ImageDataFormat
	class_ref 2745740 // PP_ImageDataDesc
	class_ref 2745868 // PPB_ImageData_1_0
	class_ref 2745996 // PPB_ImageData
      end
    end

    artifact 1037324 "ppb_input_event"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2746124 // PP_InputEvent_Type
	class_ref 2746252 // PP_InputEvent_Modifier
	class_ref 2739852 // PP_InputEvent_MouseButton
	class_ref 2746380 // PP_InputEvent_Class
	class_ref 2746508 // PPB_InputEvent_1_0
	class_ref 2746636 // PPB_InputEvent
	class_ref 2746764 // PPB_MouseInputEvent_1_1
	class_ref 2746892 // PPB_MouseInputEvent
	class_ref 2747020 // PPB_MouseInputEvent_1_0
	class_ref 2747148 // PPB_WheelInputEvent_1_0
	class_ref 2747276 // PPB_WheelInputEvent
	class_ref 2747404 // PPB_KeyboardInputEvent_1_0
	class_ref 2747532 // PPB_KeyboardInputEvent
	class_ref 2747660 // PP_TouchListType
	class_ref 2747788 // PPB_TouchInputEvent_1_0
	class_ref 2747916 // PPB_TouchInputEvent
      end
    end

    artifact 1037452 "ppb_instance"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2748044 // PPB_Instance_1_0
	class_ref 2748172 // PPB_Instance
      end
    end

    artifact 1037580 "ppb_message_loop"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2748300 // PPB_MessageLoop_1_0
	class_ref 2748428 // PPB_MessageLoop
      end
    end

    artifact 1037708 "ppb_messaging"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2748556 // PPB_Messaging_1_0
	class_ref 2748684 // PPB_Messaging
      end
    end

    artifact 1037836 "ppb_mouse_cursor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2748812 // PP_MouseCursor_Type
	class_ref 2748940 // PPB_MouseCursor_1_0
	class_ref 2749068 // PPB_MouseCursor
      end
    end

    artifact 1037964 "ppb_mouse_lock"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2749196 // PPB_MouseLock_1_0
	class_ref 2749324 // PPB_MouseLock
      end
    end

    artifact 1038092 "ppb_opengles2"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2749452 // GLenum
	class_ref 2749580 // GLvoid
	class_ref 2749708 // GLintptr
	class_ref 2749836 // GLsizei
	class_ref 2749964 // GLsizeiptr
	class_ref 2750092 // GLint
	class_ref 2750220 // GLboolean
	class_ref 2750348 // GLuint
	class_ref 2750476 // GLbitfield
	class_ref 2750604 // GLshort
	class_ref 2750732 // GLfloat
	class_ref 2750860 // GLclampf
	class_ref 2750988 // GLbyte
	class_ref 2751116 // GLubyte
	class_ref 2751244 // GLfixed
	class_ref 2751372 // GLushort
	class_ref 2751500 // GLclampx
	class_ref 2751628 // PPB_OpenGLES2
	class_ref 2751756 // PPB_OpenGLES2InstancedArrays
	class_ref 2751884 // PPB_OpenGLES2FramebufferBlit
	class_ref 2752012 // PPB_OpenGLES2FramebufferMultisample
	class_ref 2752140 // PPB_OpenGLES2ChromiumEnableFeature
	class_ref 2752268 // PPB_OpenGLES2ChromiumMapSub
	class_ref 2752396 // PPB_OpenGLES2Query
      end
    end

    artifact 1038220 "ppb_url_loader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2752524 // PPB_URLLoader_1_0
	class_ref 2752652 // PPB_URLLoader
      end
    end

    artifact 1038348 "ppb_url_request_info"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2752780 // PP_URLRequestProperty
	class_ref 2752908 // PPB_URLRequestInfo_1_0
	class_ref 2753036 // PPB_URLRequestInfo
      end
    end

    artifact 1038476 "ppb_url_response_info"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2753164 // PP_URLResponseProperty
	class_ref 2753292 // PPB_URLResponseInfo_1_0
	class_ref 2753420 // PPB_URLResponseInfo
      end
    end

    artifact 1038604 "ppb_var"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2753548 // PPB_Var_1_1
	class_ref 2753676 // PPB_Var
	class_ref 2753804 // PPB_Var_1_0
      end
    end

    artifact 1038732 "ppb_var_array_buffer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2753932 // PPB_VarArrayBuffer_1_0
	class_ref 2754060 // PPB_VarArrayBuffer
      end
    end

    artifact 1038860 "ppb_view"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2754188 // PPB_View_1_0
	class_ref 2754316 // PPB_View
      end
    end

    artifact 1038988 "ppb_websocket"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2754444 // PP_WebSocketReadyState
	class_ref 2754572 // PP_WebSocketCloseCode
	class_ref 2754700 // PPB_WebSocket_1_0
	class_ref 2754828 // PPB_WebSocket
      end
    end

    artifact 1039116 "ppp"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2754956 // PP_InitializeModule_Func
	class_ref 2755084 // PP_ShutdownModule_Func
	class_ref 2755212 // PP_GetInterface_Func
      end
    end

    artifact 1039244 "ppp_graphics_3d"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2755340 // PPP_Graphics3D_1_0
	class_ref 2755468 // PPP_Graphics3D
      end
    end

    artifact 1039372 "ppp_input_event"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2755596 // PPP_InputEvent_0_1
	class_ref 2755724 // PPP_InputEvent
      end
    end

    artifact 1039500 "ppp_instance"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2755852 // PPP_Instance_1_1
	class_ref 2755980 // PPP_Instance
	class_ref 2756108 // PPP_Instance_1_0
      end
    end

    artifact 1039628 "ppp_messaging"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2756236 // PPP_Messaging_1_0
	class_ref 2756364 // PPP_Messaging
      end
    end

    artifact 1039756 "ppp_mouse_lock"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2756492 // PPP_MouseLock_1_0
	class_ref 2756620 // PPP_MouseLock
      end
    end
  end

  package_ref 314892 // dev

  package_ref 315020 // extensions

  package_ref 315276 // private

  package_ref 315404 // trusted
end
