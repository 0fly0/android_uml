class OldDoubleTest
!!!2724763.java!!!	test_byteValue() : void
        Double d = new Double(Byte.MAX_VALUE);
        assertEquals("Returned incorrect byte value", Byte.MAX_VALUE, d.byteValue());
        d= new Double(Byte.MIN_VALUE);
        assertEquals("Returned incorrect byte value", Byte.MIN_VALUE, d.byteValue());
        d= new Double(Double.MAX_VALUE);
        assertEquals("Returned incorrect byte value", -1, d.byteValue());
!!!2724891.java!!!	test_doubleToLongBitsD() : void
        assertEquals(0x7ff8000000000000L, Double.doubleToLongBits(Double.NaN));
        assertEquals(0x7ff0000000000000L, Double.doubleToLongBits(Double.POSITIVE_INFINITY));
        assertEquals(0xfff0000000000000L, Double.doubleToLongBits(Double.NEGATIVE_INFINITY));
!!!2725019.java!!!	test_doubleToRawLongBitsD() : void
        assertEquals(0x7ff8000000000000L, Double.doubleToLongBits(Double.NaN));
        assertEquals(0x7ff0000000000000L, Double.doubleToLongBits(Double.POSITIVE_INFINITY));
        assertEquals(0xfff0000000000000L, Double.doubleToLongBits(Double.NEGATIVE_INFINITY));
!!!2725147.java!!!	test_doubleValue() : void
        assertEquals(Double.POSITIVE_INFINITY, new Double("1.7976931348623159E308").doubleValue());
        assertEquals(Double.NEGATIVE_INFINITY, new Double("-1.7976931348623159E308").doubleValue());
        assertEquals(Double.MAX_VALUE, new Double("1.7976931348623157E308").doubleValue());
        assertEquals(Double.MIN_VALUE, new Double("4.9E-324").doubleValue());
!!!2725275.java!!!	test_floatValue() : void
        assertEquals(Float.POSITIVE_INFINITY, new Double("3.4028236E38").floatValue());
        assertEquals(Float.NEGATIVE_INFINITY, new Double("-3.4028236E38").floatValue());
        assertEquals(Float.MAX_VALUE, new Double("3.4028235E38").floatValue());
        assertEquals(Float.MIN_VALUE, new Double("1.4E-45").floatValue());
!!!2725403.java!!!	test_intValue() : void
        assertEquals("Returned incorrect int value", Integer.MAX_VALUE,
                                            new Double(2147483648d).intValue());
        assertEquals("Returned incorrect int value", Integer.MIN_VALUE,
                                           new Double(-2147483649d).intValue());
!!!2725531.java!!!	test_isNaND() : void
        assertFalse("Doesn't return false value", Double.isNaN(new Double(Double.MAX_VALUE)));
!!!2725659.java!!!	test_parseDouble_LString_AndroidRegression() : void
        // Android regression test
        long startTime = System.currentTimeMillis();
        double actual = Double.parseDouble("9e551027");
        assertTrue("parsing double 9e551027 took too long.",
                (System.currentTimeMillis() - startTime) < 1000);
        assertEquals("Returned incorrect value", Double.POSITIVE_INFINITY,
                actual, 0.0D);
