class EthernetSettingsDialog
!!!14039820.java!!!	EthernetSettingsDialog(inout context : Context, inout callBack : OnEthernetConfigurationSetListener)
        super(context);

        mCallBack = callBack;

        setTitle(context.getText(R.string.ethernet_settings_dialog_title));

        LayoutInflater factory = LayoutInflater.from(context);
        mView = factory.inflate(R.layout.ethernet_settings_view, null);
        setView(mView);

        setupViewControls();

        setButton(DialogInterface.BUTTON_POSITIVE, context.getString(R.string.set),
                new OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if (DialogInterface.BUTTON_POSITIVE == which) {
                            if (mCallBack != null && !Utils.isMonkeyRunning()) {
                                mCallBack.onEthernetConfigurationSet(
                                        getEthernetConfigurationFromEdits());
                            }
                        }
                    }
                });
        setButton(DialogInterface.BUTTON_NEGATIVE,
                context.getText(R.string.cancel), (OnClickListener) null);
        setIcon(0);
!!!14039948.java!!!	setupViewControls() : void
        setupProxyViewControls();
        setupStaticIpViewControls();
!!!14040076.java!!!	setupProxyViewControls() : void
        if (!ENABLE_PROXY) {
            return;
        }

        mView.findViewById(R.id.proxy_settings_fields).setVisibility(View.VISIBLE);

        mProxySettingsSpinner = (Spinner) mView.findViewById(R.id.proxy_settings);
        mProxySettingsSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                showProxyFields();
                enableSubmitIfAppropriate();
            }
            @Override
            public void onNothingSelected(AdapterView<?> parent) {
            }
        });
        mProxySettingsSpinner.setVisibility(View.VISIBLE);

        mProxyHostView = (TextView) mView.findViewById(R.id.proxy_hostname);
        mProxyHostView.addTextChangedListener(textWatcher);

        mProxyPortView = (TextView) mView.findViewById(R.id.proxy_port);
        mProxyPortView.addTextChangedListener(textWatcher);

        mProxyExclusionListView = (TextView) mView.findViewById(R.id.proxy_exclusionlist);
        mProxyExclusionListView.addTextChangedListener(textWatcher);
!!!14040204.java!!!	setupStaticIpViewControls() : void
        if (!ENABLE_IP_CONFIG) {
            return;
        }

        mView.findViewById(R.id.ip_fields).setVisibility(View.VISIBLE);

        // IP settings DHCP/Static
        mIpSettingsSpinner = (Spinner) mView.findViewById(R.id.ip_settings);
        mIpSettingsSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                showIpConfigFields();
                enableSubmitIfAppropriate();
            }
            @Override
            public void onNothingSelected(AdapterView<?> parent) {
            }
        });

        // IP address
        mIpAddressView = (TextView) mView.findViewById(R.id.ipaddress);
        mIpAddressView.addTextChangedListener(textWatcher);

        // Gateway
        mGatewayView = (TextView) mView.findViewById(R.id.gateway);
        mGatewayView.addTextChangedListener(textWatcher);

        // Network prefix length
        mNetworkPrefixLengthView = (TextView) mView.findViewById(
                R.id.network_prefix_length);
        mNetworkPrefixLengthView.addTextChangedListener(textWatcher);

        // DNS 1
        mDns1View = (TextView) mView.findViewById(R.id.dns1);
        mDns1View.addTextChangedListener(textWatcher);

        // DNS 2
        mDns2View = (TextView) mView.findViewById(R.id.dns2);
        mDns2View.addTextChangedListener(textWatcher);
!!!14040332.java!!!	showIpConfigFields() : void
        if (ENABLE_IP_CONFIG && mIpSettingsSpinner.getSelectedItemPosition() == STATIC_IP) {
            mView.findViewById(R.id.staticip).setVisibility(View.VISIBLE);
        } else {
            mView.findViewById(R.id.staticip).setVisibility(View.GONE);
        }
!!!14040460.java!!!	showProxyFields() : void
        if (ENABLE_PROXY && mProxySettingsSpinner.getSelectedItemPosition() == PROXY_STATIC) {
            mView.findViewById(R.id.proxy_fields).setVisibility(View.VISIBLE);
        } else {
            mView.findViewById(R.id.proxy_fields).setVisibility(View.GONE);
        }
!!!14040588.java!!!	setEthernetConfiguration(inout ethernetConfiguration : EthernetConfiguration) : void
        mSettingUpValues = true;

        if (ENABLE_PROXY) {
            mProxySettingsSpinner.setSelection(ethernetConfiguration != null &&
                    ethernetConfiguration.getProxySettings() == ProxySettings.STATIC
                    ? PROXY_STATIC : PROXY_NONE);
            mProxyHostView.setText(null);
            mProxyPortView.setText(null);
            mProxyExclusionListView.setText(null);
        }

        if (ENABLE_IP_CONFIG) {
            mIpSettingsSpinner.setSelection(ethernetConfiguration != null &&
                    ethernetConfiguration.getIpAssignment() == IpAssignment.STATIC
                    ? STATIC_IP : DHCP);
            mIpAddressView.setText(null);
            mGatewayView.setText(null);
            mNetworkPrefixLengthView.setText(null);
            mDns1View.setText(null);
            mDns2View.setText(null);
        }

        if (ethernetConfiguration != null) {
            LinkProperties linkProperties = ethernetConfiguration.getLinkProperties();

            if (ENABLE_PROXY) {
                final ProxyProperties proxyProperties = linkProperties.getHttpProxy();
                if (proxyProperties != null) {
                    mProxyHostView.setText(proxyProperties.getHost());
                    mProxyPortView.setText(String.valueOf(proxyProperties.getPort()));
                    mProxyExclusionListView.setText(proxyProperties.getExclusionList());
                }
            }

            if (ENABLE_IP_CONFIG) {
                for (LinkAddress linkAddress : linkProperties.getLinkAddresses()) {
                    mIpAddressView.setText(linkAddress.getAddress().getHostAddress());
                    mNetworkPrefixLengthView.setText(Integer.toString(linkAddress
                            .getNetworkPrefixLength()));
                    break;
                }
                for (RouteInfo gateway : linkProperties.getRoutes()) {
                    mGatewayView.setText(gateway.getGateway().getHostAddress());
                    break;
                }
                boolean first = true;
                for (InetAddress dns : linkProperties.getDnses()) {
                    if (first) {
                        mDns1View.setText(dns.getHostAddress());
                        first = false;
                    } else {
                        mDns2View.setText(dns.getHostAddress());
                        break;
                    }
                }
            }
        }

        mSettingUpValues = false;
        showIpConfigFields();
        showProxyFields();
        enableSubmitIfAppropriate();
!!!14040716.java!!!	isValidIpAddress(in ipAddress : String, inout allowEmptyValue : boolean) : boolean
        if (ipAddress == null || ipAddress.length() == 0) {
            return allowEmptyValue;
        }

        try {
            InetAddress.getByName(ipAddress);
            return true;
        } catch (Exception ex) {
            return false;
        }
!!!14040844.java!!!	validateProxyExclusionList(in exclList : String) : int
        Matcher listMatch = EXCLLIST_PATTERN.matcher(exclList);
        return !listMatch.matches() ? R.string.proxy_error_invalid_exclusion_list : 0;
!!!14040972.java!!!	validateProxyFields() : boolean
        if (!ENABLE_PROXY) {
            return true;
        }

        final Context context = getContext();
        boolean errors = false;

        if (isValidIpAddress(mProxyHostView.getText().toString(), false)) {
            mProxyHostView.setError(null);
        } else {
            mProxyHostView.setError(
                    context.getString(R.string.wifi_ip_settings_invalid_ip_address));
            errors = true;
        }

        int port = -1;
        try {
            port = Integer.parseInt(mProxyPortView.getText().toString());
            mProxyPortView.setError(null);
        } catch (NumberFormatException e) {
            // Intentionally left blank
        }
        if (port < 0) {
            mProxyPortView.setError(context.getString(R.string.proxy_error_invalid_port));
            errors = true;
        }

        final String exclusionList = mProxyExclusionListView.getText().toString();
        final int listResult = validateProxyExclusionList(exclusionList);
        if (listResult == 0) {
            mProxyExclusionListView.setError(null);
        } else {
            mProxyExclusionListView.setError(context.getString(listResult));
            errors = true;
        }

        return !errors;
!!!14041100.java!!!	validateIpConfigFields() : boolean
        if (!ENABLE_IP_CONFIG) {
            return true;
        }

        final Context context = getContext();
        boolean errors = false;

        if (isValidIpAddress(mIpAddressView.getText().toString(), false)) {
            mIpAddressView.setError(null);
        } else {
            mIpAddressView.setError(
                    context.getString(R.string.wifi_ip_settings_invalid_ip_address));
            errors = true;
        }

        int networkPrefixLength = -1;
        try {
            networkPrefixLength = Integer.parseInt(mNetworkPrefixLengthView.getText().toString());
            mNetworkPrefixLengthView.setError(null);
        } catch (NumberFormatException e) { }
        if (networkPrefixLength < 0 || networkPrefixLength > 32) {
            mNetworkPrefixLengthView.setError(
                    context.getString(R.string.wifi_ip_settings_invalid_network_prefix_length));
            errors = true;
        }

        if (isValidIpAddress(mGatewayView.getText().toString(), false)) {
            mGatewayView.setError(null);
        } else {
            mGatewayView.setError(context.getString(R.string.wifi_ip_settings_invalid_gateway));
            errors = true;
        }

        if (isValidIpAddress(mDns1View.getText().toString(), false)) {
            mDns1View.setError(null);
        } else {
            mDns1View.setError(context.getString(R.string.wifi_ip_settings_invalid_dns));
            errors = true;
        }

        if (isValidIpAddress(mDns2View.getText().toString(), true)) {
            mDns2View.setError(null);
        } else {
            mDns2View.setError(context.getString(R.string.wifi_ip_settings_invalid_dns));
            errors = true;
        }

        return !errors;
!!!14041228.java!!!	getEthernetConfigurationFromEdits() : EthernetConfiguration
        final LinkProperties linkProperties = new LinkProperties();

        final ProxySettings proxySettings =
                ENABLE_PROXY && mProxySettingsSpinner.getSelectedItemPosition() == PROXY_STATIC
                        ? ProxySettings.STATIC : ProxySettings.NONE;

        if (proxySettings == ProxySettings.STATIC) {
            try {
                linkProperties.setHttpProxy(new ProxyProperties(
                        mProxyHostView.getText().toString(),
                        Integer.parseInt(mProxyPortView.getText().toString()),
                        mProxyExclusionListView.getText().toString()));
            } catch (IllegalArgumentException e) {
                // Should not happen if validations are done right
                throw new RuntimeException(e);
            }
        }

        final IpAssignment ipAssignment =
                ENABLE_IP_CONFIG && mIpSettingsSpinner.getSelectedItemPosition() == STATIC_IP
                        ? IpAssignment.STATIC : IpAssignment.DHCP;

        if (ipAssignment == IpAssignment.STATIC) {
            try {
                linkProperties.addLinkAddress(new LinkAddress(
                        NetworkUtils.numericToInetAddress(mIpAddressView.getText().toString()),
                        Integer.parseInt(mNetworkPrefixLengthView.getText().toString())));
                linkProperties.addRoute(new RouteInfo(
                        NetworkUtils.numericToInetAddress(mGatewayView.getText().toString())));
                linkProperties.addDns(
                        NetworkUtils.numericToInetAddress(mDns1View.getText().toString()));
                if (mDns2View.getText().length() > 0) {
                    linkProperties.addDns(
                            NetworkUtils.numericToInetAddress(mDns2View.getText().toString()));
                }
            } catch (IllegalArgumentException e) {
                // Should not happen if validations are done right
                throw new RuntimeException(e);
            }
        }

        return new EthernetConfiguration(proxySettings, ipAssignment, linkProperties);
!!!14041356.java!!!	isProxyFieldsValid() : boolean
        if (ENABLE_PROXY && mProxySettingsSpinner.getSelectedItemPosition() == PROXY_STATIC) {
            return validateProxyFields();
        }
        return true;
!!!14041484.java!!!	isIpFieldsValid() : boolean
        if (ENABLE_IP_CONFIG && mIpSettingsSpinner.getSelectedItemPosition() == STATIC_IP) {
            return validateIpConfigFields();
        }
        return true;
!!!14041612.java!!!	enableSubmitIfAppropriate() : void
        setPositiveButtonEnabled(isProxyFieldsValid() && isIpFieldsValid());
!!!14041740.java!!!	setPositiveButtonEnabled(inout enabled : boolean) : void
        getButton(DialogInterface.BUTTON_POSITIVE).setEnabled(enabled);
