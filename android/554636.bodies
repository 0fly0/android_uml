class SharedBuffer
!!!1607692.cpp!!!	alloc(in size : size_t) : SharedBuffer
    SharedBuffer* sb = static_cast<SharedBuffer *>(malloc(sizeof(SharedBuffer) + size));
    if (sb) {
        sb->mRefs = 1;
        sb->mSize = size;
    }
    return sb;
!!!1607820.cpp!!!	dealloc(in released : SharedBuffer) : ssize_t
    if (released->mRefs != 0) return -1; // XXX: invalid operation
    free(const_cast<SharedBuffer*>(released));
    return 0;
!!!1607948.cpp!!!	data() : void
    return this + 1;
!!!1608076.cpp!!!	data() : void
    return this + 1;
!!!1608204.cpp!!!	size() : size_t
    return mSize;
!!!1608332.cpp!!!	bufferFromData(inout data : void) : SharedBuffer
    return data ? static_cast<SharedBuffer *>(data)-1 : 0;
!!!1608460.cpp!!!	bufferFromData(in data : void) : SharedBuffer
    return data ? static_cast<const SharedBuffer *>(data)-1 : 0;
!!!1608588.cpp!!!	sizeFromData(in data : void) : size_t
    return data ? bufferFromData(data)->mSize : 0;
!!!1608716.cpp!!!	edit() : SharedBuffer
    if (onlyOwner()) {
        return const_cast<SharedBuffer*>(this);
    }
    SharedBuffer* sb = alloc(mSize);
    if (sb) {
        memcpy(sb->data(), data(), size());
        release();
    }
    return sb;    
!!!1608844.cpp!!!	editResize(in newSize : size_t) : SharedBuffer
    if (onlyOwner()) {
        SharedBuffer* buf = const_cast<SharedBuffer*>(this);
        if (buf->mSize == newSize) return buf;
        buf = (SharedBuffer*)realloc(buf, sizeof(SharedBuffer) + newSize);
        if (buf != NULL) {
            buf->mSize = newSize;
            return buf;
        }
    }
    SharedBuffer* sb = alloc(newSize);
    if (sb) {
        const size_t mySize = mSize;
        memcpy(sb->data(), data(), newSize < mySize ? newSize : mySize);
        release();
    }
    return sb;    
!!!1608972.cpp!!!	attemptEdit() : SharedBuffer
    if (onlyOwner()) {
        return const_cast<SharedBuffer*>(this);
    }
    return 0;
!!!1609100.cpp!!!	reset(in new_size : size_t) : SharedBuffer
    // cheap-o-reset.
    SharedBuffer* sb = alloc(new_size);
    if (sb) {
        release();
    }
    return sb;
!!!1609228.cpp!!!	acquire() : void
    android_atomic_inc(&mRefs);
!!!1609356.cpp!!!	release(in flags : uint32_t = 0) : int32_t
    int32_t prev = 1;
    if (onlyOwner() || ((prev = android_atomic_dec(&mRefs)) == 1)) {
        mRefs = 0;
        if ((flags & eKeepStorage) == 0) {
            free(const_cast<SharedBuffer*>(this));
        }
    }
    return prev;
!!!1609484.cpp!!!	onlyOwner() : bool
    return (mRefs == 1);
