class URL
!!!628763.java!!!	setURLStreamHandlerFactory(inout factory : URLStreamHandlerFactory) : void
        if (streamHandlerFactory != null) {
            throw new Error("Factory already set");
        }
        streamHandlers.clear();
        streamHandlerFactory = factory;
!!!628891.java!!!	URL(inout spec : String)
        this((URL) null, spec, null);
!!!629019.java!!!	URL(inout context : URL, inout spec : String)
        this(context, spec, null);
!!!629147.java!!!	URL(inout context : URL, inout spec : String, inout handler : URLStreamHandler)
        if (spec == null) {
            throw new MalformedURLException();
        }
        if (handler != null) {
            streamHandler = handler;
        }
        spec = spec.trim();

        protocol = UrlUtils.getSchemePrefix(spec);
        int schemeSpecificPartStart = protocol != null ? (protocol.length() + 1) : 0;

        // If the context URL has a different protocol, discard it because we can't use it.
        if (protocol != null && context != null && !protocol.equals(context.protocol)) {
            context = null;
        }

        // Inherit from the context URL if it exists.
        if (context != null) {
            set(context.protocol, context.getHost(), context.getPort(), context.getAuthority(),
                    context.getUserInfo(), context.getPath(), context.getQuery(),
                    context.getRef());
            if (streamHandler == null) {
                streamHandler = context.streamHandler;
            }
        } else if (protocol == null) {
            throw new MalformedURLException("Protocol not found: " + spec);
        }

        if (streamHandler == null) {
            setupStreamHandler();
            if (streamHandler == null) {
                throw new MalformedURLException("Unknown protocol: " + protocol);
            }
        }

        // Parse the URL. If the handler throws any exception, throw MalformedURLException instead.
        try {
            streamHandler.parseURL(this, spec, schemeSpecificPartStart, spec.length());
        } catch (Exception e) {
            throw new MalformedURLException(e.toString());
        }
!!!629275.java!!!	URL(inout protocol : String, inout host : String, inout file : String)
        this(protocol, host, -1, file, null);
!!!629403.java!!!	URL(inout protocol : String, inout host : String, in port : int, inout file : String)
        this(protocol, host, port, file, null);
!!!629531.java!!!	URL(inout protocol : String, inout host : String, in port : int, inout file : String, inout handler : URLStreamHandler)
        if (port < -1) {
            throw new MalformedURLException("port < -1: " + port);
        }
        if (protocol == null) {
            throw new NullPointerException("protocol == null");
        }

        // Wrap IPv6 addresses in square brackets if they aren't already.
        if (host != null && host.contains(":") && host.charAt(0) != '[') {
            host = "[" + host + "]";
        }

        this.protocol = protocol;
        this.host = host;
        this.port = port;

        file = UrlUtils.authoritySafePath(host, file);

        // Set the fields from the arguments. Handle the case where the
        // passed in "file" includes both a file and a reference part.
        int hash = file.indexOf("#");
        if (hash != -1) {
            this.file = file.substring(0, hash);
            this.ref = file.substring(hash + 1);
        } else {
            this.file = file;
        }
        fixURL(false);

        // Set the stream handler for the URL either to the handler
        // argument if it was specified, or to the default for the
        // receiver's protocol if the handler was null.
        if (handler == null) {
            setupStreamHandler();
            if (streamHandler == null) {
                throw new MalformedURLException("Unknown protocol: " + protocol);
            }
        } else {
            streamHandler = handler;
        }
!!!629659.java!!!	fixURL(inout fixHost : boolean) : void
        int index;
        if (host != null && host.length() > 0) {
            authority = host;
            if (port != -1) {
                authority = authority + ":" + port;
            }
        }
        if (fixHost) {
            if (host != null && (index = host.lastIndexOf('@')) > -1) {
                userInfo = host.substring(0, index);
                host = host.substring(index + 1);
            } else {
                userInfo = null;
            }
        }
        if (file != null && (index = file.indexOf('?')) > -1) {
            query = file.substring(index + 1);
            path = file.substring(0, index);
        } else {
            query = null;
            path = file;
        }
!!!629787.java!!!	set(inout protocol : String, inout host : String, in port : int, inout file : String, inout ref : String) : void
        if (this.protocol == null) {
            this.protocol = protocol;
        }
        this.host = host;
        this.file = file;
        this.port = port;
        this.ref = ref;
        hashCode = 0;
        fixURL(true);
!!!629915.java!!!	equals(inout o : Object) : boolean
        if (o == null) {
            return false;
        }
        if (this == o) {
            return true;
        }
        if (this.getClass() != o.getClass()) {
            return false;
        }
        return streamHandler.equals(this, (URL) o);
!!!630043.java!!!	sameFile(inout otherURL : URL) : boolean
        return streamHandler.sameFile(this, otherURL);
!!!630171.java!!!	hashCode() : int
        if (hashCode == 0) {
            hashCode = streamHandler.hashCode(this);
        }
        return hashCode;
!!!630299.java!!!	setupStreamHandler() : void
        // Check for a cached (previously looked up) handler for
        // the requested protocol.
        streamHandler = streamHandlers.get(protocol);
        if (streamHandler != null) {
            return;
        }

        // If there is a stream handler factory, then attempt to
        // use it to create the handler.
        if (streamHandlerFactory != null) {
            streamHandler = streamHandlerFactory.createURLStreamHandler(protocol);
            if (streamHandler != null) {
                streamHandlers.put(protocol, streamHandler);
                return;
            }
        }

        // Check if there is a list of packages which can provide handlers.
        // If so, then walk this list looking for an applicable one.
        String packageList = System.getProperty("java.protocol.handler.pkgs");
        ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
        if (packageList != null && contextClassLoader != null) {
            for (String packageName : packageList.split("\\|")) {
                String className = packageName + "." + protocol + ".Handler";
                try {
                    Class<?> c = contextClassLoader.loadClass(className);
                    streamHandler = (URLStreamHandler) c.newInstance();
                    if (streamHandler != null) {
                        streamHandlers.put(protocol, streamHandler);
                    }
                    return;
                } catch (IllegalAccessException ignored) {
                } catch (InstantiationException ignored) {
                } catch (ClassNotFoundException ignored) {
                }
            }
        }

        // Fall back to a built-in stream handler if the user didn't supply one
        if (protocol.equals("file")) {
            streamHandler = new FileHandler();
        } else if (protocol.equals("ftp")) {
            streamHandler = new FtpHandler();
        } else if (protocol.equals("http")) {
            streamHandler = new HttpHandler();
        } else if (protocol.equals("https")) {
            streamHandler = new HttpsHandler();
        } else if (protocol.equals("jar")) {
            streamHandler = new JarHandler();
        }
        if (streamHandler != null) {
            streamHandlers.put(protocol, streamHandler);
        }
!!!630427.java!!!	getContent() : Object
        return openConnection().getContent();
!!!630555.java!!!	getContent(inout types : Class) : Object
        return openConnection().getContent(types);
!!!630683.java!!!	openStream() : InputStream
        return openConnection().getInputStream();
!!!630811.java!!!	openConnection() : URLConnection
        return streamHandler.openConnection(this);
!!!630939.java!!!	openConnection(inout proxy : Proxy) : URLConnection
        if (proxy == null) {
            throw new IllegalArgumentException("proxy == null");
        }
        return streamHandler.openConnection(this, proxy);
!!!631067.java!!!	toURI() : URI
        return new URI(toExternalForm());
!!!631195.java!!!	toURILenient() : URI
        if (streamHandler == null) {
            throw new IllegalStateException(protocol);
        }
        return new URI(streamHandler.toExternalForm(this, true));
!!!631323.java!!!	toString() : String
        return toExternalForm();
!!!631451.java!!!	toExternalForm() : String
        if (streamHandler == null) {
            return "unknown protocol(" + protocol + ")://" + host + file;
        }
        return streamHandler.toExternalForm(this);
!!!631579.java!!!	readObject(inout stream : ObjectInputStream) : void
        try {
            stream.defaultReadObject();
            if (host != null && authority == null) {
                fixURL(true);
            } else if (authority != null) {
                int index;
                if ((index = authority.lastIndexOf('@')) > -1) {
                    userInfo = authority.substring(0, index);
                }
                if (file != null && (index = file.indexOf('?')) > -1) {
                    query = file.substring(index + 1);
                    path = file.substring(0, index);
                } else {
                    path = file;
                }
            }
            setupStreamHandler();
            if (streamHandler == null) {
                throw new IOException("Unknown protocol: " + protocol);
            }
            hashCode = 0; // necessary until http://b/4471249 is fixed
        } catch (ClassNotFoundException e) {
            throw new IOException(e);
        }
!!!631707.java!!!	writeObject(inout s : ObjectOutputStream) : void
        s.defaultWriteObject();
!!!631835.java!!!	getEffectivePort() : int
        return URI.getEffectivePort(protocol, port);
!!!631963.java!!!	getProtocol() : String
        return protocol;
!!!632091.java!!!	getAuthority() : String
        return authority;
!!!632219.java!!!	getUserInfo() : String
        return userInfo;
!!!632347.java!!!	getHost() : String
        return host;
!!!632475.java!!!	getPort() : int
        return port;
!!!632603.java!!!	getDefaultPort() : int
        return streamHandler.getDefaultPort();
!!!632731.java!!!	getFile() : String
        return file;
!!!632859.java!!!	getPath() : String
        return path;
!!!632987.java!!!	getQuery() : String
        return query;
!!!633115.java!!!	getRef() : String
        return ref;
!!!633243.java!!!	set(inout protocol : String, inout host : String, in port : int, inout authority : String, inout userInfo : String, inout path : String, inout query : String, inout ref : String) : void
        String file = path;
        if (query != null && !query.isEmpty()) {
            file += "?" + query;
        }
        set(protocol, host, port, file, ref);
        this.authority = authority;
        this.userInfo = userInfo;
        this.path = path;
        this.query = query;
