class SurfaceControl
!!!1504524.cpp!!!	isSameSurface(in lhs : sp<SurfaceControl>, in rhs : sp<SurfaceControl>) : bool
    if (lhs == 0 || rhs == 0)
        return false;
    return lhs->mSurface->asBinder() == rhs->mSurface->asBinder();
!!!1504780.cpp!!!	clear() : void
    // here, the window manager tells us explicitly that we should destroy
    // the surface's resource. Soon after this call, it will also release
    // its last reference (which will call the dtor); however, it is possible
    // that a client living in the same process still holds references which
    // would delay the call to the dtor -- that is why we need this explicit
    // "clear()" call.
    destroy();
!!!1504908.cpp!!!	setLayerStack(in layerStack : int32_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->setLayerStack(mToken, layerStack);
!!!1505036.cpp!!!	setLayer(in layer : int32_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->setLayer(mToken, layer);
!!!1505164.cpp!!!	setPosition(in x : int32_t, in y : int32_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->setPosition(mToken, x, y);
!!!1505292.cpp!!!	setSize(in w : uint32_t, in h : uint32_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->setSize(mToken, w, h);
!!!1505420.cpp!!!	hide() : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->hide(mToken);
!!!1505548.cpp!!!	show() : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->show(mToken);
!!!1505676.cpp!!!	setFlags(in flags : uint32_t, in mask : uint32_t) : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->setFlags(mToken, flags, mask);
!!!1505804.cpp!!!	setTransparentRegionHint(in transparent : Region) : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->setTransparentRegionHint(mToken, transparent);
!!!1505932.cpp!!!	setAlpha(in alpha : float = 1.0f) : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->setAlpha(mToken, alpha);
!!!1506060.cpp!!!	setMatrix(in dsdx : float, in dtdx : float, in dsdy : float, in dtdy : float) : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->setMatrix(mToken, dsdx, dtdx, dsdy, dtdy);
!!!1506188.cpp!!!	setCrop(in crop : Rect) : status_t
    status_t err = validate();
    if (err < 0) return err;
    const sp<SurfaceComposerClient>& client(mClient);
    return client->setCrop(mToken, crop);
!!!1506316.cpp!!!	writeSurfaceToParcel(in control : sp<SurfaceControl>, inout parcel : Parcel) : status_t
    sp<ISurface> sur;
    uint32_t identity = 0;
    if (SurfaceControl::isValid(control)) {
        sur      = control->mSurface;
        identity = control->mIdentity;
    }
    parcel->writeStrongBinder(sur!=0 ? sur->asBinder() : NULL);
    parcel->writeStrongBinder(NULL);  // NULL ISurfaceTexture in this case.
    parcel->writeInt32(identity);
    return NO_ERROR;
!!!1506444.cpp!!!	getSurface() : sp<Surface>
    Mutex::Autolock _l(mLock);
    if (mSurfaceData == 0) {
        sp<SurfaceControl> surface_control(const_cast<SurfaceControl*>(this));
        mSurfaceData = new Surface(surface_control);
    }
    return mSurfaceData;
!!!1506956.cpp!!!	~SurfaceControl()
    destroy();
!!!1507084.cpp!!!	validate() : status_t
    if (mToken<0 || mClient==0) {
        ALOGE("invalid token (%d, identity=%u) or client (%p)", 
                mToken, mIdentity, mClient.get());
        return NO_INIT;
    }
    return NO_ERROR;
!!!1507212.cpp!!!	destroy() : void
    if (isValid()) {
        mClient->destroySurface(mToken);
    }

    // clear all references and trigger an IPC now, to make sure things
    // happen without delay, since these resources are quite heavy.
    mClient.clear();
    mSurface.clear();
    IPCThreadState::self()->flushCommands();
