class CharGroup
!!!12881164.java!!!	CharGroup(in chars : int, in shortcutTargets : ArrayList<WeightedString>, in bigrams : ArrayList<WeightedString>, in frequency : int)
            mChars = chars;
            mFrequency = frequency;
            mShortcutTargets = shortcutTargets;
            mBigrams = bigrams;
            mChildren = null;
!!!12881292.java!!!	CharGroup(in chars : int, in shortcutTargets : ArrayList<WeightedString>, in bigrams : ArrayList<WeightedString>, in frequency : int, in children : Node)
            mChars = chars;
            mFrequency = frequency;
            mShortcutTargets = shortcutTargets;
            mBigrams = bigrams;
            mChildren = children;
!!!12881420.java!!!	addChild(inout n : CharGroup) : void
            if (null == mChildren) {
                mChildren = new Node();
            }
            mChildren.mData.add(n);
!!!12881548.java!!!	isTerminal() : boolean
            return NOT_A_TERMINAL != mFrequency;
!!!12881676.java!!!	hasSeveralChars() : boolean
            assert(mChars.length > 0);
            return 1 < mChars.length;
!!!12881804.java!!!	addBigram(in word : String, in frequency : int) : void
            if (mBigrams == null) {
                mBigrams = new ArrayList<WeightedString>();
            }
            WeightedString bigram = getBigram(word);
            if (bigram != null) {
                bigram.mFrequency = frequency;
            } else {
                bigram = new WeightedString(word, frequency);
                mBigrams.add(bigram);
            }
!!!12881932.java!!!	getShortcut(in word : String) : WeightedString
            // TODO: Don't do a linear search
            if (mShortcutTargets != null) {
                final int size = mShortcutTargets.size();
                for (int i = 0; i < size; ++i) {
                    WeightedString shortcut = mShortcutTargets.get(i);
                    if (shortcut.mWord.equals(word)) {
                        return shortcut;
                    }
                }
            }
            return null;
!!!12882060.java!!!	getBigram(in word : String) : WeightedString
            // TODO: Don't do a linear search
            if (mBigrams != null) {
                final int size = mBigrams.size();
                for (int i = 0; i < size; ++i) {
                    WeightedString bigram = mBigrams.get(i);
                    if (bigram.mWord.equals(word)) {
                        return bigram;
                    }
                }
            }
            return null;
!!!12882188.java!!!	update(in frequency : int, inout shortcutTargets : ArrayList<WeightedString>, inout bigrams : ArrayList<WeightedString>) : void
            if (frequency > mFrequency) {
                mFrequency = frequency;
            }
            if (shortcutTargets != null) {
                if (mShortcutTargets == null) {
                    mShortcutTargets = shortcutTargets;
                } else {
                    final int size = shortcutTargets.size();
                    for (int i = 0; i < size; ++i) {
                        final WeightedString shortcut = shortcutTargets.get(i);
                        final WeightedString existingShortcut = getShortcut(shortcut.mWord);
                        if (existingShortcut == null) {
                            mShortcutTargets.add(shortcut);
                        } else if (existingShortcut.mFrequency < shortcut.mFrequency) {
                            existingShortcut.mFrequency = shortcut.mFrequency;
                        }
                    }
                }
            }
            if (bigrams != null) {
                if (mBigrams == null) {
                    mBigrams = bigrams;
                } else {
                    final int size = bigrams.size();
                    for (int i = 0; i < size; ++i) {
                        final WeightedString bigram = bigrams.get(i);
                        final WeightedString existingBigram = getBigram(bigram.mWord);
                        if (existingBigram == null) {
                            mBigrams.add(bigram);
                        } else if (existingBigram.mFrequency < bigram.mFrequency) {
                            existingBigram.mFrequency = bigram.mFrequency;
                        }
                    }
                }
            }
