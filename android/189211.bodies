class ShortArrayBuffer
!!!770587.java!!!	ShortArrayBuffer(inout array : short)
    this(array.length, array, 0, false);
!!!770715.java!!!	ShortArrayBuffer(in capacity : int, inout backingArray : short, in arrayOffset : int, inout isReadOnly : boolean)
    super(capacity);
    this.backingArray = backingArray;
    this.arrayOffset = arrayOffset;
    this.isReadOnly = isReadOnly;
!!!770843.java!!!	copy(inout other : ShortArrayBuffer, in markOfOther : int, inout isReadOnly : boolean) : ShortArrayBuffer
    ShortArrayBuffer buf = new ShortArrayBuffer(other.capacity(), other.backingArray, other.arrayOffset, isReadOnly);
    buf.limit = other.limit;
    buf.position = other.position();
    buf.mark = markOfOther;
    return buf;
!!!770971.java!!!	asReadOnlyBuffer() : ShortBuffer
    return copy(this, mark, true);
!!!771099.java!!!	compact() : ShortBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    System.arraycopy(backingArray, position + arrayOffset, backingArray, arrayOffset, remaining());
    position = limit - position;
    limit = capacity;
    mark = UNSET_MARK;
    return this;
!!!771227.java!!!	duplicate() : ShortBuffer
    return copy(this, mark, isReadOnly);
!!!771355.java!!!	slice() : ShortBuffer
    return new ShortArrayBuffer(remaining(), backingArray, arrayOffset + position, isReadOnly);
!!!771483.java!!!	isReadOnly() : boolean
    return isReadOnly;
!!!771611.java!!!	protectedArray() : short
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    return backingArray;
!!!771739.java!!!	protectedArrayOffset() : int
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    return arrayOffset;
!!!771867.java!!!	protectedHasArray() : boolean
    if (isReadOnly) {
      return false;
    }
    return true;
!!!771995.java!!!	get() : short
    if (position == limit) {
      throw new BufferUnderflowException();
    }
    return backingArray[arrayOffset + position++];
!!!772123.java!!!	get(in index : int) : short
    checkIndex(index);
    return backingArray[arrayOffset + index];
!!!772251.java!!!	get(inout dst : short, in dstOffset : int, in shortCount : int) : ShortBuffer
    if (shortCount > remaining()) {
      throw new BufferUnderflowException();
    }
    System.arraycopy(backingArray, arrayOffset + position, dst, dstOffset, shortCount);
    position += shortCount;
    return this;
!!!772379.java!!!	isDirect() : boolean
    return false;
!!!772507.java!!!	order() : ByteOrder
    return ByteOrder.nativeOrder();
!!!772635.java!!!	put(in c : short) : ShortBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    if (position == limit) {
      throw new BufferOverflowException();
    }
    backingArray[arrayOffset + position++] = c;
    return this;
!!!772763.java!!!	put(in index : int, in c : short) : ShortBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index);
    backingArray[arrayOffset + index] = c;
    return this;
!!!772891.java!!!	put(inout src : short, in srcOffset : int, in shortCount : int) : ShortBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    if (shortCount > remaining()) {
      throw new BufferOverflowException();
    }
    System.arraycopy(src, srcOffset, backingArray, arrayOffset + position, shortCount);
    position += shortCount;
    return this;
