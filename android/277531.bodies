class Inflater
!!!1773467.java!!!	Inflater()
        this(false);
!!!1773595.java!!!	Inflater(inout noHeader : boolean)
        streamHandle = createStream(noHeader);
        guard.open("end");
!!!1773851.java!!!	end() : void
        guard.close();
        if (streamHandle != -1) {
            endImpl(streamHandle);
            inRead = 0;
            inLength = 0;
            streamHandle = -1;
        }
!!!1774107.java!!!	finalize() : void
        try {
            if (guard != null) {
                guard.warnIfOpen();
            }
            end();
        } finally {
            try {
                super.finalize();
            } catch (Throwable t) {
                throw new AssertionError(t);
            }
        }
!!!1774235.java!!!	finished() : boolean
        return finished;
!!!1774363.java!!!	getAdler() : int
        checkOpen();
        return getAdlerImpl(streamHandle);
!!!1774619.java!!!	getBytesRead() : long
        checkOpen();
        return getTotalInImpl(streamHandle);
!!!1774747.java!!!	getBytesWritten() : long
        checkOpen();
        return getTotalOutImpl(streamHandle);
!!!1774875.java!!!	getRemaining() : int
        return inLength - inRead;
!!!1775003.java!!!	getTotalIn() : int
        checkOpen();
        return (int) Math.min(getTotalInImpl(streamHandle), (long) Integer.MAX_VALUE);
!!!1775259.java!!!	getTotalOut() : int
        checkOpen();
        return (int) Math.min(getTotalOutImpl(streamHandle), (long) Integer.MAX_VALUE);
!!!1775515.java!!!	inflate(inout buf : byte) : int
        return inflate(buf, 0, buf.length);
!!!1775643.java!!!	inflate(inout buf : byte, in offset : int, in byteCount : int) : int
        Arrays.checkOffsetAndCount(buf.length, offset, byteCount);

        checkOpen();

        if (needsInput()) {
            return 0;
        }

        boolean neededDict = needsDictionary;
        needsDictionary = false;
        int result = inflateImpl(buf, offset, byteCount, streamHandle);
        if (needsDictionary && neededDict) {
            throw new DataFormatException("Needs dictionary");
        }
        return result;
!!!1775899.java!!!	needsDictionary() : boolean
        return needsDictionary;
!!!1776027.java!!!	needsInput() : boolean
        return inRead == inLength;
!!!1776155.java!!!	reset() : void
        checkOpen();
        finished = false;
        needsDictionary = false;
        inLength = inRead = 0;
        resetImpl(streamHandle);
!!!1776411.java!!!	setDictionary(inout dictionary : byte) : void
        setDictionary(dictionary, 0, dictionary.length);
!!!1776539.java!!!	setDictionary(inout dictionary : byte, in offset : int, in byteCount : int) : void
        checkOpen();
        Arrays.checkOffsetAndCount(dictionary.length, offset, byteCount);
        setDictionaryImpl(dictionary, offset, byteCount, streamHandle);
!!!1776795.java!!!	setInput(inout buf : byte) : void
        setInput(buf, 0, buf.length);
!!!1776923.java!!!	setInput(inout buf : byte, in offset : int, in byteCount : int) : void
        checkOpen();
        Arrays.checkOffsetAndCount(buf.length, offset, byteCount);
        inRead = 0;
        inLength = byteCount;
        setInputImpl(buf, offset, byteCount, streamHandle);
!!!1777179.java!!!	setFileInput(inout fd : FileDescriptor, in offset : long, in byteCount : int) : int
        checkOpen();
        inRead = 0;
        inLength = setFileInputImpl(fd, offset, byteCount, streamHandle);
        return inLength;
!!!1777435.java!!!	checkOpen() : void
        if (streamHandle == -1) {
            throw new IllegalStateException("attempt to use Inflater after calling end");
        }
