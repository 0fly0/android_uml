class DelegateClassAdapter
!!!9583884.java!!!	DelegateClassAdapter(inout log : Log, inout cv : ClassVisitor, in className : String, inout delegateMethods : Set<String>)
        super(Opcodes.ASM4, cv);
        mLog = log;
        mClassName = className;
        mDelegateMethods = delegateMethods;
!!!9584012.java!!!	visitMethod(in access : int, in name : String, in desc : String, in signature : String, inout exceptions : String) : MethodVisitor

        boolean isStatic = (access & Opcodes.ACC_STATIC) != 0;
        boolean isNative = (access & Opcodes.ACC_NATIVE) != 0;

        boolean useDelegate = (isNative && mDelegateMethods.contains(ALL_NATIVES)) ||
                              mDelegateMethods.contains(name);

        if (!useDelegate) {
            // Not creating a delegate for this method, pass it as-is from the reader
            // to the writer.
            return super.visitMethod(access, name, desc, signature, exceptions);
        }

        if (useDelegate) {
            if (CONSTRUCTOR.equals(name) || CLASS_INIT.equals(name)) {
                // We don't currently support generating delegates for constructors.
                throw new UnsupportedOperationException(
                    String.format(
                        "Delegate doesn't support overriding constructor %1$s:%2$s(%3$s)",  //$NON-NLS-1$
                        mClassName, name, desc));
            }
        }

        if (isNative) {
            // Remove native flag
            access = access & ~Opcodes.ACC_NATIVE;
            MethodVisitor mwDelegate = super.visitMethod(access, name, desc, signature, exceptions);

            DelegateMethodAdapter2 a = new DelegateMethodAdapter2(
                    mLog, null /*mwOriginal*/, mwDelegate, mClassName, name, desc, isStatic);

            // A native has no code to visit, so we need to generate it directly.
            a.generateDelegateCode();

            return mwDelegate;
        }

        // Given a non-native SomeClass.MethodName(), we want to generate 2 methods:
        // - A copy of the original method named SomeClass.MethodName_Original().
        //   The content is the original method as-is from the reader.
        // - A brand new implementation of SomeClass.MethodName() which calls to a
        //   non-existing method named SomeClass_Delegate.MethodName().
        //   The implementation of this 'delegate' method is done in layoutlib_brigde.

        int accessDelegate = access;
        // change access to public for the original one
        if (Main.sOptions.generatePublicAccess) {
            access &= ~(Opcodes.ACC_PROTECTED | Opcodes.ACC_PRIVATE);
            access |= Opcodes.ACC_PUBLIC;
        }

        MethodVisitor mwOriginal = super.visitMethod(access, name + ORIGINAL_SUFFIX,
                                                     desc, signature, exceptions);
        MethodVisitor mwDelegate = super.visitMethod(accessDelegate, name,
                                                     desc, signature, exceptions);

        DelegateMethodAdapter2 a = new DelegateMethodAdapter2(
                mLog, mwOriginal, mwDelegate, mClassName, name, desc, isStatic);
        return a;
