class DirectClassFile
!!!14865548.java!!!	stringOrNone(inout obj : Object) : String
        if (obj == null) {
            return "(none)";
        }

        return obj.toString();
!!!14865676.java!!!	DirectClassFile(inout bytes : ByteArray, inout filePath : String, inout strictParse : boolean)
        if (bytes == null) {
            throw new NullPointerException("bytes == null");
        }

        if (filePath == null) {
            throw new NullPointerException("filePath == null");
        }

        this.filePath = filePath;
        this.bytes = bytes;
        this.strictParse = strictParse;
        this.accessFlags = -1;
!!!14865804.java!!!	DirectClassFile(inout bytes : byte, inout filePath : String, inout strictParse : boolean)
        this(new ByteArray(bytes), filePath, strictParse);
!!!14865932.java!!!	setObserver(inout observer : ParseObserver) : void
        this.observer = observer;
!!!14866060.java!!!	setAttributeFactory(inout attributeFactory : AttributeFactory) : void
        if (attributeFactory == null) {
            throw new NullPointerException("attributeFactory == null");
        }

        this.attributeFactory = attributeFactory;
!!!14866188.java!!!	getBytes() : ByteArray
        return bytes;
!!!14866316.java!!!	getMagic() : int
        parseToInterfacesIfNecessary();
        return getMagic0();
!!!14866444.java!!!	getMinorVersion() : int
        parseToInterfacesIfNecessary();
        return getMinorVersion0();
!!!14866572.java!!!	getMajorVersion() : int
        parseToInterfacesIfNecessary();
        return getMajorVersion0();
!!!14866700.java!!!	getAccessFlags() : int
        parseToInterfacesIfNecessary();
        return accessFlags;
!!!14866828.java!!!	getThisClass() : CstType
        parseToInterfacesIfNecessary();
        return thisClass;
!!!14866956.java!!!	getSuperclass() : CstType
        parseToInterfacesIfNecessary();
        return superClass;
!!!14867084.java!!!	getConstantPool() : ConstantPool
        parseToInterfacesIfNecessary();
        return pool;
!!!14867212.java!!!	getInterfaces() : TypeList
        parseToInterfacesIfNecessary();
        return interfaces;
!!!14867340.java!!!	getFields() : FieldList
        parseToEndIfNecessary();
        return fields;
!!!14867468.java!!!	getMethods() : MethodList
        parseToEndIfNecessary();
        return methods;
!!!14867596.java!!!	getAttributes() : AttributeList
        parseToEndIfNecessary();
        return attributes;
!!!14867724.java!!!	getSourceFile() : CstString
        AttributeList attribs = getAttributes();
        Attribute attSf = attribs.findFirst(AttSourceFile.ATTRIBUTE_NAME);

        if (attSf instanceof AttSourceFile) {
            return ((AttSourceFile) attSf).getSourceFile();
        }

        return null;
!!!14867852.java!!!	makeTypeList(in offset : int, in size : int) : TypeList
        if (size == 0) {
            return StdTypeList.EMPTY;
        }

        if (pool == null) {
            throw new IllegalStateException("pool not yet initialized");
        }

        return new DcfTypeList(bytes, offset, size, pool, observer);
!!!14867980.java!!!	getMagic0() : int
        return bytes.getInt(0);
!!!14868108.java!!!	getMinorVersion0() : int
        return bytes.getUnsignedShort(4);
!!!14868236.java!!!	getMajorVersion0() : int
        return bytes.getUnsignedShort(6);
!!!14868364.java!!!	parseToInterfacesIfNecessary() : void
        if (accessFlags == -1) {
            parse();
        }
!!!14868492.java!!!	parseToEndIfNecessary() : void
        if (attributes == null) {
            parse();
        }
!!!14868620.java!!!	parse() : void
        try {
            parse0();
        } catch (ParseException ex) {
            ex.addContext("...while parsing " + filePath);
            throw ex;
        } catch (RuntimeException ex) {
            ParseException pe = new ParseException(ex);
            pe.addContext("...while parsing " + filePath);
            throw pe;
        }
!!!14868748.java!!!	isGoodVersion(in magic : int, in minorVersion : int, in majorVersion : int) : boolean
        /* Valid version ranges are typically of the form
         * "A.0 through B.C inclusive" where A <= B and C >= 0,
         * which is why we don't have a CLASS_FILE_MIN_MINOR_VERSION.
         */
        if (magic == CLASS_FILE_MAGIC && minorVersion >= 0) {
            /* Check against max first to handle the case where
             * MIN_MAJOR == MAX_MAJOR.
             */
            if (majorVersion == CLASS_FILE_MAX_MAJOR_VERSION) {
                if (minorVersion <= CLASS_FILE_MAX_MINOR_VERSION) {
                    return true;
                }
            } else if (majorVersion < CLASS_FILE_MAX_MAJOR_VERSION &&
                       majorVersion >= CLASS_FILE_MIN_MAJOR_VERSION) {
                return true;
            }
        }

        return false;
!!!14868876.java!!!	parse0() : void
        if (bytes.size() < 10) {
            throw new ParseException("severely truncated class file");
        }

        if (observer != null) {
            observer.parsed(bytes, 0, 0, "begin classfile");
            observer.parsed(bytes, 0, 4, "magic: " + Hex.u4(getMagic0()));
            observer.parsed(bytes, 4, 2,
                            "minor_version: " + Hex.u2(getMinorVersion0()));
            observer.parsed(bytes, 6, 2,
                            "major_version: " + Hex.u2(getMajorVersion0()));
        }

        if (strictParse) {
            /* Make sure that this looks like a valid class file with a
             * version that we can handle.
             */
            if (!isGoodVersion(getMagic0(), getMinorVersion0(),
                               getMajorVersion0())) {
                throw new ParseException("bad class file magic (" +
                                         Hex.u4(getMagic0()) +
                                         ") or version (" +
                                         Hex.u2(getMajorVersion0()) + "." +
                                         Hex.u2(getMinorVersion0()) + ")");
            }
        }

        ConstantPoolParser cpParser = new ConstantPoolParser(bytes);
        cpParser.setObserver(observer);
        pool = cpParser.getPool();
        pool.setImmutable();

        int at = cpParser.getEndOffset();
        int accessFlags = bytes.getUnsignedShort(at); // u2 access_flags;
        int cpi = bytes.getUnsignedShort(at + 2); // u2 this_class;
        thisClass = (CstType) pool.get(cpi);
        cpi = bytes.getUnsignedShort(at + 4); // u2 super_class;
        superClass = (CstType) pool.get0Ok(cpi);
        int count = bytes.getUnsignedShort(at + 6); // u2 interfaces_count

        if (observer != null) {
            observer.parsed(bytes, at, 2,
                            "access_flags: " +
                            AccessFlags.classString(accessFlags));
            observer.parsed(bytes, at + 2, 2, "this_class: " + thisClass);
            observer.parsed(bytes, at + 4, 2, "super_class: " +
                            stringOrNone(superClass));
            observer.parsed(bytes, at + 6, 2,
                            "interfaces_count: " + Hex.u2(count));
            if (count != 0) {
                observer.parsed(bytes, at + 8, 0, "interfaces:");
            }
        }

        at += 8;
        interfaces = makeTypeList(at, count);
        at += count * 2;

        if (strictParse) {
            /*
             * Make sure that the file/jar path matches the declared
             * package/class name.
             */
            String thisClassName = thisClass.getClassType().getClassName();
            if (!(filePath.endsWith(".class") &&
                  filePath.startsWith(thisClassName) &&
                  (filePath.length() == (thisClassName.length() + 6)))) {
                throw new ParseException("class name (" + thisClassName +
                                         ") does not match path (" +
                                         filePath + ")");
            }
        }

        /*
         * Only set the instance variable accessFlags here, since
         * that's what signals a successful parse of the first part of
         * the file (through the interfaces list).
         */
        this.accessFlags = accessFlags;

        FieldListParser flParser =
            new FieldListParser(this, thisClass, at, attributeFactory);
        flParser.setObserver(observer);
        fields = flParser.getList();
        at = flParser.getEndOffset();

        MethodListParser mlParser =
            new MethodListParser(this, thisClass, at, attributeFactory);
        mlParser.setObserver(observer);
        methods = mlParser.getList();
        at = mlParser.getEndOffset();

        AttributeListParser alParser =
            new AttributeListParser(this, AttributeFactory.CTX_CLASS, at,
                                    attributeFactory);
        alParser.setObserver(observer);
        attributes = alParser.getList();
        attributes.setImmutable();
        at = alParser.getEndOffset();

        if (at != bytes.size()) {
            throw new ParseException("extra bytes at end of class file, " +
                                     "at offset " + Hex.u4(at));
        }

        if (observer != null) {
            observer.parsed(bytes, at, 0, "end classfile");
        }
