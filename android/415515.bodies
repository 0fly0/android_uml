class ProxyTest
!!!2788891.java!!!	testClassLoaderMustSeeImplementedInterfaces() : void
        String prefix = ProxyTest.class.getName();
        ClassLoader loaderA = new ClassLoaderBuilder().withPrivateCopy(prefix).build();
        ClassLoader loaderB = new ClassLoaderBuilder().withPrivateCopy(prefix).build();

        Class[] interfacesA = { loaderA.loadClass(prefix + "$Echo") };
        try {
            Proxy.newProxyInstance(loaderB, interfacesA, new TestInvocationHandler());
            fail();
        } catch (IllegalArgumentException expected) {
        }
!!!2789019.java!!!	testClassLoaderDoesNotNeedToSeeInvocationHandlerLoader() : void
        String prefix = ProxyTest.class.getName();
        ClassLoader loaderA = new ClassLoaderBuilder().withPrivateCopy(prefix).build();
        ClassLoader loaderB = new ClassLoaderBuilder().withPrivateCopy(prefix).build();
        InvocationHandler invocationHandlerB = (InvocationHandler) loaderB.loadClass(
                prefix + "$TestInvocationHandler").newInstance();

        Class[] interfacesA = { loaderA.loadClass(prefix + "$Echo") };
        Object proxy = Proxy.newProxyInstance(loaderA, interfacesA, invocationHandlerB);
        assertEquals(loaderA, proxy.getClass().getClassLoader());
        assertEquals("foo", proxy.getClass().getMethod("echo", String.class).invoke(proxy, "foo"));
!!!2789403.java!!!	test24846() : void
      ClassLoader cl = getClass().getClassLoader();
      Class[] interfaces = { java.beans.PropertyChangeListener.class };
      Object proxy = Proxy.newProxyInstance(cl, interfaces, new InvocationHandler() {
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
          return null;
        }
      });
      for (Field field : proxy.getClass().getDeclaredFields()) {
        field.setAccessible(true);
        assertFalse(field.isAnnotationPresent(Deprecated.class));
      }
