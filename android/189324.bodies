class DummyAudioSource
!!!448140.cpp!!!	Create(in samplingRate : int32_t, in channelCount : int32_t, in frameDurationUs : int64_t, in audioDurationUs : int64_t) : sp<DummyAudioSource>

    ALOGV("Create ");
    return new DummyAudioSource(samplingRate,
                                channelCount,
                                frameDurationUs,
                                audioDurationUs);

!!!448268.cpp!!!	start(inout params : MetaData = NULL) : status_t
    ALOGV("start: E");
    status_t err = OK;

    mTimeStampUs = 0;

    mBufferGroup = new MediaBufferGroup;
    mBufferGroup->add_buffer(
            new MediaBuffer(mNumberOfSamplePerFrame * sizeof(int16_t)));

    ALOGV("start: X");

    return err;
!!!448396.cpp!!!	stop() : status_t
    ALOGV("stop");

    delete mBufferGroup;
    mBufferGroup = NULL;

    return OK;
!!!448524.cpp!!!	getFormat() : sp<MetaData>
    ALOGV("getFormat");

    sp<MetaData> meta = new MetaData;
    meta->setCString(kKeyMIMEType, MEDIA_MIMETYPE_AUDIO_RAW);
    meta->setInt32(kKeyChannelCount, mChannelCount);
    meta->setInt32(kKeySampleRate, mSamplingRate);
    meta->setInt64(kKeyDuration, mFrameDurationUs);
    meta->setCString(kKeyDecoderComponent, "DummyAudioSource");

    return meta;
!!!448652.cpp!!!	read(inout out : MediaBuffer, in options : ReadOptions = NULL) : status_t

    ALOGV("read: E");

    int64_t seekTimeUs;
    ReadOptions::SeekMode mode;

    if (options && options->getSeekTo(&seekTimeUs, &mode)) {
        CHECK(seekTimeUs >= 0);
        mTimeStampUs = seekTimeUs;
    }

    {
        Mutex::Autolock autoLock(mLock);
        if (mTimeStampUs >= mAudioDurationUs) {
            ALOGI("read: EOS reached %lld > %lld",
                mTimeStampUs, mAudioDurationUs);

            *out = NULL;
            return ERROR_END_OF_STREAM;
        }
    }

    MediaBuffer *buffer;
    status_t err = mBufferGroup->acquire_buffer(&buffer);
    if (err != OK) {
        ALOGE("Failed to acquire buffer from mBufferGroup: %d", err);
        return err;
    }

    memset((uint8_t *) buffer->data() + buffer->range_offset(),
            0, mNumberOfSamplePerFrame << 1);
    buffer->set_range(buffer->range_offset(), (mNumberOfSamplePerFrame << 1));
    buffer->meta_data()->setInt64(kKeyTime, mTimeStampUs);

    ALOGV("read: offset  = %d, size = %d, mTimeStampUs = %lld",
             buffer->range_offset(), buffer->size(), mTimeStampUs);

    mTimeStampUs = mTimeStampUs + mFrameDurationUs;
    *out = buffer;

    return OK;
!!!448780.cpp!!!	setDuration(in audioDurationUs : int64_t) : void
    ALOGV("setDuration: %lld us added to %lld us",
        audioDurationUs, mAudioDurationUs);

    Mutex::Autolock autoLock(mLock);
    mAudioDurationUs += audioDurationUs;
!!!448908.cpp!!!	~DummyAudioSource()
    /* Do nothing here? */
    ALOGV("~DummyAudioSource");
!!!449036.cpp!!!	DummyAudioSource(in samplingRate : int32_t, in channelCount : int32_t, in frameDurationUs : int64_t, in audioDurationUs : int64_t)

    mNumberOfSamplePerFrame = (int32_t)
            ((1L * mSamplingRate * mFrameDurationUs)/1000000);
    mNumberOfSamplePerFrame = mNumberOfSamplePerFrame  * mChannelCount;

    ALOGV("Constructor: E");
    ALOGV("samplingRate = %d", samplingRate);
    ALOGV("channelCount = %d", channelCount);
    ALOGV("frameDurationUs = %lld", frameDurationUs);
    ALOGV("audioDurationUs = %lld", audioDurationUs);
    ALOGV("mNumberOfSamplePerFrame = %d", mNumberOfSamplePerFrame);
    ALOGV("Constructor: X");
