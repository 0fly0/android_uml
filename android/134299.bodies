class CharArrayReader
!!!155547.java!!!	CharArrayReader(inout buf : char)
        this.buf = buf;
        this.count = buf.length;
!!!155675.java!!!	CharArrayReader(inout buf : char, in offset : int, in length : int)
        /*
         * The spec of this constructor is broken. In defining the legal values
         * of offset and length, it doesn't consider buffer's length. And to be
         * compatible with the broken spec, we must also test whether
         * (offset + length) overflows.
         */
        if (offset < 0 || offset > buf.length || length < 0 || offset + length < 0) {
            throw new IllegalArgumentException();
        }
        this.buf = buf;
        this.pos = offset;
        this.markedPos = offset;

        /* This is according to spec */
        int bufferLength = buf.length;
        this.count = offset + length < bufferLength ? length : bufferLength;
!!!155803.java!!!	close() : void
        synchronized (lock) {
            if (isOpen()) {
                buf = null;
            }
        }
!!!155931.java!!!	isOpen() : boolean
        return buf != null;
!!!156059.java!!!	isClosed() : boolean
        return buf == null;
!!!156187.java!!!	mark(in readLimit : int) : void
        synchronized (lock) {
            checkNotClosed();
            markedPos = pos;
        }
!!!156315.java!!!	checkNotClosed() : void
        if (isClosed()) {
            throw new IOException("CharArrayReader is closed");
        }
!!!156443.java!!!	markSupported() : boolean
        return true;
!!!156571.java!!!	read() : int
        synchronized (lock) {
            checkNotClosed();
            if (pos == count) {
                return -1;
            }
            return buf[pos++];
        }
!!!156699.java!!!	read(inout buffer : char, in offset : int, in len : int) : int
        Arrays.checkOffsetAndCount(buffer.length, offset, len);
        synchronized (lock) {
            checkNotClosed();
            if (pos < this.count) {
                int bytesRead = pos + len > this.count ? this.count - pos : len;
                System.arraycopy(this.buf, pos, buffer, offset, bytesRead);
                pos += bytesRead;
                return bytesRead;
            }
            return -1;
        }
!!!156827.java!!!	ready() : boolean
        synchronized (lock) {
            checkNotClosed();
            return pos != count;
        }
!!!156955.java!!!	reset() : void
        synchronized (lock) {
            checkNotClosed();
            pos = markedPos != -1 ? markedPos : 0;
        }
!!!157083.java!!!	skip(in charCount : long) : long
        synchronized (lock) {
            checkNotClosed();
            if (charCount <= 0) {
                return 0;
            }
            long skipped = 0;
            if (charCount < this.count - pos) {
                pos = pos + (int) charCount;
                skipped = charCount;
            } else {
                skipped = this.count - pos;
                pos = this.count;
            }
            return skipped;
        }
