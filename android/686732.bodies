class Drawable
!!!2162828.java!!!	setBounds(in left : int, in top : int, in right : int, in bottom : int) : void
        Rect oldBounds = mBounds;

        if (oldBounds == ZERO_BOUNDS_RECT) {
            oldBounds = mBounds = new Rect();
        }

        if (oldBounds.left != left || oldBounds.top != top ||
                oldBounds.right != right || oldBounds.bottom != bottom) {
            mBounds.set(left, top, right, bottom);
            onBoundsChange(mBounds);
        }
!!!2162956.java!!!	setBounds(inout bounds : Rect) : void
        setBounds(bounds.left, bounds.top, bounds.right, bounds.bottom);
!!!2163084.java!!!	copyBounds(inout bounds : Rect) : void
        bounds.set(mBounds);
!!!2163212.java!!!	copyBounds() : Rect
        return new Rect(mBounds);
!!!2163340.java!!!	getBounds() : Rect
        if (mBounds == ZERO_BOUNDS_RECT) {
            mBounds = new Rect();
        }

        return mBounds;
!!!2163468.java!!!	setChangingConfigurations(in configs : int) : void
        mChangingConfigurations = configs;
!!!2163596.java!!!	getChangingConfigurations() : int
        return mChangingConfigurations;
!!!2164364.java!!!	setCallback(inout cb : Callback) : void
        mCallback = new WeakReference<Callback>(cb);
!!!2164492.java!!!	getCallback() : Callback
        if (mCallback != null) {
            return mCallback.get();
        }
        return null;
!!!2164620.java!!!	invalidateSelf() : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.invalidateDrawable(this);
        }
!!!2164748.java!!!	scheduleSelf(inout what : Runnable, in when : long) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.scheduleDrawable(this, what, when);
        }
!!!2164876.java!!!	unscheduleSelf(inout what : Runnable) : void
        final Callback callback = getCallback();
        if (callback != null) {
            callback.unscheduleDrawable(this, what);
        }
!!!2165004.java!!!	getLayoutDirection() : int
        return mLayoutDirection;
!!!2165132.java!!!	setLayoutDirection(in layoutDirection : int) : void
        if (getLayoutDirection() != layoutDirection) {
            mLayoutDirection = layoutDirection;
        }
!!!2165516.java!!!	setColorFilter(in color : int, inout mode : Mode) : void
        setColorFilter(new PorterDuffColorFilter(color, mode));
!!!2165644.java!!!	clearColorFilter() : void
        setColorFilter(null);
!!!2165772.java!!!	isStateful() : boolean
        return false;
!!!2165900.java!!!	setState(in stateSet : int) : boolean
        if (!Arrays.equals(mStateSet, stateSet)) {
            mStateSet = stateSet;
            return onStateChange(stateSet);
        }
        return false;
!!!2166028.java!!!	getState() : int
        return mStateSet;
!!!2166284.java!!!	getCurrent() : Drawable
        return this;
!!!2166412.java!!!	setLevel(in level : int) : boolean
        if (mLevel != level) {
            mLevel = level;
            return onLevelChange(level);
        }
        return false;
!!!2166540.java!!!	getLevel() : int
        return mLevel;
!!!2166668.java!!!	setVisible(inout visible : boolean, inout restart : boolean) : boolean
        boolean changed = mVisible != visible;
        if (changed) {
            mVisible = visible;
            invalidateSelf();
        }
        return changed;
!!!2166796.java!!!	isVisible() : boolean
        return mVisible;
!!!2167052.java!!!	resolveOpacity(in op1 : int, in op2 : int) : int
        if (op1 == op2) {
            return op1;
        }
        if (op1 == PixelFormat.UNKNOWN || op2 == PixelFormat.UNKNOWN) {
            return PixelFormat.UNKNOWN;
        }
        if (op1 == PixelFormat.TRANSLUCENT || op2 == PixelFormat.TRANSLUCENT) {
            return PixelFormat.TRANSLUCENT;
        }
        if (op1 == PixelFormat.TRANSPARENT || op2 == PixelFormat.TRANSPARENT) {
            return PixelFormat.TRANSPARENT;
        }
        return PixelFormat.OPAQUE;
!!!2167180.java!!!	getTransparentRegion() : Region
        return null;
!!!2167308.java!!!	onStateChange(inout state : int) : boolean
 return false;
!!!2167436.java!!!	onLevelChange(in level : int) : boolean
 return false;
!!!2167692.java!!!	getIntrinsicWidth() : int
        return -1;
!!!2167820.java!!!	getIntrinsicHeight() : int
        return -1;
!!!2167948.java!!!	getMinimumWidth() : int
        final int intrinsicWidth = getIntrinsicWidth();
        return intrinsicWidth > 0 ? intrinsicWidth : 0;
!!!2168076.java!!!	getMinimumHeight() : int
        final int intrinsicHeight = getIntrinsicHeight();
        return intrinsicHeight > 0 ? intrinsicHeight : 0;
!!!2168204.java!!!	getPadding(inout padding : Rect) : boolean
        padding.set(0, 0, 0, 0);
        return false;
!!!2168332.java!!!	getLayoutInsets() : Insets
        return Insets.NONE;
!!!2168460.java!!!	mutate() : Drawable
        return this;
!!!2168588.java!!!	createFromStream(inout is : InputStream, in srcName : String) : Drawable
        return createFromResourceStream(null, null, is, srcName, null);
!!!2168716.java!!!	createFromResourceStream(inout res : Resources, inout value : TypedValue, inout is : InputStream, in srcName : String) : Drawable
        return createFromResourceStream(res, value, is, srcName, null);
!!!2168844.java!!!	createFromResourceStream(inout res : Resources, inout value : TypedValue, inout is : InputStream, in srcName : String, inout opts : Options) : Drawable

        if (is == null) {
            return null;
        }

        /*  ugh. The decodeStream contract is that we have already allocated
            the pad rect, but if the bitmap does not had a ninepatch chunk,
            then the pad will be ignored. If we could change this to lazily
            alloc/assign the rect, we could avoid the GC churn of making new
            Rects only to drop them on the floor.
        */
        Rect pad = new Rect();
        
        // Special stuff for compatibility mode: if the target density is not
        // the same as the display density, but the resource -is- the same as
        // the display density, then don't scale it down to the target density.
        // This allows us to load the system's density-correct resources into
        // an application in compatibility mode, without scaling those down
        // to the compatibility density only to have them scaled back up when
        // drawn to the screen.
        if (opts == null) opts = new BitmapFactory.Options();
        opts.inScreenDensity = res != null
                ? res.getDisplayMetrics().noncompatDensityDpi : DisplayMetrics.DENSITY_DEVICE;
        Bitmap  bm = BitmapFactory.decodeResourceStream(res, value, is, pad, opts);
        if (bm != null) {
            byte[] np = bm.getNinePatchChunk();
            if (np == null || !NinePatch.isNinePatchChunk(np)) {
                np = null;
                pad = null;
            }
            int[] layoutBounds = bm.getLayoutBounds();
            Rect layoutBoundsRect = null;
            if (layoutBounds != null) {
                layoutBoundsRect = new Rect(layoutBounds[0], layoutBounds[1],
                                             layoutBounds[2], layoutBounds[3]);
            }
            return drawableFromBitmap(res, bm, np, pad, layoutBoundsRect, srcName);
        }
        return null;
!!!2168972.java!!!	createFromXml(inout r : Resources, inout parser : XmlPullParser) : Drawable
        AttributeSet attrs = Xml.asAttributeSet(parser);

        int type;
        while ((type=parser.next()) != XmlPullParser.START_TAG &&
                type != XmlPullParser.END_DOCUMENT) {
            // Empty loop
        }

        if (type != XmlPullParser.START_TAG) {
            throw new XmlPullParserException("No start tag found");
        }

        Drawable drawable = createFromXmlInner(r, parser, attrs);

        if (drawable == null) {
            throw new RuntimeException("Unknown initial tag: " + parser.getName());
        }

        return drawable;
!!!2169100.java!!!	createFromXmlInner(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : Drawable
        Drawable drawable;

        final String name = parser.getName();

        if (name.equals("selector")) {
            drawable = new StateListDrawable();
        } else if (name.equals("level-list")) {
            drawable = new LevelListDrawable();
        /* Probably not doing this.
        } else if (name.equals("mipmap")) {
            drawable = new MipmapDrawable();
        */
        } else if (name.equals("layer-list")) {
            drawable = new LayerDrawable();
        } else if (name.equals("transition")) {
            drawable = new TransitionDrawable();
        } else if (name.equals("color")) {
            drawable = new ColorDrawable();
        } else if (name.equals("shape")) {
            drawable = new GradientDrawable();
        } else if (name.equals("scale")) {
            drawable = new ScaleDrawable();
        } else if (name.equals("clip")) {
            drawable = new ClipDrawable();
        } else if (name.equals("rotate")) {
            drawable = new RotateDrawable();
        } else if (name.equals("animated-rotate")) {
            drawable = new AnimatedRotateDrawable();            
        } else if (name.equals("animation-list")) {
            drawable = new AnimationDrawable();
        } else if (name.equals("inset")) {
            drawable = new InsetDrawable();
        } else if (name.equals("bitmap")) {
            drawable = new BitmapDrawable(r);
            if (r != null) {
               ((BitmapDrawable) drawable).setTargetDensity(r.getDisplayMetrics());
            }
        } else if (name.equals("nine-patch")) {
            drawable = new NinePatchDrawable();
            if (r != null) {
                ((NinePatchDrawable) drawable).setTargetDensity(r.getDisplayMetrics());
             }
        } else {
            throw new XmlPullParserException(parser.getPositionDescription() +
                    ": invalid drawable tag " + name);
        }

        drawable.inflate(r, parser, attrs);
        return drawable;
!!!2169228.java!!!	createFromPath(in pathName : String) : Drawable
        if (pathName == null) {
            return null;
        }

        Bitmap bm = BitmapFactory.decodeFile(pathName);
        if (bm != null) {
            return drawableFromBitmap(null, bm, null, null, null, pathName);
        }

        return null;
!!!2169356.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : void

        TypedArray a = r.obtainAttributes(attrs, com.android.internal.R.styleable.Drawable);
        inflateWithAttributes(r, parser, a, com.android.internal.R.styleable.Drawable_visible);
        a.recycle();
!!!2169484.java!!!	inflateWithAttributes(inout r : Resources, inout parser : XmlPullParser, inout attrs : TypedArray, in visibleAttr : int) : void

        mVisible = attrs.getBoolean(visibleAttr, mVisible);
!!!2169996.java!!!	getConstantState() : ConstantState
        return null;
!!!2170124.java!!!	drawableFromBitmap(inout res : Resources, inout bm : Bitmap, inout np : byte, inout pad : Rect, inout layoutBounds : Rect, in srcName : String) : Drawable

        if (np != null) {
            return new NinePatchDrawable(res, bm, np, pad, layoutBounds, srcName);
        }

        return new BitmapDrawable(res, bm);
