class Arrays
!!!1185563.java!!!	Arrays()
        /* empty */
!!!1185691.java!!!	asList(inout  : T...array) : List
        return new ArrayList<T>(array);
!!!1185819.java!!!	binarySearch(inout array : byte, in value : byte) : int
        return binarySearch(array, 0, array.length, value);
!!!1185947.java!!!	binarySearch(inout array : byte, in startIndex : int, in endIndex : int, in value : byte) : int
        checkBinarySearchBounds(startIndex, endIndex, array.length);
        int lo = startIndex;
        int hi = endIndex - 1;

        while (lo <= hi) {
            int mid = (lo + hi) >>> 1;
            byte midVal = array[mid];

            if (midVal < value) {
                lo = mid + 1;
            } else if (midVal > value) {
                hi = mid - 1;
            } else {
                return mid;  // value found
            }
        }
        return ~lo;  // value not present
!!!1186075.java!!!	binarySearch(inout array : char, in value : char) : int
        return binarySearch(array, 0, array.length, value);
!!!1186203.java!!!	binarySearch(inout array : char, in startIndex : int, in endIndex : int, in value : char) : int
        checkBinarySearchBounds(startIndex, endIndex, array.length);
        int lo = startIndex;
        int hi = endIndex - 1;

        while (lo <= hi) {
            int mid = (lo + hi) >>> 1;
            char midVal = array[mid];

            if (midVal < value) {
                lo = mid + 1;
            } else if (midVal > value) {
                hi = mid - 1;
            } else {
                return mid;  // value found
            }
        }
        return ~lo;  // value not present
!!!1186331.java!!!	binarySearch(inout array : double, in value : double) : int
        return binarySearch(array, 0, array.length, value);
!!!1186459.java!!!	binarySearch(inout array : double, in startIndex : int, in endIndex : int, in value : double) : int
        checkBinarySearchBounds(startIndex, endIndex, array.length);
        int lo = startIndex;
        int hi = endIndex - 1;

        while (lo <= hi) {
            int mid = (lo + hi) >>> 1;
            double midVal = array[mid];

            if (midVal < value) {
                lo = mid + 1;
            } else if (midVal > value) {
                hi = mid - 1;
            } else if (midVal != 0 && midVal == value) {
                return mid;  // value found
            } else { // Either midVal and value are == 0 or at least one is NaN
                long midValBits = Double.doubleToLongBits(midVal);
                long valueBits  = Double.doubleToLongBits(value);

                if (midValBits < valueBits) {
                    lo = mid + 1; // (-0.0, 0.0) or (not NaN, NaN); midVal < val
                } else if (midValBits > valueBits) {
                    hi = mid - 1; // (0.0, -0.0) or (NaN, not NaN); midVal > val
                } else {
                    return mid; // bit patterns are equal; value found
                }
            }
        }
        return ~lo;  // value not present
!!!1186587.java!!!	binarySearch(inout array : float, in value : float) : int
        return binarySearch(array, 0, array.length, value);
!!!1186715.java!!!	binarySearch(inout array : float, in startIndex : int, in endIndex : int, in value : float) : int
        checkBinarySearchBounds(startIndex, endIndex, array.length);
        int lo = startIndex;
        int hi = endIndex - 1;

        while (lo <= hi) {
            int mid = (lo + hi) >>> 1;
            float midVal = array[mid];

            if (midVal < value) {
                lo = mid + 1;
            } else if (midVal > value) {
                hi = mid - 1;
            } else if (midVal != 0 && midVal == value) {
                return mid;  // value found
            } else { // Either midVal and value are == 0 or at least one is NaN
                int midValBits = Float.floatToIntBits(midVal);
                int valueBits  = Float.floatToIntBits(value);

                if (midValBits < valueBits) {
                    lo = mid + 1; // (-0.0, 0.0) or (not NaN, NaN); midVal < val
                } else if (midValBits > valueBits) {
                    hi = mid - 1; // (0.0, -0.0) or (NaN, not NaN); midVal > val
                } else {
                    return mid; // bit patterns are equal; value found
                }
            }
        }
        return ~lo;  // value not present
!!!1186843.java!!!	binarySearch(inout array : int, in value : int) : int
        return binarySearch(array, 0, array.length, value);
!!!1186971.java!!!	binarySearch(inout array : int, in startIndex : int, in endIndex : int, in value : int) : int
        checkBinarySearchBounds(startIndex, endIndex, array.length);
        int lo = startIndex;
        int hi = endIndex - 1;

        while (lo <= hi) {
            int mid = (lo + hi) >>> 1;
            int midVal = array[mid];

            if (midVal < value) {
                lo = mid + 1;
            } else if (midVal > value) {
                hi = mid - 1;
            } else {
                return mid;  // value found
            }
        }
        return ~lo;  // value not present
!!!1187099.java!!!	binarySearch(inout array : long, in value : long) : int
        return binarySearch(array, 0, array.length, value);
!!!1187227.java!!!	binarySearch(inout array : long, in startIndex : int, in endIndex : int, in value : long) : int
        checkBinarySearchBounds(startIndex, endIndex, array.length);
        int lo = startIndex;
        int hi = endIndex - 1;

        while (lo <= hi) {
            int mid = (lo + hi) >>> 1;
            long midVal = array[mid];

            if (midVal < value) {
                lo = mid + 1;
            } else if (midVal > value) {
                hi = mid - 1;
            } else {
                return mid;  // value found
            }
         }
         return ~lo;  // value not present
!!!1187355.java!!!	binarySearch(inout array : Object, inout value : Object) : int
        return binarySearch(array, 0, array.length, value);
!!!1187483.java!!!	binarySearch(inout array : Object, in startIndex : int, in endIndex : int, inout value : Object) : int
        checkBinarySearchBounds(startIndex, endIndex, array.length);
        int lo = startIndex;
        int hi = endIndex - 1;

        while (lo <= hi) {
            int mid = (lo + hi) >>> 1;
            @SuppressWarnings("unchecked")
            int midValCmp = ((Comparable) array[mid]).compareTo(value);

            if (midValCmp < 0) {
                lo = mid + 1;
            } else if (midValCmp > 0) {
                hi = mid - 1;
            } else {
                return mid;  // value found
            }
        }
        return ~lo;  // value not present
!!!1187611.java!!!	binarySearch(inout array : T, inout value : T, inout comparator : Comparator) : int
        return binarySearch(array, 0, array.length, value, comparator);
!!!1187739.java!!!	binarySearch(inout array : T, in startIndex : int, in endIndex : int, inout value : T, inout comparator : Comparator) : int
        if (comparator == null) {
            return binarySearch(array, startIndex, endIndex, value);
        }

        checkBinarySearchBounds(startIndex, endIndex, array.length);
        int lo = startIndex;
        int hi = endIndex - 1;

        while (lo <= hi) {
            int mid = (lo + hi) >>> 1;
            int midValCmp = comparator.compare(array[mid], value);

            if (midValCmp < 0) {
                lo = mid + 1;
            } else if (midValCmp > 0) {
                hi = mid - 1;
            } else {
                return mid;  // value found
            }
        }
        return ~lo;  // value not present
!!!1187867.java!!!	binarySearch(inout array : short, in value : short) : int
        return binarySearch(array, 0, array.length, value);
!!!1187995.java!!!	binarySearch(inout array : short, in startIndex : int, in endIndex : int, in value : short) : int
        checkBinarySearchBounds(startIndex, endIndex, array.length);
        int lo = startIndex;
        int hi = endIndex - 1;

        while (lo <= hi) {
            int mid = (lo + hi) >>> 1;
            short midVal = array[mid];

            if (midVal < value) {
                lo = mid + 1;
            } else if (midVal > value) {
                hi = mid - 1;
            } else {
                return mid;  // value found
            }
        }
        return ~lo;  // value not present
!!!1188123.java!!!	checkBinarySearchBounds(in startIndex : int, in endIndex : int, in length : int) : void
        if (startIndex > endIndex) {
            throw new IllegalArgumentException();
        }
        if (startIndex < 0 || endIndex > length) {
            throw new ArrayIndexOutOfBoundsException();
        }
!!!1188251.java!!!	fill(inout array : byte, in value : byte) : void
        for (int i = 0; i < array.length; i++) {
            array[i] = value;
        }
!!!1188379.java!!!	fill(inout array : byte, in start : int, in end : int, in value : byte) : void
        Arrays.checkStartAndEnd(array.length, start, end);
        for (int i = start; i < end; i++) {
            array[i] = value;
        }
!!!1188507.java!!!	fill(inout array : short, in value : short) : void
        for (int i = 0; i < array.length; i++) {
            array[i] = value;
        }
!!!1188635.java!!!	fill(inout array : short, in start : int, in end : int, in value : short) : void
        Arrays.checkStartAndEnd(array.length, start, end);
        for (int i = start; i < end; i++) {
            array[i] = value;
        }
!!!1188763.java!!!	fill(inout array : char, in value : char) : void
        for (int i = 0; i < array.length; i++) {
            array[i] = value;
        }
!!!1188891.java!!!	fill(inout array : char, in start : int, in end : int, in value : char) : void
        Arrays.checkStartAndEnd(array.length, start, end);
        for (int i = start; i < end; i++) {
            array[i] = value;
        }
!!!1189019.java!!!	fill(inout array : int, in value : int) : void
        for (int i = 0; i < array.length; i++) {
            array[i] = value;
        }
!!!1189147.java!!!	fill(inout array : int, in start : int, in end : int, in value : int) : void
        Arrays.checkStartAndEnd(array.length, start, end);
        for (int i = start; i < end; i++) {
            array[i] = value;
        }
!!!1189275.java!!!	fill(inout array : long, in value : long) : void
        for (int i = 0; i < array.length; i++) {
            array[i] = value;
        }
!!!1189403.java!!!	fill(inout array : long, in start : int, in end : int, in value : long) : void
        Arrays.checkStartAndEnd(array.length, start, end);
        for (int i = start; i < end; i++) {
            array[i] = value;
        }
!!!1189531.java!!!	fill(inout array : float, in value : float) : void
        for (int i = 0; i < array.length; i++) {
            array[i] = value;
        }
!!!1189659.java!!!	fill(inout array : float, in start : int, in end : int, in value : float) : void
        Arrays.checkStartAndEnd(array.length, start, end);
        for (int i = start; i < end; i++) {
            array[i] = value;
        }
!!!1189787.java!!!	fill(inout array : double, in value : double) : void
        for (int i = 0; i < array.length; i++) {
            array[i] = value;
        }
!!!1189915.java!!!	fill(inout array : double, in start : int, in end : int, in value : double) : void
        Arrays.checkStartAndEnd(array.length, start, end);
        for (int i = start; i < end; i++) {
            array[i] = value;
        }
!!!1190043.java!!!	fill(inout array : boolean, inout value : boolean) : void
        for (int i = 0; i < array.length; i++) {
            array[i] = value;
        }
!!!1190171.java!!!	fill(inout array : boolean, in start : int, in end : int, inout value : boolean) : void
        Arrays.checkStartAndEnd(array.length, start, end);
        for (int i = start; i < end; i++) {
            array[i] = value;
        }
!!!1190299.java!!!	fill(inout array : Object, inout value : Object) : void
        for (int i = 0; i < array.length; i++) {
            array[i] = value;
        }
!!!1190427.java!!!	fill(inout array : Object, in start : int, in end : int, inout value : Object) : void
        Arrays.checkStartAndEnd(array.length, start, end);
        for (int i = start; i < end; i++) {
            array[i] = value;
        }
!!!1190555.java!!!	hashCode(inout array : boolean) : int
        if (array == null) {
            return 0;
        }
        int hashCode = 1;
        for (boolean element : array) {
            // 1231, 1237 are hash code values for boolean value
            hashCode = 31 * hashCode + (element ? 1231 : 1237);
        }
        return hashCode;
!!!1190683.java!!!	hashCode(inout array : int) : int
        if (array == null) {
            return 0;
        }
        int hashCode = 1;
        for (int element : array) {
            // the hash code value for integer value is integer value itself
            hashCode = 31 * hashCode + element;
        }
        return hashCode;
!!!1190811.java!!!	hashCode(inout array : short) : int
        if (array == null) {
            return 0;
        }
        int hashCode = 1;
        for (short element : array) {
            // the hash code value for short value is its integer value
            hashCode = 31 * hashCode + element;
        }
        return hashCode;
!!!1190939.java!!!	hashCode(inout array : char) : int
        if (array == null) {
            return 0;
        }
        int hashCode = 1;
        for (char element : array) {
            // the hash code value for char value is its integer value
            hashCode = 31 * hashCode + element;
        }
        return hashCode;
!!!1191067.java!!!	hashCode(inout array : byte) : int
        if (array == null) {
            return 0;
        }
        int hashCode = 1;
        for (byte element : array) {
            // the hash code value for byte value is its integer value
            hashCode = 31 * hashCode + element;
        }
        return hashCode;
!!!1191195.java!!!	hashCode(inout array : long) : int
        if (array == null) {
            return 0;
        }
        int hashCode = 1;
        for (long elementValue : array) {
            /*
             * the hash code value for long value is (int) (value ^ (value >>>
             * 32))
             */
            hashCode = 31 * hashCode
                    + (int) (elementValue ^ (elementValue >>> 32));
        }
        return hashCode;
!!!1191323.java!!!	hashCode(inout array : float) : int
        if (array == null) {
            return 0;
        }
        int hashCode = 1;
        for (float element : array) {
            /*
             * the hash code value for float value is
             * Float.floatToIntBits(value)
             */
            hashCode = 31 * hashCode + Float.floatToIntBits(element);
        }
        return hashCode;
!!!1191451.java!!!	hashCode(inout array : double) : int
        if (array == null) {
            return 0;
        }
        int hashCode = 1;

        for (double element : array) {
            long v = Double.doubleToLongBits(element);
            /*
             * the hash code value for double value is (int) (v ^ (v >>> 32))
             * where v = Double.doubleToLongBits(value)
             */
            hashCode = 31 * hashCode + (int) (v ^ (v >>> 32));
        }
        return hashCode;
!!!1191579.java!!!	hashCode(inout array : Object) : int
        if (array == null) {
            return 0;
        }
        int hashCode = 1;
        for (Object element : array) {
            int elementHashCode;

            if (element == null) {
                elementHashCode = 0;
            } else {
                elementHashCode = (element).hashCode();
            }
            hashCode = 31 * hashCode + elementHashCode;
        }
        return hashCode;
!!!1191707.java!!!	deepHashCode(inout array : Object) : int
        if (array == null) {
            return 0;
        }
        int hashCode = 1;
        for (Object element : array) {
            int elementHashCode = deepHashCodeElement(element);
            hashCode = 31 * hashCode + elementHashCode;
        }
        return hashCode;
!!!1191835.java!!!	deepHashCodeElement(inout element : Object) : int
        Class<?> cl;
        if (element == null) {
            return 0;
        }

        cl = element.getClass().getComponentType();

        if (cl == null) {
            return element.hashCode();
        }

        /*
         * element is an array
         */
        if (!cl.isPrimitive()) {
            return deepHashCode((Object[]) element);
        }
        if (cl.equals(int.class)) {
            return hashCode((int[]) element);
        }
        if (cl.equals(char.class)) {
            return hashCode((char[]) element);
        }
        if (cl.equals(boolean.class)) {
            return hashCode((boolean[]) element);
        }
        if (cl.equals(byte.class)) {
            return hashCode((byte[]) element);
        }
        if (cl.equals(long.class)) {
            return hashCode((long[]) element);
        }
        if (cl.equals(float.class)) {
            return hashCode((float[]) element);
        }
        if (cl.equals(double.class)) {
            return hashCode((double[]) element);
        }
        return hashCode((short[]) element);
!!!1191963.java!!!	equals(inout array1 : byte, inout array2 : byte) : boolean
        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length != array2.length) {
            return false;
        }
        for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) {
                return false;
            }
        }
        return true;
!!!1192091.java!!!	equals(inout array1 : short, inout array2 : short) : boolean
        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length != array2.length) {
            return false;
        }
        for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) {
                return false;
            }
        }
        return true;
!!!1192219.java!!!	equals(inout array1 : char, inout array2 : char) : boolean
        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length != array2.length) {
            return false;
        }
        for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) {
                return false;
            }
        }
        return true;
!!!1192347.java!!!	equals(inout array1 : int, inout array2 : int) : boolean
        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length != array2.length) {
            return false;
        }
        for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) {
                return false;
            }
        }
        return true;
!!!1192475.java!!!	equals(inout array1 : long, inout array2 : long) : boolean
        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length != array2.length) {
            return false;
        }
        for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) {
                return false;
            }
        }
        return true;
!!!1192603.java!!!	equals(inout array1 : float, inout array2 : float) : boolean
        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length != array2.length) {
            return false;
        }
        for (int i = 0; i < array1.length; i++) {
            if (Float.floatToIntBits(array1[i]) != Float
                    .floatToIntBits(array2[i])) {
                return false;
            }
        }
        return true;
!!!1192731.java!!!	equals(inout array1 : double, inout array2 : double) : boolean
        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length != array2.length) {
            return false;
        }
        for (int i = 0; i < array1.length; i++) {
            if (Double.doubleToLongBits(array1[i]) != Double
                    .doubleToLongBits(array2[i])) {
                return false;
            }
        }
        return true;
!!!1192859.java!!!	equals(inout array1 : boolean, inout array2 : boolean) : boolean
        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length != array2.length) {
            return false;
        }
        for (int i = 0; i < array1.length; i++) {
            if (array1[i] != array2[i]) {
                return false;
            }
        }
        return true;
!!!1192987.java!!!	equals(inout array1 : Object, inout array2 : Object) : boolean
        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length != array2.length) {
            return false;
        }
        for (int i = 0; i < array1.length; i++) {
            Object e1 = array1[i], e2 = array2[i];
            if (!(e1 == null ? e2 == null : e1.equals(e2))) {
                return false;
            }
        }
        return true;
!!!1193115.java!!!	deepEquals(inout array1 : Object, inout array2 : Object) : boolean
        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length != array2.length) {
            return false;
        }
        for (int i = 0; i < array1.length; i++) {
            Object e1 = array1[i], e2 = array2[i];

            if (!deepEqualsElements(e1, e2)) {
                return false;
            }
        }
        return true;
!!!1193243.java!!!	deepEqualsElements(inout e1 : Object, inout e2 : Object) : boolean
        Class<?> cl1, cl2;

        if (e1 == e2) {
            return true;
        }

        if (e1 == null || e2 == null) {
            return false;
        }

        cl1 = e1.getClass().getComponentType();
        cl2 = e2.getClass().getComponentType();

        if (cl1 != cl2) {
            return false;
        }

        if (cl1 == null) {
            return e1.equals(e2);
        }

        /*
         * compare as arrays
         */
        if (!cl1.isPrimitive()) {
            return deepEquals((Object[]) e1, (Object[]) e2);
        }

        if (cl1.equals(int.class)) {
            return equals((int[]) e1, (int[]) e2);
        }
        if (cl1.equals(char.class)) {
            return equals((char[]) e1, (char[]) e2);
        }
        if (cl1.equals(boolean.class)) {
            return equals((boolean[]) e1, (boolean[]) e2);
        }
        if (cl1.equals(byte.class)) {
            return equals((byte[]) e1, (byte[]) e2);
        }
        if (cl1.equals(long.class)) {
            return equals((long[]) e1, (long[]) e2);
        }
        if (cl1.equals(float.class)) {
            return equals((float[]) e1, (float[]) e2);
        }
        if (cl1.equals(double.class)) {
            return equals((double[]) e1, (double[]) e2);
        }
        return equals((short[]) e1, (short[]) e2);
!!!1193371.java!!!	sort(inout array : byte) : void
        DualPivotQuicksort.sort(array);
!!!1193499.java!!!	sort(inout array : byte, in start : int, in end : int) : void
        DualPivotQuicksort.sort(array, start, end);
!!!1193627.java!!!	checkOffsetAndCount(in arrayLength : int, in offset : int, in count : int) : void
        if ((offset | count) < 0 || offset > arrayLength || arrayLength - offset < count) {
            throw new ArrayIndexOutOfBoundsException(arrayLength, offset,
                    count);
        }
!!!1193755.java!!!	checkStartAndEnd(in len : int, in start : int, in end : int) : void
        if (start < 0 || end > len) {
            throw new ArrayIndexOutOfBoundsException("start < 0 || end > len."
                    + " start=" + start + ", end=" + end + ", len=" + len);
        }
        if (start > end) {
            throw new IllegalArgumentException("start > end: " + start + " > " + end);
        }
!!!1193883.java!!!	sort(inout array : char) : void
        DualPivotQuicksort.sort(array);
!!!1194011.java!!!	sort(inout array : char, in start : int, in end : int) : void
        DualPivotQuicksort.sort(array, start, end);
!!!1194139.java!!!	sort(inout array : double) : void
        DualPivotQuicksort.sort(array);
!!!1194267.java!!!	sort(inout array : double, in start : int, in end : int) : void
        DualPivotQuicksort.sort(array, start, end);
!!!1194395.java!!!	sort(inout array : float) : void
        DualPivotQuicksort.sort(array);
!!!1194523.java!!!	sort(inout array : float, in start : int, in end : int) : void
        DualPivotQuicksort.sort(array, start, end);
!!!1194651.java!!!	sort(inout array : int) : void
        DualPivotQuicksort.sort(array);
!!!1194779.java!!!	sort(inout array : int, in start : int, in end : int) : void
        DualPivotQuicksort.sort(array, start, end);
!!!1194907.java!!!	sort(inout array : long) : void
        DualPivotQuicksort.sort(array);
!!!1195035.java!!!	sort(inout array : long, in start : int, in end : int) : void
        DualPivotQuicksort.sort(array, start, end);
!!!1195163.java!!!	sort(inout array : short) : void
        DualPivotQuicksort.sort(array);
!!!1195291.java!!!	sort(inout array : short, in start : int, in end : int) : void
        DualPivotQuicksort.sort(array, start, end);
!!!1195419.java!!!	sort(inout array : Object) : void
        ComparableTimSort.sort(array);
!!!1195547.java!!!	sort(inout array : Object, in start : int, in end : int) : void
        ComparableTimSort.sort(array, start, end);
!!!1195675.java!!!	sort(inout array : T, in start : int, in end : int, inout comparator : Comparator) : void
        TimSort.sort(array, start, end, comparator);
!!!1195803.java!!!	sort(inout array : T, inout comparator : Comparator) : void
        TimSort.sort(array, comparator);
!!!1195931.java!!!	toString(inout array : boolean) : String
        if (array == null) {
            return "null";
        }
        if (array.length == 0) {
            return "[]";
        }
        StringBuilder sb = new StringBuilder(array.length * 7);
        sb.append('[');
        sb.append(array[0]);
        for (int i = 1; i < array.length; i++) {
            sb.append(", ");
            sb.append(array[i]);
        }
        sb.append(']');
        return sb.toString();
!!!1196059.java!!!	toString(inout array : byte) : String
        if (array == null) {
            return "null";
        }
        if (array.length == 0) {
            return "[]";
        }
        StringBuilder sb = new StringBuilder(array.length * 6);
        sb.append('[');
        sb.append(array[0]);
        for (int i = 1; i < array.length; i++) {
            sb.append(", ");
            sb.append(array[i]);
        }
        sb.append(']');
        return sb.toString();
!!!1196187.java!!!	toString(inout array : char) : String
        if (array == null) {
            return "null";
        }
        if (array.length == 0) {
            return "[]";
        }
        StringBuilder sb = new StringBuilder(array.length * 3);
        sb.append('[');
        sb.append(array[0]);
        for (int i = 1; i < array.length; i++) {
            sb.append(", ");
            sb.append(array[i]);
        }
        sb.append(']');
        return sb.toString();
!!!1196315.java!!!	toString(inout array : double) : String
        if (array == null) {
            return "null";
        }
        if (array.length == 0) {
            return "[]";
        }
        StringBuilder sb = new StringBuilder(array.length * 7);
        sb.append('[');
        sb.append(array[0]);
        for (int i = 1; i < array.length; i++) {
            sb.append(", ");
            sb.append(array[i]);
        }
        sb.append(']');
        return sb.toString();
!!!1196443.java!!!	toString(inout array : float) : String
        if (array == null) {
            return "null";
        }
        if (array.length == 0) {
            return "[]";
        }
        StringBuilder sb = new StringBuilder(array.length * 7);
        sb.append('[');
        sb.append(array[0]);
        for (int i = 1; i < array.length; i++) {
            sb.append(", ");
            sb.append(array[i]);
        }
        sb.append(']');
        return sb.toString();
!!!1196571.java!!!	toString(inout array : int) : String
        if (array == null) {
            return "null";
        }
        if (array.length == 0) {
            return "[]";
        }
        StringBuilder sb = new StringBuilder(array.length * 6);
        sb.append('[');
        sb.append(array[0]);
        for (int i = 1; i < array.length; i++) {
            sb.append(", ");
            sb.append(array[i]);
        }
        sb.append(']');
        return sb.toString();
!!!1196699.java!!!	toString(inout array : long) : String
        if (array == null) {
            return "null";
        }
        if (array.length == 0) {
            return "[]";
        }
        StringBuilder sb = new StringBuilder(array.length * 6);
        sb.append('[');
        sb.append(array[0]);
        for (int i = 1; i < array.length; i++) {
            sb.append(", ");
            sb.append(array[i]);
        }
        sb.append(']');
        return sb.toString();
!!!1196827.java!!!	toString(inout array : short) : String
        if (array == null) {
            return "null";
        }
        if (array.length == 0) {
            return "[]";
        }
        StringBuilder sb = new StringBuilder(array.length * 6);
        sb.append('[');
        sb.append(array[0]);
        for (int i = 1; i < array.length; i++) {
            sb.append(", ");
            sb.append(array[i]);
        }
        sb.append(']');
        return sb.toString();
!!!1196955.java!!!	toString(inout array : Object) : String
        if (array == null) {
            return "null";
        }
        if (array.length == 0) {
            return "[]";
        }
        StringBuilder sb = new StringBuilder(array.length * 7);
        sb.append('[');
        sb.append(array[0]);
        for (int i = 1; i < array.length; i++) {
            sb.append(", ");
            sb.append(array[i]);
        }
        sb.append(']');
        return sb.toString();
!!!1197083.java!!!	deepToString(inout array : Object) : String
        // Special case null to prevent NPE
        if (array == null) {
            return "null";
        }
        // delegate this to the recursive method
        StringBuilder buf = new StringBuilder(array.length * 9);
        deepToStringImpl(array, new Object[] { array }, buf);
        return buf.toString();
!!!1197211.java!!!	deepToStringImpl(inout array : Object, inout origArrays : Object, inout sb : StringBuilder) : void
        if (array == null) {
            sb.append("null");
            return;
        }

        sb.append('[');

        for (int i = 0; i < array.length; i++) {
            if (i != 0) {
                sb.append(", ");
            }
            // establish current element
            Object elem = array[i];
            if (elem == null) {
                // element is null
                sb.append("null");
            } else {
                // get the Class of the current element
                Class<?> elemClass = elem.getClass();
                if (elemClass.isArray()) {
                    // element is an array type

                    // get the declared Class of the array (element)
                    Class<?> elemElemClass = elemClass.getComponentType();
                    if (elemElemClass.isPrimitive()) {
                        // element is a primitive array
                        if (boolean.class.equals(elemElemClass)) {
                            sb.append(toString((boolean[]) elem));
                        } else if (byte.class.equals(elemElemClass)) {
                            sb.append(toString((byte[]) elem));
                        } else if (char.class.equals(elemElemClass)) {
                            sb.append(toString((char[]) elem));
                        } else if (double.class.equals(elemElemClass)) {
                            sb.append(toString((double[]) elem));
                        } else if (float.class.equals(elemElemClass)) {
                            sb.append(toString((float[]) elem));
                        } else if (int.class.equals(elemElemClass)) {
                            sb.append(toString((int[]) elem));
                        } else if (long.class.equals(elemElemClass)) {
                            sb.append(toString((long[]) elem));
                        } else if (short.class.equals(elemElemClass)) {
                            sb.append(toString((short[]) elem));
                        } else {
                            // no other possible primitives, so we assert that
                            throw new AssertionError();
                        }
                    } else {
                        // element is an Object[], so we assert that
                        // assert elem instanceof Object[];
                        if (deepToStringImplContains(origArrays, elem)) {
                            sb.append("[...]");
                        } else {
                            Object[] newArray = (Object[]) elem;
                            Object[] newOrigArrays = new Object[origArrays.length + 1];
                            System.arraycopy(origArrays, 0, newOrigArrays, 0,
                                    origArrays.length);
                            newOrigArrays[origArrays.length] = newArray;
                            // make the recursive call to this method
                            deepToStringImpl(newArray, newOrigArrays, sb);
                        }
                    }
                } else { // element is NOT an array, just an Object
                    sb.append(array[i]);
                }
            }
        }
        sb.append(']');
!!!1197339.java!!!	deepToStringImplContains(inout origArrays : Object, inout array : Object) : boolean
        if (origArrays == null || origArrays.length == 0) {
            return false;
        }
        for (Object element : origArrays) {
            if (element == array) {
                return true;
            }
        }
        return false;
!!!1197467.java!!!	copyOf(inout original : boolean, in newLength : int) : boolean
        if (newLength < 0) {
            throw new NegativeArraySizeException(Integer.toString(newLength));
        }
        return copyOfRange(original, 0, newLength);
!!!1197595.java!!!	copyOf(inout original : byte, in newLength : int) : byte
        if (newLength < 0) {
            throw new NegativeArraySizeException(Integer.toString(newLength));
        }
        return copyOfRange(original, 0, newLength);
!!!1197723.java!!!	copyOf(inout original : char, in newLength : int) : char
        if (newLength < 0) {
            throw new NegativeArraySizeException(Integer.toString(newLength));
        }
        return copyOfRange(original, 0, newLength);
!!!1197851.java!!!	copyOf(inout original : double, in newLength : int) : double
        if (newLength < 0) {
            throw new NegativeArraySizeException(Integer.toString(newLength));
        }
        return copyOfRange(original, 0, newLength);
!!!1197979.java!!!	copyOf(inout original : float, in newLength : int) : float
        if (newLength < 0) {
            throw new NegativeArraySizeException(Integer.toString(newLength));
        }
        return copyOfRange(original, 0, newLength);
!!!1198107.java!!!	copyOf(inout original : int, in newLength : int) : int
        if (newLength < 0) {
            throw new NegativeArraySizeException(Integer.toString(newLength));
        }
        return copyOfRange(original, 0, newLength);
!!!1198235.java!!!	copyOf(inout original : long, in newLength : int) : long
        if (newLength < 0) {
            throw new NegativeArraySizeException(Integer.toString(newLength));
        }
        return copyOfRange(original, 0, newLength);
!!!1198363.java!!!	copyOf(inout original : short, in newLength : int) : short
        if (newLength < 0) {
            throw new NegativeArraySizeException(Integer.toString(newLength));
        }
        return copyOfRange(original, 0, newLength);
!!!1198491.java!!!	copyOf(inout original : T, in newLength : int) : T
        if (original == null) {
            throw new NullPointerException("original == null");
        }
        if (newLength < 0) {
            throw new NegativeArraySizeException(Integer.toString(newLength));
        }
        return copyOfRange(original, 0, newLength);
!!!1198619.java!!!	copyOf(inout original : U, in newLength : int, inout newType : Class) : T
        // We use the null pointer check in copyOfRange for exception priority compatibility.
        if (newLength < 0) {
            throw new NegativeArraySizeException(Integer.toString(newLength));
        }
        return copyOfRange(original, 0, newLength, newType);
!!!1198747.java!!!	copyOfRange(inout original : boolean, in start : int, in end : int) : boolean
        if (start > end) {
            throw new IllegalArgumentException();
        }
        int originalLength = original.length;
        if (start < 0 || start > originalLength) {
            throw new ArrayIndexOutOfBoundsException();
        }
        int resultLength = end - start;
        int copyLength = Math.min(resultLength, originalLength - start);
        boolean[] result = new boolean[resultLength];
        System.arraycopy(original, start, result, 0, copyLength);
        return result;
!!!1198875.java!!!	copyOfRange(inout original : byte, in start : int, in end : int) : byte
        if (start > end) {
            throw new IllegalArgumentException();
        }
        int originalLength = original.length;
        if (start < 0 || start > originalLength) {
            throw new ArrayIndexOutOfBoundsException();
        }
        int resultLength = end - start;
        int copyLength = Math.min(resultLength, originalLength - start);
        byte[] result = new byte[resultLength];
        System.arraycopy(original, start, result, 0, copyLength);
        return result;
!!!1199003.java!!!	copyOfRange(inout original : char, in start : int, in end : int) : char
        if (start > end) {
            throw new IllegalArgumentException();
        }
        int originalLength = original.length;
        if (start < 0 || start > originalLength) {
            throw new ArrayIndexOutOfBoundsException();
        }
        int resultLength = end - start;
        int copyLength = Math.min(resultLength, originalLength - start);
        char[] result = new char[resultLength];
        System.arraycopy(original, start, result, 0, copyLength);
        return result;
!!!1199131.java!!!	copyOfRange(inout original : double, in start : int, in end : int) : double
        if (start > end) {
            throw new IllegalArgumentException();
        }
        int originalLength = original.length;
        if (start < 0 || start > originalLength) {
            throw new ArrayIndexOutOfBoundsException();
        }
        int resultLength = end - start;
        int copyLength = Math.min(resultLength, originalLength - start);
        double[] result = new double[resultLength];
        System.arraycopy(original, start, result, 0, copyLength);
        return result;
!!!1199259.java!!!	copyOfRange(inout original : float, in start : int, in end : int) : float
        if (start > end) {
            throw new IllegalArgumentException();
        }
        int originalLength = original.length;
        if (start < 0 || start > originalLength) {
            throw new ArrayIndexOutOfBoundsException();
        }
        int resultLength = end - start;
        int copyLength = Math.min(resultLength, originalLength - start);
        float[] result = new float[resultLength];
        System.arraycopy(original, start, result, 0, copyLength);
        return result;
!!!1199387.java!!!	copyOfRange(inout original : int, in start : int, in end : int) : int
        if (start > end) {
            throw new IllegalArgumentException();
        }
        int originalLength = original.length;
        if (start < 0 || start > originalLength) {
            throw new ArrayIndexOutOfBoundsException();
        }
        int resultLength = end - start;
        int copyLength = Math.min(resultLength, originalLength - start);
        int[] result = new int[resultLength];
        System.arraycopy(original, start, result, 0, copyLength);
        return result;
!!!1199515.java!!!	copyOfRange(inout original : long, in start : int, in end : int) : long
        if (start > end) {
            throw new IllegalArgumentException();
        }
        int originalLength = original.length;
        if (start < 0 || start > originalLength) {
            throw new ArrayIndexOutOfBoundsException();
        }
        int resultLength = end - start;
        int copyLength = Math.min(resultLength, originalLength - start);
        long[] result = new long[resultLength];
        System.arraycopy(original, start, result, 0, copyLength);
        return result;
!!!1199643.java!!!	copyOfRange(inout original : short, in start : int, in end : int) : short
        if (start > end) {
            throw new IllegalArgumentException();
        }
        int originalLength = original.length;
        if (start < 0 || start > originalLength) {
            throw new ArrayIndexOutOfBoundsException();
        }
        int resultLength = end - start;
        int copyLength = Math.min(resultLength, originalLength - start);
        short[] result = new short[resultLength];
        System.arraycopy(original, start, result, 0, copyLength);
        return result;
!!!1199771.java!!!	copyOfRange(inout original : T, in start : int, in end : int) : T
        int originalLength = original.length; // For exception priority compatibility.
        if (start > end) {
            throw new IllegalArgumentException();
        }
        if (start < 0 || start > originalLength) {
            throw new ArrayIndexOutOfBoundsException();
        }
        int resultLength = end - start;
        int copyLength = Math.min(resultLength, originalLength - start);
        T[] result = (T[]) Array.newInstance(original.getClass().getComponentType(), resultLength);
        System.arraycopy(original, start, result, 0, copyLength);
        return result;
!!!1199899.java!!!	copyOfRange(inout original : U, in start : int, in end : int, inout newType : Class) : T
        if (start > end) {
            throw new IllegalArgumentException();
        }
        int originalLength = original.length;
        if (start < 0 || start > originalLength) {
            throw new ArrayIndexOutOfBoundsException();
        }
        int resultLength = end - start;
        int copyLength = Math.min(resultLength, originalLength - start);
        T[] result = (T[]) Array.newInstance(newType.getComponentType(), resultLength);
        System.arraycopy(original, start, result, 0, copyLength);
        return result;
