format 74
"misc" // libCore::luni::src::main::java::sun::misc
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/sun/misc/"
  java_package "sun.misc"
  classview 133147 "misc"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 255899 "Unsafe"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The package name notwithstanding, this class is the quasi-standard
way for Java code to gain access to and use functionality which,
when unsupervised, would allow one to break the pointer/type safety
of Java."
      classrelation 739227 // THE_ONE (<unidirectional association>)
	relation 739227 --->
	  a role_name "THE_ONE" init_value " new Unsafe()" class_relation const_relation private
	    comment " Traditional dalvik name. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 739227 // THE_ONE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      classrelation 739355 // theUnsafe (<unidirectional association>)
	relation 739355 --->
	  a role_name "theUnsafe" init_value " THE_ONE" class_relation const_relation private
	    comment " Traditional RI name. 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 739355 // theUnsafe (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      operation 2581787 "Unsafe"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This class is only privately instantiable."
      end

      operation 2581915 "getUnsafe"
	class_operation public return_type class_ref 255899 // Unsafe
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the unique instance of this class. This is only allowed in
very limited situations."
      end

      operation 2582043 "objectFieldOffset"
	public explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 144283 // Field
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the raw byte offset from the start of an object's memory to
the memory used to store the indicated instance field.

@param field non-null; the field in question, which must be an
instance field
@return the offset to the field"
      end

      operation 2582171 "objectFieldOffset0"
	class_operation private explicit_return_type "long"
	nparams 1
	  param inout name "field" type class_ref 144283 // Field
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "Helper for {@link #objectFieldOffset}, which does all the work,
assuming the parameter is deemed valid.

@param field non-null; the instance field
@return the offset to the field"
      end

      operation 2582299 "arrayBaseOffset"
	public explicit_return_type "int"
	nparams 1
	  param inout name "clazz" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the offset from the start of an array object's memory to
the memory used to store its initial (zeroeth) element.

@param clazz non-null; class in question; must be an array class
@return the offset to the initial element"
      end

      operation 2582427 "arrayBaseOffset0"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "clazz" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "Helper for {@link #arrayBaseOffset}, which does all the work,
assuming the parameter is deemed valid.

@return the offset to the field"
      end

      operation 2582555 "arrayIndexScale"
	public explicit_return_type "int"
	nparams 1
	  param inout name "clazz" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the size of each element of the given array class.

@param clazz non-null; class in question; must be an array class
@return &gt; 0; the size of each element of the array"
      end

      operation 2582683 "arrayIndexScale0"
	class_operation private explicit_return_type "int"
	nparams 1
	  param inout name "clazz" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
	comment "Helper for {@link #arrayIndexScale}, which does all the work,
assuming the parameter is deemed valid.

@return the offset to the field"
      end

      operation 2582811 "compareAndSwapInt"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param in name "expectedValue" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
"
	
	
	
	comment "Performs a compare-and-set operation on an <code>int</code>
field within the given object.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@param expectedValue expected value of the field
@param newValue new value to store in the field if the contents are
as expected
@return <code>true</code> if the new value was in fact stored, and
<code>false</code> if not"
      end

      operation 2582939 "compareAndSwapLong"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param in name "expectedValue" explicit_type "long"
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
"
	
	
	
	comment "Performs a compare-and-set operation on a <code>long</code>
field within the given object.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@param expectedValue expected value of the field
@param newValue new value to store in the field if the contents are
as expected
@return <code>true</code> if the new value was in fact stored, and
<code>false</code> if not"
      end

      operation 2583067 "compareAndSwapObject"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param inout name "expectedValue" type class_ref 3401484 // Object
	  param inout name "newValue" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
"
	
	
	
	comment "Performs a compare-and-set operation on an <code>Object</code>
field (that is, a reference field) within the given object.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@param expectedValue expected value of the field
@param newValue new value to store in the field if the contents are
as expected
@return <code>true</code> if the new value was in fact stored, and
<code>false</code> if not"
      end

      operation 2583195 "getIntVolatile"
	public explicit_return_type "int"
	nparams 2
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Gets an <code>int</code> field from the given object,
using <code>volatile</code> semantics.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@return the retrieved value"
      end

      operation 2583323 "putIntVolatile"
	public explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Stores an <code>int</code> field into the given object,
using <code>volatile</code> semantics.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@param newValue the value to store"
      end

      operation 2583451 "getLongVolatile"
	public explicit_return_type "long"
	nparams 2
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Gets a <code>long</code> field from the given object,
using <code>volatile</code> semantics.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@return the retrieved value"
      end

      operation 2583579 "putLongVolatile"
	public explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Stores a <code>long</code> field into the given object,
using <code>volatile</code> semantics.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@param newValue the value to store"
      end

      operation 2583707 "getObjectVolatile"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Gets an <code>Object</code> field from the given object,
using <code>volatile</code> semantics.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@return the retrieved value"
      end

      operation 2583835 "putObjectVolatile"
	public explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param inout name "newValue" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Stores an <code>Object</code> field into the given object,
using <code>volatile</code> semantics.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@param newValue the value to store"
      end

      operation 2583963 "getInt"
	public explicit_return_type "int"
	nparams 2
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Gets an <code>int</code> field from the given object.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@return the retrieved value"
      end

      operation 2584091 "putInt"
	public explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Stores an <code>int</code> field into the given object.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@param newValue the value to store"
      end

      operation 2584219 "putOrderedInt"
	public explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Lazy set an int field."
      end

      operation 2584347 "getLong"
	public explicit_return_type "long"
	nparams 2
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Gets a <code>long</code> field from the given object.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@return the retrieved value"
      end

      operation 2584475 "putLong"
	public explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Stores a <code>long</code> field into the given object.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@param newValue the value to store"
      end

      operation 2584603 "putOrderedLong"
	public explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Lazy set a long field."
      end

      operation 2584731 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
	comment "Gets an <code>Object</code> field from the given object.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@return the retrieved value"
      end

      operation 2584859 "putObject"
	public explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param inout name "newValue" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Stores an <code>Object</code> field into the given object.

@param obj non-null; object containing the field
@param offset offset to the field within <code>obj</code>
@param newValue the value to store"
      end

      operation 2584987 "putOrderedObject"
	public explicit_return_type "void"
	nparams 3
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "offset" explicit_type "long"
	  param inout name "newValue" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws};
"
	
	
	
	comment "Lazy set an object field."
      end

      operation 2585115 "park"
	public explicit_return_type "void"
	nparams 2
	  param inout name "absolute" explicit_type "boolean"
	  param in name "time" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parks the calling thread for the specified amount of time,
unless the \"permit\" for the thread is already available (due to
a previous call to {@link #unpark}. This method may also return
spuriously (that is, without the thread being told to unpark
and without the indicated amount of time elapsing).

<p>See {@link java.util.concurrent.locks.LockSupport} for more
in-depth information of the behavior of this method.</p>

@param absolute whether the given time value is absolute
milliseconds-since-the-epoch (<code>true</code>) or relative
nanoseconds-from-now (<code>false</code>)
@param time the (absolute millis or relative nanos) time value"
      end

      operation 2585243 "unpark"
	public explicit_return_type "void"
	nparams 1
	  param inout name "obj" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unparks the given object, which must be a {@link Thread}.

<p>See {@link java.util.concurrent.locks.LockSupport} for more
in-depth information of the behavior of this method.</p>

@param obj non-null; the object to unpark"
      end

      operation 2585371 "allocateInstance"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "c" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0}<?> ${p0}${)}${throws};
"
	
	
	
	comment "Allocates an instance of the given class without running the constructor.
The class' <clinit> will be run, if necessary."
      end
    end
  end

  deploymentview 139163 "misc"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 322587 "Unsafe"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.VMStack;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
${definition}"
      associated_classes
	class_ref 255899 // Unsafe
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
