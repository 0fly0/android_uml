class Thread
!!!439707.java!!!	Thread()
        create(null, null, null, 0);
!!!439835.java!!!	Thread(inout runnable : Runnable)
        create(null, runnable, null, 0);
!!!439963.java!!!	Thread(inout runnable : Runnable, inout threadName : String)
        if (threadName == null) {
            throw new NullPointerException("threadName == null");
        }

        create(null, runnable, threadName, 0);
!!!440091.java!!!	Thread(inout threadName : String)
        if (threadName == null) {
            throw new NullPointerException("threadName == null");
        }

        create(null, null, threadName, 0);
!!!440219.java!!!	Thread(inout group : ThreadGroup, inout runnable : Runnable)
        create(group, runnable, null, 0);
!!!440347.java!!!	Thread(inout group : ThreadGroup, inout runnable : Runnable, inout threadName : String)
        if (threadName == null) {
            throw new NullPointerException("threadName == null");
        }

        create(group, runnable, threadName, 0);
!!!440475.java!!!	Thread(inout group : ThreadGroup, inout threadName : String)
        if (threadName == null) {
            throw new NullPointerException("threadName == null");
        }

        create(group, null, threadName, 0);
!!!440603.java!!!	Thread(inout group : ThreadGroup, inout runnable : Runnable, inout threadName : String, in stackSize : long)
        if (threadName == null) {
            throw new NullPointerException("threadName == null");
        }
        create(group, runnable, threadName, stackSize);
!!!440731.java!!!	Thread(inout group : ThreadGroup, inout name : String, in priority : int, inout daemon : boolean)
        synchronized (Thread.class) {
            id = ++Thread.count;
        }

        if (name == null) {
            this.name = "Thread-" + id;
        } else {
            this.name = name;
        }

        if (group == null) {
            throw new InternalError("group not specified");
        }

        this.group = group;

        this.target = null;
        this.stackSize = 0;
        this.priority = priority;
        this.daemon = daemon;

        /* add ourselves to our ThreadGroup of choice */
        this.group.addThread(this);
!!!440859.java!!!	create(inout group : ThreadGroup, inout runnable : Runnable, inout threadName : String, in stackSize : long) : void
        Thread currentThread = Thread.currentThread();
        if (group == null) {
            group = currentThread.getThreadGroup();
        }

        if (group.isDestroyed()) {
            throw new IllegalThreadStateException("Group already destroyed");
        }

        this.group = group;

        synchronized (Thread.class) {
            id = ++Thread.count;
        }

        if (threadName == null) {
            this.name = "Thread-" + id;
        } else {
            this.name = threadName;
        }

        this.target = runnable;
        this.stackSize = stackSize;

        this.priority = currentThread.getPriority();

        this.contextClassLoader = currentThread.contextClassLoader;

        // Transfer over InheritableThreadLocals.
        if (currentThread.inheritableValues != null) {
            inheritableValues = new ThreadLocal.Values(currentThread.inheritableValues);
        }

        // add ourselves to our ThreadGroup of choice
        this.group.addThread(this);
!!!440987.java!!!	activeCount() : int
        return currentThread().getThreadGroup().activeCount();
!!!441243.java!!!	countStackFrames() : int
        return getStackTrace().length;
!!!441371.java!!!	currentThread() : Thread
        return VMThread.currentThread();
!!!441499.java!!!	destroy() : void
        throw new UnsupportedOperationException();
!!!441627.java!!!	dumpStack() : void
        new Throwable("stack dump").printStackTrace();
!!!441755.java!!!	enumerate(inout threads : Thread) : int
        Thread thread = Thread.currentThread();
        return thread.getThreadGroup().enumerate(threads);
!!!441883.java!!!	getAllStackTraces() : Map
        Map<Thread, StackTraceElement[]> map = new HashMap<Thread, StackTraceElement[]>();

        // Find out how many live threads we have. Allocate a bit more
        // space than needed, in case new ones are just being created.
        int count = ThreadGroup.mSystem.activeCount();
        Thread[] threads = new Thread[count + count / 2];

        // Enumerate the threads and collect the stacktraces.
        count = ThreadGroup.mSystem.enumerate(threads);
        for (int i = 0; i < count; i++) {
            map.put(threads[i], threads[i].getStackTrace());
        }

        return map;
!!!442011.java!!!	getContextClassLoader() : ClassLoader
        return contextClassLoader;
!!!442139.java!!!	getDefaultUncaughtExceptionHandler() : UncaughtExceptionHandler
        return defaultUncaughtHandler;
!!!442267.java!!!	getId() : long
        return id;
!!!442395.java!!!	getName() : String
        return name;
!!!442523.java!!!	getPriority() : int
        return priority;
!!!442651.java!!!	getStackTrace() : StackTraceElement
        StackTraceElement ste[] = VMStack.getThreadStackTrace(this);
        return ste != null ? ste : EmptyArray.STACK_TRACE_ELEMENT;
!!!442779.java!!!	getState() : State
        // TODO This is ugly and should be implemented better.
        VMThread vmt = this.vmThread;

        // Make sure we have a valid reference to an object. If native code
        // deletes the reference we won't run into a null reference later.
        VMThread thread = vmThread;
        if (thread != null) {
            // If the Thread Object became invalid or was not yet started,
            // getStatus() will return -1.
            int state = thread.getStatus();
            if(state != -1) {
                return VMThread.STATE_MAP[state];
            }
        }
        return hasBeenStarted ? Thread.State.TERMINATED : Thread.State.NEW;
!!!442907.java!!!	getThreadGroup() : ThreadGroup
        // TODO This should actually be done at native termination.
        if (getState() == Thread.State.TERMINATED) {
            return null;
        } else {
            return group;
        }
!!!443035.java!!!	getUncaughtExceptionHandler() : UncaughtExceptionHandler
        if (uncaughtHandler != null)
            return uncaughtHandler;
        else
            return group;           // ThreadGroup is instance of UEH
!!!443163.java!!!	interrupt() : void
        // Interrupt this thread before running actions so that other
        // threads that observe the interrupt as a result of an action
        // will see that this thread is in the interrupted state.
        VMThread vmt = this.vmThread;
        if (vmt != null) {
            vmt.interrupt();
        }

        synchronized (interruptActions) {
            for (int i = interruptActions.size() - 1; i >= 0; i--) {
                interruptActions.get(i).run();
            }
        }
!!!443291.java!!!	interrupted() : boolean
        return VMThread.interrupted();
!!!443419.java!!!	isAlive() : boolean
        return (vmThread != null);
!!!443547.java!!!	isDaemon() : boolean
        return daemon;
!!!443675.java!!!	isInterrupted() : boolean
        VMThread vmt = this.vmThread;
        if (vmt != null) {
            return vmt.isInterrupted();
        }

        return false;
!!!443803.java!!!	join() : void
        VMThread t = vmThread;
        if (t == null) {
            return;
        }

        synchronized (t) {
            while (isAlive()) {
                t.wait();
            }
        }
!!!443931.java!!!	join(in millis : long) : void
        join(millis, 0);
!!!444059.java!!!	join(in millis : long, in nanos : int) : void
        if (millis < 0 || nanos < 0 || nanos >= NANOS_PER_MILLI) {
            throw new IllegalArgumentException("bad timeout: millis=" + millis + ",nanos=" + nanos);
        }

        // avoid overflow: if total > 292,277 years, just wait forever
        boolean overflow = millis >= (Long.MAX_VALUE - nanos) / NANOS_PER_MILLI;
        boolean forever = (millis | nanos) == 0;
        if (forever | overflow) {
            join();
            return;
        }

        VMThread t = vmThread;
        if (t == null) {
            return;
        }

        synchronized (t) {
            if (!isAlive()) {
                return;
            }

            // guaranteed not to overflow
            long nanosToWait = millis * NANOS_PER_MILLI + nanos;

            // wait until this thread completes or the timeout has elapsed
            long start = System.nanoTime();
            while (true) {
                t.wait(millis, nanos);
                if (!isAlive()) {
                    break;
                }
                long nanosElapsed = System.nanoTime() - start;
                long nanosRemaining = nanosToWait - nanosElapsed;
                if (nanosRemaining <= 0) {
                    break;
                }
                millis = nanosRemaining / NANOS_PER_MILLI;
                nanos = (int) (nanosRemaining - millis * NANOS_PER_MILLI);
            }
        }
!!!444187.java!!!	resume() : void
        throw new UnsupportedOperationException();
!!!444315.java!!!	run() : void
        if (target != null) {
            target.run();
        }
!!!444443.java!!!	setContextClassLoader(inout cl : ClassLoader) : void
        contextClassLoader = cl;
!!!444571.java!!!	setDaemon(inout isDaemon : boolean) : void
        checkNotStarted();
        if (vmThread == null) {
            daemon = isDaemon;
        }
!!!444699.java!!!	checkNotStarted() : void
        if (hasBeenStarted) {
            throw new IllegalThreadStateException("Thread already started");
        }
!!!444827.java!!!	setDefaultUncaughtExceptionHandler(inout handler : UncaughtExceptionHandler) : void
        Thread.defaultUncaughtHandler = handler;
!!!444955.java!!!	pushInterruptAction$(inout interruptAction : Runnable) : void
        synchronized (interruptActions) {
            interruptActions.add(interruptAction);
        }

        if (interruptAction != null && isInterrupted()) {
            interruptAction.run();
        }
!!!445083.java!!!	popInterruptAction$(inout interruptAction : Runnable) : void
        synchronized (interruptActions) {
            Runnable removed = interruptActions.remove(interruptActions.size() - 1);
            if (interruptAction != removed) {
                throw new IllegalArgumentException(
                        "Expected " + interruptAction + " but was " + removed);
            }
        }
!!!445211.java!!!	setName(inout threadName : String) : void
        if (threadName == null) {
            throw new NullPointerException("threadName == null");
        }

        name = threadName;
        VMThread vmt = this.vmThread;
        if (vmt != null) {
            /* notify the VM that the thread name has changed */
            vmt.nameChanged(threadName);
        }
!!!445339.java!!!	setPriority(in priority : int) : void
        if (priority < Thread.MIN_PRIORITY || priority > Thread.MAX_PRIORITY) {
            throw new IllegalArgumentException("Priority out of range: " + priority);
        }

        if (priority > group.getMaxPriority()) {
            priority = group.getMaxPriority();
        }

        this.priority = priority;

        VMThread vmt = this.vmThread;
        if (vmt != null) {
            vmt.setPriority(priority);
        }
!!!445467.java!!!	setUncaughtExceptionHandler(inout handler : UncaughtExceptionHandler) : void
        uncaughtHandler = handler;
!!!445595.java!!!	sleep(in time : long) : void
        Thread.sleep(time, 0);
!!!445723.java!!!	sleep(in millis : long, in nanos : int) : void
        VMThread.sleep(millis, nanos);
!!!445851.java!!!	start() : void
        checkNotStarted();

        hasBeenStarted = true;

        VMThread.create(this, stackSize);
!!!445979.java!!!	stop() : void
        stop(new ThreadDeath());
!!!446107.java!!!	stop(inout throwable : Throwable) : void
        throw new UnsupportedOperationException();
!!!446235.java!!!	suspend() : void
        throw new UnsupportedOperationException();
!!!446363.java!!!	toString() : String
        return "Thread[" + name + "," + priority + "," + group.getName() + "]";
!!!446491.java!!!	yield() : void
        VMThread.yield();
!!!446619.java!!!	holdsLock(inout object : Object) : boolean
        return currentThread().vmThread.holdsLock(object);
!!!446875.java!!!	unpark() : void
        VMThread vmt = vmThread;

        if (vmt == null) {
            /*
             * vmThread is null before the thread is start()ed. In
             * this case, we just go ahead and set the state to
             * PREEMPTIVELY_UNPARKED. Since this happens before the
             * thread is started, we don't have to worry about
             * synchronizing with it.
             */
            parkState = ParkState.PREEMPTIVELY_UNPARKED;
            return;
        }

        synchronized (vmt) {
            switch (parkState) {
                case ParkState.PREEMPTIVELY_UNPARKED: {
                    /*
                     * Nothing to do in this case: By definition, a
                     * preemptively unparked thread is to remain in
                     * the preemptively unparked state if it is told
                     * to unpark.
                     */
                    break;
                }
                case ParkState.UNPARKED: {
                    parkState = ParkState.PREEMPTIVELY_UNPARKED;
                    break;
                }
                default /*parked*/: {
                    parkState = ParkState.UNPARKED;
                    vmt.notifyAll();
                    break;
                }
            }
        }
!!!447003.java!!!	parkFor(in nanos : long) : void
        VMThread vmt = vmThread;

        if (vmt == null) {
            // Running threads should always have an associated vmThread.
            throw new AssertionError();
        }

        synchronized (vmt) {
            switch (parkState) {
                case ParkState.PREEMPTIVELY_UNPARKED: {
                    parkState = ParkState.UNPARKED;
                    break;
                }
                case ParkState.UNPARKED: {
                    long millis = nanos / NANOS_PER_MILLI;
                    nanos %= NANOS_PER_MILLI;

                    parkState = ParkState.PARKED;
                    try {
                        vmt.wait(millis, (int) nanos);
                    } catch (InterruptedException ex) {
                        interrupt();
                    } finally {
                        /*
                         * Note: If parkState manages to become
                         * PREEMPTIVELY_UNPARKED before hitting this
                         * code, it should left in that state.
                         */
                        if (parkState == ParkState.PARKED) {
                            parkState = ParkState.UNPARKED;
                        }
                    }
                    break;
                }
                default /*parked*/: {
                    throw new AssertionError(
                            "shouldn't happen: attempt to repark");
                }
            }
        }
!!!447131.java!!!	parkUntil(in time : long) : void
        VMThread vmt = vmThread;

        if (vmt == null) {
            // Running threads should always have an associated vmThread.
            throw new AssertionError();
        }

        synchronized (vmt) {
            /*
             * Note: This conflates the two time bases of "wall clock"
             * time and "monotonic uptime" time. However, given that
             * the underlying system can only wait on monotonic time,
             * it is unclear if there is any way to avoid the
             * conflation. The downside here is that if, having
             * calculated the delay, the wall clock gets moved ahead,
             * this method may not return until well after the wall
             * clock has reached the originally designated time. The
             * reverse problem (the wall clock being turned back)
             * isn't a big deal, since this method is allowed to
             * spuriously return for any reason, and this situation
             * can safely be construed as just such a spurious return.
             */
            long delayMillis = time - System.currentTimeMillis();

            if (delayMillis <= 0) {
                parkState = ParkState.UNPARKED;
            } else {
                parkFor(delayMillis * NANOS_PER_MILLI);
            }
        }
