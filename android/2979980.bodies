class DisplayModeSettings
!!!12125196.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        if (DEBUG) Log.d(TAG, "onCreate");

        mAutoTitle = getResources().getString(R.string.auto_display_mode_title);
        mResolutionTitle = getResources().getString(R.string.display_resolution_title);
        mFrameRateTitle = getResources().getString(R.string.display_frame_rate_title);
        initUiResolution();
        addPreferencesFromResource(R.xml.display_mode_settings);
        mUiScaledWarningPref = (PictureScaledWarningPreference) findPreference(
                KEY_PICTURE_SCALED_WARNING);
        // Do not show warning by default
        getPreferenceScreen().removePreference(mUiScaledWarningPref);
        mToggleAutoPref = (CheckBoxPreference) findPreference(KEY_TOGGLE_AUTO_DISPLAY_MODE);
        mResolutionPref = (ResolutionPreference) findPreference(KEY_DISPLAY_RESOLUTION);
        mFrameRatePref = (FrameRatePreference) findPreference(KEY_DISPLAY_FRAME_RATE);
        mToggleAutoPref.setChecked(!DisplayModeManager.getInstance().hasPreferredDisplayMode());
        mIsAuto = mToggleAutoPref.isChecked();
        if (!DisplayModeManager.getInstance().isTvCapabilityAvailable()){
            getPreferenceScreen().setEnabled(false);
        } else {
            updateUI();
        }
        registerStateListener();
!!!12125324.java!!!	onPreferenceTreeClick(inout preferenceScreen : PreferenceScreen, inout preference : Preference) : boolean
        if (preference == mToggleAutoPref) {
            mIsAuto = mToggleAutoPref.isChecked();
            DisplayModeManager.getInstance().setAuto(mIsAuto);
            updateUI();
        }
        return super.onPreferenceTreeClick(preferenceScreen, preference);
!!!12125452.java!!!	onDestroy() : void
        super.onDestroy();
        if (DEBUG) Log.d(TAG, "onDestroy");
        unRegisterStateListener();
!!!12125580.java!!!	updateDisplayInfo() : void
        String curResolution = DisplayModeManager.getInstance().getDisplayMode(
                DisplayModeType.RESOLUTION);
        String curFrameRate = DisplayModeManager.getInstance().getDisplayMode(
                DisplayModeType.FRAMERATE);
        if (DEBUG) Log.d(TAG, "updateDisplayInfo, isAuto " + mIsAuto +
                ", " + curResolution + "@" + curFrameRate);
        if (mIsAuto) {
            // Show as Auto (1080p 60)
            String autoTitle = new StringBuilder(mAutoTitle)
                    .append(" (")
                    .append(curResolution)
                    .append(" ")
                    .append(curFrameRate)
                    .append(")")
                    .toString();
            mToggleAutoPref.setTitle(autoTitle);
            mResolutionPref.setTitle(mResolutionTitle);
            mFrameRatePref.setTitle(mFrameRateTitle);
        } else {
            // Show as Resolution (1080p) & Frame rate (60)
            String resolutionTitle = new StringBuilder(mResolutionTitle)
                    .append(" (")
                    .append(curResolution)
                    .append(")")
                    .toString();
            String frameRateTitle = new StringBuilder(mFrameRateTitle)
                    .append(" (")
                    .append(curFrameRate)
                    .append(")")
                    .toString();
            mToggleAutoPref.setTitle(mAutoTitle);
            mResolutionPref.setTitle(resolutionTitle);
            mFrameRatePref.setTitle(frameRateTitle);
        }

        // Check if UI resolution and current resolution matches
        if (matchUiResolution(curResolution)) {
            getPreferenceScreen().removePreference(mUiScaledWarningPref);
        } else if (!isFixedUiRes()) {
            // Enter picture scaled mode
            // Never display warning preference if we use fixed UI resolution
            // In such case, we cannot get consistent display even after reboot
            if (DEBUG) Log.d(TAG, "updateDisplayInfo, show warning UI");
            getPreferenceScreen().addPreference(mUiScaledWarningPref);
        }
!!!12125708.java!!!	matchUiResolution(in res : String) : boolean
        // No picture scaled message if current resolution matched with UI resolution
        int pos = res.indexOf('p') == -1 ? res.indexOf('i') : res.indexOf('p');
        int scanLines = Integer.parseInt(res.substring(0, pos));
        if (DEBUG) Log.d(TAG, "matchUiResolution, scanLines: " + scanLines);
        // Deviation <5 is considered as the same resolution
        return Math.abs(mUiRes - scanLines) < 5;
!!!12125836.java!!!	isFixedUiRes() : boolean
        return mFixedUiRes != -1;
!!!12125964.java!!!	initUiResolution() : void
        // Check whether UI Resolution is fixed
        mFixedUiRes = SystemProperties.getInt(PROPERTY_NAME_UI_YRES, -1);
        if (DEBUG) Log.d(TAG, "initUiResolution, mFixedUiRes: " + mFixedUiRes);
        // Also okay to check 'ro.sf.lcd_density' (native property)
        // Such value is initialized at HotPlugHandler:Init()
        DisplayMetrics metrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(metrics);
        if (DEBUG) Log.d(TAG, "initUiResolution, metrics: " + metrics.toString());
        // It's fair to save such value since it's fixed set at boot
        mUiRes = Math.round(metrics.ydpi * 1080.0f / 320.0f);
        if (DEBUG) Log.d(TAG, "initUiResolution, mUiRes: " + mUiRes);
!!!12126092.java!!!	updateUI() : void
        if (DEBUG) Log.d(TAG, "updateUI, auto " + (mIsAuto ? "enabled" : "disabled"));
        mResolutionPref.setEnabled(!mIsAuto);
        mFrameRatePref.setEnabled(!mIsAuto);
        updateDisplayInfo();
!!!12126220.java!!!	registerStateListener() : void
        mStateListener = new StateListener() {

            @Override
                public void onPreferredDisplayModeChanged(DisplayModeType type) {
                    // No handler
                }

            @Override
            public void onDisplayModeChanged() {
                if (DEBUG) Log.d(TAG, "onDisplayModeChanged");
                // Update display, picture-scaled mode check also executed
                updateUI();
            }

            @Override
            public void onTvCapalityChanged() {
                if (DEBUG) Log.d(TAG, "onTvCapalityChanged");
                // Disable the menu if TV capability not available (HDMI disconnected)
                boolean hdmiAvailable = DisplayModeManager.getInstance().isTvCapabilityAvailable();
                getPreferenceScreen().setEnabled(hdmiAvailable);
                if (!hdmiAvailable) {
                    mToggleAutoPref.setTitle(mAutoTitle);
                    mResolutionPref.setTitle(mResolutionTitle);
                    mFrameRatePref.setTitle(mFrameRateTitle);
                } else {
                    updateUI();
                }
                // Update resolution & frame rate support status
                mResolutionPref.updateItems();
                mFrameRatePref.updateItems();
            }
        };
        DisplayModeManager.getInstance().registerStateListener(mStateListener);
!!!12126348.java!!!	unRegisterStateListener() : void
        DisplayModeManager.getInstance().unRegisterStateListener(mStateListener);
        mStateListener = null;
