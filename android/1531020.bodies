class BridgeTypedArray
!!!9386380.java!!!	BridgeTypedArray(inout resources : BridgeResources, inout context : BridgeContext, in len : int, inout platformFile : boolean)
        super(null, null, null, 0);
        mBridgeResources = resources;
        mContext = context;
        mPlatformFile = platformFile;
        mResourceData = new ResourceValue[len];
        mNames = new String[len];
        mIsFramework = new boolean[len];
!!!9386508.java!!!	bridgeSetValue(in index : int, in name : String, inout isFramework : boolean, inout value : ResourceValue) : void
        mResourceData[index] = value;
        mNames[index] = name;
        mIsFramework[index] = isFramework;
!!!9386636.java!!!	sealArray() : void
        // fills TypedArray.mIndices which is used to implement getIndexCount/getIndexAt
        // first count the array size
        int count = 0;
        for (ResourceValue data : mResourceData) {
            if (data != null) {
                count++;
            }
        }

        // allocate the table with an extra to store the size
        mIndices = new int[count+1];
        mIndices[0] = count;

        // fill the array with the indices.
        int index = 1;
        for (int i = 0 ; i < mResourceData.length ; i++) {
            if (mResourceData[i] != null) {
                mIndices[index++] = i;
            }
        }
!!!9386764.java!!!	length() : int
        return mResourceData.length;
!!!9386892.java!!!	getResources() : Resources
        return mBridgeResources;
!!!9387020.java!!!	getText(in index : int) : CharSequence
        if (index < 0 || index >= mResourceData.length) {
            return null;
        }

        if (mResourceData[index] != null) {
            // FIXME: handle styled strings!
            return mResourceData[index].getValue();
        }

        return null;
!!!9387148.java!!!	getString(in index : int) : String
        if (index < 0 || index >= mResourceData.length) {
            return null;
        }

        if (mResourceData[index] != null) {
            return mResourceData[index].getValue();
        }

        return null;
!!!9387276.java!!!	getBoolean(in index : int, inout defValue : boolean) : boolean
        if (index < 0 || index >= mResourceData.length) {
            return defValue;
        }

        if (mResourceData[index] == null) {
            return defValue;
        }

        String s = mResourceData[index].getValue();
        if (s != null) {
            return XmlUtils.convertValueToBoolean(s, defValue);
        }

        return defValue;
!!!9387404.java!!!	getInt(in index : int, in defValue : int) : int
        if (index < 0 || index >= mResourceData.length) {
            return defValue;
        }

        if (mResourceData[index] == null) {
            return defValue;
        }

        String s = mResourceData[index].getValue();

        if (RenderResources.REFERENCE_NULL.equals(s)) {
            return defValue;
        }

        if (s == null) {
            return defValue;
        }

        try {
            return XmlUtils.convertValueToInt(s, defValue);
        } catch (NumberFormatException e) {
            // pass
        }

        // Field is not null and is not an integer.
        // Check for possible constants and try to find them.
        // Get the map of attribute-constant -> IntegerValue
        Map<String, Integer> map = null;
        if (mIsFramework[index]) {
            map = Bridge.getEnumValues(mNames[index]);
        } else {
            // get the styleable matching the resolved name
            RenderResources res = mContext.getRenderResources();
            ResourceValue attr = res.getProjectResource(ResourceType.ATTR, mNames[index]);
            if (attr instanceof AttrResourceValue) {
                map = ((AttrResourceValue) attr).getAttributeValues();
            }
        }

        if (map != null) {
            // accumulator to store the value of the 1+ constants.
            int result = 0;

            // split the value in case this is a mix of several flags.
            String[] keywords = s.split("\\|");
            for (String keyword : keywords) {
                Integer i = map.get(keyword.trim());
                if (i != null) {
                    result |= i.intValue();
                } else {
                    Bridge.getLog().warning(LayoutLog.TAG_RESOURCES_FORMAT,
                            String.format(
                                "\"%s\" in attribute \"%2$s\" is not a valid value",
                                keyword, mNames[index]), null /*data*/);
                }
            }
            return result;
        }

        return defValue;
!!!9387532.java!!!	getFloat(in index : int, in defValue : float) : float
        if (index < 0 || index >= mResourceData.length) {
            return defValue;
        }

        if (mResourceData[index] == null) {
            return defValue;
        }

        String s = mResourceData[index].getValue();

        if (s != null) {
            try {
                return Float.parseFloat(s);
            } catch (NumberFormatException e) {
                Bridge.getLog().warning(LayoutLog.TAG_RESOURCES_FORMAT,
                        String.format(
                            "\"%s\" in attribute \"%2$s\" cannot be converted to float.",
                            s, mNames[index]), null /*data*/);

                // we'll return the default value below.
            }
        }
        return defValue;
!!!9387660.java!!!	getColor(in index : int, in defValue : int) : int
        if (index < 0 || index >= mResourceData.length) {
            return defValue;
        }

        if (mResourceData[index] == null) {
            return defValue;
        }

        ColorStateList colorStateList = ResourceHelper.getColorStateList(
                mResourceData[index], mContext);
        if (colorStateList != null) {
            return colorStateList.getDefaultColor();
        }

        return defValue;
!!!9387788.java!!!	getColorStateList(in index : int) : ColorStateList
        if (index < 0 || index >= mResourceData.length) {
            return null;
        }

        if (mResourceData[index] == null) {
            return null;
        }

        ResourceValue resValue = mResourceData[index];
        String value = resValue.getValue();

        if (value == null) {
            return null;
        }

        if (RenderResources.REFERENCE_NULL.equals(value)) {
            return null;
        }

        // let the framework inflate the ColorStateList from the XML file.
        File f = new File(value);
        if (f.isFile()) {
            try {
                XmlPullParser parser = ParserFactory.create(f);

                BridgeXmlBlockParser blockParser = new BridgeXmlBlockParser(
                        parser, mContext, resValue.isFramework());
                try {
                    return ColorStateList.createFromXml(mContext.getResources(), blockParser);
                } finally {
                    blockParser.ensurePopped();
                }
            } catch (XmlPullParserException e) {
                Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                        "Failed to configure parser for " + value, e, null /*data*/);
                return null;
            } catch (Exception e) {
                // this is an error and not warning since the file existence is checked before
                // attempting to parse it.
                Bridge.getLog().error(LayoutLog.TAG_RESOURCES_READ,
                        "Failed to parse file " + value, e, null /*data*/);

                return null;
            }
        }

        try {
            int color = ResourceHelper.getColor(value);
            return ColorStateList.valueOf(color);
        } catch (NumberFormatException e) {
            Bridge.getLog().error(LayoutLog.TAG_RESOURCES_FORMAT, e.getMessage(), e, null /*data*/);
        }

        return null;
!!!9387916.java!!!	getInteger(in index : int, in defValue : int) : int
        return getInt(index, defValue);
!!!9388044.java!!!	getDimension(in index : int, in defValue : float) : float
        if (index < 0 || index >= mResourceData.length) {
            return defValue;
        }

        if (mResourceData[index] == null) {
            return defValue;
        }

        String s = mResourceData[index].getValue();

        if (s == null) {
            return defValue;
        } else if (s.equals(BridgeConstants.MATCH_PARENT) ||
                s.equals(BridgeConstants.FILL_PARENT)) {
            return LayoutParams.MATCH_PARENT;
        } else if (s.equals(BridgeConstants.WRAP_CONTENT)) {
            return LayoutParams.WRAP_CONTENT;
        } else if (RenderResources.REFERENCE_NULL.equals(s)) {
            return defValue;
        }

        if (ResourceHelper.parseFloatAttribute(mNames[index], s, mValue, true /*requireUnit*/)) {
            return mValue.getDimension(mBridgeResources.getDisplayMetrics());
        }

        // looks like we were unable to resolve the dimension value
        Bridge.getLog().warning(LayoutLog.TAG_RESOURCES_FORMAT,
                String.format(
                    "\"%1$s\" in attribute \"%2$s\" is not a valid format.",
                    s, mNames[index]), null /*data*/);

        return defValue;
!!!9388172.java!!!	getDimensionPixelOffset(in index : int, in defValue : int) : int
        return (int) getDimension(index, defValue);
!!!9388300.java!!!	getDimensionPixelSize(in index : int, in defValue : int) : int
        try {
            return getDimension(index);
        } catch (RuntimeException e) {
            if (mResourceData[index] != null) {
                String s = mResourceData[index].getValue();

                if (s != null) {
                    // looks like we were unable to resolve the dimension value
                    Bridge.getLog().warning(LayoutLog.TAG_RESOURCES_FORMAT,
                            String.format(
                                "\"%1$s\" in attribute \"%2$s\" is not a valid format.",
                                s, mNames[index]), null /*data*/);
                }
            }

            return defValue;
        }
!!!9388428.java!!!	getLayoutDimension(in index : int, in name : String) : int
        try {
            // this will throw an exception
            return getDimension(index);
        } catch (RuntimeException e) {

            if (LayoutInflater_Delegate.sIsInInclude) {
                throw new RuntimeException();
            }

            Bridge.getLog().warning(LayoutLog.TAG_RESOURCES_FORMAT,
                    "You must supply a " + name + " attribute.", null);

            return 0;
        }
!!!9388556.java!!!	getLayoutDimension(in index : int, in defValue : int) : int
        return getDimensionPixelSize(index, defValue);
!!!9388684.java!!!	getDimension(in index : int) : int
        if (mResourceData[index] == null) {
            throw new RuntimeException();
        }

        String s = mResourceData[index].getValue();

        if (s == null) {
            throw new RuntimeException();
        } else if (s.equals(BridgeConstants.MATCH_PARENT) ||
                s.equals(BridgeConstants.FILL_PARENT)) {
            return LayoutParams.MATCH_PARENT;
        } else if (s.equals(BridgeConstants.WRAP_CONTENT)) {
            return LayoutParams.WRAP_CONTENT;
        } else if (RenderResources.REFERENCE_NULL.equals(s)) {
            throw new RuntimeException();
        }

        if (ResourceHelper.parseFloatAttribute(mNames[index], s, mValue, true /*requireUnit*/)) {
            float f = mValue.getDimension(mBridgeResources.getDisplayMetrics());

            final int res = (int)(f+0.5f);
            if (res != 0) return res;
            if (f == 0) return 0;
            if (f > 0) return 1;
        }

        throw new RuntimeException();
!!!9388812.java!!!	getFraction(in index : int, in base : int, in pbase : int, in defValue : float) : float
        if (index < 0 || index >= mResourceData.length) {
            return defValue;
        }

        if (mResourceData[index] == null) {
            return defValue;
        }

        String value = mResourceData[index].getValue();
        if (value == null) {
            return defValue;
        }

        if (ResourceHelper.parseFloatAttribute(mNames[index], value, mValue,
                false /*requireUnit*/)) {
            return mValue.getFraction(base, pbase);
        }

        // looks like we were unable to resolve the fraction value
        Bridge.getLog().warning(LayoutLog.TAG_RESOURCES_FORMAT,
                String.format(
                    "\"%1$s\" in attribute \"%2$s\" cannot be converted to a fraction.",
                    value, mNames[index]), null /*data*/);

        return defValue;
!!!9388940.java!!!	getResourceId(in index : int, in defValue : int) : int
        if (index < 0 || index >= mResourceData.length) {
            return defValue;
        }

        // get the Resource for this index
        ResourceValue resValue = mResourceData[index];

        // no data, return the default value.
        if (resValue == null) {
            return defValue;
        }

        // check if this is a style resource
        if (resValue instanceof StyleResourceValue) {
            // get the id that will represent this style.
            return mContext.getDynamicIdByStyle((StyleResourceValue)resValue);
        }

        if (RenderResources.REFERENCE_NULL.equals(resValue.getValue())) {
            return defValue;
        }

        // if the attribute was a reference to a resource, and not a declaration of an id (@+id),
        // then the xml attribute value was "resolved" which leads us to a ResourceValue with a
        // valid getType() and getName() returning a resource name.
        // (and getValue() returning null!). We need to handle this!
        if (resValue.getResourceType() != null) {
            // if this is a framework id
            if (mPlatformFile || resValue.isFramework()) {
                // look for idName in the android R classes
                return mContext.getFrameworkResourceValue(
                        resValue.getResourceType(), resValue.getName(), defValue);
            }

            // look for idName in the project R class.
            return mContext.getProjectResourceValue(
                    resValue.getResourceType(), resValue.getName(), defValue);
        }

        // else, try to get the value, and resolve it somehow.
        String value = resValue.getValue();
        if (value == null) {
            return defValue;
        }

        // if the value is just an integer, return it.
        try {
            int i = Integer.parseInt(value);
            if (Integer.toString(i).equals(value)) {
                return i;
            }
        } catch (NumberFormatException e) {
            // pass
        }

        // Handle the @id/<name>, @+id/<name> and @android:id/<name>
        // We need to return the exact value that was compiled (from the various R classes),
        // as these values can be reused internally with calls to findViewById().
        // There's a trick with platform layouts that not use "android:" but their IDs are in
        // fact in the android.R and com.android.internal.R classes.
        // The field mPlatformFile will indicate that all IDs are to be looked up in the android R
        // classes exclusively.

        // if this is a reference to an id, find it.
        if (value.startsWith("@id/") || value.startsWith("@+") ||
                value.startsWith("@android:id/")) {

            int pos = value.indexOf('/');
            String idName = value.substring(pos + 1);

            // if this is a framework id
            if (mPlatformFile || value.startsWith("@android") || value.startsWith("@+android")) {
                // look for idName in the android R classes
                return mContext.getFrameworkResourceValue(ResourceType.ID, idName, defValue);
            }

            // look for idName in the project R class.
            return mContext.getProjectResourceValue(ResourceType.ID, idName, defValue);
        }

        // not a direct id valid reference? resolve it
        Integer idValue = null;

        if (resValue.isFramework()) {
            idValue = Bridge.getResourceId(resValue.getResourceType(),
                    resValue.getName());
        } else {
            idValue = mContext.getProjectCallback().getResourceId(
                    resValue.getResourceType(), resValue.getName());
        }

        if (idValue != null) {
            return idValue.intValue();
        }

        Bridge.getLog().warning(LayoutLog.TAG_RESOURCES_RESOLVE,
                String.format(
                    "Unable to resolve id \"%1$s\" for attribute \"%2$s\"", value, mNames[index]),
                    resValue);

        return defValue;
!!!9389068.java!!!	getDrawable(in index : int) : Drawable
        if (index < 0 || index >= mResourceData.length) {
            return null;
        }

        if (mResourceData[index] == null) {
            return null;
        }

        ResourceValue value = mResourceData[index];
        String stringValue = value.getValue();
        if (stringValue == null || RenderResources.REFERENCE_NULL.equals(stringValue)) {
            return null;
        }

        return ResourceHelper.getDrawable(value, mContext);
!!!9389196.java!!!	getTextArray(in index : int) : CharSequence
        if (index < 0 || index >= mResourceData.length) {
            return null;
        }

        if (mResourceData[index] == null) {
            return null;
        }

        String value = mResourceData[index].getValue();
        if (value != null) {
            if (RenderResources.REFERENCE_NULL.equals(value)) {
                return null;
            }

            return new CharSequence[] { value };
        }

        Bridge.getLog().warning(LayoutLog.TAG_RESOURCES_FORMAT,
                String.format(
                    String.format("Unknown value for getTextArray(%d) => %s", //DEBUG
                    index, mResourceData[index].getName())), null /*data*/);

        return null;
!!!9389324.java!!!	getValue(in index : int, inout outValue : TypedValue) : boolean
        if (index < 0 || index >= mResourceData.length) {
            return false;
        }

        if (mResourceData[index] == null) {
            return false;
        }

        String s = mResourceData[index].getValue();

        return ResourceHelper.parseFloatAttribute(mNames[index], s, outValue,
                false /*requireUnit*/);
!!!9389452.java!!!	hasValue(in index : int) : boolean
        if (index < 0 || index >= mResourceData.length) {
            return false;
        }

        return mResourceData[index] != null;
!!!9389580.java!!!	peekValue(in index : int) : TypedValue
        if (index < 0 || index >= mResourceData.length) {
            return null;
        }

        if (getValue(index, mValue)) {
            return mValue;
        }

        return null;
!!!9389708.java!!!	getPositionDescription() : String
        return "<internal -- stub if needed>";
!!!9389836.java!!!	recycle() : void
        // pass
!!!9389964.java!!!	toString() : String
        return Arrays.toString(mResourceData);
