class Rect
!!!6416396.java!!!	Rect(in left : int, in top : int, in right : int, in bottom : int)
        this.left = left;
        this.top = top;
        this.right = right;
        this.bottom = bottom;
!!!6416524.java!!!	Rect(inout r : Rect)
        if (r == null) {
            left = top = right = bottom = 0;
        } else {
            left = r.left;
            top = r.top;
            right = r.right;
            bottom = r.bottom;
        }
!!!6416652.java!!!	equals(inout o : Object) : boolean
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Rect r = (Rect) o;
        return left == r.left && top == r.top && right == r.right && bottom == r.bottom;
!!!6416780.java!!!	hashCode() : int
        int result = left;
        result = 31 * result + top;
        result = 31 * result + right;
        result = 31 * result + bottom;
        return result;
!!!6416908.java!!!	toString() : String
        StringBuilder sb = new StringBuilder(32);
        sb.append("Rect("); sb.append(left); sb.append(", ");
        sb.append(top); sb.append(" - "); sb.append(right);
        sb.append(", "); sb.append(bottom); sb.append(")");
        return sb.toString();
!!!6417036.java!!!	toShortString() : String
        return toShortString(new StringBuilder(32));
!!!6417164.java!!!	toShortString(inout sb : StringBuilder) : String
        sb.setLength(0);
        sb.append('['); sb.append(left); sb.append(',');
        sb.append(top); sb.append("]["); sb.append(right);
        sb.append(','); sb.append(bottom); sb.append(']');
        return sb.toString();
!!!6417292.java!!!	flattenToString() : String
        StringBuilder sb = new StringBuilder(32);
        // WARNING: Do not change the format of this string, it must be
        // preserved because Rects are saved in this flattened format.
        sb.append(left);
        sb.append(' ');
        sb.append(top);
        sb.append(' ');
        sb.append(right);
        sb.append(' ');
        sb.append(bottom);
        return sb.toString();
!!!6417420.java!!!	unflattenFromString(in str : String) : Rect
        Matcher matcher = FLATTENED_PATTERN.matcher(str);
        if (!matcher.matches()) {
            return null;
        }
        return new Rect(Integer.parseInt(matcher.group(1)),
                Integer.parseInt(matcher.group(2)),
                Integer.parseInt(matcher.group(3)),
                Integer.parseInt(matcher.group(4)));
!!!6417548.java!!!	printShortString(inout pw : PrintWriter) : void
        pw.print('['); pw.print(left); pw.print(',');
        pw.print(top); pw.print("]["); pw.print(right);
        pw.print(','); pw.print(bottom); pw.print(']');
!!!6417676.java!!!	isEmpty() : boolean
        return left >= right || top >= bottom;
!!!6417804.java!!!	width() : int
        return right - left;
!!!6417932.java!!!	height() : int
        return bottom - top;
!!!6418060.java!!!	centerX() : int
        return (left + right) >> 1;
!!!6418188.java!!!	centerY() : int
        return (top + bottom) >> 1;
!!!6418316.java!!!	exactCenterX() : float
        return (left + right) * 0.5f;
!!!6418444.java!!!	exactCenterY() : float
        return (top + bottom) * 0.5f;
!!!6418572.java!!!	setEmpty() : void
        left = right = top = bottom = 0;
!!!6418700.java!!!	set(in left : int, in top : int, in right : int, in bottom : int) : void
        this.left = left;
        this.top = top;
        this.right = right;
        this.bottom = bottom;
!!!6418828.java!!!	set(inout src : Rect) : void
        this.left = src.left;
        this.top = src.top;
        this.right = src.right;
        this.bottom = src.bottom;
!!!6418956.java!!!	offset(in dx : int, in dy : int) : void
        left += dx;
        top += dy;
        right += dx;
        bottom += dy;
!!!6419084.java!!!	offsetTo(in newLeft : int, in newTop : int) : void
        right += newLeft - left;
        bottom += newTop - top;
        left = newLeft;
        top = newTop;
!!!6419212.java!!!	inset(in dx : int, in dy : int) : void
        left += dx;
        top += dy;
        right -= dx;
        bottom -= dy;
!!!6419340.java!!!	contains(in x : int, in y : int) : boolean
        return left < right && top < bottom  // check for empty first
               && x >= left && x < right && y >= top && y < bottom;
!!!6419468.java!!!	contains(in left : int, in top : int, in right : int, in bottom : int) : boolean
               // check for empty first
        return this.left < this.right && this.top < this.bottom
               // now check for containment
                && this.left <= left && this.top <= top
                && this.right >= right && this.bottom >= bottom;
!!!6419596.java!!!	contains(inout r : Rect) : boolean
               // check for empty first
        return this.left < this.right && this.top < this.bottom
               // now check for containment
               && left <= r.left && top <= r.top && right >= r.right && bottom >= r.bottom;
!!!6419724.java!!!	intersect(in left : int, in top : int, in right : int, in bottom : int) : boolean
        if (this.left < right && left < this.right && this.top < bottom && top < this.bottom) {
            if (this.left < left) this.left = left;
            if (this.top < top) this.top = top;
            if (this.right > right) this.right = right;
            if (this.bottom > bottom) this.bottom = bottom;
            return true;
        }
        return false;
!!!6419852.java!!!	intersect(inout r : Rect) : boolean
        return intersect(r.left, r.top, r.right, r.bottom);
!!!6419980.java!!!	setIntersect(inout a : Rect, inout b : Rect) : boolean
        if (a.left < b.right && b.left < a.right && a.top < b.bottom && b.top < a.bottom) {
            left = Math.max(a.left, b.left);
            top = Math.max(a.top, b.top);
            right = Math.min(a.right, b.right);
            bottom = Math.min(a.bottom, b.bottom);
            return true;
        }
        return false;
!!!6420108.java!!!	intersects(in left : int, in top : int, in right : int, in bottom : int) : boolean
        return this.left < right && left < this.right && this.top < bottom && top < this.bottom;
!!!6420236.java!!!	intersects(inout a : Rect, inout b : Rect) : boolean
        return a.left < b.right && b.left < a.right && a.top < b.bottom && b.top < a.bottom;
!!!6420364.java!!!	union(in left : int, in top : int, in right : int, in bottom : int) : void
        if ((left < right) && (top < bottom)) {
            if ((this.left < this.right) && (this.top < this.bottom)) {
                if (this.left > left) this.left = left;
                if (this.top > top) this.top = top;
                if (this.right < right) this.right = right;
                if (this.bottom < bottom) this.bottom = bottom;
            } else {
                this.left = left;
                this.top = top;
                this.right = right;
                this.bottom = bottom;
            }
        }
!!!6420492.java!!!	union(inout r : Rect) : void
        union(r.left, r.top, r.right, r.bottom);
!!!6420620.java!!!	union(in x : int, in y : int) : void
        if (x < left) {
            left = x;
        } else if (x > right) {
            right = x;
        }
        if (y < top) {
            top = y;
        } else if (y > bottom) {
            bottom = y;
        }
!!!6420748.java!!!	sort() : void
        if (left > right) {
            int temp = left;
            left = right;
            right = temp;
        }
        if (top > bottom) {
            int temp = top;
            top = bottom;
            bottom = temp;
        }
!!!6420876.java!!!	describeContents() : int
        return 0;
!!!6421004.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeInt(left);
        out.writeInt(top);
        out.writeInt(right);
        out.writeInt(bottom);
!!!6421132.java!!!	readFromParcel(inout in : Parcel) : void
        left = in.readInt();
        top = in.readInt();
        right = in.readInt();
        bottom = in.readInt();
!!!6421260.java!!!	scale(in scale : float) : void
        if (scale != 1.0f) {
            left = (int) (left * scale + 0.5f);
            top = (int) (top * scale + 0.5f);
            right = (int) (right * scale + 0.5f);
            bottom = (int) (bottom * scale + 0.5f);
        }
