class SuggestionsView
!!!12806156.java!!!	SuggestionsView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, R.attr.suggestionsViewStyle);
!!!12806284.java!!!	SuggestionsView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        final LayoutInflater inflater = LayoutInflater.from(context);
        inflater.inflate(R.layout.suggestions_strip, this);

        mPreviewPopup = new PopupWindow(context);
        mPreviewText = (TextView) inflater.inflate(R.layout.suggestion_preview, null);
        mPreviewPopup.setWindowLayoutMode(
                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        mPreviewPopup.setContentView(mPreviewText);
        mPreviewPopup.setBackgroundDrawable(null);

        mSuggestionsStrip = (ViewGroup)findViewById(R.id.suggestions_strip);
        for (int pos = 0; pos < MAX_SUGGESTIONS; pos++) {
            final TextView word = (TextView)inflater.inflate(R.layout.suggestion_word, null);
            word.setTag(pos);
            word.setOnClickListener(this);
            word.setOnLongClickListener(this);
            mWords.add(word);
            final View divider = inflater.inflate(R.layout.suggestion_divider, null);
            divider.setTag(pos);
            divider.setOnClickListener(this);
            mDividers.add(divider);
            mInfos.add((TextView)inflater.inflate(R.layout.suggestion_info, null));
        }

        mParams = new SuggestionsViewParams(context, attrs, defStyle, mWords, mDividers, mInfos);

        mMoreSuggestionsContainer = inflater.inflate(R.layout.more_suggestions, null);
        mMoreSuggestionsView = (MoreSuggestionsView)mMoreSuggestionsContainer
                .findViewById(R.id.more_suggestions_view);
        mMoreSuggestionsBuilder = new MoreSuggestions.Builder(mMoreSuggestionsView);

        final PopupWindow moreWindow = new PopupWindow(context);
        moreWindow.setWindowLayoutMode(
                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        moreWindow.setBackgroundDrawable(new ColorDrawable(android.R.color.transparent));
        moreWindow.setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);
        moreWindow.setFocusable(true);
        moreWindow.setOutsideTouchable(true);
        moreWindow.setOnDismissListener(new PopupWindow.OnDismissListener() {
            @Override
            public void onDismiss() {
                mKeyboardView.dimEntireKeyboard(false);
            }
        });
        mMoreSuggestionsWindow = moreWindow;

        final Resources res = context.getResources();
        mMoreSuggestionsModalTolerance = res.getDimensionPixelOffset(
                R.dimen.more_suggestions_modal_tolerance);
        mMoreSuggestionsSlidingDetector = new GestureDetector(
                context, mMoreSuggestionsSlidingListener);
!!!12806412.java!!!	setListener(inout listener : Listener, inout inputView : View) : void
        mListener = listener;
        mKeyboardView = (KeyboardView)inputView.findViewById(R.id.keyboard_view);
!!!12806540.java!!!	setSuggestions(inout suggestedWords : SuggestedWords) : void
        if (suggestedWords == null)
            return;

        clear();
        mSuggestedWords = suggestedWords;
        mParams.layout(mSuggestedWords, mSuggestionsStrip, this, getWidth());
        if (ProductionFlag.IS_EXPERIMENTAL) {
            ResearchLogger.suggestionsView_setSuggestions(mSuggestedWords);
        }
!!!12806668.java!!!	setMoreSuggestionsHeight(in remainingHeight : int) : int
        return mParams.setMoreSuggestionsHeight(remainingHeight);
!!!12806796.java!!!	isShowingAddToDictionaryHint() : boolean
        return mSuggestionsStrip.getChildCount() > 0
                && mParams.isAddToDictionaryShowing(mSuggestionsStrip.getChildAt(0));
!!!12806924.java!!!	showAddToDictionaryHint(inout word : CharSequence, inout hintText : CharSequence) : void
        clear();
        // TODO(Dpad): implement the Dpad for add to dictionary.
        //mParams.layoutAddToDictionaryHint(word, mSuggestionsStrip, getWidth(), hintText, this);
!!!12807052.java!!!	dismissAddToDictionaryHint() : boolean
        if (isShowingAddToDictionaryHint()) {
            clear();
            return true;
        }
        return false;
!!!12807180.java!!!	getSuggestions() : SuggestedWords
        return mSuggestedWords;
!!!12807308.java!!!	clear() : void
        clearAllFocusedTextView();
        mSuggestionsStrip.removeAllViews();
        removeAllViews();
        addView(mSuggestionsStrip);
        dismissMoreSuggestions();
!!!12807436.java!!!	hidePreview() : void
        mPreviewPopup.dismiss();
!!!12807564.java!!!	addToDictionary(inout word : CharSequence) : void
        mListener.addWordToDictionary(word.toString());
!!!12807692.java!!!	moveFocusToPosition(in x : int) : boolean
        ArrayList<TextView> wordList = getWordListTextViewForDpadNavigation();
        if (wordList.isEmpty()) {
            return false;
        }
        ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) mSuggestionsStrip
                .getLayoutParams();
        int location[] = new int[2];
        int textViewX;
        for (TextView textView : wordList) {
            textView.getLocationOnScreen(location);
            textViewX = location[0] + textView.getWidth();
            if (x < textViewX) {
                textView.setPressed(true);
                mCurrentFocusPosition = wordList.indexOf(textView);
                return true;
            }
        }
        // If still not found then focus to last location.
        setFocusOnSuggestion(wordList.size() - 1);
        return true;
!!!12807820.java!!!	setFocusOnSuggestion(in index : int) : boolean
        ArrayList<TextView> wordList = getWordListTextViewForDpadNavigation();
        if (wordList != null) {
            if (index < wordList.size()) {
                if (index != mCurrentFocusPosition && mCurrentFocusPosition != -1) {
                    wordList.get(mCurrentFocusPosition).setPressed(false);
                }
            } else {
                index = wordList.size() - 1;
            }
            if (index >= 0) {
                wordList.get(index).setPressed(true);
                mCurrentFocusPosition = index;
                return true;
            }
        }
        return false;
!!!12807948.java!!!	removeFocusFromSuggestion(in index : int) : void
        ArrayList<TextView> wordList = getWordListTextViewForDpadNavigation();
        if (wordList != null && index < wordList.size()) {
            wordList.get(index).setPressed(false);
        }
!!!12808076.java!!!	clearAllFocusedTextView() : void
        ArrayList<TextView> wordList = getWordListTextViewForDpadNavigation();
        for (int i = 0; i < wordList.size(); i++) {
            wordList.get(i).setPressed(false);
        }
!!!12808204.java!!!	dismissMoreSuggestions() : boolean
        if (mMoreSuggestionsWindow.isShowing()) {
            mMoreSuggestionsWindow.dismiss();
            return true;
        }
        return false;
!!!12808332.java!!!	onLongClick(inout view : View) : boolean
        return showMoreSuggestions();
!!!12808460.java!!!	showMoreSuggestions() : boolean
        final SuggestionsViewParams params = mParams;
        if (params.mMoreSuggestionsAvailable) {
            final int stripWidth = getWidth();
            final View container = mMoreSuggestionsContainer;
            final int maxWidth = stripWidth - container.getPaddingLeft()
                    - container.getPaddingRight();
            final MoreSuggestions.Builder builder = mMoreSuggestionsBuilder;
            builder.layout(mSuggestedWords, params.mSuggestionsCountInStrip, maxWidth,
                    (int)(maxWidth * params.mMinMoreSuggestionsWidth),
                    params.getMaxMoreSuggestionsRow());
            mMoreSuggestionsView.setKeyboard(builder.build());
            container.measure(
                    ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

            final MoreKeysPanel moreKeysPanel = mMoreSuggestionsView;
            final int pointX = stripWidth / 2;
            final int pointY = -params.mMoreSuggestionsBottomGap;
            moreKeysPanel.showMoreKeysPanel(
                    this, mMoreSuggestionsController, pointX, pointY,
                    mMoreSuggestionsWindow, mMoreSuggestionsListener);
            mMoreSuggestionsMode = MORE_SUGGESTIONS_CHECKING_MODAL_OR_SLIDING;
            mOriginX = mLastX;
            mOriginY = mLastY;
            mKeyboardView.dimEntireKeyboard(true);
            for (int i = 0; i < params.mSuggestionsCountInStrip; i++) {
                mWords.get(i).setPressed(false);
            }
            return true;
        }
        return false;
!!!12808588.java!!!	dispatchTouchEvent(inout me : MotionEvent) : boolean
        if (!mMoreSuggestionsWindow.isShowing()
                || mMoreSuggestionsMode == MORE_SUGGESTIONS_IN_MODAL_MODE) {
            mLastX = (int)me.getX();
            mLastY = (int)me.getY();
            if (mMoreSuggestionsSlidingDetector.onTouchEvent(me)) {
                return true;
            }
            return super.dispatchTouchEvent(me);
        }

        final MoreKeysPanel moreKeysPanel = mMoreSuggestionsView;
        final int action = me.getAction();
        final long eventTime = me.getEventTime();
        final int index = me.getActionIndex();
        final int id = me.getPointerId(index);
        final PointerTracker tracker = PointerTracker.getPointerTracker(id, moreKeysPanel);
        final int x = (int)me.getX(index);
        final int y = (int)me.getY(index);
        final int translatedX = moreKeysPanel.translateX(x);
        final int translatedY = moreKeysPanel.translateY(y);

        if (mMoreSuggestionsMode == MORE_SUGGESTIONS_CHECKING_MODAL_OR_SLIDING) {
            if (Math.abs(x - mOriginX) >= mMoreSuggestionsModalTolerance
                    || mOriginY - y >= mMoreSuggestionsModalTolerance) {
                // Decided to be in the sliding input mode only when the touch point has been moved
                // upward.
                mMoreSuggestionsMode = MORE_SUGGESTIONS_IN_SLIDING_MODE;
                tracker.onShowMoreKeysPanel(translatedX, translatedY, moreKeysPanel);
            } else if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_POINTER_UP) {
                // Decided to be in the modal input mode
                mMoreSuggestionsMode = MORE_SUGGESTIONS_IN_MODAL_MODE;
            }
            return true;
        }

        // MORE_SUGGESTIONS_IN_SLIDING_MODE
        tracker.processMotionEvent(action, translatedX, translatedY, eventTime, moreKeysPanel);
        return true;
!!!12808716.java!!!	onClick(inout view : View) : void
        if (mParams.isAddToDictionaryShowing(view)) {
            addToDictionary(mParams.getAddToDictionaryWord());
            clear();
            return;
        }

        final Object tag = view.getTag();
        if (!(tag instanceof Integer))
            return;
        final int index = (Integer) tag;
        if (index >= mSuggestedWords.size())
            return;

        final CharSequence word = mSuggestedWords.getWord(index);
        mListener.pickSuggestionManually(index, word, mLastX, mLastY);
!!!12808844.java!!!	onDetachedFromWindow() : void
        super.onDetachedFromWindow();
        mHandler.cancelAllMessages();
        hidePreview();
        dismissMoreSuggestions();
!!!12808972.java!!!	getWordListTextViewForDpadNavigation() : TextView
        ArrayList<TextView> updatedList = new ArrayList<TextView>();
        TextView textView;
        for (int i = 0; i < mSuggestionsStrip.getChildCount(); i++) {
            try {
                textView = (TextView) mSuggestionsStrip.getChildAt(i);
            } catch (ClassCastException e) {
                textView = null;
            }
            if (textView != null) {
                if(!textView.getText().toString().trim().isEmpty()){
                    updatedList.add(textView);
                }
            }
        }
        return updatedList;
!!!12809100.java!!!	getCenterOfTextView(in position : int) : int
        int x = 0;
        ArrayList<TextView> wordList = getWordListTextViewForDpadNavigation();
        if (wordList.isEmpty() || wordList.size() < position) {
            return x;
        }
        TextView textView = wordList.get(position);
        int location[] = new int[2];
        textView.getLocationOnScreen(location);
        x = location[0] + textView.getWidth() / 2;
        return x;
!!!12809228.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        int index = mCurrentFocusPosition;
        switch (keyCode) {
            case KeyEvent.KEYCODE_DPAD_DOWN:
                // Move focus to keyboard again.
                if (mCurrentFocusPosition >= 0) {
                    removeFocusFromSuggestion(mCurrentFocusPosition);
                }
                mFocusChangeListener.focusToIme(false, getCenterOfTextView(mCurrentFocusPosition));
                mCurrentFocusPosition = -1;
                return true;
            case KeyEvent.KEYCODE_DPAD_UP:
                // Handle it so from suggestion view it will not move up.
                return true;
            case KeyEvent.KEYCODE_DPAD_LEFT:
                index -= 1;
                if (index >= 0) {
                    setFocusOnSuggestion(index);
                }
                return true;
            case KeyEvent.KEYCODE_DPAD_RIGHT:
                index += 1;
                ArrayList<TextView> wordList = getWordListTextViewForDpadNavigation();
                if (index < wordList.size()) {
                    setFocusOnSuggestion(index);
                }
                return true;
        }
        return false;
!!!12809356.java!!!	onKeyUp(in keyCode : int, inout event : KeyEvent) : boolean
        switch (keyCode) {
            case KeyEvent.KEYCODE_DPAD_CENTER:
                if (mCurrentFocusPosition >= 0) {
                    removeFocusFromSuggestion(mCurrentFocusPosition);
                    ArrayList<TextView> wordList = getWordListTextViewForDpadNavigation();
                    TextView clickedView = wordList.get(mCurrentFocusPosition);
                    mLastX = (int) (clickedView.getX() + 10);
                    mLastY = (int) (clickedView.getY() + 10);
                    this.onClick(clickedView);
                    mCurrentFocusPosition = -1;
                    return true;
                }
        }
        return super.onKeyUp(keyCode, event);
!!!12809484.java!!!	setFocusChangeListener(inout focusChangeListener : FocusChangeListener) : void
        this.mFocusChangeListener = focusChangeListener;
