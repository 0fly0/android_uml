class JMediaExtractor
!!!1160972.cpp!!!	JMediaExtractor(inout env : JNIEnv, in thiz : jobject)
    jclass clazz = env->GetObjectClass(thiz);
    CHECK(clazz != NULL);

    mClass = (jclass)env->NewGlobalRef(clazz);
    mObject = env->NewWeakGlobalRef(thiz);

    mImpl = new NuMediaExtractor;
!!!1161100.cpp!!!	setDataSource(in path : char, in headers : KeyedVector<String8, String8>) : status_t
    return mImpl->setDataSource(path, headers);
!!!1161228.cpp!!!	setDataSource(in fd : int, in offset : off64_t, in size : off64_t) : status_t
    return mImpl->setDataSource(fd, offset, size);
!!!1161356.cpp!!!	setDataSource(in datasource : sp<DataSource>) : status_t
    return mImpl->setDataSource(datasource);
!!!1161484.cpp!!!	countTracks() : size_t
    return mImpl->countTracks();
!!!1161612.cpp!!!	getTrackFormat(in index : size_t, inout format : jobject) : status_t
    sp<AMessage> msg;
    status_t err;
    if ((err = mImpl->getTrackFormat(index, &msg)) != OK) {
        return err;
    }

    JNIEnv *env = AndroidRuntime::getJNIEnv();

    return ConvertMessageToMap(env, msg, format);
!!!1161740.cpp!!!	selectTrack(in index : size_t) : status_t
    return mImpl->selectTrack(index);
!!!1161868.cpp!!!	unselectTrack(in index : size_t) : status_t
    return mImpl->unselectTrack(index);
!!!1161996.cpp!!!	seekTo(in timeUs : int64_t, in mode : SeekMode) : status_t
    return mImpl->seekTo(timeUs, mode);
!!!1162124.cpp!!!	advance() : status_t
    return mImpl->advance();
!!!1162252.cpp!!!	readSampleData(in byteBuf : jobject, in offset : size_t, inout sampleSize : size_t) : status_t
    JNIEnv *env = AndroidRuntime::getJNIEnv();

    void *dst = env->GetDirectBufferAddress(byteBuf);

    jlong dstSize;
    jbyteArray byteArray = NULL;

    if (dst == NULL) {
        jclass byteBufClass = env->FindClass("java/nio/ByteBuffer");
        CHECK(byteBufClass != NULL);

        jmethodID arrayID =
            env->GetMethodID(byteBufClass, "array", "()[B");
        CHECK(arrayID != NULL);

        byteArray =
            (jbyteArray)env->CallObjectMethod(byteBuf, arrayID);

        if (byteArray == NULL) {
            return INVALID_OPERATION;
        }

        jboolean isCopy;
        dst = env->GetByteArrayElements(byteArray, &isCopy);

        dstSize = env->GetArrayLength(byteArray);
    } else {
        dstSize = env->GetDirectBufferCapacity(byteBuf);
    }

    if (dstSize < offset) {
        if (byteArray != NULL) {
            env->ReleaseByteArrayElements(byteArray, (jbyte *)dst, 0);
        }

        return -ERANGE;
    }

    sp<ABuffer> buffer = new ABuffer((char *)dst + offset, dstSize - offset);

    status_t err = mImpl->readSampleData(buffer);

    if (byteArray != NULL) {
        env->ReleaseByteArrayElements(byteArray, (jbyte *)dst, 0);
    }

    if (err != OK) {
        return err;
    }

    *sampleSize = buffer->size();

    return OK;
!!!1162380.cpp!!!	getSampleTrackIndex(inout trackIndex : size_t) : status_t
    return mImpl->getSampleTrackIndex(trackIndex);
!!!1162508.cpp!!!	getSampleTime(inout sampleTimeUs : int64_t) : status_t
    return mImpl->getSampleTime(sampleTimeUs);
!!!1162636.cpp!!!	getSampleFlags(inout sampleFlags : uint32_t) : status_t
    *sampleFlags = 0;

    sp<MetaData> meta;
    status_t err = mImpl->getSampleMeta(&meta);

    if (err != OK) {
        return err;
    }

    int32_t val;
    if (meta->findInt32(kKeyIsSyncFrame, &val) && val != 0) {
        (*sampleFlags) |= NuMediaExtractor::SAMPLE_FLAG_SYNC;
    }

    uint32_t type;
    const void *data;
    size_t size;
    if (meta->findData(kKeyEncryptedSizes, &type, &data, &size)) {
        (*sampleFlags) |= NuMediaExtractor::SAMPLE_FLAG_ENCRYPTED;
    }

    return OK;
!!!1162764.cpp!!!	getSampleMeta(inout sampleMeta : sp<MetaData>) : status_t
    return mImpl->getSampleMeta(sampleMeta);
!!!1162892.cpp!!!	getCachedDuration(inout durationUs : int64_t, inout eos : bool) : bool
    return mImpl->getCachedDuration(durationUs, eos);
!!!1163020.cpp!!!	~JMediaExtractor()
    JNIEnv *env = AndroidRuntime::getJNIEnv();

    env->DeleteWeakGlobalRef(mObject);
    mObject = NULL;
    env->DeleteGlobalRef(mClass);
    mClass = NULL;
