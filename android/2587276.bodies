class BerlinAVSettings
!!!10934284.cpp!!!	~BerlinAVSettings()
    for (unsigned int i = 0; i < model_attr_list_.size(); i++) {
        ModelAttrVector* attr_vector = model_attr_list_.valueAt(i);

        for(unsigned int j = 0; j< attr_vector->size(); j++)
            delete attr_vector->itemAt(j);

        delete attr_vector;
    }
!!!10934540.cpp!!!	InitDB(in dbname : char) : bool
    AVSettingsSqlite3* db = new AVSettingsSqlite3;
    // If there's default avsettings database for first init, use it
    if (access(dbname, F_OK) == -1 &&
            !strcmp(dbname, marvell::kAVSettingsDatabase) &&
            access(kDefaultAVSettingsDatabase, F_OK) == 0 ) {
        ALOGD("InitDB, copy default avsettings database");
        String8 cmd;
        cmd = String8::format(SHELL_CMD_COPY, kDefaultAVSettingsDatabase, dbname);
        ALOGD("InitDB, %s", cmd.string());
        system(cmd.string());
        system(SHELL_CMD_SYNC);
        ALOGD("InitDB, access ret %d", access(dbname, F_OK));
    }
    if (!db || !db->loadFromPath(dbname)) {
        delete db;
        return false;
    }
    db_ = db;
    return true;
!!!10934668.cpp!!!	ReadSetting(in name : char, inout value : AVSettingValue) : status_t
    ALOGD("ReadSetting, name: %s", name);
    if (init_stage_) {
        // AVSetting handler has not been registered at init stage,
        // Read from database directly
        ALOGD("ReadSetting, init stage, read from database");
        CHECK(db_ != NULL);
        return db_->getEntry(name, value) ?
                android::OK : android::UNKNOWN_ERROR;
    } else {
        // Call parent
        return marvell::AVSettings::ReadSetting(name, value);
    }
!!!10934796.cpp!!!	WriteSetting(in name : char, in value : AVSettingValue, in notify : bool) : status_t
    ALOGD("WriteSetting, name: %s", name);
    if (init_stage_) {
        // AVSetting handler has not been registered at init stage,
        // Write to database directly
        if (marvell::NEED_WRITE != AVSettingsHelper::GetApplyStatus(name)) {
            ALOGW("WriteSetting, write invalid, key %s", name);
            return android::BAD_VALUE;
        }
        if (notify) {
            ALOGW("WriteSetting, cannot notify at init stage");
            return android::BAD_VALUE;
        }
        ALOGD("WriteSetting, init stage, write to database");
        CHECK(db_ != NULL);
        return db_->putEntry(name, value) ?
                android::OK : android::UNKNOWN_ERROR;
    } else {
        // Call parent
        return marvell::AVSettings::WriteSetting(name, value, notify);
    }
!!!10934924.cpp!!!	ExitInitStage() : void
    ALOGD("ExitInitStage");
    init_stage_ = false;
