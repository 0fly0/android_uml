class Fence
!!!1536140.cpp!!!	wait(in timeout : uint) : status_t
    ATRACE_CALL();
    if (mFenceFd == -1) {
        return NO_ERROR;
    }
    int err = sync_wait(mFenceFd, timeout);
    return err < 0 ? -errno : status_t(NO_ERROR);
!!!1536268.cpp!!!	waitForever(in warningTimeout : uint, in logname : char) : status_t
    ATRACE_CALL();
    if (mFenceFd == -1) {
        return NO_ERROR;
    }
    int err = sync_wait(mFenceFd, warningTimeout);
    if (err < 0 && errno == ETIME) {
        ALOGE("%s: fence %d didn't signal in %u ms", logname, mFenceFd,
                warningTimeout);
        err = sync_wait(mFenceFd, TIMEOUT_NEVER);
    }
    return err < 0 ? -errno : status_t(NO_ERROR);
!!!1536396.cpp!!!	merge(in name : String8, in f1 : sp<Fence>, in f2 : sp<Fence>) : sp<Fence>
    ATRACE_CALL();
    int result = sync_merge(name.string(), f1->mFenceFd, f2->mFenceFd);
    if (result == -1) {
        status_t err = -errno;
        ALOGE("merge: sync_merge(\"%s\", %d, %d) returned an error: %s (%d)",
                name.string(), f1->mFenceFd, f2->mFenceFd,
                strerror(-err), err);
        return NO_FENCE;
    }
    return sp<Fence>(new Fence(result));
!!!1536524.cpp!!!	dup() : int
    if (mFenceFd == -1) {
        return -1;
    }
    return ::dup(mFenceFd);
!!!1536652.cpp!!!	getFlattenedSize() : size_t
    return 0;
!!!1536780.cpp!!!	getFdCount() : size_t
    return 1;
!!!1536908.cpp!!!	flatten(inout buffer : void, in size : size_t, in fds : int, in count : size_t) : status_t
    if (size != 0 || count != 1) {
        return BAD_VALUE;
    }

    fds[0] = mFenceFd;
    return NO_ERROR;
!!!1537036.cpp!!!	unflatten(in buffer : void, in size : size_t, in fds : int, in count : size_t) : status_t
    if (size != 0 || count != 1) {
        return BAD_VALUE;
    }
    if (mFenceFd != -1) {
        // Don't unflatten if we already have a valid fd.
        return INVALID_OPERATION;
    }

    mFenceFd = fds[0];
    return NO_ERROR;
!!!1537164.cpp!!!	~Fence()
    if (mFenceFd != -1) {
        close(mFenceFd);
    }
