class FragmentedMPEG4Source
!!!1864460.cpp!!!	start(inout params : MetaData = NULL) : status_t
    Mutex::Autolock autoLock(mLock);

    CHECK(!mStarted);

    int32_t val;
    if (params && params->findInt32(kKeyWantsNALFragments, &val)
        && val != 0) {
        mWantsNALFragments = true;
    } else {
        mWantsNALFragments = false;
    }
    ALOGV("caller wants NAL fragments: %s", mWantsNALFragments ? "yes" : "no");

    mGroup = new MediaBufferGroup;

    int32_t max_size = 65536;
    // XXX CHECK(mFormat->findInt32(kKeyMaxInputSize, &max_size));

    mGroup->add_buffer(new MediaBuffer(max_size));

    mSrcBuffer = new uint8_t[max_size];

    mStarted = true;

    return OK;
!!!1864588.cpp!!!	stop() : status_t
    Mutex::Autolock autoLock(mLock);

    CHECK(mStarted);

    delete[] mSrcBuffer;
    mSrcBuffer = NULL;

    delete mGroup;
    mGroup = NULL;

    mStarted = false;
    mCurrentSampleIndex = 0;

    return OK;
!!!1864716.cpp!!!	getFormat() : sp<MetaData>
    Mutex::Autolock autoLock(mLock);

    return mFormat;
!!!1864844.cpp!!!	read(inout out : MediaBuffer, in options : ReadOptions = NULL) : status_t
    int64_t seekTimeUs;
    ReadOptions::SeekMode mode;
    if (options && options->getSeekTo(&seekTimeUs, &mode)) {
        mParser->seekTo(mIsAudioTrack, seekTimeUs);
    }
    MediaBuffer *buffer = NULL;
    mGroup->acquire_buffer(&buffer);
    sp<ABuffer> parseBuffer;

    status_t ret = mParser->dequeueAccessUnit(mIsAudioTrack, &parseBuffer, true /* synchronous */);
    if (ret != OK) {
        buffer->release();
        ALOGV("returning %d", ret);
        return ret;
    }
    sp<AMessage> meta = parseBuffer->meta();
    int64_t timeUs;
    CHECK(meta->findInt64("timeUs", &timeUs));
    buffer->meta_data()->setInt64(kKeyTime, timeUs);
    buffer->set_range(0, parseBuffer->size());
    memcpy(buffer->data(), parseBuffer->data(), parseBuffer->size());
    *out = buffer;
    return OK;
!!!1864972.cpp!!!	~FragmentedMPEG4Source()
    if (mStarted) {
        stop();
    }
