class AnimationDrawable
!!!6451468.java!!!	AnimationDrawable()
        this(null, null);
!!!6451596.java!!!	setVisible(inout visible : boolean, inout restart : boolean) : boolean
        boolean changed = super.setVisible(visible, restart);
        if (visible) {
            if (changed || restart) {
                setFrame(0, true, true);
            }
        } else {
            unscheduleSelf(this);
        }
        return changed;
!!!6451724.java!!!	start() : void
        if (!isRunning()) {
            run();
        }
!!!6451852.java!!!	stop() : void
        if (isRunning()) {
            unscheduleSelf(this);
        }
!!!6451980.java!!!	isRunning() : boolean
        return mCurFrame > -1;
!!!6452108.java!!!	run() : void
        nextFrame(false);
!!!6452236.java!!!	unscheduleSelf(inout what : Runnable) : void
        mCurFrame = -1;
        super.unscheduleSelf(what);
!!!6452364.java!!!	getNumberOfFrames() : int
        return mAnimationState.getChildCount();
!!!6452492.java!!!	getFrame(in index : int) : Drawable
        return mAnimationState.getChildren()[index];
!!!6452620.java!!!	getDuration(in i : int) : int
        return mAnimationState.mDurations[i];
!!!6452748.java!!!	isOneShot() : boolean
        return mAnimationState.mOneShot;
!!!6452876.java!!!	setOneShot(inout oneShot : boolean) : void
        mAnimationState.mOneShot = oneShot;
!!!6453004.java!!!	addFrame(inout frame : Drawable, in duration : int) : void
        mAnimationState.addFrame(frame, duration);
        if (mCurFrame < 0) {
            setFrame(0, true, false);
        }
!!!6453132.java!!!	nextFrame(inout unschedule : boolean) : void
        int next = mCurFrame+1;
        final int N = mAnimationState.getChildCount();
        if (next >= N) {
            next = 0;
        }
        setFrame(next, unschedule, !mAnimationState.mOneShot || next < (N - 1));
!!!6453260.java!!!	setFrame(in frame : int, inout unschedule : boolean, inout animate : boolean) : void
        if (frame >= mAnimationState.getChildCount()) {
            return;
        }
        mCurFrame = frame;
        selectDrawable(frame);
        if (unschedule) {
            unscheduleSelf(this);
        }
        if (animate) {
            // Unscheduling may have clobbered this value; restore it to record that we're animating
            mCurFrame = frame;
            scheduleSelf(this, SystemClock.uptimeMillis() + mAnimationState.mDurations[frame]);
        }
!!!6453388.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : void
        
        TypedArray a = r.obtainAttributes(attrs,
                com.android.internal.R.styleable.AnimationDrawable);

        super.inflateWithAttributes(r, parser, a,
                com.android.internal.R.styleable.AnimationDrawable_visible);
        
        mAnimationState.setVariablePadding(a.getBoolean(
                com.android.internal.R.styleable.AnimationDrawable_variablePadding, false));
            
        mAnimationState.mOneShot = a.getBoolean(
                com.android.internal.R.styleable.AnimationDrawable_oneshot, false);
        
        a.recycle();
        
        int type;

        final int innerDepth = parser.getDepth()+1;
        int depth;
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT &&
                ((depth = parser.getDepth()) >= innerDepth || type != XmlPullParser.END_TAG)) {
            if (type != XmlPullParser.START_TAG) {
                continue;
            }

            if (depth > innerDepth || !parser.getName().equals("item")) {
                continue;
            }
            
            a = r.obtainAttributes(attrs, com.android.internal.R.styleable.AnimationDrawableItem);
            int duration = a.getInt(
                    com.android.internal.R.styleable.AnimationDrawableItem_duration, -1);
            if (duration < 0) {
                throw new XmlPullParserException(
                        parser.getPositionDescription()
                        + ": <item> tag requires a 'duration' attribute");
            }
            int drawableRes = a.getResourceId(
                    com.android.internal.R.styleable.AnimationDrawableItem_drawable, 0);
            
            a.recycle();
            
            Drawable dr;
            if (drawableRes != 0) {
                dr = r.getDrawable(drawableRes);
            } else {
                while ((type=parser.next()) == XmlPullParser.TEXT) {
                    // Empty
                }
                if (type != XmlPullParser.START_TAG) {
                    throw new XmlPullParserException(parser.getPositionDescription() +
                            ": <item> tag requires a 'drawable' attribute or child tag" +
                            " defining a drawable");
                }
                dr = Drawable.createFromXmlInner(r, parser, attrs);
            }
            
            mAnimationState.addFrame(dr, duration);
            if (dr != null) {
                dr.setCallback(this);
            }
        }

        setFrame(0, true, false);
!!!6453516.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            mAnimationState.mDurations = mAnimationState.mDurations.clone();
            mMutated = true;
        }
        return this;
!!!6454284.java!!!	AnimationDrawable(inout state : AnimationState, inout res : Resources)
        AnimationState as = new AnimationState(state, this, res);
        mAnimationState = as;
        setConstantState(as);
        if (state != null) {
            setFrame(0, true, false);
        }
