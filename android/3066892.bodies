class SmoothStreamingUtil
!!!12705292.java!!!	decode(inout buffer : ByteBuffer) : String
      byte bom[] = new byte[4];
      buffer.get(bom);

      String charSetName;
      if (bom[0] == (byte)0xEF && bom[1] == (byte)0xBB && bom[2] == (byte)0xBF) {
          // UTF-8
          charSetName = "UTF-8";
      } else if (bom[0] == (byte)0xFE && bom[1] == (byte)0xFF) {
          // UTF-16 BE
          charSetName = "UTF-16BE";
      } else if (bom[0] == (byte)0xFF && bom[1] == (byte)0xFE) {
          if (bom[2] == (byte)0x00 && bom[3] == (byte)0x00) {
              // UTF-32 LE
              charSetName = "UTF-32LE";
          } else {
              // UTF-16 LE
              charSetName = "UTF-16";
          }
      } else if (bom[0] == (byte)0x00 && bom[1] == (byte)0x00 &&
              bom[2] == (byte)0xFE && bom[3] == (byte)0xFF) {
          // UTF-32 BE
          charSetName = "UTF-32LE";
      } else if (bom[0] == (byte)0x2B && bom[1] == (byte)0x2F && bom[2] == (byte)0x76 &&
              (bom[3] == (byte)0x38 || bom[3] == (byte)0x39 || bom[3] == (byte)0x2B ||
                      bom[3] == (byte)0x2f)) {
          // UTF-7
          charSetName = "UTF-7";
      } else {
          charSetName = "UTF-8";
      }

      // NOTE: direct buffer does not support array().
      byte[] data = new byte[buffer.limit()];
      buffer.position(0);
      buffer.get(data);

      return Charset.isSupported(charSetName) ?
          new String(data, 0, buffer.limit(), Charset.forName(charSetName)) :
          null;
!!!12705420.java!!!	isNullOrEmptyString(in s : String) : boolean
        return s == null || s.isEmpty();
!!!12705548.java!!!	convertTimeInUs(in time : long, in timeScale : long) : long
        if (timeScale > 1000000l) {
            return time / (timeScale / 1000000l);
        } else {
            return time * (1000000l / timeScale);
        }
