class AtomicReferenceFieldUpdaterImpl
!!!1650075.java!!!	AtomicReferenceFieldUpdaterImpl(inout tclass : Class, inout vclass : Class, inout fieldName : String)
            Field field = null;
            Class<?> fieldClass = null;
            Class<?> caller = null;
            int modifiers = 0;
            try {
                field = tclass.getDeclaredField(fieldName);
                caller = VMStack.getStackClass2(); // android-changed
                modifiers = field.getModifiers();
                // BEGIN android-removed
                // sun.reflect.misc.ReflectUtil.ensureMemberAccess(
                //     caller, tclass, null, modifiers);
                // sun.reflect.misc.ReflectUtil.checkPackageAccess(tclass);
                // END android-removed
                fieldClass = field.getType();
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }

            if (vclass != fieldClass)
                throw new ClassCastException();

            if (!Modifier.isVolatile(modifiers))
                throw new IllegalArgumentException("Must be volatile type");

            this.cclass = (Modifier.isProtected(modifiers) &&
                           caller != tclass) ? caller : null;
            this.tclass = tclass;
            if (vclass == Object.class)
                this.vclass = null;
            else
                this.vclass = vclass;
            offset = unsafe.objectFieldOffset(field);
!!!1650203.java!!!	targetCheck(inout obj : T) : void
            if (!tclass.isInstance(obj))
                throw new ClassCastException();
            if (cclass != null)
                ensureProtectedAccess(obj);
!!!1650331.java!!!	updateCheck(inout obj : T, inout update : V) : void
            if (!tclass.isInstance(obj) ||
                (update != null && vclass != null && !vclass.isInstance(update)))
                throw new ClassCastException();
            if (cclass != null)
                ensureProtectedAccess(obj);
!!!1650459.java!!!	compareAndSet(inout obj : T, inout expect : V, inout update : V) : boolean
            if (obj == null || obj.getClass() != tclass || cclass != null ||
                (update != null && vclass != null &&
                 vclass != update.getClass()))
                updateCheck(obj, update);
            return unsafe.compareAndSwapObject(obj, offset, expect, update);
!!!1650587.java!!!	weakCompareAndSet(inout obj : T, inout expect : V, inout update : V) : boolean
            // same implementation as strong form for now
            if (obj == null || obj.getClass() != tclass || cclass != null ||
                (update != null && vclass != null &&
                 vclass != update.getClass()))
                updateCheck(obj, update);
            return unsafe.compareAndSwapObject(obj, offset, expect, update);
!!!1650715.java!!!	set(inout obj : T, inout newValue : V) : void
            if (obj == null || obj.getClass() != tclass || cclass != null ||
                (newValue != null && vclass != null &&
                 vclass != newValue.getClass()))
                updateCheck(obj, newValue);
            unsafe.putObjectVolatile(obj, offset, newValue);
!!!1650843.java!!!	lazySet(inout obj : T, inout newValue : V) : void
            if (obj == null || obj.getClass() != tclass || cclass != null ||
                (newValue != null && vclass != null &&
                 vclass != newValue.getClass()))
                updateCheck(obj, newValue);
            unsafe.putOrderedObject(obj, offset, newValue);
!!!1650971.java!!!	get(inout obj : T) : V
            if (obj == null || obj.getClass() != tclass || cclass != null)
                targetCheck(obj);
            return (V)unsafe.getObjectVolatile(obj, offset);
!!!1651099.java!!!	ensureProtectedAccess(inout obj : T) : void
            if (cclass.isInstance(obj)) {
                return;
            }
            throw new RuntimeException(
                new IllegalAccessException("Class " +
                    cclass.getName() +
                    " can not access a protected member of class " +
                    tclass.getName() +
                    " using an instance of " +
                    obj.getClass().getName()
                )
            );
