format 74
"json" // framework::base::cmds::am::src::com::google::polo::json
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/jellybean/vendor/tv/external/polo/src/com/google/polo/json/"
  java_package "com.google.polo.json"
  classview 303756 "json"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 3121676 "CDL"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Copyright (c) 2002 JSON.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

The Software shall be used for Good, not Evil.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


This provides static methods to convert comma delimited text into a
JSONArray, and to covert a JSONArray into comma delimited text. Comma
delimited text is a very popular format for data interchange. It is
understood by most database, spreadsheet, and organizer programs.
<p>
Each row of text represents a row in a table or a data record. Each row
ends with a NEWLINE character. Each row contains one or more values.
Values are separated by commas. A value can contain any character except
for comma, unless is is wrapped in single quotes or double quotes.
<p>
The first row usually contains the names of the columns.
<p>
A comma delimited list can be converted into a JSONArray of JSONObjects.
The names for the elements in the JSONObjects can be taken from the names
in the first row.
@author JSON.org
@version 2008-09-18"
      operation 13129100 "getValue"
	class_operation private explicit_return_type "String"
	nparams 1
	  param inout name "x" type class_ref 3121804 // JSONTokener
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next value. The value can be wrapped in quotes. The value can
be empty.
@param x A JSONTokener of the source text.
@return The value string, or null if empty.
@throws JSONException if the quoted string is badly formed."
      end

      operation 13129228 "rowToJSONArray"
	class_operation public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param inout name "x" type class_ref 3121804 // JSONTokener
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a JSONArray of strings from a row of comma delimited values.
@param x A JSONTokener of the source text.
@return A JSONArray of strings.
@throws JSONException"
      end

      operation 13129356 "rowToJSONObject"
	class_operation public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param inout name "names" type class_ref 3122060 // JSONArray
	  param inout name "x" type class_ref 3121804 // JSONTokener
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a JSONObject from a row of comma delimited text, using a
parallel JSONArray of strings to provides the names of the elements.
@param names A JSONArray of names. This is commonly obtained from the
 first row of a comma delimited text file using the rowToJSONArray
 method.
@param x A JSONTokener of the source text.
@return A JSONObject combining the names and values.
@throws JSONException"
      end

      operation 13129484 "toJSONArray"
	class_operation public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param in name "string" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a JSONArray of JSONObjects from a comma delimited text string,
using the first row as a source of names.
@param string The comma delimited text.
@return A JSONArray of JSONObjects.
@throws JSONException"
      end

      operation 13129612 "toJSONArray"
	class_operation public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param inout name "x" type class_ref 3121804 // JSONTokener
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a JSONArray of JSONObjects from a comma delimited text string,
using the first row as a source of names.
@param x The JSONTokener containing the comma delimited text.
@return A JSONArray of JSONObjects.
@throws JSONException"
      end

      operation 13129740 "toJSONArray"
	class_operation public return_type class_ref 3122060 // JSONArray
	nparams 2
	  param inout name "names" type class_ref 3122060 // JSONArray
	  param in name "string" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a JSONArray of JSONObjects from a comma delimited text string
using a supplied JSONArray as the source of element names.
@param names A JSONArray of strings.
@param string The comma delimited text.
@return A JSONArray of JSONObjects.
@throws JSONException"
      end

      operation 13129868 "toJSONArray"
	class_operation public return_type class_ref 3122060 // JSONArray
	nparams 2
	  param inout name "names" type class_ref 3122060 // JSONArray
	  param inout name "x" type class_ref 3121804 // JSONTokener
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a JSONArray of JSONObjects from a comma delimited text string
using a supplied JSONArray as the source of element names.
@param names A JSONArray of strings.
@param x A JSONTokener of the source text.
@return A JSONArray of JSONObjects.
@throws JSONException"
      end

      operation 13129996 "rowToString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "ja" type class_ref 3122060 // JSONArray
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a comma delimited text row from a JSONArray. Values containing
the comma character will be quoted.
@param ja A JSONArray of strings.
@return A string ending in NEWLINE."
      end

      operation 13130124 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "ja" type class_ref 3122060 // JSONArray
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a comma delimited text from a JSONArray of JSONObjects. The
first row will be a list of names obtained by inspecting the first
JSONObject.
@param ja A JSONArray of JSONObjects.
@return A comma delimited text.
@throws JSONException"
      end

      operation 13130252 "toString"
	class_operation public explicit_return_type "String"
	nparams 2
	  param inout name "names" type class_ref 3122060 // JSONArray
	  param inout name "ja" type class_ref 3122060 // JSONArray
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a comma delimited text from a JSONArray of JSONObjects using
a provided list of names. The list of names is not included in the
output.
@param names A JSONArray of strings.
@param ja A JSONArray of JSONObjects.
@return A comma delimited text.
@throws JSONException"
      end
    end

    class 3121804 "JSONTokener"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Copyright (c) 2002 JSON.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

The Software shall be used for Good, not Evil.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


A JSONTokener takes a source string and extracts characters and tokens from
it. It is used by the JSONObject and JSONArray constructors to parse
JSON source strings.
@author JSON.org
@version 2008-09-18"
      attribute 11468940 "index"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11469068 "reader"
	private explicit_type "Reader"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11469196 "lastChar"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11469324 "useLastChar"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 13131404 "JSONTokener"
	public explicit_return_type ""
	nparams 1
	  param inout name "reader" explicit_type "Reader"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONTokener from a string.

@param reader     A reader."
      end

      operation 13131532 "JSONTokener"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONTokener from a string.

@param s     A source string."
      end

      operation 13131660 "back"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Back up one character. This provides a sort of lookahead capability,
so that you can test for a digit or letter before attempting to parse
the next number or identifier."
      end

      operation 13131788 "dehexchar"
	class_operation public explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the hex value of a character (base16).
@param c A character between '0' and '9' or between 'A' and 'F' or
between 'a' and 'f'.
@return  An int between 0 and 15, or -1 if c was not a hex digit."
      end

      operation 13131916 "more"
	public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the source string still contains characters that next()
can consume.
@return true if not yet at the end of the source."
      end

      operation 13132044 "next"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next character in the source string.

@return The next character, or 0 if past the end of the source string."
      end

      operation 13132172 "next"
	public explicit_return_type "char"
	nparams 1
	  param in name "c" explicit_type "char"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Consume the next character, and check that it matches a specified
character.
@param c The character to match.
@return The character.
@throws JSONException if the character does not match."
      end

      operation 13132300 "next"
	public explicit_return_type "String"
	nparams 1
	  param in name "n" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next n characters.

@param n     The number of characters to take.
@return      A string of n characters.
@throws JSONException
  Substring bounds error if there are not
  n characters remaining in the source string."
      end

      operation 13132428 "nextClean"
	public explicit_return_type "char"
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next char in the string, skipping whitespace.
@throws JSONException
@return  A character, or 0 if there are no more characters."
      end

      operation 13132556 "nextString"
	public explicit_return_type "String"
	nparams 1
	  param in name "quote" explicit_type "char"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the characters up to the next close quote character.
Backslash processing is done. The formal JSON format does not
allow strings in single quotes, but an implementation is allowed to
accept them.
@param quote The quoting character, either
     <code>\"</code>&nbsp;<small>(double quote)</small> or
     <code>'</code>&nbsp;<small>(single quote)</small>.
@return      A String.
@throws JSONException Unterminated string."
      end

      operation 13132684 "nextTo"
	public explicit_return_type "String"
	nparams 1
	  param in name "d" explicit_type "char"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the text up but not including the specified character or the
end of line, whichever comes first.
@param  d A delimiter character.
@return   A string."
      end

      operation 13132812 "nextTo"
	public explicit_return_type "String"
	nparams 1
	  param in name "delimiters" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the text up but not including one of the specified delimiter
characters or the end of line, whichever comes first.
@param delimiters A set of delimiter characters.
@return A string, trimmed."
      end

      operation 13132940 "nextValue"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next value. The value can be a Boolean, Double, Integer,
JSONArray, JSONObject, Long, or String, or the JSONObject.NULL object.
@throws JSONException If syntax error.

@return An object."
      end

      operation 13133068 "skipTo"
	public explicit_return_type "char"
	nparams 1
	  param in name "to" explicit_type "char"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skip characters until the next character is the requested character.
If the requested character is not found, no characters are skipped.
@param to A character to skip to.
@return The requested character, or zero if the requested character
is not found."
      end

      operation 13133196 "syntaxError"
	public return_type class_ref 3121932 // JSONException
	nparams 1
	  param in name "message" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a JSONException to signal a syntax error.

@param message The error message.
@return  A JSONException object, suitable for throwing"
      end

      operation 13133324 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a printable string of this JSONTokener.

@return \" at character [this.index]\""
      end
    end

    class 3121932 "JSONException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The JSONException is thrown by the JSON.org classes then things are amiss.
@author JSON.org
@version 2008-09-18"
      classrelation 5767436 // <generalisation>
	relation 5767308 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5767436 // <generalisation>
	  b parent class_ref 2966412 // Exception
      end

      attribute 11469580 "cause"
	private explicit_type "Throwable"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 13140236 "JSONException"
	public explicit_return_type ""
	nparams 1
	  param in name "message" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a JSONException with an explanatory message.
@param message Detail about the reason for the exception."
      end

      operation 13140364 "JSONException"
	public explicit_return_type ""
	nparams 1
	  param inout name "t" explicit_type "Throwable"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 13140492 "getCause"
	public explicit_return_type "Throwable"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 3122060 "JSONArray"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A JSONArray is an ordered sequence of values. Its external text form is a
string wrapped in square brackets with commas separating the values. The
internal form is an object having <code>get</code> and <code>opt</code>
methods for accessing the values by index, and <code>put</code> methods for
adding or replacing values. The values can be any of these types:
<code>Boolean</code>, <code>JSONArray</code>, <code>JSONObject</code>,
<code>Number</code>, <code>String</code>, or the
<code>JSONObject.NULL object</code>.
<p>
The constructor can convert a JSON text into a Java object. The
<code>toString</code> method converts to JSON text.
<p>
A <code>get</code> method returns a value if one can be found, and throws an
exception if one cannot be found. An <code>opt</code> method returns a
default value instead of throwing an exception, and so is useful for
obtaining optional values.
<p>
The generic <code>get()</code> and <code>opt()</code> methods return an
object which you can cast or query for type. There are also typed
<code>get</code> and <code>opt</code> methods that do type checking and type
coercion for you.
<p>
The texts produced by the <code>toString</code> methods strictly conform to
JSON syntax rules. The constructors are more forgiving in the texts they will
accept:
<ul>
<li>An extra <code>,</code>&nbsp;<small>(comma)</small> may appear just
    before the closing bracket.</li>
<li>The <code>null</code> value will be inserted when there
    is <code>,</code>&nbsp;<small>(comma)</small> elision.</li>
<li>Strings may be quoted with <code>'</code>&nbsp;<small>(single
    quote)</small>.</li>
<li>Strings do not need to be quoted at all if they do not begin with a quote
    or single quote, and if they do not contain leading or trailing spaces,
    and if they do not contain any of these characters:
    <code>{ } [ ] / \\ : , = ; #</code> and if they do not look like numbers
    and if they are not the reserved words <code>true</code>,
    <code>false</code>, or <code>null</code>.</li>
<li>Values can be separated by <code>;</code> <small>(semicolon)</small> as
    well as by <code>,</code> <small>(comma)</small>.</li>
<li>Numbers may have the <code>0-</code> <small>(octal)</small> or
    <code>0x-</code> <small>(hex)</small> prefix.</li>
</ul>

@author JSON.org
@version 2009-04-13"
      attribute 11469452 "myArrayList"
	private explicit_type "ArrayList"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The arrayList where the JSONArray's properties are kept.
"
      end

      operation 13133708 "JSONArray"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an empty JSONArray."
      end

      operation 13133836 "JSONArray"
	public explicit_return_type ""
	nparams 1
	  param inout name "x" type class_ref 3121804 // JSONTokener
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONArray from a JSONTokener.
@param x A JSONTokener
@throws JSONException If there is a syntax error."
      end

      operation 13133964 "JSONArray"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONArray from a source JSON text.
@param source     A string that begins with
<code>[</code>&nbsp;<small>(left bracket)</small>
 and ends with <code>]</code>&nbsp;<small>(right bracket)</small>.
 @throws JSONException If there is a syntax error."
      end

      operation 13134092 "JSONArray"
	public explicit_return_type ""
	nparams 1
	  param inout name "collection" explicit_type "Collection"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONArray from a Collection.
@param collection     A Collection."
      end

      operation 13134220 "JSONArray"
	public explicit_return_type ""
	nparams 2
	  param inout name "collection" explicit_type "Collection"
	  param inout name "includeSuperClass" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONArray from a collection of beans.
The collection should have Java Beans.

@throws JSONException If not an array."
      end

      operation 13134348 "JSONArray"
	public explicit_return_type ""
	nparams 1
	  param inout name "array" explicit_type "Object"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONArray from an array
@throws JSONException If not an array."
      end

      operation 13134476 "JSONArray"
	public explicit_return_type ""
	nparams 2
	  param inout name "array" explicit_type "Object"
	  param inout name "includeSuperClass" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONArray from an array with a bean.
The array should have Java Beans.

@throws JSONException If not an array."
      end

      operation 13134604 "get"
	public explicit_return_type "Object"
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the object value associated with an index.
@param index
 The index must be between 0 and length() - 1.
@return An object value.
@throws JSONException If there is no value for the index."
      end

      operation 13134732 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the boolean value associated with an index.
The string values \"true\" and \"false\" are converted to boolean.

@param index The index must be between 0 and length() - 1.
@return      The truth.
@throws JSONException If there is no value for the index or if the
 value is not convertable to boolean."
      end

      operation 13134860 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the double value associated with an index.

@param index The index must be between 0 and length() - 1.
@return      The value.
@throws   JSONException If the key is not found or if the value cannot
 be converted to a number."
      end

      operation 13134988 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the int value associated with an index.

@param index The index must be between 0 and length() - 1.
@return      The value.
@throws   JSONException If the key is not found or if the value cannot
 be converted to a number.
 if the value cannot be converted to a number."
      end

      operation 13135116 "getJSONArray"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the JSONArray associated with an index.
@param index The index must be between 0 and length() - 1.
@return      A JSONArray value.
@throws JSONException If there is no value for the index. or if the
value is not a JSONArray"
      end

      operation 13135244 "getJSONObject"
	public return_type class_ref 3122188 // JSONObject
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the JSONObject associated with an index.
@param index subscript
@return      A JSONObject value.
@throws JSONException If there is no value for the index or if the
value is not a JSONObject"
      end

      operation 13135372 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the long value associated with an index.

@param index The index must be between 0 and length() - 1.
@return      The value.
@throws   JSONException If the key is not found or if the value cannot
 be converted to a number."
      end

      operation 13135500 "getString"
	public explicit_return_type "String"
	nparams 1
	  param in name "index" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the string associated with an index.
@param index The index must be between 0 and length() - 1.
@return      A string value.
@throws JSONException If there is no value for the index."
      end

      operation 13135628 "isNull"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the value is null.
@param index The index must be between 0 and length() - 1.
@return true if the value at the index is null, or if there is no value."
      end

      operation 13135756 "join"
	public explicit_return_type "String"
	nparams 1
	  param in name "separator" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a string from the contents of this JSONArray. The
<code>separator</code> string is inserted between each element.
Warning: This method assumes that the data structure is acyclical.
@param separator A string that will be inserted between the elements.
@return a string.
@throws JSONException If the array contains an invalid number."
      end

      operation 13135884 "length"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the number of elements in the JSONArray, included nulls.

@return The length (or size)."
      end

      operation 13136012 "opt"
	public explicit_return_type "Object"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional object value associated with an index.
@param index The index must be between 0 and length() - 1.
@return      An object value, or null if there is no
             object at that index."
      end

      operation 13136140 "optBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional boolean value associated with an index.
It returns false if there is no value at that index,
or if the value is not Boolean.TRUE or the String \"true\".

@param index The index must be between 0 and length() - 1.
@return      The truth."
      end

      operation 13136268 "optBoolean"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "defaultValue" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional boolean value associated with an index.
It returns the defaultValue if there is no value at that index or if
it is not a Boolean or the String \"true\" or \"false\" (case insensitive).

@param index The index must be between 0 and length() - 1.
@param defaultValue     A boolean default.
@return      The truth."
      end

      operation 13136396 "optDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional double value associated with an index.
NaN is returned if there is no value for the index,
or if the value is not a number and cannot be converted to a number.

@param index The index must be between 0 and length() - 1.
@return      The value."
      end

      operation 13136524 "optDouble"
	public explicit_return_type "double"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "defaultValue" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional double value associated with an index.
The defaultValue is returned if there is no value for the index,
or if the value is not a number and cannot be converted to a number.

@param index subscript
@param defaultValue     The default value.
@return      The value."
      end

      operation 13136652 "optInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional int value associated with an index.
Zero is returned if there is no value for the index,
or if the value is not a number and cannot be converted to a number.

@param index The index must be between 0 and length() - 1.
@return      The value."
      end

      operation 13136780 "optInt"
	public explicit_return_type "int"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "defaultValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional int value associated with an index.
The defaultValue is returned if there is no value for the index,
or if the value is not a number and cannot be converted to a number.
@param index The index must be between 0 and length() - 1.
@param defaultValue     The default value.
@return      The value."
      end

      operation 13136908 "optJSONArray"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional JSONArray associated with an index.
@param index subscript
@return      A JSONArray value, or null if the index has no value,
or if the value is not a JSONArray."
      end

      operation 13137036 "optJSONObject"
	public return_type class_ref 3122188 // JSONObject
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional JSONObject associated with an index.
Null is returned if the key is not found, or null if the index has
no value, or if the value is not a JSONObject.

@param index The index must be between 0 and length() - 1.
@return      A JSONObject value."
      end

      operation 13137164 "optLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional long value associated with an index.
Zero is returned if there is no value for the index,
or if the value is not a number and cannot be converted to a number.

@param index The index must be between 0 and length() - 1.
@return      The value."
      end

      operation 13137292 "optLong"
	public explicit_return_type "long"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "defaultValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional long value associated with an index.
The defaultValue is returned if there is no value for the index,
or if the value is not a number and cannot be converted to a number.
@param index The index must be between 0 and length() - 1.
@param defaultValue     The default value.
@return      The value."
      end

      operation 13137420 "optString"
	public explicit_return_type "String"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional string value associated with an index. It returns an
empty string if there is no value at that index. If the value
is not a string and is not null, then it is coverted to a string.

@param index The index must be between 0 and length() - 1.
@return      A String value."
      end

      operation 13137548 "optString"
	public explicit_return_type "String"
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "defaultValue" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the optional string associated with an index.
The defaultValue is returned if the key is not found.

@param index The index must be between 0 and length() - 1.
@param defaultValue     The default value.
@return      A String value."
      end

      operation 13137676 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a boolean value. This increases the array's length by one.

@param value A boolean value.
@return this."
      end

      operation 13137804 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param inout name "value" explicit_type "Collection"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a value in the JSONArray, where the value will be a
JSONArray which is produced from a Collection.
@param value A Collection value.
@return      this."
      end

      operation 13137932 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param in name "value" explicit_type "double"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a double value. This increases the array's length by one.

@param value A double value.
@throws JSONException if the value is not finite.
@return this."
      end

      operation 13138060 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param in name "value" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append an int value. This increases the array's length by one.

@param value An int value.
@return this."
      end

      operation 13138188 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param in name "value" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append an long value. This increases the array's length by one.

@param value A long value.
@return this."
      end

      operation 13138316 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param inout name "value" explicit_type "Map"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a value in the JSONArray, where the value will be a
JSONObject which is produced from a Map.
@param value A Map value.
@return      this."
      end

      operation 13138444 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param inout name "value" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append an object value. This increases the array's length by one.
@param value An object value.  The value should be a
 Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the
 JSONObject.NULL object.
@return this."
      end

      operation 13138572 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put or replace a boolean value in the JSONArray. If the index is greater
than the length of the JSONArray, then null elements will be added as
necessary to pad it out.
@param index The subscript.
@param value A boolean value.
@return this.
@throws JSONException If the index is negative."
      end

      operation 13138700 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "Collection"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a value in the JSONArray, where the value will be a
JSONArray which is produced from a Collection.
@param index The subscript.
@param value A Collection value.
@return      this.
@throws JSONException If the index is negative or if the value is
not finite."
      end

      operation 13138828 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "double"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put or replace a double value. If the index is greater than the length of
 the JSONArray, then null elements will be added as necessary to pad
 it out.
@param index The subscript.
@param value A double value.
@return this.
@throws JSONException If the index is negative or if the value is
not finite."
      end

      operation 13138956 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put or replace an int value. If the index is greater than the length of
 the JSONArray, then null elements will be added as necessary to pad
 it out.
@param index The subscript.
@param value An int value.
@return this.
@throws JSONException If the index is negative."
      end

      operation 13139084 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 2
	  param in name "index" explicit_type "int"
	  param in name "value" explicit_type "long"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put or replace a long value. If the index is greater than the length of
 the JSONArray, then null elements will be added as necessary to pad
 it out.
@param index The subscript.
@param value A long value.
@return this.
@throws JSONException If the index is negative."
      end

      operation 13139212 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "Map"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a value in the JSONArray, where the value will be a
JSONObject which is produced from a Map.
@param index The subscript.
@param value The Map value.
@return      this.
@throws JSONException If the index is negative or if the the value is
 an invalid number."
      end

      operation 13139340 "put"
	public return_type class_ref 3122060 // JSONArray
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "value" explicit_type "Object"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put or replace an object value in the JSONArray. If the index is greater
 than the length of the JSONArray, then null elements will be added as
 necessary to pad it out.
@param index The subscript.
@param value The value to put into the array. The value should be a
 Boolean, Double, Integer, JSONArray, JSONObject, Long, or String, or the
 JSONObject.NULL object.
@return this.
@throws JSONException If the index is negative or if the the value is
 an invalid number."
      end

      operation 13139468 "remove"
	public explicit_return_type "Object"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a index and close the hole.
@param index The index of the element to be removed.
@return The value that was associated with the index,
or null if there was no value."
      end

      operation 13139596 "toJSONObject"
	public return_type class_ref 3122188 // JSONObject
	nparams 1
	  param inout name "names" type class_ref 3122060 // JSONArray
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a JSONObject by combining a JSONArray of names with the values
of this JSONArray.
@param names A JSONArray containing a list of key strings. These will be
paired with the values.
@return A JSONObject, or null if there are no names or if this JSONArray
has no values.
@throws JSONException If any of the names are null."
      end

      operation 13139724 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a JSON text of this JSONArray. For compactness, no
unnecessary whitespace is added. If it is not possible to produce a
syntactically correct JSON text then null will be returned instead. This
could occur if the array contains an invalid number.
<p>
Warning: This method assumes that the data structure is acyclical.

@return a printable, displayable, transmittable
 representation of the array."
      end

      operation 13139852 "toString"
	public explicit_return_type "String"
	nparams 1
	  param in name "indentFactor" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a prettyprinted JSON text of this JSONArray.
Warning: This method assumes that the data structure is acyclical.
@param indentFactor The number of spaces to add to each level of
 indentation.
@return a printable, displayable, transmittable
 representation of the object, beginning
 with <code>[</code>&nbsp;<small>(left bracket)</small> and ending
 with <code>]</code>&nbsp;<small>(right bracket)</small>.
@throws JSONException"
      end

      operation 13139980 "toString"
	package explicit_return_type "String"
	nparams 2
	  param in name "indentFactor" explicit_type "int"
	  param in name "indent" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a prettyprinted JSON text of this JSONArray.
Warning: This method assumes that the data structure is acyclical.
@param indentFactor The number of spaces to add to each level of
 indentation.
@param indent The indention of the top level.
@return a printable, displayable, transmittable
 representation of the array.
@throws JSONException"
      end

      operation 13140108 "write"
	public explicit_return_type "Writer"
	nparams 1
	  param inout name "writer" explicit_type "Writer"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the contents of the JSONArray as JSON text to a writer.
For compactness, no whitespace is added.
<p>
Warning: This method assumes that the data structure is acyclical.

@return The writer.
@throws JSONException"
      end
    end

    class 3122188 "JSONObject"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A JSONObject is an unordered collection of name/value pairs. Its
external form is a string wrapped in curly braces with colons between the
names and values, and commas between the values and names. The internal form
is an object having <code>get</code> and <code>opt</code> methods for
accessing the values by name, and <code>put</code> methods for adding or
replacing values by name. The values can be any of these types:
<code>Boolean</code>, <code>JSONArray</code>, <code>JSONObject</code>,
<code>Number</code>, <code>String</code>, or the <code>JSONObject.NULL</code>
object. A JSONObject constructor can be used to convert an external form
JSON text into an internal form whose values can be retrieved with the
<code>get</code> and <code>opt</code> methods, or to convert values into a
JSON text using the <code>put</code> and <code>toString</code> methods.
A <code>get</code> method returns a value if one can be found, and throws an
exception if one cannot be found. An <code>opt</code> method returns a
default value instead of throwing an exception, and so is useful for
obtaining optional values.
<p>
The generic <code>get()</code> and <code>opt()</code> methods return an
object, which you can cast or query for type. There are also typed
<code>get</code> and <code>opt</code> methods that do type checking and type
coercion for you.
<p>
The <code>put</code> methods adds values to an object. For example, <pre>
    myString = new JSONObject().put(\"JSON\", \"Hello, World!\").toString();</pre>
produces the string <code>{\"JSON\": \"Hello, World\"}</code>.
<p>
The texts produced by the <code>toString</code> methods strictly conform to
the JSON syntax rules.
The constructors are more forgiving in the texts they will accept:
<ul>
<li>An extra <code>,</code>&nbsp;<small>(comma)</small> may appear just
    before the closing brace.</li>
<li>Strings may be quoted with <code>'</code>&nbsp;<small>(single
    quote)</small>.</li>
<li>Strings do not need to be quoted at all if they do not begin with a quote
    or single quote, and if they do not contain leading or trailing spaces,
    and if they do not contain any of these characters:
    <code>{ } [ ] / \\ : , = ; #</code> and if they do not look like numbers
    and if they are not the reserved words <code>true</code>,
    <code>false</code>, or <code>null</code>.</li>
<li>Keys can be followed by <code>=</code> or <code>=></code> as well as
    by <code>:</code>.</li>
<li>Values can be followed by <code>;</code> <small>(semicolon)</small> as
    well as by <code>,</code> <small>(comma)</small>.</li>
<li>Numbers may have the <code>0-</code> <small>(octal)</small> or
    <code>0x-</code> <small>(hex)</small> prefix.</li>
</ul>
@author JSON.org
@version 2009-03-06"
      class 3123084 "Null"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 13141516 "clone"
	  protected explicit_return_type "Object"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "There is only intended to be a single instance of the NULL object,
so the clone method returns itself.
@return     NULL."
	end

	operation 13141644 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "object" explicit_type "Object"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "A Null object is equal to the null value and to itself.
@param object    An object to test for nullness.
@return true if the object parameter is the JSONObject.NULL object
 or null."
	end

	operation 13141772 "toString"
	  public explicit_return_type "String"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Get the \"null\" string value.
@return The string \"null\"."
	end
      end

      attribute 11469708 "map"
	private explicit_type "Map"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The map where the JSONObject's properties are kept.
"
      end

      attribute 11469836 "NULL"
	class_attribute const_attribute public explicit_type "Object"
	init_value " new Null()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "It is sometimes more convenient and less ambiguous to have a
<code>NULL</code> object than to use Java's <code>null</code> value.
<code>JSONObject.NULL.equals(null)</code> returns <code>true</code>.
<code>JSONObject.NULL.toString()</code> returns <code>\"null\"</code>.
"
      end

      operation 13141900 "JSONObject"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an empty JSONObject."
      end

      operation 13142028 "JSONObject"
	public explicit_return_type ""
	nparams 2
	  param inout name "jo" type class_ref 3122188 // JSONObject
	  param inout name "names" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONObject from a subset of another JSONObject.
An array of strings is used to identify the keys that should be copied.
Missing keys are ignored.
@param jo A JSONObject.
@param names An array of strings.
@exception JSONException If a value is a non-finite number or if a name is duplicated."
      end

      operation 13142156 "JSONObject"
	public explicit_return_type ""
	nparams 1
	  param inout name "x" type class_ref 3121804 // JSONTokener
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONObject from a JSONTokener.
@param x A JSONTokener object containing the source string.
@throws JSONException If there is a syntax error in the source string
 or a duplicated key."
      end

      operation 13142284 "JSONObject"
	public explicit_return_type ""
	nparams 1
	  param inout name "map" explicit_type "Map"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONObject from a Map.

@param map A map object that can be used to initialize the contents of
 the JSONObject."
      end

      operation 13142412 "JSONObject"
	public explicit_return_type ""
	nparams 2
	  param inout name "map" explicit_type "Map"
	  param inout name "includeSuperClass" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONObject from a Map.

Note: Use this constructor when the map contains <key,bean>.

@param map - A map with Key-Bean data.
@param includeSuperClass - Tell whether to include the super class properties."
      end

      operation 13142540 "JSONObject"
	public explicit_return_type ""
	nparams 1
	  param inout name "bean" explicit_type "Object"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONObject from an Object using bean getters.
It reflects on all of the public methods of the object.
For each of the methods with no parameters and a name starting
with <code>\"get\"</code> or <code>\"is\"</code> followed by an uppercase letter,
the method is invoked, and a key and the value returned from the getter method
are put into the new JSONObject.

The key is formed by removing the <code>\"get\"</code> or <code>\"is\"</code> prefix.
If the second remaining character is not upper case, then the first
character is converted to lower case.

For example, if an object has a method named <code>\"getName\"</code>, and
if the result of calling <code>object.getName()</code> is <code>\"Larry Fine\"</code>,
then the JSONObject will contain <code>\"name\": \"Larry Fine\"</code>.

@param bean An object that has getter methods that should be used
to make a JSONObject."
      end

      operation 13142668 "JSONObject"
	public explicit_return_type ""
	nparams 2
	  param inout name "bean" explicit_type "Object"
	  param inout name "includeSuperClass" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONObject from an Object using bean getters.
It reflects on all of the public methods of the object.
For each of the methods with no parameters and a name starting
with <code>\"get\"</code> or <code>\"is\"</code> followed by an uppercase letter,
the method is invoked, and a key and the value returned from the getter method
are put into the new JSONObject.

The key is formed by removing the <code>\"get\"</code> or <code>\"is\"</code> prefix.
If the second remaining character is not upper case, then the first
character is converted to lower case.

@param bean An object that has getter methods that should be used
to make a JSONObject.
@param includeSuperClass If true, include the super class properties."
      end

      operation 13142796 "populateInternalMap"
	private explicit_return_type "void"
	nparams 2
	  param inout name "bean" explicit_type "Object"
	  param inout name "includeSuperClass" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 13142924 "isStandardProperty"
	class_operation package explicit_return_type "boolean"
	nparams 1
	  param inout name "clazz" explicit_type "Class"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 13143052 "JSONObject"
	public explicit_return_type ""
	nparams 2
	  param inout name "object" explicit_type "Object"
	  param inout name "names" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONObject from an Object, using reflection to find the
public members. The resulting JSONObject's keys will be the strings
from the names array, and the values will be the field values associated
with those keys in the object. If a key is not found or not visible,
then it will not be copied into the new JSONObject.
@param object An object that has fields that should be used to make a
JSONObject.
@param names An array of strings, the names of the fields to be obtained
from the object."
      end

      operation 13143180 "JSONObject"
	public explicit_return_type ""
	nparams 1
	  param in name "source" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct a JSONObject from a source JSON text string.
This is the most commonly used JSONObject constructor.
@param source    A string beginning
 with <code>{</code>&nbsp;<small>(left brace)</small> and ending
 with <code>}</code>&nbsp;<small>(right brace)</small>.
@exception JSONException If there is a syntax error in the source
 string or a duplicated key."
      end

      operation 13143308 "accumulate"
	public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param in name "key" explicit_type "String"
	  param inout name "value" explicit_type "Object"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accumulate values under a key. It is similar to the put method except
that if there is already an object stored under the key then a
JSONArray is stored under the key to hold all of the accumulated values.
If there is already a JSONArray, then the new value is appended to it.
In contrast, the put method replaces the previous value.
@param key   A key string.
@param value An object to be accumulated under the key.
@return this.
@throws JSONException If the value is an invalid number
 or if the key is null."
      end

      operation 13143436 "append"
	public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param in name "key" explicit_type "String"
	  param inout name "value" explicit_type "Object"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append values to the array under a key. If the key does not exist in the
JSONObject, then the key is put in the JSONObject with its value being a
JSONArray containing the value parameter. If the key was already
associated with a JSONArray, then the value parameter is appended to it.
@param key   A key string.
@param value An object to be accumulated under the key.
@return this.
@throws JSONException If the key is null or if the current value
 associated with the key is not a JSONArray."
      end

      operation 13143564 "doubleToString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a string from a double. The string \"null\" will be returned if
the number is not finite.
@param  d A double.
@return A String."
      end

      operation 13143692 "get"
	public explicit_return_type "Object"
	nparams 1
	  param in name "key" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the value object associated with a key.

@param key   A key string.
@return      The object associated with the key.
@throws   JSONException if the key is not found."
      end

      operation 13143820 "getBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "key" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the boolean value associated with a key.

@param key   A key string.
@return      The truth.
@throws   JSONException
 if the value is not a Boolean or the String \"true\" or \"false\"."
      end

      operation 13143948 "getDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "key" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the double value associated with a key.
@param key   A key string.
@return      The numeric value.
@throws JSONException if the key is not found or
 if the value is not a Number object and cannot be converted to a number."
      end

      operation 13144076 "getInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "key" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the int value associated with a key. If the number value is too
large for an int, it will be clipped.

@param key   A key string.
@return      The integer value.
@throws   JSONException if the key is not found or if the value cannot
 be converted to an integer."
      end

      operation 13144204 "getJSONArray"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param in name "key" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the JSONArray value associated with a key.

@param key   A key string.
@return      A JSONArray which is the value.
@throws   JSONException if the key is not found or
 if the value is not a JSONArray."
      end

      operation 13144332 "getJSONObject"
	public return_type class_ref 3122188 // JSONObject
	nparams 1
	  param in name "key" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the JSONObject value associated with a key.

@param key   A key string.
@return      A JSONObject which is the value.
@throws   JSONException if the key is not found or
 if the value is not a JSONObject."
      end

      operation 13144460 "getLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "key" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the long value associated with a key. If the number value is too
long for a long, it will be clipped.

@param key   A key string.
@return      The long value.
@throws   JSONException if the key is not found or if the value cannot
 be converted to a long."
      end

      operation 13144588 "getNames"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "jo" type class_ref 3122188 // JSONObject
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an array of field names from a JSONObject.

@return An array of field names, or null if there are no names."
      end

      operation 13144716 "getNames"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "object" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an array of field names from an Object.

@return An array of field names, or null if there are no names."
      end

      operation 13144844 "getString"
	public explicit_return_type "String"
	nparams 1
	  param in name "key" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the string associated with a key.

@param key   A key string.
@return      A string which is the value.
@throws   JSONException if the key is not found."
      end

      operation 13144972 "has"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the JSONObject contains a specific key.
@param key   A key string.
@return      true if the key exists in the JSONObject."
      end

      operation 13145100 "isNull"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determine if the value associated with the key is null or if there is
 no value.
@param key   A key string.
@return      true if there is no value associated with the key or if
 the value is the JSONObject.NULL object."
      end

      operation 13145228 "keys"
	public explicit_return_type "Iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an enumeration of the keys of the JSONObject.

@return An iterator of the keys."
      end

      operation 13145356 "length"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the number of keys stored in the JSONObject.

@return The number of keys in the JSONObject."
      end

      operation 13145484 "names"
	public return_type class_ref 3122060 // JSONArray
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a JSONArray containing the names of the elements of this
JSONObject.
@return A JSONArray containing the key strings, or null if the JSONObject
is empty."
      end

      operation 13145612 "numberToString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "n" explicit_type "Number"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a string from a Number.
@param  n A Number
@return A String.
@throws JSONException If n is a non-finite number."
      end

      operation 13145740 "opt"
	public explicit_return_type "Object"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional value associated with a key.
@param key   A key string.
@return      An object which is the value, or null if there is no value."
      end

      operation 13145868 "optBoolean"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional boolean associated with a key.
It returns false if there is no such key, or if the value is not
Boolean.TRUE or the String \"true\".

@param key   A key string.
@return      The truth."
      end

      operation 13145996 "optBoolean"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "key" explicit_type "String"
	  param inout name "defaultValue" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional boolean associated with a key.
It returns the defaultValue if there is no such key, or if it is not
a Boolean or the String \"true\" or \"false\" (case insensitive).

@param key              A key string.
@param defaultValue     The default.
@return      The truth."
      end

      operation 13146124 "put"
	public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param in name "key" explicit_type "String"
	  param inout name "value" explicit_type "Collection"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a key/value pair in the JSONObject, where the value will be a
JSONArray which is produced from a Collection.
@param key   A key string.
@param value A Collection value.
@return      this.
@throws JSONException"
      end

      operation 13146252 "optDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional double associated with a key,
or NaN if there is no such key or if its value is not a number.
If the value is a string, an attempt will be made to evaluate it as
a number.

@param key   A string which is the key.
@return      An object which is the value."
      end

      operation 13146380 "optDouble"
	public explicit_return_type "double"
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "defaultValue" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional double associated with a key, or the
defaultValue if there is no such key or if its value is not a number.
If the value is a string, an attempt will be made to evaluate it as
a number.

@param key   A key string.
@param defaultValue     The default.
@return      An object which is the value."
      end

      operation 13146508 "optInt"
	public explicit_return_type "int"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional int value associated with a key,
or zero if there is no such key or if the value is not a number.
If the value is a string, an attempt will be made to evaluate it as
a number.

@param key   A key string.
@return      An object which is the value."
      end

      operation 13146636 "optInt"
	public explicit_return_type "int"
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "defaultValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional int value associated with a key,
or the default if there is no such key or if the value is not a number.
If the value is a string, an attempt will be made to evaluate it as
a number.

@param key   A key string.
@param defaultValue     The default.
@return      An object which is the value."
      end

      operation 13146764 "optJSONArray"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional JSONArray associated with a key.
It returns null if there is no such key, or if its value is not a
JSONArray.

@param key   A key string.
@return      A JSONArray which is the value."
      end

      operation 13146892 "optJSONObject"
	public return_type class_ref 3122188 // JSONObject
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional JSONObject associated with a key.
It returns null if there is no such key, or if its value is not a
JSONObject.

@param key   A key string.
@return      A JSONObject which is the value."
      end

      operation 13147020 "optLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional long value associated with a key,
or zero if there is no such key or if the value is not a number.
If the value is a string, an attempt will be made to evaluate it as
a number.

@param key   A key string.
@return      An object which is the value."
      end

      operation 13147148 "optLong"
	public explicit_return_type "long"
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "defaultValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional long value associated with a key,
or the default if there is no such key or if the value is not a number.
If the value is a string, an attempt will be made to evaluate it as
a number.

@param key   A key string.
@param defaultValue     The default.
@return      An object which is the value."
      end

      operation 13147276 "optString"
	public explicit_return_type "String"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional string associated with a key.
It returns an empty string if there is no such key. If the value is not
a string and is not null, then it is coverted to a string.

@param key   A key string.
@return      A string which is the value."
      end

      operation 13147404 "optString"
	public explicit_return_type "String"
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "defaultValue" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an optional string associated with a key.
It returns the defaultValue if there is no such key.

@param key   A key string.
@param defaultValue     The default.
@return      A string which is the value."
      end

      operation 13147532 "put"
	public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param in name "key" explicit_type "String"
	  param inout name "value" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a key/boolean pair in the JSONObject.

@param key   A key string.
@param value A boolean which is the value.
@return this.
@throws JSONException If the key is null."
      end

      operation 13147660 "put"
	public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "value" explicit_type "double"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a key/double pair in the JSONObject.

@param key   A key string.
@param value A double which is the value.
@return this.
@throws JSONException If the key is null or if the number is invalid."
      end

      operation 13147788 "put"
	public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "value" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a key/int pair in the JSONObject.

@param key   A key string.
@param value An int which is the value.
@return this.
@throws JSONException If the key is null."
      end

      operation 13147916 "put"
	public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param in name "key" explicit_type "String"
	  param in name "value" explicit_type "long"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a key/long pair in the JSONObject.

@param key   A key string.
@param value A long which is the value.
@return this.
@throws JSONException If the key is null."
      end

      operation 13148044 "put"
	public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param in name "key" explicit_type "String"
	  param inout name "value" explicit_type "Map"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a key/value pair in the JSONObject, where the value will be a
JSONObject which is produced from a Map.
@param key   A key string.
@param value A Map value.
@return      this.
@throws JSONException"
      end

      operation 13148172 "put"
	public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param in name "key" explicit_type "String"
	  param inout name "value" explicit_type "Object"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a key/value pair in the JSONObject. If the value is null,
then the key will be removed from the JSONObject if it is present.
@param key   A key string.
@param value An object which is the value. It should be of one of these
 types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String,
 or the JSONObject.NULL object.
@return this.
@throws JSONException If the value is non-finite number
 or if the key is null."
      end

      operation 13148300 "putOnce"
	public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param in name "key" explicit_type "String"
	  param inout name "value" explicit_type "Object"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a key/value pair in the JSONObject, but only if the key and the
value are both non-null, and only if there is not already a member
with that name.
@param key
@param value
@return his.
@throws JSONException if the key is a duplicate"
      end

      operation 13148428 "putOpt"
	public return_type class_ref 3122188 // JSONObject
	nparams 2
	  param in name "key" explicit_type "String"
	  param inout name "value" explicit_type "Object"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Put a key/value pair in the JSONObject, but only if the
key and the value are both non-null.
@param key   A key string.
@param value An object which is the value. It should be of one of these
 types: Boolean, Double, Integer, JSONArray, JSONObject, Long, String,
 or the JSONObject.NULL object.
@return this.
@throws JSONException If the value is a non-finite number."
      end

      operation 13148556 "quote"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "string" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a string in double quotes with backslash sequences in all the
right places. A backslash will be inserted within </, allowing JSON
text to be delivered in HTML. In JSON text, a string cannot contain a
control character or an unescaped quote or backslash.
@param string A String
@return  A String correctly formatted for insertion in a JSON text."
      end

      operation 13148684 "remove"
	public explicit_return_type "Object"
	nparams 1
	  param in name "key" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Remove a name and its value, if present.
@param key The name to be removed.
@return The value that was associated with the name,
or null if there was no value."
      end

      operation 13148812 "sortedKeys"
	public explicit_return_type "Iterator"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get an enumeration of the keys of the JSONObject.
The keys will be sorted alphabetically.

@return An iterator of the keys."
      end

      operation 13148940 "stringToValue"
	class_operation public explicit_return_type "Object"
	nparams 1
	  param in name "s" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Try to convert a string into a number, boolean, or null. If the string
can't be converted, return the string.
@param s A String.
@return A simple JSON value."
      end

      operation 13149068 "testValidity"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "Object"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throw an exception if the object is an NaN or infinite number.
@param o The object to test.
@throws JSONException If o is a non-finite number."
      end

      operation 13149196 "toJSONArray"
	public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param inout name "names" type class_ref 3122060 // JSONArray
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a JSONArray containing the values of the members of this
JSONObject.
@param names A JSONArray containing a list of key strings. This
determines the sequence of the values in the result.
@return A JSONArray of values.
@throws JSONException If any of the values are non-finite numbers."
      end

      operation 13149324 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a JSON text of this JSONObject. For compactness, no whitespace
is added. If this would not result in a syntactically correct JSON text,
then null will be returned instead.
<p>
Warning: This method assumes that the data structure is acyclical.

@return a printable, displayable, portable, transmittable
 representation of the object, beginning
 with <code>{</code>&nbsp;<small>(left brace)</small> and ending
 with <code>}</code>&nbsp;<small>(right brace)</small>."
      end

      operation 13149452 "toString"
	public explicit_return_type "String"
	nparams 1
	  param in name "indentFactor" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a prettyprinted JSON text of this JSONObject.
<p>
Warning: This method assumes that the data structure is acyclical.
@param indentFactor The number of spaces to add to each level of
 indentation.
@return a printable, displayable, portable, transmittable
 representation of the object, beginning
 with <code>{</code>&nbsp;<small>(left brace)</small> and ending
 with <code>}</code>&nbsp;<small>(right brace)</small>.
@throws JSONException If the object contains an invalid number."
      end

      operation 13149580 "toString"
	package explicit_return_type "String"
	nparams 2
	  param in name "indentFactor" explicit_type "int"
	  param in name "indent" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a prettyprinted JSON text of this JSONObject.
<p>
Warning: This method assumes that the data structure is acyclical.
@param indentFactor The number of spaces to add to each level of
 indentation.
@param indent The indentation of the top level.
@return a printable, displayable, transmittable
 representation of the object, beginning
 with <code>{</code>&nbsp;<small>(left brace)</small> and ending
 with <code>}</code>&nbsp;<small>(right brace)</small>.
@throws JSONException If the object contains an invalid number."
      end

      operation 13149708 "valueToString"
	class_operation package explicit_return_type "String"
	nparams 1
	  param inout name "value" explicit_type "Object"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a JSON text of an Object value. If the object has an
value.toJSONString() method, then that method will be used to produce
the JSON text. The method is required to produce a strictly
conforming text. If the object does not contain a toJSONString
method (which is the most common case), then a text will be
produced by other means. If the value is an array or Collection,
then a JSONArray will be made from it and its toJSONString method
will be called. If the value is a MAP, then a JSONObject will be made
from it and its toJSONString method will be called. Otherwise, the
value's toString method will be called, and the result will be quoted.

<p>
Warning: This method assumes that the data structure is acyclical.
@param value The value to be serialized.
@return a printable, displayable, transmittable
 representation of the object, beginning
 with <code>{</code>&nbsp;<small>(left brace)</small> and ending
 with <code>}</code>&nbsp;<small>(right brace)</small>.
@throws JSONException If the value is or contains an invalid number."
      end

      operation 13149836 "valueToString"
	class_operation package explicit_return_type "String"
	nparams 3
	  param inout name "value" explicit_type "Object"
	  param in name "indentFactor" explicit_type "int"
	  param in name "indent" explicit_type "int"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a prettyprinted JSON text of an object value.
<p>
Warning: This method assumes that the data structure is acyclical.
@param value The value to be serialized.
@param indentFactor The number of spaces to add to each level of
 indentation.
@param indent The indentation of the top level.
@return a printable, displayable, transmittable
 representation of the object, beginning
 with <code>{</code>&nbsp;<small>(left brace)</small> and ending
 with <code>}</code>&nbsp;<small>(right brace)</small>.
@throws JSONException If the object contains an invalid number."
      end

      operation 13149964 "write"
	public explicit_return_type "Writer"
	nparams 1
	  param inout name "writer" explicit_type "Writer"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Write the contents of the JSONObject as JSON text to a writer.
For compactness, no whitespace is added.
<p>
Warning: This method assumes that the data structure is acyclical.

@return The writer.
@throws JSONException"
      end
    end

    class 3122316 "Cookie"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Copyright (c) 2002 JSON.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

The Software shall be used for Good, not Evil.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


Convert a web browser cookie specification to a JSONObject and back.
JSON and Cookies are both notations for name/value pairs.
@author JSON.org
@version 2008-09-18"
      operation 13130380 "escape"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "string" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Produce a copy of a string in which the characters '+', '%', '=', ';'
and control characters are replaced with \"%hh\". This is a gentle form
of URL encoding, attempting to cause as little distortion to the
string as possible. The characters '=' and ';' are meta characters in
cookies. By convention, they are escaped using the URL-encoding. This is
only a convention, not a standard. Often, cookies are expected to have
encoded values. We encode '=' and ';' because we must. We encode '%' and
'+' because they are meta characters in URL encoding.
@param string The source string.
@return       The escaped result."
      end

      operation 13130508 "toJSONObject"
	class_operation public return_type class_ref 3122188 // JSONObject
	nparams 1
	  param in name "string" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a cookie specification string into a JSONObject. The string
will contain a name value pair separated by '='. The name and the value
will be unescaped, possibly converting '+' and '%' sequences. The
cookie properties may follow, separated by ';', also represented as
name=value (except the secure property, which does not have a value).
The name will be stored under the key \"name\", and the value will be
stored under the key \"value\". This method does not do checking or
validation of the parameters. It only converts the cookie string into
a JSONObject.
@param string The cookie specification string.
@return A JSONObject containing \"name\", \"value\", and possibly other
 members.
@throws JSONException"
      end

      operation 13130636 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "o" type class_ref 3122188 // JSONObject
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a JSONObject into a cookie specification string. The JSONObject
must contain \"name\" and \"value\" members.
If the JSONObject contains \"expires\", \"domain\", \"path\", or \"secure\"
members, they will be appended to the cookie specification string.
All other members are ignored.
@param o A JSONObject
@return A cookie specification string
@throws JSONException"
      end

      operation 13130764 "unescape"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "s" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert <code>%</code><i>hh</i> sequences to single characters, and
convert plus to space.
@param s A string that may contain
     <code>+</code>&nbsp;<small>(plus)</small> and
     <code>%</code><i>hh</i> sequences.
@return The unescaped string."
      end
    end

    class 3122444 "CookieList"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Convert a web browser cookie list string to a JSONObject and back.
@author JSON.org
@version 2008-09-18"
      operation 13130892 "toJSONObject"
	class_operation public return_type class_ref 3122188 // JSONObject
	nparams 1
	  param in name "string" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a cookie list into a JSONObject. A cookie list is a sequence
of name/value pairs. The names are separated from the values by '='.
The pairs are separated by ';'. The names and the values
will be unescaped, possibly converting '+' and '%' sequences.

To add a cookie to a cooklist,
cookielistJSONObject.put(cookieJSONObject.getString(\"name\"),
    cookieJSONObject.getString(\"value\"));
@param string  A cookie list string
@return A JSONObject
@throws JSONException"
      end

      operation 13131020 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "o" type class_ref 3122188 // JSONObject
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a JSONObject into a cookie list. A cookie list is a sequence
of name/value pairs. The names are separated from the values by '='.
The pairs are separated by ';'. The characters '%', '+', '=', and ';'
in the names and values are replaced by \"%hh\".
@param o A JSONObject
@return A cookie list string
@throws JSONException"
      end
    end

    class 3122572 "HTTP"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Convert an HTTP header to a JSONObject and back.
@author JSON.org
@version 2008-09-18"
      attribute 11468812 "CRLF"
	class_attribute const_attribute public explicit_type "String"
	init_value " \"\\r\\n\""
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Carriage return/line feed. "
      end

      operation 13131148 "toJSONObject"
	class_operation public return_type class_ref 3122188 // JSONObject
	nparams 1
	  param in name "string" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert an HTTP header string into a JSONObject. It can be a request
header or a response header. A request header will contain
<pre>{
   Method: \"POST\" (for example),
   \"Request-URI\": \"/\" (for example),
   \"HTTP-Version\": \"HTTP/1.1\" (for example)
}</pre>
A response header will contain
<pre>{
   \"HTTP-Version\": \"HTTP/1.1\" (for example),
   \"Status-Code\": \"200\" (for example),
   \"Reason-Phrase\": \"OK\" (for example)
}</pre>
In addition, the other parameters in the header will be captured, using
the HTTP field names as JSON names, so that <pre>
   Date: Sun, 26 May 2002 18:06:04 GMT
   Cookie: Q=q2=PPEAsg--; B=677gi6ouf29bn&b=2&f=s
   Cache-Control: no-cache</pre>
become
<pre>{...
   Date: \"Sun, 26 May 2002 18:06:04 GMT\",
   Cookie: \"Q=q2=PPEAsg--; B=677gi6ouf29bn&b=2&f=s\",
   \"Cache-Control\": \"no-cache\",
...}</pre>
It does no further checking or conversion. It does not parse dates.
It does not do '%' transforms on URLs.
@param string An HTTP header string.
@return A JSONObject containing the elements and attributes
of the XML string.
@throws JSONException"
      end

      operation 13131276 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "o" type class_ref 3122188 // JSONObject
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a JSONObject into an HTTP header. A request header must contain
<pre>{
   Method: \"POST\" (for example),
   \"Request-URI\": \"/\" (for example),
   \"HTTP-Version\": \"HTTP/1.1\" (for example)
}</pre>
A response header must contain
<pre>{
   \"HTTP-Version\": \"HTTP/1.1\" (for example),
   \"Status-Code\": \"200\" (for example),
   \"Reason-Phrase\": \"OK\" (for example)
}</pre>
Any other members of the JSONObject will be output as HTTP fields.
The result will end with two CRLF pairs.
@param o A JSONObject
@return An HTTP header string.
@throws JSONException if the object does not contain enough
 information."
      end
    end

    class 3122700 "HTTPTokener"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Copyright (c) 2002 JSON.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

The Software shall be used for Good, not Evil.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


The HTTPTokener extends the JSONTokener to provide additional methods
for the parsing of HTTP headers.
@author JSON.org
@version 2008-09-18"
      classrelation 5767308 // <generalisation>
	relation 5767180 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5767308 // <generalisation>
	  b parent class_ref 3121804 // JSONTokener
      end

      operation 13133452 "HTTPTokener"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an HTTPTokener from a string.
@param s A source string."
      end

      operation 13133580 "nextToken"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next token or string. This is used in parsing HTTP headers.
@throws JSONException
@return A String."
      end
    end

    class 3122828 "JSONML"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This provides static methods to convert an XML text into a JSONArray or 
JSONObject, and to covert a JSONArray or JSONObject into an XML text using 
the JsonML transform.
@author JSON.org
@version 2008-11-20"
      operation 13140620 "parse"
	class_operation private explicit_return_type "Object"
	nparams 3
	  param inout name "x" type class_ref 3122956 // XMLTokener
	  param inout name "arrayForm" explicit_type "boolean"
	  param inout name "ja" type class_ref 3122060 // JSONArray
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Parse XML values and store them in a JSONArray.
@param x       The XMLTokener containing the source string.
@param arrayForm true if array form, false if object form.
@param ja      The JSONArray that is containing the current tag or null
    if we are at the outermost level.
@return A JSONArray if the value is the outermost tag, otherwise null.
@throws JSONException"
      end

      operation 13140748 "toJSONArray"
	class_operation public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param in name "string" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a well-formed (but not necessarily valid) XML string into a
JSONArray using the JsonML transform. Each XML tag is represented as
a JSONArray in which the first element is the tag name. If the tag has
attributes, then the second element will be JSONObject containing the
name/value pairs. If the tag contains children, then strings and
JSONArrays will represent the child tags.
Comments, prologs, DTDs, and <code>&lt;[ [ ]]></code> are ignored.
@param string The source string.
@return A JSONArray containing the structured data from the XML string.
@throws JSONException"
      end

      operation 13140876 "toJSONArray"
	class_operation public return_type class_ref 3122060 // JSONArray
	nparams 1
	  param inout name "x" type class_ref 3122956 // XMLTokener
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a well-formed (but not necessarily valid) XML string into a
JSONArray using the JsonML transform. Each XML tag is represented as
a JSONArray in which the first element is the tag name. If the tag has
attributes, then the second element will be JSONObject containing the
name/value pairs. If the tag contains children, then strings and
JSONArrays will represent the child content and tags.
Comments, prologs, DTDs, and <code>&lt;[ [ ]]></code> are ignored.
@param x An XMLTokener.
@return A JSONArray containing the structured data from the XML string.
@throws JSONException"
      end

      operation 13141004 "toJSONObject"
	class_operation public return_type class_ref 3122188 // JSONObject
	nparams 1
	  param inout name "x" type class_ref 3122956 // XMLTokener
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a well-formed (but not necessarily valid) XML string into a
JSONObject using the JsonML transform. Each XML tag is represented as
a JSONObject with a \"tagName\" property. If the tag has attributes, then 
the attributes will be in the JSONObject as properties. If the tag 
contains children, the object will have a \"childNodes\" property which 
will be an array of strings and JsonML JSONObjects.

Comments, prologs, DTDs, and <code>&lt;[ [ ]]></code> are ignored.
@param x An XMLTokener of the XML source text.
@return A JSONObject containing the structured data from the XML string.
@throws JSONException"
      end

      operation 13141132 "toJSONObject"
	class_operation public return_type class_ref 3122188 // JSONObject
	nparams 1
	  param in name "string" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a well-formed (but not necessarily valid) XML string into a
JSONObject using the JsonML transform. Each XML tag is represented as
a JSONObject with a \"tagName\" property. If the tag has attributes, then 
the attributes will be in the JSONObject as properties. If the tag 
contains children, the object will have a \"childNodes\" property which 
will be an array of strings and JsonML JSONObjects.

Comments, prologs, DTDs, and <code>&lt;[ [ ]]></code> are ignored.
@param string The XML source text.
@return A JSONObject containing the structured data from the XML string.
@throws JSONException"
      end

      operation 13141260 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "ja" type class_ref 3122060 // JSONArray
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reverse the JSONML transformation, making an XML text from a JSONArray.
@param ja A JSONArray.
@return An XML string.
@throws JSONException"
      end

      operation 13141388 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "jo" type class_ref 3122188 // JSONObject
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reverse the JSONML transformation, making an XML text from a JSONObject.
The JSONObject must contain a \"tagName\" property. If it has children, 
then it must have a \"childNodes\" property containing an array of objects. 
The other properties are attributes with string values.
@param jo A JSONObject.
@return An XML string.
@throws JSONException"
      end
    end

    class 3122956 "XMLTokener"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Copyright (c) 2002 JSON.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

The Software shall be used for Good, not Evil.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


The XMLTokener extends the JSONTokener to provide additional methods
for the parsing of XML texts.
@author JSON.org
@version 2008-09-18"
      classrelation 5767820 // <generalisation>
	relation 5767692 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5767820 // <generalisation>
	  b parent class_ref 3121804 // JSONTokener
      end

      attribute 11471756 "entity"
	class_attribute const_attribute public explicit_type "java.util.HashMap"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The table of entity values. It initially contains Character values for
amp, apos, gt, lt, quot.
"
      end

      extra_member 202636 "initialization"
	
	cpp "" ""
	java "  static {
       entity = new java.util.HashMap(8);
       entity.put(\"amp\",  XML.AMP);
       entity.put(\"apos\", XML.APOS);
       entity.put(\"gt\",   XML.GT);
       entity.put(\"lt\",   XML.LT);
       entity.put(\"quot\", XML.QUOT);
   }"
	php ""
	python ""
	idl ""
      end

      operation 13153164 "XMLTokener"
	public explicit_return_type ""
	nparams 1
	  param in name "s" explicit_type "String"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct an XMLTokener from a string.
@param s A source string."
      end

      operation 13153292 "nextCDATA"
	public explicit_return_type "String"
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the text in the CDATA block.
@return The string up to the <code>]]&gt;</code>.
@throws JSONException If the <code>]]&gt;</code> is not found."
      end

      operation 13153420 "nextContent"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next XML outer token, trimming whitespace. There are two kinds
of tokens: the '<' character which begins a markup tag, and the content
text between markup tags.

@return  A string, or a '<' Character, or null if there is no more
source text.
@throws JSONException"
      end

      operation 13153548 "nextEntity"
	public explicit_return_type "Object"
	nparams 1
	  param in name "a" explicit_type "char"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the next entity. These entities are translated to Characters:
    <code>&amp;  &apos;  &gt;  &lt;  &quot;</code>.
@param a An ampersand character.
@return  A Character or an entity String if the entity is not recognized.
@throws JSONException If missing ';' in XML entity."
      end

      operation 13153676 "nextMeta"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next XML meta token. This is used for skipping over <!...>
and <?...?> structures.
@return Syntax characters (<code>< > / = ! ?</code>) are returned as
 Character, and strings and names are returned as Boolean. We don't care
 what the values actually are.
@throws JSONException If a string is not properly closed or if the XML
 is badly structured."
      end

      operation 13153804 "nextToken"
	public explicit_return_type "Object"
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the next XML Token. These tokens are found inside of angle
brackets. It may be one of these characters: <code>/ > = ! ?</code> or it
may be a string wrapped in single quotes or double quotes, or it may be a
name.
@return a String or a Character.
@throws JSONException If the XML is not well formed."
      end

      operation 13153932 "skipPast"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "to" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Skip characters until past the requested string.
If it is not found, we are left at the end of the source with a result of false.
@param to A string to skip past.
@throws JSONException"
      end
    end

    class 3123212 "JSONString"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <code>JSONString</code> interface allows a <code>toJSONString()</code> 
method so that a class can change the behavior of 
<code>JSONObject.toString()</code>, <code>JSONArray.toString()</code>,
and <code>JSONWriter.value(</code>Object<code>)</code>. The 
<code>toJSONString</code> method will be used instead of the default behavior 
of using the Object's <code>toString()</code> method and quoting the result."
      operation 13150092 "toJSONString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>toJSONString</code> method allows a class to produce its own JSON 
serialization. 

@return A strictly syntactically correct JSON text."
      end
    end

    class 3123340 "JSONStringer"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "JSONStringer provides a quick and convenient way of producing JSON text.
The texts produced strictly conform to JSON syntax rules. No whitespace is
added, so the results are ready for transmission or storage. Each instance of
JSONStringer can produce one JSON text.
<p>
A JSONStringer instance provides a <code>value</code> method for appending
values to the
text, and a <code>key</code>
method for adding keys before values in objects. There are <code>array</code>
and <code>endArray</code> methods that make and bound array values, and
<code>object</code> and <code>endObject</code> methods which make and bound
object values. All of these methods return the JSONWriter instance,
permitting cascade style. For example, <pre>
myString = new JSONStringer()
    .object()
        .key(\"JSON\")
        .value(\"Hello, World!\")
    .endObject()
    .toString();</pre> which produces the string <pre>
{\"JSON\":\"Hello, World!\"}</pre>
<p>
The first method called must be <code>array</code> or <code>object</code>.
There are no methods for adding commas or colons. JSONStringer adds them for
you. Objects and arrays can be nested up to 20 levels deep.
<p>
This can sometimes be easier than using a JSONObject to build a string.
@author JSON.org
@version 2008-09-18"
      classrelation 5767692 // <generalisation>
	relation 5767564 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5767692 // <generalisation>
	  b parent class_ref 3123468 // JSONWriter
      end

      operation 13152012 "JSONStringer"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a fresh JSONStringer. It can be used to build one JSON text."
      end

      operation 13152140 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the JSON text. This method is used to obtain the product of the
JSONStringer instance. It will return <code>null</code> if there was a
problem in the construction of the JSON text (such as the calls to
<code>array</code> were not properly balanced with calls to
<code>endArray</code>).
@return The JSON text."
      end
    end

    class 3123468 "JSONWriter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Copyright (c) 2006 JSON.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

The Software shall be used for Good, not Evil.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


JSONWriter provides a quick and convenient way of producing JSON text.
The texts produced strictly conform to JSON syntax rules. No whitespace is
added, so the results are ready for transmission or storage. Each instance of
JSONWriter can produce one JSON text.
<p>
A JSONWriter instance provides a <code>value</code> method for appending
values to the
text, and a <code>key</code>
method for adding keys before values in objects. There are <code>array</code>
and <code>endArray</code> methods that make and bound array values, and
<code>object</code> and <code>endObject</code> methods which make and bound
object values. All of these methods return the JSONWriter instance,
permitting a cascade style. For example, <pre>
new JSONWriter(myWriter)
    .object()
        .key(\"JSON\")
        .value(\"Hello, World!\")
    .endObject();</pre> which writes <pre>
{\"JSON\":\"Hello, World!\"}</pre>
<p>
The first method called must be <code>array</code> or <code>object</code>.
There are no methods for adding commas or colons. JSONWriter adds them for
you. Objects and arrays can be nested up to 20 levels deep.
<p>
This can sometimes be easier than using a JSONObject to build a string.
@author JSON.org
@version 2008-09-18"
      attribute 11469964 "maxdepth"
	class_attribute const_attribute private explicit_type "int"
	init_value " 20"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 11470092 "comma"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The comma flag determines if a comma should be output before the next
value.
"
      end

      attribute 11470220 "mode"
	protected explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The current mode. Values:
'a' (array),
'd' (done),
'i' (initial),
'k' (key),
'o' (object).
"
      end

      classrelation 5767564 // stack (<unidirectional association>)
	relation 5767436 --->
	  a role_name "stack" multiplicity "[]" private
	    comment "
The object/array stack.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 5767564 // stack (<unidirectional association>)
	  b parent class_ref 3122188 // JSONObject
      end

      attribute 11470348 "top"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The stack top index. A value of 0 indicates that the stack is empty.
"
      end

      attribute 11470476 "writer"
	protected explicit_type "Writer"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The writer that will receive the output.
"
      end

      operation 13150220 "JSONWriter"
	public explicit_return_type ""
	nparams 1
	  param inout name "w" explicit_type "Writer"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Make a fresh JSONWriter. It can be used to build one JSON text."
      end

      operation 13150348 "append"
	private return_type class_ref 3123468 // JSONWriter
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a value.
@param s A string value.
@return this
@throws JSONException If the value is out of sequence."
      end

      operation 13150476 "array"
	public return_type class_ref 3123468 // JSONWriter
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Begin appending a new array. All values until the balancing
<code>endArray</code> will be appended to this array. The
<code>endArray</code> method must be called to mark the array's end.
@return this
@throws JSONException If the nesting is too deep, or if the object is
started in the wrong place (for example as a key or after the end of the
outermost array or object)."
      end

      operation 13150604 "end"
	private return_type class_ref 3123468 // JSONWriter
	nparams 2
	  param in name "m" explicit_type "char"
	  param in name "c" explicit_type "char"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "End something.
@param m Mode
@param c Closing character
@return this
@throws JSONException If unbalanced."
      end

      operation 13150732 "endArray"
	public return_type class_ref 3123468 // JSONWriter
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "End an array. This method most be called to balance calls to
<code>array</code>.
@return this
@throws JSONException If incorrectly nested."
      end

      operation 13150860 "endObject"
	public return_type class_ref 3123468 // JSONWriter
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "End an object. This method most be called to balance calls to
<code>object</code>.
@return this
@throws JSONException If incorrectly nested."
      end

      operation 13150988 "key"
	public return_type class_ref 3123468 // JSONWriter
	nparams 1
	  param in name "s" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a key. The key will be associated with the next value. In an
object, every value must be preceded by a key.
@param s A key string.
@return this
@throws JSONException If the key is out of place. For example, keys
 do not belong in arrays or if the key is null."
      end

      operation 13151116 "object"
	public return_type class_ref 3123468 // JSONWriter
	nparams 0
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Begin appending a new object. All keys and values until the balancing
<code>endObject</code> will be appended to this object. The
<code>endObject</code> method must be called to mark the object's end.
@return this
@throws JSONException If the nesting is too deep, or if the object is
started in the wrong place (for example as a key or after the end of the
outermost array or object)."
      end

      operation 13151244 "pop"
	private explicit_return_type "void"
	nparams 1
	  param in name "c" explicit_type "char"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Pop an array or object scope.
@param c The scope to close.
@throws JSONException If nesting is wrong."
      end

      operation 13151372 "push"
	private explicit_return_type "void"
	nparams 1
	  param inout name "jo" type class_ref 3122188 // JSONObject
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Push an array or object scope.
@param c The scope to open.
@throws JSONException If nesting is too deep."
      end

      operation 13151500 "value"
	public return_type class_ref 3123468 // JSONWriter
	nparams 1
	  param inout name "b" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append either the value <code>true</code> or the value
<code>false</code>.
@param b A boolean.
@return this
@throws JSONException"
      end

      operation 13151628 "value"
	public return_type class_ref 3123468 // JSONWriter
	nparams 1
	  param in name "d" explicit_type "double"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a double value.
@param d A double.
@return this
@throws JSONException If the number is not finite."
      end

      operation 13151756 "value"
	public return_type class_ref 3123468 // JSONWriter
	nparams 1
	  param in name "l" explicit_type "long"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append a long value.
@param l A long.
@return this
@throws JSONException"
      end

      operation 13151884 "value"
	public return_type class_ref 3123468 // JSONWriter
	nparams 1
	  param inout name "o" explicit_type "Object"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Append an object value.
@param o The object to append. It can be null, or a Boolean, Number,
  String, JSONObject, or JSONArray, or an object with a toJSONString()
  method.
@return this
@throws JSONException If the value is out of sequence."
      end
    end

    class 3123596 "Test"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Test class. This file is not formally a member of the org.json library.
It is just a casual test tool."
      operation 13152268 "main"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "args" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Entry point.
@param args"
      end
    end

    class 3123724 "XML"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This provides static methods to convert an XML text into a JSONObject,
and to covert a JSONObject into an XML text.
@author JSON.org
@version 2008-10-14"
      attribute 11470604 "AMP"
	class_attribute const_attribute public explicit_type "Character"
	init_value " new Character('&')"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Character '&'. "
      end

      attribute 11470732 "APOS"
	class_attribute const_attribute public explicit_type "Character"
	init_value " new Character('\\'')"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Character '''. "
      end

      attribute 11470860 "BANG"
	class_attribute const_attribute public explicit_type "Character"
	init_value " new Character('!')"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Character '!'. "
      end

      attribute 11470988 "EQ"
	class_attribute const_attribute public explicit_type "Character"
	init_value " new Character('=')"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Character '='. "
      end

      attribute 11471116 "GT"
	class_attribute const_attribute public explicit_type "Character"
	init_value " new Character('>')"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Character '>'. "
      end

      attribute 11471244 "LT"
	class_attribute const_attribute public explicit_type "Character"
	init_value " new Character('<')"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Character '<'. "
      end

      attribute 11471372 "QUEST"
	class_attribute const_attribute public explicit_type "Character"
	init_value " new Character('?')"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Character '?'. "
      end

      attribute 11471500 "QUOT"
	class_attribute const_attribute public explicit_type "Character"
	init_value " new Character('\"')"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Character '\"'. "
      end

      attribute 11471628 "SLASH"
	class_attribute const_attribute public explicit_type "Character"
	init_value " new Character('/')"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The Character '/'. "
      end

      operation 13152396 "escape"
	class_operation public explicit_return_type "String"
	nparams 1
	  param in name "string" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replace special characters with XML escapes:
<pre>
&amp; <small>(ampersand)</small> is replaced by &amp;amp;
&lt; <small>(less than)</small> is replaced by &amp;lt;
&gt; <small>(greater than)</small> is replaced by &amp;gt;
&quot; <small>(double quote)</small> is replaced by &amp;quot;
</pre>
@param string The string to be escaped.
@return The escaped string."
      end

      operation 13152524 "noSpace"
	class_operation public explicit_return_type "void"
	nparams 1
	  param in name "string" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throw an exception if the string contains whitespace. 
Whitespace is not allowed in tagNames and attributes.
@param string
@throws JSONException"
      end

      operation 13152652 "parse"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param inout name "x" type class_ref 3122956 // XMLTokener
	  param inout name "context" type class_ref 3122188 // JSONObject
	  param in name "name" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scan the content following the named tag, attaching it to the context.
@param x       The XMLTokener containing the source string.
@param context The JSONObject that will include the new material.
@param name    The tag name.
@return true if the close tag is processed.
@throws JSONException"
      end

      operation 13152780 "toJSONObject"
	class_operation public return_type class_ref 3122188 // JSONObject
	nparams 1
	  param in name "string" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a well-formed (but not necessarily valid) XML string into a
JSONObject. Some information may be lost in this transformation
because JSON is a data format and XML is a document format. XML uses
elements, attributes, and content text, while JSON uses unordered
collections of name/value pairs and arrays of values. JSON does not
does not like to distinguish between elements and attributes.
Sequences of similar elements are represented as JSONArrays. Content
text may be placed in a \"content\" member. Comments, prologs, DTDs, and
<code>&lt;[ [ ]]></code> are ignored.
@param string The source string.
@return A JSONObject containing the structured data from the XML string.
@throws JSONException"
      end

      operation 13152908 "toString"
	class_operation public explicit_return_type "String"
	nparams 1
	  param inout name "o" explicit_type "Object"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a JSONObject into a well-formed, element-normal XML string.
@param o A JSONObject.
@return  A string.
@throws  JSONException"
      end

      operation 13153036 "toString"
	class_operation public explicit_return_type "String"
	nparams 2
	  param inout name "o" explicit_type "Object"
	  param in name "tagName" explicit_type "String"
	nexceptions 1
	  exception class_ref 3121932 // JSONException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a JSONObject into a well-formed, element-normal XML string.
@param o A JSONObject.
@param tagName The optional name of the enclosing tag.
@return A string.
@throws JSONException"
      end
    end
  end

  deploymentview 290188 "json"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1214092 "CDL"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3121676 // CDL
      end
    end

    artifact 1214220 "Cookie"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3122316 // Cookie
      end
    end

    artifact 1214348 "CookieList"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
${definition}"
      associated_classes
	class_ref 3122444 // CookieList
      end
    end

    artifact 1214476 "HTTP"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
${definition}"
      associated_classes
	class_ref 3122572 // HTTP
      end
    end

    artifact 1214604 "JSONTokener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
${definition}"
      associated_classes
	class_ref 3121804 // JSONTokener
      end
    end

    artifact 1214732 "HTTPTokener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3122700 // HTTPTokener
      end
    end

    artifact 1214860 "JSONArray"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.Writer;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
${definition}"
      associated_classes
	class_ref 3122060 // JSONArray
      end
    end

    artifact 1214988 "JSONException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3121932 // JSONException
      end
    end

    artifact 1215116 "JSONML"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
${definition}"
      associated_classes
	class_ref 3122828 // JSONML
      end
    end

    artifact 1215244 "JSONObject"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.Writer;
import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.lang.reflect.Method;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.TreeSet;
${definition}"
      associated_classes
	class_ref 3122188 // JSONObject
      end
    end

    artifact 1215372 "JSONString"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3123212 // JSONString
      end
    end

    artifact 1215500 "JSONWriter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.Writer;
${definition}"
      associated_classes
	class_ref 3123468 // JSONWriter
      end
    end

    artifact 1215628 "JSONStringer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.StringWriter;
${definition}"
      associated_classes
	class_ref 3123340 // JSONStringer
      end
    end

    artifact 1215756 "Test"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.io.StringWriter;
${definition}"
      associated_classes
	class_ref 3123596 // Test
      end
    end

    artifact 1215884 "XML"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Iterator;
${definition}"
      associated_classes
	class_ref 3123724 // XML
      end
    end

    artifact 1216012 "XMLTokener"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3122956 // XMLTokener
      end
    end
  end
end
