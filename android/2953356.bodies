class JNIAVSettingValueObserver
!!!11981708.cpp!!!	JNIAVSettingValueObserver(inout env : JNIEnv, in thiz : jobject, in weak_thiz : jobject)

    // Hold onto the AVSettingsObserver class for use in calling the static method
    // that posts events to the application thread.
    jclass clazz = env->GetObjectClass(thiz);
    if (clazz == NULL) {
        jniThrowException(env, "java/lang/Exception",
                         "Can't find com/marvell/tv/avsettings/AVSettingsObserver");
        return;
    }
    mClass = (jclass)env->NewGlobalRef(clazz);

    // We use a weak reference so the AVSettingsObserver object can be garbage collected.
    // The reference is only used as a proxy for callbacks.
    mObject  = env->NewGlobalRef(weak_thiz);
!!!11981836.cpp!!!	~JNIAVSettingValueObserver()
    // remove global references
    JNIEnv *env = AndroidRuntime::getJNIEnv();
    env->DeleteGlobalRef(mObject);
    env->DeleteGlobalRef(mClass);
!!!11981964.cpp!!!	OnSettingUpdate(in name : char, in value : AVSettingValue) : void

    JNIEnv *env = AndroidRuntime::getJNIEnv();
    if (value.getValue().string() != NULL) {
        jobject jParcel = createJavaParcelObject(env);
        if (jParcel != NULL) {
            Parcel* nativeParcel = parcelForJavaObject(env, jParcel);
            nativeParcel->writeString16(String16(name));
            nativeParcel->writeInt32(value.getType());
            nativeParcel->writeString16(String16(value.getFormattedValue().string()));
            ALOGV("OnSettingUpdate::Datasize: %d", nativeParcel->dataSize());
            env->CallStaticVoidMethod(
                mClass, gObserverFields.post_value_event, mObject, this, jParcel);
            env->DeleteLocalRef(jParcel);
        }
    }
