class XmlMessageBuilder
!!!13186572.java!!!	XmlMessageBuilder()
    mLastMessageId = null;
!!!13186700.java!!!	outerXMLToPoloMessage(in outerXml : String) : PoloMessage
    JSONObject outerMessage;
    try {
      outerMessage = XML.toJSONObject(outerXml);
    } catch (JSONException e) {
        throw new PoloException(e);
    }

    JSONObject payload;
    PoloMessageType messageType;
    try {
      payload = outerMessage.getJSONObject(OUTER_FIELD_PAYLOAD);

      int status = payload.getInt(OUTER_FIELD_STATUS);
      if (status != STATUS_OK) {
        throw new ProtocolErrorException("Peer reported an error.");
      }
      
      int msgIntVal = payload.getInt(OUTER_FIELD_TYPE);
      messageType = PoloMessageType.fromIntVal(msgIntVal);
    } catch (JSONException e) {
      throw new PoloException("Bad outer message.", e);
    }

    if (outerMessage.has("msg_id")) {
      try {
        mLastMessageId = outerMessage.getString("msg_id");
      } catch (JSONException e) {
      }
    } else {
      mLastMessageId = null;
    }

    switch (messageType) {
      case PAIRING_REQUEST:
        return getPairingRequest(payload);
      case PAIRING_REQUEST_ACK:
        return getPairingRequestAck(payload);
      case OPTIONS:
        return getOptionsMessage(payload);
      case CONFIGURATION:
        return getConfigMessage(payload);
      case CONFIGURATION_ACK:
        return getConfigAckMessage(payload);
      case SECRET:
        return getSecretMessage(payload);
      case SECRET_ACK:
        return getSecretAckMessage(payload);
      default:
        return null;
    }

!!!13186828.java!!!	getPairingRequest(inout body : JSONObject) : PairingRequestMessage
    try {
      JSONObject jsonObj = body.getJSONObject(
          MESSAGE_CONTAINER_NAME_PAIRING_REQUEST);
      String serviceName = jsonObj.getString(
          PAIRING_REQUEST_FIELD_SERVICE_NAME);
      String clientName = null;
      if (jsonObj.has(PAIRING_REQUEST_FIELD_CLIENT_NAME)) {
        clientName = jsonObj.getString(PAIRING_REQUEST_FIELD_CLIENT_NAME);
      }
      return new PairingRequestMessage(serviceName, clientName);
    } catch (JSONException e) {
      throw new PoloException("Malformed message.", e);
    }
!!!13186956.java!!!	getPairingRequestAck(inout body : JSONObject) : PairingRequestAckMessage
    try {
      JSONObject jsonObj = body.getJSONObject(
          MESSAGE_CONTAINER_NAME_PAIRING_REQUEST_ACK);
      String serverName = null;
      if (jsonObj.has(PAIRING_REQUEST_ACK_FIELD_SERVER_NAME)) {
        serverName = jsonObj.getString(PAIRING_REQUEST_ACK_FIELD_SERVER_NAME);
      }
      return new PairingRequestAckMessage(serverName);
    } catch (JSONException e) {
      throw new PoloException("Malformed message.", e);
    }
!!!13187084.java!!!	getOptionsMessage(inout body : JSONObject) : OptionsMessage
    OptionsMessage options = new OptionsMessage();
    JSONObject jsonOptions;
    try {
      jsonOptions = body.getJSONObject(MESSAGE_CONTAINER_NAME_OPTIONS);

      JSONObject inEnc = jsonOptions.getJSONObject(
          OPTIONS_FIELD_INPUT_ENCODINGS);
      JSONObject outEnc = jsonOptions.getJSONObject(
          OPTIONS_FIELD_OUTPUT_ENCODINGS);

      // Input encodings
      JSONArray inEncodings = new JSONArray();
      try {
        inEncodings = inEnc.getJSONArray(ENCODING_SUBFIELD_ENCODING);
      } catch (JSONException e) {
        if (inEnc.has(ENCODING_SUBFIELD_ENCODING)) {
          JSONObject enc = inEnc.getJSONObject(ENCODING_SUBFIELD_ENCODING);
          inEncodings.put(enc);
        }
      }

      for (int i = 0; i < inEncodings.length(); i++) {
        JSONObject enc = inEncodings.getJSONObject(i);
        options.addInputEncoding(getEncodingOption(enc));
      }

      // Output encodings
      JSONArray outEncodings = new JSONArray();
      try {
        outEncodings = outEnc.getJSONArray(ENCODING_SUBFIELD_ENCODING);
      } catch (JSONException e) {
        if (outEnc.has(ENCODING_SUBFIELD_ENCODING)) {
          JSONObject enc = outEnc.getJSONObject(ENCODING_SUBFIELD_ENCODING);
          outEncodings.put(enc);
        }
      }

      for (int i = 0; i < outEncodings.length(); i++) {
        JSONObject enc = outEncodings.getJSONObject(i);
        options.addOutputEncoding(getEncodingOption(enc));
      }

      // Role
      ProtocolRole role = ProtocolRole.fromIntVal(
          jsonOptions.getInt(OPTIONS_FIELD_PREFERRED_ROLE));
      options.setProtocolRolePreference(role);
    } catch (JSONException e) {
      throw new PoloException("Malformed message.", e);
    }

    return options;
!!!13187212.java!!!	getConfigMessage(inout body : JSONObject) : ConfigurationMessage
    try {  
      EncodingOption encoding = getEncodingOption(
          body.getJSONObject(MESSAGE_CONTAINER_NAME_CONFIG)
              .getJSONObject(ENCODING_SUBFIELD_ENCODING));
      ProtocolRole role = ProtocolRole.fromIntVal(
          body.getJSONObject(MESSAGE_CONTAINER_NAME_CONFIG)
              .getInt(CONFIG_FIELD_CLIENT_ROLE));
      return new ConfigurationMessage(encoding, role);
    } catch (JSONException e) {
      throw new PoloException("Malformed message.", e);
    }
!!!13187340.java!!!	getConfigAckMessage(inout body : JSONObject) : ConfigurationAckMessage
    return new ConfigurationAckMessage();
!!!13187468.java!!!	getSecretMessage(inout body : JSONObject) : SecretMessage
    String secret;
    try {
      secret = body.getJSONObject(MESSAGE_CONTAINER_NAME_SECRET)
          .getString(SECRET_FIELD_SECRET);
    } catch (JSONException e) {
      throw new PoloException("Malformed message.", e);
    }
    byte[] secretBytes = PoloUtil.hexStringToBytes(secret);
    return new SecretMessage(secretBytes);
!!!13187596.java!!!	getSecretAckMessage(inout body : JSONObject) : SecretAckMessage
    // TODO(mikey): current implementations of this wire format improperly
    // omit the secret bytes.
    return new SecretAckMessage(null);
!!!13187724.java!!!	getEncodingOption(inout option : JSONObject) : EncodingOption
    int length = option.getInt(ENCODING_FIELD_SYMBOL_LENGTH);
    int intType = option.getInt(ENCODING_FIELD_TYPE);
    EncodingType type = encodingTypeFromIntValue(intType);
    return new EncodingOption(type, length);
!!!13187852.java!!!	poloMessageToXML(inout message : PoloMessage) : String
    try {
      if (message instanceof PairingRequestMessage) {
        return toXML((PairingRequestMessage) message);
      } else if (message instanceof PairingRequestAckMessage) {
        return toXML((PairingRequestAckMessage) message);
      } else if (message instanceof OptionsMessage) {
        return toXML((OptionsMessage) message);
      } else if (message instanceof ConfigurationMessage) {
        return toXML((ConfigurationMessage) message);
      } else if (message instanceof ConfigurationAckMessage) {
        return toXML((ConfigurationAckMessage) message);
      } else if (message instanceof SecretMessage) {
        return toXML((SecretMessage) message);
      } else if (message instanceof SecretAckMessage) {
        return toXML((SecretAckMessage) message);
      }
      return null;
    } catch (JSONException e) {
      e.printStackTrace();
      return "";
    }

!!!13187980.java!!!	getOuterXML(inout message : PoloMessage, in status : int) : String
    StringBuffer out = new StringBuffer();
    
    // TODO(mikey): use JSONObject for the outer message as well.
    
    out.append("<" + OUTER_FIELD_PAYLOAD + ">\n");
    
    // status
    out.append("<" + OUTER_FIELD_STATUS + ">");
    out.append(status);
    out.append("</" + OUTER_FIELD_STATUS + ">\n");
    
    // msg_id (optional)
    if (mLastMessageId != null) {
      out.append("<" + OUTER_FIELD_MSG_ID + ">");
      out.append(mLastMessageId);
      out.append("</" + OUTER_FIELD_MSG_ID + ">\n");
    }
    
    // payload
    if (message != null) {
      int msgType = message.getType().getAsInt();
      out.append("<" + OUTER_FIELD_TYPE + ">");
      out.append(msgType);
      out.append("</" + OUTER_FIELD_TYPE + ">\n");

      out.append(poloMessageToXML(message));
      out.append("\n");
    }
    
    out.append("</" + OUTER_FIELD_PAYLOAD + ">\n");
    return out.toString();
!!!13188108.java!!!	getErrorXML(inout exception : Exception) : String
    return getOuterXML(null, STATUS_ERROR);
!!!13188236.java!!!	toXML(inout message : PairingRequestMessage) : String
    JSONObject jsonObj = new JSONObject();
    JSONObject pairingReq = new JSONObject();
    jsonObj.put(MESSAGE_CONTAINER_NAME_PAIRING_REQUEST, pairingReq);
    pairingReq.put(PAIRING_REQUEST_FIELD_SERVICE_NAME,
        message.getServiceName());
    if (message.hasClientName()) {
      pairingReq.put(PAIRING_REQUEST_FIELD_CLIENT_NAME,
          message.getServiceName());
    }
    pairingReq.put(PAIRING_REQUEST_FIELD_PROTOCOL_VERSION, 1);
    return XML.toString(jsonObj);
!!!13188364.java!!!	toXML(inout message : PairingRequestAckMessage) : String
    JSONObject jsonObj = new JSONObject();
    JSONObject pairingReq = new JSONObject();
    jsonObj.put(MESSAGE_CONTAINER_NAME_PAIRING_REQUEST_ACK, pairingReq);
    if (message.hasServerName()) {
      jsonObj.put(PAIRING_REQUEST_ACK_FIELD_SERVER_NAME,
          message.getServerName());
    }
    pairingReq.put(PAIRING_REQUEST_FIELD_PROTOCOL_VERSION, 1);
    return XML.toString(jsonObj);
!!!13188492.java!!!	toXML(inout message : OptionsMessage) : String
    JSONObject jsonObj = new JSONObject();
    JSONObject options = new JSONObject();

    JSONObject inEncs = new JSONObject();
    JSONArray inEncsArray = new JSONArray();
    for (EncodingOption encoding : message.getInputEncodingSet()) {
      inEncsArray.put(encodingToJson(encoding));
    }
    inEncs.put(ENCODING_SUBFIELD_ENCODING, inEncsArray);
    options.put(OPTIONS_FIELD_INPUT_ENCODINGS, inEncs);

    JSONObject outEncs = new JSONObject();
    JSONArray outEncsArray = new JSONArray();
    for (EncodingOption encoding : message.getOutputEncodingSet()) {
      outEncsArray.put(encodingToJson(encoding));
    }
    outEncs.put(ENCODING_SUBFIELD_ENCODING, outEncsArray);
    options.put(OPTIONS_FIELD_OUTPUT_ENCODINGS, outEncs);

    options.put(OPTIONS_FIELD_PREFERRED_ROLE,
        message.getProtocolRolePreference().ordinal());
    jsonObj.put(MESSAGE_CONTAINER_NAME_OPTIONS, options);
    return XML.toString(jsonObj);
!!!13188620.java!!!	toXML(inout message : ConfigurationMessage) : String
    JSONObject jsonObj = new JSONObject();
    JSONObject config = new JSONObject();
    JSONObject encoding = encodingToJson(message.getEncoding());
    config.put(ENCODING_SUBFIELD_ENCODING, encoding);
    config.put(CONFIG_FIELD_CLIENT_ROLE, message.getClientRole().ordinal());
    jsonObj.put(MESSAGE_CONTAINER_NAME_CONFIG, config);
    return XML.toString(jsonObj);
!!!13188748.java!!!	toXML(inout message : ConfigurationAckMessage) : String
    return "";
!!!13188876.java!!!	toXML(inout message : SecretMessage) : String
    JSONObject jsonObj = new JSONObject();
    JSONObject secret = new JSONObject();
    String bytesStr = PoloUtil.bytesToHexString(message.getSecret());
    secret.put(SECRET_FIELD_SECRET, bytesStr);
    jsonObj.put(MESSAGE_CONTAINER_NAME_SECRET, secret);
    return XML.toString(jsonObj);
!!!13189004.java!!!	toXML(inout message : SecretAckMessage) : String
    return "";
!!!13189132.java!!!	encodingToJson(inout encoding : EncodingOption) : JSONObject
    JSONObject result = new JSONObject();
    int intType = encodingTypeToIntVal(encoding.getType());
    result.put(ENCODING_FIELD_TYPE, intType);
    result.put(ENCODING_FIELD_SYMBOL_LENGTH, encoding.getSymbolLength());
    result.put(ENCODING_FIELD_MAX_LENGTH, encoding.getSymbolLength());
    return result;
!!!13189260.java!!!	encodingTypeToIntVal(inout type : EncodingType) : int
    switch (type) {
      case ENCODING_ALPHANUMERIC:
        return ENCODING_TYPE_ALPHANUMERIC;
      case ENCODING_NUMERIC:
        return ENCODING_TYPE_NUMERIC;
      case ENCODING_HEXADECIMAL:
        return ENCODING_TYPE_HEXADECIMAL;
      case ENCODING_QRCODE:
        return ENCODING_TYPE_QRCODE;
      case ENCODING_UNKNOWN:
      default:
        return 0;
    }
!!!13189388.java!!!	encodingTypeFromIntValue(in intType : int) : EncodingType
    EncodingType type = EncodingType.ENCODING_UNKNOWN;
    switch (intType) {
      case ENCODING_TYPE_ALPHANUMERIC:
        type = EncodingType.ENCODING_ALPHANUMERIC;
        break;
      case ENCODING_TYPE_NUMERIC:
        type = EncodingType.ENCODING_NUMERIC;
        break;
      case ENCODING_TYPE_HEXADECIMAL:
        type = EncodingType.ENCODING_HEXADECIMAL;
        break;
      case ENCODING_TYPE_QRCODE:
        type = EncodingType.ENCODING_QRCODE;
        break;
      default:
        type = EncodingType.ENCODING_UNKNOWN;
      break;
    }
    return type;
