format 74
"android" // framework::base::core::jni::android::graphics::android
  revision 4
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/framework/base/core/jni/android/graphics/"
  cpp_src_dir "/home/shchen/work/jellybean/framework/base/core/jni/android/graphics/"
  cpp_namespace "android"
  classview 145676 "graphics"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 406156 "RtlDebugLevel"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * Debug levels. Debug levels are used as flags."
      attribute 895884 "kRtlDebugDisabled"
	public type class_ref 406156 // RtlDebugLevel
	init_value " 0"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 896012 "kRtlDebugMemory"
	public type class_ref 406156 // RtlDebugLevel
	init_value " 1"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 896140 "kRtlDebugCaches"
	public type class_ref 406156 // RtlDebugLevel
	init_value " 2"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 896268 "kRtlDebugAllocations"
	public type class_ref 406156 // RtlDebugLevel
	init_value " 3
"
	cpp_decl "  ${name}${value},${comment}"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 406540 "TextLayout"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 948620 "getTextRunAdvances"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 8
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "chars" explicit_type "jchar"
	  param in name "start" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "contextCount" explicit_type "jint"
	  param in name "dirFlags" explicit_type "jint"
	  param inout name "resultAdvances" explicit_type "jfloat"
	  param inout name "resultTotalAdvance" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} * ${p6}, ${t7} * ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 948748 "getTextRunAdvancesICU"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 8
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "chars" explicit_type "jchar"
	  param in name "start" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "contextCount" explicit_type "jint"
	  param in name "dirFlags" explicit_type "jint"
	  param inout name "resultAdvances" explicit_type "jfloat"
	  param inout name "resultTotalAdvance" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}, ${t7} & ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} * ${p6}, ${t7} & ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 948876 "getTextPath"
	class_operation preserve_cpp_body_indent public explicit_return_type "void"
	nparams 7
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "len" explicit_type "jsize"
	  param in name "bidiFlags" explicit_type "jint"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param inout name "path" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} * ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 949004 "drawTextOnPath"
	class_operation public explicit_return_type "void"
	nparams 8
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "len" explicit_type "jsize"
	  param in name "bidiFlags" explicit_type "int"
	  param in name "hOffset" explicit_type "jfloat"
	  param in name "vOffset" explicit_type "jfloat"
	  param inout name "path" explicit_type "SkPath"
	  param inout name "canvas" explicit_type "SkCanvas"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} * ${p6}, ${t7} * ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 949132 "needsLayout"
	class_operation preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 3
	  param in name "text" explicit_type "jchar"
	  param in name "len" explicit_type "jint"
	  param in name "bidiFlags" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// Returns true if we might need layout.  If bidiFlags force LTR, assume no layout, if
// bidiFlags indicate there probably is RTL, assume we do, otherwise scan the text
// looking for a character >= the first RTL character in unicode and assume we do if
// we find one.

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 949260 "handleText"
	class_operation private explicit_return_type "void"
	nparams 7
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "len" explicit_type "jsize"
	  param in name "bidiFlags" explicit_type "int"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param inout name "path" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} * ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 949388 "computeAdvancesWithICU"
	class_operation preserve_cpp_body_indent private explicit_return_type "void"
	nparams 8
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "chars" type class_ref 320140 // UChar
	  param in name "start" explicit_type "size_t"
	  param in name "count" explicit_type "size_t"
	  param in name "contextCount" explicit_type "size_t"
	  param in name "dirFlags" explicit_type "int"
	  param inout name "outAdvances" explicit_type "jfloat"
	  param inout name "outTotalAdvance" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} * ${p6}, ${t7} * ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 406668 "TextLayoutCacheKey"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "*
 * TextLayoutCacheKey is the Cache key"
      operation 949516 "TextLayoutCacheKey"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "//*
// * TextLayoutCacheKey

${inline}${class}::${name}${(}${)}: start(0), count(0), contextCount(0),
        dirFlags(0), typeface(NULL), textSize(0), textSkewX(0), textScaleX(0), flags(0),
        hinting(SkPaint::kNo_Hinting), variant(SkPaint::kDefault_Variant), language()  ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 949644 "TextLayoutCacheKey"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 6
	  param in name "paint" explicit_type "SkPaint"
	  param in name "text" type class_ref 320140 // UChar
	  param in name "start" explicit_type "size_t"
	  param in name "count" explicit_type "size_t"
	  param in name "contextCount" explicit_type "size_t"
	  param in name "dirFlags" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)} :
            start(start), count(count), contextCount(contextCount),
            dirFlags(dirFlags) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 949772 "TextLayoutCacheKey"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 406668 // TextLayoutCacheKey
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)} :
        textCopy(other.textCopy),
        start(other.start),
        count(other.count),
        contextCount(other.contextCount),
        dirFlags(other.dirFlags),
        typeface(other.typeface),
        textSize(other.textSize),
        textSkewX(other.textSkewX),
        textScaleX(other.textScaleX),
        flags(other.flags),
        hinting(other.hinting),
        variant(other.variant),
        language(other.language) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 949900 "getSize"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Get the size of the Cache key."
      end

      operation 950028 "compare"
	class_operation preserve_cpp_body_indent public explicit_return_type "int"
	nparams 2
	  param in name "lhs" type class_ref 406668 // TextLayoutCacheKey
	  param in name "rhs" type class_ref 406668 // TextLayoutCacheKey
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 950156 "getText"
	const cpp_inline public return_type class_ref 320140 // UChar
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return textCopy.string(); };
"
	
	
	
	
      end

      classrelation 867340 // textCopy (<directional composition>)
	relation 867340 *-->
	  a role_name "textCopy" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 867340 // textCopy (<directional composition>)
	  b parent class_ref 142988 // String16
      end

      attribute 897676 "start"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 897804 "count"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 897932 "contextCount"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 898060 "dirFlags"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 898188 "typeface"
	private explicit_type "SkTypeface"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 898316 "textSize"
	private explicit_type "SkScalar"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 898444 "textSkewX"
	private explicit_type "SkScalar"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 898572 "textScaleX"
	private explicit_type "SkScalar"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 898700 "flags"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 898828 "hinting"
	private explicit_type "SkPaint::Hinting"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 898956 "variant"
	private explicit_type "SkPaint::FontVariant"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 899084 "language"
	private explicit_type "SkLanguage"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 406796 "TextLayoutValue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " * TextLayoutValue is the Cache value"
      classrelation 867468 // <generalisation>
	relation 867468 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 867468 // <generalisation>
	  b parent class_ref 140044 // RefBase
      end

      operation 950284 "TextLayoutValue"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param in name "contextCount" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "//*
// * TextLayoutCacheValue

${inline}${class}::${name}${(}${t0} ${p0}${)} :
        mTotalAdvance(0), mElapsedTime(0) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 950412 "setElapsedTime"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 1
	  param in name "time" explicit_type "uint32_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 950540 "getElapsedTime"
	preserve_cpp_body_indent public explicit_return_type "uint32_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 950668 "getAdvances"
	const cpp_inline public explicit_return_type "jfloat"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mAdvances.array(); };
"
	
	
	
	
      end

      operation 950796 "getAdvancesCount"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mAdvances.size(); };
"
	
	
	
	
      end

      operation 950924 "getTotalAdvance"
	const cpp_inline public explicit_return_type "jfloat"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mTotalAdvance; };
"
	
	
	
	
      end

      operation 951052 "getGlyphs"
	const cpp_inline public explicit_return_type "jchar"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mGlyphs.array(); };
"
	
	
	
	
      end

      operation 951180 "getGlyphsCount"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mGlyphs.size(); };
"
	
	
	
	
      end

      operation 951308 "getPos"
	const cpp_inline public explicit_return_type "jfloat"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mPos.array(); };
"
	
	
	
	
      end

      operation 951436 "getPosCount"
	const cpp_inline public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return mPos.size(); };
"
	
	
	
	
      end

      attribute 899212 "mAdvances"
	public explicit_type "jfloat"
	stereotype "Vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 899340 "mTotalAdvance"
	public explicit_type "jfloat"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 899468 "mGlyphs"
	public explicit_type "jchar"
	stereotype "Vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 899596 "mPos"
	public explicit_type "jfloat"
	stereotype "Vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 951564 "getSize"
	preserve_cpp_body_indent const public explicit_return_type "size_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Get the size of the Cache entry"
      end

      attribute 899724 "mElapsedTime"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 406924 "TextLayoutShaper"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " TextLayoutCacheValue
*
 * The TextLayoutShaper is responsible for shaping (with the Harfbuzz library)"
      operation 951692 "TextLayoutShaper"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)} : mShaperItemGlyphArraySize(0) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 951820 "~TextLayoutShaper"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 951948 "computeValues"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 7
	  param inout name "value" type class_ref 406796 // TextLayoutValue
	  param in name "paint" explicit_type "SkPaint"
	  param in name "chars" type class_ref 320140 // UChar
	  param in name "start" explicit_type "size_t"
	  param in name "count" explicit_type "size_t"
	  param in name "contextCount" explicit_type "size_t"
	  param in name "dirFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} * ${p1}, const ${t2} * ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 952076 "purgeCaches"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 899852 "mShaperItem"
	private explicit_type "HB_ShaperItem"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 899980 "mFontRec"
	private explicit_type "HB_FontRec"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 900108 "mShapingPaint"
	private explicit_type "SkPaint"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 900236 "mDefaultTypeface"
	private explicit_type "SkTypeface"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 900364 "mCachedHBFaces"
	private explicit_type "SkFontID, HB_Face"
	stereotype "KeyedVector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 900492 "mShaperItemGlyphArraySize"
	private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 900620 "mNormalizedString"
	private explicit_type "UnicodeString"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 900748 "mBuffer"
	private explicit_type "UnicodeString"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 952204 "init"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 952332 "unrefTypefaces"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 952460 "typefaceForScript"
	preserve_cpp_body_indent private explicit_return_type "SkTypeface"
	nparams 3
	  param in name "paint" explicit_type "SkPaint"
	  param inout name "typeface" explicit_type "SkTypeface"
	  param in name "script" explicit_type "HB_Script"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//*
// * Return the first typeface in the logical change, starting with this typeface,
// * that contains the specified unichar, or NULL if none is found.
// * 
// * Note that this function does _not_ increment the reference count on the typeface, as the
// * assumption is that its lifetime is managed elsewhere - in particular, the fallback typefaces
// * for the default font live in a global cache.

${inline}${type} * ${class}::${name}${(}const ${t0} * ${p0}, ${t1} * ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 952588 "shapeFontRun"
	preserve_cpp_body_indent private explicit_return_type "size_t"
	nparams 2
	  param in name "paint" explicit_type "SkPaint"
	  param in name "isRTL" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 952716 "computeValues"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 10
	  param in name "paint" explicit_type "SkPaint"
	  param in name "chars" type class_ref 320140 // UChar
	  param in name "start" explicit_type "size_t"
	  param in name "count" explicit_type "size_t"
	  param in name "contextCount" explicit_type "size_t"
	  param in name "dirFlags" explicit_type "int"
	  param inout name "outAdvances" explicit_type "Vector<jfloat>"
	  param inout name "outTotalAdvance" explicit_type "jfloat"
	  param inout name "outGlyphs" explicit_type "Vector<jchar>"
	  param inout name "outPos" explicit_type "Vector<jfloat>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * const ${p6}${v6}, ${t7} * ${p7}${v7}, ${t8} * const ${p8}${v8}, ${t9} * const ${p9}${v9}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}, ${t6} * const ${p6}, ${t7} * ${p7}, ${t8} * const ${p8}, ${t9} * const ${p9}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 952844 "computeRunValues"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 8
	  param in name "paint" explicit_type "SkPaint"
	  param in name "chars" type class_ref 320140 // UChar
	  param in name "count" explicit_type "size_t"
	  param in name "isRTL" explicit_type "bool"
	  param inout name "outAdvances" explicit_type "Vector<jfloat>"
	  param inout name "outTotalAdvance" explicit_type "jfloat"
	  param inout name "outGlyphs" explicit_type "Vector<jchar>"
	  param inout name "outPos" explicit_type "Vector<jfloat>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * const ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} * const ${p6}${v6}, ${t7} * const ${p7}${v7}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} * const ${p4}, ${t5} * ${p5}, ${t6} * const ${p6}, ${t7} * const ${p7}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 952972 "getCachedTypeface"
	private explicit_return_type "SkTypeface"
	nparams 3
	  param inout name "typeface" explicit_type "SkTypeface"
	  param in name "script" explicit_type "HB_Script"
	  param in name "style" explicit_type "SkTypeface::Style"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 953100 "getCachedHBFace"
	preserve_cpp_body_indent private explicit_return_type "HB_Face"
	nparams 1
	  param inout name "typeface" explicit_type "SkTypeface"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 953228 "doShaping"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 953356 "createShaperItemGlyphArrays"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 953484 "deleteShaperItemGlyphArrays"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 953612 "isComplexScript"
	preserve_cpp_body_indent private explicit_return_type "bool"
	nparams 1
	  param in name "script" explicit_type "HB_Script"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 407052 "TextLayoutCache"
      visibility package 
      nactuals 2
      actual class class_ref 407180 // OnEntryRemoved
        rank 0 value class_ref 406668 // TextLayoutCacheKey
      actual class class_ref 407180 // OnEntryRemoved
        rank 1 explicit_value "sp<TextLayoutValue>"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " TextLayoutShaper
*
 * Cache of text layout information."
      classrelation 867596 // <realization>
	relation 867596 -_-|>
	  stereotype "bind"
	  a private
	    cpp default "${type}"
	    classrelation_ref 867596 // <realization>
	  b parent class_ref 407180 // OnEntryRemoved
      end

      operation 953740 "TextLayoutCache"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 1
	  param inout name "shaper" type class_ref 406924 // TextLayoutShaper
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "//--------------------------------------------------------------------------------------------------

${inline}${class}::${name}${(}${t0} * ${p0}${)} :
        mShaper(shaper),
        mCache(GenerationCache<TextLayoutCacheKey, sp<TextLayoutValue> >::kUnlimitedCapacity),
        mSize(0), mMaxSize(MB(DEFAULT_TEXT_LAYOUT_CACHE_SIZE_IN_MB)),
        mCacheHitCount(0), mNanosecondsSaved(0) ${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 953868 "~TextLayoutCache"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 953996 "isInitialized"
	cpp_inline public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
        return mInitialized;
    };
"
	
	
	
	
      end

      operation 954124 "operator ()"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 2
	  param inout name "text" type class_ref 406668 // TextLayoutCacheKey
	  param inout name "desc" explicit_type "sp<TextLayoutValue>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}, ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "//*
// *  Callbacks

${inline}${type} ${class}::${name}${(}${t0} & ${p0}, ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Used as a callback when an entry is removed from the cache
     * Do not invoke directly"
      end

      operation 954252 "getValue"
	preserve_cpp_body_indent public explicit_return_type "sp<TextLayoutValue>"
	nparams 6
	  param in name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "start" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "contextCount" explicit_type "jint"
	  param in name "dirFlags" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Caching

${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 954380 "purgeCaches"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "// * Cache clearing

${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Clear the cache"
      end

      classrelation 867724 // mShaper (<unidirectional association>)
	relation 867724 --->
	  a role_name "mShaper" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 867724 // mShaper (<unidirectional association>)
	  b parent class_ref 406924 // TextLayoutShaper
      end

      classrelation 867852 // mLock (<directional composition>)
	relation 867852 *-->
	  a role_name "mLock" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 867852 // mLock (<directional composition>)
	  b parent class_ref 133132 // Mutex
      end

      attribute 900876 "mInitialized"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 867980 // mCache (<directional composition>)
	relation 867980 *-->
	  stereotype "GenerationCache"
	  a role_name "mCache" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type},sp<TextLayoutValue> > ${name}${value};
"
	    classrelation_ref 867980 // mCache (<directional composition>)
	  b parent class_ref 406668 // TextLayoutCacheKey
      end

      attribute 901004 "mSize"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 901132 "mMaxSize"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 901260 "mCacheHitCount"
	private explicit_type "uint32_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 901388 "mNanosecondsSaved"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 901516 "mCacheStartTime"
	private explicit_type "uint64_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 868108 // mDebugLevel (<directional composition>)
	relation 868108 *-->
	  a role_name "mDebugLevel" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 868108 // mDebugLevel (<directional composition>)
	  b parent class_ref 406156 // RtlDebugLevel
      end

      attribute 901644 "mDebugEnabled"
	private explicit_type "bool"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 954508 "init"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "     * Class initialization"
      end

      operation 954636 "dumpCacheStats"
	preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Dump Cache statistics"
      end
    end

    class 407308 "TextLayoutEngine"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " TextLayoutCache
*
 * The TextLayoutEngine is reponsible for computing TextLayoutValues"
      classrelation 868236 // <generalisation>
	relation 868236 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 868236 // <generalisation>
	  b parent class_ref 407436 // typedef23
      end

      operation 954764 "TextLayoutEngine"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 954892 "~TextLayoutEngine"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 955020 "getValue"
	preserve_cpp_body_indent public explicit_return_type "sp<TextLayoutValue>"
	nparams 6
	  param in name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "start" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "contextCount" explicit_type "jint"
	  param in name "dirFlags" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${const}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "*
     * Note: this method currently does a defensive copy of the text argument, in case
     * there is concurrent mutation of it. The contract may change, and may in the
     * future require the caller to guarantee that the contents will not change during
     * the call. Be careful of this when doing optimization.
     *"
      end

      operation 955148 "purgeCaches"
	preserve_cpp_body_indent public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 868364 // mTextLayoutCache (<unidirectional association>)
	relation 868364 --->
	  a role_name "mTextLayoutCache" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 868364 // mTextLayoutCache (<unidirectional association>)
	  b parent class_ref 407052 // TextLayoutCache
      end

      classrelation 868492 // mShaper (<unidirectional association>)
	relation 868492 --->
	  a role_name "mShaper" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 868492 // mShaper (<unidirectional association>)
	  b parent class_ref 406924 // TextLayoutShaper
      end
    end

    class 407436 "typedef23"
      visibility package stereotype "typedef" explicit_base_type "Singleton<TextLayoutEngine>"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 407564 "AssetStreamAdaptor"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 868620 // <generalisation>
	relation 868620 ---|>
	  a public
	    cpp default "${type}"
	    classrelation_ref 868620 // <generalisation>
	  b parent class_ref 407692 // typedef24
      end

      operation 955276 "AssetStreamAdaptor"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "a" type class_ref 407820 // Asset
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} : fAsset(a) {};
"
	
	
	
	
      end

      operation 955404 "rewind"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "bool"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 955532 "read"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "size_t"
	nparams 2
	  param inout name "buffer" explicit_type "void"
	  param in name "size" explicit_type "size_t"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 868748 // fAsset (<unidirectional association>)
	relation 868748 --->
	  a role_name "fAsset" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    classrelation_ref 868748 // fAsset (<unidirectional association>)
	  b parent class_ref 407820 // Asset
      end
    end

    class 407692 "typedef24"
      visibility package stereotype "typedef" explicit_base_type "SkStream"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
    end

    class 407948 "AutoFDSeek"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* Restore the file descriptor's offset in our destructor"
      operation 955660 "AutoFDSeek"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "fd" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : fFD(fd) {
        fCurr = ::lseek(fd, 0, SEEK_CUR);
    };
"
	
	
	
	
      end

      operation 955788 "~AutoFDSeek"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
        if (fCurr >= 0) {
            ::lseek(fFD, fCurr, SEEK_SET);
        }
    };
"
	
	
	
	
      end

      attribute 901772 "fFD"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 868876 // fCurr (<directional composition>)
	relation 868876 *-->
	  a role_name "fCurr" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    classrelation_ref 868876 // fCurr (<directional composition>)
	  b parent class_ref 132876 // off64_t
      end
    end

    class 639628 "SkCanvasGlue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1939212 "finalizer"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        canvas->unref();
    };
"
	
	
	
	
      end

      operation 1939340 "initRaster"
	class_operation cpp_inline public explicit_return_type "SkCanvas"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "bitmap" explicit_type "SkBitmap"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return bitmap ? new SkCanvas(*bitmap) : new SkCanvas;
    };
"
	
	
	
	
      end

      operation 1939468 "freeCaches"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        // these are called in no particular order
        SkImageRef_GlobalPool::SetRAMUsed(0);
        SkGraphics::PurgeFontCache();
    };
"
	
	
	
	
      end

      operation 1939596 "freeTextLayoutCaches"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        TextLayoutEngine::getInstance().purgeCaches();
    };
"
	
	
	
	
      end

      operation 1939724 "isOpaque"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jcanvas);
        SkCanvas* canvas = GraphicsJNI::getNativeCanvas(env, jcanvas);
        return canvas->getDevice()->accessBitmap(false).isOpaque();
    };
"
	
	
	
	
      end

      operation 1939852 "getWidth"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jcanvas);
        SkCanvas* canvas = GraphicsJNI::getNativeCanvas(env, jcanvas);
        return canvas->getDevice()->accessBitmap(false).width();
    };
"
	
	
	
	
      end

      operation 1939980 "getHeight"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jcanvas);
        SkCanvas* canvas = GraphicsJNI::getNativeCanvas(env, jcanvas);
        return canvas->getDevice()->accessBitmap(false).height();
    };
"
	
	
	
	
      end

      operation 1940108 "setBitmap"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "bitmap" explicit_type "SkBitmap"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        if (bitmap) {
            canvas->setBitmapDevice(*bitmap);
        } else {
            canvas->setDevice(NULL);
        }
    };
"
	
	
	
	
      end

      operation 1940236 "saveAll"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jcanvas);
        return GraphicsJNI::getNativeCanvas(env, jcanvas)->save();
    };
"
	
	
	
	
      end

      operation 1940364 "save"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "flags" explicit_type "SkCanvas::SaveFlags"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jcanvas);
        return GraphicsJNI::getNativeCanvas(env, jcanvas)->save(flags);
    };
"
	
	
	
	
      end

      operation 1940492 "saveLayer"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "bounds" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        SkRect* bounds_ = NULL;
        SkRect  storage;
        if (bounds != NULL) {
            GraphicsJNI::jrectf_to_rect(env, bounds, &storage);
            bounds_ = &storage;
        }
        return canvas->saveLayer(bounds_, paint, (SkCanvas::SaveFlags)flags);
    };
"
	
	
	
	
      end

      operation 1940620 "saveLayer4F"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "l" explicit_type "jfloat"
	  param in name "t" explicit_type "jfloat"
	  param in name "r" explicit_type "jfloat"
	  param in name "b" explicit_type "jfloat"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} * ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        SkRect bounds;
        bounds.set(SkFloatToScalar(l), SkFloatToScalar(t), SkFloatToScalar(r),
                   SkFloatToScalar(b));
        return canvas->saveLayer(&bounds, paint, (SkCanvas::SaveFlags)flags);
    };
"
	
	
	
	
      end

      operation 1940748 "saveLayerAlpha"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "bounds" explicit_type "jobject"
	  param in name "alpha" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        SkRect* bounds_ = NULL;
        SkRect  storage;
        if (bounds != NULL) {
            GraphicsJNI::jrectf_to_rect(env, bounds, &storage);
            bounds_ = &storage;
        }
        return canvas->saveLayerAlpha(bounds_, alpha,
                                      (SkCanvas::SaveFlags)flags);
    };
"
	
	
	
	
      end

      operation 1940876 "saveLayerAlpha4F"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "l" explicit_type "jfloat"
	  param in name "t" explicit_type "jfloat"
	  param in name "r" explicit_type "jfloat"
	  param in name "b" explicit_type "jfloat"
	  param in name "alpha" explicit_type "int"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        SkRect  bounds;
        bounds.set(SkFloatToScalar(l), SkFloatToScalar(t), SkFloatToScalar(r),
                   SkFloatToScalar(b));
        return canvas->saveLayerAlpha(&bounds, alpha,
                                      (SkCanvas::SaveFlags)flags);
    };
"
	
	
	
	
      end

      operation 1941004 "restore"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, jcanvas);
        SkCanvas* canvas = GraphicsJNI::getNativeCanvas(env, jcanvas);
        if (canvas->getSaveCount() <= 1) {  // cannot restore anymore
            doThrowISE(env, \"Underflow in restore\");
            return;
        }
        canvas->restore();
    };
"
	
	
	
	
      end

      operation 1941132 "getSaveCount"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jcanvas);
        return GraphicsJNI::getNativeCanvas(env, jcanvas)->getSaveCount();
    };
"
	
	
	
	
      end

      operation 1941260 "restoreToCount"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "restoreCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, jcanvas);
        SkCanvas* canvas = GraphicsJNI::getNativeCanvas(env, jcanvas);
        if (restoreCount < 1) {
            doThrowIAE(env, \"Underflow in restoreToCount\");
            return;
        }
        canvas->restoreToCount(restoreCount);
    };
"
	
	
	
	
      end

      operation 1941388 "translate"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "dx" explicit_type "jfloat"
	  param in name "dy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, jcanvas);
        SkScalar dx_ = SkFloatToScalar(dx);
        SkScalar dy_ = SkFloatToScalar(dy);
        (void)GraphicsJNI::getNativeCanvas(env, jcanvas)->translate(dx_, dy_);
    };
"
	
	
	
	
      end

      operation 1941516 "scale__FF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "sx" explicit_type "jfloat"
	  param in name "sy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, jcanvas);
        SkScalar sx_ = SkFloatToScalar(sx);
        SkScalar sy_ = SkFloatToScalar(sy);
        (void)GraphicsJNI::getNativeCanvas(env, jcanvas)->scale(sx_, sy_);
    };
"
	
	
	
	
      end

      operation 1941644 "rotate__F"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "degrees" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, jcanvas);
        SkScalar degrees_ = SkFloatToScalar(degrees);
        (void)GraphicsJNI::getNativeCanvas(env, jcanvas)->rotate(degrees_);
    };
"
	
	
	
	
      end

      operation 1941772 "skew__FF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "sx" explicit_type "jfloat"
	  param in name "sy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, jcanvas);
        SkScalar sx_ = SkFloatToScalar(sx);
        SkScalar sy_ = SkFloatToScalar(sy);
        (void)GraphicsJNI::getNativeCanvas(env, jcanvas)->skew(sx_, sy_);
    };
"
	
	
	
	
      end

      operation 1941900 "concat"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "matrix" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        canvas->concat(*matrix);
    };
"
	
	
	
	
      end

      operation 1942028 "setMatrix"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "matrix" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        if (NULL == matrix) {
            canvas->resetMatrix();
        } else {
            canvas->setMatrix(*matrix);
        }
    };
"
	
	
	
	
      end

      operation 1942156 "clipRect_FFFF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "left" explicit_type "jfloat"
	  param in name "top" explicit_type "jfloat"
	  param in name "right" explicit_type "jfloat"
	  param in name "bottom" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jcanvas);
        SkRect  r;
        r.set(SkFloatToScalar(left), SkFloatToScalar(top),
              SkFloatToScalar(right), SkFloatToScalar(bottom));
        SkCanvas* c = GraphicsJNI::getNativeCanvas(env, jcanvas);
        return c->clipRect(r);
    };
"
	
	
	
	
      end

      operation 1942284 "clipRect_IIII"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "left" explicit_type "jint"
	  param in name "top" explicit_type "jint"
	  param in name "right" explicit_type "jint"
	  param in name "bottom" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jcanvas);
        SkRect  r;
        r.set(SkIntToScalar(left), SkIntToScalar(top),
              SkIntToScalar(right), SkIntToScalar(bottom));
        return GraphicsJNI::getNativeCanvas(env, jcanvas)->clipRect(r);
    };
"
	
	
	
	
      end

      operation 1942412 "clipRect_RectF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "rectf" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jcanvas);
        NPE_CHECK_RETURN_ZERO(env, rectf);
        SkCanvas* c = GraphicsJNI::getNativeCanvas(env, jcanvas);
        SkRect tmp;
        return c->clipRect(*GraphicsJNI::jrectf_to_rect(env, rectf, &tmp));
    };
"
	
	
	
	
      end

      operation 1942540 "clipRect_Rect"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "rect" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jcanvas);
        NPE_CHECK_RETURN_ZERO(env, rect);
        SkCanvas* c = GraphicsJNI::getNativeCanvas(env, jcanvas);
        SkRect tmp;
        return c->clipRect(*GraphicsJNI::jrect_to_rect(env, rect, &tmp));
    };
"
	
	
	
	
      end

      operation 1942668 "clipRect"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "left" explicit_type "float"
	  param in name "top" explicit_type "float"
	  param in name "right" explicit_type "float"
	  param in name "bottom" explicit_type "float"
	  param in name "op" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        SkRect rect;
        rect.set(SkFloatToScalar(left), SkFloatToScalar(top),
                 SkFloatToScalar(right), SkFloatToScalar(bottom));
        return canvas->clipRect(rect, (SkRegion::Op)op);
    };
"
	
	
	
	
      end

      operation 1942796 "clipPath"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "path" explicit_type "SkPath"
	  param in name "op" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        return canvas->clipPath(*path, (SkRegion::Op)op);
    };
"
	
	
	
	
      end

      operation 1942924 "clipRegion"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "deviceRgn" explicit_type "SkRegion"
	  param in name "op" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        return canvas->clipRegion(*deviceRgn, (SkRegion::Op)op);
    };
"
	
	
	
	
      end

      operation 1943052 "setDrawFilter"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "filter" explicit_type "SkDrawFilter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        canvas->setDrawFilter(filter);
    };
"
	
	
	
	
      end

      operation 1943180 "quickReject__RectFI"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "rect" explicit_type "jobject"
	  param in name "edgetype" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkRect rect_;
        GraphicsJNI::jrectf_to_rect(env, rect, &rect_);
        return canvas->quickReject(rect_, (SkCanvas::EdgeType)edgetype);
    };
"
	
	
	
	
      end

      operation 1943308 "quickReject__PathI"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "path" explicit_type "SkPath"
	  param in name "edgetype" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        return canvas->quickReject(*path, (SkCanvas::EdgeType)edgetype);
    };
"
	
	
	
	
      end

      operation 1943436 "quickReject__FFFFI"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "left" explicit_type "jfloat"
	  param in name "top" explicit_type "jfloat"
	  param in name "right" explicit_type "jfloat"
	  param in name "bottom" explicit_type "jfloat"
	  param in name "edgetype" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        SkRect r;
        r.set(SkFloatToScalar(left), SkFloatToScalar(top),
              SkFloatToScalar(right), SkFloatToScalar(bottom));
        return canvas->quickReject(r, (SkCanvas::EdgeType)edgetype);
    };
"
	
	
	
	
      end

      operation 1943564 "drawRGB"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "r" explicit_type "jint"
	  param in name "g" explicit_type "jint"
	  param in name "b" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        canvas->drawARGB(0xFF, r, g, b);
    };
"
	
	
	
	
      end

      operation 1943692 "drawARGB"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "a" explicit_type "jint"
	  param in name "r" explicit_type "jint"
	  param in name "g" explicit_type "jint"
	  param in name "b" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        canvas->drawARGB(a, r, g, b);
    };
"
	
	
	
	
      end

      operation 1943820 "drawColor__I"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "color" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        canvas->drawColor(color);
    };
"
	
	
	
	
      end

      operation 1943948 "drawColor__II"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "color" explicit_type "jint"
	  param in name "mode" explicit_type "SkPorterDuff::Mode"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        canvas->drawColor(color, SkPorterDuff::ToXfermodeMode(mode));
    };
"
	
	
	
	
      end

      operation 1944076 "drawPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        canvas->drawPaint(*paint);
    };
"
	
	
	
	
      end

      operation 1944204 "doPoints"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "jptsArray" explicit_type "jfloatArray"
	  param in name "offset" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "jpaint" explicit_type "jobject"
	  param in name "mode" explicit_type "SkCanvas::PointMode"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, jcanvas);
        NPE_CHECK_RETURN_VOID(env, jptsArray);
        NPE_CHECK_RETURN_VOID(env, jpaint);
        SkCanvas* canvas = GraphicsJNI::getNativeCanvas(env, jcanvas);
        const SkPaint& paint = *GraphicsJNI::getNativePaint(env, jpaint);
        
        AutoJavaFloatArray autoPts(env, jptsArray);
        float* floats = autoPts.ptr();
        const int length = autoPts.length();
        
        if ((offset | count) < 0 || offset + count > length) {
            doThrowAIOOBE(env);
            return;
        }
        
        // now convert the floats into SkPoints
        count >>= 1;    // now it is the number of points
        SkAutoSTMalloc<32, SkPoint> storage(count);
        SkPoint* pts = storage.get();
        const float* src = floats + offset;
        for (int i = 0; i < count; i++) {
            pts[i].set(SkFloatToScalar(src[0]), SkFloatToScalar(src[1]));
            src += 2;
        }        
        canvas->drawPoints(mode, count, pts, paint);
    };
"
	
	
	
	
      end

      operation 1944332 "drawPoints"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "jptsArray" explicit_type "jfloatArray"
	  param in name "offset" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "jpaint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        doPoints(env, jcanvas, jptsArray, offset, count, jpaint,
                 SkCanvas::kPoints_PointMode);
    };
"
	
	
	
	
      end

      operation 1944460 "drawLines"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "jptsArray" explicit_type "jfloatArray"
	  param in name "offset" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "jpaint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        doPoints(env, jcanvas, jptsArray, offset, count, jpaint,
                 SkCanvas::kLines_PointMode);
    };
"
	
	
	
	
      end

      operation 1944588 "drawPoint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param in name "x" explicit_type "float"
	  param in name "y" explicit_type "float"
	  param in name "jpaint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, jcanvas);
        NPE_CHECK_RETURN_VOID(env, jpaint);
        SkCanvas* canvas = GraphicsJNI::getNativeCanvas(env, jcanvas);
        const SkPaint& paint = *GraphicsJNI::getNativePaint(env, jpaint);
        
        canvas->drawPoint(SkFloatToScalar(x), SkFloatToScalar(y), paint);
    };
"
	
	
	
	
      end

      operation 1944716 "drawLine__FFFFPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "startX" explicit_type "jfloat"
	  param in name "startY" explicit_type "jfloat"
	  param in name "stopX" explicit_type "jfloat"
	  param in name "stopY" explicit_type "jfloat"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        canvas->drawLine(SkFloatToScalar(startX), SkFloatToScalar(startY),
                         SkFloatToScalar(stopX), SkFloatToScalar(stopY),
                         *paint);
    };
"
	
	
	
	
      end

      operation 1944844 "drawRect__RectFPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "rect" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkRect rect_;
        GraphicsJNI::jrectf_to_rect(env, rect, &rect_);
        canvas->drawRect(rect_, *paint);
    };
"
	
	
	
	
      end

      operation 1944972 "drawRect__FFFFPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "left" explicit_type "jfloat"
	  param in name "top" explicit_type "jfloat"
	  param in name "right" explicit_type "jfloat"
	  param in name "bottom" explicit_type "jfloat"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        SkScalar left_ = SkFloatToScalar(left);
        SkScalar top_ = SkFloatToScalar(top);
        SkScalar right_ = SkFloatToScalar(right);
        SkScalar bottom_ = SkFloatToScalar(bottom);
        canvas->drawRectCoords(left_, top_, right_, bottom_, *paint);
    };
"
	
	
	
	
      end

      operation 1945100 "drawOval"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "joval" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkRect oval;
        GraphicsJNI::jrectf_to_rect(env, joval, &oval);
        canvas->drawOval(oval, *paint);
    };
"
	
	
	
	
      end

      operation 1945228 "drawCircle"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "cx" explicit_type "jfloat"
	  param in name "cy" explicit_type "jfloat"
	  param in name "radius" explicit_type "jfloat"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        canvas->drawCircle(SkFloatToScalar(cx), SkFloatToScalar(cy),
                           SkFloatToScalar(radius), *paint);
    };
"
	
	
	
	
      end

      operation 1945356 "drawArc"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "joval" explicit_type "jobject"
	  param in name "startAngle" explicit_type "jfloat"
	  param in name "sweepAngle" explicit_type "jfloat"
	  param in name "useCenter" explicit_type "jboolean"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        SkRect oval;
        GraphicsJNI::jrectf_to_rect(env, joval, &oval);
        canvas->drawArc(oval, SkFloatToScalar(startAngle),
                        SkFloatToScalar(sweepAngle), useCenter, *paint);
    };
"
	
	
	
	
      end

      operation 1945484 "drawRoundRect"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "jrect" explicit_type "jobject"
	  param in name "rx" explicit_type "jfloat"
	  param in name "ry" explicit_type "jfloat"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkRect rect;
        GraphicsJNI::jrectf_to_rect(env, jrect, &rect);
        canvas->drawRoundRect(rect, SkFloatToScalar(rx), SkFloatToScalar(ry),
                              *paint);
    };
"
	
	
	
	
      end

      operation 1945612 "drawPath"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "path" explicit_type "SkPath"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        canvas->drawPath(*path, *paint);
    };
"
	
	
	
	
      end

      operation 1945740 "drawPicture"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "picture" explicit_type "SkPicture"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        SkASSERT(canvas);
        SkASSERT(picture);
        
#ifdef TIME_DRAW
        SkMSec now = get_thread_msec(); //SkTime::GetMSecs();
#endif
        canvas->drawPicture(*picture);
#ifdef TIME_DRAW
        ALOGD(\"---- picture playback %d ms\\n\", get_thread_msec() - now);
#endif
    };
"
	
	
	
	
      end

      operation 1945868 "drawBitmap__BitmapFFPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 10
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jcanvas" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "bitmap" explicit_type "SkBitmap"
	  param in name "left" explicit_type "jfloat"
	  param in name "top" explicit_type "jfloat"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "canvasDensity" explicit_type "jint"
	  param in name "screenDensity" explicit_type "jint"
	  param in name "bitmapDensity" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}${)}${const}${volatile}${throw}${abstract} {
        SkScalar left_ = SkFloatToScalar(left);
        SkScalar top_ = SkFloatToScalar(top);

        if (canvasDensity == bitmapDensity || canvasDensity == 0
                || bitmapDensity == 0) {
            if (screenDensity != 0 && screenDensity != bitmapDensity) {
                SkPaint filteredPaint;
                if (paint) {
                    filteredPaint = *paint;
                }
                filteredPaint.setFilterBitmap(true);
                canvas->drawBitmap(*bitmap, left_, top_, &filteredPaint);
            } else {
                canvas->drawBitmap(*bitmap, left_, top_, paint);
            }
        } else {
            canvas->save();
            SkScalar scale = SkFloatToScalar(canvasDensity / (float)bitmapDensity);
            canvas->translate(left_, top_);
            canvas->scale(scale, scale);

            SkPaint filteredPaint;
            if (paint) {
                filteredPaint = *paint;
            }
            filteredPaint.setFilterBitmap(true);

            canvas->drawBitmap(*bitmap, 0, 0, &filteredPaint);

            canvas->restore();
        }
    };
"
	
	
	
	
      end

      operation 1945996 "doDrawBitmap"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "bitmap" explicit_type "SkBitmap"
	  param in name "srcIRect" explicit_type "jobject"
	  param in name "dst" explicit_type "SkRect"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "screenDensity" explicit_type "jint"
	  param in name "bitmapDensity" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} & ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        SkIRect    src, *srcPtr = NULL;

        if (NULL != srcIRect) {
            GraphicsJNI::jrect_to_irect(env, srcIRect, &src);
            srcPtr = &src;
        }
        
        if (screenDensity != 0 && screenDensity != bitmapDensity) {
            SkPaint filteredPaint;
            if (paint) {
                filteredPaint = *paint;
            }
            filteredPaint.setFilterBitmap(true);
            canvas->drawBitmapRect(*bitmap, srcPtr, dst, &filteredPaint);
        } else {
            canvas->drawBitmapRect(*bitmap, srcPtr, dst, paint);
        }
    };
"
	
	
	
	
      end

      operation 1946124 "drawBitmapRF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "bitmap" explicit_type "SkBitmap"
	  param in name "srcIRect" explicit_type "jobject"
	  param in name "dstRectF" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "screenDensity" explicit_type "jint"
	  param in name "bitmapDensity" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        SkRect      dst;
        GraphicsJNI::jrectf_to_rect(env, dstRectF, &dst);
        doDrawBitmap(env, canvas, bitmap, srcIRect, dst, paint,
                screenDensity, bitmapDensity);
    };
"
	
	
	
	
      end

      operation 1946252 "drawBitmapRR"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "bitmap" explicit_type "SkBitmap"
	  param in name "srcIRect" explicit_type "jobject"
	  param in name "dstRect" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "screenDensity" explicit_type "jint"
	  param in name "bitmapDensity" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        SkRect      dst;
        GraphicsJNI::jrect_to_rect(env, dstRect, &dst);
        doDrawBitmap(env, canvas, bitmap, srcIRect, dst, paint,
                screenDensity, bitmapDensity);
    };
"
	
	
	
	
      end

      operation 1946380 "drawBitmapArray"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 12
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "jcolors" explicit_type "jintArray"
	  param in name "offset" explicit_type "int"
	  param in name "stride" explicit_type "int"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param in name "width" explicit_type "int"
	  param in name "height" explicit_type "int"
	  param in name "hasAlpha" explicit_type "jboolean"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}, ${t10} ${p10}${v10}, ${t11} * ${p11}${v11}${)}${const}${volatile}${throw}${abstract} {
        SkBitmap    bitmap;
        
        bitmap.setConfig(hasAlpha ? SkBitmap::kARGB_8888_Config :
                         SkBitmap::kRGB_565_Config, width, height);
        if (!bitmap.allocPixels()) {
            return;
        }
        
        if (!GraphicsJNI::SetPixels(env, jcolors, offset, stride,
                                    0, 0, width, height, bitmap)) {
            return;
        }
        
        canvas->drawBitmap(bitmap, SkFloatToScalar(x), SkFloatToScalar(y),
                           paint);
    };
"
	
	
	
	
      end

      operation 1946508 "drawBitmapMatrix"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "bitmap" explicit_type "SkBitmap"
	  param in name "matrix" explicit_type "SkMatrix"
	  param in name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}, const ${t4} * ${p4}${v4}, const ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        canvas->drawBitmapMatrix(*bitmap, *matrix, paint);
    };
"
	
	
	
	
      end

      operation 1946636 "drawBitmapMesh"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 11
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "bitmap" explicit_type "SkBitmap"
	  param in name "meshWidth" explicit_type "int"
	  param in name "meshHeight" explicit_type "int"
	  param in name "jverts" explicit_type "jfloatArray"
	  param in name "vertIndex" explicit_type "int"
	  param in name "jcolors" explicit_type "jintArray"
	  param in name "colorIndex" explicit_type "int"
	  param in name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}, const ${t10} * ${p10}${v10}${)}${const}${volatile}${throw}${abstract} {

        const int ptCount = (meshWidth + 1) * (meshHeight + 1);
        const int indexCount = meshWidth * meshHeight * 6;

        AutoJavaFloatArray  vertA(env, jverts, vertIndex + (ptCount << 1));
        AutoJavaIntArray    colorA(env, jcolors, colorIndex + ptCount);
        
        /*  Our temp storage holds 2 or 3 arrays.
            texture points [ptCount * sizeof(SkPoint)]
            optionally vertex points [ptCount * sizeof(SkPoint)] if we need a
                copy to convert from float to fixed
            indices [ptCount * sizeof(uint16_t)]
        */
        ssize_t storageSize = ptCount * sizeof(SkPoint); // texs[]
#ifdef SK_SCALAR_IS_FIXED
        storageSize += ptCount * sizeof(SkPoint);  // storage for verts
#endif
        storageSize += indexCount * sizeof(uint16_t);  // indices[]

        SkAutoMalloc storage(storageSize);
        SkPoint* texs = (SkPoint*)storage.get();
        SkPoint* verts;
        uint16_t* indices;
#ifdef SK_SCALAR_IS_FLOAT
        verts = (SkPoint*)(vertA.ptr() + vertIndex);
        indices = (uint16_t*)(texs + ptCount);
#else
        verts = texs + ptCount;
        indices = (uint16_t*)(verts + ptCount);
        // convert floats to fixed
        {
            const float* src = vertA.ptr() + vertIndex;
            for (int i = 0; i < ptCount; i++) {
                verts[i].set(SkFloatToFixed(src[0]), SkFloatToFixed(src[1]));
                src += 2;
            }
        }
#endif

        // cons up texture coordinates and indices
        {
            const SkScalar w = SkIntToScalar(bitmap->width());
            const SkScalar h = SkIntToScalar(bitmap->height());
            const SkScalar dx = w / meshWidth;
            const SkScalar dy = h / meshHeight;
            
            SkPoint* texsPtr = texs;
            SkScalar y = 0;
            for (int i = 0; i <= meshHeight; i++) {
                if (i == meshHeight) {
                    y = h;  // to ensure numerically we hit h exactly
                }
                SkScalar x = 0;
                for (int j = 0; j < meshWidth; j++) {
                    texsPtr->set(x, y);
                    texsPtr += 1;
                    x += dx;
                }
                texsPtr->set(w, y);
                texsPtr += 1;
                y += dy;
            }
            SkASSERT(texsPtr - texs == ptCount);
        }
        
        // cons up indices
        {
            uint16_t* indexPtr = indices;
            int index = 0;
            for (int i = 0; i < meshHeight; i++) {
                for (int j = 0; j < meshWidth; j++) {
                    // lower-left triangle
                    *indexPtr++ = index;
                    *indexPtr++ = index + meshWidth + 1;
                    *indexPtr++ = index + meshWidth + 2;
                    // upper-right triangle
                    *indexPtr++ = index;
                    *indexPtr++ = index + meshWidth + 2;
                    *indexPtr++ = index + 1;
                    // bump to the next cell
                    index += 1;
                }
                // bump to the next row
                index += 1;
            }
            SkASSERT(indexPtr - indices == indexCount);
            SkASSERT((char*)indexPtr - (char*)storage.get() == storageSize);
        }

        // double-check that we have legal indices
#ifdef SK_DEBUG
        {
            for (int i = 0; i < indexCount; i++) {
                SkASSERT((unsigned)indices[i] < (unsigned)ptCount);
            }
        }
#endif

        // cons-up a shader for the bitmap
        SkPaint tmpPaint;
        if (paint) {
            tmpPaint = *paint;
        }
        SkShader* shader = SkShader::CreateBitmapShader(*bitmap,
                        SkShader::kClamp_TileMode, SkShader::kClamp_TileMode);
        SkSafeUnref(tmpPaint.setShader(shader));

        canvas->drawVertices(SkCanvas::kTriangles_VertexMode, ptCount, verts,
                             texs, (const SkColor*)colorA.ptr(), NULL, indices,
                             indexCount, tmpPaint);
    };
"
	
	
	
	
      end

      operation 1946764 "drawVertices"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 15
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "mode" explicit_type "SkCanvas::VertexMode"
	  param in name "vertexCount" explicit_type "int"
	  param in name "jverts" explicit_type "jfloatArray"
	  param in name "vertIndex" explicit_type "int"
	  param in name "jtexs" explicit_type "jfloatArray"
	  param in name "texIndex" explicit_type "int"
	  param in name "jcolors" explicit_type "jintArray"
	  param in name "colorIndex" explicit_type "int"
	  param in name "jindices" explicit_type "jshortArray"
	  param in name "indexIndex" explicit_type "int"
	  param in name "indexCount" explicit_type "int"
	  param in name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}, ${t10} ${p10}${v10}, ${t11} ${p11}${v11}, ${t12} ${p12}${v12}, ${t13} ${p13}${v13}, const ${t14} * ${p14}${v14}${)}${const}${volatile}${throw}${abstract} {

        AutoJavaFloatArray  vertA(env, jverts, vertIndex + vertexCount);
        AutoJavaFloatArray  texA(env, jtexs, texIndex + vertexCount);
        AutoJavaIntArray    colorA(env, jcolors, colorIndex + vertexCount);
        AutoJavaShortArray  indexA(env, jindices, indexIndex + indexCount);

        const int ptCount = vertexCount >> 1;

        SkPoint* verts;
        SkPoint* texs = NULL;
#ifdef SK_SCALAR_IS_FLOAT
        verts = (SkPoint*)(vertA.ptr() + vertIndex);
        if (jtexs != NULL) {
            texs = (SkPoint*)(texA.ptr() + texIndex);
        }
#else
        int count = ptCount;    // for verts
        if (jtexs != NULL) {
            count += ptCount;   // += for texs
        }
        SkAutoMalloc storage(count * sizeof(SkPoint));
        verts = (SkPoint*)storage.get();        
        const float* src = vertA.ptr() + vertIndex;
        for (int i = 0; i < ptCount; i++) {
            verts[i].set(SkFloatToFixed(src[0]), SkFloatToFixed(src[1]));
            src += 2;
        }
        if (jtexs != NULL) {
            texs = verts + ptCount;
            src = texA.ptr() + texIndex;
            for (int i = 0; i < ptCount; i++) {
                texs[i].set(SkFloatToFixed(src[0]), SkFloatToFixed(src[1]));
                src += 2;
            }
        }
#endif

        const SkColor* colors = NULL;
        const uint16_t* indices = NULL;
        if (jcolors != NULL) {
            colors = (const SkColor*)(colorA.ptr() + colorIndex);
        }
        if (jindices != NULL) {
            indices = (const uint16_t*)(indexA.ptr() + indexIndex);
        }

        canvas->drawVertices(mode, ptCount, verts, texs, colors, NULL,
                             indices, indexCount, *paint);
    };
"
	
	
	
	
      end

      operation 1946892 "drawText___CIIFFIPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 10
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "text" explicit_type "jcharArray"
	  param in name "index" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param in name "flags" explicit_type "int"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} * ${p9}${v9}${)}${const}${volatile}${throw}${abstract} {
        jchar* textArray = env->GetCharArrayElements(text, NULL);
        drawTextWithGlyphs(canvas, textArray + index, 0, count, x, y, flags, paint);
        env->ReleaseCharArrayElements(text, textArray, JNI_ABORT);
    };
"
	
	
	
	
      end

      operation 1947020 "drawText__StringIIFFIPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 10
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "text" explicit_type "jstring"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param in name "flags" explicit_type "int"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} * ${p9}${v9}${)}${const}${volatile}${throw}${abstract} {
        const jchar* textArray = env->GetStringChars(text, NULL);
        drawTextWithGlyphs(canvas, textArray, start, end, x, y, flags, paint);
        env->ReleaseStringChars(text, textArray);
    };
"
	
	
	
	
      end

      operation 1947148 "drawTextWithGlyphs"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 8
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "textArray" explicit_type "jchar"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param in name "flags" explicit_type "int"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {

        jint count = end - start;
        drawTextWithGlyphs(canvas, textArray + start, 0, count, count, x, y, flags, paint);
    };
"
	
	
	
	
      end

      operation 1947276 "drawTextWithGlyphs"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 9
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "textArray" explicit_type "jchar"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "contextCount" explicit_type "int"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param in name "flags" explicit_type "int"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} * ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {

        sp<TextLayoutValue> value = TextLayoutEngine::getInstance().getValue(paint,
                textArray, start, count, contextCount, flags);
        if (value == NULL) {
            return;
        }
        SkPaint::Align align = paint->getTextAlign();
        if (align == SkPaint::kCenter_Align) {
            x -= 0.5 * value->getTotalAdvance();
        } else if (align == SkPaint::kRight_Align) {
            x -= value->getTotalAdvance();
        }
        paint->setTextAlign(SkPaint::kLeft_Align);
        doDrawGlyphsPos(canvas, value->getGlyphs(), value->getPos(), 0, value->getGlyphsCount(), x, y, flags, paint);
        doDrawTextDecorations(canvas, x, y, value->getTotalAdvance(), paint);
        paint->setTextAlign(align);
    };
"
	
	
	
	
      end

      operation 1947404 "doDrawTextDecorations"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param in name "length" explicit_type "jfloat"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
    uint32_t flags;
    SkDrawFilter* drawFilter = canvas->getDrawFilter();
    if (drawFilter) {
        SkPaint paintCopy(*paint);
        drawFilter->filter(&paintCopy, SkDrawFilter::kText_Type);
        flags = paintCopy.getFlags();
    } else {
        flags = paint->getFlags();
    }
    if (flags & (SkPaint::kUnderlineText_Flag | SkPaint::kStrikeThruText_Flag)) {
        SkScalar left = SkFloatToScalar(x);
        SkScalar right = SkFloatToScalar(x + length);
        float textSize = paint->getTextSize();
        float strokeWidth = fmax(textSize * kStdUnderline_Thickness, 1.0f);
        if (flags & SkPaint::kUnderlineText_Flag) {
            SkScalar top = SkFloatToScalar(y + textSize * kStdUnderline_Offset
                    - 0.5f * strokeWidth);
            SkScalar bottom = SkFloatToScalar(y + textSize * kStdUnderline_Offset
                    + 0.5f * strokeWidth);
            canvas->drawRectCoords(left, top, right, bottom, *paint);
        }
        if (flags & SkPaint::kStrikeThruText_Flag) {
            SkScalar top = SkFloatToScalar(y + textSize * kStdStrikeThru_Offset
                    - 0.5f * strokeWidth);
            SkScalar bottom = SkFloatToScalar(y + textSize * kStdStrikeThru_Offset
                    + 0.5f * strokeWidth);
            canvas->drawRectCoords(left, top, right, bottom, *paint);
        }
    }
};
"
	
	
	
	
      end

      operation 1947532 "doDrawGlyphs"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 8
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "glyphArray" explicit_type "jchar"
	  param in name "index" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param in name "flags" explicit_type "int"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        // Beware: this needs Glyph encoding (already done on the Paint constructor)
        canvas->drawText(glyphArray + index * 2, count * 2, x, y, *paint);
    };
"
	
	
	
	
      end

      operation 1947660 "doDrawGlyphsPos"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 9
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "glyphArray" explicit_type "jchar"
	  param in name "posArray" explicit_type "jfloat"
	  param in name "index" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param in name "flags" explicit_type "int"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} * ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        SkPoint* posPtr = new SkPoint[count];
        for (int indx = 0; indx < count; indx++) {
            posPtr[indx].fX = SkFloatToScalar(x + posArray[indx * 2]);
            posPtr[indx].fY = SkFloatToScalar(y + posArray[indx * 2 + 1]);
        }
        canvas->drawPosText(glyphArray, count << 1, posPtr, *paint);
        delete[] posPtr;
    };
"
	
	
	
	
      end

      operation 1947788 "drawTextRun___CIIIIFFIPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 12
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "text" explicit_type "jcharArray"
	  param in name "index" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "contextIndex" explicit_type "int"
	  param in name "contextCount" explicit_type "int"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param in name "dirFlags" explicit_type "int"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}, ${t10} ${p10}${v10}, ${t11} * ${p11}${v11}${)}${const}${volatile}${throw}${abstract} {

        jchar* chars = env->GetCharArrayElements(text, NULL);
        drawTextWithGlyphs(canvas, chars + contextIndex, index - contextIndex,
                count, contextCount, x, y, dirFlags, paint);
        env->ReleaseCharArrayElements(text, chars, JNI_ABORT);
    };
"
	
	
	
	
      end

      operation 1947916 "drawTextRun__StringIIIIFFIPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 12
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "obj" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "text" explicit_type "jstring"
	  param in name "start" explicit_type "jint"
	  param in name "end" explicit_type "jint"
	  param in name "contextStart" explicit_type "jint"
	  param in name "contextEnd" explicit_type "jint"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param in name "dirFlags" explicit_type "jint"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}, ${t10} ${p10}${v10}, ${t11} * ${p11}${v11}${)}${const}${volatile}${throw}${abstract} {

        jint count = end - start;
        jint contextCount = contextEnd - contextStart;
        const jchar* chars = env->GetStringChars(text, NULL);
        drawTextWithGlyphs(canvas, chars + contextStart, start - contextStart,
                count, contextCount, x, y, dirFlags, paint);
        env->ReleaseStringChars(text, chars);
    };
"
	
	
	
	
      end

      operation 1948044 "drawPosText___CII_FPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "text" explicit_type "jcharArray"
	  param in name "index" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "pos" explicit_type "jfloatArray"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        jchar* textArray = text ? env->GetCharArrayElements(text, NULL) : NULL;
        jsize textCount = text ? env->GetArrayLength(text) : NULL;
        float* posArray = pos ? env->GetFloatArrayElements(pos, NULL) : NULL;
        int posCount = pos ? env->GetArrayLength(pos) >> 1: 0;
        SkPoint* posPtr = posCount > 0 ? new SkPoint[posCount] : NULL;
        int indx;
        for (indx = 0; indx < posCount; indx++) {
            posPtr[indx].fX = SkFloatToScalar(posArray[indx << 1]);
            posPtr[indx].fY = SkFloatToScalar(posArray[(indx << 1) + 1]);
        }
        
        SkPaint::TextEncoding encoding = paint->getTextEncoding();
        paint->setTextEncoding(SkPaint::kUTF16_TextEncoding);
        canvas->drawPosText(textArray + index, count << 1, posPtr, *paint);
        paint->setTextEncoding(encoding);
        
        if (text) {
            env->ReleaseCharArrayElements(text, textArray, 0);
        }
        if (pos) {
            env->ReleaseFloatArrayElements(pos, posArray, 0);
        }
        delete[] posPtr;
    };
"
	
	
	
	
      end

      operation 1948172 "drawPosText__String_FPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "text" explicit_type "jstring"
	  param in name "pos" explicit_type "jfloatArray"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        const void* text_ = text ? env->GetStringChars(text, NULL) : NULL;
        int byteLength = text ? env->GetStringLength(text) : 0;
        float* posArray = pos ? env->GetFloatArrayElements(pos, NULL) : NULL;
        int posCount = pos ? env->GetArrayLength(pos) >> 1: 0;
        SkPoint* posPtr = posCount > 0 ? new SkPoint[posCount] : NULL;

        for (int indx = 0; indx < posCount; indx++) {
            posPtr[indx].fX = SkFloatToScalar(posArray[indx << 1]);
            posPtr[indx].fY = SkFloatToScalar(posArray[(indx << 1) + 1]);
        }

        SkPaint::TextEncoding encoding = paint->getTextEncoding();
        paint->setTextEncoding(SkPaint::kUTF16_TextEncoding);
        canvas->drawPosText(text_, byteLength << 1, posPtr, *paint);
        paint->setTextEncoding(encoding);

        if (text) {
            env->ReleaseStringChars(text, (const jchar*) text_);
        }
        if (pos) {
            env->ReleaseFloatArrayElements(pos, posArray, 0);
        }
        delete[] posPtr;
    };
"
	
	
	
	
      end

      operation 1948300 "drawTextOnPath___CIIPathFFPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 11
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "text" explicit_type "jcharArray"
	  param in name "index" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param inout name "path" explicit_type "SkPath"
	  param in name "hOffset" explicit_type "jfloat"
	  param in name "vOffset" explicit_type "jfloat"
	  param in name "bidiFlags" explicit_type "jint"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} * ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}, ${t10} * ${p10}${v10}${)}${const}${volatile}${throw}${abstract} {

        jchar* textArray = env->GetCharArrayElements(text, NULL);
        TextLayout::drawTextOnPath(paint, textArray + index, count, bidiFlags, hOffset, vOffset,
                                   path, canvas);
        env->ReleaseCharArrayElements(text, textArray, 0);
    };
"
	
	
	
	
      end

      operation 1948428 "drawTextOnPath__StringPathFFPaint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "text" explicit_type "jstring"
	  param inout name "path" explicit_type "SkPath"
	  param in name "hOffset" explicit_type "jfloat"
	  param in name "vOffset" explicit_type "jfloat"
	  param in name "bidiFlags" explicit_type "jint"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} * ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        const jchar* text_ = env->GetStringChars(text, NULL);
        int count = env->GetStringLength(text);
        TextLayout::drawTextOnPath(paint, text_, count, bidiFlags, hOffset, vOffset,
                                   path, canvas);
        env->ReleaseStringChars(text, text_);
    };
"
	
	
	
	
      end

      operation 1948556 "getClipBounds"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param in name "bounds" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        SkRect   r;
        SkIRect ir;
        bool     result = canvas->getClipBounds(&r, SkCanvas::kBW_EdgeType);

        if (!result) {
            r.setEmpty();
        }
        r.round(&ir);
        (void)GraphicsJNI::irect_to_jrect(ir, env, bounds);
        return result;
    };
"
	
	
	
	
      end

      operation 1948684 "getCTM"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "matrix" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        *matrix = canvas->getTotalMatrix();
    };
"
	
	
	
	
      end

      classrelation 3525132 // <directional composition>
	relation 3525132 *-->
	  a role_name "" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 3525132 // <directional composition>
	  b parent class_ref 1695884 // SkCanvas
      end
    end

    class 639756 "SkColorFilterGlue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1948812 "finalizer"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkColorFilter"
	  param inout name "f" explicit_type "SkiaColorFilter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        SkSafeUnref(obj);
        // f == NULL when not !USE_OPENGL_RENDERER, so no need to delete outside the ifdef
#ifdef USE_OPENGL_RENDERER
        if (android::uirenderer::Caches::hasInstance()) {
            android::uirenderer::Caches::getInstance().resourceCache.destructor(f);
        } else {
            delete f;
        }
#endif
    };
"
	
	
	
	
      end

      operation 1948940 "glCreatePorterDuffFilter"
	class_operation cpp_inline public explicit_return_type "SkiaColorFilter"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "skFilter" explicit_type "SkColorFilter"
	  param in name "srcColor" explicit_type "jint"
	  param in name "mode" explicit_type "SkPorterDuff::Mode"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
#ifdef USE_OPENGL_RENDERER
        return new SkiaBlendFilter(skFilter, srcColor, SkPorterDuff::ToXfermodeMode(mode));
#else
        return NULL;
#endif
    };
"
	
	
	
	
      end

      operation 1949068 "glCreateLightingFilter"
	class_operation cpp_inline public explicit_return_type "SkiaColorFilter"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "skFilter" explicit_type "SkColorFilter"
	  param in name "mul" explicit_type "jint"
	  param in name "add" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
#ifdef USE_OPENGL_RENDERER
        return new SkiaLightingFilter(skFilter, mul, add);
#else
        return NULL;
#endif
    };
"
	
	
	
	
      end

      operation 1949196 "glCreateColorMatrixFilter"
	class_operation cpp_inline public explicit_return_type "SkiaColorFilter"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "skFilter" explicit_type "SkColorFilter"
	  param in name "jarray" explicit_type "jfloatArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
#ifdef USE_OPENGL_RENDERER
        AutoJavaFloatArray autoArray(env, jarray, 20);
        const float* src = autoArray.ptr();

        float* colorMatrix = new float[16];
        memcpy(colorMatrix, src, 4 * sizeof(float));
        memcpy(&colorMatrix[4], &src[5], 4 * sizeof(float));
        memcpy(&colorMatrix[8], &src[10], 4 * sizeof(float));
        memcpy(&colorMatrix[12], &src[15], 4 * sizeof(float));

        float* colorVector = new float[4];
        colorVector[0] = src[4];
        colorVector[1] = src[9];
        colorVector[2] = src[14];
        colorVector[3] = src[19];

        return new SkiaColorMatrixFilter(skFilter, colorMatrix, colorVector);
#else
        return NULL;
#endif
    };
"
	
	
	
	
      end

      operation 1949324 "CreatePorterDuffFilter"
	class_operation cpp_inline public explicit_return_type "SkColorFilter"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param in name "srcColor" explicit_type "jint"
	  param in name "mode" explicit_type "SkPorterDuff::Mode"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return SkColorFilter::CreateModeFilter(srcColor, SkPorterDuff::ToXfermodeMode(mode));
    };
"
	
	
	
	
      end

      operation 1949452 "CreateLightingFilter"
	class_operation cpp_inline public explicit_return_type "SkColorFilter"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param in name "mul" explicit_type "jint"
	  param in name "add" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return SkColorFilter::CreateLightingFilter(mul, add);
    };
"
	
	
	
	
      end

      operation 1949580 "CreateColorMatrixFilter"
	class_operation cpp_inline public explicit_return_type "SkColorFilter"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param in name "jarray" explicit_type "jfloatArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        AutoJavaFloatArray autoArray(env, jarray, 20);
        const float* src = autoArray.ptr();

#ifdef SK_SCALAR_IS_FIXED
        SkFixed array[20];
        for (int i = 0; i < 20; i++) {
            array[i] = SkFloatToScalar(src[i]);
        }
        return new SkColorMatrixFilter(array);
#else
        return new SkColorMatrixFilter(src);
#endif
    };
"
	
	
	
	
      end
    end

    class 640396 "SkDrawFilterGlue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1950860 "finalizer"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkDrawFilter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SkSafeUnref(obj);
    };
"
	
	
	
	
      end

      operation 1950988 "CreatePaintFlagsDF"
	class_operation cpp_inline public explicit_return_type "SkDrawFilter"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param in name "clearFlags" explicit_type "int"
	  param in name "setFlags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        // trim off any out-of-range bits
        clearFlags &= SkPaint::kAllFlags;
        setFlags &= SkPaint::kAllFlags;

        if (clearFlags | setFlags) {
            return new SkPaintFlagsDrawFilter(clearFlags, setFlags);
        } else {
            return NULL;
        }
    };
"
	
	
	
	
      end
    end

    class 640780 "SkMatrixGlue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1952140 "finalizer"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        delete obj;
    };
"
	
	
	
	
      end

      operation 1952268 "create"
	class_operation cpp_inline public explicit_return_type "SkMatrix"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param in name "src" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SkMatrix* obj = new SkMatrix();
        if (src)
            *obj = *src;
        else
            obj->reset();
        return obj;
    };
"
	
	
	
	
      end

      operation 1952396 "isIdentity"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return obj->isIdentity();
    };
"
	
	
	
	
      end

      operation 1952524 "rectStaysRect"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return obj->rectStaysRect();
    };
"
	
	
	
	
      end

      operation 1952652 "reset"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        obj->reset();
    };
"
	
	
	
	
      end

      operation 1952780 "set"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param inout name "other" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        *obj = *other;
    };
"
	
	
	
	
      end

      operation 1952908 "setTranslate"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "dx" explicit_type "jfloat"
	  param in name "dy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar dx_ = SkFloatToScalar(dx);
        SkScalar dy_ = SkFloatToScalar(dy);
        obj->setTranslate(dx_, dy_);
    };
"
	
	
	
	
      end

      operation 1953036 "setScale__FFFF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "sx" explicit_type "jfloat"
	  param in name "sy" explicit_type "jfloat"
	  param in name "px" explicit_type "jfloat"
	  param in name "py" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkScalar sx_ = SkFloatToScalar(sx);
        SkScalar sy_ = SkFloatToScalar(sy);
        SkScalar px_ = SkFloatToScalar(px);
        SkScalar py_ = SkFloatToScalar(py);
        obj->setScale(sx_, sy_, px_, py_);
    };
"
	
	
	
	
      end

      operation 1953164 "setScale__FF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "sx" explicit_type "jfloat"
	  param in name "sy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar sx_ = SkFloatToScalar(sx);
        SkScalar sy_ = SkFloatToScalar(sy);
        obj->setScale(sx_, sy_);
    };
"
	
	
	
	
      end

      operation 1953292 "setRotate__FFF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "degrees" explicit_type "jfloat"
	  param in name "px" explicit_type "jfloat"
	  param in name "py" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        SkScalar degrees_ = SkFloatToScalar(degrees);
        SkScalar px_ = SkFloatToScalar(px);
        SkScalar py_ = SkFloatToScalar(py);
        obj->setRotate(degrees_, px_, py_);
    };
"
	
	
	
	
      end

      operation 1953420 "setRotate__F"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "degrees" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        SkScalar degrees_ = SkFloatToScalar(degrees);
        obj->setRotate(degrees_);
    };
"
	
	
	
	
      end

      operation 1953548 "setSinCos__FFFF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "sinValue" explicit_type "jfloat"
	  param in name "cosValue" explicit_type "jfloat"
	  param in name "px" explicit_type "jfloat"
	  param in name "py" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkScalar sinValue_ = SkFloatToScalar(sinValue);
        SkScalar cosValue_ = SkFloatToScalar(cosValue);
        SkScalar px_ = SkFloatToScalar(px);
        SkScalar py_ = SkFloatToScalar(py);
        obj->setSinCos(sinValue_, cosValue_, px_, py_);
    };
"
	
	
	
	
      end

      operation 1953676 "setSinCos__FF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "sinValue" explicit_type "jfloat"
	  param in name "cosValue" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar sinValue_ = SkFloatToScalar(sinValue);
        SkScalar cosValue_ = SkFloatToScalar(cosValue);
        obj->setSinCos(sinValue_, cosValue_);
    };
"
	
	
	
	
      end

      operation 1953804 "setSkew__FFFF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "kx" explicit_type "jfloat"
	  param in name "ky" explicit_type "jfloat"
	  param in name "px" explicit_type "jfloat"
	  param in name "py" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkScalar kx_ = SkFloatToScalar(kx);
        SkScalar ky_ = SkFloatToScalar(ky);
        SkScalar px_ = SkFloatToScalar(px);
        SkScalar py_ = SkFloatToScalar(py);
        obj->setSkew(kx_, ky_, px_, py_);
    };
"
	
	
	
	
      end

      operation 1953932 "setSkew__FF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "kx" explicit_type "jfloat"
	  param in name "ky" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar kx_ = SkFloatToScalar(kx);
        SkScalar ky_ = SkFloatToScalar(ky);
        obj->setSkew(kx_, ky_);
    };
"
	
	
	
	
      end

      operation 1954060 "setConcat"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param inout name "a" explicit_type "SkMatrix"
	  param inout name "b" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        return obj->setConcat(*a, *b);
    };
"
	
	
	
	
      end

      operation 1954188 "preTranslate"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "dx" explicit_type "jfloat"
	  param in name "dy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar dx_ = SkFloatToScalar(dx);
        SkScalar dy_ = SkFloatToScalar(dy);
        return obj->preTranslate(dx_, dy_);
    };
"
	
	
	
	
      end

      operation 1954316 "preScale__FFFF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "sx" explicit_type "jfloat"
	  param in name "sy" explicit_type "jfloat"
	  param in name "px" explicit_type "jfloat"
	  param in name "py" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkScalar sx_ = SkFloatToScalar(sx);
        SkScalar sy_ = SkFloatToScalar(sy);
        SkScalar px_ = SkFloatToScalar(px);
        SkScalar py_ = SkFloatToScalar(py);
        return obj->preScale(sx_, sy_, px_, py_);
    };
"
	
	
	
	
      end

      operation 1954444 "preScale__FF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "sx" explicit_type "jfloat"
	  param in name "sy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar sx_ = SkFloatToScalar(sx);
        SkScalar sy_ = SkFloatToScalar(sy);
        return obj->preScale(sx_, sy_);
    };
"
	
	
	
	
      end

      operation 1954572 "preRotate__FFF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "degrees" explicit_type "jfloat"
	  param in name "px" explicit_type "jfloat"
	  param in name "py" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        SkScalar degrees_ = SkFloatToScalar(degrees);
        SkScalar px_ = SkFloatToScalar(px);
        SkScalar py_ = SkFloatToScalar(py);
        return obj->preRotate(degrees_, px_, py_);
    };
"
	
	
	
	
      end

      operation 1954700 "preRotate__F"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "degrees" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        SkScalar degrees_ = SkFloatToScalar(degrees);
        return obj->preRotate(degrees_);
    };
"
	
	
	
	
      end

      operation 1954828 "preSkew__FFFF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "kx" explicit_type "jfloat"
	  param in name "ky" explicit_type "jfloat"
	  param in name "px" explicit_type "jfloat"
	  param in name "py" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkScalar kx_ = SkFloatToScalar(kx);
        SkScalar ky_ = SkFloatToScalar(ky);
        SkScalar px_ = SkFloatToScalar(px);
        SkScalar py_ = SkFloatToScalar(py);
        return obj->preSkew(kx_, ky_, px_, py_);
    };
"
	
	
	
	
      end

      operation 1954956 "preSkew__FF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "kx" explicit_type "jfloat"
	  param in name "ky" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar kx_ = SkFloatToScalar(kx);
        SkScalar ky_ = SkFloatToScalar(ky);
        return obj->preSkew(kx_, ky_);
    };
"
	
	
	
	
      end

      operation 1955084 "preConcat"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param inout name "other" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return obj->preConcat(*other);
    };
"
	
	
	
	
      end

      operation 1955212 "postTranslate"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "dx" explicit_type "jfloat"
	  param in name "dy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar dx_ = SkFloatToScalar(dx);
        SkScalar dy_ = SkFloatToScalar(dy);
        return obj->postTranslate(dx_, dy_);
    };
"
	
	
	
	
      end

      operation 1955340 "postScale__FFFF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "sx" explicit_type "jfloat"
	  param in name "sy" explicit_type "jfloat"
	  param in name "px" explicit_type "jfloat"
	  param in name "py" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkScalar sx_ = SkFloatToScalar(sx);
        SkScalar sy_ = SkFloatToScalar(sy);
        SkScalar px_ = SkFloatToScalar(px);
        SkScalar py_ = SkFloatToScalar(py);
        return obj->postScale(sx_, sy_, px_, py_);
    };
"
	
	
	
	
      end

      operation 1955468 "postScale__FF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "sx" explicit_type "jfloat"
	  param in name "sy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar sx_ = SkFloatToScalar(sx);
        SkScalar sy_ = SkFloatToScalar(sy);
        return obj->postScale(sx_, sy_);
    };
"
	
	
	
	
      end

      operation 1955596 "postRotate__FFF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "degrees" explicit_type "jfloat"
	  param in name "px" explicit_type "jfloat"
	  param in name "py" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        SkScalar degrees_ = SkFloatToScalar(degrees);
        SkScalar px_ = SkFloatToScalar(px);
        SkScalar py_ = SkFloatToScalar(py);
        return obj->postRotate(degrees_, px_, py_);
    };
"
	
	
	
	
      end

      operation 1955724 "postRotate__F"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "degrees" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        SkScalar degrees_ = SkFloatToScalar(degrees);
        return obj->postRotate(degrees_);
    };
"
	
	
	
	
      end

      operation 1955852 "postSkew__FFFF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkMatrix"
	  param in name "kx" explicit_type "jfloat"
	  param in name "ky" explicit_type "jfloat"
	  param in name "px" explicit_type "jfloat"
	  param in name "py" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkScalar kx_ = SkFloatToScalar(kx);
        SkScalar ky_ = SkFloatToScalar(ky);
        SkScalar px_ = SkFloatToScalar(px);
        SkScalar py_ = SkFloatToScalar(py);
        return obj->postSkew(kx_, ky_, px_, py_);
    };
"
	
	
	
	
      end

      operation 1955980 "postSkew__FF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param in name "kx" explicit_type "jfloat"
	  param in name "ky" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar kx_ = SkFloatToScalar(kx);
        SkScalar ky_ = SkFloatToScalar(ky);
        return matrix->postSkew(kx_, ky_);
    };
"
	
	
	
	
      end

      operation 1956108 "postConcat"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param inout name "other" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return matrix->postConcat(*other);
    };
"
	
	
	
	
      end

      operation 1956236 "setRectToRect"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param in name "src" explicit_type "jobject"
	  param in name "dst" explicit_type "jobject"
	  param in name "stf" explicit_type "SkMatrix::ScaleToFit"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        SkRect src_;
        GraphicsJNI::jrectf_to_rect(env, src, &src_);
        SkRect dst_;
        GraphicsJNI::jrectf_to_rect(env, dst, &dst_);
        return matrix->setRectToRect(src_, dst_, stf);
    };
"
	
	
	
	
      end

      operation 1956364 "setPolyToPoly"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param in name "jsrc" explicit_type "jfloatArray"
	  param in name "srcIndex" explicit_type "int"
	  param in name "jdst" explicit_type "jfloatArray"
	  param in name "dstIndex" explicit_type "int"
	  param in name "ptCount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        SkASSERT(srcIndex >= 0);
        SkASSERT(dstIndex >= 0);
        SkASSERT((unsigned)ptCount <= 4);

        AutoJavaFloatArray autoSrc(env, jsrc, srcIndex + (ptCount << 1));
        AutoJavaFloatArray autoDst(env, jdst, dstIndex + (ptCount << 1));
        float* src = autoSrc.ptr() + srcIndex;
        float* dst = autoDst.ptr() + dstIndex;

#ifdef SK_SCALAR_IS_FIXED        
        SkPoint srcPt[4], dstPt[4];
        for (int i = 0; i < ptCount; i++) {
            int x = i << 1;
            int y = x + 1;
            srcPt[i].set(SkFloatToScalar(src[x]), SkFloatToScalar(src[y]));
            dstPt[i].set(SkFloatToScalar(dst[x]), SkFloatToScalar(dst[y]));
        }
        return matrix->setPolyToPoly(srcPt, dstPt, ptCount);
#else
        return matrix->setPolyToPoly((const SkPoint*)src, (const SkPoint*)dst,
                                     ptCount);
#endif
    };
"
	
	
	
	
      end

      operation 1956492 "invert"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param inout name "inverse" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return matrix->invert(inverse);
    };
"
	
	
	
	
      end

      operation 1956620 "mapPoints"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param in name "dst" explicit_type "jfloatArray"
	  param in name "dstIndex" explicit_type "int"
	  param in name "src" explicit_type "jfloatArray"
	  param in name "srcIndex" explicit_type "int"
	  param in name "ptCount" explicit_type "int"
	  param in name "isPts" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        SkASSERT(ptCount >= 0);
        AutoJavaFloatArray autoSrc(env, src, srcIndex + (ptCount << 1));
        AutoJavaFloatArray autoDst(env, dst, dstIndex + (ptCount << 1));
        float* srcArray = autoSrc.ptr() + srcIndex;
        float* dstArray = autoDst.ptr() + dstIndex;
        
#ifdef SK_SCALAR_IS_FIXED        
        // we allocate twice the count, 1 set for src, 1 for dst
        SkAutoSTMalloc<32, SkPoint> storage(ptCount * 2);
        SkPoint* pts = storage.get();
        SkPoint* srcPt = pts;
        SkPoint* dstPt = pts + ptCount;
        
        int i;
        for (i = 0; i < ptCount; i++) {
            srcPt[i].set(SkFloatToScalar(srcArray[i << 1]),
                         SkFloatToScalar(srcArray[(i << 1) + 1]));
        }
        
        if (isPts)
            matrix->mapPoints(dstPt, srcPt, ptCount);
        else
            matrix->mapVectors(dstPt, srcPt, ptCount);
        
        for (i = 0; i < ptCount; i++) {
            dstArray[i << 1]  = SkScalarToFloat(dstPt[i].fX);
            dstArray[(i << 1) + 1]  = SkScalarToFloat(dstPt[i].fY);
        }
#else
        if (isPts)
            matrix->mapPoints((SkPoint*)dstArray, (const SkPoint*)srcArray,
                              ptCount);
        else
            matrix->mapVectors((SkVector*)dstArray, (const SkVector*)srcArray,
                               ptCount);
#endif
    };
"
	
	
	
	
      end

      operation 1956748 "mapRect__RectFRectF"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param in name "dst" explicit_type "jobjectArray"
	  param in name "src" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkRect dst_, src_;
        GraphicsJNI::jrectf_to_rect(env, src, &src_);
        jboolean rectStaysRect = matrix->mapRect(&dst_, src_);
        GraphicsJNI::rect_to_jrectf(dst_, env, dst);
        return rectStaysRect;
    };
"
	
	
	
	
      end

      operation 1956876 "mapRadius"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param in name "radius" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return SkScalarToFloat(matrix->mapRadius(SkFloatToScalar(radius)));
    };
"
	
	
	
	
      end

      operation 1957004 "getValues"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param in name "values" explicit_type "jfloatArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        AutoJavaFloatArray autoValues(env, values, 9);
        float* dst = autoValues.ptr();

#ifdef SK_SCALAR_IS_FIXED
        for (int i = 0; i < 6; i++) {
            dst[i] = SkFixedToFloat(matrix->get(i));
        }
        for (int j = 6; j < 9; j++) {
            dst[j] = SkFractToFloat(matrix->get(j));
        }
#else
        for (int i = 0; i < 9; i++) {
            dst[i] = matrix->get(i);
        }
#endif
    };
"
	
	
	
	
      end

      operation 1957132 "setValues"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param in name "values" explicit_type "jfloatArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        AutoJavaFloatArray autoValues(env, values, 9);
        const float* src = autoValues.ptr();

#ifdef SK_SCALAR_IS_FIXED
        for (int i = 0; i < 6; i++) {
            matrix->set(i, SkFloatToFixed(src[i]));
        }
        for (int j = 6; j < 9; j++) {
            matrix->set(j, SkFloatToFract(src[j]));
        }
#else
        for (int i = 0; i < 9; i++) {
            matrix->set(i, src[i]);
        }
#endif
    };
"
	
	
	
	
      end

      operation 1957260 "equals"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param in name "a" explicit_type "SkMatrix"
	  param in name "b" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return *a == *b;
    };
"
	
	
	
	
      end
    end

    class 641036 "JMetricsID"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 1722252 "top"
	public explicit_type "jfieldID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1722380 "ascent"
	public explicit_type "jfieldID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1722508 "descent"
	public explicit_type "jfieldID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1722636 "bottom"
	public explicit_type "jfieldID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1722764 "leading"
	public explicit_type "jfieldID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 641164 "SkPaintGlue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 641292 "MoveOpt"
	visibility package stereotype "enum"
	cpp_decl "${comment}enum ${name} {
${items}
};
"
	java_decl ""
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 1722892 "AFTER"
	  public type class_ref 641292 // MoveOpt
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1723020 "AT_OR_AFTER"
	  public type class_ref 641292 // MoveOpt
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1723148 "BEFORE"
	  public type class_ref 641292 // MoveOpt
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1723276 "AT_OR_BEFORE"
	  public type class_ref 641292 // MoveOpt
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 1723404 "AT"
	  public type class_ref 641292 // MoveOpt
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl ""
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1958156 "finalizer"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        delete obj;
    };
"
	
	
	
	
      end

      operation 1958284 "init"
	class_operation cpp_inline public explicit_return_type "SkPaint"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        SkPaint* obj = new SkPaint();
        defaultSettingsForAndroid(obj);
        return obj;
    };
"
	
	
	
	
      end

      operation 1958412 "intiWithPaint"
	class_operation cpp_inline public explicit_return_type "SkPaint"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SkPaint* obj = new SkPaint(*paint);
        return obj;
    };
"
	
	
	
	
      end

      operation 1958540 "reset"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        obj->reset();
        defaultSettingsForAndroid(obj);
    };
"
	
	
	
	
      end

      operation 1958668 "assign"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "dst" explicit_type "SkPaint"
	  param in name "src" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        *dst = *src;
    };
"
	
	
	
	
      end

      operation 1958796 "getFlags"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        return GraphicsJNI::getNativePaint(env, paint)->getFlags();
    };
"
	
	
	
	
      end

      operation 1958924 "setFlags"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "flags" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setFlags(flags);
    };
"
	
	
	
	
      end

      operation 1959052 "getHinting"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        return GraphicsJNI::getNativePaint(env, paint)->getHinting()
                == SkPaint::kNo_Hinting ? 0 : 1;
    };
"
	
	
	
	
      end

      operation 1959180 "setHinting"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "mode" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setHinting(
                mode == 0 ? SkPaint::kNo_Hinting : SkPaint::kSlight_Hinting);
    };
"
	
	
	
	
      end

      operation 1959308 "setAntiAlias"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "aa" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setAntiAlias(aa);
    };
"
	
	
	
	
      end

      operation 1959436 "setLinearText"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "linearText" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setLinearText(linearText);
    };
"
	
	
	
	
      end

      operation 1959564 "setSubpixelText"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "subpixelText" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setSubpixelText(subpixelText);
    };
"
	
	
	
	
      end

      operation 1959692 "setUnderlineText"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "underlineText" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setUnderlineText(underlineText);
    };
"
	
	
	
	
      end

      operation 1959820 "setStrikeThruText"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "strikeThruText" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setStrikeThruText(strikeThruText);
    };
"
	
	
	
	
      end

      operation 1959948 "setFakeBoldText"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "fakeBoldText" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setFakeBoldText(fakeBoldText);
    };
"
	
	
	
	
      end

      operation 1960076 "setFilterBitmap"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "filterBitmap" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setFilterBitmap(filterBitmap);
    };
"
	
	
	
	
      end

      operation 1960204 "setDither"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "dither" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setDither(dither);
    };
"
	
	
	
	
      end

      operation 1960332 "getStyle"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return obj->getStyle();
    };
"
	
	
	
	
      end

      operation 1960460 "setStyle"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param in name "style" explicit_type "SkPaint::Style"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        obj->setStyle(style);
    };
"
	
	
	
	
      end

      operation 1960588 "getColor"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        return GraphicsJNI::getNativePaint(env, paint)->getColor();
    };
"
	
	
	
	
      end

      operation 1960716 "getAlpha"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        return GraphicsJNI::getNativePaint(env, paint)->getAlpha();
    };
"
	
	
	
	
      end

      operation 1960844 "setColor"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "color" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setColor(color);
    };
"
	
	
	
	
      end

      operation 1960972 "setAlpha"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "a" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setAlpha(a);
    };
"
	
	
	
	
      end

      operation 1961100 "getStrokeWidth"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        return SkScalarToFloat(GraphicsJNI::getNativePaint(env, paint)->getStrokeWidth());
    };
"
	
	
	
	
      end

      operation 1961228 "setStrokeWidth"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "width" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setStrokeWidth(SkFloatToScalar(width));
    };
"
	
	
	
	
      end

      operation 1961356 "getStrokeMiter"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        return SkScalarToFloat(GraphicsJNI::getNativePaint(env, paint)->getStrokeMiter());
    };
"
	
	
	
	
      end

      operation 1961484 "setStrokeMiter"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "miter" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setStrokeMiter(SkFloatToScalar(miter));
    };
"
	
	
	
	
      end

      operation 1961612 "getStrokeCap"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return obj->getStrokeCap();
    };
"
	
	
	
	
      end

      operation 1961740 "setStrokeCap"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param in name "cap" explicit_type "SkPaint::Cap"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        obj->setStrokeCap(cap);
    };
"
	
	
	
	
      end

      operation 1961868 "getStrokeJoin"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return obj->getStrokeJoin();
    };
"
	
	
	
	
      end

      operation 1961996 "setStrokeJoin"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param in name "join" explicit_type "SkPaint::Join"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        obj->setStrokeJoin(join);
    };
"
	
	
	
	
      end

      operation 1962124 "getFillPath"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param inout name "src" explicit_type "SkPath"
	  param inout name "dst" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        return obj->getFillPath(*src, dst);
    };
"
	
	
	
	
      end

      operation 1962252 "setShader"
	class_operation cpp_inline public explicit_return_type "SkShader"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param inout name "shader" explicit_type "SkShader"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return obj->setShader(shader);
    };
"
	
	
	
	
      end

      operation 1962380 "setColorFilter"
	class_operation cpp_inline public explicit_return_type "SkColorFilter"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param inout name "filter" explicit_type "SkColorFilter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return obj->setColorFilter(filter);
    };
"
	
	
	
	
      end

      operation 1962508 "setXfermode"
	class_operation cpp_inline public explicit_return_type "SkXfermode"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param inout name "xfermode" explicit_type "SkXfermode"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return obj->setXfermode(xfermode);
    };
"
	
	
	
	
      end

      operation 1962636 "setPathEffect"
	class_operation cpp_inline public explicit_return_type "SkPathEffect"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param inout name "effect" explicit_type "SkPathEffect"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return obj->setPathEffect(effect);
    };
"
	
	
	
	
      end

      operation 1962764 "setMaskFilter"
	class_operation cpp_inline public explicit_return_type "SkMaskFilter"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param inout name "maskfilter" explicit_type "SkMaskFilter"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return obj->setMaskFilter(maskfilter);
    };
"
	
	
	
	
      end

      operation 1962892 "setTypeface"
	class_operation cpp_inline public explicit_return_type "SkTypeface"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param inout name "typeface" explicit_type "SkTypeface"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return obj->setTypeface(typeface);
    };
"
	
	
	
	
      end

      operation 1963020 "setRasterizer"
	class_operation cpp_inline public explicit_return_type "SkRasterizer"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param inout name "rasterizer" explicit_type "SkRasterizer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return obj->setRasterizer(rasterizer);
    };
"
	
	
	
	
      end

      operation 1963148 "getTextAlign"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return obj->getTextAlign();
    };
"
	
	
	
	
      end

      operation 1963276 "setTextAlign"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param in name "align" explicit_type "SkPaint::Align"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        obj->setTextAlign(align);
    };
"
	
	
	
	
      end

      operation 1963404 "toLanguageTag"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "output" explicit_type "char"
	  param in name "outSize" explicit_type "size_t"
	  param in name "locale" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        if (output == NULL || outSize <= 0) {
            return;
        }
        if (locale == NULL) {
            output[0] = '\\0';
            return;
        }
        char canonicalChars[ULOC_FULLNAME_CAPACITY];
        UErrorCode uErr = U_ZERO_ERROR;
        uloc_canonicalize(locale, canonicalChars, ULOC_FULLNAME_CAPACITY,
                &uErr);
        if (U_SUCCESS(uErr)) {
            char likelyChars[ULOC_FULLNAME_CAPACITY];
            uErr = U_ZERO_ERROR;
            uloc_addLikelySubtags(canonicalChars, likelyChars,
                    ULOC_FULLNAME_CAPACITY, &uErr);
            if (U_SUCCESS(uErr)) {
                uErr = U_ZERO_ERROR;
                uloc_toLanguageTag(likelyChars, output, outSize, FALSE, &uErr);
                if (U_SUCCESS(uErr)) {
                    return;
                } else {
                    ALOGD(\"uloc_toLanguageTag(\\\"%s\\\") failed: %s\", likelyChars,
                            u_errorName(uErr));
                }
            } else {
                ALOGD(\"uloc_addLikelySubtags(\\\"%s\\\") failed: %s\",
                        canonicalChars, u_errorName(uErr));
            }
        } else {
            ALOGD(\"uloc_canonicalize(\\\"%s\\\") failed: %s\", locale,
                    u_errorName(uErr));
        }
        // unable to build a proper language identifier
        output[0] = '\\0';
    };
"
	
	
	
	
	comment " generate bcp47 identifier for the supplied locale"
      end

      operation 1963532 "setTextLocale"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPaint"
	  param in name "locale" explicit_type "jstring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        ScopedUtfChars localeChars(env, locale);
        char langTag[ULOC_FULLNAME_CAPACITY];
        toLanguageTag(langTag, ULOC_FULLNAME_CAPACITY, localeChars.c_str());
        obj->setLanguage(SkLanguage(langTag));
    };
"
	
	
	
	
      end

      operation 1963660 "getTextSize"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        return SkScalarToFloat(GraphicsJNI::getNativePaint(env, paint)->getTextSize());
    };
"
	
	
	
	
      end

      operation 1963788 "setTextSize"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "textSize" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setTextSize(SkFloatToScalar(textSize));
    };
"
	
	
	
	
      end

      operation 1963916 "getTextScaleX"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        return SkScalarToFloat(GraphicsJNI::getNativePaint(env, paint)->getTextScaleX());
    };
"
	
	
	
	
      end

      operation 1964044 "setTextScaleX"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "scaleX" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setTextScaleX(SkFloatToScalar(scaleX));
    };
"
	
	
	
	
      end

      operation 1964172 "getTextSkewX"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        return SkScalarToFloat(GraphicsJNI::getNativePaint(env, paint)->getTextSkewX());
    };
"
	
	
	
	
      end

      operation 1964300 "setTextSkewX"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "skewX" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, paint);
        GraphicsJNI::getNativePaint(env, paint)->setTextSkewX(SkFloatToScalar(skewX));
    };
"
	
	
	
	
      end

      operation 1964428 "ascent"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        SkPaint::FontMetrics    metrics;
        (void)GraphicsJNI::getNativePaint(env, paint)->getFontMetrics(&metrics);
        return SkScalarToFloat(metrics.fAscent);
    };
"
	
	
	
	
      end

      operation 1964556 "descent"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        SkPaint::FontMetrics    metrics;
        (void)GraphicsJNI::getNativePaint(env, paint)->getFontMetrics(&metrics);
        return SkScalarToFloat(metrics.fDescent);
    };
"
	
	
	
	
      end

      operation 1964684 "getFontMetrics"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "metricsObj" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        SkPaint::FontMetrics metrics;
        SkScalar             spacing = GraphicsJNI::getNativePaint(env, paint)->getFontMetrics(&metrics);

        if (metricsObj) {
            SkASSERT(env->IsInstanceOf(metricsObj, gFontMetrics_class));
            env->SetFloatField(metricsObj, gFontMetrics_fieldID.top, SkScalarToFloat(metrics.fTop));
            env->SetFloatField(metricsObj, gFontMetrics_fieldID.ascent, SkScalarToFloat(metrics.fAscent));
            env->SetFloatField(metricsObj, gFontMetrics_fieldID.descent, SkScalarToFloat(metrics.fDescent));
            env->SetFloatField(metricsObj, gFontMetrics_fieldID.bottom, SkScalarToFloat(metrics.fBottom));
            env->SetFloatField(metricsObj, gFontMetrics_fieldID.leading, SkScalarToFloat(metrics.fLeading));
        }
        return SkScalarToFloat(spacing);
    };
"
	
	
	
	
      end

      operation 1964812 "getFontMetricsInt"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "paint" explicit_type "jobject"
	  param in name "metricsObj" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        SkPaint::FontMetrics metrics;

        GraphicsJNI::getNativePaint(env, paint)->getFontMetrics(&metrics);
        int ascent = SkScalarRound(metrics.fAscent);
        int descent = SkScalarRound(metrics.fDescent);
        int leading = SkScalarRound(metrics.fLeading);

        if (metricsObj) {
            SkASSERT(env->IsInstanceOf(metricsObj, gFontMetricsInt_class));
            env->SetIntField(metricsObj, gFontMetricsInt_fieldID.top, SkScalarFloor(metrics.fTop));
            env->SetIntField(metricsObj, gFontMetricsInt_fieldID.ascent, ascent);
            env->SetIntField(metricsObj, gFontMetricsInt_fieldID.descent, descent);
            env->SetIntField(metricsObj, gFontMetricsInt_fieldID.bottom, SkScalarCeil(metrics.fBottom));
            env->SetIntField(metricsObj, gFontMetricsInt_fieldID.leading, leading);
        }
        return descent - ascent + leading;
    };
"
	
	
	
	
      end

      operation 1964940 "measureText_CII"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jpaint" explicit_type "jobject"
	  param in name "text" explicit_type "jcharArray"
	  param in name "index" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jpaint);
        NPE_CHECK_RETURN_ZERO(env, text);

        size_t textLength = env->GetArrayLength(text);
        if ((index | count) < 0 || (size_t)(index + count) > textLength) {
            doThrowAIOOBE(env);
            return 0;
        }
        if (count == 0) {
            return 0;
        }

        SkPaint* paint = GraphicsJNI::getNativePaint(env, jpaint);
        const jchar* textArray = env->GetCharArrayElements(text, NULL);
        jfloat result = 0;

        TextLayout::getTextRunAdvances(paint, textArray, index, count, textLength,
                paint->getFlags(), NULL /* dont need all advances */, &result);

        env->ReleaseCharArrayElements(text, const_cast<jchar*>(textArray), JNI_ABORT);
        return result;
    };
"
	
	
	
	
      end

      operation 1965068 "measureText_StringII"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jpaint" explicit_type "jobject"
	  param in name "text" explicit_type "jstring"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jpaint);
        NPE_CHECK_RETURN_ZERO(env, text);

        size_t textLength = env->GetStringLength(text);
        int count = end - start;
        if ((start | count) < 0 || (size_t)end > textLength) {
            doThrowAIOOBE(env);
            return 0;
        }
        if (count == 0) {
            return 0;
        }

        const jchar* textArray = env->GetStringChars(text, NULL);
        SkPaint* paint = GraphicsJNI::getNativePaint(env, jpaint);
        jfloat width = 0;

        TextLayout::getTextRunAdvances(paint, textArray, start, count, textLength,
                paint->getFlags(), NULL /* dont need all advances */, &width);

        env->ReleaseStringChars(text, textArray);
        return width;
    };
"
	
	
	
	
      end

      operation 1965196 "measureText_String"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jpaint" explicit_type "jobject"
	  param in name "text" explicit_type "jstring"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jpaint);
        NPE_CHECK_RETURN_ZERO(env, text);

        size_t textLength = env->GetStringLength(text);
        if (textLength == 0) {
            return 0;
        }

        const jchar* textArray = env->GetStringChars(text, NULL);
        SkPaint* paint = GraphicsJNI::getNativePaint(env, jpaint);
        jfloat width = 0;

        TextLayout::getTextRunAdvances(paint, textArray, 0, textLength, textLength,
                paint->getFlags(), NULL /* dont need all advances */, &width);

        env->ReleaseStringChars(text, textArray);
        return width;
    };
"
	
	
	
	
      end

      operation 1965324 "dotextwidths"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "count" explicit_type "int"
	  param in name "widths" explicit_type "jfloatArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} ${p2}[]${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        NPE_CHECK_RETURN_ZERO(env, text);

        if (count < 0 || !widths) {
            doThrowAIOOBE(env);
            return 0;
        }
        if (count == 0) {
            return 0;
        }
        size_t widthsLength = env->GetArrayLength(widths);
        if ((size_t)count > widthsLength) {
            doThrowAIOOBE(env);
            return 0;
        }

        AutoJavaFloatArray autoWidths(env, widths, count);
        jfloat* widthsArray = autoWidths.ptr();

        TextLayout::getTextRunAdvances(paint, text, 0, count, count,
                paint->getFlags(), widthsArray, NULL /* dont need totalAdvance */);

        return count;
    };
"
	
	
	
	
      end

      operation 1965452 "getTextWidths___CII_F"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jcharArray"
	  param in name "index" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "widths" explicit_type "jfloatArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        const jchar* textArray = env->GetCharArrayElements(text, NULL);
        count = dotextwidths(env, paint, textArray + index, count, widths);
        env->ReleaseCharArrayElements(text, const_cast<jchar*>(textArray),
                                      JNI_ABORT);
        return count;
    };
"
	
	
	
	
      end

      operation 1965580 "getTextWidths__StringII_F"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jstring"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "widths" explicit_type "jfloatArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        const jchar* textArray = env->GetStringChars(text, NULL);
        int count = dotextwidths(env, paint, textArray + start, end - start, widths);
        env->ReleaseStringChars(text, textArray);
        return count;
    };
"
	
	
	
	
      end

      operation 1965708 "doTextGlyphs"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "start" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "contextCount" explicit_type "jint"
	  param in name "flags" explicit_type "jint"
	  param in name "glyphs" explicit_type "jcharArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        NPE_CHECK_RETURN_ZERO(env, text);

        if ((start | count | contextCount) < 0 || contextCount < count || !glyphs) {
            doThrowAIOOBE(env);
            return 0;
        }
        if (count == 0) {
            return 0;
        }
        size_t glypthsLength = env->GetArrayLength(glyphs);
        if ((size_t)count > glypthsLength) {
            doThrowAIOOBE(env);
            return 0;
        }

        jchar* glyphsArray = env->GetCharArrayElements(glyphs, NULL);

        sp<TextLayoutValue> value = TextLayoutEngine::getInstance().getValue(paint,
                text, start, count, contextCount, flags);
        const jchar* shapedGlyphs = value->getGlyphs();
        size_t glyphsCount = value->getGlyphsCount();
        memcpy(glyphsArray, shapedGlyphs, sizeof(jchar) * glyphsCount);

        env->ReleaseCharArrayElements(glyphs, glyphsArray, JNI_ABORT);
        return glyphsCount;
    };
"
	
	
	
	
      end

      operation 1965836 "getTextGlyphs__StringIIIII_C"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 10
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jstring"
	  param in name "start" explicit_type "jint"
	  param in name "end" explicit_type "jint"
	  param in name "contextStart" explicit_type "jint"
	  param in name "contextEnd" explicit_type "jint"
	  param in name "flags" explicit_type "jint"
	  param in name "glyphs" explicit_type "jcharArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}${)}${const}${volatile}${throw}${abstract} {
        const jchar* textArray = env->GetStringChars(text, NULL);
        int count = doTextGlyphs(env, paint, textArray + contextStart, start - contextStart,
                end - start, contextEnd - contextStart, flags, glyphs);
        env->ReleaseStringChars(text, textArray);
        return count;
    };
"
	
	
	
	
      end

      operation 1965964 "doTextRunAdvances"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "start" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "contextCount" explicit_type "jint"
	  param in name "flags" explicit_type "jint"
	  param in name "advances" explicit_type "jfloatArray"
	  param in name "advancesIndex" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        NPE_CHECK_RETURN_ZERO(env, text);

        if ((start | count | contextCount | advancesIndex) < 0 || contextCount < count) {
            doThrowAIOOBE(env);
            return 0;
        }
        if (count == 0) {
            return 0;
        }
        if (advances) {
            size_t advancesLength = env->GetArrayLength(advances);
            if ((size_t)count > advancesLength) {
                doThrowAIOOBE(env);
                return 0;
            }
        }
        jfloat advancesArray[count];
        jfloat totalAdvance = 0;

        TextLayout::getTextRunAdvances(paint, text, start, count, contextCount, flags,
                                       advancesArray, &totalAdvance);

        if (advances != NULL) {
            env->SetFloatArrayRegion(advances, advancesIndex, count, advancesArray);
        }
        return totalAdvance;
    };
"
	
	
	
	
      end

      operation 1966092 "doTextRunAdvancesICU"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "start" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "contextCount" explicit_type "jint"
	  param in name "flags" explicit_type "jint"
	  param in name "advances" explicit_type "jfloatArray"
	  param in name "advancesIndex" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, paint);
        NPE_CHECK_RETURN_ZERO(env, text);

        if ((start | count | contextCount | advancesIndex) < 0 || contextCount < count) {
            doThrowAIOOBE(env);
            return 0;
        }
        if (count == 0) {
            return 0;
        }
        if (advances) {
            size_t advancesLength = env->GetArrayLength(advances);
            if ((size_t)count > advancesLength) {
                doThrowAIOOBE(env);
                return 0;
            }
        }

        jfloat advancesArray[count];
        jfloat totalAdvance = 0;

        TextLayout::getTextRunAdvancesICU(paint, text, start, count, contextCount, flags,
                                       advancesArray, totalAdvance);

        if (advances != NULL) {
            env->SetFloatArrayRegion(advances, advancesIndex, count, advancesArray);
        }
        return totalAdvance;
    };
"
	
	
	
	
      end

      operation 1966220 "getTextRunAdvances___CIIIII_FII"
	class_operation cpp_inline public explicit_return_type "float"
	nparams 12
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jcharArray"
	  param in name "index" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "contextIndex" explicit_type "jint"
	  param in name "contextCount" explicit_type "jint"
	  param in name "flags" explicit_type "jint"
	  param in name "advances" explicit_type "jfloatArray"
	  param in name "advancesIndex" explicit_type "jint"
	  param in name "reserved" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}, ${t10} ${p10}${v10}, ${t11} ${p11}${v11}${)}${const}${volatile}${throw}${abstract} {
        jchar* textArray = env->GetCharArrayElements(text, NULL);
        jfloat result = (reserved == 0) ?
                doTextRunAdvances(env, paint, textArray + contextIndex, index - contextIndex,
                        count, contextCount, flags, advances, advancesIndex) :
                doTextRunAdvancesICU(env, paint, textArray + contextIndex, index - contextIndex,
                        count, contextCount, flags, advances, advancesIndex);
        env->ReleaseCharArrayElements(text, textArray, JNI_ABORT);
        return result;
    };
"
	
	
	
	
      end

      operation 1966348 "getTextRunAdvances__StringIIIII_FII"
	class_operation cpp_inline public explicit_return_type "float"
	nparams 12
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jstring"
	  param in name "start" explicit_type "jint"
	  param in name "end" explicit_type "jint"
	  param in name "contextStart" explicit_type "jint"
	  param in name "contextEnd" explicit_type "jint"
	  param in name "flags" explicit_type "jint"
	  param in name "advances" explicit_type "jfloatArray"
	  param in name "advancesIndex" explicit_type "jint"
	  param in name "reserved" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} ${p9}${v9}, ${t10} ${p10}${v10}, ${t11} ${p11}${v11}${)}${const}${volatile}${throw}${abstract} {
        const jchar* textArray = env->GetStringChars(text, NULL);
        jfloat result = (reserved == 0) ?
                doTextRunAdvances(env, paint, textArray + contextStart, start - contextStart,
                        end - start, contextEnd - contextStart, flags, advances, advancesIndex) :
                doTextRunAdvancesICU(env, paint, textArray + contextStart, start - contextStart,
                        end - start, contextEnd - contextStart, flags, advances, advancesIndex);
        env->ReleaseStringChars(text, textArray);
        return result;
    };
"
	
	
	
	
      end

      operation 1966476 "doTextRunCursor"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "start" explicit_type "jint"
	  param in name "count" explicit_type "jint"
	  param in name "flags" explicit_type "jint"
	  param in name "offset" explicit_type "jint"
	  param in name "opt" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        jfloat scalarArray[count];

        TextLayout::getTextRunAdvances(paint, text, start, count, start + count, flags,
                scalarArray, NULL /* dont need totalAdvance */);

        jint pos = offset - start;
        switch (opt) {
        case AFTER:
          if (pos < count) {
            pos += 1;
          }
          // fall through
        case AT_OR_AFTER:
          while (pos < count && scalarArray[pos] == 0) {
            ++pos;
          }
          break;
        case BEFORE:
          if (pos > 0) {
            --pos;
          }
          // fall through
        case AT_OR_BEFORE:
          while (pos > 0 && scalarArray[pos] == 0) {
            --pos;
          }
          break;
        case AT:
        default:
          if (scalarArray[pos] == 0) {
            pos = -1;
          }
          break;
        }

        if (pos != -1) {
          pos += start;
        }

        return pos;
    };
"
	
	
	
	
      end

      operation 1966604 "getTextRunCursor___C"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jcharArray"
	  param in name "contextStart" explicit_type "jint"
	  param in name "contextCount" explicit_type "jint"
	  param in name "flags" explicit_type "jint"
	  param in name "offset" explicit_type "jint"
	  param in name "cursorOpt" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        jchar* textArray = env->GetCharArrayElements(text, NULL);
        jint result = doTextRunCursor(env, paint, textArray, contextStart, contextCount, flags,
                offset, cursorOpt);
        env->ReleaseCharArrayElements(text, textArray, JNI_ABORT);
        return result;
    };
"
	
	
	
	
      end

      operation 1966732 "getTextRunCursor__String"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jstring"
	  param in name "contextStart" explicit_type "jint"
	  param in name "contextEnd" explicit_type "jint"
	  param in name "flags" explicit_type "jint"
	  param in name "offset" explicit_type "jint"
	  param in name "cursorOpt" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        const jchar* textArray = env->GetStringChars(text, NULL);
        jint result = doTextRunCursor(env, paint, textArray, contextStart,
                contextEnd - contextStart, flags, offset, cursorOpt);
        env->ReleaseStringChars(text, textArray);
        return result;
    };
"
	
	
	
	
      end

      operation 1966860 "getTextPath"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "count" explicit_type "jint"
	  param in name "bidiFlags" explicit_type "jint"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param inout name "path" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} * ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        TextLayout::getTextPath(paint, text, count, bidiFlags, x, y, path);
    };
"
	
	
	
	
      end

      operation 1966988 "getTextPath___C"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 10
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "bidiFlags" explicit_type "jint"
	  param in name "text" explicit_type "jcharArray"
	  param in name "index" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param inout name "path" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} * ${p9}${v9}${)}${const}${volatile}${throw}${abstract} {
        const jchar* textArray = env->GetCharArrayElements(text, NULL);
        getTextPath(env, paint, textArray + index, count, bidiFlags, x, y, path);
        env->ReleaseCharArrayElements(text, const_cast<jchar*>(textArray), JNI_ABORT);
    };
"
	
	
	
	
      end

      operation 1967116 "getTextPath__String"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 10
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "bidiFlags" explicit_type "jint"
	  param in name "text" explicit_type "jstring"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param inout name "path" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}, ${t9} * ${p9}${v9}${)}${const}${volatile}${throw}${abstract} {
        const jchar* textArray = env->GetStringChars(text, NULL);
        getTextPath(env, paint, textArray + start, end - start, bidiFlags, x, y, path);
        env->ReleaseStringChars(text, textArray);
    };
"
	
	
	
	
      end

      operation 1967244 "setShadowLayer"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jpaint" explicit_type "jobject"
	  param in name "radius" explicit_type "jfloat"
	  param in name "dx" explicit_type "jfloat"
	  param in name "dy" explicit_type "jfloat"
	  param in name "color" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_VOID(env, jpaint);

        SkPaint* paint = GraphicsJNI::getNativePaint(env, jpaint);
        if (radius <= 0) {
            paint->setLooper(NULL);
        }
        else {
            paint->setLooper(new SkBlurDrawLooper(SkFloatToScalar(radius),
                                                  SkFloatToScalar(dx),
                                                  SkFloatToScalar(dy),
                                                  (SkColor)color))->unref();
        }
    };
"
	
	
	
	
      end

      operation 1967372 "breakText"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param inout name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jchar"
	  param in name "count" explicit_type "int"
	  param in name "maxWidth" explicit_type "float"
	  param in name "jmeasured" explicit_type "jfloatArray"
	  param in name "tbd" explicit_type "SkPaint::TextBufferDirection"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} & ${p1}${v1}, const ${t2} ${p2}[]${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        sp<TextLayoutValue> value = TextLayoutEngine::getInstance().getValue(&paint,
                text, 0, count, count, paint.getFlags());
        if (value == NULL) {
            return 0;
        }
        SkScalar     measured;
        size_t       bytes = paint.breakText(value->getGlyphs(), value->getGlyphsCount() << 1,
                                   SkFloatToScalar(maxWidth), &measured, tbd);
        SkASSERT((bytes & 1) == 0);

        if (jmeasured && env->GetArrayLength(jmeasured) > 0) {
            AutoJavaFloatArray autoMeasured(env, jmeasured, 1);
            jfloat* array = autoMeasured.ptr();
            array[0] = SkScalarToFloat(measured);
        }
        return bytes >> 1;
    };
"
	
	
	
	
      end

      operation 1967500 "breakTextC"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jpaint" explicit_type "jobject"
	  param in name "jtext" explicit_type "jcharArray"
	  param in name "index" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "maxWidth" explicit_type "float"
	  param in name "jmeasuredWidth" explicit_type "jfloatArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jpaint);
        NPE_CHECK_RETURN_ZERO(env, jtext);

        SkPaint::TextBufferDirection tbd;
        if (count < 0) {
            tbd = SkPaint::kBackward_TextBufferDirection;
            count = -count;
        }
        else {
            tbd = SkPaint::kForward_TextBufferDirection;
        }

        if ((index < 0) || (index + count > env->GetArrayLength(jtext))) {
            doThrowAIOOBE(env);
            return 0;
        }

        SkPaint*     paint = GraphicsJNI::getNativePaint(env, jpaint);
        const jchar* text = env->GetCharArrayElements(jtext, NULL);
        count = breakText(env, *paint, text + index, count, maxWidth,
                          jmeasuredWidth, tbd);
        env->ReleaseCharArrayElements(jtext, const_cast<jchar*>(text),
                                      JNI_ABORT);
        return count;
    };
"
	
	
	
	
      end

      operation 1967628 "breakTextS"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jpaint" explicit_type "jobject"
	  param in name "jtext" explicit_type "jstring"
	  param in name "forwards" explicit_type "bool"
	  param in name "maxWidth" explicit_type "float"
	  param in name "jmeasuredWidth" explicit_type "jfloatArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jpaint);
        NPE_CHECK_RETURN_ZERO(env, jtext);

        SkPaint::TextBufferDirection tbd = forwards ?
                                        SkPaint::kForward_TextBufferDirection :
                                        SkPaint::kBackward_TextBufferDirection;

        SkPaint* paint = GraphicsJNI::getNativePaint(env, jpaint);
        int count = env->GetStringLength(jtext);
        const jchar* text = env->GetStringChars(jtext, NULL);
        count = breakText(env, *paint, text, count, maxWidth,
                          jmeasuredWidth, tbd);
        env->ReleaseStringChars(jtext, text);
        return count;
    };
"
	
	
	
	
      end

      operation 1967756 "doTextBounds"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "text" explicit_type "jchar"
	  param in name "count" explicit_type "int"
	  param in name "bounds" explicit_type "jobject"
	  param in name "paint" explicit_type "SkPaint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, const ${t4} & ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkRect  r{0,0,0,0};
        SkIRect ir;

        sp<TextLayoutValue> value = TextLayoutEngine::getInstance().getValue(&paint,
                text, 0, count, count, paint.getFlags());
        if (value == NULL) {
            return;
        }
        paint.measureText(value->getGlyphs(), value->getGlyphsCount() << 1, &r);
        r.roundOut(&ir);
        GraphicsJNI::irect_to_jrect(ir, env, bounds);
    };
"
	
	
	
	
      end

      operation 1967884 "getStringBounds"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param in name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jstring"
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	  param in name "bounds" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        const jchar* textArray = env->GetStringChars(text, NULL);
        doTextBounds(env, textArray + start, end - start, bounds, *paint);
        env->ReleaseStringChars(text, textArray);
    };
"
	
	
	
	
      end

      operation 1968012 "getCharArrayBounds"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param in name "paint" explicit_type "SkPaint"
	  param in name "text" explicit_type "jcharArray"
	  param in name "index" explicit_type "int"
	  param in name "count" explicit_type "int"
	  param in name "bounds" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        const jchar* textArray = env->GetCharArrayElements(text, NULL);
        doTextBounds(env, textArray + index, count, bounds, *paint);
        env->ReleaseCharArrayElements(text, const_cast<jchar*>(textArray),
                                      JNI_ABORT);
    };
"
	
	
	
	
      end
    end

    class 641420 "SkPathGlue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1968140 "finalizer"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
#ifdef USE_OPENGL_RENDERER
        if (android::uirenderer::Caches::hasInstance()) {
            android::uirenderer::Caches::getInstance().resourceCache.destructor(obj);
            return;
        }
#endif
        delete obj;
    };
"
	
	
	
	
      end

      operation 1968268 "init1"
	class_operation cpp_inline public explicit_return_type "SkPath"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        return new SkPath();
    };
"
	
	
	
	
      end

      operation 1968396 "init2"
	class_operation cpp_inline public explicit_return_type "SkPath"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "val" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return new SkPath(*val);
    };
"
	
	
	
	
      end

      operation 1968524 "reset"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        obj->reset();
    };
"
	
	
	
	
      end

      operation 1968652 "rewind"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        obj->rewind();
    };
"
	
	
	
	
      end

      operation 1968780 "assign"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "dst" explicit_type "SkPath"
	  param in name "src" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        *dst = *src;
    };
"
	
	
	
	
      end

      operation 1968908 "getFillType"
	class_operation cpp_inline public explicit_return_type "jint"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return obj->getFillType();
    };
"
	
	
	
	
      end

      operation 1969036 "setFillType"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "path" explicit_type "SkPath"
	  param in name "ft" explicit_type "SkPath::FillType"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        path->setFillType(ft);
    };
"
	
	
	
	
      end

      operation 1969164 "isEmpty"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return obj->isEmpty();
    };
"
	
	
	
	
      end

      operation 1969292 "isRect"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "rect" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        SkRect rect_;
        jboolean result = obj->isRect(&rect_);
        GraphicsJNI::rect_to_jrectf(rect_, env, rect);
        return result;
    };
"
	
	
	
	
      end

      operation 1969420 "computeBounds"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "bounds" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        const SkRect& bounds_ = obj->getBounds();
        GraphicsJNI::rect_to_jrectf(bounds_, env, bounds);
    };
"
	
	
	
	
      end

      operation 1969548 "incReserve"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "extraPtCount" explicit_type "jint"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        obj->incReserve(extraPtCount);
    };
"
	
	
	
	
      end

      operation 1969676 "moveTo__FF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar x_ = SkFloatToScalar(x);
        SkScalar y_ = SkFloatToScalar(y);
        obj->moveTo(x_, y_);
    };
"
	
	
	
	
      end

      operation 1969804 "rMoveTo"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "dx" explicit_type "jfloat"
	  param in name "dy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar dx_ = SkFloatToScalar(dx);
        SkScalar dy_ = SkFloatToScalar(dy);
        obj->rMoveTo(dx_, dy_);
    };
"
	
	
	
	
      end

      operation 1969932 "lineTo__FF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar x_ = SkFloatToScalar(x);
        SkScalar y_ = SkFloatToScalar(y);
        obj->lineTo(x_, y_);
    };
"
	
	
	
	
      end

      operation 1970060 "rLineTo"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "dx" explicit_type "jfloat"
	  param in name "dy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar dx_ = SkFloatToScalar(dx);
        SkScalar dy_ = SkFloatToScalar(dy);
        obj->rLineTo(dx_, dy_);
    };
"
	
	
	
	
      end

      operation 1970188 "quadTo__FFFF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "x1" explicit_type "jfloat"
	  param in name "y1" explicit_type "jfloat"
	  param in name "x2" explicit_type "jfloat"
	  param in name "y2" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkScalar x1_ = SkFloatToScalar(x1);
        SkScalar y1_ = SkFloatToScalar(y1);
        SkScalar x2_ = SkFloatToScalar(x2);
        SkScalar y2_ = SkFloatToScalar(y2);
        obj->quadTo(x1_, y1_, x2_, y2_);
    };
"
	
	
	
	
      end

      operation 1970316 "rQuadTo"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "dx1" explicit_type "jfloat"
	  param in name "dy1" explicit_type "jfloat"
	  param in name "dx2" explicit_type "jfloat"
	  param in name "dy2" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkScalar dx1_ = SkFloatToScalar(dx1);
        SkScalar dy1_ = SkFloatToScalar(dy1);
        SkScalar dx2_ = SkFloatToScalar(dx2);
        SkScalar dy2_ = SkFloatToScalar(dy2);
        obj->rQuadTo(dx1_, dy1_, dx2_, dy2_);
    };
"
	
	
	
	
      end

      operation 1970444 "cubicTo__FFFFFF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "x1" explicit_type "jfloat"
	  param in name "y1" explicit_type "jfloat"
	  param in name "x2" explicit_type "jfloat"
	  param in name "y2" explicit_type "jfloat"
	  param in name "x3" explicit_type "jfloat"
	  param in name "y3" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        SkScalar x1_ = SkFloatToScalar(x1);
        SkScalar y1_ = SkFloatToScalar(y1);
        SkScalar x2_ = SkFloatToScalar(x2);
        SkScalar y2_ = SkFloatToScalar(y2);
        SkScalar x3_ = SkFloatToScalar(x3);
        SkScalar y3_ = SkFloatToScalar(y3);
        obj->cubicTo(x1_, y1_, x2_, y2_, x3_, y3_);
    };
"
	
	
	
	
      end

      operation 1970572 "rCubicTo"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 9
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "x1" explicit_type "jfloat"
	  param in name "y1" explicit_type "jfloat"
	  param in name "x2" explicit_type "jfloat"
	  param in name "y2" explicit_type "jfloat"
	  param in name "x3" explicit_type "jfloat"
	  param in name "y3" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}, ${t8} ${p8}${v8}${)}${const}${volatile}${throw}${abstract} {
        SkScalar x1_ = SkFloatToScalar(x1);
        SkScalar y1_ = SkFloatToScalar(y1);
        SkScalar x2_ = SkFloatToScalar(x2);
        SkScalar y2_ = SkFloatToScalar(y2);
        SkScalar x3_ = SkFloatToScalar(x3);
        SkScalar y3_ = SkFloatToScalar(y3);
        obj->rCubicTo(x1_, y1_, x2_, y2_, x3_, y3_);
    };
"
	
	
	
	
      end

      operation 1970700 "arcTo"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "oval" explicit_type "jobject"
	  param in name "startAngle" explicit_type "jfloat"
	  param in name "sweepAngle" explicit_type "jfloat"
	  param in name "forceMoveTo" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkRect oval_;
        GraphicsJNI::jrectf_to_rect(env, oval, &oval_);
        SkScalar startAngle_ = SkFloatToScalar(startAngle);
        SkScalar sweepAngle_ = SkFloatToScalar(sweepAngle);
        obj->arcTo(oval_, startAngle_, sweepAngle_, forceMoveTo);
    };
"
	
	
	
	
      end

      operation 1970828 "close"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        obj->close();
    };
"
	
	
	
	
      end

      operation 1970956 "addRect__RectFI"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "rect" explicit_type "jobject"
	  param in name "dir" explicit_type "SkPath::Direction"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkRect rect_;
        GraphicsJNI::jrectf_to_rect(env, rect, &rect_);
        obj->addRect(rect_, dir);
    };
"
	
	
	
	
      end

      operation 1971084 "addRect__FFFFI"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 8
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "left" explicit_type "jfloat"
	  param in name "top" explicit_type "jfloat"
	  param in name "right" explicit_type "jfloat"
	  param in name "bottom" explicit_type "jfloat"
	  param in name "dir" explicit_type "SkPath::Direction"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}, ${t7} ${p7}${v7}${)}${const}${volatile}${throw}${abstract} {
        SkScalar left_ = SkFloatToScalar(left);
        SkScalar top_ = SkFloatToScalar(top);
        SkScalar right_ = SkFloatToScalar(right);
        SkScalar bottom_ = SkFloatToScalar(bottom);
        obj->addRect(left_, top_, right_, bottom_, dir);
    };
"
	
	
	
	
      end

      operation 1971212 "addOval"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "oval" explicit_type "jobject"
	  param in name "dir" explicit_type "SkPath::Direction"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkRect oval_;
        GraphicsJNI::jrectf_to_rect(env, oval, &oval_);
        obj->addOval(oval_, dir);
    };
"
	
	
	
	
      end

      operation 1971340 "addCircle"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "x" explicit_type "jfloat"
	  param in name "y" explicit_type "jfloat"
	  param in name "radius" explicit_type "jfloat"
	  param in name "dir" explicit_type "SkPath::Direction"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkScalar x_ = SkFloatToScalar(x);
        SkScalar y_ = SkFloatToScalar(y);
        SkScalar radius_ = SkFloatToScalar(radius);
        obj->addCircle(x_, y_, radius_, dir);
    };
"
	
	
	
	
      end

      operation 1971468 "addArc"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "oval" explicit_type "jobject"
	  param in name "startAngle" explicit_type "jfloat"
	  param in name "sweepAngle" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        SkRect oval_;
        GraphicsJNI::jrectf_to_rect(env, oval, &oval_);
        SkScalar startAngle_ = SkFloatToScalar(startAngle);
        SkScalar sweepAngle_ = SkFloatToScalar(sweepAngle);
        obj->addArc(oval_, startAngle_, sweepAngle_);
    };
"
	
	
	
	
      end

      operation 1971596 "addRoundRectXY"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "rect" explicit_type "jobject"
	  param in name "rx" explicit_type "jfloat"
	  param in name "ry" explicit_type "jfloat"
	  param in name "dir" explicit_type "SkPath::Direction"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        SkRect rect_;
        GraphicsJNI::jrectf_to_rect(env, rect, &rect_);
        SkScalar rx_ = SkFloatToScalar(rx);
        SkScalar ry_ = SkFloatToScalar(ry);
        obj->addRoundRect(rect_, rx_, ry_, dir);
    };
"
	
	
	
	
      end

      operation 1971724 "addRoundRect8"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "rect" explicit_type "jobject"
	  param in name "array" explicit_type "jfloatArray"
	  param in name "dir" explicit_type "SkPath::Direction"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        SkRect rect_;
        GraphicsJNI::jrectf_to_rect(env, rect, &rect_);
        AutoJavaFloatArray  afa(env, array, 8);
        const float* src = afa.ptr();
        SkScalar dst[8];
        
        for (int i = 0; i < 8; i++) {
            dst[i] = SkFloatToScalar(src[i]);
        }
        obj->addRoundRect(rect_, dst, dir);
    };
"
	
	
	
	
      end

      operation 1971852 "addPath__PathFF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param inout name "src" explicit_type "SkPath"
	  param in name "dx" explicit_type "jfloat"
	  param in name "dy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        SkScalar dx_ = SkFloatToScalar(dx);
        SkScalar dy_ = SkFloatToScalar(dy);
        obj->addPath(*src, dx_, dy_);
    };
"
	
	
	
	
      end

      operation 1971980 "addPath__Path"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param inout name "src" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        obj->addPath(*src);
    };
"
	
	
	
	
      end

      operation 1972108 "addPath__PathMatrix"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param inout name "src" explicit_type "SkPath"
	  param inout name "matrix" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        obj->addPath(*src, *matrix);
    };
"
	
	
	
	
      end

      operation 1972236 "offset__FFPath"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "dx" explicit_type "jfloat"
	  param in name "dy" explicit_type "jfloat"
	  param inout name "dst" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} * ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        SkScalar dx_ = SkFloatToScalar(dx);
        SkScalar dy_ = SkFloatToScalar(dy);
        obj->offset(dx_, dy_, dst);
    };
"
	
	
	
	
      end

      operation 1972364 "offset__FF"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "dx" explicit_type "jfloat"
	  param in name "dy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar dx_ = SkFloatToScalar(dx);
        SkScalar dy_ = SkFloatToScalar(dy);
        obj->offset(dx_, dy_);
    };
"
	
	
	
	
      end

      operation 1972492 "setLastPoint"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param in name "dx" explicit_type "jfloat"
	  param in name "dy" explicit_type "jfloat"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkScalar dx_ = SkFloatToScalar(dx);
        SkScalar dy_ = SkFloatToScalar(dy);
        obj->setLastPt(dx_, dy_);
    };
"
	
	
	
	
      end

      operation 1972620 "transform__MatrixPath"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param inout name "dst" explicit_type "SkPath"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}, ${t4} * ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        obj->transform(*matrix, dst);
    };
"
	
	
	
	
      end

      operation 1972748 "transform__Matrix"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkPath"
	  param inout name "matrix" explicit_type "SkMatrix"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        obj->transform(*matrix);
    };
"
	
	
	
	
      end
    end

    class 641804 "SkPathMeasureGlue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1974028 "create"
	class_operation cpp_inline public return_type class_ref 641676 // PathMeasurePair
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param in name "path" explicit_type "SkPath"
	  param in name "forceClosed" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        return path ? new PathMeasurePair(*path, forceClosed) : new PathMeasurePair;
    };
"
	
	
	
	
      end

      operation 1974156 "setPath"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "pair" type class_ref 641676 // PathMeasurePair
	  param in name "path" explicit_type "SkPath"
	  param in name "forceClosed" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, const ${t3} * ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        if (NULL == path) {
            pair->fPath.reset();
        } else {
            pair->fPath = *path;
        }
        pair->fMeasure.setPath(&pair->fPath, forceClosed);
    };
"
	
	
	
	
      end

      operation 1974284 "getLength"
	class_operation cpp_inline public explicit_return_type "jfloat"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "pair" type class_ref 641676 // PathMeasurePair
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return SkScalarToFloat(pair->fMeasure.getLength());
    };
"
	
	
	
	
      end

      operation 1974412 "convertTwoElemFloatArray"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "array" explicit_type "jfloatArray"
	  param in name "src" explicit_type "SkScalar"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} ${p2}[2]${v2}${)}${const}${volatile}${throw}${abstract} {
        AutoJavaFloatArray autoArray(env, array, 2);
        jfloat* ptr = autoArray.ptr();
        ptr[0] = SkScalarToFloat(src[0]);
        ptr[1] = SkScalarToFloat(src[1]);
    };
"
	
	
	
	
      end

      operation 1974540 "getPosTan"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "pair" type class_ref 641676 // PathMeasurePair
	  param in name "dist" explicit_type "jfloat"
	  param in name "pos" explicit_type "jfloatArray"
	  param in name "tan" explicit_type "jfloatArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        SkScalar    tmpPos[2], tmpTan[2];
        SkScalar*   posPtr = pos ? tmpPos : NULL;
        SkScalar*   tanPtr = tan ? tmpTan : NULL;
        
        if (!pair->fMeasure.getPosTan(SkFloatToScalar(dist), (SkPoint*)posPtr, (SkVector*)tanPtr)) {
            return false;
        }
    
        if (pos) {
            convertTwoElemFloatArray(env, pos, tmpPos);
        }
        if (tan) {
            convertTwoElemFloatArray(env, tan, tmpTan);
        }
        return true;
    };
"
	
	
	
	
      end

      operation 1974668 "getMatrix"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 6
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "pair" type class_ref 641676 // PathMeasurePair
	  param in name "dist" explicit_type "jfloat"
	  param inout name "matrix" explicit_type "SkMatrix"
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} * ${p4}${v4}, ${t5} ${p5}${v5}${)}${const}${volatile}${throw}${abstract} {
        return pair->fMeasure.getMatrix(SkFloatToScalar(dist), matrix, (SkPathMeasure::MatrixFlags)flags);
    };
"
	
	
	
	
      end

      operation 1974796 "getSegment"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 7
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "pair" type class_ref 641676 // PathMeasurePair
	  param in name "startF" explicit_type "jfloat"
	  param in name "stopF" explicit_type "jfloat"
	  param inout name "dst" explicit_type "SkPath"
	  param in name "startWithMoveTo" explicit_type "jboolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, ${t5} * ${p5}${v5}, ${t6} ${p6}${v6}${)}${const}${volatile}${throw}${abstract} {
        return pair->fMeasure.getSegment(SkFloatToScalar(startF), SkFloatToScalar(stopF), dst, startWithMoveTo);
    };
"
	
	
	
	
      end

      operation 1974924 "isClosed"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "pair" type class_ref 641676 // PathMeasurePair
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return pair->fMeasure.isClosed();
    };
"
	
	
	
	
      end

      operation 1975052 "nextContour"
	class_operation cpp_inline public explicit_return_type "jboolean"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "pair" type class_ref 641676 // PathMeasurePair
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return pair->fMeasure.nextContour();
    };
"
	
	
	
	
      end

      operation 1975180 "destroy"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "pair" type class_ref 641676 // PathMeasurePair
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        delete pair;
    };
"
	
	
	
	
      end
    end

    class 641932 "SkPictureGlue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1975308 "newPicture"
	class_operation cpp_inline public explicit_return_type "SkPicture"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param in name "src" explicit_type "SkPicture"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        if (src) {
            return new SkPicture(*src);
        } else {
            return new SkPicture;
        }
    };
"
	
	
	
	
      end

      operation 1975436 "deserialize"
	class_operation cpp_inline public explicit_return_type "SkPicture"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param in name "jstream" explicit_type "jobject"
	  param in name "jstorage" explicit_type "jbyteArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        SkPicture* picture = NULL;
        SkStream* strm = CreateJavaInputStreamAdaptor(env, jstream, jstorage);
        if (strm) {
            picture = new SkPicture(strm);
            delete strm;
        }
        return picture;
    };
"
	
	
	
	
      end

      operation 1975564 "killPicture"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "picture" explicit_type "SkPicture"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SkASSERT(picture);
        picture->unref();
    };
"
	
	
	
	
      end

      operation 1975692 "draw"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 4
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "canvas" explicit_type "SkCanvas"
	  param inout name "picture" explicit_type "SkPicture"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} * ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
        SkASSERT(canvas);
        SkASSERT(picture);
        picture->draw(canvas);
    };
"
	
	
	
	
      end

      operation 1975820 "serialize"
	class_operation cpp_inline public explicit_return_type "bool"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "picture" explicit_type "SkPicture"
	  param in name "jstream" explicit_type "jobject"
	  param in name "jstorage" explicit_type "jbyteArray"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        SkWStream* strm = CreateJavaOutputStreamAdaptor(env, jstream, jstorage);
        
        if (NULL != strm) {
            picture->serialize(strm);
            delete strm;
            return true;
        }
        return false;
    };
"
	
	
	
	
      end

      operation 1975948 "getWidth"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jpic" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jpic);
        return GraphicsJNI::getNativePicture(env, jpic)->width();
    };
"
	
	
	
	
      end

      operation 1976076 "getHeight"
	class_operation cpp_inline public explicit_return_type "int"
	nparams 2
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "jpic" explicit_type "jobject"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
        NPE_CHECK_RETURN_ZERO(env, jpic);
        return GraphicsJNI::getNativePicture(env, jpic)->height();
    };
"
	
	
	
	
      end

      operation 1976204 "beginRecording"
	class_operation cpp_inline public explicit_return_type "SkCanvas"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "pict" explicit_type "SkPicture"
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        // beginRecording does not ref its return value, it just returns it.
        SkCanvas* canvas = pict->beginRecording(w, h);
        // the java side will wrap this guy in a Canvas.java, which will call
        // unref in its finalizer, so we have to ref it here, so that both that
        // Canvas.java and our picture can both be owners
        canvas->ref();
        return canvas;
    };
"
	
	
	
	
      end

      operation 1976332 "endRecording"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "pict" explicit_type "SkPicture"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        pict->endRecording();
    };
"
	
	
	
	
      end
    end

    class 642060 "SkPorterDuffGlue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1976460 "CreateXfermode"
	class_operation cpp_inline public explicit_return_type "SkXfermode"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param in name "mode" explicit_type "SkPorterDuff::Mode"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return SkPorterDuff::CreateXfermode(mode);
    };
"
	
	
	
	
      end
    end

    class 642188 "SkRasterizerGlue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1976588 "finalizer"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "clazz" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkRasterizer"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SkSafeUnref(obj);
    };
"
	
	
	
	
      end
    end

    class 642316 "RgnIterPair"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "//////////////////////////////////////////////////////////////////////////////////////////////////////////"
      attribute 1723788 "fRgn"
	public explicit_type "SkRegion"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " a copy of the caller's region"
      end

      attribute 1723916 "fIter"
	public explicit_type "SkRegion::Iterator"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " an iterator acting upon the copy (fRgn)"
      end

      operation 1976716 "RgnIterPair"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "rgn" explicit_type "SkRegion"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : fRgn(rgn) {
        // have our iterator reference our copy (fRgn), so we know it will be
        // unchanged for the lifetime of the iterator
        fIter.reset(fRgn);
    };
"
	
	
	
	
      end
    end

    class 642444 "fields_t"
      visibility package stereotype "struct"
      cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      attribute 1724044 "surfaceTexture"
	public explicit_type "jfieldID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1724172 "postEvent"
	public explicit_type "jmethodID"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 642572 "JNISurfaceTextureContext"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " ----------------------------------------------------------------------------"
      operation 1976844 "JNISurfaceTextureContext"
	preserve_cpp_body_indent public explicit_return_type ""
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "weakThiz" explicit_type "jobject"
	  param in name "clazz" explicit_type "jclass"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)} :
    mWeakThiz(env->NewGlobalRef(weakThiz)),
    mClazz((jclass)env->NewGlobalRef(clazz))
${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1976972 "~JNISurfaceTextureContext"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 1977100 "onFrameAvailable"
	preserve_cpp_body_indent cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1977228 "getJNIEnv"
	class_operation preserve_cpp_body_indent private explicit_return_type "JNIEnv"
	nparams 1
	  param inout name "needsDetach" explicit_type "bool"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      operation 1977356 "detachJNI"
	class_operation preserve_cpp_body_indent private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 1724300 "mWeakThiz"
	private explicit_type "jobject"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 1724428 "mClazz"
	private explicit_type "jclass"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl ""
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 642956 "SkXfermodeGlue"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl ""
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 1978508 "finalizer"
	class_operation cpp_inline public explicit_return_type "void"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param inout name "obj" explicit_type "SkXfermode"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        SkSafeUnref(obj);
    };
"
	
	
	
	
      end

      operation 1978636 "avoid_create"
	class_operation cpp_inline public explicit_return_type "SkXfermode"
	nparams 5
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param in name "opColor" explicit_type "SkColor"
	  param in name "tolerance" explicit_type "U8CPU"
	  param in name "mode" explicit_type "SkAvoidXfermode::Mode"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}${)}${const}${volatile}${throw}${abstract} {
        return new SkAvoidXfermode(opColor, tolerance, mode);
    };
"
	
	
	
	
      end

      operation 1978764 "pixelxor_create"
	class_operation cpp_inline public explicit_return_type "SkXfermode"
	nparams 3
	  param inout name "env" explicit_type "JNIEnv"
	  param in name "" explicit_type "jobject"
	  param in name "opColor" explicit_type "SkColor"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
        return new SkPixelXorXfermode(opColor);
    };
"
	
	
	
	
      end
    end
  end

  deploymentview 143244 "android"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 197900 "RtlProperties"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 406156 // RtlDebugLevel
      end
    end

    artifact 198156 "TextLayout"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 406540 // TextLayout
      end
    end

    artifact 198284 "TextLayoutCache"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 406668 // TextLayoutCacheKey
	class_ref 406796 // TextLayoutValue
	class_ref 406924 // TextLayoutShaper
	class_ref 407052 // TextLayoutCache
	class_ref 407436 // typedef23
	class_ref 407308 // TextLayoutEngine
      end
    end

    artifact 198412 "Utils"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 407692 // typedef24
	class_ref 407564 // AssetStreamAdaptor
	class_ref 407948 // AutoFDSeek
      end
    end

    artifact 280972 "SkCanvasGlue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 639628 // SkCanvasGlue
      end
    end

    artifact 281100 "SkColorFilterGlue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 639756 // SkColorFilterGlue
      end
    end

    artifact 281740 "SkDrawFilterGlue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 640396 // SkDrawFilterGlue
      end
    end

    artifact 282124 "SkMatrixGlue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 640780 // SkMatrixGlue
      end
    end

    artifact 282380 "JMetricsID"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 641036 // JMetricsID
      end
    end

    artifact 282508 "SkPaintGlue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 641164 // SkPaintGlue
      end
    end

    artifact 282636 "SkPathGlue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 641420 // SkPathGlue
      end
    end

    artifact 283020 "SkPathMeasureGlue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 641804 // SkPathMeasureGlue
      end
    end

    artifact 283148 "SkPictureGlue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 641932 // SkPictureGlue
      end
    end

    artifact 283276 "SkPorterDuffGlue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 642060 // SkPorterDuffGlue
      end
    end

    artifact 283404 "SkRasterizerGlue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 642188 // SkRasterizerGlue
      end
    end

    artifact 283532 "RgnIterPair"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 642316 // RgnIterPair
      end
    end

    artifact 283660 "fields_t"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 642444 // fields_t
      end
    end

    artifact 283788 "JNISurfaceTextureContext"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 642572 // JNISurfaceTextureContext
      end
    end

    artifact 284172 "SkXfermodeGlue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      associated_classes
	class_ref 642956 // SkXfermodeGlue
      end
    end
  end
end
