class RingtonePreference
!!!4038668.java!!!	RingtonePreference(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
        
        TypedArray a = context.obtainStyledAttributes(attrs,
                com.android.internal.R.styleable.RingtonePreference, defStyle, 0);
        mRingtoneType = a.getInt(com.android.internal.R.styleable.RingtonePreference_ringtoneType,
                RingtoneManager.TYPE_RINGTONE);
        mShowDefault = a.getBoolean(com.android.internal.R.styleable.RingtonePreference_showDefault,
                true);
        mShowSilent = a.getBoolean(com.android.internal.R.styleable.RingtonePreference_showSilent,
                true);
        a.recycle();
!!!4038796.java!!!	RingtonePreference(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, com.android.internal.R.attr.ringtonePreferenceStyle);
!!!4038924.java!!!	RingtonePreference(inout context : Context)
        this(context, null);
!!!4039052.java!!!	getRingtoneType() : int
        return mRingtoneType;
!!!4039180.java!!!	setRingtoneType(in type : int) : void
        mRingtoneType = type;
!!!4039308.java!!!	getShowDefault() : boolean
        return mShowDefault;
!!!4039436.java!!!	setShowDefault(inout showDefault : boolean) : void
        mShowDefault = showDefault;
!!!4039564.java!!!	getShowSilent() : boolean
        return mShowSilent;
!!!4039692.java!!!	setShowSilent(inout showSilent : boolean) : void
        mShowSilent = showSilent;
!!!4039820.java!!!	onClick() : void
        // Launch the ringtone picker
        Intent intent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
        onPrepareRingtonePickerIntent(intent);
        PreferenceFragment owningFragment = getPreferenceManager().getFragment();
        if (owningFragment != null) {
            owningFragment.startActivityForResult(intent, mRequestCode);
        } else {
            getPreferenceManager().getActivity().startActivityForResult(intent, mRequestCode);
        }
!!!4039948.java!!!	onPrepareRingtonePickerIntent(inout ringtonePickerIntent : Intent) : void

        ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_EXISTING_URI,
                onRestoreRingtone());
        
        ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, mShowDefault);
        if (mShowDefault) {
            ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_DEFAULT_URI,
                    RingtoneManager.getDefaultUri(getRingtoneType()));
        }

        ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_SILENT, mShowSilent);
        ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, mRingtoneType);
        ringtonePickerIntent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE, getTitle());
!!!4040076.java!!!	onSaveRingtone(inout ringtoneUri : Uri) : void
        persistString(ringtoneUri != null ? ringtoneUri.toString() : "");
!!!4040204.java!!!	onRestoreRingtone() : Uri
        final String uriString = getPersistedString(null);
        return !TextUtils.isEmpty(uriString) ? Uri.parse(uriString) : null;
!!!4040332.java!!!	onGetDefaultValue(inout a : TypedArray, in index : int) : Object
        return a.getString(index);
!!!4040460.java!!!	onSetInitialValue(inout restorePersistedValue : boolean, inout defaultValueObj : Object) : void
        String defaultValue = (String) defaultValueObj;
        
        /*
         * This method is normally to make sure the internal state and UI
         * matches either the persisted value or the default value. Since we
         * don't show the current value in the UI (until the dialog is opened)
         * and we don't keep local state, if we are restoring the persisted
         * value we don't need to do anything.
         */
        if (restorePersistedValue) {
            return;
        }
        
        // If we are setting to the default value, we should persist it.
        if (!TextUtils.isEmpty(defaultValue)) {
            onSaveRingtone(Uri.parse(defaultValue));
        }
!!!4040588.java!!!	onAttachedToHierarchy(inout preferenceManager : PreferenceManager) : void
        super.onAttachedToHierarchy(preferenceManager);
        
        preferenceManager.registerOnActivityResultListener(this);
        mRequestCode = preferenceManager.getNextRequestCode();
!!!4040716.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : boolean
        
        if (requestCode == mRequestCode) {
            
            if (data != null) {
                Uri uri = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
                
                if (callChangeListener(uri != null ? uri.toString() : "")) {
                    onSaveRingtone(uri);
                }
            }
            
            return true;
        }
        
        return false;
