class LongBuffer
!!!686491.java!!!	allocate(in capacity : int) : LongBuffer
        if (capacity < 0) {
            throw new IllegalArgumentException("capacity < 0: " + capacity);
        }
        return new LongArrayBuffer(new long[capacity]);
!!!686619.java!!!	wrap(inout array : long) : LongBuffer
        return wrap(array, 0, array.length);
!!!686747.java!!!	wrap(inout array : long, in start : int, in longCount : int) : LongBuffer
        Arrays.checkOffsetAndCount(array.length, start, longCount);
        LongBuffer buf = new LongArrayBuffer(array);
        buf.position = start;
        buf.limit = start + longCount;
        return buf;
!!!686875.java!!!	LongBuffer(in capacity : int)
        super(3, capacity, null);
!!!687003.java!!!	array() : long
        return protectedArray();
!!!687131.java!!!	arrayOffset() : int
        return protectedArrayOffset();
!!!687515.java!!!	compareTo(inout otherBuffer : LongBuffer) : int
        int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining()
                : otherBuffer.remaining();
        int thisPos = position;
        int otherPos = otherBuffer.position;
        long thisLong, otherLong;
        while (compareRemaining > 0) {
            thisLong = get(thisPos);
            otherLong = otherBuffer.get(otherPos);
            if (thisLong != otherLong) {
                return thisLong < otherLong ? -1 : 1;
            }
            thisPos++;
            otherPos++;
            compareRemaining--;
        }
        return remaining() - otherBuffer.remaining();
!!!687771.java!!!	equals(inout other : Object) : boolean
        if (!(other instanceof LongBuffer)) {
            return false;
        }
        LongBuffer otherBuffer = (LongBuffer) other;

        if (remaining() != otherBuffer.remaining()) {
            return false;
        }

        int myPosition = position;
        int otherPosition = otherBuffer.position;
        boolean equalSoFar = true;
        while (equalSoFar && (myPosition < limit)) {
            equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);
        }

        return equalSoFar;
!!!688027.java!!!	get(inout dst : long) : LongBuffer
        return get(dst, 0, dst.length);
!!!688155.java!!!	get(inout dst : long, in dstOffset : int, in longCount : int) : LongBuffer
        Arrays.checkOffsetAndCount(dst.length, dstOffset, longCount);
        if (longCount > remaining()) {
            throw new BufferUnderflowException();
        }
        for (int i = dstOffset; i < dstOffset + longCount; ++i) {
            dst[i] = get();
        }
        return this;
!!!688411.java!!!	hasArray() : boolean
        return protectedHasArray();
!!!688539.java!!!	hashCode() : int
        int myPosition = position;
        int hash = 0;
        long l;
        while (myPosition < limit) {
            l = get(myPosition++);
            hash = hash + ((int) l) ^ ((int) (l >> 32));
        }
        return hash;
!!!689435.java!!!	put(inout src : long) : LongBuffer
        return put(src, 0, src.length);
!!!689563.java!!!	put(inout src : long, in srcOffset : int, in longCount : int) : LongBuffer
        Arrays.checkOffsetAndCount(src.length, srcOffset, longCount);
        if (longCount > remaining()) {
            throw new BufferOverflowException();
        }
        for (int i = srcOffset; i < srcOffset + longCount; ++i) {
            put(src[i]);
        }
        return this;
!!!689691.java!!!	put(inout src : LongBuffer) : LongBuffer
        if (isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        if (src == this) {
            throw new IllegalArgumentException("src == this");
        }
        if (src.remaining() > remaining()) {
            throw new BufferOverflowException();
        }
        long[] contents = new long[src.remaining()];
        src.get(contents);
        put(contents);
        return this;
