class MulticastSocket
!!!579995.java!!!	MulticastSocket()
        setReuseAddress(true);
!!!580123.java!!!	MulticastSocket(in port : int)
        super(port);
        setReuseAddress(true);
!!!580251.java!!!	MulticastSocket(inout localAddress : SocketAddress)
        super(localAddress);
        setReuseAddress(true);
!!!580379.java!!!	getInterface() : InetAddress
        checkOpen();
        if (setAddress != null) {
            return setAddress;
        }
        InetAddress ipvXaddress = (InetAddress) impl.getOption(SocketOptions.IP_MULTICAST_IF);
        if (ipvXaddress.isAnyLocalAddress()) {
            // the address was not set at the IPv4 level so check the IPv6
            // level
            NetworkInterface theInterface = getNetworkInterface();
            if (theInterface != null) {
                Enumeration<InetAddress> addresses = theInterface.getInetAddresses();
                if (addresses != null) {
                    while (addresses.hasMoreElements()) {
                        InetAddress nextAddress = addresses.nextElement();
                        if (nextAddress instanceof Inet6Address) {
                            return nextAddress;
                        }
                    }
                }
            }
        }
        return ipvXaddress;
!!!580507.java!!!	getNetworkInterface() : NetworkInterface
        checkOpen();
        int index = (Integer) impl.getOption(SocketOptions.IP_MULTICAST_IF2);
        if (index != 0) {
            return NetworkInterface.getByIndex(index);
        }
        return NetworkInterface.forUnboundMulticastSocket();
!!!580635.java!!!	getTimeToLive() : int
        checkOpen();
        return impl.getTimeToLive();
!!!580763.java!!!	getTTL() : byte
        checkOpen();
        return impl.getTTL();
!!!580891.java!!!	joinGroup(inout groupAddr : InetAddress) : void
        checkJoinOrLeave(groupAddr);
        impl.join(groupAddr);
!!!581019.java!!!	joinGroup(inout groupAddress : SocketAddress, inout netInterface : NetworkInterface) : void
        checkJoinOrLeave(groupAddress, netInterface);
        impl.joinGroup(groupAddress, netInterface);
!!!581147.java!!!	leaveGroup(inout groupAddr : InetAddress) : void
        checkJoinOrLeave(groupAddr);
        impl.leave(groupAddr);
!!!581275.java!!!	leaveGroup(inout groupAddress : SocketAddress, inout netInterface : NetworkInterface) : void
        checkJoinOrLeave(groupAddress, netInterface);
        impl.leaveGroup(groupAddress, netInterface);
!!!581403.java!!!	checkJoinOrLeave(inout groupAddress : SocketAddress, inout netInterface : NetworkInterface) : void
        checkOpen();
        if (groupAddress == null) {
            throw new IllegalArgumentException("groupAddress == null");
        }

        if (netInterface != null && !netInterface.getInetAddresses().hasMoreElements()) {
            throw new SocketException("No address associated with interface: " + netInterface);
        }

        if (!(groupAddress instanceof InetSocketAddress)) {
            throw new IllegalArgumentException("Group address not an InetSocketAddress: " +
                    groupAddress.getClass());
        }

        InetAddress groupAddr = ((InetSocketAddress) groupAddress).getAddress();
        if (groupAddr == null) {
            throw new SocketException("Group address has no address: " + groupAddress);
        }

        if (!groupAddr.isMulticastAddress()) {
            throw new IOException("Not a multicast group: " + groupAddr);
        }
!!!581531.java!!!	checkJoinOrLeave(inout groupAddr : InetAddress) : void
        checkOpen();
        if (!groupAddr.isMulticastAddress()) {
            throw new IOException("Not a multicast group: " + groupAddr);
        }
!!!581659.java!!!	send(inout packet : DatagramPacket, in ttl : byte) : void
        checkOpen();
        InetAddress packAddr = packet.getAddress();
        int currTTL = getTimeToLive();
        if (packAddr.isMulticastAddress() && (byte) currTTL != ttl) {
            try {
                setTimeToLive(ttl & 0xff);
                impl.send(packet);
            } finally {
                setTimeToLive(currTTL);
            }
        } else {
            impl.send(packet);
        }
!!!581787.java!!!	setInterface(inout address : InetAddress) : void
        checkOpen();
        if (address == null) {
            throw new NullPointerException("address == null");
        }

        NetworkInterface networkInterface = NetworkInterface.getByInetAddress(address);
        if (networkInterface == null) {
            throw new SocketException("Address not associated with an interface: " + address);
        }
        impl.setOption(SocketOptions.IP_MULTICAST_IF2, networkInterface.getIndex());
        this.setAddress = address;
!!!581915.java!!!	setNetworkInterface(inout networkInterface : NetworkInterface) : void
        checkOpen();
        if (networkInterface == null) {
            throw new SocketException("networkInterface == null");
        }

        impl.setOption(SocketOptions.IP_MULTICAST_IF2, networkInterface.getIndex());
        this.setAddress = null;
!!!582043.java!!!	setTimeToLive(in ttl : int) : void
        checkOpen();
        if (ttl < 0 || ttl > 255) {
            throw new IllegalArgumentException("TimeToLive out of bounds: " + ttl);
        }
        impl.setTimeToLive(ttl);
!!!582171.java!!!	setTTL(in ttl : byte) : void
        checkOpen();
        impl.setTTL(ttl);
!!!582299.java!!!	createSocket(in aPort : int, inout addr : InetAddress) : void
        impl = factory != null ? factory.createDatagramSocketImpl() : new PlainDatagramSocketImpl();
        impl.create();
        try {
            impl.setOption(SocketOptions.SO_REUSEADDR, Boolean.TRUE);
            impl.bind(aPort, addr);
            isBound = true;
        } catch (SocketException e) {
            close();
            throw e;
        }
!!!582427.java!!!	getLoopbackMode() : boolean
        checkOpen();
        return !((Boolean) impl.getOption(SocketOptions.IP_MULTICAST_LOOP)).booleanValue();
!!!582555.java!!!	setLoopbackMode(inout disable : boolean) : void
        checkOpen();
        impl.setOption(SocketOptions.IP_MULTICAST_LOOP, Boolean.valueOf(!disable));
