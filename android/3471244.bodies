class DecodedInstruction
!!!15062156.java!!!	decode(inout in : CodeInput) : DecodedInstruction
        int opcodeUnit = in.read();
        int opcode = Opcodes.extractOpcodeFromUnit(opcodeUnit);
        InstructionCodec format = OpcodeInfo.getFormat(opcode);

        return format.decode(opcodeUnit, in);
!!!15062284.java!!!	decodeAll(inout encodedInstructions : short) : DecodedInstruction
        int size = encodedInstructions.length;
        DecodedInstruction[] decoded = new DecodedInstruction[size];
        ShortArrayCodeInput in = new ShortArrayCodeInput(encodedInstructions);

        try {
            while (in.hasMore()) {
                decoded[in.cursor()] = DecodedInstruction.decode(in);
            }
        } catch (EOFException ex) {
            throw new DexException(ex);
        }

        return decoded;
!!!15062412.java!!!	DecodedInstruction(inout format : InstructionCodec, in opcode : int, in index : int, inout indexType : IndexType, in target : int, in literal : long)
        if (format == null) {
            throw new NullPointerException("format == null");
        }

        if (!Opcodes.isValidShape(opcode)) {
            throw new IllegalArgumentException("invalid opcode");
        }

        this.format = format;
        this.opcode = opcode;
        this.index = index;
        this.indexType = indexType;
        this.target = target;
        this.literal = literal;
!!!15062540.java!!!	getFormat() : InstructionCodec
        return format;
!!!15062668.java!!!	getOpcode() : int
        return opcode;
!!!15062796.java!!!	getOpcodeUnit() : short
        return (short) opcode;
!!!15062924.java!!!	getIndex() : int
        return index;
!!!15063052.java!!!	getIndexUnit() : short
        return (short) index;
!!!15063180.java!!!	getIndexType() : IndexType
        return indexType;
!!!15063308.java!!!	getTarget() : int
        return target;
!!!15063436.java!!!	getTarget(in baseAddress : int) : int
        return target - baseAddress;
!!!15063564.java!!!	getTargetUnit(in baseAddress : int) : short
        int relativeTarget = getTarget(baseAddress);

        if (relativeTarget != (short) relativeTarget) {
            throw new DexException("Target out of range: "
                    + Hex.s4(relativeTarget));
        }

        return (short) relativeTarget;
!!!15063692.java!!!	getTargetByte(in baseAddress : int) : int
        int relativeTarget = getTarget(baseAddress);

        if (relativeTarget != (byte) relativeTarget) {
            throw new DexException("Target out of range: "
                    + Hex.s4(relativeTarget));
        }

        return relativeTarget & 0xff;
!!!15063820.java!!!	getLiteral() : long
        return literal;
!!!15063948.java!!!	getLiteralInt() : int
        if (literal != (int) literal) {
            throw new DexException("Literal out of range: " + Hex.u8(literal));
        }

        return (int) literal;
!!!15064076.java!!!	getLiteralUnit() : short
        if (literal != (short) literal) {
            throw new DexException("Literal out of range: " + Hex.u8(literal));
        }

        return (short) literal;
!!!15064204.java!!!	getLiteralByte() : int
        if (literal != (byte) literal) {
            throw new DexException("Literal out of range: " + Hex.u8(literal));
        }

        return (int) literal & 0xff;
!!!15064332.java!!!	getLiteralNibble() : int
        if ((literal < -8) || (literal > 7)) {
            throw new DexException("Literal out of range: " + Hex.u8(literal));
        }

        return (int) literal & 0xf;
!!!15064588.java!!!	getA() : int
        return 0;
!!!15064716.java!!!	getB() : int
        return 0;
!!!15064844.java!!!	getC() : int
        return 0;
!!!15064972.java!!!	getD() : int
        return 0;
!!!15065100.java!!!	getE() : int
        return 0;
!!!15065228.java!!!	getRegisterCountUnit() : short
        int registerCount = getRegisterCount();

        if ((registerCount & ~0xffff) != 0) {
            throw new DexException("Register count out of range: "
                    + Hex.u8(registerCount));
        }

        return (short) registerCount;
!!!15065356.java!!!	getAUnit() : short
        int a = getA();

        if ((a & ~0xffff) != 0) {
            throw new DexException("Register A out of range: " + Hex.u8(a));
        }

        return (short) a;
!!!15065484.java!!!	getAByte() : short
        int a = getA();

        if ((a & ~0xff) != 0) {
            throw new DexException("Register A out of range: " + Hex.u8(a));
        }

        return (short) a;
!!!15065612.java!!!	getANibble() : short
        int a = getA();

        if ((a & ~0xf) != 0) {
            throw new DexException("Register A out of range: " + Hex.u8(a));
        }

        return (short) a;
!!!15065740.java!!!	getBUnit() : short
        int b = getB();

        if ((b & ~0xffff) != 0) {
            throw new DexException("Register B out of range: " + Hex.u8(b));
        }

        return (short) b;
!!!15065868.java!!!	getBByte() : short
        int b = getB();

        if ((b & ~0xff) != 0) {
            throw new DexException("Register B out of range: " + Hex.u8(b));
        }

        return (short) b;
!!!15065996.java!!!	getBNibble() : short
        int b = getB();

        if ((b & ~0xf) != 0) {
            throw new DexException("Register B out of range: " + Hex.u8(b));
        }

        return (short) b;
!!!15066124.java!!!	getCUnit() : short
        int c = getC();

        if ((c & ~0xffff) != 0) {
            throw new DexException("Register C out of range: " + Hex.u8(c));
        }

        return (short) c;
!!!15066252.java!!!	getCByte() : short
        int c = getC();

        if ((c & ~0xff) != 0) {
            throw new DexException("Register C out of range: " + Hex.u8(c));
        }

        return (short) c;
!!!15066380.java!!!	getCNibble() : short
        int c = getC();

        if ((c & ~0xf) != 0) {
            throw new DexException("Register C out of range: " + Hex.u8(c));
        }

        return (short) c;
!!!15066508.java!!!	getDUnit() : short
        int d = getD();

        if ((d & ~0xffff) != 0) {
            throw new DexException("Register D out of range: " + Hex.u8(d));
        }

        return (short) d;
!!!15066636.java!!!	getDByte() : short
        int d = getD();

        if ((d & ~0xff) != 0) {
            throw new DexException("Register D out of range: " + Hex.u8(d));
        }

        return (short) d;
!!!15066764.java!!!	getDNibble() : short
        int d = getD();

        if ((d & ~0xf) != 0) {
            throw new DexException("Register D out of range: " + Hex.u8(d));
        }

        return (short) d;
!!!15066892.java!!!	getENibble() : short
        int e = getE();

        if ((e & ~0xf) != 0) {
            throw new DexException("Register E out of range: " + Hex.u8(e));
        }

        return (short) e;
!!!15067020.java!!!	encode(inout out : CodeOutput) : void
        format.encode(this, out);
