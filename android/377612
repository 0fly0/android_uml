format 74
"back" // framework::base::cmds::am::src::com::android::dx::ssa::back
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/jellybean/dalvik/dx/src/com/android/dx/ssa/back/"
  java_package "com.android.dx.ssa.back"
  classview 328076 "back"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 3483788 "InterferenceGraph"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A register interference graph"
      classrelation 6797708 // interference (<unidirectional association>)
	relation 6797580 --->
	  stereotype "ArrayList"
	  a role_name "interference" const_relation private
	    comment "{@code non-null;} interference graph, indexed by register in
both dimensions
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 6797708 // interference (<unidirectional association>)
	  b parent class_ref 3482252 // IntSet
      end

      operation 15219212 "InterferenceGraph"
	public explicit_return_type ""
	nparams 1
	  param in name "countRegs" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new graph.

@param countRegs {@code >= 0;} the start count of registers in
the namespace. New registers can be added subsequently."
      end

      operation 15219340 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "regV" explicit_type "int"
	  param in name "regW" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a register pair to the interference/liveness graph. Parameter
order is insignificant.

@param regV one register index
@param regW another register index"
      end

      operation 15219468 "dumpToStdout"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dumps interference graph to stdout for debugging."
      end

      operation 15219596 "mergeInterferenceSet"
	public explicit_return_type "void"
	nparams 2
	  param in name "reg" explicit_type "int"
	  param inout name "set" type class_ref 3482252 // IntSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Merges the interference set for a register into a given bit set

@param reg {@code >= 0;} register
@param set {@code non-null;} interference set; will be merged
with set for given register"
      end

      operation 15219724 "ensureCapacity"
	private explicit_return_type "void"
	nparams 1
	  param in name "size" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that the interference graph is appropriately sized.

@param size requested minumum size"
      end
    end

    class 3485708 "FirstFitAllocator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Allocates registers via a naive n^2 register allocator.
This allocator does not try to co-locate local variables or deal
intelligently with different size register uses."
      classrelation 6796428 // <generalisation>
	relation 6796300 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6796428 // <generalisation>
	  b parent class_ref 3485836 // RegisterAllocator
      end

      attribute 12646284 "PRESLOT_PARAMS"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If true, allocator places parameters at the top of the frame
in calling-convention order.
"
      end

      attribute 12646412 "mapped"
	const_attribute private explicit_type "BitSet"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indexed by old reg; the set of old regs we've mapped "
      end

      operation 15213580 "FirstFitAllocator"
	public explicit_return_type ""
	nparams 2
	  param in name "ssaMeth" type class_ref 3480844 // SsaMethod
	  param in name "interference" type class_ref 3483788 // InterferenceGraph
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}final ${t0} ${p0}, final ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 15213708 "wantsParamsMovedHigh"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 15213836 "allocateRegisters"
	public return_type class_ref 3480588 // RegisterMapper
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 15213964 "paramNumberFromMoveParam"
	private explicit_return_type "int"
	nparams 1
	  param inout name "ndefInsn" type class_ref 3481740 // NormalSsaInsn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameter number that this move-param insn refers to
@param ndefInsn a move-param insn (otherwise, exceptions will be thrown)
@return parameter number (offset in the total parameter width)"
      end
    end

    class 3485836 "RegisterAllocator"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Base class of all register allocators."
      classrelation 6796172 // ssaMeth (<unidirectional association>)
	relation 6796044 --->
	  a role_name "ssaMeth" const_relation protected
	    comment " method being processed 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6796172 // ssaMeth (<unidirectional association>)
	  b parent class_ref 3480844 // SsaMethod
      end

      classrelation 6796300 // interference (<unidirectional association>)
	relation 6796172 --->
	  a role_name "interference" const_relation protected
	    comment " interference graph, indexed by register in both dimensions 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6796300 // interference (<unidirectional association>)
	  b parent class_ref 3483788 // InterferenceGraph
      end

      operation 15212684 "RegisterAllocator"
	public explicit_return_type ""
	nparams 2
	  param inout name "ssaMeth" type class_ref 3480844 // SsaMethod
	  param inout name "interference" type class_ref 3483788 // InterferenceGraph
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an instance. Call {@code allocateRegisters} to run.
@param ssaMeth method to process.
@param interference Interference graph, indexed by register in both
dimensions."
      end

      operation 15212812 "wantsParamsMovedHigh"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether the method params were allocated at the bottom
of the namespace, and thus should be moved up to the top of the
namespace after phi removal.

@return {@code true} if params should be moved from low to high"
      end

      operation 15212940 "allocateRegisters"
	abstract public return_type class_ref 3480588 // RegisterMapper
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs the algorithm.

@return a register mapper to apply to the {@code SsaMethod}"
      end

      operation 15213068 "getCategoryForSsaReg"
	protected explicit_return_type "int"
	nparams 1
	  param in name "reg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the category (width) of the definition site of the register.
Returns {@code 1} for undefined registers.

@param reg register
@return {@code 1..2}"
      end

      operation 15213196 "getDefinitionSpecForSsaReg"
	protected return_type class_ref 3437836 // RegisterSpec
	nparams 1
	  param in name "reg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the RegisterSpec of the definition of the register.

@param reg {@code >= 0;} SSA register
@return definition spec of the register or null if it is never defined
(for the case of \"version 0\" SSA registers)"
      end

      operation 15213324 "isDefinitionMoveParam"
	protected explicit_return_type "boolean"
	nparams 1
	  param in name "reg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the definition site of this register is a
move-param (ie, this is a method parameter).

@param reg register in question
@return {@code true} if this is a method parameter"
      end

      operation 15213452 "insertMoveBefore"
	protected return_type class_ref 3437836 // RegisterSpec
	nparams 2
	  param inout name "insn" type class_ref 3481100 // SsaInsn
	  param inout name "reg" type class_ref 3437836 // RegisterSpec
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts a move instruction for a specified SSA register before a
specified instruction, creating a new SSA register and adjusting the
interference graph in the process. The insn currently must be the
last insn in a block.

@param insn {@code non-null;} insn to insert move before, must
be last insn in block
@param reg {@code non-null;} SSA register to duplicate
@return {@code non-null;} spec of new SSA register created by move"
      end
    end

    class 3485964 "FirstFitLocalCombiningAllocator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Allocates registers in a first-fit fashion, with the bottom reserved for
method parameters and all SSAregisters representing the same local variable
kept together if possible."
      classrelation 6796556 // <generalisation>
	relation 6796428 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6796556 // <generalisation>
	  b parent class_ref 3485836 // RegisterAllocator
      end

      attribute 12646540 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " local debug flag "
      end

      classrelation 6796684 // localVariables (<unidirectional association>)
	relation 6796556 --->
	  stereotype "Map"
	  a role_name "localVariables" const_relation private
	    comment " maps local variable to a list of associated SSA registers "
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}, ArrayList<RegisterSpec>> ${name}${value};
"
	    classrelation_ref 6796684 // localVariables (<unidirectional association>)
	  b parent class_ref 3437580 // LocalItem
      end

      classrelation 6796812 // moveResultPseudoInsns (<unidirectional association>)
	relation 6796684 --->
	  stereotype "ArrayList"
	  a role_name "moveResultPseudoInsns" const_relation private
	    comment " list of move-result-pesudo instructions seen in this method "
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 6796812 // moveResultPseudoInsns (<unidirectional association>)
	  b parent class_ref 3481740 // NormalSsaInsn
      end

      classrelation 6796940 // invokeRangeInsns (<unidirectional association>)
	relation 6796812 --->
	  stereotype "ArrayList"
	  a role_name "invokeRangeInsns" const_relation private
	    comment " list of invoke-range instructions seen in this method "
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 6796940 // invokeRangeInsns (<unidirectional association>)
	  b parent class_ref 3481740 // NormalSsaInsn
      end

      classrelation 6797068 // phiInsns (<unidirectional association>)
	relation 6796940 --->
	  stereotype "ArrayList"
	  a role_name "phiInsns" const_relation private
	    comment " list of phi instructions seen in this method "
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	    classrelation_ref 6797068 // phiInsns (<unidirectional association>)
	  b parent class_ref 3481868 // PhiInsn
      end

      attribute 12646668 "ssaRegsMapped"
	const_attribute private explicit_type "BitSet"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " indexed by SSA reg; the set of SSA regs we've mapped "
      end

      classrelation 6797196 // mapper (<unidirectional association>)
	relation 6797068 --->
	  a role_name "mapper" const_relation private
	    comment " Register mapper which will be our result 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6797196 // mapper (<unidirectional association>)
	  b parent class_ref 3483532 // InterferenceRegisterMapper
      end

      attribute 12646796 "paramRangeEnd"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " end of rop registers range (starting at 0) reserved for parameters "
      end

      attribute 12646924 "reservedRopRegs"
	const_attribute private explicit_type "BitSet"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " set of rop registers reserved for parameters or local variables "
      end

      attribute 12647052 "usedRopRegs"
	const_attribute private explicit_type "BitSet"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " set of rop registers that have been used by anything "
      end

      attribute 12647180 "minimizeRegisters"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " true if converter should take steps to minimize rop-form registers "
      end

      operation 15214092 "FirstFitLocalCombiningAllocator"
	public explicit_return_type ""
	nparams 3
	  param inout name "ssaMeth" type class_ref 3480844 // SsaMethod
	  param inout name "interference" type class_ref 3483788 // InterferenceGraph
	  param inout name "minimizeRegisters" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs instance.

@param ssaMeth {@code non-null;} method to process
@param interference non-null interference graph for SSA registers
@param minimizeRegisters true if converter should take steps to
minimize rop-form registers"
      end

      operation 15214220 "wantsParamsMovedHigh"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 15214348 "allocateRegisters"
	public return_type class_ref 3480588 // RegisterMapper
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 15214476 "printLocalVars"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Dumps local variable table to stdout for debugging."
      end

      operation 15214604 "handleLocalAssociatedParams"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps all local-associated parameters to rop registers."
      end

      operation 15214732 "getParameterIndexForReg"
	private explicit_return_type "int"
	nparams 1
	  param in name "ssaReg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the parameter index for SSA registers that are method parameters.
{@code -1} is returned for non-parameter registers.

@param ssaReg {@code >=0;} SSA register to look up
@return parameter index or {@code -1} if not a parameter"
      end

      operation 15214860 "handleLocalAssociatedOther"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps all local-associated registers that are not parameters.
Tries to find an unreserved range that's wide enough for all of
the SSA registers, and then tries to map them all to that
range. If not all fit, a new range is tried until all registers
have been fit."
      end

      operation 15214988 "tryMapRegs"
	private explicit_return_type "boolean"
	nparams 4
	  param inout name "specs" explicit_type "ArrayList<RegisterSpec>"
	  param in name "ropReg" explicit_type "int"
	  param in name "maxAllowedCategory" explicit_type "int"
	  param inout name "markReserved" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to map a list of SSA registers into the a rop reg, marking
used rop space as reserved. SSA registers that don't fit are left
unmapped.

@param specs {@code non-null;} SSA registers to attempt to map
@param ropReg {@code >=0;} rop register to map to
@param maxAllowedCategory {@code 1..2;} maximum category
allowed in mapping.
@param markReserved do so if {@code true}
@return {@code true} if all registers were mapped, {@code false}
if some remain unmapped"
      end

      operation 15215116 "tryMapReg"
	private explicit_return_type "boolean"
	nparams 3
	  param inout name "ssaSpec" type class_ref 3437836 // RegisterSpec
	  param in name "ropReg" explicit_type "int"
	  param in name "maxAllowedCategory" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to map an SSA register to a rop register.

@param ssaSpec {@code non-null;} SSA register
@param ropReg {@code >=0;} rop register
@param maxAllowedCategory {@code 1..2;} the maximum category
that the SSA register is allowed to be
@return {@code true} if map succeeded, {@code false} if not"
      end

      operation 15215244 "markReserved"
	private explicit_return_type "void"
	nparams 2
	  param in name "ropReg" explicit_type "int"
	  param in name "category" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks a range of rop registers as \"reserved for a local variable.\"

@param ropReg {@code >= 0;} rop register to reserve
@param category {@code > 0;} width to reserve"
      end

      operation 15215372 "rangeContainsReserved"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "ropRangeStart" explicit_type "int"
	  param in name "width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks to see if any rop registers in the specified range are reserved
for local variables or parameters.

@param ropRangeStart {@code >= 0;} lowest rop register
@param width {@code > 0;} number of rop registers in range.
@return {@code true} if any register in range is marked reserved"
      end

      operation 15215500 "isThisPointerReg"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "startReg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if given rop register represents the {@code this} pointer
for a non-static method.

@param startReg rop register
@return true if the \"this\" pointer is located here."
      end

      operation 15215628 "findNextUnreservedRopReg"
	private explicit_return_type "int"
	nparams 2
	  param in name "startReg" explicit_type "int"
	  param in name "width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds a range of unreserved rop registers.

@param startReg {@code >= 0;} a rop register to start the search at
@param width {@code > 0;} the width, in registers, required.
@return {@code >= 0;} start of available register range."
      end

      operation 15215756 "findRopRegForLocal"
	private explicit_return_type "int"
	nparams 2
	  param in name "startReg" explicit_type "int"
	  param in name "width" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds a range of rop regs that can be used for local variables.
If {@code MIX_LOCALS_AND_OTHER} is {@code false}, this means any
rop register that has not yet been used.

@param startReg {@code >= 0;} a rop register to start the search at
@param width {@code > 0;} the width, in registers, required.
@return {@code >= 0;} start of available register range."
      end

      operation 15215884 "handleUnassociatedParameters"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps any parameter that isn't local-associated, which can happen
in the case where there is no java debug info."
      end

      operation 15216012 "handleInvokeRangeInsns"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles all insns that want a register range for their sources."
      end

      operation 15216140 "handleCheckCastResults"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles check cast results to reuse the same source register.
Inserts a move if it can't map the same register to both and the
check cast is not caught."
      end

      operation 15216268 "handlePhiInsns"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Handles all phi instructions, trying to map them to a common register."
      end

      operation 15216396 "handleNormalUnassociated"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps all non-parameter, non-local variable registers."
      end

      operation 15216524 "canMapRegs"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "specs" explicit_type "ArrayList<RegisterSpec>"
	  param in name "ropReg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks to see if a list of SSA registers can all be mapped into
the same rop reg. Ignores registers that have already been mapped,
and checks the interference graph and ensures the range does not
cross the parameter range.

@param specs {@code non-null;} SSA registers to check
@param ropReg {@code >=0;} rop register to check mapping to
@return {@code true} if all unmapped registers can be mapped"
      end

      operation 15216652 "canMapReg"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "ssaSpec" type class_ref 3437836 // RegisterSpec
	  param in name "ropReg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks to see if {@code ssaSpec} can be mapped to
{@code ropReg}. Checks interference graph and ensures
the range does not cross the parameter range.

@param ssaSpec {@code non-null;} SSA spec
@param ropReg prosepctive new-namespace reg
@return {@code true} if mapping is possible"
      end

      operation 15216780 "spansParamRange"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "ssaReg" explicit_type "int"
	  param in name "category" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if the specified rop register + category
will cross the boundry between the lower {@code paramWidth}
registers reserved for method params and the upper registers. We cannot
allocate a register that spans the param block and the normal block,
because we will be moving the param block to high registers later.

@param ssaReg register in new namespace
@param category width that the register will have
@return {@code true} in the case noted above"
      end

      operation 15216908 "analyzeInstructions"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Analyze each instruction and find out all the local variable assignments
and move-result-pseudo/invoke-range instrucitons."
      end

      operation 15217036 "addMapping"
	private explicit_return_type "void"
	nparams 2
	  param inout name "ssaSpec" type class_ref 3437836 // RegisterSpec
	  param in name "ropReg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a mapping from an SSA register to a rop register.
{@link #canMapReg} should have already been called.

@param ssaSpec {@code non-null;} SSA register to map from
@param ropReg {@code >=0;} rop register to map to"
      end

      operation 15217164 "adjustAndMapSourceRangeRange"
	private explicit_return_type "void"
	nparams 1
	  param inout name "insn" type class_ref 3481740 // NormalSsaInsn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps the source registers of the specified instruction such that they
will fall in a contiguous range in rop form. Moves are inserted as
necessary to allow the range to be allocated.

@param insn {@code non-null;} insn whos sources to process"
      end

      operation 15217292 "findRangeAndAdjust"
	private explicit_return_type "int"
	nparams 1
	  param inout name "insn" type class_ref 3481740 // NormalSsaInsn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find a contiguous rop register range that fits the specified
instruction's sources. First, try to center the range around
sources that have already been mapped to rop registers. If that fails,
just find a new contiguous range that doesn't interfere.

@param insn {@code non-null;} the insn whose sources need to
fit. Must be last insn in basic block.
@return {@code >= 0;} rop register of start of range"
      end

      operation 15217420 "findAnyFittingRange"
	private explicit_return_type "int"
	nparams 4
	  param inout name "insn" type class_ref 3481740 // NormalSsaInsn
	  param in name "rangeLength" explicit_type "int"
	  param inout name "categoriesForIndex" explicit_type "int"
	  param inout name "outMovesRequired" explicit_type "BitSet"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finds an unreserved range that will fit the sources of the
specified instruction. Does not bother trying to center the range
around an already-mapped source register;

@param insn {@code non-null;} insn to build range for
@param rangeLength {@code >=0;} length required in register units
@param categoriesForIndex {@code non-null;} indexed by source index;
the category for each source
@param outMovesRequired {@code non-null;} an output parameter indexed by
source index that will contain the set of sources which need
moves inserted
@return the rop register that starts the fitting range"
      end

      operation 15217548 "fitPlanForRange"
	private explicit_return_type "int"
	nparams 4
	  param in name "ropReg" explicit_type "int"
	  param inout name "insn" type class_ref 3481740 // NormalSsaInsn
	  param inout name "categoriesForIndex" explicit_type "int"
	  param inout name "outMovesRequired" explicit_type "BitSet"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to build a plan for fitting a range of sources into rop
registers.

@param ropReg {@code >= 0;} rop reg that begins range
@param insn {@code non-null;} insn to plan range for
@param categoriesForIndex {@code non-null;} indexed by source index;
the category for each source
@param outMovesRequired {@code non-null;} an output parameter indexed by
source index that will contain the set of sources which need
moves inserted
@return the width of the fit that that does not involve added moves or
{@code -1} if \"no fit possible\""
      end

      operation 15217676 "ssaSetToSpecs"
	package return_type class_ref 3443212 // RegisterSpecList
	nparams 1
	  param inout name "ssaSet" type class_ref 3482252 // IntSet
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a bit set of SSA registers into a RegisterSpecList containing
the definition specs of all the registers.

@param ssaSet {@code non-null;} set of SSA registers
@return list of RegisterSpecs as noted above"
      end

      operation 15217804 "getLocalItemForReg"
	private return_type class_ref 3437580 // LocalItem
	nparams 1
	  param in name "ssaReg" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a local item associated with an ssa register, if one exists.

@param ssaReg {@code >= 0;} SSA register
@return {@code null-ok;} associated local item or null"
      end

      operation 15217932 "processPhiInsn"
	private explicit_return_type "void"
	nparams 1
	  param inout name "insn" type class_ref 3481868 // PhiInsn
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to map the sources and result of a phi to a common register.
Will try existing mappings first, from most to least common. If none
of the registers have mappings yet, a new mapping is created."
      end

      class 3486092 "Multiset"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 12647308 "reg"
	  const_attribute private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 12647436 "count"
	  const_attribute private explicit_type "int"
	  multiplicity "[]"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 12647564 "size"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 15218060 "Multiset"
	  public explicit_return_type ""
	  nparams 1
	    param in name "maxSize" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs an instance.

@param maxSize the maximum distinct elements the set may have"
	end

	operation 15218188 "add"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "element" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds an element to the set.

@param element element to add"
	end

	operation 15218316 "getAndRemoveHighestCount"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Searches the set for the element that has been added the most.
In the case of a tie, the element that was added first is returned.
Then, it clears the count on that element. The size of the set
remains unchanged.

@return element with the highest count"
	end

	operation 15218444 "getSize"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets the number of distinct elements in the set.

@return size of the set"
	end
      end
    end

    class 3486220 "IdenticalBlockCombiner"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Searches for basic blocks that all have the same successor and insns
but different predecessors. These blocks are then combined into a single
block and the now-unused blocks are deleted. These identical blocks
frequently are created when catch blocks are edge-split."
      classrelation 6797324 // ropMethod (<unidirectional association>)
	relation 6797196 --->
	  a role_name "ropMethod" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6797324 // ropMethod (<unidirectional association>)
	  b parent class_ref 3441932 // RopMethod
      end

      classrelation 6797452 // blocks (<unidirectional association>)
	relation 6797324 --->
	  a role_name "blocks" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6797452 // blocks (<unidirectional association>)
	  b parent class_ref 3477132 // BasicBlockList
      end

      classrelation 6797580 // newBlocks (<unidirectional association>)
	relation 6797452 --->
	  a role_name "newBlocks" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6797580 // newBlocks (<unidirectional association>)
	  b parent class_ref 3477132 // BasicBlockList
      end

      operation 15218572 "IdenticalBlockCombiner"
	public explicit_return_type ""
	nparams 1
	  param inout name "rm" type class_ref 3441932 // RopMethod
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs instance. Call {@code process()} to run.

@param rm {@code non-null;} instance to process"
      end

      operation 15218700 "process"
	public return_type class_ref 3441932 // RopMethod
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs algorithm. TODO: This is n^2, and could be made linear-ish with
a hash. In particular, hash the contents of each block and only
compare blocks with the same hash.

@return {@code non-null;} new method that has been processed"
      end

      operation 15218828 "compareInsns"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "a" type class_ref 3441676 // BasicBlock
	  param inout name "b" type class_ref 3441676 // BasicBlock
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Helper method to compare the contents of two blocks.

@param a {@code non-null;} a block to compare
@param b {@code non-null;} another block to compare
@return {@code true} iff the two blocks' instructions are the same"
      end

      operation 15218956 "combineBlocks"
	private explicit_return_type "void"
	nparams 2
	  param in name "alphaLabel" explicit_type "int"
	  param inout name "betaLabels" type class_ref 3438604 // IntList
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Combines blocks proven identical into one alpha block, re-writing
all of the successor links that point to the beta blocks to point
to the alpha block instead.

@param alphaLabel block that will replace all the beta block
@param betaLabels label list of blocks to combine"
      end

      operation 15219084 "replaceSucc"
	private explicit_return_type "void"
	nparams 3
	  param inout name "block" type class_ref 3441676 // BasicBlock
	  param in name "oldLabel" explicit_type "int"
	  param in name "newLabel" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces one of a block's successors with a different label. Constructs
an updated BasicBlock instance and places it in {@code newBlocks}.

@param block block to replace
@param oldLabel label of successor to replace
@param newLabel label of new successor"
      end
    end

    class 3486348 "LivenessAnalyzer"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "From Appel \"Modern Compiler Implementation in Java\" algorithm 19.17
Calculate the live ranges for register {@code reg}.<p>

v = regV <p>
s = insn <p>
M = visitedBlocks <p>"
      attribute 12647692 "visitedBlocks"
	const_attribute private explicit_type "BitSet"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "{@code non-null;} index by basic block indexed set of basic blocks
that have already been visited. \"M\" as written in the original Appel
algorithm.
"
      end

      attribute 12647820 "liveOutBlocks"
	const_attribute private explicit_type "BitSet"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "{@code non-null;} set of blocks remaing to visit as \"live out as block\"
"
      end

      attribute 12647948 "regV"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "{@code >=0;} SSA register currently being analyzed.
\"v\" in the original Appel algorithm.
"
      end

      classrelation 6797836 // ssaMeth (<unidirectional association>)
	relation 6797708 --->
	  a role_name "ssaMeth" const_relation private
	    comment " method to process 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6797836 // ssaMeth (<unidirectional association>)
	  b parent class_ref 3480844 // SsaMethod
      end

      classrelation 6797964 // interference (<unidirectional association>)
	relation 6797836 --->
	  a role_name "interference" const_relation private
	    comment " interference graph being updated 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6797964 // interference (<unidirectional association>)
	  b parent class_ref 3483788 // InterferenceGraph
      end

      classrelation 6798092 // blockN (<unidirectional association>)
	relation 6797964 --->
	  a role_name "blockN" private
	    comment " block \"n\" in Appel 19.17 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6798092 // blockN (<unidirectional association>)
	  b parent class_ref 3481612 // SsaBasicBlock
      end

      attribute 12648076 "statementIndex"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " index of statement {@code s} in {@code blockN} "
      end

      class 3486476 "NextFunction"
	visibility private stereotype "enum"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 12648204 "LIVE_IN_AT_STATEMENT"
	  public type class_ref 3486476 // NextFunction
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 12648332 "LIVE_OUT_AT_STATEMENT"
	  public type class_ref 3486476 // NextFunction
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 12648460 "LIVE_OUT_AT_BLOCK"
	  public type class_ref 3486476 // NextFunction
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 12648588 "DONE"
	  public type class_ref 3486476 // NextFunction
	  cpp_decl "  ${name}${value},${comment}"
	  java_decl "  ${@}${name}${value},${comment}"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      classrelation 6798220 // nextFunction (<unidirectional association>)
	relation 6798092 --->
	  a role_name "nextFunction" private
	    comment " the next function to call 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6798220 // nextFunction (<unidirectional association>)
	  b parent class_ref 3486476 // NextFunction
      end

      operation 15219852 "constructInterferenceGraph"
	class_operation public return_type class_ref 3483788 // InterferenceGraph
	nparams 1
	  param inout name "ssaMeth" type class_ref 3480844 // SsaMethod
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs register liveness algorithm for a method, updating the
live in/out information in {@code SsaBasicBlock} instances and
returning an interference graph.

@param ssaMeth {@code non-null;} method to process
@return {@code non-null;} interference graph indexed by SSA
registers in both directions"
      end

      operation 15219980 "LivenessAnalyzer"
	private explicit_return_type ""
	nparams 3
	  param inout name "ssaMeth" type class_ref 3480844 // SsaMethod
	  param in name "reg" explicit_type "int"
	  param inout name "interference" type class_ref 3483788 // InterferenceGraph
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes liveness analyzer instance for specific register.

@param ssaMeth {@code non-null;} method to process
@param reg register whose liveness to analyze
@param interference {@code non-null;} indexed by SSA reg in
both dimensions; graph to update
"
      end

      operation 15220108 "handleTailRecursion"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The algorithm in Appel is presented in partial tail-recursion
form. Obviously, that's not efficient in java, so this function
serves as the dispatcher instead."
      end

      operation 15220236 "run"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "From Appel algorithm 19.17."
      end

      operation 15220364 "liveOutAtBlock"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "\"v is live-out at n.\""
      end

      operation 15220492 "liveInAtStatement"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "\"v is live-in at s.\""
      end

      operation 15220620 "liveOutAtStatement"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "\"v is live-out at s.\""
      end

      operation 15220748 "coInterferePhis"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "ssaMeth" type class_ref 3480844 // SsaMethod
	  param inout name "interference" type class_ref 3483788 // InterferenceGraph
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that all the phi result registers for all the phis in the
same basic block interfere with each other. This is needed since
the dead code remover has allowed through \"dead-end phis\" whose
results are not used except as local assignments. Without this step,
a the result of a dead-end phi might be assigned the same register
as the result of another phi, and the phi removal move scheduler may
generate moves that over-write the live result.

@param ssaMeth {@code non-null;} method to pricess
@param interference {@code non-null;} interference graph"
      end
    end

    class 3486604 "NullRegisterAllocator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A register allocator that maps SSA register n to Rop register 2*n,
essentially preserving the original mapping and remaining agnostic
about normal or wide categories. Used for debugging."
      classrelation 6798348 // <generalisation>
	relation 6798220 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 6798348 // <generalisation>
	  b parent class_ref 3485836 // RegisterAllocator
      end

      operation 15220876 "NullRegisterAllocator"
	public explicit_return_type ""
	nparams 2
	  param inout name "ssaMeth" type class_ref 3480844 // SsaMethod
	  param inout name "interference" type class_ref 3483788 // InterferenceGraph
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 15221004 "wantsParamsMovedHigh"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " {@inheritDoc} "
      end

      operation 15221132 "allocateRegisters"
	public return_type class_ref 3480588 // RegisterMapper
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment " {@inheritDoc} "
      end
    end

    class 3486732 "SsaToRop"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Converts a method in SSA form to ROP form."
      attribute 12648716 "DEBUG"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " local debug flag "
      end

      classrelation 6798476 // ssaMeth (<unidirectional association>)
	relation 6798348 --->
	  a role_name "ssaMeth" const_relation private
	    comment " {@code non-null;} method to process 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6798476 // ssaMeth (<unidirectional association>)
	  b parent class_ref 3480844 // SsaMethod
      end

      attribute 12648844 "minimizeRegisters"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "{@code true} if the converter should attempt to minimize
the rop-form register count
"
      end

      classrelation 6798604 // interference (<unidirectional association>)
	relation 6798476 --->
	  a role_name "interference" const_relation private
	    comment " {@code non-null;} interference graph 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 6798604 // interference (<unidirectional association>)
	  b parent class_ref 3483788 // InterferenceGraph
      end

      operation 15221260 "convertToRopMethod"
	class_operation public return_type class_ref 3441932 // RopMethod
	nparams 2
	  param inout name "ssaMeth" type class_ref 3480844 // SsaMethod
	  param inout name "minimizeRegisters" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a method in SSA form to ROP form.

@param ssaMeth {@code non-null;} method to process
@param minimizeRegisters {@code true} if the converter should
attempt to minimize the rop-form register count
@return {@code non-null;} rop-form output"
      end

      operation 15221388 "SsaToRop"
	private explicit_return_type ""
	nparams 2
	  param inout name "ssaMethod" type class_ref 3480844 // SsaMethod
	  param inout name "minimizeRegisters" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an instance.

@param ssaMeth {@code non-null;} method to process
@param minimizeRegisters {@code true} if the converter should
attempt to minimize the rop-form register count"
      end

      operation 15221516 "convert"
	private return_type class_ref 3441932 // RopMethod
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs the conversion.

@return {@code non-null;} rop-form output"
      end

      operation 15221644 "removeEmptyGotos"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all blocks containing only GOTOs from the control flow.
Although much of this work will be done later when converting
from rop to dex, not all simplification cases can be handled
there. Furthermore, any no-op block between the exit block and
blocks containing the real return or throw statements must be
removed."
      end

      operation 15221772 "removePhiFunctions"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "See Appel 19.6. To remove the phi instructions in an edge-split
SSA representation we know we can always insert a move in a
predecessor block."
      end

      class 3486860 "PhiVisitor"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 6798732 // <realization>
	  relation 6798604 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 6798732 // <realization>
	    b parent class_ref 3482892 // Visitor
	end

	classrelation 6798860 // blocks (<unidirectional association>)
	  relation 6798732 --->
	    stereotype "ArrayList"
	    a role_name "blocks" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${stereotype}<${type}> ${name}${value};
"
	      classrelation_ref 6798860 // blocks (<unidirectional association>)
	    b parent class_ref 3481612 // SsaBasicBlock
	end

	operation 15221900 "PhiVisitor"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "blocks" explicit_type "ArrayList<SsaBasicBlock>"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 15222028 "visitPhiInsn"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "insn" type class_ref 3481868 // PhiInsn
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 15222156 "moveParametersToHighRegisters"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Moves the parameter registers, which allocateRegisters() places
at the bottom of the frame, up to the top of the frame to match
Dalvik calling convention."
      end

      operation 15222284 "convertBasicBlocks"
	private return_type class_ref 3477132 // BasicBlockList
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@return rop-form basic block list"
      end

      operation 15222412 "verifyValidExitPredecessor"
	private explicit_return_type "void"
	nparams 1
	  param inout name "b" type class_ref 3481612 // SsaBasicBlock
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Validates that a basic block is a valid end predecessor. It must
end in a RETURN or a THROW. Throws a runtime exception on error.

@param b {@code non-null;} block to validate
@throws RuntimeException on error"
      end

      operation 15222540 "convertBasicBlock"
	private return_type class_ref 3441676 // BasicBlock
	nparams 1
	  param inout name "block" type class_ref 3481612 // SsaBasicBlock
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts a single basic block to rop form.

@param block SSA block to process
@return {@code non-null;} ROP block"
      end

      operation 15222668 "convertInsns"
	private return_type class_ref 3442444 // InsnList
	nparams 1
	  param inout name "ssaInsns" explicit_type "ArrayList<SsaInsn>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts an insn list to rop form.

@param ssaInsns {@code non-null;} old instructions
@return {@code non-null;} immutable instruction list"
      end

      operation 15222796 "getRegistersByFrequency"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<b>Note:</b> This method is not presently used.

@return a list of registers ordered by most-frequently-used to
least-frequently-used. Each register is listed once and only
once."
      end
    end
  end

  deploymentview 313612 "back"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1401996 "RegisterAllocator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.dx.rop.code.RegOps;
import com.android.dx.rop.code.RegisterSpec;
import com.android.dx.rop.code.PlainInsn;
import com.android.dx.rop.code.Rops;
import com.android.dx.rop.code.SourcePosition;
import com.android.dx.rop.code.RegisterSpecList;
import com.android.dx.ssa.NormalSsaInsn;
import com.android.dx.ssa.RegisterMapper;
import com.android.dx.ssa.SsaInsn;
import com.android.dx.ssa.SsaMethod;
import com.android.dx.ssa.SsaBasicBlock;
import com.android.dx.util.IntSet;
import com.android.dx.util.IntIterator;
import java.util.BitSet;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 3485836 // RegisterAllocator
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1402124 "FirstFitAllocator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.dx.rop.code.CstInsn;
import com.android.dx.rop.cst.CstInteger;
import com.android.dx.ssa.NormalSsaInsn;
import com.android.dx.ssa.BasicRegisterMapper;
import com.android.dx.ssa.RegisterMapper;
import com.android.dx.ssa.SsaMethod;
import com.android.dx.util.IntSet;
import com.android.dx.util.BitIntSet;
import java.util.BitSet;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 3485708 // FirstFitAllocator
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1402252 "FirstFitLocalCombiningAllocator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.dx.rop.code.*;
import com.android.dx.rop.cst.CstInteger;
import com.android.dx.ssa.InterferenceRegisterMapper;
import com.android.dx.ssa.RegisterMapper;
import com.android.dx.ssa.SsaInsn;
import com.android.dx.ssa.SsaMethod;
import com.android.dx.ssa.NormalSsaInsn;
import com.android.dx.ssa.PhiInsn;
import com.android.dx.ssa.Optimizer;
import com.android.dx.ssa.SsaBasicBlock;
import com.android.dx.util.IntSet;
import com.android.dx.util.IntIterator;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Map;
import java.util.TreeMap;
${definition}"
      associated_classes
	class_ref 3485964 // FirstFitLocalCombiningAllocator
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1402380 "IdenticalBlockCombiner"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.dx.rop.code.BasicBlock;
import com.android.dx.rop.code.BasicBlockList;
import com.android.dx.rop.code.CstInsn;
import com.android.dx.rop.code.Insn;
import com.android.dx.rop.code.InsnList;
import com.android.dx.rop.code.RegOps;
import com.android.dx.rop.code.RopMethod;
import com.android.dx.rop.code.SwitchInsn;
import com.android.dx.util.IntList;
import java.util.BitSet;
${definition}"
      associated_classes
	class_ref 3486220 // IdenticalBlockCombiner
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1402508 "InterferenceGraph"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.dx.ssa.SsaMethod;
import com.android.dx.ssa.SsaBasicBlock;
import com.android.dx.ssa.SsaInsn;
import com.android.dx.ssa.PhiInsn;
import com.android.dx.ssa.SetFactory;
import com.android.dx.rop.code.RegisterSpec;
import com.android.dx.util.IntSet;
import com.android.dx.util.BitIntSet;
import com.android.dx.util.ListIntSet;
import java.util.BitSet;
import java.util.List;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 3483788 // InterferenceGraph
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1402636 "LivenessAnalyzer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.dx.ssa.SsaMethod;
import com.android.dx.ssa.SsaBasicBlock;
import com.android.dx.ssa.SsaInsn;
import com.android.dx.ssa.PhiInsn;
import com.android.dx.rop.code.RegisterSpec;
import java.util.BitSet;
import java.util.List;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 3486348 // LivenessAnalyzer
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1402764 "NullRegisterAllocator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.dx.ssa.BasicRegisterMapper;
import com.android.dx.ssa.RegisterMapper;
import com.android.dx.ssa.SsaMethod;
import java.util.BitSet;
import java.util.ArrayList;
${definition}"
      associated_classes
	class_ref 3486604 // NullRegisterAllocator
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 1402892 "SsaToRop"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import com.android.dx.rop.code.BasicBlock;
import com.android.dx.rop.code.BasicBlockList;
import com.android.dx.rop.code.InsnList;
import com.android.dx.rop.code.RegisterSpec;
import com.android.dx.rop.code.RegisterSpecList;
import com.android.dx.rop.code.Rop;
import com.android.dx.rop.code.RopMethod;
import com.android.dx.rop.code.Rops;
import com.android.dx.ssa.BasicRegisterMapper;
import com.android.dx.ssa.PhiInsn;
import com.android.dx.ssa.RegisterMapper;
import com.android.dx.ssa.SsaBasicBlock;
import com.android.dx.ssa.SsaInsn;
import com.android.dx.ssa.SsaMethod;
import com.android.dx.util.Hex;
import com.android.dx.util.IntList;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.BitSet;
import java.util.Comparator;
${definition}"
      associated_classes
	class_ref 3486732 // SsaToRop
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
