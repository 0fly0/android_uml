class ObjectStreamField
!!!242459.java!!!	ObjectStreamField(inout name : String, inout cl : Class)
        if (name == null) {
            throw new NullPointerException("name == null");
        } else if (cl == null) {
            throw new NullPointerException("cl == null");
        }
        this.name = name;
        this.type = new WeakReference<Class<?>>(cl);
!!!242587.java!!!	ObjectStreamField(inout name : String, inout cl : Class, inout unshared : boolean)
        if (name == null) {
            throw new NullPointerException("name == null");
        } else if (cl == null) {
            throw new NullPointerException("cl == null");
        }
        this.name = name;
        this.type = (cl.getClassLoader() == null) ? cl : new WeakReference<Class<?>>(cl);
        this.unshared = unshared;
!!!242715.java!!!	ObjectStreamField(inout signature : String, inout name : String)
        if (name == null) {
            throw new NullPointerException("name == null");
        }
        this.name = name;
        this.typeString = signature.replace('.', '/').intern();
        defaultResolve();
        this.isDeserialized = true;
!!!242843.java!!!	compareTo(inout o : Object) : int
        ObjectStreamField f = (ObjectStreamField) o;
        boolean thisPrimitive = this.isPrimitive();
        boolean fPrimitive = f.isPrimitive();

        // If one is primitive and the other isn't, we have enough info to
        // compare
        if (thisPrimitive != fPrimitive) {
            return thisPrimitive ? -1 : 1;
        }

        // Either both primitives or both not primitives. Compare based on name.
        return this.getName().compareTo(f.getName());
!!!242971.java!!!	getName() : String
        return name;
!!!243099.java!!!	getOffset() : int
        return offset;
!!!243227.java!!!	getTypeInternal() : Class
        if (type instanceof WeakReference) {
            return (Class<?>) ((WeakReference<?>) type).get();
        }
        return (Class<?>) type;
!!!243355.java!!!	getType() : Class
        Class<?> cl = getTypeInternal();
        if (isDeserialized && !cl.isPrimitive()) {
            return Object.class;
        }
        return cl;
!!!243483.java!!!	getTypeCode() : char
        return typeCodeOf(getTypeInternal());
!!!243611.java!!!	typeCodeOf(inout type : Class) : char
        if (type == int.class) {
            return 'I';
        } else if (type == byte.class) {
            return 'B';
        } else if (type == char.class) {
            return 'C';
        } else if (type == short.class) {
            return 'S';
        } else if (type == boolean.class) {
            return 'Z';
        } else if (type == long.class) {
            return 'J';
        } else if (type == float.class) {
            return 'F';
        } else if (type == double.class) {
            return 'D';
        } else if (type.isArray()) {
            return '[';
        } else {
            return 'L';
        }
!!!243739.java!!!	getTypeString() : String
        if (isPrimitive()) {
            return null;
        }
        if (typeString == null) {
            Class<?> t = getTypeInternal();
            String typeName = t.getName().replace('.', '/');
            String str = (t.isArray()) ? typeName : ("L" + typeName + ';');
            typeString = str.intern();
        }
        return typeString;
!!!243867.java!!!	isPrimitive() : boolean
        Class<?> t = getTypeInternal();
        return t != null && t.isPrimitive();
!!!243995.java!!!	writeField(inout out : DataOutputStream) : boolean
        Class<?> t = getTypeInternal();
        out.writeByte(typeCodeOf(t));
        out.writeUTF(name);
        return (t != null && t.isPrimitive());
!!!244123.java!!!	setOffset(in newValue : int) : void
        this.offset = newValue;
!!!244251.java!!!	toString() : String
        return this.getClass().getName() + '(' + getName() + ':' + getTypeInternal() + ')';
!!!244379.java!!!	resolve(inout loader : ClassLoader) : void
        if (typeString == null && isPrimitive()) {
            // primitive type declared in a serializable class
            typeString = String.valueOf(getTypeCode());
        }

        if (typeString.length() == 1) {
            if (defaultResolve()) {
                return;
            }
        }

        String className = typeString.replace('/', '.');
        if (className.charAt(0) == 'L') {
            // remove L and ;
            className = className.substring(1, className.length() - 1);
        }
        try {
            Class<?> cl = Class.forName(className, false, loader);
            type = (cl.getClassLoader() == null) ? cl : new WeakReference<Class<?>>(cl);
        } catch (ClassNotFoundException e) {
            // Ignored
        }
!!!244507.java!!!	isUnshared() : boolean
        return unshared;
!!!244635.java!!!	setUnshared(inout unshared : boolean) : void
        this.unshared = unshared;
!!!244763.java!!!	defaultResolve() : boolean
        switch (typeString.charAt(0)) {
        case 'I':
            type = int.class;
            return true;
        case 'B':
            type = byte.class;
            return true;
        case 'C':
            type = char.class;
            return true;
        case 'S':
            type = short.class;
            return true;
        case 'Z':
            type = boolean.class;
            return true;
        case 'J':
            type = long.class;
            return true;
        case 'F':
            type = float.class;
            return true;
        case 'D':
            type = double.class;
            return true;
        default:
            type = Object.class;
            return false;
        }
