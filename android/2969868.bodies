class CecService
!!!12052364.java!!!	onCreate() : void
        if (DEBUG) {
            Log.d(TAG, "onCreate() in");
        }

        // Register for changes to the HDMI CEC enable setting
        ContentResolver resolver = getContentResolver();
        if (null == resolver) {
            Log.e(TAG, "FATAL ERROR!!! Cannot get a ContentResolver.");
            return;
        }
        resolver.registerContentObserver(HdmiCecUtils.HDMI_CEC_ENABLE_CONTENT_URI,
                                         true,
                                         mSettingsObserver);
        resolver.registerContentObserver(HdmiCecUtils.HDMI_CEC_SAC_CONTENT_URI,
                                         true,
                                         mSettingsObserver);
        resolver.registerContentObserver(HdmiCecUtils.HDMI_CEC_AUTO_POWER_ON_CONTENT_URI,
                                         true,
                                         mSettingsObserver);
        resolver.registerContentObserver(HdmiCecUtils.HDMI_CEC_DEVICE_AUTO_POWER_OFF_CONTENT_URI,
                                         true,
                                         mSettingsObserver);
        ensureServiceHubAlive();
        try {
            IBinder serviceBinder = mServiceHub.getCecService();
            if (null == serviceBinder) {
                Log.e(TAG, "cannot get real CecService binder object!");
                return;
            }

            switch (mCecDeviceType = mServiceHub.getCecDeviceType()) {
                case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV:
                    mITvCecService = ITvCecService.Stub.asInterface(serviceBinder);
                    if (null != mITvCecService
                        && mITvCecService.isOfType(mCecDeviceType)) {
                        if (DEBUG) {
                            Log.d(TAG, "Retrive the real TvCecService"
                                  + " Impl succuss!");
                        }
                    }
                    else {
                        mITvCecService = null;
                        return;
                    }
                    break;

                case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_DMP:
                    mIDmpCecService = IDmpCecService.Stub.asInterface(serviceBinder);
                    if (null != mIDmpCecService && mIDmpCecService.isOfType(mCecDeviceType)) {
                        if (DEBUG) {
                            Log.d(TAG, "Retrive the real IDmpCecService"
                                  + " Impl succuss!");
                        }
                    } else {
                        mIDmpCecService = null;
                        return;
                    }
                    break;

                default:
                    Log.e(TAG, "FATAL ERROR! The Cec Device Type(" +
                          mCecDeviceType + ") is invalid!");
                    break;
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Log.e(TAG, "Error when invoking remote CEC Binder Service!");
            return;
        }
        syncCECSettings(HdmiCecUtils.HDMI_CEC_ENABLE_CONTENT_URI);
        syncCECSettings(HdmiCecUtils.HDMI_CEC_SAC_CONTENT_URI);
        syncCECSettings(HdmiCecUtils.HDMI_CEC_AUTO_POWER_ON_CONTENT_URI);
        syncCECSettings(HdmiCecUtils.HDMI_CEC_DEVICE_AUTO_POWER_OFF_CONTENT_URI);
!!!12052492.java!!!	onStartCommand(inout intent : Intent, in flags : int, in startId : int) : int
        if (DEBUG) {
            Log.d(TAG, "Received start id " + startId + ": " + intent);
        }
        // need HDMI CEC service to continue running until it is explicitly
        // stopped, so return sticky.
        if (!isIntentVerified(intent)) {
            Log.w(TAG, "The intent("+ intent + ") sent to start me is strange enough!");
        }
        return START_STICKY;
!!!12052620.java!!!	onDestroy() : void
        ContentResolver resolver = getContentResolver();
        if (null == resolver) {
            Log.e(TAG, "FATAL ERROR!!! Cannot get a ContentResolver.");
            return;
        }
        resolver.unregisterContentObserver(mSettingsObserver);
        mServiceHub = null;
        Log.d(TAG, "Got destroyed normally!");
!!!12052748.java!!!	onBind(inout intent : Intent) : IBinder
        if (!isIntentVerified(intent)) {
            return null;
        }
        ensureServiceHubAlive();
        if (DEBUG) {
            Log.d(TAG, "onBind() return " + mServiceHub);
        }
        return (IBinder)mServiceHub;
!!!12052876.java!!!	ensureServiceHubAlive() : void
        if (null == mServiceHub) {
            mServiceHub = new CecServiceHub(CecService.this,
                                            DefaultCecSrvImplDetermine.getInstance());
        }
!!!12053004.java!!!	isIntentVerified(inout intent : Intent) : boolean
        if (null == intent) {
            return false;
        } else if (intent.getAction().equals(HdmiCecUtils.ACTION_BIND_HDMI_CEC_SERVICE)) {
            return true;
        } else {
            return false;
        }
!!!12053132.java!!!	syncCECSettings(inout uri : Uri) : boolean
        if (DEBUG) {
            Log.d(TAG, "syncCECSettings() in");
        }
        boolean result = false;
        if (null == uri) {
            Log.e(TAG, "FATAL_ERROR! CEC Setting item uri is null");
            return result;
        } else {
            if (DEBUG) {
                Log.d(TAG, "syncCECSettings() on uri:" + uri);
            }
        }
        if (uri.equals(HdmiCecUtils.HDMI_CEC_ENABLE_CONTENT_URI)) {
            boolean cecEnabled = CecManager.isCECEnabled(this);

            if (DEBUG) {
                Log.d(TAG, "cecEnabled:" + cecEnabled);
            }

            try {
                if (cecEnabled) {
                    switch (CecService.this.mCecDeviceType) {
                        case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV:
                            if (null != CecService.this.mITvCecService) {
                                result = CecService.this.mITvCecService.enableCEC(false);
                            }
                            break;
                        case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_DMP:
                            if (null != CecService.this.mIDmpCecService)
                            {
                                result = CecService.this.mIDmpCecService.enableCEC(false);
                            }
                            break;
                        default:
                            result = false;
                            break;
                    }
                } else {
                    switch (CecService.this.mCecDeviceType) {
                        case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV:
                            if (null != CecService.this.mITvCecService) {
                                result = CecService.this.mITvCecService.disableCEC();
                            }
                            break;
                        case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_DMP:
                            if (null != CecService.this.mIDmpCecService) {
                                result = CecService.this.mIDmpCecService.disableCEC();
                            }
                            break;
                        default:
                            result = false;
                            break;
                    }
                }
            } catch (Exception exp) {
                exp.printStackTrace();
                result = false;
                Log.e(TAG, "error raises when enableCEC()!");
            }
        } else if (uri.equals(HdmiCecUtils.HDMI_CEC_SAC_CONTENT_URI)) {
            boolean SACEnabled = CecManager.isSystemAudioModeEnabled(this);
            try {
                int ret = CecServiceHub.Result.SUCCESS;
                if ((CecService.this.mCecDeviceType
                    == HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV)
                    && (null != CecService.this.mITvCecService)) {
                        if (SACEnabled) {
                            // TODO: get available audio devices
                            ret = CecService.this.mITvCecService.enableSAC();
                        } else {
                            ret = CecService.this.mITvCecService.disableSAC();
                        }
                        result = ((ret == CecServiceHub.Result.SUCCESS)? true : false);
                } else {
                    Log.e(TAG, "Non-TV case, setting system audio mode ignored!");
                }
            } catch (Exception exp) {
                exp.printStackTrace();
                result = false;
                Log.e(TAG, "error raises when enableSystemAudioMode()!");
            }
        } else if (uri.equals(HdmiCecUtils.HDMI_CEC_AUTO_POWER_ON_CONTENT_URI)) {
            boolean autoPowerOn = CecManager.isTVAutoPowerOnEnabled(this);
            try {
                if ((CecService.this.mCecDeviceType
                    == HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV)
                    && (null != CecService.this.mITvCecService)) {
                        if (autoPowerOn) {
                            result = CecService.this.mITvCecService.enableTVAutoPowerOn();
                        } else {
                            result = CecService.this.mITvCecService.disableTVAutoPowerOn();
                        }
                } else {
                    Log.e(TAG, "Non-TV case, setting TV auto power on ignored!");
                }
            } catch (Exception exp) {
                exp.printStackTrace();
                result = false;
                Log.e(TAG, "error raises when enableTVAutoPowerOn()!");
            }
        } else if (uri.equals(HdmiCecUtils.HDMI_CEC_DEVICE_AUTO_POWER_OFF_CONTENT_URI)) {
            boolean deviceAutoPowerOff = CecManager.isDeviceAutoPowerOffEnabled(this);
            if (DEBUG) {
                Log.d(TAG, "deviceAutoPowerOff:" + deviceAutoPowerOff);
            }
            try {
                switch (CecService.this.mCecDeviceType) {
                    case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV:
                        if (null != CecService.this.mITvCecService) {
                            if (deviceAutoPowerOff) {
                                result = CecService.this.mITvCecService.enableDeviceAutoPowerOff();
                            } else {
                                result = CecService.this.mITvCecService.disableDeviceAutoPowerOff();
                            }
                        }
                        break;
                    case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_DMP:
                        if (null != CecService.this.mIDmpCecService)
                        {
                            if (deviceAutoPowerOff) {
                                if (DEBUG) {
                                    Log.d(TAG, "enableDeviceAutoPowerOff");
                                }
                                result = CecService.this.mIDmpCecService.enableDeviceAutoPowerOff();
                            } else {
                                if (DEBUG) {
                                    Log.d(TAG, "disableDeviceAutoPowerOff");
                                }
                                result =
                                    CecService.this.mIDmpCecService.disableDeviceAutoPowerOff();
                            }
                        }
                        break;
                    default:
                        result = false;
                        break;
                }
            } catch (Exception exp) {
                exp.printStackTrace();
                result = false;
                Log.e(TAG, "error raises when enableDeviceAutoPowerOff()!");
            }
        }
        if (!result) {
            Log.e(TAG, "syncCECSetting result:" + result);
        }
        return result;
