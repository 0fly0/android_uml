class GenericInflater
!!!4009484.java!!!	GenericInflater(inout context : Context)
        mContext = context;
!!!4009612.java!!!	GenericInflater(inout original : GenericInflater, inout newContext : Context)
        mContext = newContext;
        mFactory = original.mFactory;
!!!4009868.java!!!	setDefaultPackage(in defaultPackage : String) : void
        mDefaultPackage = defaultPackage;
!!!4009996.java!!!	getDefaultPackage() : String
        return mDefaultPackage;
!!!4010124.java!!!	getContext() : Context
        return mContext;
!!!4010252.java!!!	getFactory() : Factory
        return mFactory;
!!!4010380.java!!!	setFactory(inout factory : Factory) : void
        if (mFactorySet) {
            throw new IllegalStateException("" +
            		"A factory has already been set on this inflater");
        }
        if (factory == null) {
            throw new NullPointerException("Given factory can not be null");
        }
        mFactorySet = true;
        if (mFactory == null) {
            mFactory = factory;
        } else {
            mFactory = new FactoryMerger<T>(factory, mFactory);
        }
!!!4010508.java!!!	inflate(in resource : int, inout root : P) : T
        return inflate(resource, root, root != null);
!!!4010636.java!!!	inflate(inout parser : XmlPullParser, inout root : P) : T
        return inflate(parser, root, root != null);
!!!4010764.java!!!	inflate(in resource : int, inout root : P, inout attachToRoot : boolean) : T
        if (DEBUG) System.out.println("INFLATING from resource: " + resource);
        XmlResourceParser parser = getContext().getResources().getXml(resource);
        try {
            return inflate(parser, root, attachToRoot);
        } finally {
            parser.close();
        }
!!!4010892.java!!!	inflate(inout parser : XmlPullParser, inout root : P, inout attachToRoot : boolean) : T
        synchronized (mConstructorArgs) {
            final AttributeSet attrs = Xml.asAttributeSet(parser);
            mConstructorArgs[0] = mContext;
            T result = (T) root;

            try {
                // Look for the root node.
                int type;
                while ((type = parser.next()) != parser.START_TAG
                        && type != parser.END_DOCUMENT) {
                    ;
                }

                if (type != parser.START_TAG) {
                    throw new InflateException(parser.getPositionDescription()
                            + ": No start tag found!");
                }

                if (DEBUG) {
                    System.out.println("**************************");
                    System.out.println("Creating root: "
                            + parser.getName());
                    System.out.println("**************************");
                }
                // Temp is the root that was found in the xml
                T xmlRoot = createItemFromTag(parser, parser.getName(),
                        attrs);

                result = (T) onMergeRoots(root, attachToRoot, (P) xmlRoot);
                
                if (DEBUG) {
                    System.out.println("-----> start inflating children");
                }
                // Inflate all children under temp
                rInflate(parser, result, attrs);
                if (DEBUG) {
                    System.out.println("-----> done inflating children");
                }

            } catch (InflateException e) {
                throw e;

            } catch (XmlPullParserException e) {
                InflateException ex = new InflateException(e.getMessage());
                ex.initCause(e);
                throw ex;
            } catch (IOException e) {
                InflateException ex = new InflateException(
                        parser.getPositionDescription()
                        + ": " + e.getMessage());
                ex.initCause(e);
                throw ex;
            }

            return result;
        }
!!!4011020.java!!!	createItem(in name : String, in prefix : String, inout attrs : AttributeSet) : T
        Constructor constructor = (Constructor) sConstructorMap.get(name);

        try {
            if (null == constructor) {
                // Class not found in the cache, see if it's real,
                // and try to add it
                Class clazz = mContext.getClassLoader().loadClass(
                        prefix != null ? (prefix + name) : name);
                constructor = clazz.getConstructor(mConstructorSignature);
                sConstructorMap.put(name, constructor);
            }

            Object[] args = mConstructorArgs;
            args[1] = attrs;
            return (T) constructor.newInstance(args);

        } catch (NoSuchMethodException e) {
            InflateException ie = new InflateException(attrs
                    .getPositionDescription()
                    + ": Error inflating class "
                    + (prefix != null ? (prefix + name) : name));
            ie.initCause(e);
            throw ie;

        } catch (ClassNotFoundException e) {
            // If loadClass fails, we should propagate the exception.
            throw e;
        } catch (Exception e) {
            InflateException ie = new InflateException(attrs
                    .getPositionDescription()
                    + ": Error inflating class "
                    + constructor.getClass().getName());
            ie.initCause(e);
            throw ie;
        }
!!!4011148.java!!!	onCreateItem(in name : String, inout attrs : AttributeSet) : T
        return createItem(name, mDefaultPackage, attrs);
!!!4011276.java!!!	createItemFromTag(inout parser : XmlPullParser, in name : String, inout attrs : AttributeSet) : T
        if (DEBUG) System.out.println("******** Creating item: " + name);

        try {
            T item = (mFactory == null) ? null : mFactory.onCreateItem(name, mContext, attrs);

            if (item == null) {
                if (-1 == name.indexOf('.')) {
                    item = onCreateItem(name, attrs);
                } else {
                    item = createItem(name, null, attrs);
                }
            }

            if (DEBUG) System.out.println("Created item is: " + item);
            return item;

        } catch (InflateException e) {
            throw e;

        } catch (ClassNotFoundException e) {
            InflateException ie = new InflateException(attrs
                    .getPositionDescription()
                    + ": Error inflating class " + name);
            ie.initCause(e);
            throw ie;

        } catch (Exception e) {
            InflateException ie = new InflateException(attrs
                    .getPositionDescription()
                    + ": Error inflating class " + name);
            ie.initCause(e);
            throw ie;
        }
!!!4011404.java!!!	rInflate(inout parser : XmlPullParser, inout parent : T, in attrs : AttributeSet) : void
        final int depth = parser.getDepth();

        int type;
        while (((type = parser.next()) != parser.END_TAG || 
                parser.getDepth() > depth) && type != parser.END_DOCUMENT) {

            if (type != parser.START_TAG) {
                continue;
            }

            if (onCreateCustomFromTag(parser, parent, attrs)) {
                continue;
            }

            if (DEBUG) {
                System.out.println("Now inflating tag: " + parser.getName());
            }
            String name = parser.getName();

            T item = createItemFromTag(parser, name, attrs);

            if (DEBUG) {
                System.out
                        .println("Creating params from parent: " + parent);
            }

            ((P) parent).addItemFromInflater(item);

            if (DEBUG) {
                System.out.println("-----> start inflating children");
            }
            rInflate(parser, item, attrs);
            if (DEBUG) {
                System.out.println("-----> done inflating children");
            }
        }

!!!4011532.java!!!	onCreateCustomFromTag(inout parser : XmlPullParser, inout parent : T, in attrs : AttributeSet) : boolean
        return false;
!!!4011660.java!!!	onMergeRoots(inout givenRoot : P, inout attachToGivenRoot : boolean, inout xmlRoot : P) : P
        return xmlRoot;
