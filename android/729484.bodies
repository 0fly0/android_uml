class ParcelFileDescriptor
!!!2683660.java!!!	open(inout file : File, in mode : int) : ParcelFileDescriptor
        String path = file.getPath();
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkRead(path);
            if ((mode&MODE_WRITE_ONLY) != 0) {
                security.checkWrite(path);
            }
        }

        if ((mode&MODE_READ_WRITE) == 0) {
            throw new IllegalArgumentException(
                    "Must specify MODE_READ_ONLY, MODE_WRITE_ONLY, or MODE_READ_WRITE");
        }

        FileDescriptor fd = Parcel.openFileDescriptor(path, mode);
        return fd != null ? new ParcelFileDescriptor(fd) : null;
!!!2683788.java!!!	dup(inout orig : FileDescriptor) : ParcelFileDescriptor
        FileDescriptor fd = Parcel.dupFileDescriptor(orig);
        return fd != null ? new ParcelFileDescriptor(fd) : null;
!!!2683916.java!!!	dup() : ParcelFileDescriptor
        return dup(getFileDescriptor());
!!!2684044.java!!!	fromFd(in fd : int) : ParcelFileDescriptor
        FileDescriptor fdesc = getFileDescriptorFromFd(fd);
        return new ParcelFileDescriptor(fdesc);
!!!2684300.java!!!	adoptFd(in fd : int) : ParcelFileDescriptor
        FileDescriptor fdesc = getFileDescriptorFromFdNoDup(fd);
        return new ParcelFileDescriptor(fdesc);
!!!2684556.java!!!	fromSocket(inout socket : Socket) : ParcelFileDescriptor
        FileDescriptor fd = socket.getFileDescriptor$();
        return fd != null ? new ParcelFileDescriptor(fd) : null;
!!!2684684.java!!!	fromDatagramSocket(inout datagramSocket : DatagramSocket) : ParcelFileDescriptor
        FileDescriptor fd = datagramSocket.getFileDescriptor$();
        return fd != null ? new ParcelFileDescriptor(fd) : null;
!!!2684812.java!!!	createPipe() : ParcelFileDescriptor
        FileDescriptor[] fds = new FileDescriptor[2];
        createPipeNative(fds);
        ParcelFileDescriptor[] pfds = new ParcelFileDescriptor[2];
        pfds[0] = new ParcelFileDescriptor(fds[0]);
        pfds[1] = new ParcelFileDescriptor(fds[1]);
        return pfds;
!!!2685068.java!!!	fromData(inout data : byte, in name : String) : ParcelFileDescriptor
        if (data == null) return null;
        MemoryFile file = new MemoryFile(name, data.length);
        if (data.length > 0) {
            file.writeBytes(data, 0, 0, data.length);
        }
        file.deactivate();
        FileDescriptor fd = file.getFileDescriptor();
        return fd != null ? new ParcelFileDescriptor(fd) : null;
!!!2685196.java!!!	getFileDescriptor() : FileDescriptor
        return mFileDescriptor;
!!!2685580.java!!!	getFd() : int
        if (mClosed) {
            throw new IllegalStateException("Already closed");
        }
        return getFdNative();
!!!2685836.java!!!	detachFd() : int
        if (mClosed) {
            throw new IllegalStateException("Already closed");
        }
        if (mWrapped != null) {
            int fd = mWrapped.detachFd();
            mClosed = true;
            mGuard.close();
            return fd;
        }
        int fd = getFd();
        mClosed = true;
        mGuard.close();
        Parcel.clearFileDescriptor(mFileDescriptor);
        return fd;
!!!2685964.java!!!	close() : void
        if (mClosed) return;
        mClosed = true;
        mGuard.close();

        if (mWrapped != null) {
            // If this is a proxy to another file descriptor, just call through to its
            // close method.
            mWrapped.close();
        } else {
            Parcel.closeFileDescriptor(mFileDescriptor);
        }
!!!2686604.java!!!	toString() : String
        return "{ParcelFileDescriptor: " + mFileDescriptor + "}";
!!!2686732.java!!!	finalize() : void
        if (mGuard != null) {
            mGuard.warnIfOpen();
        }
        try {
            if (!mClosed) {
                close();
            }
        } finally {
            super.finalize();
        }
!!!2686860.java!!!	ParcelFileDescriptor(inout descriptor : ParcelFileDescriptor)
        mWrapped = descriptor;
        mFileDescriptor = mWrapped.mFileDescriptor;
        mGuard.open("close");
!!!2686988.java!!!	ParcelFileDescriptor(inout descriptor : FileDescriptor)
        if (descriptor == null) {
            throw new NullPointerException("descriptor must not be null");
        }
        mWrapped = null;
        mFileDescriptor = descriptor;
        mGuard.open("close");
!!!2687116.java!!!	describeContents() : int
        return Parcelable.CONTENTS_FILE_DESCRIPTOR;
!!!2687244.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeFileDescriptor(mFileDescriptor);
        if ((flags&PARCELABLE_WRITE_RETURN_VALUE) != 0 && !mClosed) {
            try {
                close();
            } catch (IOException e) {
                // Empty
            }
        }
