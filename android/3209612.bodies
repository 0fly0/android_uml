class CryptKeeperSettings
!!!13796492.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedState : Bundle) : View
        mContentView = inflater.inflate(R.layout.crypt_keeper_settings, null);

        mIntentFilter = new IntentFilter();
        mIntentFilter.addAction(Intent.ACTION_BATTERY_CHANGED);

        mInitiateButton = (Button) mContentView.findViewById(R.id.initiate_encrypt);
        mInitiateButton.setOnClickListener(mInitiateListener);
        mInitiateButton.setEnabled(false);

        mPowerWarning = mContentView.findViewById(R.id.warning_unplugged);
        mBatteryWarning = mContentView.findViewById(R.id.warning_low_charge);

        return mContentView;
!!!13796620.java!!!	onResume() : void
        super.onResume();
        getActivity().registerReceiver(mIntentReceiver, mIntentFilter);
!!!13796748.java!!!	onPause() : void
        super.onPause();
        getActivity().unregisterReceiver(mIntentReceiver);
!!!13796876.java!!!	onActivityCreated(inout savedInstanceState : Bundle) : void
        super.onActivityCreated(savedInstanceState);
        Activity activity = getActivity();
        Intent intent = activity.getIntent();
        if (DevicePolicyManager.ACTION_START_ENCRYPTION.equals(intent.getAction())) {
            DevicePolicyManager dpm = (DevicePolicyManager)
                    activity.getSystemService(Context.DEVICE_POLICY_SERVICE);
            if (dpm != null) {
                int status = dpm.getStorageEncryptionStatus();
                if (status != DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE) {
                    // There is nothing to do here, so simply finish() (which returns to caller)
                    activity.finish();
                }
            }
        }
!!!13797004.java!!!	runKeyguardConfirmation(in request : int) : boolean
        // 1.  Confirm that we have a sufficient PIN/Password to continue
        LockPatternUtils lockPatternUtils = new LockPatternUtils(getActivity());
        int quality = lockPatternUtils.getActivePasswordQuality();
        if (quality == DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK
            && lockPatternUtils.isLockPasswordEnabled()) {
            // Use the alternate as the quality. We expect this to be
            // PASSWORD_QUALITY_SOMETHING(pattern) or PASSWORD_QUALITY_NUMERIC(PIN).
            quality = lockPatternUtils.getKeyguardStoredPasswordQuality();
        }
        if (quality < MIN_PASSWORD_QUALITY) {
            return false;
        }
        // 2.  Ask the user to confirm the current PIN/Password
        Resources res = getActivity().getResources();
        return new ChooseLockSettingsHelper(getActivity(), this)
                .launchConfirmationActivity(request,
                        res.getText(R.string.master_clear_gesture_prompt),
                        res.getText(R.string.master_clear_gesture_explanation));
!!!13797132.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode != KEYGUARD_REQUEST) {
            return;
        }

        // If the user entered a valid keyguard trace, present the final
        // confirmation prompt; otherwise, go back to the initial state.
        if (resultCode == Activity.RESULT_OK && data != null) {
            String password = data.getStringExtra(ChooseLockSettingsHelper.EXTRA_KEY_PASSWORD);
            if (!TextUtils.isEmpty(password)) {
                showFinalConfirmation(password);
            }
        }
!!!13797260.java!!!	showFinalConfirmation(in password : String) : void
        Preference preference = new Preference(getActivity());
        preference.setFragment(CryptKeeperConfirm.class.getName());
        preference.setTitle(R.string.crypt_keeper_confirm_title);
        preference.getExtras().putString("password", password);
        ((PreferenceActivity) getActivity()).onPreferenceStartFragment(null, preference);
