class MediaRouter
!!!2836364.java!!!	typesToString(in types : int) : String
        final StringBuilder result = new StringBuilder();
        if ((types & ROUTE_TYPE_LIVE_AUDIO) != 0) {
            result.append("ROUTE_TYPE_LIVE_AUDIO ");
        }
        if ((types & ROUTE_TYPE_LIVE_VIDEO) != 0) {
            result.append("ROUTE_TYPE_LIVE_VIDEO ");
        }
        if ((types & ROUTE_TYPE_USER) != 0) {
            result.append("ROUTE_TYPE_USER ");
        }
        return result.toString();
!!!2836492.java!!!	MediaRouter(inout context : Context)
        synchronized (Static.class) {
            if (sStatic == null) {
                final Context appContext = context.getApplicationContext();
                sStatic = new Static(appContext);
                sStatic.startMonitoringRoutes(appContext);
            }
        }
!!!2836620.java!!!	getSystemAudioRoute() : RouteInfo
        return sStatic.mDefaultAudioVideo;
!!!2836748.java!!!	getSystemAudioCategory() : RouteCategory
        return sStatic.mSystemCategory;
!!!2836876.java!!!	getSelectedRoute(in type : int) : RouteInfo
        if (sStatic.mSelectedRoute != null &&
                (sStatic.mSelectedRoute.mSupportedTypes & type) != 0) {
            // If the selected route supports any of the types supplied, it's still considered
            // 'selected' for that type.
            return sStatic.mSelectedRoute;
        } else if (type == ROUTE_TYPE_USER) {
            // The caller specifically asked for a user route and the currently selected route
            // doesn't qualify.
            return null;
        }
        // If the above didn't match and we're not specifically asking for a user route,
        // consider the default selected.
        return sStatic.mDefaultAudioVideo;
!!!2837004.java!!!	addCallback(in types : int, inout cb : Callback) : void
        final int count = sStatic.mCallbacks.size();
        for (int i = 0; i < count; i++) {
            final CallbackInfo info = sStatic.mCallbacks.get(i);
            if (info.cb == cb) {
                info.type |= types;
                return;
            }
        }
        sStatic.mCallbacks.add(new CallbackInfo(cb, types, this));
!!!2837132.java!!!	removeCallback(inout cb : Callback) : void
        final int count = sStatic.mCallbacks.size();
        for (int i = 0; i < count; i++) {
            if (sStatic.mCallbacks.get(i).cb == cb) {
                sStatic.mCallbacks.remove(i);
                return;
            }
        }
        Log.w(TAG, "removeCallback(" + cb + "): callback not registered");
!!!2837260.java!!!	selectRoute(in types : int, inout route : RouteInfo) : void
        // Applications shouldn't programmatically change anything but user routes.
        types &= ROUTE_TYPE_USER;
        selectRouteStatic(types, route);
!!!2837388.java!!!	selectRouteInt(in types : int, inout route : RouteInfo) : void
        selectRouteStatic(types, route);
!!!2837516.java!!!	selectRouteStatic(in types : int, inout route : RouteInfo) : void
        final RouteInfo oldRoute = sStatic.mSelectedRoute;
        if (oldRoute == route) return;
        if ((route.getSupportedTypes() & types) == 0) {
            Log.w(TAG, "selectRoute ignored; cannot select route with supported types " +
                    typesToString(route.getSupportedTypes()) + " into route types " +
                    typesToString(types));
            return;
        }

        final RouteInfo btRoute = sStatic.mBluetoothA2dpRoute;
        if (btRoute != null && (types & ROUTE_TYPE_LIVE_AUDIO) != 0 &&
                (route == btRoute || route == sStatic.mDefaultAudioVideo)) {
            try {
                sStatic.mAudioService.setBluetoothA2dpOn(route == btRoute);
            } catch (RemoteException e) {
                Log.e(TAG, "Error changing Bluetooth A2DP state", e);
            }
        }

        final WifiDisplay activeDisplay =
                sStatic.mDisplayService.getWifiDisplayStatus().getActiveDisplay();
        final boolean oldRouteHasAddress = oldRoute != null && oldRoute.mDeviceAddress != null;
        final boolean newRouteHasAddress = route != null && route.mDeviceAddress != null;
        if (activeDisplay != null || oldRouteHasAddress || newRouteHasAddress) {
            if (newRouteHasAddress && !matchesDeviceAddress(activeDisplay, route)) {
                sStatic.mDisplayService.connectWifiDisplay(route.mDeviceAddress);
            } else if (activeDisplay != null && !newRouteHasAddress) {
                sStatic.mDisplayService.disconnectWifiDisplay();
            }
        }

        if (oldRoute != null) {
            // TODO filter types properly
            dispatchRouteUnselected(types & oldRoute.getSupportedTypes(), oldRoute);
        }
        sStatic.mSelectedRoute = route;
        if (route != null) {
            // TODO filter types properly
            dispatchRouteSelected(types & route.getSupportedTypes(), route);
        }
!!!2837644.java!!!	matchesDeviceAddress(inout display : WifiDisplay, inout info : RouteInfo) : boolean
        final boolean routeHasAddress = info != null && info.mDeviceAddress != null;
        if (display == null && !routeHasAddress) {
            return true;
        }

        if (display != null && routeHasAddress) {
            return display.getDeviceAddress().equals(info.mDeviceAddress);
        }
        return false;
!!!2837772.java!!!	addUserRoute(inout info : UserRouteInfo) : void
        addRouteStatic(info);
!!!2837900.java!!!	addRouteInt(inout info : RouteInfo) : void
        addRouteStatic(info);
!!!2838028.java!!!	addRouteStatic(inout info : RouteInfo) : void
        final RouteCategory cat = info.getCategory();
        if (!sStatic.mCategories.contains(cat)) {
            sStatic.mCategories.add(cat);
        }
        if (cat.isGroupable() && !(info instanceof RouteGroup)) {
            // Enforce that any added route in a groupable category must be in a group.
            final RouteGroup group = new RouteGroup(info.getCategory());
            group.mSupportedTypes = info.mSupportedTypes;
            sStatic.mRoutes.add(group);
            dispatchRouteAdded(group);
            group.addRoute(info);

            info = group;
        } else {
            sStatic.mRoutes.add(info);
            dispatchRouteAdded(info);
        }
!!!2838156.java!!!	removeUserRoute(inout info : UserRouteInfo) : void
        removeRoute(info);
!!!2838284.java!!!	clearUserRoutes() : void
        for (int i = 0; i < sStatic.mRoutes.size(); i++) {
            final RouteInfo info = sStatic.mRoutes.get(i);
            // TODO Right now, RouteGroups only ever contain user routes.
            // The code below will need to change if this assumption does.
            if (info instanceof UserRouteInfo || info instanceof RouteGroup) {
                removeRouteAt(i);
                i--;
            }
        }
!!!2838412.java!!!	removeRouteInt(inout info : RouteInfo) : void
        removeRoute(info);
!!!2838540.java!!!	removeRoute(inout info : RouteInfo) : void
        if (sStatic.mRoutes.remove(info)) {
            final RouteCategory removingCat = info.getCategory();
            final int count = sStatic.mRoutes.size();
            boolean found = false;
            for (int i = 0; i < count; i++) {
                final RouteCategory cat = sStatic.mRoutes.get(i).getCategory();
                if (removingCat == cat) {
                    found = true;
                    break;
                }
            }
            if (info == sStatic.mSelectedRoute) {
                // Removing the currently selected route? Select the default before we remove it.
                // TODO: Be smarter about the route types here; this selects for all valid.
                selectRouteStatic(ROUTE_TYPE_LIVE_AUDIO | ROUTE_TYPE_USER, sStatic.mDefaultAudioVideo);
            }
            if (!found) {
                sStatic.mCategories.remove(removingCat);
            }
            dispatchRouteRemoved(info);
        }
!!!2838668.java!!!	removeRouteAt(in routeIndex : int) : void
        if (routeIndex >= 0 && routeIndex < sStatic.mRoutes.size()) {
            final RouteInfo info = sStatic.mRoutes.remove(routeIndex);
            final RouteCategory removingCat = info.getCategory();
            final int count = sStatic.mRoutes.size();
            boolean found = false;
            for (int i = 0; i < count; i++) {
                final RouteCategory cat = sStatic.mRoutes.get(i).getCategory();
                if (removingCat == cat) {
                    found = true;
                    break;
                }
            }
            if (info == sStatic.mSelectedRoute) {
                // Removing the currently selected route? Select the default before we remove it.
                // TODO: Be smarter about the route types here; this selects for all valid.
                selectRouteStatic(ROUTE_TYPE_LIVE_AUDIO | ROUTE_TYPE_LIVE_VIDEO | ROUTE_TYPE_USER,
                        sStatic.mDefaultAudioVideo);
            }
            if (!found) {
                sStatic.mCategories.remove(removingCat);
            }
            dispatchRouteRemoved(info);
        }
!!!2838796.java!!!	getCategoryCount() : int
        return sStatic.mCategories.size();
!!!2838924.java!!!	getCategoryAt(in index : int) : RouteCategory
        return sStatic.mCategories.get(index);
!!!2839052.java!!!	getRouteCount() : int
        return sStatic.mRoutes.size();
!!!2839180.java!!!	getRouteAt(in index : int) : RouteInfo
        return sStatic.mRoutes.get(index);
!!!2839308.java!!!	getRouteCountStatic() : int
        return sStatic.mRoutes.size();
!!!2839436.java!!!	getRouteAtStatic(in index : int) : RouteInfo
        return sStatic.mRoutes.get(index);
!!!2839564.java!!!	createUserRoute(inout category : RouteCategory) : UserRouteInfo
        return new UserRouteInfo(category);
!!!2839692.java!!!	createRouteCategory(inout name : CharSequence, inout isGroupable : boolean) : RouteCategory
        return new RouteCategory(name, ROUTE_TYPE_USER, isGroupable);
!!!2839820.java!!!	createRouteCategory(in nameResId : int, inout isGroupable : boolean) : RouteCategory
        return new RouteCategory(nameResId, ROUTE_TYPE_USER, isGroupable);
!!!2839948.java!!!	updateRoute(in info : RouteInfo) : void
        dispatchRouteChanged(info);
!!!2840076.java!!!	dispatchRouteSelected(in type : int, inout info : RouteInfo) : void
        for (CallbackInfo cbi : sStatic.mCallbacks) {
            if ((cbi.type & type) != 0) {
                cbi.cb.onRouteSelected(cbi.router, type, info);
            }
        }
!!!2840204.java!!!	dispatchRouteUnselected(in type : int, inout info : RouteInfo) : void
        for (CallbackInfo cbi : sStatic.mCallbacks) {
            if ((cbi.type & type) != 0) {
                cbi.cb.onRouteUnselected(cbi.router, type, info);
            }
        }
!!!2840332.java!!!	dispatchRouteChanged(inout info : RouteInfo) : void
        for (CallbackInfo cbi : sStatic.mCallbacks) {
            if ((cbi.type & info.mSupportedTypes) != 0) {
                cbi.cb.onRouteChanged(cbi.router, info);
            }
        }
!!!2840460.java!!!	dispatchRouteAdded(inout info : RouteInfo) : void
        for (CallbackInfo cbi : sStatic.mCallbacks) {
            if ((cbi.type & info.mSupportedTypes) != 0) {
                cbi.cb.onRouteAdded(cbi.router, info);
            }
        }
!!!2840588.java!!!	dispatchRouteRemoved(inout info : RouteInfo) : void
        for (CallbackInfo cbi : sStatic.mCallbacks) {
            if ((cbi.type & info.mSupportedTypes) != 0) {
                cbi.cb.onRouteRemoved(cbi.router, info);
            }
        }
!!!2840716.java!!!	dispatchRouteGrouped(inout info : RouteInfo, inout group : RouteGroup, in index : int) : void
        for (CallbackInfo cbi : sStatic.mCallbacks) {
            if ((cbi.type & group.mSupportedTypes) != 0) {
                cbi.cb.onRouteGrouped(cbi.router, info, group, index);
            }
        }
!!!2840844.java!!!	dispatchRouteUngrouped(inout info : RouteInfo, inout group : RouteGroup) : void
        for (CallbackInfo cbi : sStatic.mCallbacks) {
            if ((cbi.type & group.mSupportedTypes) != 0) {
                cbi.cb.onRouteUngrouped(cbi.router, info, group);
            }
        }
!!!2840972.java!!!	dispatchRouteVolumeChanged(inout info : RouteInfo) : void
        for (CallbackInfo cbi : sStatic.mCallbacks) {
            if ((cbi.type & info.mSupportedTypes) != 0) {
                cbi.cb.onRouteVolumeChanged(cbi.router, info);
            }
        }
!!!2841100.java!!!	dispatchRoutePresentationDisplayChanged(inout info : RouteInfo) : void
        for (CallbackInfo cbi : sStatic.mCallbacks) {
            if ((cbi.type & info.mSupportedTypes) != 0) {
                cbi.cb.onRoutePresentationDisplayChanged(cbi.router, info);
            }
        }
!!!2841228.java!!!	systemVolumeChanged(in newValue : int) : void
        final RouteInfo selectedRoute = sStatic.mSelectedRoute;
        if (selectedRoute == null) return;

        if (selectedRoute == sStatic.mBluetoothA2dpRoute ||
                selectedRoute == sStatic.mDefaultAudioVideo) {
            dispatchRouteVolumeChanged(selectedRoute);
        } else if (sStatic.mBluetoothA2dpRoute != null) {
            try {
                dispatchRouteVolumeChanged(sStatic.mAudioService.isBluetoothA2dpOn() ?
                        sStatic.mBluetoothA2dpRoute : sStatic.mDefaultAudioVideo);
            } catch (RemoteException e) {
                Log.e(TAG, "Error checking Bluetooth A2DP state to report volume change", e);
            }
        } else {
            dispatchRouteVolumeChanged(sStatic.mDefaultAudioVideo);
        }
!!!2841356.java!!!	updateWifiDisplayStatus(inout newStatus : WifiDisplayStatus) : void
        final WifiDisplayStatus oldStatus = sStatic.mLastKnownWifiDisplayStatus;

        // TODO Naive implementation. Make this smarter later.
        boolean wantScan = false;
        boolean blockScan = false;
        WifiDisplay[] oldDisplays = oldStatus != null ?
                oldStatus.getRememberedDisplays() : new WifiDisplay[0];
        WifiDisplay[] newDisplays = newStatus.getRememberedDisplays();
        WifiDisplay[] availableDisplays = newStatus.getAvailableDisplays();
        WifiDisplay activeDisplay = newStatus.getActiveDisplay();

        for (int i = 0; i < newDisplays.length; i++) {
            final WifiDisplay d = newDisplays[i];
            final WifiDisplay oldRemembered = findMatchingDisplay(d, oldDisplays);
            if (oldRemembered == null) {
                addRouteStatic(makeWifiDisplayRoute(d,
                        findMatchingDisplay(d, availableDisplays) != null));
                wantScan = true;
            } else {
                final boolean available = findMatchingDisplay(d, availableDisplays) != null;
                final RouteInfo route = findWifiDisplayRoute(d);
                updateWifiDisplayRoute(route, d, available, newStatus);
            }
            if (d.equals(activeDisplay)) {
                final RouteInfo activeRoute = findWifiDisplayRoute(d);
                if (activeRoute != null) {
                    selectRouteStatic(activeRoute.getSupportedTypes(), activeRoute);

                    // Don't scan if we're already connected to a wifi display,
                    // the scanning process can cause a hiccup with some configurations.
                    blockScan = true;
                }
            }
        }
        for (int i = 0; i < oldDisplays.length; i++) {
            final WifiDisplay d = oldDisplays[i];
            final WifiDisplay newDisplay = findMatchingDisplay(d, newDisplays);
            if (newDisplay == null) {
                removeRoute(findWifiDisplayRoute(d));
            }
        }

        if (wantScan && !blockScan) {
            sStatic.mDisplayService.scanWifiDisplays();
        }

        sStatic.mLastKnownWifiDisplayStatus = newStatus;
!!!2841484.java!!!	makeWifiDisplayRoute(inout display : WifiDisplay, inout available : boolean) : RouteInfo
        final RouteInfo newRoute = new RouteInfo(sStatic.mSystemCategory);
        newRoute.mDeviceAddress = display.getDeviceAddress();
        newRoute.mSupportedTypes = ROUTE_TYPE_LIVE_AUDIO | ROUTE_TYPE_LIVE_VIDEO;
        newRoute.mVolumeHandling = RouteInfo.PLAYBACK_VOLUME_FIXED;
        newRoute.mPlaybackType = RouteInfo.PLAYBACK_TYPE_REMOTE;

        newRoute.setStatusCode(available ?
                RouteInfo.STATUS_AVAILABLE : RouteInfo.STATUS_CONNECTING);
        newRoute.mEnabled = available;

        newRoute.mName = display.getFriendlyDisplayName();

        newRoute.mPresentationDisplay = choosePresentationDisplayForRoute(newRoute,
                sStatic.getAllPresentationDisplays());
        return newRoute;
!!!2841612.java!!!	updateWifiDisplayRoute(inout route : RouteInfo, inout display : WifiDisplay, inout available : boolean, inout wifiDisplayStatus : WifiDisplayStatus) : void
        final boolean isScanning =
                wifiDisplayStatus.getScanState() == WifiDisplayStatus.SCAN_STATE_SCANNING;

        boolean changed = false;
        int newStatus = RouteInfo.STATUS_NONE;

        if (available) {
            newStatus = isScanning ? RouteInfo.STATUS_SCANNING : RouteInfo.STATUS_AVAILABLE;
        } else {
            newStatus = RouteInfo.STATUS_NOT_AVAILABLE;
        }

        if (display.equals(wifiDisplayStatus.getActiveDisplay())) {
            final int activeState = wifiDisplayStatus.getActiveDisplayState();
            switch (activeState) {
                case WifiDisplayStatus.DISPLAY_STATE_CONNECTED:
                    newStatus = RouteInfo.STATUS_NONE;
                    break;
                case WifiDisplayStatus.DISPLAY_STATE_CONNECTING:
                    newStatus = RouteInfo.STATUS_CONNECTING;
                    break;
                case WifiDisplayStatus.DISPLAY_STATE_NOT_CONNECTED:
                    Log.e(TAG, "Active display is not connected!");
                    break;
            }
        }

        final String newName = display.getFriendlyDisplayName();
        if (!route.getName().equals(newName)) {
            route.mName = newName;
            changed = true;
        }

        changed |= route.mEnabled != available;
        route.mEnabled = available;

        changed |= route.setStatusCode(newStatus);

        if (changed) {
            dispatchRouteChanged(route);
        }

        if (!available && route == sStatic.mSelectedRoute) {
            // Oops, no longer available. Reselect the default.
            final RouteInfo defaultRoute = sStatic.mDefaultAudioVideo;
            selectRouteStatic(defaultRoute.getSupportedTypes(), defaultRoute);
        }
!!!2841740.java!!!	findMatchingDisplay(inout d : WifiDisplay, inout displays : WifiDisplay) : WifiDisplay
        for (int i = 0; i < displays.length; i++) {
            final WifiDisplay other = displays[i];
            if (d.hasSameAddress(other)) {
                return other;
            }
        }
        return null;
!!!2841868.java!!!	findWifiDisplayRoute(inout d : WifiDisplay) : RouteInfo
        final int count = sStatic.mRoutes.size();
        for (int i = 0; i < count; i++) {
            final RouteInfo info = sStatic.mRoutes.get(i);
            if (d.getDeviceAddress().equals(info.mDeviceAddress)) {
                return info;
            }
        }
        return null;
!!!2841996.java!!!	choosePresentationDisplayForRoute(inout route : RouteInfo, inout displays : Display) : Display
        if ((route.mSupportedTypes & ROUTE_TYPE_LIVE_VIDEO) != 0) {
            if (route.mDeviceAddress != null) {
                // Find the indicated Wifi display by its address.
                for (Display display : displays) {
                    if (display.getType() == Display.TYPE_WIFI
                            && route.mDeviceAddress.equals(display.getAddress())) {
                        return display;
                    }
                }
                return null;
            }

            if (route == sStatic.mDefaultAudioVideo && displays.length > 0) {
                // Choose the first presentation display from the list.
                return displays[0];
            }
        }
        return null;
