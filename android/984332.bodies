class PageNotRespondingRunnable
!!!4942220.java!!!	PageNotRespondingRunnable(inout context : Context, inout watchdogHandler : Handler)
            mContext = context;
            mWatchdogHandler = watchdogHandler;
!!!4942348.java!!!	run() : void
            // This must run on the UI thread as it is displaying an AlertDialog.
            assert Looper.getMainLooper().getThread() == Thread.currentThread();
            new AlertDialog.Builder(mContext)
                    .setMessage(com.android.internal.R.string.webpage_unresponsive)
                    .setPositiveButton(com.android.internal.R.string.force_close,
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    // User chose to force close.
                                    Process.killProcess(Process.myPid());
                                }
                            })
                    .setNegativeButton(com.android.internal.R.string.wait,
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    // The user chose to wait. The last HEARTBEAT message
                                    // will still be in the WebCore thread's queue, so all
                                    // we need to do is post another TIMED_OUT so that the
                                    // user will get prompted again if the WebCore thread
                                    // doesn't sort itself out.
                                    mWatchdogHandler.sendMessageDelayed(
                                            mWatchdogHandler.obtainMessage(TIMED_OUT),
                                            SUBSEQUENT_TIMEOUT_PERIOD);
                                }
                            })
                    .setOnCancelListener(
                            new DialogInterface.OnCancelListener() {
                                @Override
                                public void onCancel(DialogInterface dialog) {
                                    mWatchdogHandler.sendMessageDelayed(
                                            mWatchdogHandler.obtainMessage(TIMED_OUT),
                                            SUBSEQUENT_TIMEOUT_PERIOD);
                                }
                            })
                    .setIcon(android.R.drawable.ic_dialog_alert)
                    .show();
