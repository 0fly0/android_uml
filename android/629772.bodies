class MCameraClient
!!!1919116.cpp!!!	notifyCallback(in msgType : int32_t, in ext1 : int32_t, in ext2 : int32_t) : void
    INFO("%s", __func__);
    Mutex::Autolock _l(mLock);
    ssize_t i = mNotifyCount.indexOfKey(msgType);
    if (i < 0) {
        mNotifyCount.add(msgType, 1);
    } else {
        ++mNotifyCount.editValueAt(i);
    }
    mCond.signal();
!!!1919244.cpp!!!	dataCallback(in msgType : int32_t, in data : sp<IMemory>) : void
    INFO("%s", __func__);
    int dataSize = data->size();
    INFO("data type = %d, size = %d", msgType, dataSize);
    Mutex::Autolock _l(mLock);
    ssize_t i = mDataCount.indexOfKey(msgType);
    if (i < 0) {
        mDataCount.add(msgType, 1);
        mDataSize.add(msgType, dataSize);
    } else {
        ++mDataCount.editValueAt(i);
        mDataSize.editValueAt(i) = dataSize;
    }
    mCond.signal();

    if (msgType == CAMERA_MSG_VIDEO_FRAME) {
        ASSERT(mReleaser != NULL);
        mReleaser->releaseRecordingFrame(data);
    }
!!!1919372.cpp!!!	dataCallbackTimestamp(in timestamp : nsecs_t, in msgType : int32_t, in data : sp<IMemory>) : void
    dataCallback(msgType, data);
!!!1919500.cpp!!!	clearStat() : void
    Mutex::Autolock _l(mLock);
    mNotifyCount.clear();
    mDataCount.clear();
    mDataSize.clear();
!!!1919628.cpp!!!	assertNotify(in msgType : int32_t, in op : OP, in count : int) : void
    Mutex::Autolock _l(mLock);
    int v = mNotifyCount.valueFor(msgType);
    assertTest(op, v, count);
!!!1919756.cpp!!!	assertData(in msgType : int32_t, in op : OP, in count : int) : void
    Mutex::Autolock _l(mLock);
    int v = mDataCount.valueFor(msgType);
    assertTest(op, v, count);
!!!1919884.cpp!!!	waitNotify(in msgType : int32_t, in op : OP, in count : int) : void
    INFO("waitNotify: %d, %d, %d", msgType, op, count);
    Mutex::Autolock _l(mLock);
    while (true) {
        int v = mNotifyCount.valueFor(msgType);
        if (test(op, v, count)) {
            break;
        }
        mCond.wait(mLock);
    }
!!!1920012.cpp!!!	waitData(in msgType : int32_t, in op : OP, in count : int) : void
    INFO("waitData: %d, %d, %d", msgType, op, count);
    Mutex::Autolock _l(mLock);
    while (true) {
        int v = mDataCount.valueFor(msgType);
        if (test(op, v, count)) {
            break;
        }
        mCond.wait(mLock);
    }
!!!1920140.cpp!!!	assertDataSize(in msgType : int32_t, in op : OP, in dataSize : int) : void
    Mutex::Autolock _l(mLock);
    int v = mDataSize.valueFor(msgType);
    assertTest(op, v, dataSize);
!!!1920396.cpp!!!	test(in op : OP, in v1 : int, in v2 : int) : bool
    switch (op) {
        case EQ: return v1 == v2;
        case GT: return v1 > v2;
        case LT: return v1 < v2;
        case GE: return v1 >= v2;
        case LE: return v1 <= v2;
        default: ASSERT(0); break;
    }
    return false;
!!!1920524.cpp!!!	assertTest(in op : OP, in v1 : int, in v2 : int) : void
    if (!test(op, v1, v2)) {
        ALOGE("assertTest failed: op=%d, v1=%d, v2=%d", op, v1, v2);
        ASSERT(0);
    }
