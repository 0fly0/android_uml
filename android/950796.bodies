class GLES20RenderLayer
!!!4513932.java!!!	GLES20RenderLayer(in width : int, in height : int, inout isOpaque : boolean)
        super(width, height, isOpaque);

        int[] layerInfo = new int[2];
        mLayer = GLES20Canvas.nCreateLayer(width, height, isOpaque, layerInfo);
        if (mLayer != 0) {
            mLayerWidth = layerInfo[0];
            mLayerHeight = layerInfo[1];

            mCanvas = new GLES20Canvas(mLayer, !isOpaque);
            mFinalizer = new Finalizer(mLayer);
        } else {
            mCanvas = null;
            mFinalizer = null;
        }
!!!4514060.java!!!	isValid() : boolean
        return mLayer != 0 && mLayerWidth > 0 && mLayerHeight > 0;
!!!4514188.java!!!	resize(in width : int, in height : int) : boolean
        if (!isValid() || width <= 0 || height <= 0) return false;

        mWidth = width;
        mHeight = height;
        
        if (width != mLayerWidth || height != mLayerHeight) {
            int[] layerInfo = new int[2];

            if (GLES20Canvas.nResizeLayer(mLayer, width, height, layerInfo)) {
                mLayerWidth = layerInfo[0];
                mLayerHeight = layerInfo[1];
            } else {
                // Failure: not enough GPU resources for requested size
                mLayer = 0;
                mLayerWidth = 0;
                mLayerHeight = 0;
            }
        }
        return isValid();
!!!4514316.java!!!	setOpaque(inout isOpaque : boolean) : void
        mOpaque = isOpaque;
        GLES20Canvas.nSetOpaqueLayer(mLayer, isOpaque);
!!!4514444.java!!!	getCanvas() : HardwareCanvas
        return mCanvas;
!!!4514572.java!!!	end(inout currentCanvas : Canvas) : void
        if (currentCanvas instanceof GLES20Canvas) {
            ((GLES20Canvas) currentCanvas).resume();
        }
!!!4514700.java!!!	start(inout currentCanvas : Canvas) : HardwareCanvas
        if (currentCanvas instanceof GLES20Canvas) {
            ((GLES20Canvas) currentCanvas).interrupt();
        }
        return getCanvas();
!!!4514956.java!!!	redrawLater(inout displayList : DisplayList, inout dirtyRect : Rect) : void
        GLES20Canvas.nUpdateRenderLayer(mLayer, mCanvas.getRenderer(),
                ((GLES20DisplayList) displayList).getNativeDisplayList(),
                dirtyRect.left, dirtyRect.top, dirtyRect.right, dirtyRect.bottom);
