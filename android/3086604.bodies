class KeyboardSwitcher
!!!12938380.java!!!	getInstance() : KeyboardSwitcher
        return sInstance;
!!!12938508.java!!!	KeyboardSwitcher()
        // Intentional empty constructor for singleton.
!!!12938636.java!!!	init(inout latinIme : LatinIME, inout prefs : SharedPreferences) : void
        sInstance.initInternal(latinIme, prefs);
!!!12938764.java!!!	initInternal(inout latinIme : LatinIME, inout prefs : SharedPreferences) : void
        mLatinIME = latinIme;
        mResources = latinIme.getResources();
        mPrefs = prefs;
        mSubtypeSwitcher = SubtypeSwitcher.getInstance();
        mState = new KeyboardState(this);
        setContextThemeWrapper(latinIme, getKeyboardTheme(latinIme, prefs));
        mForceNonDistinctMultitouch = prefs.getBoolean(
                DebugSettings.FORCE_NON_DISTINCT_MULTITOUCH_KEY, false);
!!!12938892.java!!!	getKeyboardTheme(inout context : Context, inout prefs : SharedPreferences) : KeyboardTheme
        final String defaultIndex = context.getString(R.string.config_default_keyboard_theme_index);
        final String themeIndex = prefs.getString(PREF_KEYBOARD_LAYOUT, defaultIndex);
        try {
            final int index = Integer.valueOf(themeIndex);
            if (index >= 0 && index < KEYBOARD_THEMES.length) {
                return KEYBOARD_THEMES[index];
            }
        } catch (NumberFormatException e) {
            // Format error, keyboard theme is default to 0.
        }
        Log.w(TAG, "Illegal keyboard theme in preference: " + themeIndex + ", default to 0");
        return KEYBOARD_THEMES[0];
!!!12939020.java!!!	setContextThemeWrapper(inout context : Context, inout keyboardTheme : KeyboardTheme) : void
        if (mKeyboardTheme.mThemeId != keyboardTheme.mThemeId) {
            mKeyboardTheme = keyboardTheme;
            mThemeContext = new ContextThemeWrapper(context, keyboardTheme.mStyleId);
            KeyboardLayoutSet.clearKeyboardCache();
        }
!!!12939148.java!!!	loadKeyboard(inout editorInfo : EditorInfo, inout settingsValues : SettingsValues) : void
        final KeyboardLayoutSet.Builder builder = new KeyboardLayoutSet.Builder(
                mThemeContext, editorInfo);
        builder.setScreenGeometry(mThemeContext.getResources().getConfiguration().orientation,
                mThemeContext.getResources().getDisplayMetrics().widthPixels);
        builder.setSubtype(mSubtypeSwitcher.getCurrentSubtype());
        builder.setOptions(
                settingsValues.isVoiceKeyEnabled(editorInfo),
                settingsValues.isVoiceKeyOnMain(),
                settingsValues.isLanguageSwitchKeyEnabled(mThemeContext));
        mKeyboardLayoutSet = builder.build();
        try {
            mState.onLoadKeyboard(mResources.getString(R.string.layout_switch_back_symbols));
        } catch (KeyboardLayoutSetException e) {
            Log.w(TAG, "loading keyboard failed: " + e.mKeyboardId, e.getCause());
            LatinImeLogger.logOnException(e.mKeyboardId.toString(), e.getCause());
            return;
        }
!!!12939276.java!!!	saveKeyboardState() : void
        if (getKeyboard() != null) {
            mState.onSaveKeyboardState();
        }
!!!12939404.java!!!	onFinishInputView() : void
        mIsAutoCorrectionActive = false;
!!!12939532.java!!!	onHideWindow() : void
        mIsAutoCorrectionActive = false;
!!!12939660.java!!!	setKeyboard(in keyboard : Keyboard) : void
        final Keyboard oldKeyboard = mKeyboardView.getKeyboard();
        mKeyboardView.setKeyboard(keyboard);
        mCurrentInputView.setKeyboardGeometry(keyboard.mTopPadding);
        mKeyboardView.setKeyPreviewPopupEnabled(
                SettingsValues.isKeyPreviewPopupEnabled(mPrefs, mResources),
                SettingsValues.getKeyPreviewPopupDismissDelay(mPrefs, mResources));
        mKeyboardView.updateAutoCorrectionState(mIsAutoCorrectionActive);
        mKeyboardView.updateShortcutKey(mSubtypeSwitcher.isShortcutImeReady());
        final boolean subtypeChanged = (oldKeyboard == null)
                || !keyboard.mId.mLocale.equals(oldKeyboard.mId.mLocale);
        final boolean needsToDisplayLanguage = mSubtypeSwitcher.needsToDisplayLanguage(
                keyboard.mId.mLocale);
        mKeyboardView.startDisplayLanguageOnSpacebar(subtypeChanged, needsToDisplayLanguage,
                ImfUtils.hasMultipleEnabledIMEsOrSubtypes(mLatinIME, true));
!!!12939788.java!!!	getKeyboard() : Keyboard
        if (mKeyboardView != null) {
            return mKeyboardView.getKeyboard();
        }
        return null;
!!!12939916.java!!!	updateShiftState() : void
        mState.onUpdateShiftState(mLatinIME.getCurrentAutoCapsState());
!!!12940044.java!!!	onPressKey(in code : int) : void
        if (isVibrateAndSoundFeedbackRequired()) {
            mLatinIME.hapticAndAudioFeedback(code);
        }
        mState.onPressKey(code, isSinglePointer(), mLatinIME.getCurrentAutoCapsState());
!!!12940172.java!!!	onReleaseKey(in code : int, inout withSliding : boolean) : void
        mState.onReleaseKey(code, withSliding);
!!!12940300.java!!!	onCancelInput() : void
        mState.onCancelInput(isSinglePointer());
!!!12940428.java!!!	setAlphabetKeyboard() : void
        setKeyboard(mKeyboardLayoutSet.getKeyboard(KeyboardId.ELEMENT_ALPHABET));
!!!12940556.java!!!	setAlphabetManualShiftedKeyboard() : void
        setKeyboard(mKeyboardLayoutSet.getKeyboard(KeyboardId.ELEMENT_ALPHABET_MANUAL_SHIFTED));
!!!12940684.java!!!	setAlphabetAutomaticShiftedKeyboard() : void
        setKeyboard(mKeyboardLayoutSet.getKeyboard(KeyboardId.ELEMENT_ALPHABET_AUTOMATIC_SHIFTED));
!!!12940812.java!!!	setAlphabetShiftLockedKeyboard() : void
        setKeyboard(mKeyboardLayoutSet.getKeyboard(KeyboardId.ELEMENT_ALPHABET_SHIFT_LOCKED));
!!!12940940.java!!!	setAlphabetShiftLockShiftedKeyboard() : void
        setKeyboard(mKeyboardLayoutSet.getKeyboard(KeyboardId.ELEMENT_ALPHABET_SHIFT_LOCK_SHIFTED));
!!!12941068.java!!!	setSymbolsKeyboard() : void
        setKeyboard(mKeyboardLayoutSet.getKeyboard(KeyboardId.ELEMENT_SYMBOLS));
!!!12941196.java!!!	setSymbolsShiftedKeyboard() : void
        setKeyboard(mKeyboardLayoutSet.getKeyboard(KeyboardId.ELEMENT_SYMBOLS_SHIFTED));
!!!12941324.java!!!	requestUpdatingShiftState() : void
        mState.onUpdateShiftState(mLatinIME.getCurrentAutoCapsState());
!!!12941452.java!!!	startDoubleTapTimer() : void
        final LatinKeyboardView keyboardView = getKeyboardView();
        if (keyboardView != null) {
            final TimerProxy timer = keyboardView.getTimerProxy();
            timer.startDoubleTapTimer();
        }
!!!12941580.java!!!	cancelDoubleTapTimer() : void
        final LatinKeyboardView keyboardView = getKeyboardView();
        if (keyboardView != null) {
            final TimerProxy timer = keyboardView.getTimerProxy();
            timer.cancelDoubleTapTimer();
        }
!!!12941708.java!!!	isInDoubleTapTimeout() : boolean
        final LatinKeyboardView keyboardView = getKeyboardView();
        return (keyboardView != null)
                ? keyboardView.getTimerProxy().isInDoubleTapTimeout() : false;
!!!12941836.java!!!	startLongPressTimer(in code : int) : void
        final LatinKeyboardView keyboardView = getKeyboardView();
        if (keyboardView != null) {
            final TimerProxy timer = keyboardView.getTimerProxy();
            timer.startLongPressTimer(code);
        }
!!!12941964.java!!!	cancelLongPressTimer() : void
        final LatinKeyboardView keyboardView = getKeyboardView();
        if (keyboardView != null) {
            final TimerProxy timer = keyboardView.getTimerProxy();
            timer.cancelLongPressTimer();
        }
!!!12942092.java!!!	hapticAndAudioFeedback(in code : int) : void
        mLatinIME.hapticAndAudioFeedback(code);
!!!12942220.java!!!	onLongPressTimeout(in code : int) : void
        mState.onLongPressTimeout(code);
!!!12942348.java!!!	isInMomentarySwitchState() : boolean
        return mState.isInMomentarySwitchState();
!!!12942476.java!!!	isVibrateAndSoundFeedbackRequired() : boolean
        return mKeyboardView != null && !mKeyboardView.isInSlidingKeyInput();
!!!12942604.java!!!	isSinglePointer() : boolean
        return mKeyboardView != null && mKeyboardView.getPointerCount() == 1;
!!!12942732.java!!!	hasDistinctMultitouch() : boolean
        return mKeyboardView != null && mKeyboardView.hasDistinctMultitouch();
!!!12942860.java!!!	onCodeInput(in code : int) : void
        mState.onCodeInput(code, isSinglePointer(), mLatinIME.getCurrentAutoCapsState());
!!!12942988.java!!!	getKeyboardView() : LatinKeyboardView
        return mKeyboardView;
!!!12943116.java!!!	onCreateInputView() : View
        if (mKeyboardView != null) {
            mKeyboardView.closing();
        }

        Utils.GCUtils.getInstance().reset();
        boolean tryGC = true;
        for (int i = 0; i < Utils.GCUtils.GC_TRY_LOOP_MAX && tryGC; ++i) {
            try {
                setContextThemeWrapper(mLatinIME, mKeyboardTheme);
                mCurrentInputView = (InputView)LayoutInflater.from(mThemeContext).inflate(
                        R.layout.input_view, null);
                tryGC = false;
            } catch (OutOfMemoryError e) {
                Log.w(TAG, "load keyboard failed: " + e);
                tryGC = Utils.GCUtils.getInstance().tryGCOrWait(mKeyboardTheme.mName, e);
            } catch (InflateException e) {
                Log.w(TAG, "load keyboard failed: " + e);
                tryGC = Utils.GCUtils.getInstance().tryGCOrWait(mKeyboardTheme.mName, e);
            }
        }

        mKeyboardView = (LatinKeyboardView) mCurrentInputView.findViewById(R.id.keyboard_view);
        mKeyboardView.setKeyboardActionListener(mLatinIME);
        if (mForceNonDistinctMultitouch) {
            mKeyboardView.setDistinctMultitouch(false);
        }

        // This always needs to be set since the accessibility state can
        // potentially change without the input view being re-created.
        AccessibleKeyboardViewProxy.getInstance().setView(mKeyboardView);

        return mCurrentInputView;
!!!12943244.java!!!	onNetworkStateChanged() : void
        if (mKeyboardView != null) {
            mKeyboardView.updateShortcutKey(mSubtypeSwitcher.isShortcutImeReady());
        }
!!!12943372.java!!!	onAutoCorrectionStateChanged(inout isAutoCorrection : boolean) : void
        if (mIsAutoCorrectionActive != isAutoCorrection) {
            mIsAutoCorrectionActive = isAutoCorrection;
            if (mKeyboardView != null) {
                mKeyboardView.updateAutoCorrectionState(isAutoCorrection);
            }
        }
