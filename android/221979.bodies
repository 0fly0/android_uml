class Calendar
!!!1205531.java!!!	Calendar()
        this(TimeZone.getDefault(), Locale.getDefault());
!!!1205659.java!!!	Calendar(inout timezone : TimeZone)
        fields = new int[FIELD_COUNT];
        isSet = new boolean[FIELD_COUNT];
        areFieldsSet = isTimeSet = false;
        setLenient(true);
        setTimeZone(timezone);
!!!1205787.java!!!	Calendar(inout timezone : TimeZone, inout locale : Locale)
        this(timezone);
        LocaleData localeData = LocaleData.get(locale);
        setFirstDayOfWeek(localeData.firstDayOfWeek.intValue());
        setMinimalDaysInFirstWeek(localeData.minimalDaysInFirstWeek.intValue());
!!!1206043.java!!!	after(inout calendar : Object) : boolean
        if (!(calendar instanceof Calendar)) {
            return false;
        }
        return getTimeInMillis() > ((Calendar) calendar).getTimeInMillis();
!!!1206171.java!!!	before(inout calendar : Object) : boolean
        if (!(calendar instanceof Calendar)) {
            return false;
        }
        return getTimeInMillis() < ((Calendar) calendar).getTimeInMillis();
!!!1206299.java!!!	clear() : void
        for (int i = 0; i < FIELD_COUNT; i++) {
            fields[i] = 0;
            isSet[i] = false;
        }
        areFieldsSet = isTimeSet = false;
!!!1206427.java!!!	clear(in field : int) : void
        fields[field] = 0;
        isSet[field] = false;
        areFieldsSet = isTimeSet = false;
!!!1206555.java!!!	clone() : Object
        try {
            Calendar clone = (Calendar) super.clone();
            clone.fields = fields.clone();
            clone.isSet = isSet.clone();
            clone.zone = (TimeZone) zone.clone();
            return clone;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!1206683.java!!!	complete() : void
        if (!isTimeSet) {
            computeTime();
            isTimeSet = true;
        }
        if (!areFieldsSet) {
            computeFields();
            areFieldsSet = true;
        }
!!!1207067.java!!!	equals(inout object : Object) : boolean
        if (this == object) {
            return true;
        }
        if (!(object instanceof Calendar)) {
            return false;
        }
        Calendar cal = (Calendar) object;
        return getTimeInMillis() == cal.getTimeInMillis()
                && isLenient() == cal.isLenient()
                && getFirstDayOfWeek() == cal.getFirstDayOfWeek()
                && getMinimalDaysInFirstWeek() == cal.getMinimalDaysInFirstWeek()
                && getTimeZone().equals(cal.getTimeZone());
!!!1207195.java!!!	get(in field : int) : int
        complete();
        return fields[field];
!!!1207323.java!!!	getActualMaximum(in field : int) : int
        int value, next;
        if (getMaximum(field) == (next = getLeastMaximum(field))) {
            return next;
        }
        complete();
        long orgTime = time;
        set(field, next);
        do {
            value = next;
            roll(field, true);
            next = get(field);
        } while (next > value);
        time = orgTime;
        areFieldsSet = false;
        return value;
!!!1207451.java!!!	getActualMinimum(in field : int) : int
        int value, next;
        if (getMinimum(field) == (next = getGreatestMinimum(field))) {
            return next;
        }
        complete();
        long orgTime = time;
        set(field, next);
        do {
            value = next;
            roll(field, false);
            next = get(field);
        } while (next < value);
        time = orgTime;
        areFieldsSet = false;
        return value;
!!!1207579.java!!!	getAvailableLocales() : Locale
        return ICU.getAvailableCalendarLocales();
!!!1207707.java!!!	getFirstDayOfWeek() : int
        return firstDayOfWeek;
!!!1207963.java!!!	getInstance() : Calendar
        return new GregorianCalendar();
!!!1208091.java!!!	getInstance(inout locale : Locale) : Calendar
        return new GregorianCalendar(locale);
!!!1208219.java!!!	getInstance(inout timezone : TimeZone) : Calendar
        return new GregorianCalendar(timezone);
!!!1208347.java!!!	getInstance(inout timezone : TimeZone, inout locale : Locale) : Calendar
        return new GregorianCalendar(timezone, locale);
!!!1208731.java!!!	getMinimalDaysInFirstWeek() : int
        return minimalDaysInFirstWeek;
!!!1208987.java!!!	getTime() : Date
        return new Date(getTimeInMillis());
!!!1209115.java!!!	getTimeInMillis() : long
        if (!isTimeSet) {
            computeTime();
            isTimeSet = true;
        }
        return time;
!!!1209243.java!!!	getTimeZone() : TimeZone
        return zone;
!!!1209371.java!!!	hashCode() : int
        return (isLenient() ? 1237 : 1231) + getFirstDayOfWeek()
                + getMinimalDaysInFirstWeek() + getTimeZone().hashCode();
!!!1209499.java!!!	internalGet(in field : int) : int
        return fields[field];
!!!1209627.java!!!	isLenient() : boolean
        return lenient;
!!!1209755.java!!!	isSet(in field : int) : boolean
        return isSet[field];
!!!1209883.java!!!	roll(in field : int, in value : int) : void
        boolean increment = value >= 0;
        int count = increment ? value : -value;
        for (int i = 0; i < count; i++) {
            roll(field, increment);
        }
!!!1210139.java!!!	set(in field : int, in value : int) : void
        fields[field] = value;
        isSet[field] = true;
        areFieldsSet = isTimeSet = false;
        if (field > MONTH && field < AM_PM) {
            lastDateFieldSet = field;
        }
        if (field == HOUR || field == HOUR_OF_DAY) {
            lastTimeFieldSet = field;
        }
        if (field == AM_PM) {
            lastTimeFieldSet = HOUR;
        }
!!!1210267.java!!!	set(in year : int, in month : int, in day : int) : void
        set(YEAR, year);
        set(MONTH, month);
        set(DATE, day);
!!!1210395.java!!!	set(in year : int, in month : int, in day : int, in hourOfDay : int, in minute : int) : void
        set(year, month, day);
        set(HOUR_OF_DAY, hourOfDay);
        set(MINUTE, minute);
!!!1210523.java!!!	set(in year : int, in month : int, in day : int, in hourOfDay : int, in minute : int, in second : int) : void
        set(year, month, day, hourOfDay, minute);
        set(SECOND, second);
!!!1210651.java!!!	setFirstDayOfWeek(in value : int) : void
        firstDayOfWeek = value;
!!!1210779.java!!!	setLenient(inout value : boolean) : void
        lenient = value;
!!!1210907.java!!!	setMinimalDaysInFirstWeek(in value : int) : void
        minimalDaysInFirstWeek = value;
!!!1211035.java!!!	setTime(inout date : Date) : void
        setTimeInMillis(date.getTime());
!!!1211163.java!!!	setTimeInMillis(in milliseconds : long) : void
        if (!isTimeSet || !areFieldsSet || time != milliseconds) {
            time = milliseconds;
            isTimeSet = true;
            areFieldsSet = false;
            complete();
        }
!!!1211291.java!!!	setTimeZone(inout timezone : TimeZone) : void
        zone = timezone;
        areFieldsSet = false;
!!!1211419.java!!!	toString() : String
        StringBuilder result = new StringBuilder(getClass().getName() +
                "[time=" + (isTimeSet ? String.valueOf(time) : "?") +
                ",areFieldsSet=" + areFieldsSet +
                ",lenient=" + lenient +
                ",zone=" + zone.getID() +
                ",firstDayOfWeek=" + firstDayOfWeek +
                ",minimalDaysInFirstWeek=" + minimalDaysInFirstWeek);
        for (int i = 0; i < FIELD_COUNT; i++) {
            result.append(',');
            result.append(FIELD_NAMES[i]);
            result.append('=');
            if (isSet[i]) {
                result.append(fields[i]);
            } else {
                result.append('?');
            }
        }
        result.append(']');
        return result.toString();
!!!1211547.java!!!	compareTo(inout anotherCalendar : Calendar) : int
        if (anotherCalendar == null) {
            throw new NullPointerException("anotherCalendar == null");
        }
        long timeInMillis = getTimeInMillis();
        long anotherTimeInMillis = anotherCalendar.getTimeInMillis();
        if (timeInMillis > anotherTimeInMillis) {
            return 1;
        }
        if (timeInMillis == anotherTimeInMillis) {
            return 0;
        }
        return -1;
!!!1211675.java!!!	getDisplayName(in field : int, in style : int, inout locale : Locale) : String
        // TODO: the RI's documentation says ALL_STYLES is invalid, but actually treats it as SHORT.
        if (style == ALL_STYLES) {
            style = SHORT;
        }
        String[] array = getDisplayNameArray(field, style, locale);
        int value = get(field);
        return (array != null) ? array[value] : null;
!!!1211803.java!!!	getDisplayNameArray(in field : int, in style : int, inout locale : Locale) : String
        if (field < 0 || field >= FIELD_COUNT) {
            throw new IllegalArgumentException("bad field " + field);
        }
        checkStyle(style);
        DateFormatSymbols dfs = DateFormatSymbols.getInstance(locale);
        switch (field) {
        case AM_PM:
            return dfs.getAmPmStrings();
        case DAY_OF_WEEK:
            return (style == LONG) ? dfs.getWeekdays() : dfs.getShortWeekdays();
        case ERA:
            return dfs.getEras();
        case MONTH:
            return (style == LONG) ? dfs.getMonths() : dfs.getShortMonths();
        }
        return null;
!!!1211931.java!!!	checkStyle(in style : int) : void
        if (style != ALL_STYLES && style != SHORT && style != LONG) {
            throw new IllegalArgumentException("bad style " + style);
        }
!!!1212059.java!!!	getDisplayNames(in field : int, in style : int, inout locale : Locale) : Map
        checkStyle(style);
        complete();
        Map<String, Integer> result = new HashMap<String, Integer>();
        if (style == SHORT || style == ALL_STYLES) {
            insertValuesInMap(result, getDisplayNameArray(field, SHORT, locale));
        }
        if (style == LONG || style == ALL_STYLES) {
            insertValuesInMap(result, getDisplayNameArray(field, LONG, locale));
        }
        return result.isEmpty() ? null : result;
!!!1212187.java!!!	insertValuesInMap(inout map : Map, inout values : String) : void
        if (values == null) {
            return;
        }
        for (int i = 0; i < values.length; ++i) {
            if (values[i] != null && !values[i].isEmpty()) {
                map.put(values[i], i);
            }
        }
!!!1212315.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        complete();
        ObjectOutputStream.PutField putFields = stream.putFields();
        putFields.put("areFieldsSet", areFieldsSet);
        putFields.put("fields", this.fields);
        putFields.put("firstDayOfWeek", firstDayOfWeek);
        putFields.put("isSet", isSet);
        putFields.put("isTimeSet", isTimeSet);
        putFields.put("lenient", lenient);
        putFields.put("minimalDaysInFirstWeek", minimalDaysInFirstWeek);
        putFields.put("nextStamp", 2 /* MINIMUM_USER_STAMP */);
        putFields.put("serialVersionOnStream", 1);
        putFields.put("time", time);
        putFields.put("zone", zone);
        stream.writeFields();
!!!1212443.java!!!	readObject(inout stream : ObjectInputStream) : void
        ObjectInputStream.GetField readFields = stream.readFields();
        areFieldsSet = readFields.get("areFieldsSet", false);
        this.fields = (int[]) readFields.get("fields", null);
        firstDayOfWeek = readFields.get("firstDayOfWeek", Calendar.SUNDAY);
        isSet = (boolean[]) readFields.get("isSet", null);
        isTimeSet = readFields.get("isTimeSet", false);
        lenient = readFields.get("lenient", true);
        minimalDaysInFirstWeek = readFields.get("minimalDaysInFirstWeek", 1);
        time = readFields.get("time", 0L);
        zone = (TimeZone) readFields.get("zone", null);
