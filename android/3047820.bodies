class TvSettingProvider
!!!12579596.java!!!	onCreate() : boolean
        Log.d(TAG, "onCreate()");
        mTvDb = new TvSettingsHelp(getContext());

        // verify whether to open successfully
        mTvDb.getReadableDatabase();

        return true;
!!!12579724.java!!!	delete(inout uri : Uri, in selection : String, inout selectionArgs : String) : int
        if (mTvDb == null) {
            return 0;
        }
        Log.d(TAG, "delete");

        SQLiteDatabase db = mTvDb.getWritableDatabase();

        int count = 0;
        switch (sMatcher.match(uri)) {
            case PROPERTY_ITEM:
                count = db.delete(DB_TABLENAME, selection, selectionArgs);
                break;
            case PROPERTY_ITEM_ID:
                String id = uri.getPathSegments().get(1);
                count = db.delete(DB_TABLENAME, PROPERTY_ID + "=" + id + " AND (" +
                        selection + ")", selectionArgs);
                break;
            default:
                throw new IllegalArgumentException("Unknown URI" + uri);
        }

        getContext().getContentResolver().notifyChange(uri, null);
        return count;
!!!12579852.java!!!	getType(inout arg0 : Uri) : String
        switch (sMatcher.match(arg0)) {
            case PROPERTY_ITEM:
                return "vnd.android.cursor.dir/" + AUTHRIOTY;
            case PROPERTY_ITEM_ID:
                return "vnd.android.cursor.item/" + AUTHRIOTY;
            default:
                throw new IllegalArgumentException("Unknown URI" + arg0);
        }
!!!12579980.java!!!	insert(inout uri : Uri, inout values : ContentValues) : Uri
        if (mTvDb == null) {
            return null;
        }
        Log.d(TAG, "insert");

        if (sMatcher.match(uri) != PROPERTY_ITEM)
        {
            throw new IllegalArgumentException("Unkown URI" + uri);
        }

        SQLiteDatabase db = mTvDb.getWritableDatabase();
        long rowId = db.insert(DB_TABLENAME, null, values);
        if (rowId > 0) {
            Uri insertedUserUri = ContentUris.withAppendedId(CONTENT_URI, rowId);
            getContext().getContentResolver().notifyChange(insertedUserUri, null);
            return insertedUserUri;
        }
        throw new SQLException("Failed to insert row into " + uri);
!!!12580108.java!!!	query(inout uri : Uri, inout projection : String, in selection : String, inout selectionArgs : String, in sortOrder : String) : Cursor
        SQLiteDatabase db = mTvDb.getReadableDatabase();
        Cursor cursor;
        switch (sMatcher.match(uri))
        {
            case PROPERTY_ITEM:
                cursor = db.query(DB_TABLENAME, projection, selection, selectionArgs, null, null,
                        sortOrder);
                break;
            case PROPERTY_ITEM_ID:
                String id = uri.getPathSegments().get(1);
                cursor = db.query(DB_TABLENAME, projection, PROPERTY_ID + "=" + id + " AND (" +
                        selection + ")", selectionArgs, null, null, sortOrder);
                break;
            default:
                throw new IllegalArgumentException("Unkonw URI" + uri);
        }
        cursor.setNotificationUri(getContext().getContentResolver(), uri);// @1
        return cursor;
!!!12580236.java!!!	update(inout uri : Uri, inout values : ContentValues, in selection : String, inout selectionArgs : String) : int
        int count = 0;
        SQLiteDatabase db = mTvDb.getWritableDatabase();
        switch (sMatcher.match(uri))
        {
            case PROPERTY_ITEM:
                count = db.update(DB_TABLENAME, values, selection, selectionArgs);
                break;
            case PROPERTY_ITEM_ID:
                String id = uri.getPathSegments().get(1);
                count = db.update(DB_TABLENAME, values, PROPERTY_ID + "=" + id + " AND (" +
                        selection + ")", selectionArgs);
                break;
            default:
                throw new IllegalArgumentException("Unkonw URI" + uri);
        }
        getContext().getContentResolver().notifyChange(uri, null);// @2
        return count;
