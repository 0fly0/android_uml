class DateTimeSettingsActivity
!!!12321420.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);

        addPreferencesFromResource(R.xml.date_time_prefs);

        initUI();
!!!12321548.java!!!	initUI() : void
        boolean autoEnabled = getAutoState();

        mDummyDate = Calendar.getInstance();
        mDummyDate.set(mDummyDate.get(Calendar.YEAR), 0, 31, 13, 0, 0);

        mAutoPref = (CheckBoxPreference) findPreference(KEY_AUTO_TIME);
        mAutoPref.setChecked(autoEnabled);
        mTimePref = findPreference("time");
        mTime24Pref = findPreference("24 hour");
        mTimeZone = findPreference("timezone");
        mDatePref = findPreference("date");
        mDateFormat = (ListPreference) findPreference(KEY_DATE_FORMAT);

        String[] dateFormats = getResources().getStringArray(
                R.array.date_format_values);
        String[] formattedDates = new String[dateFormats.length];
        String currentFormat = getDateFormat();
        // Initialize if DATE_FORMAT is not set in the system settings
        // This can happen after a factory reset (or data wipe)
        if (currentFormat == null) {
            currentFormat = "";
        }
        for (int i = 0; i < formattedDates.length; i++) {
            // USDTV: port API here because getDateFormatForSetting is hidden
            String formatted = getDateFormatForSetting(this, dateFormats[i]).
                    format(mDummyDate.getTime());

            if (dateFormats[i].length() == 0) {
                formattedDates[i] = getResources().
                        getString(R.string.normal_date_format, formatted);
            } else {
                formattedDates[i] = formatted;
            }
        }

        mDateFormat.setEntries(formattedDates);
        mDateFormat.setEntryValues(R.array.date_format_values);
        mDateFormat.setValue(currentFormat);

        mTimePref.setEnabled(!autoEnabled);
        mDatePref.setEnabled(!autoEnabled);

        setupCountryPreference();

        mLocationPref = findPreference(KEY_LOCATION);
        if (getResources().getBoolean(R.bool.ask_for_zip_code)) {
            updateLocationSummary();
        } else {
            ((PreferenceCategory) findPreference(KEY_LOCATION_SECTION)).
                    removePreference(mLocationPref);
        }
!!!12321676.java!!!	setupCountryPreference() : void
        final ArrayAdapter<CountryInfo> adapter = CountryPicker.constructAdapter(this);
        final int countryCount = adapter.getCount();

        mCountryPref = (ListPreference) findPreference(KEY_COUNTRY);
        if (countryCount > 1) {
            final String[] countryCodes = new String[countryCount];
            final String[] countryNames = new String[countryCount];
            final String currentCountryCode = CountryPicker.getCountryCode();
            int currentCountryIndex = -1;

            for (int index = 0; index < countryCount; index++) {
                final CountryInfo info = adapter.getItem(index);
                countryNames[index] = info.getName();
                countryCodes[index] = info.getCode();
                if (currentCountryIndex < 0 && currentCountryCode.equals(countryCodes[index])) {
                    currentCountryIndex = index;
                }
            }

            mCountryPref.setEntries(countryNames);
            mCountryPref.setEntryValues(countryCodes);
            mCountryPref.setValueIndex(currentCountryIndex);
            mCountryPref.setOnPreferenceChangeListener(new OnPreferenceChangeListener() {
                @Override
                public boolean onPreferenceChange(Preference preference, Object newValue) {
                    final String newCountryCode = (String) newValue;
                    CountryPicker.updateCountryOverride(newCountryCode);
                    setCountryPreferenceSummary(
                    countryNames[mCountryPref.findIndexOfValue(newCountryCode)]);
                    return true;
                }
            });
            if (currentCountryIndex >= 0) {
                setCountryPreferenceSummary(countryNames[currentCountryIndex]);
            }
        } else {
            if (countryCount == 1) {
                setCountryPreferenceSummary(adapter.getItem(0).getName());
            }
            mCountryPref.setEnabled(false);
        }
!!!12321804.java!!!	setCountryPreferenceSummary(in countryName : String) : void
        if (mCountryPref != null) {
            if (!TextUtils.isEmpty(countryName)) {
                mCountryPref.setSummary(countryName);
            } else {
                mCountryPref.setSummary("");
            }
        }
!!!12321932.java!!!	onResume() : void
        super.onResume();

        getPreferenceScreen().getSharedPreferences()
                .registerOnSharedPreferenceChangeListener(this);

        ((CheckBoxPreference) mTime24Pref).setChecked(is24Hour());

        // Register for time ticks and other reasons for time change
        IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_TIME_TICK);
        filter.addAction(Intent.ACTION_TIME_CHANGED);
        filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
        registerReceiver(mIntentReceiver, filter, null, null);

        IntentFilter connectivityFilter = new IntentFilter();
        connectivityFilter.addAction(ConnectivityManager.CONNECTIVITY_ACTION);
        registerReceiver(mConnectivityReceiver, connectivityFilter);

        updateTimeAndDateDisplay();
        updateAutoTimeSettingSummary();
!!!12322060.java!!!	onPreparePanel(in featureId : int, inout view : View, inout menu : Menu) : boolean
        // TODO Auto-generated method stub
        return false;
!!!12322188.java!!!	onPause() : void
        super.onPause();
        unregisterReceiver(mIntentReceiver);
        unregisterReceiver(mConnectivityReceiver);
        getPreferenceScreen().getSharedPreferences()
                .unregisterOnSharedPreferenceChangeListener(this);
!!!12322316.java!!!	updateTimeAndDateDisplay() : void
        java.text.DateFormat shortDateFormat = DateFormat.getDateFormat(this);
        Date now = Calendar.getInstance().getTime();
        Date dummyDate = mDummyDate.getTime();
        mTimePref.setSummary(DateFormat.getTimeFormat(this).format(now));
        mTimeZone.setSummary(getTimeZoneText());
        mDatePref.setSummary(shortDateFormat.format(now));
        mDateFormat.setSummary(shortDateFormat.format(dummyDate));
!!!12322444.java!!!	onDateSet(inout view : DatePicker, in year : int, in month : int, in day : int) : void
        // This is to fix UI distortion by a little long update time.
        removeDialog(DIALOG_DATEPICKER);

        Calendar c = Calendar.getInstance();

        c.set(Calendar.YEAR, year);
        c.set(Calendar.MONTH, month);
        c.set(Calendar.DAY_OF_MONTH, day);
        long when = c.getTimeInMillis();

        if (when / 1000 < Integer.MAX_VALUE) {
            SystemClock.setCurrentTimeMillis(when);
        }
        updateTimeAndDateDisplay();
!!!12322572.java!!!	onTimeSet(inout view : TimePicker, in hourOfDay : int, in minute : int) : void
        // This is to fix UI distortion by a little long update time.
        removeDialog(DIALOG_TIMEPICKER);

        Calendar c = Calendar.getInstance();

        c.set(Calendar.HOUR_OF_DAY, hourOfDay);
        c.set(Calendar.MINUTE, minute);
        c.set(Calendar.SECOND, 0); // Zero out the seconds when setting.
        long when = c.getTimeInMillis();

        if (when / 1000 < Integer.MAX_VALUE) {
            SystemClock.setCurrentTimeMillis(when);
        }
        updateTimeAndDateDisplay();

        // We don't need to call timeUpdated() here because the TIME_CHANGED
        // broadcast is sent by the AlarmManager as a side effect of setting the
        // SystemClock time.
!!!12322700.java!!!	onLocationSet(in location : String) : void
        if (location != null) {
            location.trim();
            Settings.Secure.putString(this.getContentResolver(),
                    Utils.LOCATION_LINEUP_LOOKUP, location);
            updateLocationSummary();

            // Now, take this ZIP and set the time zone, if necessary.
            String timeZoneId = getTimeZoneId(location);
            if (!TextUtils.isEmpty(timeZoneId)) {
                AlarmManager alarm = (AlarmManager) getSystemService(
                        Context.ALARM_SERVICE);
                alarm.setTimeZone(timeZoneId);
            }
        }
!!!12322828.java!!!	getTimeZoneId(in zip : String) : String
        Uri contentUri = Uri.parse(TIME_ZONE_URI + zip);
        Cursor c = null;
        String returnValue = null;
        try {
            c = getContentResolver().query(contentUri, null, null, null, null);
            if (c != null && c.moveToNext()) {
                returnValue = c.getString(0);
            }
        } finally {
            if (c != null) {
                c.close();
            }
        }
        return returnValue;
!!!12322956.java!!!	onSharedPreferenceChanged(inout preferences : SharedPreferences, in key : String) : void
        if (key.equals(KEY_DATE_FORMAT)) {
            String format = preferences.getString(key,
                    getResources().getString(R.string.default_date_format));
            Settings.System.putString(getContentResolver(),
                    Settings.System.DATE_FORMAT, format);
            updateTimeAndDateDisplay();
        } else if (key.equals(KEY_AUTO_TIME)) {
            boolean autoEnabled = preferences.getBoolean(key, true);
            Settings.Global.putInt(getContentResolver(),
                    Settings.Global.AUTO_TIME,
                    autoEnabled ? 1 : 0);

            // USDTV: get DTV STT time if automatic is on but network time is
            // not available
            if (autoEnabled) {
                Wrapper.getWrapperInstance().runInNonUiThread(new Runnable() {
                    @Override
                    public void run() {
                        long time = getNtpTime();
                        if (time <= 0) {
                            setTVTime();
                        }
                    }
                }, 0);
            }

            mTimePref.setEnabled(!autoEnabled);
            mDatePref.setEnabled(!autoEnabled);
        }
!!!12323084.java!!!	onCreateDialog(in id : int) : Dialog
        Dialog d;

        switch (id) {
            case DIALOG_DATEPICKER: {
                final Calendar calendar = Calendar.getInstance();
                d = new DatePickerDialog(
                        this,
                        this,
                        calendar.get(Calendar.YEAR),
                        calendar.get(Calendar.MONTH),
                        calendar.get(Calendar.DAY_OF_MONTH));
                d.setTitle(getResources().getString(
                        R.string.date_time_changeDate_text));
                break;
            }
            case DIALOG_TIMEPICKER: {
                final Calendar calendar = Calendar.getInstance();
                d = new TimePickerDialog(
                        this,
                        this,
                        calendar.get(Calendar.HOUR_OF_DAY),
                        calendar.get(Calendar.MINUTE),
                        DateFormat.is24HourFormat(this));
                d.setTitle(getResources().getString(
                        R.string.date_time_changeTime_text));
                break;
            }
            case DIALOG_LOCATION_SETTER: {
                mLocationSetter = new LocationSetterDialog(this, this);
                return mLocationSetter;
            }
            default:
                d = null;
                break;
        }

        return d;
!!!12323212.java!!!	onPrepareDialog(in id : int, inout d : Dialog) : void
        switch (id) {
            case DIALOG_DATEPICKER: {
                DatePickerDialog datePicker = (DatePickerDialog) d;
                final Calendar calendar = Calendar.getInstance();
                datePicker.updateDate(
                        calendar.get(Calendar.YEAR),
                        calendar.get(Calendar.MONTH),
                        calendar.get(Calendar.DAY_OF_MONTH));
                break;
            }
            case DIALOG_TIMEPICKER: {
                TimePickerDialog timePicker = (TimePickerDialog) d;
                final Calendar calendar = Calendar.getInstance();
                timePicker.updateTime(
                        calendar.get(Calendar.HOUR_OF_DAY),
                        calendar.get(Calendar.MINUTE));
                break;
            }
            case DIALOG_LOCATION_SETTER: {
                mLocationSetter.setLocation(getZipCode());
                break;
            }
            default:
                break;
        }
!!!12323340.java!!!	onPreferenceTreeClick(inout preferenceScreen : PreferenceScreen, inout preference : Preference) : boolean
        if (preference == mDatePref) {
            showDialog(DIALOG_DATEPICKER);
        } else if (preference == mTimePref) {
            // The 24-hour mode may have changed, so recreate the dialog
            removeDialog(DIALOG_TIMEPICKER);
            showDialog(DIALOG_TIMEPICKER);
        } else if (preference == mTime24Pref) {
            set24Hour(((CheckBoxPreference) mTime24Pref).isChecked());
            updateTimeAndDateDisplay();
            timeUpdated();
        } else if (preference == mTimeZone) {
            Intent intent = new Intent(TvIntents.ACTION_SHOW_ZONELIST);
            startActivityForResult(intent, 0);
            hideSelf(true);
        } else if (preference == mLocationPref) {
            showDialog(DIALOG_LOCATION_SETTER);
        }
        return false;
!!!12323468.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        hideSelf(false);
        if (resultCode == RESULT_OK) {
            setTimeZoneAndDST();
        }
        updateTimeAndDateDisplay();
!!!12323596.java!!!	timeUpdated() : void
        Intent timeChanged = new Intent(Intent.ACTION_TIME_CHANGED);
        sendBroadcast(timeChanged);
!!!12323724.java!!!	is24Hour() : boolean
        return DateFormat.is24HourFormat(this);
!!!12323852.java!!!	set24Hour(inout is24Hour : boolean) : void
        Settings.System.putString(getContentResolver(),
                Settings.System.TIME_12_24,
                is24Hour ? HOURS_24 : HOURS_12);
!!!12323980.java!!!	getDateFormat() : String
        return Settings.System.getString(getContentResolver(),
                Settings.System.DATE_FORMAT);
!!!12324108.java!!!	getAutoState() : boolean
        try {
            return Settings.Global.getInt(getContentResolver(),
                    Settings.Global.AUTO_TIME) > 0;
        } catch (SettingNotFoundException snfe) {
            return true;
        }
!!!12324236.java!!!	getTimeZoneText() : String
        TimeZone tz = java.util.Calendar.getInstance().getTimeZone();
        boolean daylight = tz.inDaylightTime(new Date());
        StringBuilder sb = new StringBuilder();

        sb.append(formatOffset(tz.getRawOffset() +
                (daylight ? tz.getDSTSavings() : 0))).
                append(", ").
                append(tz.getDisplayName(daylight, TimeZone.LONG));

        return sb.toString();
!!!12324364.java!!!	formatOffset(in off : int) : char
        off = off / 1000 / 60;

        char[] buf = new char[9];
        buf[0] = 'G';
        buf[1] = 'M';
        buf[2] = 'T';

        if (off < 0) {
            buf[3] = '-';
            off = -off;
        } else {
            buf[3] = '+';
        }

        int hours = off / 60;
        int minutes = off % 60;

        buf[4] = (char) ('0' + hours / 10);
        buf[5] = (char) ('0' + hours % 10);

        buf[6] = ':';

        buf[7] = (char) ('0' + minutes / 10);
        buf[8] = (char) ('0' + minutes % 10);

        return buf;
!!!12324492.java!!!	updateLocationSummary() : void
        mLocationPref.setSummary(getZipCode());
!!!12324620.java!!!	updateAutoTimeSettingSummary() : void
        ConnectivityManager manager = (ConnectivityManager) getSystemService(
                CONNECTIVITY_SERVICE);
        NetworkInfo info = manager.getActiveNetworkInfo();
        boolean connected = info != null && info.isConnectedOrConnecting();
        mAutoPref.setSummaryOn(connected ? R.string.date_time_auto_summary :
                R.string.date_time_auto_summary_not_connected);
!!!12324748.java!!!	getZipCode() : String
        String zipCode = Settings.Secure.getString(this.getContentResolver(),
                Utils.LOCATION_LINEUP_LOOKUP);
        return zipCode;
!!!12324876.java!!!	hideSelf(inout hide : boolean) : void
        WindowManager.LayoutParams lp = this.getWindow().getAttributes();
        if (hide) {
            lp.alpha = 0f;
        } else {
            lp.alpha = 1f;
        }
        this.getWindow().setAttributes(lp);
!!!12325004.java!!!	getNtpServerAddress() : String
        String serverAddress = null;
        FileInputStream stream = null;
        final String PROPERTIES_FILE = "/etc/gps.conf";

        try {
            Properties properties = new Properties();
            File file = new File(PROPERTIES_FILE);
            stream = new FileInputStream(file);
            properties.load(stream);
            serverAddress = properties.getProperty("NTP_SERVER", null);
        } catch (IOException e) {
            Log.e("", "Could not open GPS configuration file " + PROPERTIES_FILE);
        } finally {
            if (stream != null) {
                try {
                    stream.close();
                } catch (Exception e) {
                }
            }
        }
        return serverAddress;
!!!12325132.java!!!	getNtpTime() : long
        Class<?> client = Utils.getClassTypeByClassName("android.net.SntpClient");
        Object obj = Utils.createObjectByClass("android.net.SntpClient");
        try {
            Method requestTime = client.getMethod("requestTime", new Class[] {
                    String.class, int.class
            });
            boolean isSuccess = (Boolean) requestTime.invoke(obj, new Object[] {
                    getNtpServerAddress(), MAX_NTP_FETCH_WAIT_MS
            });
            if (isSuccess) {
                Method getNtpTime = client.getMethod("getNtpTime");
                return (Long) getNtpTime.invoke(obj);
            } else {
                return 0;
            }

        } catch (Exception e) {
            Log.w(TAG, "invokeStaticMethod reflection exception " + e);
        }
        return 0;
!!!12325260.java!!!	setTVTime() : void
        if (Wrapper.getWrapperInstance().isDigitalChannel()) {
            USDTVCurrentTime currentTime = TvFramework.getInstance().getSystemInstance()
                    .getCurrentTime();
            Message msg = new Message();
            msg.obj = currentTime;
            mHandler.sendMessage(msg);
        }
!!!12325388.java!!!	setTimeZoneAndDST() : void
        SystemSettings mSystemInstance = TvFramework.getInstance().getSystemInstance();
        USDTVTimeSettings timeSettings = mSystemInstance.getCurrentTimeSettings();
        if (timeSettings != null) {
            String timeZoneId = Calendar.getInstance().getTimeZone().getID();
            SetupEnumClass.TimeZones timezoneId = timeZoneMap.get(timeZoneId);
            Log.d(TAG, "timezoneId=" + timezoneId);
            if (timezoneId != null) {
                timeSettings.setTimeZone(timezoneId.ordinal());
            }
            timeSettings.setDstOn(false);
            mSystemInstance.setCurrentTimeSettings(timeSettings);
        }
!!!12325516.java!!!	getDateFormatForSetting(inout context : Context, in value : String) : java.text.DateFormat

        String format = getDateFormatStringForSetting(context, value);

        return new java.text.SimpleDateFormat(format);
!!!12325644.java!!!	getDateFormatStringForSetting(inout context : Context, in value : String) : String
        if (value != null) {
            int month = value.indexOf('M');
            int day = value.indexOf('d');
            int year = value.indexOf('y');

            if (month >= 0 && day >= 0 && year >= 0) {
                String template = NUMERIC_DATE_TEMPLATE;
                if (year < month && year < day) {
                    if (month < day) {
                        value = String.format(template, "yyyy", "MM", "dd");
                    } else {
                        value = String.format(template, "yyyy", "dd", "MM");
                    }
                } else if (month < day) {
                    if (day < year) {
                        value = String.format(template, "MM", "dd", "yyyy");
                    } else { // unlikely
                        value = String.format(template, "MM", "yyyy", "dd");
                    }
                } else { // day < month
                    if (month < year) {
                        value = String.format(template, "dd", "MM", "yyyy");
                    } else { // unlikely
                        value = String.format(template, "dd", "yyyy", "MM");
                    }
                }

                return value;
            }
        }

        /*
         * The setting is not set; use the default. We use a resource string
         * here instead of just DateFormat.SHORT so that we get a four-digit
         * year instead a two-digit year.
         */
        value = String.format(NUMERIC_DATE_TEMPLATE, "M", "dd", "yyyy");
        return value;
