class MediaDevicesActions
!!!13230860.java!!!	lookupAction(inout event : KeyEvent) : Action
        Action action = null;

        // Check for unshifted or shifted characters.
        if (event.hasNoModifiers() || event.hasModifiers(KeyEvent.META_SHIFT_ON)) {
            int unicodeChar = event.getUnicodeChar(event.getMetaState());
            action = CHAR_ACTION_MAP.get(unicodeChar);
        }

        if (action == null) {
            if (event.hasModifiers(KeyEvent.META_ALT_ON)) {
                action = ALT_KEY_ACTION_MAP.get(event.getKeyCode());
            } else if (event.hasNoModifiers()) {
                action = KEY_ACTION_MAP.get(event.getKeyCode());
                if (action == null && event.isNumLockOn()) {
                    action = NUM_LOCK_KEY_ACTION_MAP.get(event.getKeyCode());
                }
            }
        }

        return action;
!!!13230988.java!!!	createKeyActionMap() : SparseArray
        SparseArray<Action> map = new SparseArray<Action>();
        map.put(KeyEvent.KEYCODE_DPAD_UP, Action.UP);
        map.put(KeyEvent.KEYCODE_DPAD_DOWN, Action.DOWN);
        map.put(KeyEvent.KEYCODE_DPAD_LEFT, Action.LEFT);
        map.put(KeyEvent.KEYCODE_DPAD_RIGHT, Action.RIGHT);
        map.put(KeyEvent.KEYCODE_DPAD_CENTER, Action.SELECT);
        map.put(KeyEvent.KEYCODE_ENTER, Action.SELECT);
        map.put(KeyEvent.KEYCODE_ESCAPE, Action.CANCEL);
        map.put(KeyEvent.KEYCODE_CHANNEL_UP, Action.CHANNEL_UP);
        map.put(KeyEvent.KEYCODE_CHANNEL_DOWN, Action.CHANNEL_DOWN);
        map.put(KeyEvent.KEYCODE_PAGE_UP, Action.PAGE_UP);
        map.put(KeyEvent.KEYCODE_PAGE_DOWN, Action.PAGE_DOWN);
        map.put(KeyEvent.KEYCODE_0, Action.NUM_0);
        map.put(KeyEvent.KEYCODE_1, Action.NUM_1);
        map.put(KeyEvent.KEYCODE_2, Action.NUM_2);
        map.put(KeyEvent.KEYCODE_3, Action.NUM_3);
        map.put(KeyEvent.KEYCODE_4, Action.NUM_4);
        map.put(KeyEvent.KEYCODE_5, Action.NUM_5);
        map.put(KeyEvent.KEYCODE_6, Action.NUM_6);
        map.put(KeyEvent.KEYCODE_7, Action.NUM_7);
        map.put(KeyEvent.KEYCODE_8, Action.NUM_8);
        map.put(KeyEvent.KEYCODE_9, Action.NUM_9);
        map.put(KeyEvent.KEYCODE_PERIOD, Action.DELIMITER_PERIOD);
        map.put(KeyEvent.KEYCODE_MINUS, Action.DELIMITER_DASH);
        map.put(KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE, Action.PLAY_PAUSE);
        map.put(KeyEvent.KEYCODE_MEDIA_STOP, Action.STOP);
        map.put(KeyEvent.KEYCODE_MEDIA_FAST_FORWARD, Action.FAST_FORWARD);
        map.put(KeyEvent.KEYCODE_MEDIA_REWIND, Action.REWIND);
        map.put(KeyEvent.KEYCODE_MEDIA_NEXT, Action.SKIP_FORWARD);
        map.put(KeyEvent.KEYCODE_MEDIA_PREVIOUS, Action.SKIP_BACK);
        map.put(KeyEvent.KEYCODE_MEDIA_RECORD, Action.RECORD);
        map.put(KeyEvent.KEYCODE_MEDIA_PLAY, Action.PLAY);
        map.put(KeyEvent.KEYCODE_MEDIA_PAUSE, Action.PAUSE);
        map.put(KeyEvent.KEYCODE_MEDIA_EJECT, Action.EJECT);
        map.put(KeyEvent.KEYCODE_INFO, Action.INFO);
        map.put(KeyEvent.KEYCODE_PROG_BLUE, Action.PROG_BLUE);
        map.put(KeyEvent.KEYCODE_PROG_GREEN, Action.PROG_GREEN);
        map.put(KeyEvent.KEYCODE_PROG_RED, Action.PROG_RED);
        map.put(KeyEvent.KEYCODE_PROG_YELLOW, Action.PROG_YELLOW);
        map.put(KeyEvent.KEYCODE_CAPTIONS, Action.CAPTIONS);
        map.put(KeyEvent.KEYCODE_POUND, Action.SYMBOL_POUND);
        map.put(KeyEvent.KEYCODE_STAR, Action.SYMBOL_ASTERISK);
        map.put(KeyEvent.KEYCODE_TAB, Action.RECALL);
        map.put(KeyEvent.KEYCODE_DEL, Action.DELETE);
        map.put(KeyEvent.KEYCODE_NUMPAD_ENTER, Action.SELECT);
        map.put(KeyEvent.KEYCODE_NUMPAD_MULTIPLY, Action.SYMBOL_ASTERISK);
        map.put(KeyEvent.KEYCODE_NUMPAD_SUBTRACT, Action.DELIMITER_DASH);
        map.put(KeyEvent.KEYCODE_UNKNOWN, Action.GENERIC);
        return map;
!!!13231116.java!!!	createAltKeyActionMap() : SparseArray
        SparseArray<Action> map = new SparseArray<Action>();
        map.put(KeyEvent.KEYCODE_MEDIA_FAST_FORWARD, Action.SKIP_FORWARD);
        map.put(KeyEvent.KEYCODE_MEDIA_REWIND, Action.SKIP_BACK);
        map.put(KeyEvent.KEYCODE_PAGE_UP, Action.CHANNEL_UP);
        map.put(KeyEvent.KEYCODE_PAGE_DOWN, Action.CHANNEL_DOWN);
        return map;
!!!13231244.java!!!	createCharActionMap() : SparseArray
        SparseArray<Action> map = new SparseArray<Action>();
        map.put(UNICODE_CHAR_POUND, Action.SYMBOL_POUND);
        map.put(UNICODE_CHAR_ASTERISK, Action.SYMBOL_ASTERISK);
        // NOTE: Mappings for additional characters can be added here as
        // needed to support new controller types.
        return map;
!!!13231372.java!!!	createNumLockKeyActionMap() : SparseArray
        SparseArray<Action> map = new SparseArray<Action>();
        map.put(KeyEvent.KEYCODE_NUMPAD_0, Action.NUM_0);
        map.put(KeyEvent.KEYCODE_NUMPAD_1, Action.NUM_1);
        map.put(KeyEvent.KEYCODE_NUMPAD_2, Action.NUM_2);
        map.put(KeyEvent.KEYCODE_NUMPAD_3, Action.NUM_3);
        map.put(KeyEvent.KEYCODE_NUMPAD_4, Action.NUM_4);
        map.put(KeyEvent.KEYCODE_NUMPAD_5, Action.NUM_5);
        map.put(KeyEvent.KEYCODE_NUMPAD_6, Action.NUM_6);
        map.put(KeyEvent.KEYCODE_NUMPAD_7, Action.NUM_7);
        map.put(KeyEvent.KEYCODE_NUMPAD_8, Action.NUM_8);
        map.put(KeyEvent.KEYCODE_NUMPAD_9, Action.NUM_9);
        map.put(KeyEvent.KEYCODE_NUMPAD_DOT, Action.DELIMITER_PERIOD);
        return map;
!!!13231500.java!!!	lookupKeyEventInternal(in keyEventFieldName : String, in defaultValue : int) : int
        try {
            Field field = KeyEvent.class.getField(keyEventFieldName);
            if (field != null) {
                return (Integer) field.get(null);
            }
        } catch (Exception e) {
            Log.w(LOG_TAG, "Failed to access field "+ keyEventFieldName, e);
        }
        return defaultValue;
