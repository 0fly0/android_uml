class DrmPassthruPlugIn
!!!178060.cpp!!!	DrmPassthruPlugIn()

!!!178188.cpp!!!	~DrmPassthruPlugIn()

!!!178316.cpp!!!	onGetConstraints(in uniqueId : int, in path : String8, in action : int) : DrmConstraints
    ALOGV("DrmPassthruPlugIn::onGetConstraints From Path: %d", uniqueId);
    DrmConstraints* drmConstraints = new DrmConstraints();

    String8 value("dummy_available_time");
    char* charValue = NULL;
    charValue = new char[value.length() + 1];
    strncpy(charValue, value.string(), value.length());

    //Just add dummy available time for verification
    drmConstraints->put(&(DrmConstraints::LICENSE_AVAILABLE_TIME), charValue);

    return drmConstraints;
!!!178444.cpp!!!	onGetMetadata(in uniqueId : int, in path : String8) : DrmMetadata
    return NULL;
!!!178572.cpp!!!	onInitialize(in uniqueId : int) : status_t
    ALOGV("DrmPassthruPlugIn::onInitialize : %d", uniqueId);
    return DRM_NO_ERROR;
!!!178700.cpp!!!	onSetOnInfoListener(in uniqueId : int, in infoListener : OnInfoListener) : status_t
    ALOGV("DrmPassthruPlugIn::onSetOnInfoListener : %d", uniqueId);
    return DRM_NO_ERROR;
!!!178828.cpp!!!	onTerminate(in uniqueId : int) : status_t
    ALOGV("DrmPassthruPlugIn::onTerminate : %d", uniqueId);
    return DRM_NO_ERROR;
!!!178956.cpp!!!	onCanHandle(in uniqueId : int, in path : String8) : bool
    ALOGV("DrmPassthruPlugIn::canHandle: %s ", path.string());
    String8 extension = path.getPathExtension();
    extension.toLower();
    return (String8(".passthru") == extension);
!!!179084.cpp!!!	onProcessDrmInfo(in uniqueId : int, in drmInfo : DrmInfo) : DrmInfoStatus
    ALOGV("DrmPassthruPlugIn::onProcessDrmInfo - Enter : %d", uniqueId);
    DrmInfoStatus* drmInfoStatus = NULL;
    if (NULL != drmInfo) {
        switch (drmInfo->getInfoType()) {
        case DrmInfoRequest::TYPE_REGISTRATION_INFO: {
            const DrmBuffer* emptyBuffer = new DrmBuffer();
            drmInfoStatus = new DrmInfoStatus(DrmInfoStatus::STATUS_OK,
                    DrmInfoRequest::TYPE_REGISTRATION_INFO, emptyBuffer, drmInfo->getMimeType());
            break;
        }
        case DrmInfoRequest::TYPE_UNREGISTRATION_INFO: {
            const DrmBuffer* emptyBuffer = new DrmBuffer();
            drmInfoStatus = new DrmInfoStatus(DrmInfoStatus::STATUS_OK,
                    DrmInfoRequest::TYPE_UNREGISTRATION_INFO, emptyBuffer, drmInfo->getMimeType());
            break;
        }
        case DrmInfoRequest::TYPE_RIGHTS_ACQUISITION_INFO: {
            String8 licenseString("dummy_license_string");
            const int bufferSize = licenseString.size();
            char* data = NULL;
            data = new char[bufferSize];
            memcpy(data, licenseString.string(), bufferSize);
            const DrmBuffer* buffer = new DrmBuffer(data, bufferSize);
            drmInfoStatus = new DrmInfoStatus(DrmInfoStatus::STATUS_OK,
                    DrmInfoRequest::TYPE_RIGHTS_ACQUISITION_INFO, buffer, drmInfo->getMimeType());
            break;
        }
        }
    }
    ALOGV("DrmPassthruPlugIn::onProcessDrmInfo - Exit");
    return drmInfoStatus;
!!!179212.cpp!!!	onSaveRights(in uniqueId : int, in drmRights : DrmRights, in rightsPath : String8, in contentPath : String8) : status_t
    ALOGV("DrmPassthruPlugIn::onSaveRights : %d", uniqueId);
    return DRM_NO_ERROR;
!!!179340.cpp!!!	onAcquireDrmInfo(in uniqueId : int, in drmInfoRequest : DrmInfoRequest) : DrmInfo
    ALOGV("DrmPassthruPlugIn::onAcquireDrmInfo : %d", uniqueId);
    DrmInfo* drmInfo = NULL;

    if (NULL != drmInfoRequest) {
        String8 dataString("dummy_acquistion_string");
        int length = dataString.length();
        char* data = NULL;
        data = new char[length];
        memcpy(data, dataString.string(), length);
        drmInfo = new DrmInfo(drmInfoRequest->getInfoType(),
            DrmBuffer(data, length), drmInfoRequest->getMimeType());
    }
    return drmInfo;
!!!179468.cpp!!!	onGetOriginalMimeType(in uniqueId : int, in path : String8, in fd : int) : String8
    ALOGV("DrmPassthruPlugIn::onGetOriginalMimeType() : %d", uniqueId);
    return String8("video/passthru");
!!!179596.cpp!!!	onGetDrmObjectType(in uniqueId : int, in path : String8, in mimeType : String8) : int
    ALOGV("DrmPassthruPlugIn::onGetDrmObjectType() : %d", uniqueId);
    return DrmObjectType::UNKNOWN;
!!!179724.cpp!!!	onCheckRightsStatus(in uniqueId : int, in path : String8, in action : int) : int
    ALOGV("DrmPassthruPlugIn::onCheckRightsStatus() : %d", uniqueId);
    int rightsStatus = RightsStatus::RIGHTS_VALID;
    return rightsStatus;
!!!179852.cpp!!!	onConsumeRights(in uniqueId : int, inout decryptHandle : DecryptHandle, in action : int, in reserve : bool) : status_t
    ALOGV("DrmPassthruPlugIn::onConsumeRights() : %d", uniqueId);
    return DRM_NO_ERROR;
!!!179980.cpp!!!	onSetPlaybackStatus(in uniqueId : int, inout decryptHandle : DecryptHandle, in playbackStatus : int, in position : int64_t) : status_t
    ALOGV("DrmPassthruPlugIn::onSetPlaybackStatus() : %d", uniqueId);
    return DRM_NO_ERROR;
!!!180108.cpp!!!	onValidateAction(in uniqueId : int, in path : String8, in action : int, in description : ActionDescription) : bool
    ALOGV("DrmPassthruPlugIn::onValidateAction() : %d", uniqueId);
    return true;
!!!180236.cpp!!!	onRemoveRights(in uniqueId : int, in path : String8) : status_t
    ALOGV("DrmPassthruPlugIn::onRemoveRights() : %d", uniqueId);
    return DRM_NO_ERROR;
!!!180364.cpp!!!	onRemoveAllRights(in uniqueId : int) : status_t
    ALOGV("DrmPassthruPlugIn::onRemoveAllRights() : %d", uniqueId);
    return DRM_NO_ERROR;
!!!180492.cpp!!!	onOpenConvertSession(in uniqueId : int, in convertId : int) : status_t
    ALOGV("DrmPassthruPlugIn::onOpenConvertSession() : %d", uniqueId);
    return DRM_NO_ERROR;
!!!180620.cpp!!!	onConvertData(in uniqueId : int, in convertId : int, in inputData : DrmBuffer) : DrmConvertedStatus
    ALOGV("DrmPassthruPlugIn::onConvertData() : %d", uniqueId);
    DrmBuffer* convertedData = NULL;

    if (NULL != inputData && 0 < inputData->length) {
        int length = inputData->length;
        char* data = NULL;
        data = new char[length];
        convertedData = new DrmBuffer(data, length);
        memcpy(convertedData->data, inputData->data, length);
    }
    return new DrmConvertedStatus(DrmConvertedStatus::STATUS_OK, convertedData, 0 /*offset*/);
!!!180748.cpp!!!	onCloseConvertSession(in uniqueId : int, in convertId : int) : DrmConvertedStatus
    ALOGV("DrmPassthruPlugIn::onCloseConvertSession() : %d", uniqueId);
    return new DrmConvertedStatus(DrmConvertedStatus::STATUS_OK, NULL, 0 /*offset*/);
!!!180876.cpp!!!	onGetSupportInfo(in uniqueId : int) : DrmSupportInfo
    ALOGV("DrmPassthruPlugIn::onGetSupportInfo : %d", uniqueId);
    DrmSupportInfo* drmSupportInfo = new DrmSupportInfo();
    // Add mimetype's
    drmSupportInfo->addMimeType(String8("application/vnd.passthru.drm"));
    // Add File Suffixes
    drmSupportInfo->addFileSuffix(String8(".passthru"));
    // Add plug-in description
    drmSupportInfo->setDescription(String8("Passthru plug-in"));
    return drmSupportInfo;
!!!181004.cpp!!!	onOpenDecryptSession(in uniqueId : int, inout decryptHandle : DecryptHandle, in fd : int, in offset : off64_t, in length : off64_t) : status_t
    ALOGV("DrmPassthruPlugIn::onOpenDecryptSession() : %d", uniqueId);

#ifdef ENABLE_PASSTHRU_DECRYPTION
    decryptHandle->mimeType = String8("video/passthru");
    decryptHandle->decryptApiType = DecryptApiType::ELEMENTARY_STREAM_BASED;
    decryptHandle->status = DRM_NO_ERROR;
    decryptHandle->decryptInfo = NULL;
    return DRM_NO_ERROR;
#endif

    return DRM_ERROR_CANNOT_HANDLE;
!!!181132.cpp!!!	onOpenDecryptSession(in uniqueId : int, inout decryptHandle : DecryptHandle, in uri : char) : status_t
    return DRM_ERROR_CANNOT_HANDLE;
!!!181260.cpp!!!	onCloseDecryptSession(in uniqueId : int, inout decryptHandle : DecryptHandle) : status_t
    ALOGV("DrmPassthruPlugIn::onCloseDecryptSession() : %d", uniqueId);
    if (NULL != decryptHandle) {
        if (NULL != decryptHandle->decryptInfo) {
            delete decryptHandle->decryptInfo; decryptHandle->decryptInfo = NULL;
        }
        delete decryptHandle; decryptHandle = NULL;
    }
    return DRM_NO_ERROR;
!!!181388.cpp!!!	onInitializeDecryptUnit(in uniqueId : int, inout decryptHandle : DecryptHandle, in decryptUnitId : int, in headerInfo : DrmBuffer) : status_t
    ALOGV("DrmPassthruPlugIn::onInitializeDecryptUnit() : %d", uniqueId);
    return DRM_NO_ERROR;
!!!181516.cpp!!!	onDecrypt(in uniqueId : int, inout decryptHandle : DecryptHandle, in decryptUnitId : int, in encBuffer : DrmBuffer, inout decBuffer : DrmBuffer, inout IV : DrmBuffer) : status_t
    ALOGV("DrmPassthruPlugIn::onDecrypt() : %d", uniqueId);
    /**
     * As a workaround implementation passthru would copy the given
     * encrypted buffer as it is to decrypted buffer. Note, decBuffer
     * memory has to be allocated by the caller.
     */
    if (NULL != (*decBuffer) && 0 < (*decBuffer)->length) {
        if ((*decBuffer)->length >= encBuffer->length) {
            memcpy((*decBuffer)->data, encBuffer->data, encBuffer->length);
            (*decBuffer)->length = encBuffer->length;
        } else {
            ALOGE("decBuffer size (%d) too small to hold %d bytes",
                (*decBuffer)->length, encBuffer->length);
            return DRM_ERROR_UNKNOWN;
        }
    }
    return DRM_NO_ERROR;
!!!181644.cpp!!!	onFinalizeDecryptUnit(in uniqueId : int, inout decryptHandle : DecryptHandle, in decryptUnitId : int) : status_t
    ALOGV("DrmPassthruPlugIn::onFinalizeDecryptUnit() : %d", uniqueId);
    return DRM_NO_ERROR;
!!!181772.cpp!!!	onPread(in uniqueId : int, inout decryptHandle : DecryptHandle, inout buffer : void, in numBytes : ssize_t, in offset : off64_t) : ssize_t
    ALOGV("DrmPassthruPlugIn::onPread() : %d", uniqueId);
    return 0;
