class LayerBaseClient
!!!1759116.cpp!!!	~LayerBaseClient()
    sp<Client> c(mClientRef.promote());
    if (c != 0) {
        c->detachLayer(this);
    }
!!!1759244.cpp!!!	getSurface() : sp<ISurface>
    sp<ISurface> s;
    Mutex::Autolock _l(mLock);

    LOG_ALWAYS_FATAL_IF(mHasSurface,
            "LayerBaseClient::getSurface() has already been called");

    mHasSurface = true;
    s = createSurface();
    mClientSurfaceBinder = s->asBinder();
    return s;
!!!1759372.cpp!!!	getSurfaceBinder() : wp<IBinder>
    return mClientSurfaceBinder;
!!!1759500.cpp!!!	getSurfaceTextureBinder() : wp<IBinder>
    return 0;
!!!1760012.cpp!!!	dump(inout result : String8, inout buffer : char, in SIZE : size_t) : void
    LayerBase::dump(result, buffer, SIZE);

    sp<Client> client(mClientRef.promote());
    snprintf(buffer, SIZE,
            "      client=%p, identity=%u\n",
            client.get(), getIdentity());

    result.append(buffer);
!!!1760140.cpp!!!	shortDump(inout result : String8, inout scratch : char, in size : size_t) : void
    LayerBaseClient::dump(result, scratch, size);
!!!1760524.cpp!!!	createSurface() : sp<ISurface>
    class BSurface : public BnSurface, public LayerCleaner {
        virtual sp<ISurfaceTexture> getSurfaceTexture() const { return 0; }
    public:
        BSurface(const sp<SurfaceFlinger>& flinger,
                const sp<LayerBaseClient>& layer)
            : LayerCleaner(flinger, layer) { }
    };
    sp<ISurface> sur(new BSurface(mFlinger, this));
    return sur;
