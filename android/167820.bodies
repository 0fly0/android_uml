class StringArray
!!!1630220.cpp!!!	~StringArray()
    for (int i = 0; i < mCurrent; i++)
        delete[] mArray[i];
    delete[] mArray;
!!!1630348.cpp!!!	push_back(in str : char) : bool
    if (mCurrent >= mMax) {
        char** tmp;

        if (mMax == 0)
            mMax = 16;      // initial storage
        else
            mMax *= 2;

        tmp = new char*[mMax];
        if (tmp == NULL)
            return false;

        memcpy(tmp, mArray, mCurrent * sizeof(char*));
        delete[] mArray;
        mArray = tmp;
    }

    int len = strlen(str);
    mArray[mCurrent] = new char[len+1];
    memcpy(mArray[mCurrent], str, len+1);
    mCurrent++;

    return true;
!!!1630476.cpp!!!	erase(in idx : int) : void
    if (idx < 0 || idx >= mCurrent)
        return;
    delete[] mArray[idx];
    if (idx < mCurrent-1) {
        memmove(&mArray[idx], &mArray[idx+1],
                (mCurrent-1 - idx) * sizeof(char*));
    }
    mCurrent--;
!!!1630604.cpp!!!	sort(in compare : int (*)(const void*, const void*)) : void
    qsort(mArray, mCurrent, sizeof(char*), compare);
!!!1630732.cpp!!!	cmpAscendingAlpha(in pstr1 : void, in pstr2 : void) : int
    return strcmp(*(const char**)pstr1, *(const char**)pstr2);
!!!1631116.cpp!!!	setEntry(in idx : int, in str : char) : void
    if (idx < 0 || idx >= mCurrent)
        return;
    delete[] mArray[idx];
    int len = strlen(str);
    mArray[idx] = new char[len+1];
    memcpy(mArray[idx], str, len+1);
