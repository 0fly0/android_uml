class Stub
!!!10791436.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!10791564.java!!!	asInterface(inout obj : android.os.IBinder) : IInputMethodManager
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof com.android.internal.view.IInputMethodManager))) {
return ((com.android.internal.view.IInputMethodManager)iin);
}
return new com.android.internal.view.IInputMethodManager.Stub.Proxy(obj);
!!!10791692.java!!!	asBinder() : android.os.IBinder
return this;
!!!10791820.java!!!	onTransact(in code : int, inout data : android.os.Parcel, inout reply : android.os.Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_getInputMethodList:
{
data.enforceInterface(DESCRIPTOR);
java.util.List<android.view.inputmethod.InputMethodInfo> _result = this.getInputMethodList();
reply.writeNoException();
reply.writeTypedList(_result);
return true;
}
case TRANSACTION_getEnabledInputMethodList:
{
data.enforceInterface(DESCRIPTOR);
java.util.List<android.view.inputmethod.InputMethodInfo> _result = this.getEnabledInputMethodList();
reply.writeNoException();
reply.writeTypedList(_result);
return true;
}
case TRANSACTION_getEnabledInputMethodSubtypeList:
{
data.enforceInterface(DESCRIPTOR);
android.view.inputmethod.InputMethodInfo _arg0;
if ((0!=data.readInt())) {
_arg0 = android.view.inputmethod.InputMethodInfo.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
boolean _arg1;
_arg1 = (0!=data.readInt());
java.util.List<android.view.inputmethod.InputMethodSubtype> _result = this.getEnabledInputMethodSubtypeList(_arg0, _arg1);
reply.writeNoException();
reply.writeTypedList(_result);
return true;
}
case TRANSACTION_getLastInputMethodSubtype:
{
data.enforceInterface(DESCRIPTOR);
android.view.inputmethod.InputMethodSubtype _result = this.getLastInputMethodSubtype();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getShortcutInputMethodsAndSubtypes:
{
data.enforceInterface(DESCRIPTOR);
java.util.List _result = this.getShortcutInputMethodsAndSubtypes();
reply.writeNoException();
reply.writeList(_result);
return true;
}
case TRANSACTION_addClient:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputMethodClient _arg0;
_arg0 = com.android.internal.view.IInputMethodClient.Stub.asInterface(data.readStrongBinder());
com.android.internal.view.IInputContext _arg1;
_arg1 = com.android.internal.view.IInputContext.Stub.asInterface(data.readStrongBinder());
int _arg2;
_arg2 = data.readInt();
int _arg3;
_arg3 = data.readInt();
this.addClient(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
return true;
}
case TRANSACTION_removeClient:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputMethodClient _arg0;
_arg0 = com.android.internal.view.IInputMethodClient.Stub.asInterface(data.readStrongBinder());
this.removeClient(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_startInput:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputMethodClient _arg0;
_arg0 = com.android.internal.view.IInputMethodClient.Stub.asInterface(data.readStrongBinder());
com.android.internal.view.IInputContext _arg1;
_arg1 = com.android.internal.view.IInputContext.Stub.asInterface(data.readStrongBinder());
android.view.inputmethod.EditorInfo _arg2;
if ((0!=data.readInt())) {
_arg2 = android.view.inputmethod.EditorInfo.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
int _arg3;
_arg3 = data.readInt();
com.android.internal.view.InputBindResult _result = this.startInput(_arg0, _arg1, _arg2, _arg3);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_finishInput:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputMethodClient _arg0;
_arg0 = com.android.internal.view.IInputMethodClient.Stub.asInterface(data.readStrongBinder());
this.finishInput(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_showSoftInput:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputMethodClient _arg0;
_arg0 = com.android.internal.view.IInputMethodClient.Stub.asInterface(data.readStrongBinder());
int _arg1;
_arg1 = data.readInt();
android.os.ResultReceiver _arg2;
if ((0!=data.readInt())) {
_arg2 = android.os.ResultReceiver.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
boolean _result = this.showSoftInput(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_hideSoftInput:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputMethodClient _arg0;
_arg0 = com.android.internal.view.IInputMethodClient.Stub.asInterface(data.readStrongBinder());
int _arg1;
_arg1 = data.readInt();
android.os.ResultReceiver _arg2;
if ((0!=data.readInt())) {
_arg2 = android.os.ResultReceiver.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
boolean _result = this.hideSoftInput(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_windowGainedFocus:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputMethodClient _arg0;
_arg0 = com.android.internal.view.IInputMethodClient.Stub.asInterface(data.readStrongBinder());
android.os.IBinder _arg1;
_arg1 = data.readStrongBinder();
int _arg2;
_arg2 = data.readInt();
int _arg3;
_arg3 = data.readInt();
int _arg4;
_arg4 = data.readInt();
android.view.inputmethod.EditorInfo _arg5;
if ((0!=data.readInt())) {
_arg5 = android.view.inputmethod.EditorInfo.CREATOR.createFromParcel(data);
}
else {
_arg5 = null;
}
com.android.internal.view.IInputContext _arg6;
_arg6 = com.android.internal.view.IInputContext.Stub.asInterface(data.readStrongBinder());
com.android.internal.view.InputBindResult _result = this.windowGainedFocus(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5, _arg6);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_showInputMethodPickerFromClient:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputMethodClient _arg0;
_arg0 = com.android.internal.view.IInputMethodClient.Stub.asInterface(data.readStrongBinder());
this.showInputMethodPickerFromClient(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_showInputMethodAndSubtypeEnablerFromClient:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.view.IInputMethodClient _arg0;
_arg0 = com.android.internal.view.IInputMethodClient.Stub.asInterface(data.readStrongBinder());
java.lang.String _arg1;
_arg1 = data.readString();
this.showInputMethodAndSubtypeEnablerFromClient(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setInputMethod:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
java.lang.String _arg1;
_arg1 = data.readString();
this.setInputMethod(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_setInputMethodAndSubtype:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
java.lang.String _arg1;
_arg1 = data.readString();
android.view.inputmethod.InputMethodSubtype _arg2;
if ((0!=data.readInt())) {
_arg2 = android.view.inputmethod.InputMethodSubtype.CREATOR.createFromParcel(data);
}
else {
_arg2 = null;
}
this.setInputMethodAndSubtype(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_hideMySoftInput:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
int _arg1;
_arg1 = data.readInt();
this.hideMySoftInput(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_showMySoftInput:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
int _arg1;
_arg1 = data.readInt();
this.showMySoftInput(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_updateStatusIcon:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
java.lang.String _arg1;
_arg1 = data.readString();
int _arg2;
_arg2 = data.readInt();
this.updateStatusIcon(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_setImeWindowStatus:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
int _arg1;
_arg1 = data.readInt();
int _arg2;
_arg2 = data.readInt();
this.setImeWindowStatus(_arg0, _arg1, _arg2);
reply.writeNoException();
return true;
}
case TRANSACTION_registerSuggestionSpansForNotification:
{
data.enforceInterface(DESCRIPTOR);
android.text.style.SuggestionSpan[] _arg0;
_arg0 = data.createTypedArray(android.text.style.SuggestionSpan.CREATOR);
this.registerSuggestionSpansForNotification(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_notifySuggestionPicked:
{
data.enforceInterface(DESCRIPTOR);
android.text.style.SuggestionSpan _arg0;
if ((0!=data.readInt())) {
_arg0 = android.text.style.SuggestionSpan.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
java.lang.String _arg1;
_arg1 = data.readString();
int _arg2;
_arg2 = data.readInt();
boolean _result = this.notifySuggestionPicked(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_getCurrentInputMethodSubtype:
{
data.enforceInterface(DESCRIPTOR);
android.view.inputmethod.InputMethodSubtype _result = this.getCurrentInputMethodSubtype();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_setCurrentInputMethodSubtype:
{
data.enforceInterface(DESCRIPTOR);
android.view.inputmethod.InputMethodSubtype _arg0;
if ((0!=data.readInt())) {
_arg0 = android.view.inputmethod.InputMethodSubtype.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
boolean _result = this.setCurrentInputMethodSubtype(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_switchToLastInputMethod:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
boolean _result = this.switchToLastInputMethod(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_switchToNextInputMethod:
{
data.enforceInterface(DESCRIPTOR);
android.os.IBinder _arg0;
_arg0 = data.readStrongBinder();
boolean _arg1;
_arg1 = (0!=data.readInt());
boolean _result = this.switchToNextInputMethod(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setInputMethodEnabled:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
boolean _arg1;
_arg1 = (0!=data.readInt());
boolean _result = this.setInputMethodEnabled(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setAdditionalInputMethodSubtypes:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
android.view.inputmethod.InputMethodSubtype[] _arg1;
_arg1 = data.createTypedArray(android.view.inputmethod.InputMethodSubtype.CREATOR);
this.setAdditionalInputMethodSubtypes(_arg0, _arg1);
return true;
}
}
return super.onTransact(code, data, reply, flags);
