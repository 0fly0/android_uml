class ExifElementsTable
!!!11044364.cpp!!!	~ExifElementsTable()
    int num_elements = gps_tag_count + exif_tag_count;

    for (int i = 0; i < num_elements; i++) {
        if (table[i].Value) {
            free(table[i].Value);
        }
    }

    if (jpeg_opened) {
        DiscardData();
    }
!!!11044492.cpp!!!	insertElement(in tag : char, in value : char) : status_t
    int value_length = 0;
    int ret = 0;

    if (!value || !tag) {
        return -1;
    }

    if (position >= MAX_EXIF_TAGS_SUPPORTED) {
        printf("Max number of EXIF elements already inserted");
        return 0;
    }

    if (isAsciiTag(tag)) {
        value_length = sizeof(ExifAsciiPrefix) + strlen(value + sizeof(ExifAsciiPrefix));
    } else {
        value_length = strlen(value);
    }

    if (IsGpsTag(tag)) {
        table[position].GpsTag = TRUE;
        table[position].Tag = GpsTagNameToValue(tag);
        gps_tag_count++;
    } else {
        table[position].GpsTag = FALSE;
        table[position].Tag = TagNameToValue(tag);
        exif_tag_count++;
    }

    table[position].DataLength = 0;
    table[position].Value = (char*) malloc(sizeof(char) * (value_length + 1));

    if (table[position].Value) {
        memcpy(table[position].Value, value, value_length + 1);
        table[position].DataLength = value_length + 1;
    }

    position++;
    return ret;
!!!11044620.cpp!!!	insertExifToJpeg(inout jpeg : byte, in jpeg_size : size_t) : void
    ReadMode_t read_mode = (ReadMode_t)(READ_METADATA | READ_IMAGE);

    ResetJpgfile();

    if (ReadJpegSectionsFromBuffer(jpeg, jpeg_size, read_mode)) {
        jpeg_opened = true;
        create_EXIF(table, exif_tag_count, gps_tag_count, true);
    }
!!!11044748.cpp!!!	insertExifThumbnailImage(in thumb : char, in len : int) : status_t
    int ret = 0;

    if ((len > 0) && jpeg_opened) {
        printf("ImageInfo.ThumbnailOffset = %d, ImageInfo.ThumbnailAtEnd = %d ",
               ImageInfo.ThumbnailOffset, ImageInfo.ThumbnailAtEnd);
        ret = ReplaceThumbnailFromBuffer(thumb, len);
        printf("insertExifThumbnailImage. ReplaceThumbnail(). ret=%d", ret);
    }

    return ret;
!!!11044876.cpp!!!	saveJpeg(inout jpeg : byte, in jpeg_size : size_t) : void
    if (jpeg_opened) {
        WriteJpegToBuffer(jpeg, jpeg_size);
        DiscardData();
        jpeg_opened = false;
    }
!!!11045004.cpp!!!	degreesToExifOrientation(in degrees : char) : char
    for (unsigned int i = 0; i < ARRAY_SIZE(degress_to_exif_lut); i++) {
        if (!strcmp(degrees, degress_to_exif_lut[i].string1)) {
            return degress_to_exif_lut[i].string2;
        }
    }

    return NULL;
!!!11045132.cpp!!!	stringToRational(in str : char, inout num : uint, inout den : uint) : void
    int len;
    char * tempVal = NULL;

    if (str != NULL) {
        len = strlen(str);
        tempVal = (char*) malloc( sizeof(char) * (len + 1));
    }

    if (tempVal != NULL) {
        // convert the decimal string into a rational
        size_t den_len;
        char *ctx;
        unsigned int numerator = 0;
        unsigned int denominator = 0;
        char* temp = NULL;

        memset(tempVal, '\0', len + 1);
        strncpy(tempVal, str, len);
        temp = strtok_r(tempVal, ".", &ctx);

        if (temp != NULL)
            numerator = atoi(temp);

        if (!numerator)
            numerator = 1;

        temp = strtok_r(NULL, ".", &ctx);

        if (temp != NULL) {
            den_len = strlen(temp);

            if(HUGE_VAL == den_len ) {
                den_len = 0;
            }

            denominator = static_cast<unsigned int>(pow(10, den_len));
            numerator = numerator * denominator + atoi(temp);
        } else {
            denominator = 1;
        }

        free(tempVal);

        *num = numerator;
        *den = denominator;
    }
!!!11045260.cpp!!!	isAsciiTag(in tag : char) : bool
    // TODO(XXX): Add tags as necessary
    return (strcmp(tag, TAG_GPS_PROCESSING_METHOD) == 0);
!!!11045388.cpp!!!	setParametersEXIF(in params : CameraParameters) : int
    int ret = NO_ERROR;
    const char *valstr = NULL;
    double gpsPos;

    if( ( valstr = params.get(CameraParameters::KEY_GPS_LATITUDE) ) != NULL ) {
        gpsPos = strtod(valstr, NULL);

        if ( convertGPSCoord(gpsPos,
                             mEXIFData.mGPSData.mLatDeg,
                             mEXIFData.mGPSData.mLatMin,
                             mEXIFData.mGPSData.mLatSec,
                             mEXIFData.mGPSData.mLatSecDiv ) == NO_ERROR ) {

            if ( 0 < gpsPos ) {
                strncpy(mEXIFData.mGPSData.mLatRef, GPS_NORTH_REF, GPS_REF_SIZE);
            } else {
                strncpy(mEXIFData.mGPSData.mLatRef, GPS_SOUTH_REF, GPS_REF_SIZE);
            }

            mEXIFData.mGPSData.mLatValid = true;
        } else {
            mEXIFData.mGPSData.mLatValid = false;
        }
    } else {
        mEXIFData.mGPSData.mLatValid = false;
    }

    if( ( valstr = params.get(CameraParameters::KEY_GPS_LONGITUDE) ) != NULL ) {
        gpsPos = strtod(valstr, NULL);

        if ( convertGPSCoord(gpsPos,
                             mEXIFData.mGPSData.mLongDeg,
                             mEXIFData.mGPSData.mLongMin,
                             mEXIFData.mGPSData.mLongSec,
                             mEXIFData.mGPSData.mLongSecDiv) == NO_ERROR ) {

            if ( 0 < gpsPos ) {
                strncpy(mEXIFData.mGPSData.mLongRef, GPS_EAST_REF, GPS_REF_SIZE);
            } else {
                strncpy(mEXIFData.mGPSData.mLongRef, GPS_WEST_REF, GPS_REF_SIZE);
            }

            mEXIFData.mGPSData.mLongValid = true;
        } else {
            mEXIFData.mGPSData.mLongValid = false;
        }
    } else {
        mEXIFData.mGPSData.mLongValid = false;
    }

    if( ( valstr = params.get(CameraParameters::KEY_GPS_ALTITUDE) ) != NULL ) {
        gpsPos = strtod(valstr, NULL);
        mEXIFData.mGPSData.mAltitude = floor(fabs(gpsPos));

        if (gpsPos < 0) {
            mEXIFData.mGPSData.mAltitudeRef = 1;
        } else {
            mEXIFData.mGPSData.mAltitudeRef = 0;
        }

        mEXIFData.mGPSData.mAltitudeValid = true;
    } else {
        mEXIFData.mGPSData.mAltitudeValid = false;
    }

    if( (valstr = params.get(CameraParameters::KEY_GPS_TIMESTAMP)) != NULL ) {
        long gpsTimestamp = strtol(valstr, NULL, 10);
        struct tm *timeinfo = gmtime( ( time_t * ) & (gpsTimestamp) );

        if ( NULL != timeinfo ) {
            mEXIFData.mGPSData.mTimeStampHour = timeinfo->tm_hour;
            mEXIFData.mGPSData.mTimeStampMin = timeinfo->tm_min;
            mEXIFData.mGPSData.mTimeStampSec = timeinfo->tm_sec;
            mEXIFData.mGPSData.mTimeStampValid = true;
        } else {
            mEXIFData.mGPSData.mTimeStampValid = false;
        }
    } else {
        mEXIFData.mGPSData.mTimeStampValid = false;
    }

    if( ( valstr = params.get(CameraParameters::KEY_GPS_TIMESTAMP) ) != NULL ) {
        long gpsDatestamp = strtol(valstr, NULL, 10);
        struct tm *timeinfo = gmtime( ( time_t * ) & (gpsDatestamp) );

        if ( NULL != timeinfo ) {
            strftime(mEXIFData.mGPSData.mDatestamp, GPS_DATESTAMP_SIZE, "%Y:%m:%d", timeinfo);
            mEXIFData.mGPSData.mDatestampValid = true;
        } else {
            mEXIFData.mGPSData.mDatestampValid = false;
        }
    } else {
        mEXIFData.mGPSData.mDatestampValid = false;
    }

    if( ( valstr = params.get(CameraParameters::KEY_GPS_PROCESSING_METHOD) ) != NULL ) {
        strncpy(mEXIFData.mGPSData.mProcMethod, valstr, GPS_PROCESSING_SIZE - 1);
        mEXIFData.mGPSData.mProcMethodValid = true;
    } else {
        mEXIFData.mGPSData.mProcMethodValid = false;
    }

    return ret;
!!!11045516.cpp!!!	convertGPSCoord(in coord : double, inout deg : int, inout min : int, inout sec : int, inout secDivisor : int) : int
    double tmp;

    if ( coord == 0 ) {
        ALOGE("Invalid GPS coordinate");

        return -EINVAL;
    }

    deg = (int) floor(fabs(coord));
    tmp = ( fabs(coord) - floor(fabs(coord)) ) * GPS_MIN_DIV;
    min = (int) floor(tmp);
    tmp = ( tmp - floor(tmp) ) * ( GPS_SEC_DIV * GPS_SEC_ACCURACY );
    sec = (int) floor(tmp);
    secDivisor = GPS_SEC_ACCURACY;

    if( sec >= ( GPS_SEC_DIV * GPS_SEC_ACCURACY ) ) {
        sec = 0;
        min += 1;
    }

    if( min >= 60 ) {
        min = 0;
        deg += 1;
    }

    return NO_ERROR;
!!!11045644.cpp!!!	setupEXIF() : int
    status_t ret = NO_ERROR;

    if ( mEXIFData.mGPSData.mLatValid  ) {
        char temp_value[256]; // arbitrarily long string
        snprintf(temp_value,
                 sizeof(temp_value) / sizeof(char) - 1,
                 "%d/%d,%d/%d,%d/%d",
                 abs(mEXIFData.mGPSData.mLatDeg), 1,
                 abs(mEXIFData.mGPSData.mLatMin), 1,
                 abs(mEXIFData.mGPSData.mLatSec), abs(mEXIFData.mGPSData.mLatSecDiv));
        insertElement(TAG_GPS_LAT, temp_value);
    }

    if ( mEXIFData.mGPSData.mLatValid ) {
        insertElement(TAG_GPS_LAT_REF, mEXIFData.mGPSData.mLatRef);
    }

    if (  mEXIFData.mGPSData.mLongValid ) {
        char temp_value[256]; // arbitrarily long string
        snprintf(temp_value,
                 sizeof(temp_value) / sizeof(char) - 1,
                 "%d/%d,%d/%d,%d/%d",
                 abs(mEXIFData.mGPSData.mLongDeg), 1,
                 abs(mEXIFData.mGPSData.mLongMin), 1,
                 abs(mEXIFData.mGPSData.mLongSec), abs(mEXIFData.mGPSData.mLongSecDiv));
        insertElement(TAG_GPS_LONG, temp_value);
    }

    if (  mEXIFData.mGPSData.mLongValid  ) {
        insertElement(TAG_GPS_LONG_REF, mEXIFData.mGPSData.mLongRef);
    }

    if ( mEXIFData.mGPSData.mAltitudeValid ) {
        char temp_value[256]; // arbitrarily long string
        snprintf(temp_value,
                 sizeof(temp_value) / sizeof(char) - 1,
                 "%d/%d",
                 abs( mEXIFData.mGPSData.mAltitude), 1);
        insertElement(TAG_GPS_ALT, temp_value);
    }

    if (  mEXIFData.mGPSData.mAltitudeValid) {
        char temp_value[5];
        snprintf(temp_value,
                 sizeof(temp_value) / sizeof(char) - 1,
                 "%d", mEXIFData.mGPSData.mAltitudeRef);
        insertElement(TAG_GPS_ALT_REF, temp_value);
    }

    if (  mEXIFData.mGPSData.mTimeStampValid ) {
        char temp_value[256]; // arbitrarily long string
        snprintf(temp_value,
                 sizeof(temp_value) / sizeof(char) - 1,
                 "%d/%d,%d/%d,%d/%d",
                 mEXIFData.mGPSData.mTimeStampHour, 1,
                 mEXIFData.mGPSData.mTimeStampMin, 1,
                 mEXIFData.mGPSData.mTimeStampSec, 1);
        insertElement(TAG_GPS_TIMESTAMP, temp_value);
    }

    if ( mEXIFData.mGPSData.mDatestampValid ) {
        insertElement(TAG_GPS_DATESTAMP, mEXIFData.mGPSData.mDatestamp);
    }

    return ret;
