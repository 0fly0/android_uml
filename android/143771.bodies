class LineNumberInputStream
!!!231067.java!!!	LineNumberInputStream(inout in : InputStream)
        super(in);
!!!231195.java!!!	available() : int
        return in.available() / 2 + (lastChar == -1 ? 0 : 1);
!!!231323.java!!!	getLineNumber() : int
        return lineNumber;
!!!231451.java!!!	mark(in readlimit : int) : void
        in.mark(readlimit);
        markedLineNumber = lineNumber;
        markedLastChar = lastChar;
!!!231579.java!!!	read() : int
        int currentChar = lastChar;
        if (currentChar == -1) {
            currentChar = in.read();
        } else {
            lastChar = -1;
        }
        switch (currentChar) {
            case '\r':
                currentChar = '\n';
                lastChar = in.read();
                if (lastChar == '\n') {
                    lastChar = -1;
                }
                // fall through
            case '\n':
                lineNumber++;
        }
        return currentChar;
!!!231707.java!!!	read(inout buffer : byte, in offset : int, in length : int) : int
        Arrays.checkOffsetAndCount(buffer.length, offset, length);
        for (int i = 0; i < length; i++) {
            int currentChar;
            try {
                currentChar = read();
            } catch (IOException e) {
                if (i != 0) {
                    return i;
                }
                throw e;
            }
            if (currentChar == -1) {
                return i == 0 ? -1 : i;
            }
            buffer[offset + i] = (byte) currentChar;
        }
        return length;
!!!231835.java!!!	reset() : void
        in.reset();
        lineNumber = markedLineNumber;
        lastChar = markedLastChar;
!!!231963.java!!!	setLineNumber(in lineNumber : int) : void
        this.lineNumber = lineNumber;
!!!232091.java!!!	skip(in byteCount : long) : long
        return Streams.skipByReading(this, byteCount);
