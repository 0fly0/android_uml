class OpenSSLX509CRL
!!!2477339.java!!!	OpenSSLX509CRL(in ctx : long)
        mContext = ctx;
!!!2477467.java!!!	fromX509DerInputStream(inout is : InputStream) : OpenSSLX509CRL
        final OpenSSLBIOInputStream bis = new OpenSSLBIOInputStream(is);

        try {
            final long crlCtx = NativeCrypto.d2i_X509_CRL_bio(bis.getBioContext());
            if (crlCtx == 0) {
                return null;
            }
            return new OpenSSLX509CRL(crlCtx);
        } catch (Exception e) {
            throw new ParsingException(e);
        } finally {
            NativeCrypto.BIO_free(bis.getBioContext());
        }
!!!2477595.java!!!	fromPkcs7DerInputStream(inout is : InputStream) : List
        OpenSSLBIOInputStream bis = new OpenSSLBIOInputStream(is);

        final long[] certRefs;
        try {
            certRefs = NativeCrypto.d2i_PKCS7_bio(bis.getBioContext(), NativeCrypto.PKCS7_CRLS);
        } catch (Exception e) {
            throw new ParsingException(e);
        } finally {
            NativeCrypto.BIO_free(bis.getBioContext());
        }

        final List<OpenSSLX509CRL> certs = new ArrayList<OpenSSLX509CRL>(certRefs.length);
        for (int i = 0; i < certRefs.length; i++) {
            if (certRefs[i] == 0) {
                continue;
            }
            certs.add(new OpenSSLX509CRL(certRefs[i]));
        }
        return certs;
!!!2477723.java!!!	fromX509PemInputStream(inout is : InputStream) : OpenSSLX509CRL
        final OpenSSLBIOInputStream bis = new OpenSSLBIOInputStream(is);

        try {
            final long crlCtx = NativeCrypto.PEM_read_bio_X509_CRL(bis.getBioContext());
            if (crlCtx == 0) {
                return null;
            }
            return new OpenSSLX509CRL(crlCtx);
        } catch (Exception e) {
            throw new ParsingException(e);
        } finally {
            NativeCrypto.BIO_free(bis.getBioContext());
        }
!!!2477851.java!!!	fromPkcs7PemInputStream(inout is : InputStream) : List
        OpenSSLBIOInputStream bis = new OpenSSLBIOInputStream(is);

        final long[] certRefs;
        try {
            certRefs = NativeCrypto.PEM_read_bio_PKCS7(bis.getBioContext(),
                    NativeCrypto.PKCS7_CRLS);
        } catch (Exception e) {
            throw new ParsingException(e);
        } finally {
            NativeCrypto.BIO_free(bis.getBioContext());
        }

        final List<OpenSSLX509CRL> certs = new ArrayList<OpenSSLX509CRL>(certRefs.length);
        for (int i = 0; i < certRefs.length; i++) {
            if (certRefs[i] == 0) {
                continue;
            }
            certs.add(new OpenSSLX509CRL(certRefs[i]));
        }
        return certs;
!!!2477979.java!!!	getCriticalExtensionOIDs() : Set
        String[] critOids =
                NativeCrypto.get_X509_CRL_ext_oids(mContext, NativeCrypto.EXTENSION_TYPE_CRITICAL);

        /*
         * This API has a special case that if there are no extensions, we
         * should return null. So if we have no critical extensions, we'll check
         * non-critical extensions.
         */
        if ((critOids.length == 0)
                && (NativeCrypto.get_X509_CRL_ext_oids(mContext,
                        NativeCrypto.EXTENSION_TYPE_NON_CRITICAL).length == 0)) {
            return null;
        }

        return new HashSet<String>(Arrays.asList(critOids));
!!!2478107.java!!!	getExtensionValue(inout oid : String) : byte
        return NativeCrypto.X509_CRL_get_ext_oid(mContext, oid);
!!!2478235.java!!!	getNonCriticalExtensionOIDs() : Set
        String[] nonCritOids =
                NativeCrypto.get_X509_CRL_ext_oids(mContext,
                        NativeCrypto.EXTENSION_TYPE_NON_CRITICAL);

        /*
         * This API has a special case that if there are no extensions, we
         * should return null. So if we have no non-critical extensions, we'll
         * check critical extensions.
         */
        if ((nonCritOids.length == 0)
                && (NativeCrypto.get_X509_CRL_ext_oids(mContext,
                        NativeCrypto.EXTENSION_TYPE_CRITICAL).length == 0)) {
            return null;
        }

        return new HashSet<String>(Arrays.asList(nonCritOids));
!!!2478363.java!!!	hasUnsupportedCriticalExtension() : boolean
        final String[] criticalOids =
                NativeCrypto.get_X509_CRL_ext_oids(mContext, NativeCrypto.EXTENSION_TYPE_CRITICAL);
        for (String oid : criticalOids) {
            final long extensionRef = NativeCrypto.X509_CRL_get_ext(mContext, oid);
            if (NativeCrypto.X509_supported_extension(extensionRef) != 1) {
                return true;
            }
        }

        return false;
!!!2478491.java!!!	getEncoded() : byte
        return NativeCrypto.i2d_X509_CRL(mContext);
!!!2478619.java!!!	verifyOpenSSL(inout pkey : OpenSSLKey) : void
        NativeCrypto.X509_CRL_verify(mContext, pkey.getPkeyContext());
!!!2478747.java!!!	verifyInternal(inout key : PublicKey, inout sigProvider : String) : void
        String sigAlg = getSigAlgName();
        if (sigAlg == null) {
            sigAlg = getSigAlgOID();
        }

        final Signature sig;
        if (sigProvider == null) {
            sig = Signature.getInstance(sigAlg);
        } else {
            sig = Signature.getInstance(sigAlg, sigProvider);
        }

        sig.initVerify(key);
        sig.update(getTBSCertList());
        if (!sig.verify(getSignature())) {
            throw new SignatureException("signature did not verify");
        }
!!!2478875.java!!!	verify(inout key : PublicKey) : void
        if (key instanceof OpenSSLKeyHolder) {
            OpenSSLKey pkey = ((OpenSSLKeyHolder) key).getOpenSSLKey();
            verifyOpenSSL(pkey);
            return;
        }

        verifyInternal(key, null);
!!!2479003.java!!!	verify(inout key : PublicKey, inout sigProvider : String) : void
        verifyInternal(key, sigProvider);
!!!2479131.java!!!	getVersion() : int
        return (int) NativeCrypto.X509_CRL_get_version(mContext) + 1;
!!!2479259.java!!!	getIssuerDN() : Principal
        return getIssuerX500Principal();
!!!2479387.java!!!	getIssuerX500Principal() : X500Principal
        final byte[] issuer = NativeCrypto.X509_CRL_get_issuer_name(mContext);
        return new X500Principal(issuer);
!!!2479515.java!!!	getThisUpdate() : Date
        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        calendar.set(Calendar.MILLISECOND, 0);
        NativeCrypto.ASN1_TIME_to_Calendar(NativeCrypto.X509_CRL_get_lastUpdate(mContext),
                calendar);
        return calendar.getTime();
!!!2479643.java!!!	getNextUpdate() : Date
        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        calendar.set(Calendar.MILLISECOND, 0);
        NativeCrypto.ASN1_TIME_to_Calendar(NativeCrypto.X509_CRL_get_nextUpdate(mContext),
                calendar);
        return calendar.getTime();
!!!2479771.java!!!	getRevokedCertificate(inout serialNumber : BigInteger) : X509CRLEntry
        final long revokedRef = NativeCrypto.X509_CRL_get0_by_serial(mContext,
                serialNumber.toByteArray());
        if (revokedRef == 0) {
            return null;
        }

        return new OpenSSLX509CRLEntry(NativeCrypto.X509_REVOKED_dup(revokedRef));
!!!2479899.java!!!	getRevokedCertificate(inout certificate : X509Certificate) : X509CRLEntry
        if (certificate instanceof OpenSSLX509Certificate) {
            OpenSSLX509Certificate osslCert = (OpenSSLX509Certificate) certificate;
            final long x509RevokedRef = NativeCrypto.X509_CRL_get0_by_cert(mContext,
                    osslCert.getContext());

            if (x509RevokedRef == 0) {
                return null;
            }

            return new OpenSSLX509CRLEntry(NativeCrypto.X509_REVOKED_dup(x509RevokedRef));
        }

        return getRevokedCertificate(certificate.getSerialNumber());
!!!2480027.java!!!	getRevokedCertificates() : Set
        final long[] entryRefs = NativeCrypto.X509_CRL_get_REVOKED(mContext);
        if (entryRefs == null || entryRefs.length == 0) {
            return null;
        }

        final Set<OpenSSLX509CRLEntry> crlSet = new HashSet<OpenSSLX509CRLEntry>();
        for (long entryRef : entryRefs) {
            crlSet.add(new OpenSSLX509CRLEntry(entryRef));
        }

        return crlSet;
!!!2480155.java!!!	getTBSCertList() : byte
        return NativeCrypto.get_X509_CRL_crl_enc(mContext);
!!!2480283.java!!!	getSignature() : byte
        return NativeCrypto.get_X509_CRL_signature(mContext);
!!!2480411.java!!!	getSigAlgName() : String
        return AlgNameMapper.map2AlgName(getSigAlgOID());
!!!2480539.java!!!	getSigAlgOID() : String
        return NativeCrypto.get_X509_CRL_sig_alg_oid(mContext);
!!!2480667.java!!!	getSigAlgParams() : byte
        return NativeCrypto.get_X509_CRL_sig_alg_parameter(mContext);
!!!2480795.java!!!	isRevoked(inout cert : Certificate) : boolean
        if (!(cert instanceof X509Certificate)) {
            return false;
        }

        final OpenSSLX509Certificate osslCert;
        if (cert instanceof OpenSSLX509Certificate) {
            osslCert = (OpenSSLX509Certificate) cert;
        } else {
            try {
                osslCert = OpenSSLX509Certificate.fromX509DerInputStream(new ByteArrayInputStream(
                        cert.getEncoded()));
            } catch (Exception e) {
                throw new RuntimeException("cannot convert certificate", e);
            }
        }

        final long x509RevokedRef = NativeCrypto.X509_CRL_get0_by_cert(mContext,
                osslCert.getContext());

        return x509RevokedRef != 0;
!!!2480923.java!!!	toString() : String
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        final long bioCtx = NativeCrypto.create_BIO_OutputStream(os);
        try {
            NativeCrypto.X509_CRL_print(bioCtx, mContext);
            return os.toString();
        } finally {
            NativeCrypto.BIO_free(bioCtx);
        }
!!!2481051.java!!!	finalize() : void
        try {
            if (mContext != 0) {
                NativeCrypto.X509_CRL_free(mContext);
            }
        } finally {
            super.finalize();
        }
