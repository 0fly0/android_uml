class Subject
!!!1855259.java!!!	Subject()
        principals = new SecureSet<Principal>(_PRINCIPALS);
        publicCredentials = new SecureSet<Object>(_PUBLIC_CREDENTIALS);
        privateCredentials = new SecureSet<Object>(_PRIVATE_CREDENTIALS);

        readOnly = false;
!!!1855387.java!!!	Subject(inout readOnly : boolean, inout subjPrincipals : Set, inout pubCredentials : Set, inout privCredentials : Set)

        if (subjPrincipals == null) {
            throw new NullPointerException("subjPrincipals == null");
        } else if (pubCredentials == null) {
            throw new NullPointerException("pubCredentials == null");
        } else if (privCredentials == null) {
            throw new NullPointerException("privCredentials == null");
        }

        principals = new SecureSet<Principal>(_PRINCIPALS, subjPrincipals);
        publicCredentials = new SecureSet<Object>(_PUBLIC_CREDENTIALS, pubCredentials);
        privateCredentials = new SecureSet<Object>(_PRIVATE_CREDENTIALS, privCredentials);

        this.readOnly = readOnly;
!!!1855515.java!!!	doAs(inout subject : Subject, inout action : PrivilegedAction) : T
        return doAs_PrivilegedAction(subject, action, AccessController.getContext());
!!!1855643.java!!!	doAsPrivileged(inout subject : Subject, inout action : PrivilegedAction, inout context : AccessControlContext) : T
        if (context == null) {
            return doAs_PrivilegedAction(subject, action, new AccessControlContext(
                    new ProtectionDomain[0]));
        }
        return doAs_PrivilegedAction(subject, action, context);
!!!1855771.java!!!	doAs_PrivilegedAction(inout subject : Subject, inout action : PrivilegedAction, in context : AccessControlContext) : T

        AccessControlContext newContext;

        final SubjectDomainCombiner combiner;
        if (subject == null) {
            // performance optimization
            // if subject is null there is nothing to combine
            combiner = null;
        } else {
            combiner = new SubjectDomainCombiner(subject);
        }

        PrivilegedAction dccAction = new PrivilegedAction() {
            public Object run() {
                return new AccessControlContext(context, combiner);
            }
        };

        newContext = (AccessControlContext) AccessController.doPrivileged(dccAction);

        return AccessController.doPrivileged(action, newContext);
!!!1855899.java!!!	doAs(inout subject : Subject, inout action : PrivilegedExceptionAction) : T
        return doAs_PrivilegedExceptionAction(subject, action, AccessController.getContext());
!!!1856027.java!!!	doAsPrivileged(inout subject : Subject, inout action : PrivilegedExceptionAction, inout context : AccessControlContext) : T
        if (context == null) {
            return doAs_PrivilegedExceptionAction(subject, action,
                    new AccessControlContext(new ProtectionDomain[0]));
        }
        return doAs_PrivilegedExceptionAction(subject, action, context);
!!!1856155.java!!!	doAs_PrivilegedExceptionAction(inout subject : Subject, inout action : PrivilegedExceptionAction, in context : AccessControlContext) : T

        AccessControlContext newContext;

        final SubjectDomainCombiner combiner;
        if (subject == null) {
            // performance optimization
            // if subject is null there is nothing to combine
            combiner = null;
        } else {
            combiner = new SubjectDomainCombiner(subject);
        }

        PrivilegedAction<AccessControlContext> dccAction = new PrivilegedAction<AccessControlContext>() {
            public AccessControlContext run() {
                return new AccessControlContext(context, combiner);
            }
        };

        newContext = AccessController.doPrivileged(dccAction);

        return AccessController.doPrivileged(action, newContext);
!!!1856283.java!!!	equals(inout obj : Object) : boolean

        if (this == obj) {
            return true;
        }

        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }

        Subject that = (Subject) obj;

        if (principals.equals(that.principals)
                && publicCredentials.equals(that.publicCredentials)
                && privateCredentials.equals(that.privateCredentials)) {
            return true;
        }
        return false;
!!!1856411.java!!!	getPrincipals() : Set
        return principals;
!!!1856539.java!!!	getPrincipals(inout c : Class) : Set
        return ((SecureSet<Principal>) principals).get(c);
!!!1856667.java!!!	getPrivateCredentials() : Set
        return privateCredentials;
!!!1856795.java!!!	getPrivateCredentials(inout c : Class) : Set
        return privateCredentials.get(c);
!!!1856923.java!!!	getPublicCredentials() : Set
        return publicCredentials;
!!!1857051.java!!!	getPublicCredentials(inout c : Class) : Set
        return publicCredentials.get(c);
!!!1857179.java!!!	hashCode() : int
        return principals.hashCode() + privateCredentials.hashCode()
                + publicCredentials.hashCode();
!!!1857307.java!!!	setReadOnly() : void
        readOnly = true;
!!!1857435.java!!!	isReadOnly() : boolean
        return readOnly;
!!!1857563.java!!!	toString() : String
        StringBuilder buf = new StringBuilder("Subject:\n");

        Iterator<?> it = principals.iterator();
        while (it.hasNext()) {
            buf.append("\tPrincipal: ");
            buf.append(it.next());
            buf.append('\n');
        }

        it = publicCredentials.iterator();
        while (it.hasNext()) {
            buf.append("\tPublic Credential: ");
            buf.append(it.next());
            buf.append('\n');
        }

        int offset = buf.length() - 1;
        it = privateCredentials.iterator();
        try {
            while (it.hasNext()) {
                buf.append("\tPrivate Credential: ");
                buf.append(it.next());
                buf.append('\n');
            }
        } catch (SecurityException e) {
            buf.delete(offset, buf.length());
            buf.append("\tPrivate Credentials: no accessible information\n");
        }
        return buf.toString();
!!!1857691.java!!!	readObject(inout in : ObjectInputStream) : void

        in.defaultReadObject();

        publicCredentials = new SecureSet<Object>(_PUBLIC_CREDENTIALS);
        privateCredentials = new SecureSet<Object>(_PRIVATE_CREDENTIALS);
!!!1857819.java!!!	writeObject(inout out : ObjectOutputStream) : void
        out.defaultWriteObject();
!!!1857947.java!!!	getSubject(in context : AccessControlContext) : Subject
        if (context == null) {
            throw new NullPointerException("context == null");
        }
        PrivilegedAction<DomainCombiner> action = new PrivilegedAction<DomainCombiner>() {
            public DomainCombiner run() {
                return context.getDomainCombiner();
            }
        };
        DomainCombiner combiner = AccessController.doPrivileged(action);

        if ((combiner == null) || !(combiner instanceof SubjectDomainCombiner)) {
            return null;
        }
        return ((SubjectDomainCombiner) combiner).getSubject();
!!!1858075.java!!!	checkState() : void
        if (readOnly) {
            throw new IllegalStateException("Set is read-only");
        }
