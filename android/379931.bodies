class CertBlacklistTest
!!!2589595.java!!!	CertBlacklistTest()
        tmpFile = File.createTempFile("test", "");
        DEFAULT_PUBKEYS = getDefaultPubkeys();
        DEFAULT_SERIALS = getDefaultSerials();
        tmpFile.delete();
!!!2589723.java!!!	setUp() : void
        super.setUp();
        tmpFile = File.createTempFile("test", "");
!!!2589851.java!!!	tearDown() : void
        try {
            tmpFile.delete();
        } finally {
            super.tearDown();
        }
!!!2589979.java!!!	getPubkeyBlacklist(inout path : String) : Set
        // set our blacklist path
        CertBlacklist bl = new CertBlacklist(path, CertBlacklist.DEFAULT_SERIAL_BLACKLIST_PATH);
        // call readPubkeyBlacklist
        Set<byte[]> arr = bl.pubkeyBlacklist;
        // convert the results to a hashset of strings
        Set<String> results = new HashSet<String>();
        for (byte[] value: arr) {
            results.add(new String(value));
        }
        return results;
!!!2590107.java!!!	getSerialBlacklist(inout path : String) : Set
        // set our blacklist path
        CertBlacklist bl = new CertBlacklist(CertBlacklist.DEFAULT_PUBKEY_BLACKLIST_PATH, path);
        // call readPubkeyBlacklist
        Set<BigInteger> arr = bl.serialBlacklist;
        // convert the results to a hashset of strings
        Set<String> results = new HashSet<String>();
        for (BigInteger value: arr) {
            results.add(value.toString(16));
        }
        return results;
!!!2590235.java!!!	getHash(inout publicKey : PublicKey) : String
        byte[] encoded = publicKey.getEncoded();
        MessageDigest digest = MessageDigest.getInstance("SHA1");
        byte[] hexlifiedHash = Hex.encode(digest.digest(encoded));
        return new String(hexlifiedHash);
!!!2590363.java!!!	getDefaultPubkeys() : Set
        return getPubkeyBlacklist("");
!!!2590491.java!!!	getDefaultSerials() : Set
        return getSerialBlacklist("");
!!!2590619.java!!!	getCurrentPubkeyBlacklist() : Set
        return getPubkeyBlacklist(tmpFile.getCanonicalPath());
!!!2590747.java!!!	getCurrentSerialBlacklist() : Set
        return getSerialBlacklist(tmpFile.getCanonicalPath());
!!!2590875.java!!!	blacklistToFile(inout blacklist : String) : void
        FileOutputStream out = new FileOutputStream(tmpFile);
        out.write(blacklist.toString().getBytes());
        out.close();
!!!2591003.java!!!	writeBlacklist(inout values : HashSet) : void
        StringBuilder result = new StringBuilder();
        // join the values into a string
        for (String value : values) {
            if (result.length() != 0) {
                result.append(",");
            }
            result.append(value);
        }
        blacklistToFile(result.toString());
!!!2591131.java!!!	createPublicKey(inout cert : String) : PublicKey
        byte[] derCert = Base64.decode(cert.getBytes());
        InputStream istream = new ByteArrayInputStream(derCert);
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        return cf.generateCertificate(istream).getPublicKey();
!!!2591259.java!!!	createSerialNumber(inout cert : String) : BigInteger
        byte[] derCert = Base64.decode(cert.getBytes());
        InputStream istream = new ByteArrayInputStream(derCert);
        CertificateFactory cf = CertificateFactory.getInstance("X.509");
        X509Certificate xCert = (X509Certificate)cf.generateCertificate(istream);
        return xCert.getSerialNumber();
!!!2591387.java!!!	testPubkeyBlacklistLegit() : void
        // build the blacklist
        HashSet<String> bl = new HashSet<String>();
        bl.add("6ccabd7db47e94a5759901b6a7dfd45d1c091ccc");
        // write the blacklist
        writeBlacklist(bl);
        // add the default pubkeys into the bl
        bl.addAll(DEFAULT_PUBKEYS);
        // do the test
        assertEquals(bl, getCurrentPubkeyBlacklist());
!!!2591515.java!!!	testLegitPubkeyIsntBlacklisted() : void
        // build the public key
        PublicKey pk = createPublicKey(TEST_CERT);
        // write that to the test blacklist
        writeBlacklist(new HashSet<String>());
        // set our blacklist path
        CertBlacklist bl = new CertBlacklist(tmpFile.getCanonicalPath(),
                                             CertBlacklist.DEFAULT_SERIAL_BLACKLIST_PATH);
        // check to make sure it isn't blacklisted
        assertEquals(bl.isPublicKeyBlackListed(pk), false);
!!!2591643.java!!!	testPubkeyIsBlacklisted() : void
        // build the public key
        PublicKey pk = createPublicKey(TEST_CERT);
        // get its hash
        String hash = getHash(pk);
        // write that to the test blacklist
        HashSet<String> testBlackList = new HashSet<String>();
        testBlackList.add(hash);
        writeBlacklist(testBlackList);
        // set our blacklist path
        CertBlacklist bl = new CertBlacklist(tmpFile.getCanonicalPath(),
                                             CertBlacklist.DEFAULT_SERIAL_BLACKLIST_PATH);
        // check to make sure it isn't blacklited
        assertTrue(bl.isPublicKeyBlackListed(pk));
!!!2591771.java!!!	testSerialBlacklistLegit() : void
        // build the blacklist
        HashSet<String> bl = new HashSet<String>();
        bl.add("22e514121e61c643b1e9b06bd4b9f7d0");
        // write the blacklist
        writeBlacklist(bl);
        // add the default serials into the bl
        bl.addAll(DEFAULT_SERIALS);
        // do the test
        assertEquals(bl, getCurrentSerialBlacklist());
!!!2591899.java!!!	testPubkeyBlacklistMultipleLegit() : void
        // build the blacklist
        HashSet<String> bl = new HashSet<String>();
        bl.add("6ccabd7db47e94a5759901b6a7dfd45d1c091ccc");
        bl.add("6ccabd7db47e94a5759901b6a7dfd45d1c091ccd");
        // write the blacklist
        writeBlacklist(bl);
        // add the default pubkeys into the bl
        bl.addAll(DEFAULT_PUBKEYS);
        // do the test
        assertEquals(bl, getCurrentPubkeyBlacklist());
!!!2592027.java!!!	testSerialBlacklistMultipleLegit() : void
        // build the blacklist
        HashSet<String> bl = new HashSet<String>();
        bl.add("22e514121e61c643b1e9b06bd4b9f7d0");
        bl.add("22e514121e61c643b1e9b06bd4b9f7d1");
        // write the blacklist
        writeBlacklist(bl);
        // add the default serials into the bl
        bl.addAll(DEFAULT_SERIALS);
        // do the test
        assertEquals(bl, getCurrentSerialBlacklist());
!!!2592155.java!!!	testPubkeyBlacklistMultipleBad() : void
        // build the blacklist
        HashSet<String> bl = new HashSet<String>();
        bl.add("6ccabd7db47e94a5759901b6a7dfd45d1c091ccc");
        bl.add("");
        bl.add("6ccabd7db47e94a5759901b6a7dfd45d1c091ccd");
        // write the blacklist
        writeBlacklist(bl);
        // add the default pubkeys into the bl
        bl.addAll(DEFAULT_PUBKEYS);
        // remove the bad one
        bl.remove("");
        // do the test- results should be all but the bad one are handled
        assertEquals(bl, getCurrentPubkeyBlacklist());
!!!2592283.java!!!	testSerialBlacklistMultipleBad() : void
        // build the blacklist
        HashSet<String> bl = new HashSet<String>();
        bl.add("22e514121e61c643b1e9b06bd4b9f7d0");
        bl.add("");
        bl.add("22e514121e61c643b1e9b06bd4b9f7d1");
        // write the blacklist
        writeBlacklist(bl);
        // add the default serials into the bl
        bl.addAll(DEFAULT_SERIALS);
        // remove the bad one
        bl.remove("");
        // do the test- results should be all but the bad one are handled
        assertEquals(bl, getCurrentSerialBlacklist());
!!!2592411.java!!!	testPubkeyBlacklistDoesntExist() : void
        assertEquals(DEFAULT_PUBKEYS, getCurrentPubkeyBlacklist());
!!!2592539.java!!!	testSerialBlacklistDoesntExist() : void
        assertEquals(DEFAULT_SERIALS, getCurrentSerialBlacklist());
!!!2592667.java!!!	testPubkeyBlacklistNotHexValues() : void
        // build the blacklist
        HashSet<String> bl = new HashSet<String>();
        bl.add("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
        // write the blacklist
        writeBlacklist(bl);
        // do the test
        assertEquals(DEFAULT_PUBKEYS, getCurrentPubkeyBlacklist());
!!!2592795.java!!!	testSerialBlacklistNotHexValues() : void
        // build the blacklist
        HashSet<String> bl = new HashSet<String>();
        bl.add("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ");
        // write the blacklist
        writeBlacklist(bl);
        // do the test
        assertEquals(DEFAULT_SERIALS, getCurrentSerialBlacklist());
!!!2592923.java!!!	testPubkeyBlacklistIncorrectLength() : void
        // build the blacklist
        HashSet<String> bl = new HashSet<String>();
        bl.add("6ccabd7db47e94a5759901b6a7dfd45d1c091cc");
        // write the blacklist
        writeBlacklist(bl);
        // do the test
        assertEquals(DEFAULT_PUBKEYS, getCurrentPubkeyBlacklist());
!!!2593051.java!!!	testSerialBlacklistZero() : void
        // build the blacklist
        HashSet<String> bl = new HashSet<String>();
        bl.add("0");
        // write the blacklist
        writeBlacklist(bl);
        // add the default serials
        bl.addAll(DEFAULT_SERIALS);
        // do the test
        assertEquals(bl, getCurrentSerialBlacklist());
!!!2593179.java!!!	testSerialBlacklistNegative() : void
        // build the blacklist
        HashSet<String> bl = new HashSet<String>();
        bl.add("-1");
        // write the blacklist
        writeBlacklist(bl);
        // add the default serials
        bl.addAll(DEFAULT_SERIALS);
        // do the test
        assertEquals(bl, getCurrentSerialBlacklist());
!!!2593307.java!!!	testTurkTrustIntermediate1SerialBlacklist() : void
        CertBlacklist bl = new CertBlacklist();
        assertEquals(bl.isSerialNumberBlackListed(createSerialNumber(TURKTRUST_1)), true);
!!!2593435.java!!!	testTurkTrustIntermediate1PubkeyBlacklist() : void
        // build the public key
        PublicKey pk = createPublicKey(TURKTRUST_1);
        // write that to the test blacklist
        writeBlacklist(new HashSet<String>());
        // set our blacklist path
        CertBlacklist bl = new CertBlacklist();
        // check to make sure it isn't blacklisted
        assertEquals(bl.isPublicKeyBlackListed(pk), true);
!!!2593563.java!!!	testTurkTrustIntermediate2SerialBlacklist() : void
        CertBlacklist bl = new CertBlacklist();
        assertEquals(bl.isSerialNumberBlackListed(createSerialNumber(TURKTRUST_2)), true);
!!!2593691.java!!!	testTurkTrustIntermediate2PubkeyBlacklist() : void
        // build the public key
        PublicKey pk = createPublicKey(TURKTRUST_2);
        // set our blacklist path
        CertBlacklist bl = new CertBlacklist();
        // check to make sure it isn't blacklisted
        assertEquals(bl.isPublicKeyBlackListed(pk), true);
!!!2593819.java!!!	printHash(inout cert : String) : void
        System.out.println("CERTIFICATE PUBLIC KEY HASH: " + getHash(createPublicKey(cert)));
!!!2593947.java!!!	printSerial(inout cert : String) : void
        System.out.println("CERTIFICATE SERIAL NUMBER: " + createSerialNumber(cert).toString(16));
