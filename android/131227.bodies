class PropertyChangeSupport
!!!136347.java!!!	PropertyChangeSupport(inout sourceBean : Object)
        if (sourceBean == null) {
            throw new NullPointerException("sourceBean == null");
        }
        this.sourceBean = sourceBean;
!!!136475.java!!!	firePropertyChange(inout propertyName : String, inout oldValue : Object, inout newValue : Object) : void
        firePropertyChange(new PropertyChangeEvent(sourceBean, propertyName, oldValue, newValue));
!!!136603.java!!!	fireIndexedPropertyChange(inout propertyName : String, in index : int, inout oldValue : Object, inout newValue : Object) : void
        firePropertyChange(new IndexedPropertyChangeEvent(sourceBean,
                propertyName, oldValue, newValue, index));
!!!136731.java!!!	removePropertyChangeListener(inout propertyName : String, inout listener : PropertyChangeListener) : void
        for (PropertyChangeListener p : listeners) {
            if (equals(propertyName, listener, p)) {
                listeners.remove(p);
                return;
            }
        }
!!!136859.java!!!	equals(inout aName : String, inout a : EventListener, inout b : EventListener) : boolean
        /*
         * Each iteration of the loop attempts to match a pair of property names
         * from a and b. If they don't match, the chains must not be equal!
         */
        while (b instanceof PropertyChangeListenerProxy) {
            PropertyChangeListenerProxy bProxy = (PropertyChangeListenerProxy) b; // unwrap b
            String bName = bProxy.getPropertyName();
            b = bProxy.getListener();
            if (aName == null) {
                if (!(a instanceof PropertyChangeListenerProxy)) {
                    return false;
                }
                PropertyChangeListenerProxy aProxy = (PropertyChangeListenerProxy) a; // unwrap a
                aName = aProxy.getPropertyName();
                a = aProxy.getListener();
            }
            if (!Objects.equal(aName, bName)) {
                return false; // not equal; a and b subscribe to different properties
            }
            aName = null;
        }
        return aName == null && Objects.equal(a, b);
!!!136987.java!!!	addPropertyChangeListener(inout propertyName : String, inout listener : PropertyChangeListener) : void
        if (listener != null && propertyName != null) {
            listeners.add(new PropertyChangeListenerProxy(propertyName, listener));
        }
!!!137115.java!!!	getPropertyChangeListeners(inout propertyName : String) : PropertyChangeListener
        List<PropertyChangeListener> result = new ArrayList<PropertyChangeListener>();
        for (PropertyChangeListener p : listeners) {
            if (p instanceof PropertyChangeListenerProxy && Objects.equal(
                    propertyName, ((PropertyChangeListenerProxy) p).getPropertyName())) {
                result.add(p);
            }
        }
        return result.toArray(new PropertyChangeListener[result.size()]);
!!!137243.java!!!	firePropertyChange(inout propertyName : String, inout oldValue : boolean, inout newValue : boolean) : void
        firePropertyChange(propertyName, Boolean.valueOf(oldValue), Boolean.valueOf(newValue));
!!!137371.java!!!	fireIndexedPropertyChange(inout propertyName : String, in index : int, inout oldValue : boolean, inout newValue : boolean) : void
        if (oldValue != newValue) {
            fireIndexedPropertyChange(propertyName, index,
                    Boolean.valueOf(oldValue), Boolean.valueOf(newValue));
        }
!!!137499.java!!!	firePropertyChange(inout propertyName : String, in oldValue : int, in newValue : int) : void
        firePropertyChange(propertyName, Integer.valueOf(oldValue), Integer.valueOf(newValue));
!!!137627.java!!!	fireIndexedPropertyChange(inout propertyName : String, in index : int, in oldValue : int, in newValue : int) : void
        if (oldValue != newValue) {
            fireIndexedPropertyChange(propertyName, index,
                    Integer.valueOf(oldValue), Integer.valueOf(newValue));
        }
!!!137755.java!!!	hasListeners(inout propertyName : String) : boolean
        for (PropertyChangeListener p : listeners) {
            if (!(p instanceof PropertyChangeListenerProxy) || Objects.equal(
                    propertyName, ((PropertyChangeListenerProxy) p).getPropertyName())) {
                return true;
            }
        }
        return false;
!!!137883.java!!!	removePropertyChangeListener(inout listener : PropertyChangeListener) : void
        for (PropertyChangeListener p : listeners) {
            if (equals(null, listener, p)) {
                listeners.remove(p);
                return;
            }
        }
!!!138011.java!!!	addPropertyChangeListener(inout listener : PropertyChangeListener) : void
        if (listener != null) {
            listeners.add(listener);
        }
!!!138139.java!!!	getPropertyChangeListeners() : PropertyChangeListener
        return listeners.toArray(new PropertyChangeListener[0]); // 0 to avoid synchronization
!!!138267.java!!!	writeObject(inout out : ObjectOutputStream) : void
        /*
         * The serialized form of this class uses PropertyChangeSupport to group
         * PropertyChangeListeners subscribed to the same property name.
         */
        Map<String, PropertyChangeSupport> map = new Hashtable<String, PropertyChangeSupport>();
        for (PropertyChangeListener p : listeners) {
            if (p instanceof PropertyChangeListenerProxy && !(p instanceof Serializable)) {
                PropertyChangeListenerProxy proxy = (PropertyChangeListenerProxy) p;
                PropertyChangeListener listener = (PropertyChangeListener) proxy.getListener();
                if (listener instanceof Serializable) {
                    PropertyChangeSupport list = map.get(proxy.getPropertyName());
                    if (list == null) {
                        list = new PropertyChangeSupport(sourceBean);
                        map.put(proxy.getPropertyName(), list);
                    }
                    list.listeners.add(listener);
                }
            }
        }

        ObjectOutputStream.PutField putFields = out.putFields();
        putFields.put("source", sourceBean);
        putFields.put("children", map);
        out.writeFields();

        for (PropertyChangeListener p : listeners) {
            if (p instanceof Serializable) {
                out.writeObject(p);
            }
        }
        out.writeObject(null);
!!!138395.java!!!	readObject(inout in : ObjectInputStream) : void
        ObjectInputStream.GetField readFields = in.readFields();
        sourceBean = readFields.get("source", null);
        listeners = new CopyOnWriteArrayList<PropertyChangeListener>();

        Map<String, PropertyChangeSupport> children
                = (Map<String, PropertyChangeSupport>) readFields.get("children", null);
        if (children != null) {
            for (Map.Entry<String, PropertyChangeSupport> entry : children.entrySet()) {
                for (PropertyChangeListener p : entry.getValue().listeners) {
                    listeners.add(new PropertyChangeListenerProxy(entry.getKey(), p));
                }
            }
        }

        PropertyChangeListener listener;
        while ((listener = (PropertyChangeListener) in.readObject()) != null) {
            listeners.add(listener);
        }
!!!138523.java!!!	firePropertyChange(inout event : PropertyChangeEvent) : void
        String propertyName = event.getPropertyName();
        Object oldValue = event.getOldValue();
        Object newValue = event.getNewValue();
        if (newValue != null && oldValue != null && newValue.equals(oldValue)) {
            return;
        }

        notifyEachListener:
        for (PropertyChangeListener p : listeners) {
            // unwrap listener proxies until we get a mismatched name or the real listener
            while (p instanceof PropertyChangeListenerProxy) {
                PropertyChangeListenerProxy proxy = (PropertyChangeListenerProxy) p;
                if (!Objects.equal(proxy.getPropertyName(), propertyName)) {
                    continue notifyEachListener;
                }
                p = (PropertyChangeListener) proxy.getListener();
            }
            p.propertyChange(event);
        }
