class Double
!!!327835.java!!!	Double(in value : double)
        this.value = value;
!!!327963.java!!!	Double(inout string : String)
        this(parseDouble(string));
!!!328091.java!!!	compareTo(inout object : Double) : int
        return compare(value, object.value);
!!!328219.java!!!	byteValue() : byte
        return (byte) value;
!!!328603.java!!!	doubleValue() : double
        return value;
!!!328731.java!!!	equals(inout object : Object) : boolean
        return (object instanceof Double) &&
                (doubleToLongBits(this.value) == doubleToLongBits(((Double) object).value));
!!!328859.java!!!	floatValue() : float
        return (float) value;
!!!328987.java!!!	hashCode() : int
        long v = doubleToLongBits(value);
        return (int) (v ^ (v >>> 32));
!!!329115.java!!!	intValue() : int
        return (int) value;
!!!329243.java!!!	isInfinite() : boolean
        return isInfinite(value);
!!!329371.java!!!	isInfinite(in d : double) : boolean
        return (d == POSITIVE_INFINITY) || (d == NEGATIVE_INFINITY);
!!!329499.java!!!	isNaN() : boolean
        return isNaN(value);
!!!329627.java!!!	isNaN(in d : double) : boolean
        return d != d;
!!!329883.java!!!	longValue() : long
        return (long) value;
!!!330011.java!!!	parseDouble(inout string : String) : double
        return StringToReal.parseDouble(string);
!!!330139.java!!!	shortValue() : short
        return (short) value;
!!!330267.java!!!	toString() : String
        return Double.toString(value);
!!!330395.java!!!	toString(in d : double) : String
        return RealToString.getInstance().doubleToString(d);
!!!330523.java!!!	valueOf(inout string : String) : Double
        return parseDouble(string);
!!!330651.java!!!	compare(in double1 : double, in double2 : double) : int
        // Non-zero, non-NaN checking.
        if (double1 > double2) {
            return 1;
        }
        if (double2 > double1) {
            return -1;
        }
        if (double1 == double2 && 0.0d != double1) {
            return 0;
        }

        // NaNs are equal to other NaNs and larger than any other double
        if (isNaN(double1)) {
            if (isNaN(double2)) {
                return 0;
            }
            return 1;
        } else if (isNaN(double2)) {
            return -1;
        }

        // Deal with +0.0 and -0.0
        long d1 = doubleToRawLongBits(double1);
        long d2 = doubleToRawLongBits(double2);
        // The below expression is equivalent to:
        // (d1 == d2) ? 0 : (d1 < d2) ? -1 : 1
        return (int) ((d1 >> 63) - (d2 >> 63));
!!!330779.java!!!	valueOf(in d : double) : Double
        return new Double(d);
!!!330907.java!!!	toHexString(in d : double) : String
        /*
         * Reference: http://en.wikipedia.org/wiki/IEEE_754-1985
         */
        if (d != d) {
            return "NaN";
        }
        if (d == POSITIVE_INFINITY) {
            return "Infinity";
        }
        if (d == NEGATIVE_INFINITY) {
            return "-Infinity";
        }

        long bitValue = doubleToLongBits(d);

        boolean negative = (bitValue & 0x8000000000000000L) != 0;
        // mask exponent bits and shift down
        long exponent = (bitValue & 0x7FF0000000000000L) >>> 52;
        // mask significand bits and shift up
        long significand = bitValue & 0x000FFFFFFFFFFFFFL;

        if (exponent == 0 && significand == 0) {
            return (negative ? "-0x0.0p0" : "0x0.0p0");
        }

        StringBuilder hexString = new StringBuilder(10);
        if (negative) {
            hexString.append("-0x");
        } else {
            hexString.append("0x");
        }

        if (exponent == 0) { // denormal (subnormal) value
            hexString.append("0.");
            // significand is 52-bits, so there can be 13 hex digits
            int fractionDigits = 13;
            // remove trailing hex zeros, so Integer.toHexString() won't print
            // them
            while ((significand != 0) && ((significand & 0xF) == 0)) {
                significand >>>= 4;
                fractionDigits--;
            }
            // this assumes Integer.toHexString() returns lowercase characters
            String hexSignificand = Long.toHexString(significand);

            // if there are digits left, then insert some '0' chars first
            if (significand != 0 && fractionDigits > hexSignificand.length()) {
                int digitDiff = fractionDigits - hexSignificand.length();
                while (digitDiff-- != 0) {
                    hexString.append('0');
                }
            }
            hexString.append(hexSignificand);
            hexString.append("p-1022");
        } else { // normal value
            hexString.append("1.");
            // significand is 52-bits, so there can be 13 hex digits
            int fractionDigits = 13;
            // remove trailing hex zeros, so Integer.toHexString() won't print
            // them
            while ((significand != 0) && ((significand & 0xF) == 0)) {
                significand >>>= 4;
                fractionDigits--;
            }
            // this assumes Integer.toHexString() returns lowercase characters
            String hexSignificand = Long.toHexString(significand);

            // if there are digits left, then insert some '0' chars first
            if (significand != 0 && fractionDigits > hexSignificand.length()) {
                int digitDiff = fractionDigits - hexSignificand.length();
                while (digitDiff-- != 0) {
                    hexString.append('0');
                }
            }

            hexString.append(hexSignificand);
            hexString.append('p');
            // remove exponent's 'bias' and convert to a string
            hexString.append(Long.toString(exponent - 1023));
        }
        return hexString.toString();
