class SimPukUnlockScreen
!!!7994764.java!!!	SimPukUnlockScreen(inout context : Context, inout configuration : Configuration, inout updateMonitor : KeyguardUpdateMonitor, inout callback : KeyguardScreenCallback, inout lockpatternutils : LockPatternUtils)
        super(context);
        mUpdateMonitor = updateMonitor;
        mCallback = callback;;

        mCreationOrientation = configuration.orientation;
        mKeyboardHidden = configuration.hardKeyboardHidden;
        mLockPatternUtils = lockpatternutils;

        LayoutInflater inflater = LayoutInflater.from(context);
        if (mKeyboardHidden == Configuration.HARDKEYBOARDHIDDEN_NO) {
            inflater.inflate(
                    R.layout.keyguard_screen_sim_puk_landscape, this, true);
        } else {
            inflater.inflate(
                    R.layout.keyguard_screen_sim_puk_portrait, this, true);
            new TouchInput();
        }

        mHeaderText = (TextView) findViewById(R.id.headerText);

        mPukText = (TextView) findViewById(R.id.pukDisplay);
        mPinText = (TextView) findViewById(R.id.pinDisplay);
        mDelPukButton = findViewById(R.id.pukDel);
        mDelPinButton = findViewById(R.id.pinDel);
        mOkButton = findViewById(R.id.ok);

        mDelPinButton.setOnClickListener(this);
        mDelPukButton.setOnClickListener(this);
        mOkButton.setOnClickListener(this);

        mHeaderText.setText(R.string.keyguard_password_enter_puk_code);
        // To make marquee work
        mHeaderText.setSelected(true);

        mKeyguardStatusViewManager = new KeyguardStatusViewManager(this, updateMonitor,
                lockpatternutils, callback, true);

        mPinText.setFocusableInTouchMode(true);
        mPinText.setOnFocusChangeListener(this);
        mPukText.setFocusableInTouchMode(true);
        mPukText.setOnFocusChangeListener(this);
!!!7994892.java!!!	needsInput() : boolean
        return false;
!!!7995020.java!!!	onPause() : void
        mKeyguardStatusViewManager.onPause();
!!!7995148.java!!!	onResume() : void
        // start fresh
        mHeaderText.setText(R.string.keyguard_password_enter_puk_code);
        mKeyguardStatusViewManager.onResume();
!!!7995276.java!!!	cleanUp() : void
        // dismiss the dialog.
        if (mSimUnlockProgressDialog != null) {
            mSimUnlockProgressDialog.dismiss();
            mSimUnlockProgressDialog = null;
        }
        mUpdateMonitor.removeCallback(this);
!!!7995788.java!!!	onClick(inout v : View) : void
        if (v == mDelPukButton) {
            if (mFocusedEntry != mPukText)
                mPukText.requestFocus();
            final Editable digits = mPukText.getEditableText();
            final int len = digits.length();
            if (len > 0) {
                digits.delete(len-1, len);
            }
        } else if (v == mDelPinButton) {
            if (mFocusedEntry != mPinText)
                mPinText.requestFocus();
            final Editable digits = mPinText.getEditableText();
            final int len = digits.length();
            if (len > 0) {
                digits.delete(len-1, len);
            }
        } else if (v == mOkButton) {
            checkPuk();
        }
        mCallback.pokeWakelock(DIGIT_PRESS_WAKE_MILLIS);

!!!7995916.java!!!	onFocusChange(inout v : View, inout hasFocus : boolean) : void
        if (hasFocus)
            mFocusedEntry = (TextView)v;
!!!7996044.java!!!	getSimUnlockProgressDialog() : Dialog
        if (mSimUnlockProgressDialog == null) {
            mSimUnlockProgressDialog = new ProgressDialog(mContext);
            mSimUnlockProgressDialog.setMessage(
                    mContext.getString(R.string.lockscreen_sim_unlock_progress_dialog_message));
            mSimUnlockProgressDialog.setIndeterminate(true);
            mSimUnlockProgressDialog.setCancelable(false);
            mSimUnlockProgressDialog.getWindow().setType(
                    WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);
        }
        return mSimUnlockProgressDialog;
!!!7996172.java!!!	checkPuk() : void
        // make sure that the puk is at least 8 digits long.
        if (mPukText.getText().length() < 8) {
            // otherwise, display a message to the user, and don't submit.
            mHeaderText.setText(R.string.invalidPuk);
            mPukText.setText("");
            return;
        }

        if (mPinText.getText().length() < 4
                || mPinText.getText().length() > 8) {
            // otherwise, display a message to the user, and don't submit.
            mHeaderText.setText(R.string.invalidPin);
            mPinText.setText("");
            return;
        }

        getSimUnlockProgressDialog().show();

        new CheckSimPuk(mPukText.getText().toString(),
                mPinText.getText().toString()) {
            void onSimLockChangedResponse(final boolean success) {
                mPinText.post(new Runnable() {
                    public void run() {
                        if (mSimUnlockProgressDialog != null) {
                            mSimUnlockProgressDialog.hide();
                        }
                        if (success) {
                            // before closing the keyguard, report back that
                            // the sim is unlocked so it knows right away
                            mUpdateMonitor.reportSimUnlocked();
                            mCallback.goToUnlockScreen();
                        } else {
                            mHeaderText.setText(R.string.badPuk);
                            mPukText.setText("");
                            mPinText.setText("");
                        }
                    }
                });
            }
        }.start();
!!!7996300.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            mCallback.goToLockScreen();
            return true;
        }
        final char match = event.getMatch(DIGITS);
        if (match != 0) {
            reportDigit(match - '0');
            return true;
        }
        if (keyCode == KeyEvent.KEYCODE_DEL) {
            mFocusedEntry.onKeyDown(keyCode, event);
            final Editable digits = mFocusedEntry.getEditableText();
            final int len = digits.length();
            if (len > 0) {
                digits.delete(len-1, len);
            }
            mCallback.pokeWakelock(DIGIT_PRESS_WAKE_MILLIS);
            return true;
        }

        if (keyCode == KeyEvent.KEYCODE_ENTER) {
            checkPuk();
            return true;
        }

        return false;
!!!7996428.java!!!	reportDigit(in digit : int) : void
        mFocusedEntry.append(Integer.toString(digit));
!!!7996556.java!!!	updateConfiguration() : void
        Configuration newConfig = getResources().getConfiguration();
        if (newConfig.orientation != mCreationOrientation) {
            mCallback.recreateMe(newConfig);
        } else if (newConfig.hardKeyboardHidden != mKeyboardHidden) {
            mKeyboardHidden = newConfig.hardKeyboardHidden;
        }

!!!7996684.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();
        updateConfiguration();
!!!7996812.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
        super.onConfigurationChanged(newConfig);
        updateConfiguration();
