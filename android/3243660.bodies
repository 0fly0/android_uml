class BluetoothEventManager
!!!13969164.java!!!	addHandler(in action : String, inout handler : Handler) : void
        mHandlerMap.put(action, handler);
        mAdapterIntentFilter.addAction(action);
!!!13969292.java!!!	addProfileHandler(in action : String, inout handler : Handler) : void
        mHandlerMap.put(action, handler);
        mProfileIntentFilter.addAction(action);
!!!13969420.java!!!	setProfileManager(inout manager : LocalBluetoothProfileManager) : void
        mProfileManager = manager;
!!!13969548.java!!!	BluetoothEventManager(inout adapter : LocalBluetoothAdapter, inout deviceManager : CachedBluetoothDeviceManager, inout context : Context)
        mLocalAdapter = adapter;
        mDeviceManager = deviceManager;
        mAdapterIntentFilter = new IntentFilter();
        mProfileIntentFilter = new IntentFilter();
        mHandlerMap = new HashMap<String, Handler>();
        mContext = context;

        // Bluetooth on/off broadcasts
        addHandler(BluetoothAdapter.ACTION_STATE_CHANGED, new AdapterStateChangedHandler());

        // Discovery broadcasts
        addHandler(BluetoothAdapter.ACTION_DISCOVERY_STARTED, new ScanningStateChangedHandler(true));
        addHandler(BluetoothAdapter.ACTION_DISCOVERY_FINISHED, new ScanningStateChangedHandler(false));
        addHandler(BluetoothDevice.ACTION_FOUND, new DeviceFoundHandler());
        addHandler(BluetoothDevice.ACTION_DISAPPEARED, new DeviceDisappearedHandler());
        addHandler(BluetoothDevice.ACTION_NAME_CHANGED, new NameChangedHandler());

        // Pairing broadcasts
        addHandler(BluetoothDevice.ACTION_BOND_STATE_CHANGED, new BondStateChangedHandler());
        addHandler(BluetoothDevice.ACTION_PAIRING_CANCEL, new PairingCancelHandler());

        // Fine-grained state broadcasts
        addHandler(BluetoothDevice.ACTION_CLASS_CHANGED, new ClassChangedHandler());
        addHandler(BluetoothDevice.ACTION_UUID, new UuidChangedHandler());

        // Dock event broadcasts
        addHandler(Intent.ACTION_DOCK_EVENT, new DockEventHandler());

        mContext.registerReceiver(mBroadcastReceiver, mAdapterIntentFilter);
!!!13969676.java!!!	registerProfileIntentReceiver() : void
        mContext.registerReceiver(mBroadcastReceiver, mProfileIntentFilter);
!!!13969804.java!!!	registerCallback(inout callback : BluetoothCallback) : void
        synchronized (mCallbacks) {
            mCallbacks.add(callback);
        }
!!!13969932.java!!!	unregisterCallback(inout callback : BluetoothCallback) : void
        synchronized (mCallbacks) {
            mCallbacks.remove(callback);
        }
!!!13970060.java!!!	getDockedDeviceAddress(inout context : Context) : String
        // This works only because these broadcast intents are "sticky"
        Intent i = context.registerReceiver(null, new IntentFilter(Intent.ACTION_DOCK_EVENT));
        if (i != null) {
            int state = i.getIntExtra(Intent.EXTRA_DOCK_STATE, Intent.EXTRA_DOCK_STATE_UNDOCKED);
            if (state != Intent.EXTRA_DOCK_STATE_UNDOCKED) {
                BluetoothDevice device = i.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
                if (device != null) {
                    return device.getAddress();
                }
            }
        }
        return null;
!!!13970700.java!!!	dispatchDeviceAdded(inout cachedDevice : CachedBluetoothDevice) : void
        synchronized (mCallbacks) {
            for (BluetoothCallback callback : mCallbacks) {
                callback.onDeviceAdded(cachedDevice);
            }
        }
!!!13971852.java!!!	readPairedDevices() : boolean
        Set<BluetoothDevice> bondedDevices = mLocalAdapter.getBondedDevices();
        if (bondedDevices == null) {
            return false;
        }

        boolean deviceAdded = false;
        for (BluetoothDevice device : bondedDevices) {
            CachedBluetoothDevice cachedDevice = mDeviceManager.findDevice(device);
            if (cachedDevice == null) {
                cachedDevice = mDeviceManager.addDevice(mLocalAdapter, mProfileManager, device);
                dispatchDeviceAdded(cachedDevice);
                deviceAdded = true;
            }
        }

        return deviceAdded;
