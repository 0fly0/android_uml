class TimeZone
!!!1365787.java!!!	clone() : Object
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!1365915.java!!!	getAvailableIDs() : String
        return ZoneInfoDB.getAvailableIDs();
!!!1366043.java!!!	getAvailableIDs(in offsetMillis : int) : String
        return ZoneInfoDB.getAvailableIDs(offsetMillis);
!!!1366171.java!!!	getDefault() : TimeZone
        if (defaultTimeZone == null) {
            defaultTimeZone = ZoneInfoDB.getSystemDefault();
        }
        return (TimeZone) defaultTimeZone.clone();
!!!1366299.java!!!	getDisplayName() : String
        return getDisplayName(false, LONG, Locale.getDefault());
!!!1366427.java!!!	getDisplayName(inout locale : Locale) : String
        return getDisplayName(false, LONG, locale);
!!!1366555.java!!!	getDisplayName(inout daylightTime : boolean, in style : int) : String
        return getDisplayName(daylightTime, style, Locale.getDefault());
!!!1366683.java!!!	getDisplayName(inout daylightTime : boolean, in style : int, inout locale : Locale) : String
        if (style != SHORT && style != LONG) {
            throw new IllegalArgumentException("Bad style: " + style);
        }

        String[][] zoneStrings = TimeZoneNames.getZoneStrings(locale);
        String result = TimeZoneNames.getDisplayName(zoneStrings, getID(), daylightTime, style);
        if (result != null) {
            return result;
        }

        // If we get here, it's because icu4c has nothing for us. Most commonly, this is in the
        // case of short names. For Pacific/Fiji, for example, icu4c has nothing better to offer
        // than "GMT+12:00". Why do we re-do this work ourselves? Because we have up-to-date
        // time zone transition data, which icu4c _doesn't_ use --- it uses its own baked-in copy,
        // which only gets updated when we update icu4c. http://b/7955614 and http://b/8026776.

        // TODO: should we generate these once, in TimeZoneNames.getDisplayName? Revisit when we
        // upgrade to icu4c 50 and rewrite the underlying native code. See also the
        // "element[j] != null" check in SimpleDateFormat.parseTimeZone, and the extra work in
        // DateFormatSymbols.getZoneStrings.

        int offset = getRawOffset();
        if (daylightTime) {
            offset += getDSTSavings();
        }
        offset /= 60000;
        char sign = '+';
        if (offset < 0) {
            sign = '-';
            offset = -offset;
        }
        StringBuilder builder = new StringBuilder(9);
        builder.append("GMT");
        builder.append(sign);
        appendNumber(builder, 2, offset / 60);
        builder.append(':');
        appendNumber(builder, 2, offset % 60);
        return builder.toString();
!!!1366811.java!!!	appendNumber(inout builder : StringBuilder, in count : int, in value : int) : void
        String string = Integer.toString(value);
        for (int i = 0; i < count - string.length(); i++) {
            builder.append('0');
        }
        builder.append(string);
!!!1366939.java!!!	getID() : String
        return ID;
!!!1367067.java!!!	getDSTSavings() : int
        return useDaylightTime() ? 3600000 : 0;
!!!1367195.java!!!	getOffset(in time : long) : int
        if (inDaylightTime(new Date(time))) {
            return getRawOffset() + getDSTSavings();
        }
        return getRawOffset();
!!!1367579.java!!!	getTimeZone(inout id : String) : TimeZone
        if (id == null) {
            throw new NullPointerException("id == null");
        }

        // Special cases? These can clone an existing instance.
        // TODO: should we just add a cache to ZoneInfoDB instead?
        if (id.length() == 3) {
            if (id.equals("GMT")) {
                return (TimeZone) GMT.clone();
            }
            if (id.equals("UTC")) {
                return (TimeZone) UTC.clone();
            }
        }

        // In the database?
        TimeZone zone = null;
        try {
            zone = ZoneInfoDB.makeTimeZone(id);
        } catch (IOException ignored) {
        }

        // Custom time zone?
        if (zone == null && id.length() > 3 && id.startsWith("GMT")) {
            zone = getCustomTimeZone(id);
        }

        // We never return null; on failure we return the equivalent of "GMT".
        return (zone != null) ? zone : (TimeZone) GMT.clone();
!!!1367707.java!!!	getCustomTimeZone(inout id : String) : TimeZone
        Matcher m = CUSTOM_ZONE_ID_PATTERN.matcher(id);
        if (!m.matches()) {
            return null;
        }

        int hour;
        int minute = 0;
        try {
            hour = Integer.parseInt(m.group(1));
            if (m.group(3) != null) {
                minute = Integer.parseInt(m.group(3));
            }
        } catch (NumberFormatException impossible) {
            throw new AssertionError(impossible);
        }

        if (hour < 0 || hour > 23 || minute < 0 || minute > 59) {
            return null;
        }

        char sign = id.charAt(3);
        int raw = (hour * 3600000) + (minute * 60000);
        if (sign == '-') {
            raw = -raw;
        }

        String cleanId = String.format("GMT%c%02d:%02d", sign, hour, minute);
        return new SimpleTimeZone(raw, cleanId);
!!!1367835.java!!!	hasSameRules(inout timeZone : TimeZone) : boolean
        if (timeZone == null) {
            return false;
        }
        return getRawOffset() == timeZone.getRawOffset();
!!!1368091.java!!!	setDefault(inout timeZone : TimeZone) : void
        defaultTimeZone = timeZone != null ? (TimeZone) timeZone.clone() : null;
!!!1368219.java!!!	setID(inout id : String) : void
        if (id == null) {
            throw new NullPointerException("id == null");
        }
        ID = id;
