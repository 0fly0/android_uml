class CorrectedGyroSensor
!!!1715084.cpp!!!	CorrectedGyroSensor(in list : sensor_t, in count : size_t)
    for (size_t i=0 ; i<count ; i++) {
        if (list[i].type == SENSOR_TYPE_GYROSCOPE) {
            mGyro = Sensor(list + i);
            break;
        }
    }
!!!1715212.cpp!!!	process(inout outEvent : sensors_event_t, in event : sensors_event_t) : bool
    if (event.type == SENSOR_TYPE_GYROSCOPE) {
        const vec3_t bias(mSensorFusion.getGyroBias());
        *outEvent = event;
        outEvent->data[0] -= bias.x;
        outEvent->data[1] -= bias.y;
        outEvent->data[2] -= bias.z;
        outEvent->sensor = '_cgy';
        return true;
    }
    return false;
!!!1715340.cpp!!!	activate(inout ident : void, in enabled : bool) : status_t
    mSensorDevice.activate(this, mGyro.getHandle(), enabled);
    return mSensorFusion.activate(this, enabled);
!!!1715468.cpp!!!	setDelay(inout ident : void, in handle : int, in ns : int64_t) : status_t
    mSensorDevice.setDelay(this, mGyro.getHandle(), ns);
    return mSensorFusion.setDelay(this, ns);
!!!1715596.cpp!!!	getSensor() : Sensor
    sensor_t hwSensor;
    hwSensor.name       = "Corrected Gyroscope Sensor";
    hwSensor.vendor     = "Google Inc.";
    hwSensor.version    = 1;
    hwSensor.handle     = '_cgy';
    hwSensor.type       = SENSOR_TYPE_GYROSCOPE;
    hwSensor.maxRange   = mGyro.getMaxValue();
    hwSensor.resolution = mGyro.getResolution();
    hwSensor.power      = mSensorFusion.getPowerUsage();
    hwSensor.minDelay   = mGyro.getMinDelay();
    Sensor sensor(&hwSensor);
    return sensor;
