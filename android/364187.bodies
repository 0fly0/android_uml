class OpenSSLDSAPublicKey
!!!2416795.java!!!	OpenSSLDSAPublicKey(inout key : OpenSSLKey)
        this.key = key;
!!!2416923.java!!!	getOpenSSLKey() : OpenSSLKey
        return key;
!!!2417051.java!!!	OpenSSLDSAPublicKey(inout dsaKeySpec : DSAPublicKeySpec)
        try {
            key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_DSA(
                    dsaKeySpec.getP().toByteArray(),
                    dsaKeySpec.getQ().toByteArray(),
                    dsaKeySpec.getG().toByteArray(),
                    dsaKeySpec.getY().toByteArray(),
                    null));
        } catch (Exception e) {
            throw new InvalidKeySpecException(e);
        }
!!!2417179.java!!!	ensureReadParams() : void
        if (params == null) {
            params = new OpenSSLDSAParams(key);
        }
!!!2417307.java!!!	getInstance(inout dsaPublicKey : DSAPublicKey) : OpenSSLKey
        try {
            final DSAParams dsaParams = dsaPublicKey.getParams();
            return new OpenSSLKey(NativeCrypto.EVP_PKEY_new_DSA(
                    dsaParams.getP().toByteArray(),
                    dsaParams.getQ().toByteArray(),
                    dsaParams.getG().toByteArray(),
                    dsaPublicKey.getY().toByteArray(),
                    null));
        } catch (Exception e) {
            throw new InvalidKeyException(e);
        }
!!!2417435.java!!!	getParams() : DSAParams
        ensureReadParams();

        /*
         * DSA keys can lack parameters if they're part of a certificate
         * chain. In this case, we just return null.
         */
        if (!params.hasParams()) {
            return null;
        }

        return params;
!!!2417563.java!!!	getAlgorithm() : String
        return "DSA";
!!!2417691.java!!!	getFormat() : String
        return "X.509";
!!!2417819.java!!!	getEncoded() : byte
        return NativeCrypto.i2d_PUBKEY(key.getPkeyContext());
!!!2417947.java!!!	getY() : BigInteger
        ensureReadParams();
        return params.getY();
!!!2418075.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }

        if (o instanceof OpenSSLDSAPublicKey) {
            OpenSSLDSAPublicKey other = (OpenSSLDSAPublicKey) o;

            /*
             * We can shortcut the true case, but it still may be equivalent but
             * different copies.
             */
            if (key.equals(other.getOpenSSLKey())) {
                return true;
            }
        }

        if (!(o instanceof DSAPublicKey)) {
            return false;
        }

        ensureReadParams();

        DSAPublicKey other = (DSAPublicKey) o;
        return params.getY().equals(other.getY()) && params.equals(other.getParams());
!!!2418203.java!!!	hashCode() : int
        ensureReadParams();

        return params.getY().hashCode() ^ params.hashCode();
!!!2418331.java!!!	toString() : String
        ensureReadParams();

        final StringBuilder sb = new StringBuilder("OpenSSLDSAPublicKey{");
        sb.append("Y=");
        sb.append(params.getY().toString(16));
        sb.append(',');
        sb.append("params=");
        sb.append(params.toString());
        sb.append('}');

        return sb.toString();
!!!2418459.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();

        final BigInteger g = (BigInteger) stream.readObject();
        final BigInteger p = (BigInteger) stream.readObject();
        final BigInteger q = (BigInteger) stream.readObject();
        final BigInteger y = (BigInteger) stream.readObject();

        key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_DSA(
                p.toByteArray(),
                q.toByteArray(),
                g.toByteArray(),
                y.toByteArray(),
                null));
!!!2418587.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        if (getOpenSSLKey().isEngineBased()) {
            throw new NotSerializableException("engine-based keys can not be serialized");
        }
        stream.defaultWriteObject();

        ensureReadParams();
        stream.writeObject(params.getG());
        stream.writeObject(params.getP());
        stream.writeObject(params.getQ());
        stream.writeObject(params.getY());
