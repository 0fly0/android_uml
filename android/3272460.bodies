class EditChannelLineupActivity
!!!14198668.java!!!	getUpdateAvailableChannelsTask() : UpdateAvailableChannelsTask
        return mStaticUpdateChannelsTask;
!!!14198796.java!!!	setUpdateAvailableChannelsTask(inout updateChannelsTask : UpdateAvailableChannelsTask) : void
        mStaticUpdateChannelsTask = updateChannelsTask;
!!!14198924.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        if (ENABLE_STRICT_MODE) {
            StrictMode.setThreadPolicy(new StrictMode.ThreadPolicy.Builder()
                    .detectAll()
                    .penaltyLog()
                    .build());
        }
        Window window = getWindow();
        window.setLayout(WindowManager.LayoutParams.FILL_PARENT,
                WindowManager.LayoutParams.WRAP_CONTENT);
        setContentView(R.layout.edit_channels);
        setupFilterText();
        setupButtons();
        setupList();
        // Automatically pass keypresses within the list view to the filter
        // field.
        mListView.setOnKeyListener(new ChannelSearchKeyListener(mFilterText));
        // Not worth overriding XML just for this.
        mListView.setCacheColorHint(0);
        mListView.requestFocus();
        int activityWidth = getResources().getDimensionPixelSize(R.dimen.activity_width);
        getWindow().setLayout(activityWidth, ViewGroup.LayoutParams.WRAP_CONTENT);

        // Make the dialog as tall as possible.
        WindowManager.LayoutParams lp = getWindow().getAttributes();
        lp.height = WindowManager.LayoutParams.MATCH_PARENT;
        getWindow().setAttributes(lp);

        Context resourceContext = new GtvResources(this).getResourceContext();
        mChannelSourceList = getChannelSourceList();
!!!14199052.java!!!	getIconForChannelSource(in source : int) : Bitmap
        for (ChannelSource channelSource : mChannelSourceList) {
            if (channelSource.getSource() == source) {
                return channelSource.getIcon();
            }
        }
        return null;
!!!14199180.java!!!	getChannelSourceList() : ChannelSource
        ArrayList<ChannelSource> channelSourceList = new ArrayList<ChannelSource>();

        Cursor cursor = getContentResolver().query(ChannelSources.CHANNEL_SOURCES_URI,
                ChannelSources.CHANNEL_SOURCES_PROJECTION, null, null, null);
        if (cursor != null) {
            while (cursor.moveToNext()) {
                int source = cursor.getInt(ChannelSources.INDEX_INDEX);
                String title = cursor.getString(ChannelSources.NAME_INDEX);
                byte[] iconBytes = cursor.getBlob(ChannelSources.ICON_INDEX);
                Bitmap icon = iconBytes == null ? null :
                      BitmapFactory.decodeStream(new ByteArrayInputStream(iconBytes));
                channelSourceList.add(new ChannelSource(source, title, icon));
            }
            cursor.close();
        }

        return channelSourceList;
!!!14199308.java!!!	onResume() : void
        if (DEBUG) Log.d(LOG_TAG, "onResume()");
        mResumed = true;

        mUpdateChannelsTask = (MyUpdateAvailableChannelsTask) getUpdateAvailableChannelsTask();
        if (mUpdateChannelsTask != null) {
            mUpdateChannelsTask.setParentActivity(this);
        }

        if (DEBUG) Log.d(LOG_TAG, "mUpdateChannelsTask=" + mUpdateChannelsTask);
        super.onResume();

        if (mUpdateChannelsTask != null) {
            if (DEBUG) Log.d(LOG_TAG, "update is still running");
            // An update task is still running from a previous onPause(); show
            // the progress bar, and set the flag so we know to load the
            // channel list when it completes.
            mShouldLoadList = true;
            setBusy(true);
        } else {
            if (DEBUG) Log.d(LOG_TAG, "loading the channel list");
            // Start loading the channel list.
            mLoadChannelsTask = new MyLoadChannelListTask(this, getDevice().getId());
            mLoadChannelsTask.execute();
        }
!!!14199436.java!!!	onPause() : void
        if (DEBUG) Log.d(LOG_TAG, "onPause");
        mResumed = false;

        mUpdateChannelsTask = new MyUpdateAvailableChannelsTask(this);
        setUpdateAvailableChannelsTask(mUpdateChannelsTask);
        mUpdateChannelsTask.execute(getDevice().getId());
        super.onPause();
!!!14199564.java!!!	onStop() : void
        if (DEBUG) Log.d(LOG_TAG, "onStop");
        mResumed = false;
        super.onStop();
!!!14199692.java!!!	onDestroy() : void
        if (mUpdateChannelsTask != null) {
            mUpdateChannelsTask.setParentActivity(null);
        }
        if (DEBUG) Log.d(LOG_TAG, "onDestroy");
        super.onDestroy();
!!!14199820.java!!!	setupButtons() : void
        mButtonEnableAll = (Button) findViewById(R.id.button_enable);
        mButtonEnableAll.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setAllChannelsEnabled(true);
            }
        });

        mButtonDisableAll = (Button) findViewById(R.id.button_disable);
        mButtonDisableAll.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                setAllChannelsEnabled(false);
            }
        });
!!!14199948.java!!!	setupList() : void
        mListView = getListView();
        mProgressBar = (ProgressBar) findViewById(R.id.progress_bar);
        mEmptyView = (TextView) findViewById(R.id.empty);
        mAdapter = new MyChannelListAdapter(this);
        setListAdapter(mAdapter);

        setTitle(getString(R.string.edit_channels_activity, getDevice().getLabel()));
        mListView.setItemsCanFocus(false);
        mListView.setChoiceMode(ListView.CHOICE_MODE_MULTIPLE);
        mListView.setOnItemClickListener(new OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view,
                    int position, long id) {
                // Toggle the state.
                Channel channel = mAdapter.getItem(position);
                channel.setEnabled(!channel.isEnabled());
                mAdapter.notifyList();
            }
        });

        setBusy(true);
!!!14200076.java!!!	setupFilterText() : void
        mFilterText = (EditText) findViewById(R.id.filter);
        mFilterText.addTextChangedListener(new TextWatcher() {
            @Override
            public void afterTextChanged(Editable s) {
                filterText(mFilterText.getText());
            }

            @Override
            public void beforeTextChanged(
                    CharSequence s, int start, int count, int after) {}

            @Override
            public void onTextChanged(
                    CharSequence s, int start, int before, int count) {}
        });
!!!14200204.java!!!	filterText(inout filterText : CharSequence) : void
        Filterable filter = ((Filterable) mListView.getAdapter());
        filter.getFilter().filter(filterText);
        // Reset the scroll position up to the top of the list when filtering.
        mListView.post(new Runnable() {
                @Override
                public void run() {
                    if (getListAdapter().getCount() > 0) {
                        mListView.setSelection(0);
                    }
                }
            });
!!!14200332.java!!!	getDevice() : Device
        return MediaDevicesIntents.getDevice(getIntent());
!!!14200460.java!!!	setAllChannelsEnabled(inout enabled : boolean) : void
        final int count = mAdapter.getCount();
        for (int i = 0; i < count; ++i) {
            Channel channel = mAdapter.getItem(i);
            channel.setEnabled(enabled);
        }
        mAdapter.notifyList();
!!!14200588.java!!!	setControlsEnabled(inout enabled : boolean) : void
        mFilterText.setEnabled(enabled);
        mButtonEnableAll.setEnabled(enabled);
        mButtonDisableAll.setEnabled(enabled);
        mListView.setEnabled(enabled);
!!!14201484.java!!!	updateFinished() : void
        if (EditChannelLineupActivity.this.mResumed) {
            if (DEBUG) Log.d(LOG_TAG, "mShouldLoadList=" + mShouldLoadList);
            if (mShouldLoadList) {
                mShouldLoadList = false;
                // Start loading the channel list.
                mLoadChannelsTask = new MyLoadChannelListTask(
                        EditChannelLineupActivity.this, getDevice().getId());
                mLoadChannelsTask.execute();
            } else {
                setVisible(false);
                setBusy(false);
            }
        }
!!!14201612.java!!!	setBusy(inout busy : boolean) : void
        setControlsEnabled(!busy);
        mListView.setVisibility(busy ? View.GONE : View.VISIBLE);
        mProgressBar.setVisibility(busy ? View.VISIBLE : View.GONE);
