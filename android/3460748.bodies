class Form21t
!!!14956684.java!!!	Form21t()
        // This space intentionally left blank.
!!!14956812.java!!!	insnArgString(inout insn : DalvInsn) : String
        RegisterSpecList regs = insn.getRegisters();
        return regs.get(0).regString() + ", " + branchString(insn);
!!!14956940.java!!!	insnCommentString(inout insn : DalvInsn, inout noteIndices : boolean) : String
        return branchComment(insn);
!!!14957068.java!!!	codeSize() : int
        return 2;
!!!14957196.java!!!	isCompatible(inout insn : DalvInsn) : boolean
        RegisterSpecList regs = insn.getRegisters();

        if (!((insn instanceof TargetInsn) &&
              (regs.size() == 1) &&
              unsignedFitsInByte(regs.get(0).getReg()))) {
            return false;
        }

        TargetInsn ti = (TargetInsn) insn;
        return ti.hasTargetOffset() ? branchFits(ti) : true;
!!!14957324.java!!!	compatibleRegs(inout insn : DalvInsn) : BitSet
        RegisterSpecList regs = insn.getRegisters();
        BitSet bits = new BitSet(1);

        bits.set(0, unsignedFitsInByte(regs.get(0).getReg()));
        return bits;
!!!14957452.java!!!	branchFits(inout insn : TargetInsn) : boolean
        int offset = insn.getTargetOffset();

        // Note: A zero offset would fit, but it is prohibited by the spec.
        return (offset != 0) && signedFitsInShort(offset);
!!!14957580.java!!!	writeTo(inout out : AnnotatedOutput, inout insn : DalvInsn) : void
        RegisterSpecList regs = insn.getRegisters();
        int offset = ((TargetInsn) insn).getTargetOffset();

        write(out,
              opcodeUnit(insn, regs.get(0).getReg()),
              (short) offset);
