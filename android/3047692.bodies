class ManualScanFragment
!!!12576652.java!!!	onViewCreated(inout view : View, inout savedInstanceState : Bundle) : void
        super.onViewCreated(view, savedInstanceState);
        mTuner = TvFramework.getInstance().getTunerInstance();
        mRes = getResources();
        mContext = getActivity();

        initData();
        notifyDataSetChange();

        mScanHandler = new Handler();

!!!12576780.java!!!	onStop() : void
        super.onStop();
        Log.d(TAG, "onStop()");

        /*
         * StopScan is called when activity is is no longer visible to the
         * user(i.e. onStop()) to fix 'Scan Failed' issue(Marvell Bug id 3071)
         */
        final int rtnValue = mTuner.stopScan();
        isScanStopped = true;
        if (rtnValue == ErrorCodes.FAILURE) {
            Log.d(TAG, "Stopping Manual Scan Failed");
        } else if (rtnValue == ErrorCodes.SUCCESS) {
            Log.d(TAG, "Stopping Manual scan SUCCESSED");
        } else {
            Log.d(TAG, "Unknown");
        }

        // Starting the CC if it was previously running,and no channels were
        // found on tuning
        Wrapper.getWrapperInstance().resumeCC();

        /* Remove any pending posts of Runnable that are in the message queue */
        if (mScanHandler != null && mRunnable != null) {
            mScanHandler.removeCallbacks(mRunnable);
        }

        /* To Dismiss the dialog and removing it from the screen */
        if (mDialog != null) {
            mDialog.dismiss();
        }
!!!12576908.java!!!	getCurrentModulationType() : int
        final Tuner mTuner = TvFramework.getInstance().getTunerInstance();

        USDTVTuningDetails tuningDetails = null;
        int modulationType = 0;
        tuningDetails = mTuner.getTuningDetails();
        if (tuningDetails != null) {
            modulationType = tuningDetails.getModulationType();
        }
        return modulationType;
!!!12577036.java!!!	initData() : void
        mNumberOfLevels = mRes.getInteger(R.integer.number_of_levels);
        int modType = getCurrentModulationType();
        Log.d(TAG, "modType=" + modType);
        if (modType == ModulationType.ModType_ANALOG) {
            mSearchType = mRes.getString(R.string.modulation_analog);
            getData().get(SEARCH_TYPE_INDEX).put(KEY_CURR_VALUE, MODULATION_TYPE_ANALOG);
            Wrapper.getWrapperInstance().setModulationType(MODULATION_TYPE_ANALOG);
        } else {
            mSearchType = mRes.getString(R.string.modulation_digital);
            getData().get(SEARCH_TYPE_INDEX).put(KEY_CURR_VALUE, MODULATION_TYPE_DIGITAL);
            Wrapper.getWrapperInstance().setModulationType(MODULATION_TYPE_DIGITAL);
        }

        // prepare channelnumber
        mFrequencies = readFrequenciesFromFile(mContext);
        final int size = mFrequencies.size();
        final ArrayList<Object> channelList = new ArrayList<Object>();
        int channelNumber = getStartChannelNumber();

        for (int i = 0; i < size; i++, channelNumber++) {
            channelList.add(String.valueOf(channelNumber));
        }

        // init data;

        // init channel data
        int length = channelList.size();
        Log.d(TAG, "updateChannelNumbers-length" + length);
        getData().get(CHANNEL_INDEX).put(KEY_LIST_NAMES,
                channelList.toArray(new String[FIRST_INDEX]));
        getData().get(CHANNEL_INDEX).put(KEY_LIST_COUNT, length);
        getData().get(CHANNEL_INDEX).put(KEY_LIST_VALUES, genarateValArray(length));
        final int currentChannelNumberIndex = getCurrentChannelNumberIndex();
        if (currentChannelNumberIndex >= 0 && currentChannelNumberIndex <= channelList.size()) {
            getData().get(CHANNEL_INDEX).put(KEY_CURR_VALUE, currentChannelNumberIndex);
            Wrapper.getWrapperInstance().setChannelNumber(currentChannelNumberIndex);
        } else {
            getData().get(CHANNEL_INDEX).put(KEY_CURR_VALUE, FIRST_INDEX);
        }

        // init frequency data
        final int firstFrequencyIndex = 0;
        final int currentFrequency = Integer.parseInt(((String) mFrequencies.get(FIRST_INDEX))
                .trim());
        final ArrayList<Object> frequenciesList;
        frequenciesList = prepareFrequenciesList(currentFrequency);
        length = frequenciesList.size();
        getData().get(FREQUENCY_INDEX).put(KEY_LIST_NAMES,
                frequenciesList.toArray(new String[0]));
        getData().get(FREQUENCY_INDEX).put(KEY_LIST_COUNT, length);
        getData().get(FREQUENCY_INDEX).put(KEY_LIST_VALUES, genarateValArray(length));
        if (currentFrequency == FIRST_INDEX) {
            getData().get(FREQUENCY_INDEX).put(KEY_CURR_VALUE, firstFrequencyIndex);
            Wrapper.getWrapperInstance().setFrequency(firstFrequencyIndex);
        } else {
            getData().get(FREQUENCY_INDEX).put(KEY_CURR_VALUE, mNumberOfLevels);
            Wrapper.getWrapperInstance().setFrequency(mNumberOfLevels);
        }
!!!12577164.java!!!	genarateValArray(in count : int) : int
        int[] valArray = new int[count];
        for (int i = 0; i < count; i++) {
            valArray[i] = i;
        }
        return valArray;
!!!12577292.java!!!	prepareFrequenciesList(in frequency : int) : ArrayList<Object>

        /*
         * This method generated the list of frequencies based on the level
         * required and fine tuning frequency unit. Consider a frequency
         * 57000000 is passed as a parameter to this method, then it generated
         * frequencies, 56600000, 56700000, 56800000, 56900000, 57000000,
         * 57100000, 57200000, 57300000, 57400000, if the frequency fine tune
         * unit is 100KHz i.e.100000 Hz
         */
        final int frequencyFineTuneUnit = mRes.getInteger(R.integer.frequency_fine_tune_value);
        /**
         * this variable decides how many frequencies to generate, based on the
         * level required
         */
        final int numOfFrequencies = (mNumberOfLevels * SEARCH_TYPE_INDEX) + FREQUENCY_INDEX;
        int tempFrequency = -1;
        float newFrequency = -1.0F;
        final ArrayList<Object> tempInputs = new ArrayList<Object>();
        for (int i = 0; i < numOfFrequencies; i++) {
            if (i < mNumberOfLevels) {
                if (frequency != 0) {

                    /*
                     * This block generates frequencies 56600000,
                     * 56700000,56800000, 56900000 for given frequency of 57MHz
                     */
                    tempFrequency = (mNumberOfLevels - i) * frequencyFineTuneUnit;
                    tempFrequency = frequency - tempFrequency;
                }
            } else if (i == mNumberOfLevels) {
                tempFrequency = frequency;

            } else {

                /*
                 * This block generated frequencies 57100000, 57200000,
                 * 57300000, 57400000 for given frequency 57MHz
                 */
                tempFrequency = (i - mNumberOfLevels) * frequencyFineTuneUnit;
                tempFrequency = frequency + tempFrequency;
            }
            if (tempFrequency >= 0) {
                newFrequency = (float) (tempFrequency / 1000000.0);
                tempInputs.add(newFrequency + mFrequencyUnit);
            }
        }

        Log.d(TAG, "********************************* tempInputs size = " + tempInputs.size());
        return tempInputs;
!!!12577420.java!!!	readFrequenciesFromFile(in context : Context) : ArrayList<Object>
        ArrayList<Object> inputs = new ArrayList<Object>();
        final Resources resource = mRes;

        mTunerMode = mTuner.getTunerMode(mContext);
        Log.d(TAG, "mTunerMode" + mTunerMode + " mSearchType=" + mSearchType);
        if ((mTunerMode == InputSourceType.CABLE_INPUT)
                && mSearchType.equalsIgnoreCase(resource.getString(R.string.modulation_analog))) {

            mTunerMode = InputSourceType.ANALOG_CABLE_INPUT;
            inputs = getInputFrequencies(TUNER_MODE_CABLE_ANALOG);

        } else if ((mTunerMode == InputSourceType.CABLE_INPUT)
                && mSearchType.equalsIgnoreCase(resource.getString(R.string.modulation_digital))) {
            mTunerMode = InputSourceType.CABLE_INPUT;
            inputs = getInputFrequencies(TUNER_MODE_CABLE_DIGITAL);

        } else if ((mTunerMode == InputSourceType.ATSC_INPUT)
                && mSearchType.equalsIgnoreCase(resource.getString(R.string.modulation_analog))) {
            mTunerMode = InputSourceType.ANALOG_ATSC_INPUT;
            inputs = getInputFrequencies(TUNER_MODE_ANTENNA_ANALOG);

        } else {
            mTunerMode = InputSourceType.ATSC_INPUT;
            inputs = getInputFrequencies(TUNER_MODE_ANTENNA_DIGITAL);
        }

        return inputs;
!!!12577548.java!!!	updateFrequencies(in channelNumber : int) : void
        final int firstFrequencyIndex = 0;
        mFrequencies = readFrequenciesFromFile(mContext);
        final int currentFrequency = Integer.parseInt(((String) mFrequencies.get(channelNumber
                - getStartChannelNumber())).trim());
        int length = prepareFrequenciesList(currentFrequency).size();
        getData().get(FREQUENCY_INDEX).put(KEY_LIST_NAMES,
                prepareFrequenciesList(currentFrequency).toArray(new String[0]));
        getData().get(FREQUENCY_INDEX).put(KEY_LIST_COUNT, length);
        getData().get(FREQUENCY_INDEX).put(KEY_LIST_VALUES, genarateValArray(length));
        if (currentFrequency == 0) {
            getData().get(FREQUENCY_INDEX).put(KEY_CURR_VALUE, firstFrequencyIndex);
            Wrapper.getWrapperInstance().setFrequency(firstFrequencyIndex);
        } else {
            getData().get(FREQUENCY_INDEX).put(KEY_CURR_VALUE, mNumberOfLevels);
            Wrapper.getWrapperInstance().setFrequency(mNumberOfLevels);
        }
!!!12577676.java!!!	getStartChannelNumber() : int
        if (mTuner.getTunerMode(mContext) == InputSourceType.CABLE_INPUT) {
            return CABLE_FIRST_CHAN_NUM;
        }
        return mRes.getInteger(R.integer.first_channel_number);
!!!12577804.java!!!	getCurrentChannelNumberIndex() : int
        final Tuner mTuner = TvFramework.getInstance().getTunerInstance();

        USDTVTuningDetails tuningDetails = null;
        int frequency = 0;
        tuningDetails = mTuner.getTuningDetails();
        if (tuningDetails != null)
            frequency = tuningDetails.getFrequency();

        Log.d(TAG, "frequency=" + frequency);
        // Getting the index of the currently playing frequency from the
        // arrayList
        int index = mFrequencies.indexOf(Integer.toString(frequency));
        // find AFC freq in freq list
        if (index < 0) {
            for (Object o : mFrequencies) {
                if (o != null) {
                    if ((frequency >= Integer.valueOf(o.toString()) - AFC_FREQUENCY_OFFSET)
                            && (frequency <= Integer.valueOf(o.toString())
                                    + AFC_FREQUENCY_OFFSET)) {
                        index = mFrequencies.indexOf(o);
                    }
                }
            }
        }
        // make a check if frequency is not found in NON-QAM, check if the
        // current frequency is a QAM frequency
        if (index < 0
                && (mTunerMode == InputSourceType.CABLE_INPUT ||
                mTunerMode == InputSourceType.ANALOG_CABLE_INPUT)) {
            index = getVsbFrequencies(mContext, frequency);
        }

        // if the frequency does not exists, then index will be -1. In this
        // situation we are making it to 0
        index = index < 0 ? 0 : index;

        // channel numbers cannot start from 0 so adding one to the index.
        // return index + 1;
        return index;
!!!12577932.java!!!	getVsbFrequencies(inout context : Context, in frequency : int) : int

        /**
         * The search for given frequency follows as given: case 1: search if
         * the frequency is part of vsb_std frequencies array case 2: search for
         * the given frequency in vsb_irc frequencies array case 3: search for
         * the given frequency in vsb_hrc frequencies array
         */
        Resources resource = context.getResources();
        /** Holds frequencies for the given tuner mode and search type */
        ArrayList<Object> frequencies = new ArrayList<Object>();
        int index = -1;
        /** case 1 search */
        frequencies = getInputFrequencies(TUNER_MODE_CABLE_VSB);
        index = frequencies.indexOf(Integer.toString(frequency));
        if (index > -1) {
            return index;
        } else {

            /** case 2 search */
            frequencies = getInputFrequencies(TUNER_MODE_CABLE_VSB_IRC);
            index = frequencies.indexOf(Integer.toString(frequency));
        }
        if (index > -1) {
            return index;
        } else {

            /** case 3 search */
            frequencies = getInputFrequencies(TUNER_MODE_CABLE_VSB_HRC);
            index = frequencies.indexOf(Integer.toString(frequency));
            return index;
        }

!!!12578060.java!!!	getInputFrequencies(in tunerMode : String) : ArrayList<Object>

        final Properties properties = new Properties();
        final Resources resource = mRes;
        final AssetManager assetManager = resource.getAssets();

        // fetching file from resource folder
        InputStream inputStream;
        String strModType;
        final ArrayList<Object> freq = new ArrayList<Object>();
        try {
            inputStream = assetManager.open("Frequencies.properties");

            // Loading values from file into Properties object
            properties.load(inputStream);
            if (tunerMode.equalsIgnoreCase(TUNER_MODE_ANTENNA)) {
                strModType = properties.getProperty(TUNER_MODE_ANTENNA);
            } else if (tunerMode.equalsIgnoreCase(TUNER_MODE_CABLE_DIGITAL)) {
                strModType = properties.getProperty(TUNER_MODE_CABLE_DIGITAL);
            } else if (tunerMode.equalsIgnoreCase(TUNER_MODE_ANTENNA_ANALOG)) {
                strModType = properties.getProperty(TUNER_MODE_ANTENNA_ANALOG);
            } else if (tunerMode.equalsIgnoreCase(TUNER_MODE_CABLE_ANALOG)) {
                strModType = properties.getProperty(TUNER_MODE_CABLE_ANALOG);
            } else if (tunerMode
                    .equalsIgnoreCase(TUNER_MODE_CABLE_VSB)) {
                strModType = properties.getProperty(TUNER_MODE_CABLE_VSB);
            } else if (tunerMode.equalsIgnoreCase(TUNER_MODE_CABLE_VSB_IRC)) {
                strModType = properties.getProperty(TUNER_MODE_CABLE_VSB_IRC);
            } else if (tunerMode.equalsIgnoreCase(TUNER_MODE_CABLE_VSB_HRC)) {
                strModType = properties.getProperty(TUNER_MODE_CABLE_VSB_HRC);
            } else {
                // if the given tuner mode doesn't match any of the above tuner
                // modes, by default read the digital air frequencies
                strModType = properties.getProperty(TUNER_MODE_ANTENNA_DIGITAL);
            }
            final String frequencies[] = strModType.split(",\\s*");
            for (String str : frequencies) {
                freq.add(str);
            }
            return freq;

        } catch (IOException e) {
            ProgramaticException.displayException(mContext, "ManualScan", e);
        }
        return freq;

!!!12578188.java!!!	getDataXmlId() : int
        return R.xml.manual_scan_menu;
!!!12578316.java!!!	handleEnterKeyCode(in position : int) : void
        super.handleEnterKeyCode(position);
        startManualScan();
!!!12578444.java!!!	setListItemValue(inout view : View, in position : int) : void
        super.setListItemValue(view, position);
        Map<String, Object> map = getData().get(position);
        String titleString = map.get(KEY_TITLE).toString();

        if (((String) map.get(KEY_TITLE)).equals(getResources().getString(
                R.string.modulation_type))) {
            int searchType = ((int[]) map.get(KEY_LIST_VALUES))[(Integer) map.get(KEY_CURR_VALUE)];
            if (searchType == 0) {
                mSearchType = mRes.getString(R.string.modulation_digital);
            } else {
                mSearchType = mRes.getString(R.string.modulation_analog);
            }
            updateFrequencies(Integer.valueOf(getListNameByValue(
                    (CharSequence[]) getData().get(CHANNEL_INDEX).get(
                            KEY_LIST_NAMES),
                    (int[]) getData().get(CHANNEL_INDEX).get(KEY_LIST_VALUES),
                    (Integer) getData().get(CHANNEL_INDEX).get(KEY_CURR_VALUE))));
        } else if (titleString.equals(mRes.getString(
                R.string.frequency))) {
            updateListItem(view, (float) (Integer.parseInt((String) mFrequencies
                    .get((Integer) getData().get(CHANNEL_INDEX).get(KEY_CURR_VALUE))) / 1000000.0)
                    + mFrequencyUnit);
        }
!!!12578572.java!!!	getCurrentFrequence() : String
        int visiblePosition = getListView().getFirstVisiblePosition();
        View view_1 = getListView().getChildAt(FREQUENCY_INDEX - visiblePosition);
        TextView listText = (TextView) view_1.findViewById(R.id.SelectionText);
        String currentFrequence = listText.getText().toString();
        return currentFrequence;
!!!12578700.java!!!	startManualScan() : void
        DecimalFormat format = new DecimalFormat("#.####");
        String frequencyStr = getCurrentFrequence();
        Log.d(TAG, "frequencyStr" + frequencyStr);
        // separate the string "  MHz" from the actual frequency
        frequencyStr = frequencyStr.substring(0, frequencyStr.indexOf(mFrequencyUnit));
        final double tempFrequency = Double.parseDouble(frequencyStr);
        final double doubleFrequency = tempFrequency * 1000000;
        int frequency = (Double.valueOf(format.format(doubleFrequency))).intValue();
        Log.d(TAG, "frequency=" + frequency);
        final String strSearchType = getListNameByValue(
                (CharSequence[]) getData().get(SEARCH_TYPE_INDEX).get(
                        KEY_LIST_NAMES),
                (int[]) getData().get(SEARCH_TYPE_INDEX).get(KEY_LIST_VALUES),
                (Integer) getData().get(SEARCH_TYPE_INDEX).get(KEY_CURR_VALUE));
        ChannelSearchType searchType;
        Log.d(TAG, "strSearchType=" + strSearchType);
        if (strSearchType.equals(mRes.getString(R.string.modulation_analog))) {
            searchType = ChannelSearchType.SEARCH_ANALOG;
        } else {
            searchType = ChannelSearchType.SEARCH_DIGITAL;
        }
        Log.d(TAG, "strSearchType1=" + strSearchType);
        Log.d(TAG, "ScanningManualScan");
        mTuner = TvFramework.getInstance().getTunerInstance();
        // Make a call to start manual scan and catch the return value
        // listener :to register to get the scan status updates
        mFrequency = frequency;

        final int channelNumber = Integer.valueOf(getListNameByValue(
                (CharSequence[]) getData().get(CHANNEL_INDEX).get(
                        KEY_LIST_NAMES),
                (int[]) getData().get(CHANNEL_INDEX).get(KEY_LIST_VALUES),
                (Integer) getData().get(CHANNEL_INDEX).get(KEY_CURR_VALUE)));
        Log.d(TAG, "channelNumber=" + channelNumber);
        // Setting OFF the Closed caption to avoid the residue issue on the
        // screen
        Wrapper.getWrapperInstance().pauseCC();
        final int rtnValue = mTuner.startManualScan(searchType, frequency, mTunerMode, this,
                false);
        if (rtnValue == ErrorCodes.FAILURE) {
            final String text = mRes.getString(R.string.manual_scan_failed);
            new ToastCreator(mContext, text, R.drawable.info).showToast();
            return;
        }

        stopTimeOut(); // no timeout for scan
        // Display progress dialog to the user
        mDialog = ProgressDialog.show(mContext, "", "  Please wait...  ", false, true);
        mDialog.setContentView(R.layout.progress_dialog_view);
        ((TextView) mDialog.findViewById(R.id.progress_dialog_view_tv)).setText(R.string.scan_wait);
        mDialog.setOnKeyListener(new OnKeyListener() {
            /**
             * If the key events are not handled in the dialog,they will get
             * dispatched to PlayerActivity, so when any of the F1/F7/F8 keys
             * are pressed scan is cancelled.
             */
            @Override
            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
                if (keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_ESCAPE) {
                    return false;
                }
                return true;
            }
        });

        mDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {

            /**
             * Method that will be called when user press return key on dialog
             * box
             * @param dialog
             *            the dialog on which the event occurred
             */
            @Override
            public void onCancel(final DialogInterface dialog) {
                mTuner = TvFramework.getInstance().getTunerInstance();
                isScanStopped = true;
                final int rtnValue = mTuner.stopScan();
                if (rtnValue == ErrorCodes.SUCCESS) {
                    displayStopScanDialog();
                }

                Log.d(TAG, "************************ stop channel scan return value = " + rtnValue
                        + " ("
                        + ErrorCodes.getErrorString(rtnValue) + ")");

            }
        });
!!!12578828.java!!!	displayStopScanDialog() : void
        mDialog = ProgressDialog.show(mContext, "", "  Please wait...  ");
        mDialog.setContentView(R.layout.progress_dialog_view);
        mDialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
            @Override
            public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
                return true;
            }
        });
!!!12578956.java!!!	refreshMenuData(inout list : List<Map<String, Object>>) : void
        super.refreshMenuData(list);
!!!12579084.java!!!	scanStatusUpdate(in progress : int, in chNum : int, in numOfServices : int, in curFrequency : int, in searchType : int, in searchMessage : int) : void

        if (progress == mScanCompletePercent) {
            mServices = numOfServices;
        }

        if (searchMessage == ScanStatus.SCAN_FINISHED.ordinal()) {
            if (mDialog != null) {
                mDialog.dismiss();
            }

            Wrapper.getWrapperInstance().updateChanneListToGTVDb(0);

            // final String textToDisplay =
            // "Number of services found frequency " + mFrequency
            // + " are " + mServices;
            final String textToDisplay = mRes.getString(R.string.text_to_display,
                    mFrequency, mServices);
            mRunnable = new Runnable() {

                @Override
                public void run() {
                    if (mDialog != null) {
                        mDialog.dismiss();
                    }
                    final ToastCreator toast = new ToastCreator(mContext, textToDisplay,
                            R.drawable.info);
                    toast.setToastDuration(TOAST_DISPLAY_DURATION);
                    toast.showToast();
                    if (mServices > 0) {
                        getActivity().finish();
                    }
                }
            };
            if (!isScanStopped) {
                mScanHandler.post(mRunnable);
            }
            isScanStopped = false;
            Log.d(TAG, "Manual scan completed.");
            startTimeOut();
        }

!!!12579212.java!!!	notifyDataSetChange() : void
        super.notifyDataSetChange();
!!!12579340.java!!!	onListItemKey(inout view : View, in keyCode : int, inout event : KeyEvent) : boolean
        ListView listView = (ListView) view;
        if (listView != null && event.getAction() == KeyEvent.ACTION_DOWN) {
            if (keyCode >= KeyEvent.KEYCODE_0 && keyCode <= KeyEvent.KEYCODE_9) {
                int position = listView.getSelectedItemPosition();
                mHandler.removeMessages(CLEAR_INPUT_CHANNELNUMBER);
                mHandler.sendEmptyMessageDelayed(CLEAR_INPUT_CHANNELNUMBER, 2 * Utils.ONE_SECOND);
                Log.d(TAG, "position=" + position + " getData()=" + getData());
                if (position != -1 && getData() != null) {
                    Map<String, Object> map = getData().get(position);
                    if (getResources().getString(
                            R.string.channel_number).equals(map.get(KEY_TITLE))) {
                        int currIndex = 0;
                        Integer number = Utils.keyCodeMapping.get(keyCode);
                        int listCnt = (Integer) map.get(KEY_LIST_COUNT);

                        channelNumber.append(number);
                        Integer numberChannel = Integer.valueOf(channelNumber.toString());
                        Log.d(TAG, "numberChannel=" + numberChannel);
                        numberChannel = getModifiedChannelNumber(numberChannel);

                        currIndex = Arrays.asList(((CharSequence[]) map.get(KEY_LIST_NAMES)))
                                .indexOf(String.valueOf(numberChannel));
                        Log.d(TAG, "currIndex=" + currIndex);
                        if (currIndex == -1) {
                            currIndex = listCnt - 1;
                        } else if (currIndex == listCnt) {
                            currIndex = 0;
                        }

                        map.put(KEY_CURR_VALUE, currIndex);
                        int[] intArray = (int[]) map.get(KEY_LIST_VALUES);
                        List<Integer> valArray = new ArrayList<Integer>();
                        for (int i : intArray) {
                            valArray.add(i);
                        }
                        if (map.get(KEY_API) != null) {
                            String API_name = map.get(KEY_API).toString();
                            Utils.setValueByAPI(Wrapper.getWrapperInstance(), API_name,
                                    valArray.get(currIndex));
                            onSetItemValue(position);
                        }
                        boolean notifyChange = (Boolean) map.get(KEY_NOTIFY_CHANGE);
                        if (notifyChange) {
                            refreshMenuData(getData());
                            notifyDataSetChange();
                        }
                    }
                }
            }
        }
        return super.onListItemKey(view, keyCode, event);
!!!12579468.java!!!	getModifiedChannelNumber(in number : int) : int
        int channelnumber = number;
        boolean flag = false;
        if (mTuner != null && mTuner.getTunerMode(mContext) == InputSourceType.CABLE_INPUT) {
            if (channelnumber < 1) {
                channelnumber = 1;
                if (channelNumber.length() > 0) {
                    flag = true;
                }
            }
            if (channelnumber > 135) {
                channelnumber = 135;
                if (channelNumber.length() > 0) {
                    flag = true;
                }
            }
        } else if (mTuner != null && mTuner.getTunerMode(mContext) == InputSourceType.ATSC_INPUT) {
            if (channelnumber < 2) {
                channelnumber = 2;
                if (channelNumber.length() > 0) {
                    flag = true;
                }
            }
            if (channelnumber > 69) {
                channelnumber = 69;
                if (channelNumber.length() > 0) {
                    flag = true;
                }
            }
        }
        if (flag) {
            channelNumber.delete(0, channelNumber.length());
        }
        return channelnumber;
