class BigDecimalTest
!!!2794267.java!!!	testGetPrecision() : void
        assertPrecision(1, "0");
        assertPrecision(1, "0.9");
        assertPrecision(16, "0.9999999999999999");
        assertPrecision(16, "9999999999999999");
        assertPrecision(19, "1000000000000000000");
        assertPrecision(19, "1000000000000000001");
        assertPrecision(19, "-1000000000000000001");
        assertPrecision(19, "-1000000000000000000");

        String tenNines = "9999999999";
        String fiftyNines = tenNines + tenNines + tenNines + tenNines + tenNines;
        assertPrecision(10, "0." + tenNines);
        assertPrecision(50, "0." + fiftyNines);
        assertPrecision(250, "0." + fiftyNines + fiftyNines + fiftyNines + fiftyNines + fiftyNines);
        assertPrecision(10, tenNines);
        assertPrecision(50, fiftyNines);
        assertPrecision(250, fiftyNines + fiftyNines + fiftyNines + fiftyNines + fiftyNines);

        // test these special cases because we know precision() uses longs internally
        String maxLong = Long.toString(Long.MAX_VALUE);
        assertPrecision(maxLong.length(), maxLong);
        String minLong = Long.toString(Long.MIN_VALUE);
        assertPrecision(minLong.length() - 1, minLong);
!!!2794395.java!!!	assertPrecision(in expectedPrecision : int, inout value : String) : void
        BigDecimal parsed = new BigDecimal(value);
        assertEquals("Unexpected precision for parsed value " + value,
                expectedPrecision, parsed.precision());

        BigDecimal computed = parsed.divide(BigDecimal.ONE);
        assertEquals("Unexpected precision for computed value " + value,
                expectedPrecision, computed.precision());
!!!2794523.java!!!	testRound() : void
        BigDecimal bigDecimal = new BigDecimal("0.999999999999999");
        BigDecimal rounded = bigDecimal.round(new MathContext(2, RoundingMode.FLOOR));
        assertEquals("0.99", rounded.toString());
!!!2794651.java!!!	testPrecisionFromString() : void
      BigDecimal a = new BigDecimal("-0.011111111111111111111");
      BigDecimal b = a.multiply(BigDecimal.ONE);

      assertEquals("-0.011111111111111111111", a.toString());
      assertEquals("-0.011111111111111111111", b.toString());

      assertEquals(20, a.precision());
      assertEquals(20, b.precision());

      assertEquals(21, a.scale());
      assertEquals(21, b.scale());

      assertEquals("-11111111111111111111", a.unscaledValue().toString());
      assertEquals("-11111111111111111111", b.unscaledValue().toString());

      assertEquals(a, b);
      assertEquals(b, a);

      assertEquals(0, a.subtract(b).signum());
      assertEquals(0, a.compareTo(b));
