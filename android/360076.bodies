class FragmentedMP4Parser::StaticTrackFragment
!!!680204.cpp!!!	getSample(inout info : SampleInfo) : status_t
    if (mSampleIndex >= mSampleCount) {
        return ERROR_END_OF_STREAM;
    }

    *info = mSampleInfo;

    ALOGV("returning sample %d at [0x%08llx, 0x%08llx)",
          mSampleIndex,
          info->mOffset, info->mOffset + info->mSize);

    return OK;
!!!680332.cpp!!!	advance() : void
    mNextSampleOffset += mSampleInfo.mSize;

    ++mSampleIndex;
    if (--mSampleToChunkRemaining == 0) {
        ++mChunkIndex;

        uint32_t entryCount = U32_AT(mSampleToChunk->data() + 4);

        // If this is the last entry in the sample to chunk table, we will
        // stay on this entry.
        if ((uint32_t)(mSampleToChunkIndex + 1) < entryCount) {
            uint32_t nextChunkIndex =
                U32_AT(mSampleToChunk->data() + 8 + 12 * (mSampleToChunkIndex + 1));

            CHECK_GE(nextChunkIndex, 1u);
            --nextChunkIndex;

            if (mChunkIndex >= nextChunkIndex) {
                CHECK_EQ(mChunkIndex, nextChunkIndex);
                ++mSampleToChunkIndex;
            }
        }

        mSampleToChunkRemaining =
            U32_AT(mSampleToChunk->data() + 8 + 12 * mSampleToChunkIndex + 4);
    }

    updateSampleInfo();
!!!680460.cpp!!!	signalCompletion() : status_t
    mSampleToChunkIndex = 0;

    mSampleToChunkRemaining =
        (mSampleToChunk == NULL)
            ? 0
            : U32_AT(mSampleToChunk->data() + 8 + 12 * mSampleToChunkIndex + 4);

    updateSampleInfo();

    return OK;
!!!680588.cpp!!!	complete() : bool
    return true;
!!!680716.cpp!!!	parseSampleSizes(inout parser : FragmentedMP4Parser, in type : uint32_t, in offset : size_t, in size : uint64_t) : status_t
    if (offset + 12 > size) {
        return ERROR_MALFORMED;
    }

    if (parser->readU32(offset) != 0) {
        return ERROR_MALFORMED;
    }

    uint32_t sampleSize = parser->readU32(offset + 4);
    uint32_t sampleCount = parser->readU32(offset + 8);

    if (sampleSize == 0 && offset + 12 + sampleCount * 4 != size) {
        return ERROR_MALFORMED;
    }

    parser->copyBuffer(&mSampleSizes, offset, size);

    mSampleCount = sampleCount;

    return OK;
!!!680844.cpp!!!	parseCompactSampleSizes(inout parser : FragmentedMP4Parser, in type : uint32_t, in offset : size_t, in size : uint64_t) : status_t
    if (offset + 12 > size) {
        return ERROR_MALFORMED;
    }

    if (parser->readU32(offset) != 0) {
        return ERROR_MALFORMED;
    }

    uint32_t fieldSize = parser->readU32(offset + 4);

    if (fieldSize != 4 && fieldSize != 8 && fieldSize != 16) {
        return ERROR_MALFORMED;
    }

    uint32_t sampleCount = parser->readU32(offset + 8);

    if (offset + 12 + (sampleCount * fieldSize + 4) / 8 != size) {
        return ERROR_MALFORMED;
    }

    parser->copyBuffer(&mCompactSampleSizes, offset, size);

    mSampleCount = sampleCount;

    return OK;
!!!680972.cpp!!!	parseSampleToChunk(inout parser : FragmentedMP4Parser, in type : uint32_t, in offset : size_t, in size : uint64_t) : status_t
    if (offset + 8 > size) {
        return ERROR_MALFORMED;
    }

    if (parser->readU32(offset) != 0) {
        return ERROR_MALFORMED;
    }

    uint32_t entryCount = parser->readU32(offset + 4);

    if (entryCount == 0) {
        return OK;
    }

    if (offset + 8 + entryCount * 12 != size) {
        return ERROR_MALFORMED;
    }

    parser->copyBuffer(&mSampleToChunk, offset, size);

    return OK;
!!!681100.cpp!!!	parseChunkOffsets(inout parser : FragmentedMP4Parser, in type : uint32_t, in offset : size_t, in size : uint64_t) : status_t
    if (offset + 8 > size) {
        return ERROR_MALFORMED;
    }

    if (parser->readU32(offset) != 0) {
        return ERROR_MALFORMED;
    }

    uint32_t entryCount = parser->readU32(offset + 4);

    if (offset + 8 + entryCount * 4 != size) {
        return ERROR_MALFORMED;
    }

    parser->copyBuffer(&mChunkOffsets, offset, size);

    return OK;
!!!681228.cpp!!!	parseChunkOffsets64(inout parser : FragmentedMP4Parser, in type : uint32_t, in offset : size_t, in size : uint64_t) : status_t
    if (offset + 8 > size) {
        return ERROR_MALFORMED;
    }

    if (parser->readU32(offset) != 0) {
        return ERROR_MALFORMED;
    }

    uint32_t entryCount = parser->readU32(offset + 4);

    if (offset + 8 + entryCount * 8 != size) {
        return ERROR_MALFORMED;
    }

    parser->copyBuffer(&mChunkOffsets64, offset, size);

    return OK;
!!!681356.cpp!!!	updateSampleInfo() : void
    if (mSampleIndex >= mSampleCount) {
        return;
    }

    if (mSampleSizes != NULL) {
        uint32_t defaultSampleSize = U32_AT(mSampleSizes->data() + 4);
        if (defaultSampleSize > 0) {
            mSampleInfo.mSize = defaultSampleSize;
        } else {
            mSampleInfo.mSize= U32_AT(mSampleSizes->data() + 12 + 4 * mSampleIndex);
        }
    } else {
        CHECK(mCompactSampleSizes != NULL);

        uint32_t fieldSize = U32_AT(mCompactSampleSizes->data() + 4);

        switch (fieldSize) {
            case 4:
            {
                unsigned byte = mCompactSampleSizes->data()[12 + mSampleIndex / 2];
                mSampleInfo.mSize = (mSampleIndex & 1) ? byte & 0x0f : byte >> 4;
                break;
            }

            case 8:
            {
                mSampleInfo.mSize = mCompactSampleSizes->data()[12 + mSampleIndex];
                break;
            }

            default:
            {
                CHECK_EQ(fieldSize, 16);
                mSampleInfo.mSize =
                    U16_AT(mCompactSampleSizes->data() + 12 + mSampleIndex * 2);
                break;
            }
        }
    }

    CHECK_GT(mSampleToChunkRemaining, 0);

    // The sample desc index is 1-based... XXX
    mSampleInfo.mSampleDescIndex =
        U32_AT(mSampleToChunk->data() + 8 + 12 * mSampleToChunkIndex + 8);

    if (mChunkIndex != mPrevChunkIndex) {
        mPrevChunkIndex = mChunkIndex;

        if (mChunkOffsets != NULL) {
            uint32_t entryCount = U32_AT(mChunkOffsets->data() + 4);

            if (mChunkIndex >= entryCount) {
                mSampleIndex = mSampleCount;
                return;
            }

            mNextSampleOffset =
                U32_AT(mChunkOffsets->data() + 8 + 4 * mChunkIndex);
        } else {
            CHECK(mChunkOffsets64 != NULL);

            uint32_t entryCount = U32_AT(mChunkOffsets64->data() + 4);

            if (mChunkIndex >= entryCount) {
                mSampleIndex = mSampleCount;
                return;
            }

            mNextSampleOffset =
                U64_AT(mChunkOffsets64->data() + 8 + 8 * mChunkIndex);
        }
    }

    mSampleInfo.mOffset = mNextSampleOffset;

    mSampleInfo.mPresentationTime = 0;
    mSampleInfo.mFlags = 0;
