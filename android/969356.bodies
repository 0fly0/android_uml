class WebSettingsClassic
!!!4953740.java!!!	WebSettingsClassic(inout context : Context, inout webview : WebViewClassic)
        mEventHandler = new EventHandler();
        mContext = context;
        mWebView = webview;
        mDefaultTextEncoding = context.getString(com.android.internal.
                                                 R.string.default_text_encoding);

        if (sLockForLocaleSettings == null) {
            sLockForLocaleSettings = new Object();
            sLocale = Locale.getDefault();
        }
        mAcceptLanguage = getCurrentAcceptLanguage();
        mUserAgent = getCurrentUserAgent();
        mUseDefaultUserAgent = true;

        mBlockNetworkLoads = mContext.checkPermission(
                "android.permission.INTERNET", android.os.Process.myPid(),
                android.os.Process.myUid()) != PackageManager.PERMISSION_GRANTED;

        // SDK specific settings. See issue 6212665
        if (mContext.getApplicationInfo().targetSdkVersion <
                Build.VERSION_CODES.JELLY_BEAN) {
            mAllowUniversalAccessFromFileURLs = true;
            mAllowFileAccessFromFileURLs = true;
        }
        try {
            mPasswordEchoEnabled =
                    Settings.System.getInt(context.getContentResolver(),
                        Settings.System.TEXT_SHOW_PASSWORD) != 0;
        } catch (SettingNotFoundException e) {
            mPasswordEchoEnabled = true;
        }
!!!4953868.java!!!	getCurrentAcceptLanguage() : String
        Locale locale;
        synchronized(sLockForLocaleSettings) {
            locale = sLocale;
        }
        StringBuilder buffer = new StringBuilder();
        addLocaleToHttpAcceptLanguage(buffer, locale);

        if (!Locale.US.equals(locale)) {
            if (buffer.length() > 0) {
                buffer.append(", ");
            }
            buffer.append(ACCEPT_LANG_FOR_US_LOCALE);
        }

        return buffer.toString();
!!!4953996.java!!!	convertObsoleteLanguageCodeToNew(in langCode : String) : String
        if (langCode == null) {
            return null;
        }
        if ("iw".equals(langCode)) {
            // Hebrew
            return "he";
        } else if ("in".equals(langCode)) {
            // Indonesian
            return "id";
        } else if ("ji".equals(langCode)) {
            // Yiddish
            return "yi";
        }
        return langCode;
!!!4954124.java!!!	addLocaleToHttpAcceptLanguage(inout builder : StringBuilder, inout locale : Locale) : void
        String language = convertObsoleteLanguageCodeToNew(locale.getLanguage());
        if (language != null) {
            builder.append(language);
            String country = locale.getCountry();
            if (country != null) {
                builder.append("-");
                builder.append(country);
            }
        }
!!!4954252.java!!!	getCurrentUserAgent() : String
        Locale locale;
        synchronized(sLockForLocaleSettings) {
            locale = sLocale;
        }
        return getDefaultUserAgentForLocale(mContext, locale);
!!!4954380.java!!!	getDefaultUserAgentForLocale(inout context : Context, inout locale : Locale) : String
        StringBuffer buffer = new StringBuffer();
        // Add version
        final String version = Build.VERSION.RELEASE;
        if (version.length() > 0) {
            if (Character.isDigit(version.charAt(0))) {
                // Release is a version, eg "3.1"
                buffer.append(version);
            } else {
                // Release is a codename, eg "Honeycomb"
                // In this case, use the previous release's version
                buffer.append(PREVIOUS_VERSION);
            }
        } else {
            // default to "1.0"
            buffer.append("1.0");
        }
        buffer.append("; ");
        final String language = locale.getLanguage();
        if (language != null) {
            buffer.append(convertObsoleteLanguageCodeToNew(language));
            final String country = locale.getCountry();
            if (country != null) {
                buffer.append("-");
                buffer.append(country.toLowerCase());
            }
        } else {
            // default to "en"
            buffer.append("en");
        }
        buffer.append(";");
        // add the model for the release build
        if ("REL".equals(Build.VERSION.CODENAME)) {
            final String model = Build.MODEL;
            if (model.length() > 0) {
                buffer.append(" ");
                buffer.append(model);
            }
        }
        final String id = Build.ID;
        if (id.length() > 0) {
            buffer.append(" Build/");
            buffer.append(id);
        }
        String mobile = context.getResources().getText(
            com.android.internal.R.string.web_user_agent_target_content).toString();
        final String base = context.getResources().getText(
                com.android.internal.R.string.web_user_agent).toString();
        return String.format(base, buffer, mobile);
!!!4954508.java!!!	setNavDump(inout enabled : boolean) : void
        mNavDump = enabled;
!!!4954636.java!!!	getNavDump() : boolean
        return mNavDump;
!!!4954764.java!!!	setSupportZoom(inout support : boolean) : void
        mSupportZoom = support;
        mWebView.updateMultiTouchSupport(mContext);
!!!4954892.java!!!	supportZoom() : boolean
        return mSupportZoom;
!!!4955020.java!!!	setMediaPlaybackRequiresUserGesture(inout support : boolean) : void
        if (mMediaPlaybackRequiresUserGesture != support) {
            mMediaPlaybackRequiresUserGesture = support;
            postSync();
        }
!!!4955148.java!!!	getMediaPlaybackRequiresUserGesture() : boolean
        return mMediaPlaybackRequiresUserGesture;
!!!4955276.java!!!	setBuiltInZoomControls(inout enabled : boolean) : void
        mBuiltInZoomControls = enabled;
        mWebView.updateMultiTouchSupport(mContext);
!!!4955404.java!!!	getBuiltInZoomControls() : boolean
        return mBuiltInZoomControls;
!!!4955532.java!!!	setDisplayZoomControls(inout enabled : boolean) : void
        mDisplayZoomControls = enabled;
        mWebView.updateMultiTouchSupport(mContext);
!!!4955660.java!!!	getDisplayZoomControls() : boolean
        return mDisplayZoomControls;
!!!4955788.java!!!	setAllowFileAccess(inout allow : boolean) : void
        mAllowFileAccess = allow;
!!!4955916.java!!!	getAllowFileAccess() : boolean
        return mAllowFileAccess;
!!!4956044.java!!!	setAllowContentAccess(inout allow : boolean) : void
        mAllowContentAccess = allow;
!!!4956172.java!!!	getAllowContentAccess() : boolean
        return mAllowContentAccess;
!!!4956300.java!!!	setLoadWithOverviewMode(inout overview : boolean) : void
        mLoadWithOverviewMode = overview;
!!!4956428.java!!!	getLoadWithOverviewMode() : boolean
        return mLoadWithOverviewMode;
!!!4956556.java!!!	setEnableSmoothTransition(inout enable : boolean) : void
        mEnableSmoothTransition = enable;
!!!4956684.java!!!	enableSmoothTransition() : boolean
        return mEnableSmoothTransition;
!!!4956812.java!!!	setUseWebViewBackgroundForOverscrollBackground(inout view : boolean) : void
        mUseWebViewBackgroundForOverscroll = view;
!!!4956940.java!!!	getUseWebViewBackgroundForOverscrollBackground() : boolean
        return mUseWebViewBackgroundForOverscroll;
!!!4957068.java!!!	setSaveFormData(inout save : boolean) : void
        mSaveFormData = save;
!!!4957196.java!!!	getSaveFormData() : boolean
        return mSaveFormData && !mPrivateBrowsingEnabled;
!!!4957324.java!!!	setSavePassword(inout save : boolean) : void
        mSavePassword = save;
!!!4957452.java!!!	getSavePassword() : boolean
        return mSavePassword;
!!!4957580.java!!!	setTextZoom(in textZoom : int) : void
        if (mTextSize != textZoom) {
            if (WebViewClassic.mLogEvent) {
                EventLog.writeEvent(EventLogTags.BROWSER_TEXT_SIZE_CHANGE,
                        mTextSize, textZoom);
            }
            mTextSize = textZoom;
            postSync();
        }
!!!4957708.java!!!	getTextZoom() : int
        return mTextSize;
!!!4957836.java!!!	setDoubleTapZoom(in doubleTapZoom : int) : void
        if (mDoubleTapZoom != doubleTapZoom) {
            mDoubleTapZoom = doubleTapZoom;
            mWebView.updateDoubleTapZoom(doubleTapZoom);
        }
!!!4957964.java!!!	getDoubleTapZoom() : int
        return mDoubleTapZoom;
!!!4958092.java!!!	setDefaultZoom(inout zoom : ZoomDensity) : void
        if (mDefaultZoom != zoom) {
            mDefaultZoom = zoom;
            mWebView.adjustDefaultZoomDensity(zoom.value);
        }
!!!4958220.java!!!	getDefaultZoom() : ZoomDensity
        return mDefaultZoom;
!!!4958348.java!!!	setLightTouchEnabled(inout enabled : boolean) : void
        mLightTouchEnabled = enabled;
!!!4958476.java!!!	getLightTouchEnabled() : boolean
        return mLightTouchEnabled;
!!!4958604.java!!!	setUseDoubleTree(inout use : boolean) : void
        return;
!!!4958732.java!!!	getUseDoubleTree() : boolean
        return false;
!!!4958860.java!!!	setUserAgent(in ua : int) : void
        String uaString = null;
        if (ua == 1) {
            if (DESKTOP_USERAGENT.equals(mUserAgent)) {
                return; // do nothing
            } else {
                uaString = DESKTOP_USERAGENT;
            }
        } else if (ua == 2) {
            if (IPHONE_USERAGENT.equals(mUserAgent)) {
                return; // do nothing
            } else {
                uaString = IPHONE_USERAGENT;
            }
        } else if (ua != 0) {
            return; // do nothing
        }
        setUserAgentString(uaString);
!!!4958988.java!!!	getUserAgent() : int
        if (DESKTOP_USERAGENT.equals(mUserAgent)) {
            return 1;
        } else if (IPHONE_USERAGENT.equals(mUserAgent)) {
            return 2;
        } else if (mUseDefaultUserAgent) {
            return 0;
        }
        return -1;
!!!4959116.java!!!	setUseWideViewPort(inout use : boolean) : void
        if (mUseWideViewport != use) {
            mUseWideViewport = use;
            postSync();
        }
!!!4959244.java!!!	getUseWideViewPort() : boolean
        return mUseWideViewport;
!!!4959372.java!!!	setSupportMultipleWindows(inout support : boolean) : void
        if (mSupportMultipleWindows != support) {
            mSupportMultipleWindows = support;
            postSync();
        }
!!!4959500.java!!!	supportMultipleWindows() : boolean
        return mSupportMultipleWindows;
!!!4959628.java!!!	setLayoutAlgorithm(inout l : LayoutAlgorithm) : void
        // XXX: This will only be affective if libwebcore was built with
        // ANDROID_LAYOUT defined.
        if (mLayoutAlgorithm != l) {
            mLayoutAlgorithm = l;
            postSync();
        }
!!!4959756.java!!!	getLayoutAlgorithm() : LayoutAlgorithm
        return mLayoutAlgorithm;
!!!4959884.java!!!	setStandardFontFamily(in font : String) : void
        if (font != null && !font.equals(mStandardFontFamily)) {
            mStandardFontFamily = font;
            postSync();
        }
!!!4960012.java!!!	getStandardFontFamily() : String
        return mStandardFontFamily;
!!!4960140.java!!!	setFixedFontFamily(in font : String) : void
        if (font != null && !font.equals(mFixedFontFamily)) {
            mFixedFontFamily = font;
            postSync();
        }
!!!4960268.java!!!	getFixedFontFamily() : String
        return mFixedFontFamily;
!!!4960396.java!!!	setSansSerifFontFamily(in font : String) : void
        if (font != null && !font.equals(mSansSerifFontFamily)) {
            mSansSerifFontFamily = font;
            postSync();
        }
!!!4960524.java!!!	getSansSerifFontFamily() : String
        return mSansSerifFontFamily;
!!!4960652.java!!!	setSerifFontFamily(in font : String) : void
        if (font != null && !font.equals(mSerifFontFamily)) {
            mSerifFontFamily = font;
            postSync();
        }
!!!4960780.java!!!	getSerifFontFamily() : String
        return mSerifFontFamily;
!!!4960908.java!!!	setCursiveFontFamily(in font : String) : void
        if (font != null && !font.equals(mCursiveFontFamily)) {
            mCursiveFontFamily = font;
            postSync();
        }
!!!4961036.java!!!	getCursiveFontFamily() : String
        return mCursiveFontFamily;
!!!4961164.java!!!	setFantasyFontFamily(in font : String) : void
        if (font != null && !font.equals(mFantasyFontFamily)) {
            mFantasyFontFamily = font;
            postSync();
        }
!!!4961292.java!!!	getFantasyFontFamily() : String
        return mFantasyFontFamily;
!!!4961420.java!!!	setMinimumFontSize(in size : int) : void
        size = pin(size);
        if (mMinimumFontSize != size) {
            mMinimumFontSize = size;
            postSync();
        }
!!!4961548.java!!!	getMinimumFontSize() : int
        return mMinimumFontSize;
!!!4961676.java!!!	setMinimumLogicalFontSize(in size : int) : void
        size = pin(size);
        if (mMinimumLogicalFontSize != size) {
            mMinimumLogicalFontSize = size;
            postSync();
        }
!!!4961804.java!!!	getMinimumLogicalFontSize() : int
        return mMinimumLogicalFontSize;
!!!4961932.java!!!	setDefaultFontSize(in size : int) : void
        size = pin(size);
        if (mDefaultFontSize != size) {
            mDefaultFontSize = size;
            postSync();
        }
!!!4962060.java!!!	getDefaultFontSize() : int
        return mDefaultFontSize;
!!!4962188.java!!!	setDefaultFixedFontSize(in size : int) : void
        size = pin(size);
        if (mDefaultFixedFontSize != size) {
            mDefaultFixedFontSize = size;
            postSync();
        }
!!!4962316.java!!!	getDefaultFixedFontSize() : int
        return mDefaultFixedFontSize;
!!!4962444.java!!!	setPageCacheCapacity(in size : int) : void
        if (size < 0) size = 0;
        if (size > 20) size = 20;
        if (mPageCacheCapacity != size) {
            mPageCacheCapacity = size;
            postSync();
        }
!!!4962572.java!!!	setLoadsImagesAutomatically(inout flag : boolean) : void
        if (mLoadsImagesAutomatically != flag) {
            mLoadsImagesAutomatically = flag;
            postSync();
        }
!!!4962700.java!!!	getLoadsImagesAutomatically() : boolean
        return mLoadsImagesAutomatically;
!!!4962828.java!!!	setBlockNetworkImage(inout flag : boolean) : void
        if (mBlockNetworkImage != flag) {
            mBlockNetworkImage = flag;
            postSync();
        }
!!!4962956.java!!!	getBlockNetworkImage() : boolean
        return mBlockNetworkImage;
!!!4963084.java!!!	setBlockNetworkLoads(inout flag : boolean) : void
        if (mBlockNetworkLoads != flag) {
            mBlockNetworkLoads = flag;
            verifyNetworkAccess();
            postSync();
        }
!!!4963212.java!!!	getBlockNetworkLoads() : boolean
        return mBlockNetworkLoads;
!!!4963340.java!!!	verifyNetworkAccess() : void
        if (!mBlockNetworkLoads) {
            if (mContext.checkPermission("android.permission.INTERNET",
                    android.os.Process.myPid(), android.os.Process.myUid()) !=
                        PackageManager.PERMISSION_GRANTED) {
                throw new SecurityException
                        ("Permission denied - " +
                                "application missing INTERNET permission");
            }
        }
!!!4963468.java!!!	setJavaScriptEnabled(inout flag : boolean) : void
        if (mJavaScriptEnabled != flag) {
            mJavaScriptEnabled = flag;
            postSync();
            mWebView.updateJavaScriptEnabled(flag);
        }
!!!4963596.java!!!	setAllowUniversalAccessFromFileURLs(inout flag : boolean) : void
        if (mAllowUniversalAccessFromFileURLs != flag) {
            mAllowUniversalAccessFromFileURLs = flag;
            postSync();
        }
!!!4963724.java!!!	setAllowFileAccessFromFileURLs(inout flag : boolean) : void
        if (mAllowFileAccessFromFileURLs != flag) {
            mAllowFileAccessFromFileURLs = flag;
            postSync();
        }
!!!4963852.java!!!	setHardwareAccelSkiaEnabled(inout flag : boolean) : void
        if (mHardwareAccelSkia != flag) {
            mHardwareAccelSkia = flag;
            postSync();
        }
!!!4963980.java!!!	getHardwareAccelSkiaEnabled() : boolean
        return mHardwareAccelSkia;
!!!4964108.java!!!	setShowVisualIndicator(inout flag : boolean) : void
        if (mShowVisualIndicator != flag) {
            mShowVisualIndicator = flag;
            postSync();
        }
!!!4964236.java!!!	getShowVisualIndicator() : boolean
        return mShowVisualIndicator;
!!!4964364.java!!!	setPluginsEnabled(inout flag : boolean) : void
        setPluginState(flag ? PluginState.ON : PluginState.OFF);
!!!4964492.java!!!	setPluginState(inout state : PluginState) : void
        if (mPluginState != state) {
            mPluginState = state;
            postSync();
        }
!!!4964748.java!!!	setDatabasePath(in databasePath : String) : void
        if (databasePath != null && !mDatabasePathHasBeenSet) {
            mDatabasePath = databasePath;
            mDatabasePathHasBeenSet = true;
            postSync();
        }
!!!4964876.java!!!	setGeolocationDatabasePath(in databasePath : String) : void
        if (databasePath != null
                && !databasePath.equals(mGeolocationDatabasePath)) {
            mGeolocationDatabasePath = databasePath;
            postSync();
        }
!!!4965004.java!!!	setAppCacheEnabled(inout flag : boolean) : void
        if (mAppCacheEnabled != flag) {
            mAppCacheEnabled = flag;
            postSync();
        }
!!!4965132.java!!!	setAppCachePath(in path : String) : void
        // We test for a valid path and for repeated setting on the native
        // side, but we can avoid syncing in some simple cases. 
        if (mAppCachePath == null && path != null && !path.isEmpty()) {
            mAppCachePath = path;
            postSync();
        }
!!!4965260.java!!!	setAppCacheMaxSize(in appCacheMaxSize : long) : void
        if (appCacheMaxSize != mAppCacheMaxSize) {
            mAppCacheMaxSize = appCacheMaxSize;
            postSync();
        }
!!!4965388.java!!!	setDatabaseEnabled(inout flag : boolean) : void
       if (mDatabaseEnabled != flag) {
           mDatabaseEnabled = flag;
           postSync();
       }
!!!4965516.java!!!	setDomStorageEnabled(inout flag : boolean) : void
       if (mDomStorageEnabled != flag) {
           mDomStorageEnabled = flag;
           postSync();
       }
!!!4965644.java!!!	getDomStorageEnabled() : boolean
       return mDomStorageEnabled;
!!!4965772.java!!!	getDatabasePath() : String
        return mDatabasePath;
!!!4965900.java!!!	getDatabaseEnabled() : boolean
        return mDatabaseEnabled;
!!!4966028.java!!!	setWorkersEnabled(inout flag : boolean) : void
        if (mWorkersEnabled != flag) {
            mWorkersEnabled = flag;
            postSync();
        }
!!!4966156.java!!!	setGeolocationEnabled(inout flag : boolean) : void
        if (mGeolocationEnabled != flag) {
            mGeolocationEnabled = flag;
            postSync();
        }
!!!4966284.java!!!	setXSSAuditorEnabled(inout flag : boolean) : void
        if (mXSSAuditorEnabled != flag) {
            mXSSAuditorEnabled = flag;
            postSync();
        }
!!!4966412.java!!!	setLinkPrefetchEnabled(inout flag : boolean) : void
        if (mLinkPrefetchEnabled != flag) {
            mLinkPrefetchEnabled = flag;
            postSync();
        }
!!!4966540.java!!!	getJavaScriptEnabled() : boolean
        return mJavaScriptEnabled;
!!!4966668.java!!!	getAllowUniversalAccessFromFileURLs() : boolean
        return mAllowUniversalAccessFromFileURLs;
!!!4966796.java!!!	getAllowFileAccessFromFileURLs() : boolean
        return mAllowFileAccessFromFileURLs;
!!!4966924.java!!!	getPluginsEnabled() : boolean
        return mPluginState == PluginState.ON;
!!!4967052.java!!!	getPluginState() : PluginState
        return mPluginState;
!!!4967180.java!!!	getPluginsPath() : String
        return "";
!!!4967308.java!!!	setJavaScriptCanOpenWindowsAutomatically(inout flag : boolean) : void
        if (mJavaScriptCanOpenWindowsAutomatically != flag) {
            mJavaScriptCanOpenWindowsAutomatically = flag;
            postSync();
        }
!!!4967436.java!!!	getJavaScriptCanOpenWindowsAutomatically() : boolean
        return mJavaScriptCanOpenWindowsAutomatically;
!!!4967564.java!!!	setDefaultTextEncodingName(in encoding : String) : void
        if (encoding != null && !encoding.equals(mDefaultTextEncoding)) {
            mDefaultTextEncoding = encoding;
            postSync();
        }
!!!4967692.java!!!	getDefaultTextEncodingName() : String
        return mDefaultTextEncoding;
!!!4967820.java!!!	setUserAgentString(in ua : String) : void
        if (ua == null || ua.length() == 0) {
            synchronized(sLockForLocaleSettings) {
                Locale currentLocale = Locale.getDefault();
                if (!sLocale.equals(currentLocale)) {
                    sLocale = currentLocale;
                    mAcceptLanguage = getCurrentAcceptLanguage();
                }
            }
            ua = getCurrentUserAgent();
            mUseDefaultUserAgent = true;
        } else  {
            mUseDefaultUserAgent = false;
        }

        if (!ua.equals(mUserAgent)) {
            mUserAgent = ua;
            postSync();
        }
!!!4967948.java!!!	getUserAgentString() : String
        if (DESKTOP_USERAGENT.equals(mUserAgent) ||
                IPHONE_USERAGENT.equals(mUserAgent) ||
                !mUseDefaultUserAgent) {
            return mUserAgent;
        }

        boolean doPostSync = false;
        synchronized(sLockForLocaleSettings) {
            Locale currentLocale = Locale.getDefault();
            if (!sLocale.equals(currentLocale)) {
                sLocale = currentLocale;
                mUserAgent = getCurrentUserAgent();
                mAcceptLanguage = getCurrentAcceptLanguage();
                doPostSync = true;
            }
        }
        if (doPostSync) {
            postSync();
        }
        return mUserAgent;
!!!4968076.java!!!	getAcceptLanguage() : String
        synchronized(sLockForLocaleSettings) {
            Locale currentLocale = Locale.getDefault();
            if (!sLocale.equals(currentLocale)) {
                sLocale = currentLocale;
                mAcceptLanguage = getCurrentAcceptLanguage();
            }
        }
        return mAcceptLanguage;
!!!4968204.java!!!	isNarrowColumnLayout() : boolean
        return getLayoutAlgorithm() == LayoutAlgorithm.NARROW_COLUMNS;
!!!4968332.java!!!	setNeedInitialFocus(inout flag : boolean) : void
        if (mNeedInitialFocus != flag) {
            mNeedInitialFocus = flag;
        }
!!!4968460.java!!!	getNeedInitialFocus() : boolean
        return mNeedInitialFocus;
!!!4968588.java!!!	setRenderPriority(inout priority : RenderPriority) : void
        if (mRenderPriority != priority) {
            mRenderPriority = priority;
            mEventHandler.sendMessage(Message.obtain(null,
                    EventHandler.PRIORITY));
        }
!!!4968716.java!!!	setCacheMode(in mode : int) : void
        if (mode != mOverrideCacheMode) {
            mOverrideCacheMode = mode;
            postSync();
        }
!!!4968844.java!!!	getCacheMode() : int
        return mOverrideCacheMode;
!!!4968972.java!!!	setShrinksStandaloneImagesToFit(inout shrink : boolean) : void
        if (mShrinksStandaloneImagesToFit != shrink) {
            mShrinksStandaloneImagesToFit = shrink;
            postSync();
        }
!!!4969100.java!!!	setMaximumDecodedImageSize(in size : long) : void
        if (mMaximumDecodedImageSize != size) {
            mMaximumDecodedImageSize = size;
            postSync();
        }
!!!4969228.java!!!	getUseFixedViewport() : boolean
        return getUseWideViewPort();
!!!4969356.java!!!	isPrivateBrowsingEnabled() : boolean
        return mPrivateBrowsingEnabled;
!!!4969484.java!!!	setPrivateBrowsingEnabled(inout flag : boolean) : void
        if (mPrivateBrowsingEnabled != flag) {
            mPrivateBrowsingEnabled = flag;

            // AutoFill is dependant on private browsing being enabled so
            // reset it to take account of the new value of mPrivateBrowsingEnabled.
            setAutoFillEnabled(mAutoFillEnabled);

            postSync();
        }
!!!4969612.java!!!	forceUserScalable() : boolean
        return mForceUserScalable;
!!!4969740.java!!!	setForceUserScalable(inout flag : boolean) : void
        mForceUserScalable = flag;
!!!4969868.java!!!	setSyntheticLinksEnabled(inout flag : boolean) : void
        if (mSyntheticLinksEnabled != flag) {
            mSyntheticLinksEnabled = flag;
            postSync();
        }
!!!4969996.java!!!	setAutoFillEnabled(inout enabled : boolean) : void
        // AutoFill is always disabled in private browsing mode.
        boolean autoFillEnabled = enabled && !mPrivateBrowsingEnabled;
        if (mAutoFillEnabled != autoFillEnabled) {
            mAutoFillEnabled = autoFillEnabled;
            postSync();
        }
!!!4970124.java!!!	getAutoFillEnabled() : boolean
        return mAutoFillEnabled;
!!!4970252.java!!!	setAutoFillProfile(inout profile : AutoFillProfile) : void
        if (mAutoFillProfile != profile) {
            mAutoFillProfile = profile;
            postSync();
        }
!!!4970380.java!!!	getAutoFillProfile() : AutoFillProfile
        return mAutoFillProfile;
!!!4970508.java!!!	getDoubleTapToastCount() : int
        return mDoubleTapToastCount;
!!!4970636.java!!!	setDoubleTapToastCount(in count : int) : void
        if (mDoubleTapToastCount != count) {
            mDoubleTapToastCount = count;
            // write the settings in the non-UI thread
            mEventHandler.sendMessage(Message.obtain(null,
                    EventHandler.SET_DOUBLE_TAP_TOAST_COUNT));
        }
!!!4970764.java!!!	setProperty(in key : String, in value : String) : void
        if (mWebView.nativeSetProperty(key, value)) {
            mWebView.invalidate();
        }
!!!4970892.java!!!	getProperty(in key : String) : String
        return mWebView.nativeGetProperty(key);
!!!4971020.java!!!	syncSettingsAndCreateHandler(inout frame : BrowserFrame) : void
        mBrowserFrame = frame;
        if (DebugFlags.WEB_SETTINGS) {
            junit.framework.Assert.assertTrue(frame.mNativeFrame != 0);
        }

        SharedPreferences sp = mContext.getSharedPreferences(PREF_FILE,
                Context.MODE_PRIVATE);
        if (mDoubleTapToastCount > 0) {
            mDoubleTapToastCount = sp.getInt(DOUBLE_TAP_TOAST_COUNT,
                    mDoubleTapToastCount);
        }
        nativeSync(frame.mNativeFrame);
        mSyncPending = false;
        mEventHandler.createHandler();
!!!4971276.java!!!	pin(in size : int) : int
        // FIXME: 72 is just an arbitrary max text size value.
        if (size < 1) {
            return 1;
        } else if (size > 72) {
            return 72;
        }
        return size;
!!!4971404.java!!!	postSync() : void
        // Only post if a sync is not pending
        if (!mSyncPending) {
            mSyncPending = mEventHandler.sendMessage(
                    Message.obtain(null, EventHandler.SYNC));
        }
