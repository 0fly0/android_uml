class ByteBuffer
!!!645915.java!!!	allocate(in capacity : int) : ByteBuffer
        if (capacity < 0) {
            throw new IllegalArgumentException("capacity < 0: " + capacity);
        }
        return new ByteArrayBuffer(new byte[capacity]);
!!!646043.java!!!	allocateDirect(in capacity : int) : ByteBuffer
        if (capacity < 0) {
            throw new IllegalArgumentException("capacity < 0: " + capacity);
        }
        return new DirectByteBuffer(MemoryBlock.allocate(capacity), capacity, 0, false, null);
!!!646171.java!!!	wrap(inout array : byte) : ByteBuffer
        return new ByteArrayBuffer(array);
!!!646299.java!!!	wrap(inout array : byte, in start : int, in byteCount : int) : ByteBuffer
        Arrays.checkOffsetAndCount(array.length, start, byteCount);
        ByteBuffer buf = new ByteArrayBuffer(array);
        buf.position = start;
        buf.limit = start + byteCount;
        return buf;
!!!646427.java!!!	ByteBuffer(in capacity : int, inout block : MemoryBlock)
        super(0, capacity, block);
!!!646555.java!!!	array() : byte
        return protectedArray();
!!!646683.java!!!	arrayOffset() : int
        return protectedArrayOffset();
!!!647835.java!!!	compareTo(inout otherBuffer : ByteBuffer) : int
        int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining()
                : otherBuffer.remaining();
        int thisPos = position;
        int otherPos = otherBuffer.position;
        byte thisByte, otherByte;
        while (compareRemaining > 0) {
            thisByte = get(thisPos);
            otherByte = otherBuffer.get(otherPos);
            if (thisByte != otherByte) {
                return thisByte < otherByte ? -1 : 1;
            }
            thisPos++;
            otherPos++;
            compareRemaining--;
        }
        return remaining() - otherBuffer.remaining();
!!!648091.java!!!	equals(inout other : Object) : boolean
        if (!(other instanceof ByteBuffer)) {
            return false;
        }
        ByteBuffer otherBuffer = (ByteBuffer) other;

        if (remaining() != otherBuffer.remaining()) {
            return false;
        }

        int myPosition = position;
        int otherPosition = otherBuffer.position;
        boolean equalSoFar = true;
        while (equalSoFar && (myPosition < limit)) {
            equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);
        }

        return equalSoFar;
!!!648347.java!!!	get(inout dst : byte) : ByteBuffer
        return get(dst, 0, dst.length);
!!!648475.java!!!	get(inout dst : byte, in dstOffset : int, in byteCount : int) : ByteBuffer
        Arrays.checkOffsetAndCount(dst.length, dstOffset, byteCount);
        if (byteCount > remaining()) {
            throw new BufferUnderflowException();
        }
        for (int i = dstOffset; i < dstOffset + byteCount; ++i) {
            dst[i] = get();
        }
        return this;
!!!650267.java!!!	hasArray() : boolean
        return protectedHasArray();
!!!650395.java!!!	hashCode() : int
        int myPosition = position;
        int hash = 0;
        while (myPosition < limit) {
            hash = hash + get(myPosition++);
        }
        return hash;
!!!650651.java!!!	order() : ByteOrder
        return order;
!!!650779.java!!!	order(inout byteOrder : ByteOrder) : ByteBuffer
        if (byteOrder == null) {
            byteOrder = ByteOrder.LITTLE_ENDIAN;
        }
        order = byteOrder;
        return this;
!!!651419.java!!!	put(inout src : byte) : ByteBuffer
        return put(src, 0, src.length);
!!!651547.java!!!	put(inout src : byte, in srcOffset : int, in byteCount : int) : ByteBuffer
        Arrays.checkOffsetAndCount(src.length, srcOffset, byteCount);
        if (byteCount > remaining()) {
            throw new BufferOverflowException();
        }
        for (int i = srcOffset; i < srcOffset + byteCount; ++i) {
            put(src[i]);
        }
        return this;
!!!651675.java!!!	put(inout src : ByteBuffer) : ByteBuffer
        if (isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        if (src == this) {
            throw new IllegalArgumentException("src == this");
        }
        int srcByteCount = src.remaining();
        if (srcByteCount > remaining()) {
            throw new BufferOverflowException();
        }

        Object srcObject = src.isDirect() ? src : NioUtils.unsafeArray(src);
        int srcOffset = src.position();
        if (!src.isDirect()) {
            srcOffset += NioUtils.unsafeArrayOffset(src);
        }

        ByteBuffer dst = this;
        Object dstObject = dst.isDirect() ? dst : NioUtils.unsafeArray(dst);
        int dstOffset = dst.position();
        if (!dst.isDirect()) {
            dstOffset += NioUtils.unsafeArrayOffset(dst);
        }

        Memory.memmove(dstObject, dstOffset, srcObject, srcOffset, srcByteCount);
        src.position(src.limit());
        dst.position(dst.position() + srcByteCount);

        return this;
