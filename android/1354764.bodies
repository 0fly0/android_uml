class Session
!!!8722828.java!!!	Session(inout service : WindowManagerService, inout client : IInputMethodClient, inout inputContext : IInputContext)
        mService = service;
        mClient = client;
        mInputContext = inputContext;
        mUid = Binder.getCallingUid();
        mPid = Binder.getCallingPid();
        StringBuilder sb = new StringBuilder();
        sb.append("Session{");
        sb.append(Integer.toHexString(System.identityHashCode(this)));
        sb.append(" ");
        sb.append(mPid);
        if (mUid < Process.FIRST_APPLICATION_UID) {
            sb.append(":");
            sb.append(mUid);
        } else {
            sb.append(":u");
            sb.append(UserHandle.getUserId(mUid));
            sb.append('a');
            sb.append(UserHandle.getAppId(mUid));
        }
        sb.append("}");
        mStringName = sb.toString();

        synchronized (mService.mWindowMap) {
            if (mService.mInputMethodManager == null && mService.mHaveInputMethods) {
                IBinder b = ServiceManager.getService(
                        Context.INPUT_METHOD_SERVICE);
                mService.mInputMethodManager = IInputMethodManager.Stub.asInterface(b);
            }
        }
        long ident = Binder.clearCallingIdentity();
        try {
            // Note: it is safe to call in to the input method manager
            // here because we are not holding our lock.
            if (mService.mInputMethodManager != null) {
                mService.mInputMethodManager.addClient(client, inputContext,
                        mUid, mPid);
            } else {
                client.setUsingInputMethod(false);
            }
            client.asBinder().linkToDeath(this, 0);
        } catch (RemoteException e) {
            // The caller has died, so we can just forget about this.
            try {
                if (mService.mInputMethodManager != null) {
                    mService.mInputMethodManager.removeClient(client);
                }
            } catch (RemoteException ee) {
            }
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
!!!8722956.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
        try {
            return super.onTransact(code, data, reply, flags);
        } catch (RuntimeException e) {
            // Log all 'real' exceptions thrown to the caller
            if (!(e instanceof SecurityException)) {
                Slog.e(WindowManagerService.TAG, "Window Session Crash", e);
            }
            throw e;
        }
!!!8723084.java!!!	binderDied() : void
        // Note: it is safe to call in to the input method manager
        // here because we are not holding our lock.
        try {
            if (mService.mInputMethodManager != null) {
                mService.mInputMethodManager.removeClient(mClient);
            }
        } catch (RemoteException e) {
        }
        synchronized(mService.mWindowMap) {
            mClient.asBinder().unlinkToDeath(this, 0);
            mClientDead = true;
            killSessionLocked();
        }
!!!8723212.java!!!	add(inout window : IWindow, in seq : int, inout attrs : LayoutParams, in viewVisibility : int, inout outContentInsets : Rect, inout outInputChannel : InputChannel) : int
        return addToDisplay(window, seq, attrs, viewVisibility, Display.DEFAULT_DISPLAY,
                outContentInsets, outInputChannel);
!!!8723340.java!!!	addToDisplay(inout window : IWindow, in seq : int, inout attrs : LayoutParams, in viewVisibility : int, in displayId : int, inout outContentInsets : Rect, inout outInputChannel : InputChannel) : int
        return mService.addWindow(this, window, seq, attrs, viewVisibility, displayId,
                outContentInsets, outInputChannel);
!!!8723468.java!!!	addWithoutInputChannel(inout window : IWindow, in seq : int, inout attrs : LayoutParams, in viewVisibility : int, inout outContentInsets : Rect) : int
        return addToDisplayWithoutInputChannel(window, seq, attrs, viewVisibility,
                Display.DEFAULT_DISPLAY, outContentInsets);
!!!8723596.java!!!	addToDisplayWithoutInputChannel(inout window : IWindow, in seq : int, inout attrs : LayoutParams, in viewVisibility : int, in displayId : int, inout outContentInsets : Rect) : int
        return mService.addWindow(this, window, seq, attrs, viewVisibility, displayId,
            outContentInsets, null);
!!!8723724.java!!!	remove(inout window : IWindow) : void
        mService.removeWindow(this, window);
!!!8723852.java!!!	relayout(inout window : IWindow, in seq : int, inout attrs : LayoutParams, in requestedWidth : int, in requestedHeight : int, in viewFlags : int, in flags : int, inout outFrame : Rect, inout outContentInsets : Rect, inout outVisibleInsets : Rect, inout outConfig : Configuration, inout outSurface : Surface) : int
        if (false) Slog.d(WindowManagerService.TAG, ">>>>>> ENTERED relayout from "
                + Binder.getCallingPid());
        int res = mService.relayoutWindow(this, window, seq, attrs,
                requestedWidth, requestedHeight, viewFlags, flags,
                outFrame, outContentInsets, outVisibleInsets,
                outConfig, outSurface);
        if (false) Slog.d(WindowManagerService.TAG, "<<<<<< EXITING relayout to "
                + Binder.getCallingPid());
        return res;
!!!8723980.java!!!	performDeferredDestroy(inout window : IWindow) : void
        mService.performDeferredDestroyWindow(this, window);
!!!8724108.java!!!	outOfMemory(inout window : IWindow) : boolean
        return mService.outOfMemoryWindow(this, window);
!!!8724236.java!!!	setTransparentRegion(inout window : IWindow, inout region : Region) : void
        mService.setTransparentRegionWindow(this, window, region);
!!!8724364.java!!!	setInsets(inout window : IWindow, in touchableInsets : int, inout contentInsets : Rect, inout visibleInsets : Rect, inout touchableArea : Region) : void
        mService.setInsetsWindow(this, window, touchableInsets, contentInsets,
                visibleInsets, touchableArea);
!!!8724492.java!!!	getDisplayFrame(inout window : IWindow, inout outDisplayFrame : Rect) : void
        mService.getWindowDisplayFrame(this, window, outDisplayFrame);
!!!8724620.java!!!	finishDrawing(inout window : IWindow) : void
        if (WindowManagerService.localLOGV) Slog.v(
            WindowManagerService.TAG, "IWindow finishDrawing called for " + window);
        mService.finishDrawingWindow(this, window);
!!!8724748.java!!!	setInTouchMode(inout mode : boolean) : void
        synchronized(mService.mWindowMap) {
            mService.mInTouchMode = mode;
        }
!!!8724876.java!!!	getInTouchMode() : boolean
        synchronized(mService.mWindowMap) {
            return mService.mInTouchMode;
        }
!!!8725004.java!!!	performHapticFeedback(inout window : IWindow, in effectId : int, inout always : boolean) : boolean
        synchronized(mService.mWindowMap) {
            long ident = Binder.clearCallingIdentity();
            try {
                return mService.mPolicy.performHapticFeedbackLw(
                        mService.windowForClientLocked(this, window, true),
                        effectId, always);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        }
!!!8725132.java!!!	prepareDrag(inout window : IWindow, in flags : int, in width : int, in height : int, inout outSurface : Surface) : IBinder
        return mService.prepareDragSurface(window, mSurfaceSession, flags,
                width, height, outSurface);
!!!8725260.java!!!	performDrag(inout window : IWindow, inout dragToken : IBinder, in touchX : float, in touchY : float, in thumbCenterX : float, in thumbCenterY : float, inout data : ClipData) : boolean
        if (WindowManagerService.DEBUG_DRAG) {
            Slog.d(WindowManagerService.TAG, "perform drag: win=" + window + " data=" + data);
        }

        synchronized (mService.mWindowMap) {
            if (mService.mDragState == null) {
                Slog.w(WindowManagerService.TAG, "No drag prepared");
                throw new IllegalStateException("performDrag() without prepareDrag()");
            }

            if (dragToken != mService.mDragState.mToken) {
                Slog.w(WindowManagerService.TAG, "Performing mismatched drag");
                throw new IllegalStateException("performDrag() does not match prepareDrag()");
            }

            WindowState callingWin = mService.windowForClientLocked(null, window, false);
            if (callingWin == null) {
                Slog.w(WindowManagerService.TAG, "Bad requesting window " + window);
                return false;  // !!! TODO: throw here?
            }

            // !!! TODO: if input is not still focused on the initiating window, fail
            // the drag initiation (e.g. an alarm window popped up just as the application
            // called performDrag()

            mService.mH.removeMessages(H.DRAG_START_TIMEOUT, window.asBinder());

            // !!! TODO: extract the current touch (x, y) in screen coordinates.  That
            // will let us eliminate the (touchX,touchY) parameters from the API.

            // !!! FIXME: put all this heavy stuff onto the mH looper, as well as
            // the actual drag event dispatch stuff in the dragstate

            Display display = callingWin.mDisplayContent.getDisplay();
            mService.mDragState.register(display);
            mService.mInputMonitor.updateInputWindowsLw(true /*force*/);
            if (!mService.mInputManager.transferTouchFocus(callingWin.mInputChannel,
                    mService.mDragState.mServerChannel)) {
                Slog.e(WindowManagerService.TAG, "Unable to transfer touch focus");
                mService.mDragState.unregister();
                mService.mDragState = null;
                mService.mInputMonitor.updateInputWindowsLw(true /*force*/);
                return false;
            }

            mService.mDragState.mData = data;
            mService.mDragState.mCurrentX = touchX;
            mService.mDragState.mCurrentY = touchY;
            mService.mDragState.broadcastDragStartedLw(touchX, touchY);

            // remember the thumb offsets for later
            mService.mDragState.mThumbOffsetX = thumbCenterX;
            mService.mDragState.mThumbOffsetY = thumbCenterY;

            // Make the surface visible at the proper location
            final Surface surface = mService.mDragState.mSurface;
            if (WindowManagerService.SHOW_LIGHT_TRANSACTIONS) Slog.i(
                    WindowManagerService.TAG, ">>> OPEN TRANSACTION performDrag");
            Surface.openTransaction();
            try {
                surface.setPosition(touchX - thumbCenterX,
                        touchY - thumbCenterY);
                surface.setAlpha(.7071f);
                surface.setLayer(mService.mDragState.getDragLayerLw());
                surface.setLayerStack(display.getLayerStack());
                surface.show();
            } finally {
                Surface.closeTransaction();
                if (WindowManagerService.SHOW_LIGHT_TRANSACTIONS) Slog.i(
                        WindowManagerService.TAG, "<<< CLOSE TRANSACTION performDrag");
            }
        }

        return true;    // success!
!!!8725388.java!!!	reportDropResult(inout window : IWindow, inout consumed : boolean) : void
        IBinder token = window.asBinder();
        if (WindowManagerService.DEBUG_DRAG) {
            Slog.d(WindowManagerService.TAG, "Drop result=" + consumed + " reported by " + token);
        }

        synchronized (mService.mWindowMap) {
            long ident = Binder.clearCallingIdentity();
            try {
                if (mService.mDragState == null) {
                    // Most likely the drop recipient ANRed and we ended the drag
                    // out from under it.  Log the issue and move on.
                    Slog.w(WindowManagerService.TAG, "Drop result given but no drag in progress");
                    return;
                }

                if (mService.mDragState.mToken != token) {
                    // We're in a drag, but the wrong window has responded.
                    Slog.w(WindowManagerService.TAG, "Invalid drop-result claim by " + window);
                    throw new IllegalStateException("reportDropResult() by non-recipient");
                }

                // The right window has responded, even if it's no longer around,
                // so be sure to halt the timeout even if the later WindowState
                // lookup fails.
                mService.mH.removeMessages(H.DRAG_END_TIMEOUT, window.asBinder());
                WindowState callingWin = mService.windowForClientLocked(null, window, false);
                if (callingWin == null) {
                    Slog.w(WindowManagerService.TAG, "Bad result-reporting window " + window);
                    return;  // !!! TODO: throw here?
                }

                mService.mDragState.mDragResult = consumed;
                mService.mDragState.endDragLw();
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        }
!!!8725516.java!!!	dragRecipientEntered(inout window : IWindow) : void
        if (WindowManagerService.DEBUG_DRAG) {
            Slog.d(WindowManagerService.TAG, "Drag into new candidate view @ " + window.asBinder());
        }
!!!8725644.java!!!	dragRecipientExited(inout window : IWindow) : void
        if (WindowManagerService.DEBUG_DRAG) {
            Slog.d(WindowManagerService.TAG, "Drag from old candidate view @ " + window.asBinder());
        }
!!!8725772.java!!!	setWallpaperPosition(inout window : IBinder, in x : float, in y : float, in xStep : float, in yStep : float) : void
        synchronized(mService.mWindowMap) {
            long ident = Binder.clearCallingIdentity();
            try {
                mService.setWindowWallpaperPositionLocked(
                        mService.windowForClientLocked(this, window, true),
                        x, y, xStep, yStep);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        }
!!!8725900.java!!!	wallpaperOffsetsComplete(inout window : IBinder) : void
        mService.wallpaperOffsetsComplete(window);
!!!8726028.java!!!	sendWallpaperCommand(inout window : IBinder, in action : String, in x : int, in y : int, in z : int, inout extras : Bundle, inout sync : boolean) : Bundle
        synchronized(mService.mWindowMap) {
            long ident = Binder.clearCallingIdentity();
            try {
                return mService.sendWindowWallpaperCommandLocked(
                        mService.windowForClientLocked(this, window, true),
                        action, x, y, z, extras, sync);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        }
!!!8726156.java!!!	wallpaperCommandComplete(inout window : IBinder, inout result : Bundle) : void
        mService.wallpaperCommandComplete(window, result);
!!!8726284.java!!!	setUniverseTransform(inout window : IBinder, in alpha : float, in offx : float, in offy : float, in dsdx : float, in dtdx : float, in dsdy : float, in dtdy : float) : void
        synchronized(mService.mWindowMap) {
            long ident = Binder.clearCallingIdentity();
            try {
                mService.setUniverseTransformLocked(
                        mService.windowForClientLocked(this, window, true),
                        alpha, offx, offy, dsdx, dtdx, dsdy, dtdy);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        }
!!!8726412.java!!!	onRectangleOnScreenRequested(inout token : IBinder, inout rectangle : Rect, inout immediate : boolean) : void
        synchronized(mService.mWindowMap) {
            final long identity = Binder.clearCallingIdentity();
            try {
                mService.onRectangleOnScreenRequested(token, rectangle, immediate);
            } finally {
                Binder.restoreCallingIdentity(identity);
            }
        }
!!!8726540.java!!!	updatePointerIcon(inout window : IWindow, inout icon : PointerIcon) : void
        synchronized(mService.mWindowMap) {
            mService.updatePointerIconForWindowLocked(this, window, icon);
        }
!!!8726668.java!!!	windowAddedLocked() : void
        if (mSurfaceSession == null) {
            if (WindowManagerService.localLOGV) Slog.v(
                WindowManagerService.TAG, "First window added to " + this + ", creating SurfaceSession");
            mSurfaceSession = new SurfaceSession();
            if (WindowManagerService.SHOW_TRANSACTIONS) Slog.i(
                    WindowManagerService.TAG, "  NEW SURFACE SESSION " + mSurfaceSession);
            mService.mSessions.add(this);
        }
        mNumWindow++;
!!!8726796.java!!!	windowRemovedLocked() : void
        mNumWindow--;
        killSessionLocked();
!!!8726924.java!!!	killSessionLocked() : void
        if (mNumWindow <= 0 && mClientDead) {
            mService.mSessions.remove(this);
            if (mSurfaceSession != null) {
                if (WindowManagerService.localLOGV) Slog.v(
                    WindowManagerService.TAG, "Last window removed from " + this
                    + ", destroying " + mSurfaceSession);
                if (WindowManagerService.SHOW_TRANSACTIONS) Slog.i(
                        WindowManagerService.TAG, "  KILL SURFACE SESSION " + mSurfaceSession);
                try {
                    mSurfaceSession.kill();
                } catch (Exception e) {
                    Slog.w(WindowManagerService.TAG, "Exception thrown when killing surface session "
                        + mSurfaceSession + " in session " + this
                        + ": " + e.toString());
                }
                mSurfaceSession = null;
            }
        }
!!!8727052.java!!!	dump(inout pw : PrintWriter, in prefix : String) : void
        pw.print(prefix); pw.print("mNumWindow="); pw.print(mNumWindow);
                pw.print(" mClientDead="); pw.print(mClientDead);
                pw.print(" mSurfaceSession="); pw.println(mSurfaceSession);
!!!8727180.java!!!	toString() : String
        return mStringName;
