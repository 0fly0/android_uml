class ClientStateTest
!!!13325836.java!!!	testBuild_empty() : void
        ClientState empty = new ClientState.Builder().build();
        for (Feature feature : Feature.values()) {
            assertFalse(empty.has(feature));
        }
!!!13325964.java!!!	testBuild_nonEmpty_constructor() : void
        ClientState state = new ClientState.Builder(Feature.VISIBLE).build();
        assertTrue(state.has(Feature.VISIBLE));
        assertFalse(state.has(Feature.FOCUSED));
!!!13326092.java!!!	testBuild_nonEmpty_method() : void
        ClientState state = new ClientState.Builder()
                .set(Feature.VISIBLE, true)
                .build();
        assertTrue(state.has(Feature.VISIBLE));
        assertFalse(state.has(Feature.FOCUSED));
!!!13326220.java!!!	testBuild_reset() : void
        ClientState state = new ClientState.Builder(Feature.VISIBLE)
                .set(Feature.VISIBLE, false)
                .build();
        assertFalse(state.has(Feature.VISIBLE));
!!!13326348.java!!!	testParcel_empty() : void
        ClientState empty = new ClientState.Builder().build();
        Parcel parcel = Parcel.obtain();
        empty.writeToParcel(parcel, 0 /* no flag */);
        parcel.setDataPosition(0);
        ClientState result = ClientState.CREATOR.createFromParcel(parcel);
        for (Feature feature : Feature.values()) {
            assertFalse(result.has(feature));
        }
!!!13326476.java!!!	testParcel_nonEmpty() : void
        ClientState nonEmpty = new ClientState.Builder()
                .set(Feature.COVERED, true)
                .set(Feature.PINNED, true)
                .build();
        Parcel parcel = Parcel.obtain();
        nonEmpty.writeToParcel(parcel, 0 /* no flag */);
        parcel.setDataPosition(0);
        ClientState result = ClientState.CREATOR.createFromParcel(parcel);
        assertTrue(result.has(Feature.COVERED));
        assertTrue(result.has(Feature.PINNED));
        assertFalse(result.has(Feature.VISIBLE));
        assertFalse(result.has(Feature.FOCUSED));
