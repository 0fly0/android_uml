class HideFromAccessibilityHelper
!!!13649164.java!!!	HideFromAccessibilityHelper()
        mPreviousValues = new HashMap<View, Integer>();
        mHide = false;
!!!13649292.java!!!	setImportantForAccessibilityToNo(inout v : View, inout onlyAllApps : boolean) : void
        mOnlyAllApps = onlyAllApps;
        setImportantForAccessibilityToNoHelper(v);
        mHide = true;
!!!13649420.java!!!	setImportantForAccessibilityToNoHelper(inout v : View) : void
        mPreviousValues.put(v, v.getImportantForAccessibility());
        v.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_NO);

        // Call method on children recursively
        if (v instanceof ViewGroup) {
            ViewGroup vg = (ViewGroup) v;
            vg.setOnHierarchyChangeListener(this);
            for (int i = 0; i < vg.getChildCount(); i++) {
                View child = vg.getChildAt(i);

                if (includeView(child)) {
                    setImportantForAccessibilityToNoHelper(child);
                }
            }
        }
!!!13649548.java!!!	restoreImportantForAccessibility(inout v : View) : void
        if (mHide) {
            restoreImportantForAccessibilityHelper(v);
        }
        mHide = false;
!!!13649676.java!!!	restoreImportantForAccessibilityHelper(inout v : View) : void
        v.setImportantForAccessibility(mPreviousValues.get(v));
        mPreviousValues.remove(v);

        // Call method on children recursively
        if (v instanceof ViewGroup) {
            ViewGroup vg = (ViewGroup) v;

            // We assume if a class implements OnHierarchyChangeListener, it listens
            // to changes to any of its children (happens to be the case in Launcher)
            if (vg instanceof OnHierarchyChangeListener) {
                vg.setOnHierarchyChangeListener((OnHierarchyChangeListener) vg);
            } else {
                vg.setOnHierarchyChangeListener(null);
            }
            for (int i = 0; i < vg.getChildCount(); i++) {
                View child = vg.getChildAt(i);
                if (includeView(child)) {
                    restoreImportantForAccessibilityHelper(child);
                }
            }
        }
!!!13649804.java!!!	onChildViewAdded(inout parent : View, inout child : View) : void
        if (mHide && includeView(child)) {
            setImportantForAccessibilityToNoHelper(child);
        }
!!!13649932.java!!!	onChildViewRemoved(inout parent : View, inout child : View) : void
        if (mHide && includeView(child)) {
            restoreImportantForAccessibilityHelper(child);
        }
!!!13650060.java!!!	includeView(inout v : View) : boolean
        return !hasAncestorOfType(v, Cling.class) &&
                (!mOnlyAllApps || hasAncestorOfType(v, AppsCustomizeTabHost.class));
!!!13650188.java!!!	hasAncestorOfType(inout v : View, inout c : Class) : boolean
        return v != null &&
                (v.getClass().equals(c) ||
                 (v.getParent() instanceof ViewGroup &&
                  hasAncestorOfType((ViewGroup) v.getParent(), c)));
