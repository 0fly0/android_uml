class UpdateAvailableChannelsTask
!!!13048588.java!!!	UpdateAvailableChannelsTask(inout context : Context)
        mContext = context;
!!!13048716.java!!!	doInBackground(inout  : String...params) : Integer
        if (params.length != 1) {
            return RESULT_FAILED;
        }

        final String deviceId = params[0];
        final ContentResolver resolver = mContext.getContentResolver();
        List<ChannelEntry> channels = new ArrayList<ChannelEntry>();

        Cursor cursor = null;
        try {
            // Query the provider to get our list of channel numbers.
            cursor = resolver.query(Streams.getStreamsUri(),
                    QUERY_PROJECTION,
                    QUERY_SELECTION,
                    new String[] { deviceId },
                    QUERY_SORT_ORDER);
            while (cursor.moveToNext()) {
                long id = cursor.getLong(0);
                ChannelNumber number = new ChannelNumber(cursor.getString(1));
                int source = (cursor.isNull(2) ? Channel.NO_SOURCE : cursor.getInt(2));
                Uri uri = Uri.parse(cursor.getString(3));
                boolean available = (cursor.getInt(4) != 1);
                String callSign = cursor.getString(5);

                Channel.Builder channelBuilder = new Channel.Builder(id, number);
                channelBuilder.setSource(source);
                channelBuilder.setCallSign(callSign);

                channels.add(new ChannelEntry(id, channelBuilder.build(), uri, available));
            }
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }

        // Now enable or disable each channel as necessary.
        final int count = channels.size();
        int prevProgress = -1;
        final ContentValues values = new ContentValues();
        final String[] selectionArgs = new String[] { null };

        Map<String, String> extraUriParams = new HashMap<String, String>();

        for (int i = 0; i < count; ++i) {
            final ChannelEntry entry = channels.get(i);
            extraUriParams.clear();
            values.clear();

            final boolean available = isChannelAvailable(entry.channel, extraUriParams);
            selectionArgs[0] = String.valueOf(entry.id);

            if (available != entry.enabled) {
                values.put(StreamsColumns.IS_DISABLED, !available);
            }

            Uri updatedUri = TvUriUtils.addVendorQueryParameters(entry.uri, extraUriParams);
            if (updatedUri != null) {
                values.put(StreamsColumns.URI, updatedUri.toString());
            }

            if (values.size() > 0) {
                resolver.update(Streams.getStreamUri(entry.id), values, UPDATE_SELECTION,
                        selectionArgs);
            }

            int progress = (i * 100) / count;
            if (progress != prevProgress) {
                publishProgress(progress);
                prevProgress = progress;
            }
        }

        return RESULT_OK;
