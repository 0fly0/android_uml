class StringUtils
!!!12842124.java!!!	StringUtils()
        // This utility class is not publicly instantiable.
!!!12842252.java!!!	codePointCount(in text : String) : int
        if (TextUtils.isEmpty(text)) return 0;
        return text.codePointCount(0, text.length());
!!!12842380.java!!!	containsInArray(in key : String, inout array : String) : boolean
        for (final String element : array) {
            if (key.equals(element)) return true;
        }
        return false;
!!!12842508.java!!!	containsInCsv(in key : String, in csv : String) : boolean
        if (TextUtils.isEmpty(csv)) return false;
        return containsInArray(key, csv.split(","));
!!!12842636.java!!!	appendToCsvIfNotExists(in key : String, in csv : String) : String
        if (TextUtils.isEmpty(csv)) return key;
        if (containsInCsv(key, csv)) return csv;
        return csv + "," + key;
!!!12842764.java!!!	removeFromCsvIfExists(in key : String, in csv : String) : String
        if (TextUtils.isEmpty(csv)) return "";
        final String[] elements = csv.split(",");
        if (!containsInArray(key, elements)) return csv;
        final ArrayList<String> result = new ArrayList<String>(elements.length - 1);
        for (final String element : elements) {
            if (!key.equals(element)) result.add(element);
        }
        return TextUtils.join(",", result);
!!!12842892.java!!!	equalsIgnoreCase(in a : char, in b : char) : boolean
        // Some language, such as Turkish, need testing both cases.
        return a == b
                || Character.toLowerCase(a) == Character.toLowerCase(b)
                || Character.toUpperCase(a) == Character.toUpperCase(b);
!!!12843020.java!!!	equalsIgnoreCase(inout a : CharSequence, inout b : CharSequence) : boolean
        if (a == b)
            return true;  // including both a and b are null.
        if (a == null || b == null)
            return false;
        final int length = a.length();
        if (length != b.length())
            return false;
        for (int i = 0; i < length; i++) {
            if (!equalsIgnoreCase(a.charAt(i), b.charAt(i)))
                return false;
        }
        return true;
!!!12843148.java!!!	equalsIgnoreCase(inout a : CharSequence, inout b : char, in offset : int, in length : int) : boolean
        if (offset < 0 || length < 0 || length > b.length - offset)
            throw new IndexOutOfBoundsException("array.length=" + b.length + " offset=" + offset
                    + " length=" + length);
        if (a == null)
            return length == 0;  // including a is null and b is zero length.
        if (a.length() != length)
            return false;
        for (int i = 0; i < length; i++) {
            if (!equalsIgnoreCase(a.charAt(i), b[offset + i]))
                return false;
        }
        return true;
!!!12843276.java!!!	hasUpperCase(in cs : CharSequence) : boolean
        final int length = cs.length();
        for (int i = 0, cp = 0; i < length; i += Character.charCount(cp)) {
            cp = Character.codePointAt(cs, i);
            if (Character.isUpperCase(cp)) {
                return true;
            }
        }
        return false;
!!!12843404.java!!!	removeDupes(in suggestions : ArrayList<CharSequence>) : void
        if (suggestions.size() < 2) return;
        int i = 1;
        // Don't cache suggestions.size(), since we may be removing items
        while (i < suggestions.size()) {
            final CharSequence cur = suggestions.get(i);
            // Compare each suggestion with each previous suggestion
            for (int j = 0; j < i; j++) {
                CharSequence previous = suggestions.get(j);
                if (TextUtils.equals(cur, previous)) {
                    suggestions.remove(i);
                    i--;
                    break;
                }
            }
            i++;
        }
!!!12843532.java!!!	toTitleCase(in s : String, inout locale : Locale) : String
        if (s.length() <= 1) {
            // TODO: is this really correct? Shouldn't this be s.toUpperCase()?
            return s;
        }
        // TODO: fix the bugs below
        // - This does not work for Greek, because it returns upper case instead of title case.
        // - It does not work for Serbian, because it fails to account for the "lj" character,
        // which should be "Lj" in title case and "LJ" in upper case.
        // - It does not work for Dutch, because it fails to account for the "ij" digraph, which
        // are two different characters but both should be capitalized as "IJ" as if they were
        // a single letter.
        // - It also does not work with unicode surrogate code points.
        return s.toUpperCase(locale).charAt(0) + s.substring(1);
!!!12843660.java!!!	toCodePointArray(in string : String) : int
        final char[] characters = string.toCharArray();
        final int length = characters.length;
        final int[] codePoints = new int[Character.codePointCount(characters, 0, length)];
        int codePoint = Character.codePointAt(characters, 0);
        int dsti = 0;
        for (int srci = Character.charCount(codePoint);
                srci < length; srci += Character.charCount(codePoint), ++dsti) {
            codePoints[dsti] = codePoint;
            codePoint = Character.codePointAt(characters, srci);
        }
        codePoints[dsti] = codePoint;
        return codePoints;
