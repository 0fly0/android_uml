class ExpandableDictionary
!!!12782988.java!!!	ExpandableDictionary(inout context : Context, in dicTypeId : int)
        mContext = context;
        clearDictionary();
        mCodes = new int[BinaryDictionary.MAX_WORD_LENGTH][];
        mDicTypeId = dicTypeId;
!!!12783116.java!!!	loadDictionary() : void
        synchronized (mUpdatingLock) {
            startDictionaryLoadingTaskLocked();
        }
!!!12783244.java!!!	startDictionaryLoadingTaskLocked() : void
        if (!mUpdatingDictionary) {
            mUpdatingDictionary = true;
            mRequiresReload = false;
            new LoadDictionaryTask().start();
        }
!!!12783372.java!!!	setRequiresReload(inout reload : boolean) : void
        synchronized (mUpdatingLock) {
            mRequiresReload = reload;
        }
!!!12783500.java!!!	getRequiresReload() : boolean
        return mRequiresReload;
!!!12783628.java!!!	loadDictionaryAsync() : void
        // empty base implementation
!!!12783756.java!!!	getContext() : Context
        return mContext;
!!!12783884.java!!!	getMaxWordLength() : int
        return BinaryDictionary.MAX_WORD_LENGTH;
!!!12784012.java!!!	addWord(in word : String, in shortcutTarget : String, in frequency : int) : void
        if (word.length() >= BinaryDictionary.MAX_WORD_LENGTH) {
            return;
        }
        addWordRec(mRoots, word, 0, shortcutTarget, frequency, null);
!!!12784140.java!!!	addWordRec(inout children : NodeArray, in word : String, in depth : int, in shortcutTarget : String, in frequency : int, inout parentNode : Node) : void
        final int wordLength = word.length();
        if (wordLength <= depth) return;
        final char c = word.charAt(depth);
        // Does children have the current character?
        final int childrenLength = children.mLength;
        Node childNode = null;
        for (int i = 0; i < childrenLength; i++) {
            final Node node = children.mData[i];
            if (node.mCode == c) {
                childNode = node;
                break;
            }
        }
        final boolean isShortcutOnly = (null != shortcutTarget);
        if (childNode == null) {
            childNode = new Node();
            childNode.mCode = c;
            childNode.mParent = parentNode;
            childNode.mShortcutOnly = isShortcutOnly;
            children.add(childNode);
        }
        if (wordLength == depth + 1 && shortcutTarget != null) {
            // Terminate this word
            childNode.mTerminal = true;
            if (isShortcutOnly) {
                if (null == childNode.mShortcutTargets) {
                    childNode.mShortcutTargets = new ArrayList<char[]>();
                }
                childNode.mShortcutTargets.add(shortcutTarget.toCharArray());
            } else {
                childNode.mShortcutOnly = false;
            }
            childNode.mFrequency = Math.max(frequency, childNode.mFrequency);
            if (childNode.mFrequency > 255) childNode.mFrequency = 255;
            return;
        }
        if (childNode.mChildren == null) {
            childNode.mChildren = new NodeArray();
        }
        addWordRec(childNode.mChildren, word, depth + 1, shortcutTarget, frequency, childNode);
!!!12784268.java!!!	getWords(in codes : WordComposer, in prevWordForBigrams : CharSequence, in callback : WordCallback, in proximityInfo : ProximityInfo) : void
        synchronized (mUpdatingLock) {
            // If we need to update, start off a background task
            if (mRequiresReload) startDictionaryLoadingTaskLocked();
            // Currently updating contacts, don't return any results.
            if (mUpdatingDictionary) return;
        }
        if (codes.size() >= BinaryDictionary.MAX_WORD_LENGTH) {
            return;
        }
        getWordsInner(codes, prevWordForBigrams, callback, proximityInfo);
!!!12784396.java!!!	getWordsInner(in codes : WordComposer, in prevWordForBigrams : CharSequence, in callback : WordCallback, in proximityInfo : ProximityInfo) : void
        mInputLength = codes.size();
        if (mCodes.length < mInputLength) mCodes = new int[mInputLength][];
        final int[] xCoordinates = codes.getXCoordinates();
        final int[] yCoordinates = codes.getYCoordinates();
        // Cache the codes so that we don't have to lookup an array list
        for (int i = 0; i < mInputLength; i++) {
            // TODO: Calculate proximity info here.
            if (mCodes[i] == null || mCodes[i].length < 1) {
                mCodes[i] = new int[ProximityInfo.MAX_PROXIMITY_CHARS_SIZE];
            }
            final int x = xCoordinates != null && i < xCoordinates.length ?
                    xCoordinates[i] : WordComposer.NOT_A_COORDINATE;
            final int y = xCoordinates != null && i < yCoordinates.length ?
                    yCoordinates[i] : WordComposer.NOT_A_COORDINATE;
            proximityInfo.fillArrayWithNearestKeyCodes(x, y, codes.getCodeAt(i), mCodes[i]);
        }
        mMaxDepth = mInputLength * 3;
        getWordsRec(mRoots, codes, mWordBuilder, 0, false, 1, 0, -1, callback);
        for (int i = 0; i < mInputLength; i++) {
            getWordsRec(mRoots, codes, mWordBuilder, 0, false, 1, 0, i, callback);
        }
!!!12784524.java!!!	isValidWord(inout word : CharSequence) : boolean
        synchronized (mUpdatingLock) {
            // If we need to update, start off a background task
            if (mRequiresReload) startDictionaryLoadingTaskLocked();
            if (mUpdatingDictionary) return false;
        }
        final Node node = searchNode(mRoots, word, 0, word.length());
        // If node is null, we didn't find the word, so it's not valid.
        // If node.mShortcutOnly is true, then it exists as a shortcut but not as a word,
        // so that means it's not a valid word.
        // If node.mShortcutOnly is false, then it exists as a word (it may also exist as
        // a shortcut, but this does not matter), so it's a valid word.
        return (node == null) ? false : !node.mShortcutOnly;
!!!12784652.java!!!	removeBigram(in word1 : String, in word2 : String) : boolean
        // Refer to addOrSetBigram() about word1.toLowerCase()
        final Node firstWord = searchWord(mRoots, word1.toLowerCase(), 0, null);
        final Node secondWord = searchWord(mRoots, word2, 0, null);
        LinkedList<NextWord> bigrams = firstWord.mNGrams;
        NextWord bigramNode = null;
        if (bigrams == null || bigrams.size() == 0) {
            return false;
        } else {
            for (NextWord nw : bigrams) {
                if (nw.getWordNode() == secondWord) {
                    bigramNode = nw;
                    break;
                }
            }
        }
        if (bigramNode == null) {
            return false;
        }
        return bigrams.remove(bigramNode);
!!!12784780.java!!!	getWordFrequency(inout word : CharSequence) : int
        // Case-sensitive search
        final Node node = searchNode(mRoots, word, 0, word.length());
        return (node == null) ? -1 : node.mFrequency;
!!!12784908.java!!!	getBigramWord(in word1 : String, in word2 : String) : NextWord
        // Refer to addOrSetBigram() about word1.toLowerCase()
        final Node firstWord = searchWord(mRoots, word1.toLowerCase(), 0, null);
        final Node secondWord = searchWord(mRoots, word2, 0, null);
        LinkedList<NextWord> bigrams = firstWord.mNGrams;
        if (bigrams == null || bigrams.size() == 0) {
            return null;
        } else {
            for (NextWord nw : bigrams) {
                if (nw.getWordNode() == secondWord) {
                    return nw;
                }
            }
        }
        return null;
!!!12785036.java!!!	computeSkippedWordFinalFreq(in freq : int, in snr : int, in inputLength : int) : int
        // The computation itself makes sense for >= 2, but the == 2 case returns 0
        // anyway so we may as well test against 3 instead and return the constant
        if (inputLength >= 3) {
            return (freq * snr * (inputLength - 2)) / (inputLength - 1);
        } else {
            return 0;
        }
!!!12785164.java!!!	addWordAndShortcutsFromNode(in node : Node, in word : char, in depth : int, in finalFreq : int, in callback : WordCallback) : boolean
        if (finalFreq > 0 && !node.mShortcutOnly) {
            if (!callback.addWord(word, 0, depth + 1, finalFreq, mDicTypeId, Dictionary.UNIGRAM)) {
                return false;
            }
        }
        if (null != node.mShortcutTargets) {
            final int length = node.mShortcutTargets.size();
            for (int shortcutIndex = 0; shortcutIndex < length; ++shortcutIndex) {
                final char[] shortcut = node.mShortcutTargets.get(shortcutIndex);
                if (!callback.addWord(shortcut, 0, shortcut.length, finalFreq, mDicTypeId,
                        Dictionary.UNIGRAM)) {
                    return false;
                }
            }
        }
        return true;
!!!12785292.java!!!	getWordsRec(inout roots : NodeArray, in codes : WordComposer, in word : char, in depth : int, in completion : boolean, in snr : int, in inputIndex : int, in skipPos : int, inout callback : WordCallback) : void
        final int count = roots.mLength;
        final int codeSize = mInputLength;
        // Optimization: Prune out words that are too long compared to how much was typed.
        if (depth > mMaxDepth) {
            return;
        }
        final int[] currentChars;
        if (codeSize <= inputIndex) {
            currentChars = null;
        } else {
            currentChars = mCodes[inputIndex];
        }

        for (int i = 0; i < count; i++) {
            final Node node = roots.mData[i];
            final char c = node.mCode;
            final char lowerC = toLowerCase(c);
            final boolean terminal = node.mTerminal;
            final NodeArray children = node.mChildren;
            final int freq = node.mFrequency;
            if (completion || currentChars == null) {
                word[depth] = c;
                if (terminal) {
                    final int finalFreq;
                    if (skipPos < 0) {
                        finalFreq = freq * snr;
                    } else {
                        finalFreq = computeSkippedWordFinalFreq(freq, snr, mInputLength);
                    }
                    if (!addWordAndShortcutsFromNode(node, word, depth, finalFreq, callback)) {
                        // No space left in the queue, bail out
                        return;
                    }
                }
                if (children != null) {
                    getWordsRec(children, codes, word, depth + 1, true, snr, inputIndex,
                            skipPos, callback);
                }
            } else if ((c == Keyboard.CODE_SINGLE_QUOTE
                    && currentChars[0] != Keyboard.CODE_SINGLE_QUOTE) || depth == skipPos) {
                // Skip the ' and continue deeper
                word[depth] = c;
                if (children != null) {
                    getWordsRec(children, codes, word, depth + 1, completion, snr, inputIndex,
                            skipPos, callback);
                }
            } else {
                // Don't use alternatives if we're looking for missing characters
                final int alternativesSize = skipPos >= 0 ? 1 : currentChars.length;
                for (int j = 0; j < alternativesSize; j++) {
                    final int addedAttenuation = (j > 0 ? 1 : 2);
                    final int currentChar = currentChars[j];
                    if (currentChar == KeyDetector.NOT_A_CODE) {
                        break;
                    }
                    if (currentChar == lowerC || currentChar == c) {
                        word[depth] = c;

                        if (codeSize == inputIndex + 1) {
                            if (terminal) {
                                final int finalFreq;
                                if (skipPos < 0) {
                                    finalFreq = freq * snr * addedAttenuation
                                            * FULL_WORD_SCORE_MULTIPLIER;
                                } else {
                                    finalFreq = computeSkippedWordFinalFreq(freq,
                                            snr * addedAttenuation, mInputLength);
                                }
                                if (!addWordAndShortcutsFromNode(node, word, depth, finalFreq,
                                        callback)) {
                                    // No space left in the queue, bail out
                                    return;
                                }
                            }
                            if (children != null) {
                                getWordsRec(children, codes, word, depth + 1,
                                        true, snr * addedAttenuation, inputIndex + 1,
                                        skipPos, callback);
                            }
                        } else if (children != null) {
                            getWordsRec(children, codes, word, depth + 1,
                                    false, snr * addedAttenuation, inputIndex + 1,
                                    skipPos, callback);
                        }
                    }
                }
            }
        }
!!!12785420.java!!!	setBigramAndGetFrequency(in word1 : String, in word2 : String, in frequency : int) : int
        return setBigramAndGetFrequency(word1, word2, frequency, null /* unused */);
!!!12785548.java!!!	setBigramAndGetFrequency(in word1 : String, in word2 : String, inout fcp : ForgettingCurveParams) : int
        return setBigramAndGetFrequency(word1, word2, 0 /* unused */, fcp);
!!!12785676.java!!!	setBigramAndGetFrequency(in word1 : String, in word2 : String, in frequency : int, inout fcp : ForgettingCurveParams) : int
        // We don't want results to be different according to case of the looked up left hand side
        // word. We do want however to return the correct case for the right hand side.
        // So we want to squash the case of the left hand side, and preserve that of the right
        // hand side word.
        Node firstWord = searchWord(mRoots, word1.toLowerCase(), 0, null);
        Node secondWord = searchWord(mRoots, word2, 0, null);
        LinkedList<NextWord> bigrams = firstWord.mNGrams;
        if (bigrams == null || bigrams.size() == 0) {
            firstWord.mNGrams = new LinkedList<NextWord>();
            bigrams = firstWord.mNGrams;
        } else {
            for (NextWord nw : bigrams) {
                if (nw.getWordNode() == secondWord) {
                    return nw.notifyTypedAgainAndGetFrequency();
                }
            }
        }
        if (fcp != null) {
            // history
            firstWord.mNGrams.add(new NextHistoryWord(secondWord, fcp));
        } else {
            firstWord.mNGrams.add(new NextStaticWord(secondWord, frequency));
        }
        return frequency;
!!!12785804.java!!!	searchWord(inout children : NodeArray, in word : String, in depth : int, inout parentNode : Node) : Node
        final int wordLength = word.length();
        final char c = word.charAt(depth);
        // Does children have the current character?
        final int childrenLength = children.mLength;
        Node childNode = null;
        for (int i = 0; i < childrenLength; i++) {
            final Node node = children.mData[i];
            if (node.mCode == c) {
                childNode = node;
                break;
            }
        }
        if (childNode == null) {
            childNode = new Node();
            childNode.mCode = c;
            childNode.mParent = parentNode;
            children.add(childNode);
        }
        if (wordLength == depth + 1) {
            // Terminate this word
            childNode.mTerminal = true;
            return childNode;
        }
        if (childNode.mChildren == null) {
            childNode.mChildren = new NodeArray();
        }
        return searchWord(childNode.mChildren, word, depth + 1, childNode);
!!!12785932.java!!!	reloadDictionaryIfRequired() : boolean
        synchronized (mUpdatingLock) {
            // If we need to update, start off a background task
            if (mRequiresReload) startDictionaryLoadingTaskLocked();
            // Currently updating contacts, don't return any results.
            return mUpdatingDictionary;
        }
!!!12786060.java!!!	runBigramReverseLookUp(in previousWord : CharSequence, in callback : WordCallback) : void
        // Search for the lowercase version of the word only, because that's where bigrams
        // store their sons.
        Node prevWord = searchNode(mRoots, previousWord.toString().toLowerCase(), 0,
                previousWord.length());
        if (prevWord != null && prevWord.mNGrams != null) {
            reverseLookUp(prevWord.mNGrams, callback);
        }
!!!12786188.java!!!	getBigrams(in codes : WordComposer, in previousWord : CharSequence, in callback : WordCallback) : void
        if (!reloadDictionaryIfRequired()) {
            runBigramReverseLookUp(previousWord, callback);
        }
!!!12786316.java!!!	waitForDictionaryLoading() : void
        while (mUpdatingDictionary) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                //
            }
        }
!!!12786444.java!!!	blockingReloadDictionaryIfRequired() : void
        reloadDictionaryIfRequired();
        waitForDictionaryLoading();
!!!12786572.java!!!	reverseLookUp(inout terminalNodes : LinkedList<NextWord>, in callback : WordCallback) : void
        Node node;
        int freq;
        for (NextWord nextWord : terminalNodes) {
            node = nextWord.getWordNode();
            freq = nextWord.getFrequency();
            int index = BinaryDictionary.MAX_WORD_LENGTH;
            do {
                --index;
                mLookedUpString[index] = node.mCode;
                node = node.mParent;
            } while (node != null);

            if (freq >= 0) {
                callback.addWord(mLookedUpString, index, BinaryDictionary.MAX_WORD_LENGTH - index,
                        freq, mDicTypeId, Dictionary.BIGRAM);
            }
        }
!!!12786700.java!!!	searchNode(in children : NodeArray, in word : CharSequence, in offset : int, in length : int) : Node
        final int count = children.mLength;
        final char currentChar = word.charAt(offset);
        for (int j = 0; j < count; j++) {
            final Node node = children.mData[j];
            if (node.mCode == currentChar) {
                if (offset == length - 1) {
                    if (node.mTerminal) {
                        return node;
                    }
                } else {
                    if (node.mChildren != null) {
                        Node returnNode = searchNode(node.mChildren, word, offset + 1, length);
                        if (returnNode != null) return returnNode;
                    }
                }
            }
        }
        return null;
!!!12786828.java!!!	clearDictionary() : void
        mRoots = new NodeArray();
!!!12787212.java!!!	toLowerCase(in c : char) : char
        char baseChar = c;
        if (c < BASE_CHARS.length) {
            baseChar = BASE_CHARS[c];
        }
        if (baseChar >= 'A' && baseChar <= 'Z') {
            return (char)(baseChar | 32);
        } else if (baseChar > 127) {
            return Character.toLowerCase(baseChar);
        }
        return baseChar;
