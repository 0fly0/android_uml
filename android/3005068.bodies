class AbstractDeviceController
!!!12257036.java!!!	AbstractDeviceController(inout context : DeviceControllerContext, inout settings : MediaDeviceSettings, in deviceId : String)
        mControllerContext = context;
        mSettings = settings;
        mDeviceId = deviceId;
!!!12257164.java!!!	destroy() : void
        mControllerContext = null;
        mListener = null;
!!!12257292.java!!!	getDeviceId() : String
        return mDeviceId;
!!!12257420.java!!!	getCurrentLocation() : Uri
        return mCurrentLocation;
!!!12257548.java!!!	setListener(inout listener : DeviceControllerListener) : void
        mListener = listener;
!!!12257676.java!!!	setDeviceListener(in deviceListener : IDeviceListener) : void
        mDeviceListener = deviceListener;
!!!12258060.java!!!	tuneToCurrentChannel() : void
        // No-op by default.
!!!12258188.java!!!	goTo(inout tvUri : Uri) : boolean
        if (TvUriUtils.isGuide(tvUri)) {
            performAction(ActionEvent.forAction(Action.GUIDE));
        } else if (TvUriUtils.isDvr(tvUri)) {
            performAction(ActionEvent.forAction(Action.DVR));
        } else if (TvUriUtils.isDirectToChannel(tvUri)) {
            // This is used during LineupSetting before the controller has
            // written the channels database.
            ChannelNumber channel = TvUriUtils.getChannelNumber(tvUri);
            if (channel != null) {
                tuneToChannel(channel);
            }
        } else if (TvUriUtils.isProgram(tvUri)) {
            if (TvUriUtils.isLiveOrAboutToShowProgram(tvUri)) {
                ChannelNumber channel = TvUriUtils.getChannelNumber(tvUri);
                if (channel != null) {
                    tuneToChannel(channel);
                }
            } else {
                // This is in the future and we can't handle it. Send a message
                // up to the service to handle this.
                if (mListener != null) {
                    mListener.onScheduleRecordingRequested(mDeviceId, tvUri);
                }
            }
        } else if (TvUriUtils.isChannel(tvUri)) {
            ChannelNumber channel = StreamUtils.getChannelNumber(
                    getApplicationContext().getContentResolver(), tvUri);
            if (channel != null) {
                tuneToChannel(channel);
            } else {
                Log.w(LOG_TAG, "Invalid channel number in URI: " + tvUri);
            }
        } else if (TvUriUtils.isPassthrough(tvUri)) {
            tuneToCurrentChannel();
        } else {
            return false;
        }

        return true;
!!!12258316.java!!!	enableCaptionStream(in enable : boolean) : void
        // No-op by default
!!!12258444.java!!!	getEpg() : byte
        // Should be overridden if the device has PROVIDES_EPG capability.
        return null;
!!!12258572.java!!!	getTeletext() : byte
        // Should be overridden if the device has PROVIDES_TELETEXT capability.
        return null;
!!!12258700.java!!!	release() : void
        mCurrentLocation = null;
        onRelease();
!!!12258828.java!!!	onRelease() : void
        // No-op by default.
!!!12258956.java!!!	onNewClientState(in state : ClientState) : void
        // No-op by default
!!!12259084.java!!!	onMediaStreamStarted(in duration : int) : void
        // No-op by default
!!!12259212.java!!!	onMediaStreamStopped(in position : int) : void
        // No-op by default
!!!12259340.java!!!	onMediaStreamEnded() : void
        // No-op by default
!!!12259468.java!!!	onMediaStreamError(in errorCode : int) : boolean
        // No-op by default
        return false;
!!!12259596.java!!!	setMediaStreamUri(inout uri : Uri, in position : int) : void
        if (mDeviceListener != null) {
            try {
                mDeviceListener.setMediaStreamUri(uri, position);
            } catch (RemoteException ex) {
                Log.e(LOG_TAG, "Exception while setting media stream URI", ex);
            }
        }
!!!12259724.java!!!	queueMediaStreamUri(inout uri : Uri) : void
        if (mDeviceListener != null) {
            try {
                mDeviceListener.queueMediaStreamUri(uri);
            } catch (RemoteException ex) {
                Log.e(LOG_TAG, "Exception while queuing media stream URI", ex);
            }
        }
!!!12259852.java!!!	setMediaStreamPosition(in position : int) : void
        if (mDeviceListener != null) {
            try {
                mDeviceListener.setMediaStreamPosition(position);
            } catch (RemoteException ex) {
                Log.e(LOG_TAG, "Exception while setting media stream URI", ex);
            }
        }
!!!12259980.java!!!	getMediaStreamPosition() : int
        if (mDeviceListener != null) {
            try {
                return mDeviceListener.getMediaStreamPosition();
            } catch (RemoteException ex) {
                Log.e(LOG_TAG, "Exception while setting media stream URI", ex);
            }
        }

        return 0;
!!!12260108.java!!!	pauseMediaStream() : void
        try {
            mDeviceListener.pauseMediaStream();
        } catch (RemoteException ex) {
            Log.e(LOG_TAG, "Exception while pausing media stream", ex);
        }
!!!12260236.java!!!	resumeMediaStream() : void
        try {
            mDeviceListener.resumeMediaStream();
        } catch (RemoteException ex) {
            Log.e(LOG_TAG, "Exception while resuming media stream", ex);
        }
!!!12260364.java!!!	playMediaStream() : boolean
        try {
            return mDeviceListener.playMediaStream();
        } catch (RemoteException ex) {
            Log.e(LOG_TAG, "Exception while starting playback of media stream", ex);
            return false;
        }
!!!12260492.java!!!	notifyStreamEvent(in event : MediaStreamEvent) : void
        Uri uri = event.getUri();
        if (uri != null) {
            mCurrentLocation = uri;
        }
        if (mDeviceListener != null) {
            try {
                mDeviceListener.onMediaStreamEvent(event);
            } catch (RemoteException ex) {
                Log.e(LOG_TAG, "Exception while sending stream event", ex);
            }
        }
!!!12260620.java!!!	notifyCaptionStreamStateChanged(in enabled : boolean) : void
        if (mDeviceListener != null) {
            try {
                mDeviceListener.onCaptionStreamState(enabled);
            } catch (RemoteException ex) {
                Log.e(LOG_TAG, "Exception while sending caption stream state", ex);
            }
        }
!!!12260748.java!!!	notifyCaptionDataAvailable(in data : Caption) : void
        if (mDeviceListener != null) {
            try {
                mDeviceListener.onCaptionData(data);
            } catch (RemoteException ex) {
                Log.e(LOG_TAG, "Exception while sending caption data", ex);
            }
        }
!!!12261004.java!!!	getStringSetting(in key : String, in defaultValue : String) : String
        return mSettings.getString(mDeviceId, key, defaultValue);
!!!12261132.java!!!	setStringSetting(in key : String, in value : String) : void
        mSettings.setString(mDeviceId, key, value);
!!!12261260.java!!!	getLongSetting(in key : String, in defaultValue : long) : long
        return mSettings.getLong(mDeviceId, key, defaultValue);
!!!12261388.java!!!	setLongSetting(in key : String, in value : long) : void
        mSettings.setLong(mDeviceId, key, value);
!!!12261516.java!!!	getBooleanSetting(in key : String, inout defaultValue : boolean) : boolean
        return mSettings.getBoolean(mDeviceId, key, defaultValue);
!!!12261644.java!!!	setBooleanSetting(in key : String, inout value : boolean) : void
        mSettings.setBoolean(mDeviceId, key, value);
!!!12261772.java!!!	getApplicationContext() : Context
        if (mControllerContext == null) {
            Log.w(LOG_TAG, "getApplicationContext() called after controller was destroyed!");
            throw new IllegalStateException();
        }
        return mControllerContext.getApplicationContext();
!!!12261900.java!!!	getHandler() : Handler
        if (mControllerContext == null) {
            Log.w(LOG_TAG, "getHandler() called after controller was destroyed!");
            throw new IllegalStateException();
        }
        return mControllerContext.getHandler();
