class Intent
!!!3091596.java!!!	createChooser(inout target : Intent, inout title : CharSequence) : Intent
        Intent intent = new Intent(ACTION_CHOOSER);
        intent.putExtra(EXTRA_INTENT, target);
        if (title != null) {
            intent.putExtra(EXTRA_TITLE, title);
        }

        // Migrate any clip data and flags from target.
        int permFlags = target.getFlags()
                & (FLAG_GRANT_READ_URI_PERMISSION | FLAG_GRANT_WRITE_URI_PERMISSION);
        if (permFlags != 0) {
            ClipData targetClipData = target.getClipData();
            if (targetClipData == null && target.getData() != null) {
                ClipData.Item item = new ClipData.Item(target.getData());
                String[] mimeTypes;
                if (target.getType() != null) {
                    mimeTypes = new String[] { target.getType() };
                } else {
                    mimeTypes = new String[] { };
                }
                targetClipData = new ClipData(null, mimeTypes, item);
            }
            if (targetClipData != null) {
                intent.setClipData(targetClipData);
                intent.addFlags(permFlags);
            }
        }

        return intent;
!!!3091852.java!!!	Intent(inout o : Intent)
        this.mAction = o.mAction;
        this.mData = o.mData;
        this.mType = o.mType;
        this.mPackage = o.mPackage;
        this.mComponent = o.mComponent;
        this.mFlags = o.mFlags;
        if (o.mCategories != null) {
            this.mCategories = new HashSet<String>(o.mCategories);
        }
        if (o.mExtras != null) {
            this.mExtras = new Bundle(o.mExtras);
        }
        if (o.mSourceBounds != null) {
            this.mSourceBounds = new Rect(o.mSourceBounds);
        }
        if (o.mSelector != null) {
            this.mSelector = new Intent(o.mSelector);
        }
        if (o.mClipData != null) {
            this.mClipData = new ClipData(o.mClipData);
        }
!!!3091980.java!!!	clone() : Object
        return new Intent(this);
!!!3092108.java!!!	Intent(inout o : Intent, inout all : boolean)
        this.mAction = o.mAction;
        this.mData = o.mData;
        this.mType = o.mType;
        this.mPackage = o.mPackage;
        this.mComponent = o.mComponent;
        if (o.mCategories != null) {
            this.mCategories = new HashSet<String>(o.mCategories);
        }
!!!3092236.java!!!	cloneFilter() : Intent
        return new Intent(this, false);
!!!3092364.java!!!	Intent(in action : String)
        setAction(action);
!!!3092492.java!!!	Intent(in action : String, inout uri : Uri)
        setAction(action);
        mData = uri;
!!!3092620.java!!!	Intent(inout packageContext : Context, inout cls : Class<?>)
        mComponent = new ComponentName(packageContext, cls);
!!!3092748.java!!!	Intent(in action : String, inout uri : Uri, inout packageContext : Context, inout cls : Class<?>)
        setAction(action);
        mData = uri;
        mComponent = new ComponentName(packageContext, cls);
!!!3092876.java!!!	makeMainActivity(inout mainActivity : ComponentName) : Intent
        Intent intent = new Intent(ACTION_MAIN);
        intent.setComponent(mainActivity);
        intent.addCategory(CATEGORY_LAUNCHER);
        return intent;
!!!3093004.java!!!	makeMainSelectorActivity(in selectorAction : String, in selectorCategory : String) : Intent
        Intent intent = new Intent(ACTION_MAIN);
        intent.addCategory(CATEGORY_LAUNCHER);
        Intent selector = new Intent();
        selector.setAction(selectorAction);
        selector.addCategory(selectorCategory);
        intent.setSelector(selector);
        return intent;
!!!3093132.java!!!	makeRestartActivityTask(inout mainActivity : ComponentName) : Intent
        Intent intent = makeMainActivity(mainActivity);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                | Intent.FLAG_ACTIVITY_CLEAR_TASK);
        return intent;
!!!3093260.java!!!	getIntent(in uri : String) : Intent
        return parseUri(uri, 0);
!!!3093388.java!!!	parseUri(in uri : String, in flags : int) : Intent
        int i = 0;
        try {
            // Validate intent scheme for if requested.
            if ((flags&URI_INTENT_SCHEME) != 0) {
                if (!uri.startsWith("intent:")) {
                    Intent intent = new Intent(ACTION_VIEW);
                    try {
                        intent.setData(Uri.parse(uri));
                    } catch (IllegalArgumentException e) {
                        throw new URISyntaxException(uri, e.getMessage());
                    }
                    return intent;
                }
            }

            // simple case
            i = uri.lastIndexOf("#");
            if (i == -1) return new Intent(ACTION_VIEW, Uri.parse(uri));

            // old format Intent URI
            if (!uri.startsWith("#Intent;", i)) return getIntentOld(uri);

            // new format
            Intent intent = new Intent(ACTION_VIEW);
            Intent baseIntent = intent;

            // fetch data part, if present
            String data = i >= 0 ? uri.substring(0, i) : null;
            String scheme = null;
            i += "#Intent;".length();

            // loop over contents of Intent, all name=value;
            while (!uri.startsWith("end", i)) {
                int eq = uri.indexOf('=', i);
                if (eq < 0) eq = i-1;
                int semi = uri.indexOf(';', i);
                String value = eq < semi ? Uri.decode(uri.substring(eq + 1, semi)) : "";

                // action
                if (uri.startsWith("action=", i)) {
                    intent.setAction(value);
                }

                // categories
                else if (uri.startsWith("category=", i)) {
                    intent.addCategory(value);
                }

                // type
                else if (uri.startsWith("type=", i)) {
                    intent.mType = value;
                }

                // launch flags
                else if (uri.startsWith("launchFlags=", i)) {
                    intent.mFlags = Integer.decode(value).intValue();
                }

                // package
                else if (uri.startsWith("package=", i)) {
                    intent.mPackage = value;
                }

                // component
                else if (uri.startsWith("component=", i)) {
                    intent.mComponent = ComponentName.unflattenFromString(value);
                }

                // scheme
                else if (uri.startsWith("scheme=", i)) {
                    scheme = value;
                }

                // source bounds
                else if (uri.startsWith("sourceBounds=", i)) {
                    intent.mSourceBounds = Rect.unflattenFromString(value);
                }

                // selector
                else if (semi == (i+3) && uri.startsWith("SEL", i)) {
                    intent = new Intent();
                }

                // extra
                else {
                    String key = Uri.decode(uri.substring(i + 2, eq));
                    // create Bundle if it doesn't already exist
                    if (intent.mExtras == null) intent.mExtras = new Bundle();
                    Bundle b = intent.mExtras;
                    // add EXTRA
                    if      (uri.startsWith("S.", i)) b.putString(key, value);
                    else if (uri.startsWith("B.", i)) b.putBoolean(key, Boolean.parseBoolean(value));
                    else if (uri.startsWith("b.", i)) b.putByte(key, Byte.parseByte(value));
                    else if (uri.startsWith("c.", i)) b.putChar(key, value.charAt(0));
                    else if (uri.startsWith("d.", i)) b.putDouble(key, Double.parseDouble(value));
                    else if (uri.startsWith("f.", i)) b.putFloat(key, Float.parseFloat(value));
                    else if (uri.startsWith("i.", i)) b.putInt(key, Integer.parseInt(value));
                    else if (uri.startsWith("l.", i)) b.putLong(key, Long.parseLong(value));
                    else if (uri.startsWith("s.", i)) b.putShort(key, Short.parseShort(value));
                    else throw new URISyntaxException(uri, "unknown EXTRA type", i);
                }

                // move to the next item
                i = semi + 1;
            }

            if (intent != baseIntent) {
                // The Intent had a selector; fix it up.
                baseIntent.setSelector(intent);
                intent = baseIntent;
            }

            if (data != null) {
                if (data.startsWith("intent:")) {
                    data = data.substring(7);
                    if (scheme != null) {
                        data = scheme + ':' + data;
                    }
                }

                if (data.length() > 0) {
                    try {
                        intent.mData = Uri.parse(data);
                    } catch (IllegalArgumentException e) {
                        throw new URISyntaxException(uri, e.getMessage());
                    }
                }
            }

            return intent;

        } catch (IndexOutOfBoundsException e) {
            throw new URISyntaxException(uri, "illegal Intent URI format", i);
        }
!!!3093516.java!!!	getIntentOld(in uri : String) : Intent
        Intent intent;

        int i = uri.lastIndexOf('#');
        if (i >= 0) {
            String action = null;
            final int intentFragmentStart = i;
            boolean isIntentFragment = false;

            i++;

            if (uri.regionMatches(i, "action(", 0, 7)) {
                isIntentFragment = true;
                i += 7;
                int j = uri.indexOf(')', i);
                action = uri.substring(i, j);
                i = j + 1;
            }

            intent = new Intent(action);

            if (uri.regionMatches(i, "categories(", 0, 11)) {
                isIntentFragment = true;
                i += 11;
                int j = uri.indexOf(')', i);
                while (i < j) {
                    int sep = uri.indexOf('!', i);
                    if (sep < 0) sep = j;
                    if (i < sep) {
                        intent.addCategory(uri.substring(i, sep));
                    }
                    i = sep + 1;
                }
                i = j + 1;
            }

            if (uri.regionMatches(i, "type(", 0, 5)) {
                isIntentFragment = true;
                i += 5;
                int j = uri.indexOf(')', i);
                intent.mType = uri.substring(i, j);
                i = j + 1;
            }

            if (uri.regionMatches(i, "launchFlags(", 0, 12)) {
                isIntentFragment = true;
                i += 12;
                int j = uri.indexOf(')', i);
                intent.mFlags = Integer.decode(uri.substring(i, j)).intValue();
                i = j + 1;
            }

            if (uri.regionMatches(i, "component(", 0, 10)) {
                isIntentFragment = true;
                i += 10;
                int j = uri.indexOf(')', i);
                int sep = uri.indexOf('!', i);
                if (sep >= 0 && sep < j) {
                    String pkg = uri.substring(i, sep);
                    String cls = uri.substring(sep + 1, j);
                    intent.mComponent = new ComponentName(pkg, cls);
                }
                i = j + 1;
            }

            if (uri.regionMatches(i, "extras(", 0, 7)) {
                isIntentFragment = true;
                i += 7;

                final int closeParen = uri.indexOf(')', i);
                if (closeParen == -1) throw new URISyntaxException(uri,
                        "EXTRA missing trailing ')'", i);

                while (i < closeParen) {
                    // fetch the key value
                    int j = uri.indexOf('=', i);
                    if (j <= i + 1 || i >= closeParen) {
                        throw new URISyntaxException(uri, "EXTRA missing '='", i);
                    }
                    char type = uri.charAt(i);
                    i++;
                    String key = uri.substring(i, j);
                    i = j + 1;

                    // get type-value
                    j = uri.indexOf('!', i);
                    if (j == -1 || j >= closeParen) j = closeParen;
                    if (i >= j) throw new URISyntaxException(uri, "EXTRA missing '!'", i);
                    String value = uri.substring(i, j);
                    i = j;

                    // create Bundle if it doesn't already exist
                    if (intent.mExtras == null) intent.mExtras = new Bundle();

                    // add item to bundle
                    try {
                        switch (type) {
                            case 'S':
                                intent.mExtras.putString(key, Uri.decode(value));
                                break;
                            case 'B':
                                intent.mExtras.putBoolean(key, Boolean.parseBoolean(value));
                                break;
                            case 'b':
                                intent.mExtras.putByte(key, Byte.parseByte(value));
                                break;
                            case 'c':
                                intent.mExtras.putChar(key, Uri.decode(value).charAt(0));
                                break;
                            case 'd':
                                intent.mExtras.putDouble(key, Double.parseDouble(value));
                                break;
                            case 'f':
                                intent.mExtras.putFloat(key, Float.parseFloat(value));
                                break;
                            case 'i':
                                intent.mExtras.putInt(key, Integer.parseInt(value));
                                break;
                            case 'l':
                                intent.mExtras.putLong(key, Long.parseLong(value));
                                break;
                            case 's':
                                intent.mExtras.putShort(key, Short.parseShort(value));
                                break;
                            default:
                                throw new URISyntaxException(uri, "EXTRA has unknown type", i);
                        }
                    } catch (NumberFormatException e) {
                        throw new URISyntaxException(uri, "EXTRA value can't be parsed", i);
                    }

                    char ch = uri.charAt(i);
                    if (ch == ')') break;
                    if (ch != '!') throw new URISyntaxException(uri, "EXTRA missing '!'", i);
                    i++;
                }
            }

            if (isIntentFragment) {
                intent.mData = Uri.parse(uri.substring(0, intentFragmentStart));
            } else {
                intent.mData = Uri.parse(uri);
            }

            if (intent.mAction == null) {
                // By default, if no action is specified, then use VIEW.
                intent.mAction = ACTION_VIEW;
            }

        } else {
            intent = new Intent(ACTION_VIEW, Uri.parse(uri));
        }

        return intent;
!!!3093644.java!!!	getAction() : String
        return mAction;
!!!3093772.java!!!	getData() : Uri
        return mData;
!!!3093900.java!!!	getDataString() : String
        return mData != null ? mData.toString() : null;
!!!3094028.java!!!	getScheme() : String
        return mData != null ? mData.getScheme() : null;
!!!3094156.java!!!	getType() : String
        return mType;
!!!3094284.java!!!	resolveType(inout context : Context) : String
        return resolveType(context.getContentResolver());
!!!3094412.java!!!	resolveType(inout resolver : ContentResolver) : String
        if (mType != null) {
            return mType;
        }
        if (mData != null) {
            if ("content".equals(mData.getScheme())) {
                return resolver.getType(mData);
            }
        }
        return null;
!!!3094540.java!!!	resolveTypeIfNeeded(inout resolver : ContentResolver) : String
        if (mComponent != null) {
            return mType;
        }
        return resolveType(resolver);
!!!3094668.java!!!	hasCategory(in category : String) : boolean
        return mCategories != null && mCategories.contains(category);
!!!3094796.java!!!	getCategories() : Set<String>
        return mCategories;
!!!3094924.java!!!	getSelector() : Intent
        return mSelector;
!!!3095052.java!!!	getClipData() : ClipData
        return mClipData;
!!!3095180.java!!!	setExtrasClassLoader(inout loader : ClassLoader) : void
        if (mExtras != null) {
            mExtras.setClassLoader(loader);
        }
!!!3095308.java!!!	hasExtra(in name : String) : boolean
        return mExtras != null && mExtras.containsKey(name);
!!!3095436.java!!!	hasFileDescriptors() : boolean
        return mExtras != null && mExtras.hasFileDescriptors();
!!!3095564.java!!!	setAllowFds(inout allowFds : boolean) : void
        if (mExtras != null) {
            mExtras.setAllowFds(allowFds);
        }
!!!3095692.java!!!	getExtra(in name : String) : Object
        return getExtra(name, null);
!!!3095820.java!!!	getBooleanExtra(in name : String, inout defaultValue : boolean) : boolean
        return mExtras == null ? defaultValue :
            mExtras.getBoolean(name, defaultValue);
!!!3095948.java!!!	getByteExtra(in name : String, in defaultValue : byte) : byte
        return mExtras == null ? defaultValue :
            mExtras.getByte(name, defaultValue);
!!!3096076.java!!!	getShortExtra(in name : String, in defaultValue : short) : short
        return mExtras == null ? defaultValue :
            mExtras.getShort(name, defaultValue);
!!!3096204.java!!!	getCharExtra(in name : String, in defaultValue : char) : char
        return mExtras == null ? defaultValue :
            mExtras.getChar(name, defaultValue);
!!!3096332.java!!!	getIntExtra(in name : String, in defaultValue : int) : int
        return mExtras == null ? defaultValue :
            mExtras.getInt(name, defaultValue);
!!!3096460.java!!!	getLongExtra(in name : String, in defaultValue : long) : long
        return mExtras == null ? defaultValue :
            mExtras.getLong(name, defaultValue);
!!!3096588.java!!!	getFloatExtra(in name : String, in defaultValue : float) : float
        return mExtras == null ? defaultValue :
            mExtras.getFloat(name, defaultValue);
!!!3096716.java!!!	getDoubleExtra(in name : String, in defaultValue : double) : double
        return mExtras == null ? defaultValue :
            mExtras.getDouble(name, defaultValue);
!!!3096844.java!!!	getStringExtra(in name : String) : String
        return mExtras == null ? null : mExtras.getString(name);
!!!3096972.java!!!	getCharSequenceExtra(in name : String) : CharSequence
        return mExtras == null ? null : mExtras.getCharSequence(name);
!!!3097100.java!!!	getParcelableExtra(in name : String) : T
        return mExtras == null ? null : mExtras.<T>getParcelable(name);
!!!3097228.java!!!	getParcelableArrayExtra(in name : String) : Parcelable
        return mExtras == null ? null : mExtras.getParcelableArray(name);
!!!3097356.java!!!	getParcelableArrayListExtra(in name : String) : ArrayList<T>
        return mExtras == null ? null : mExtras.<T>getParcelableArrayList(name);
!!!3097484.java!!!	getSerializableExtra(in name : String) : Serializable
        return mExtras == null ? null : mExtras.getSerializable(name);
!!!3097612.java!!!	getIntegerArrayListExtra(in name : String) : ArrayList<Integer>
        return mExtras == null ? null : mExtras.getIntegerArrayList(name);
!!!3097740.java!!!	getStringArrayListExtra(in name : String) : ArrayList<String>
        return mExtras == null ? null : mExtras.getStringArrayList(name);
!!!3097868.java!!!	getCharSequenceArrayListExtra(in name : String) : ArrayList<CharSequence>
        return mExtras == null ? null : mExtras.getCharSequenceArrayList(name);
!!!3097996.java!!!	getBooleanArrayExtra(in name : String) : boolean
        return mExtras == null ? null : mExtras.getBooleanArray(name);
!!!3098124.java!!!	getByteArrayExtra(in name : String) : byte
        return mExtras == null ? null : mExtras.getByteArray(name);
!!!3098252.java!!!	getShortArrayExtra(in name : String) : short
        return mExtras == null ? null : mExtras.getShortArray(name);
!!!3098380.java!!!	getCharArrayExtra(in name : String) : char
        return mExtras == null ? null : mExtras.getCharArray(name);
!!!3098508.java!!!	getIntArrayExtra(in name : String) : int
        return mExtras == null ? null : mExtras.getIntArray(name);
!!!3098636.java!!!	getLongArrayExtra(in name : String) : long
        return mExtras == null ? null : mExtras.getLongArray(name);
!!!3098764.java!!!	getFloatArrayExtra(in name : String) : float
        return mExtras == null ? null : mExtras.getFloatArray(name);
!!!3098892.java!!!	getDoubleArrayExtra(in name : String) : double
        return mExtras == null ? null : mExtras.getDoubleArray(name);
!!!3099020.java!!!	getStringArrayExtra(in name : String) : String
        return mExtras == null ? null : mExtras.getStringArray(name);
!!!3099148.java!!!	getCharSequenceArrayExtra(in name : String) : CharSequence
        return mExtras == null ? null : mExtras.getCharSequenceArray(name);
!!!3099276.java!!!	getBundleExtra(in name : String) : Bundle
        return mExtras == null ? null : mExtras.getBundle(name);
!!!3099404.java!!!	getIBinderExtra(in name : String) : IBinder
        return mExtras == null ? null : mExtras.getIBinder(name);
!!!3099532.java!!!	getExtra(in name : String, inout defaultValue : Object) : Object
        Object result = defaultValue;
        if (mExtras != null) {
            Object result2 = mExtras.get(name);
            if (result2 != null) {
                result = result2;
            }
        }

        return result;
!!!3099660.java!!!	getExtras() : Bundle
        return (mExtras != null)
                ? new Bundle(mExtras)
                : null;
!!!3099788.java!!!	getFlags() : int
        return mFlags;
!!!3099916.java!!!	isExcludingStopped() : boolean
        return (mFlags&(FLAG_EXCLUDE_STOPPED_PACKAGES|FLAG_INCLUDE_STOPPED_PACKAGES))
                == FLAG_EXCLUDE_STOPPED_PACKAGES;
!!!3100044.java!!!	getPackage() : String
        return mPackage;
!!!3100172.java!!!	getComponent() : ComponentName
        return mComponent;
!!!3100300.java!!!	getSourceBounds() : Rect
        return mSourceBounds;
!!!3100428.java!!!	resolveActivity(inout pm : PackageManager) : ComponentName
        if (mComponent != null) {
            return mComponent;
        }

        ResolveInfo info = pm.resolveActivity(
            this, PackageManager.MATCH_DEFAULT_ONLY);
        if (info != null) {
            return new ComponentName(
                    info.activityInfo.applicationInfo.packageName,
                    info.activityInfo.name);
        }

        return null;
!!!3100556.java!!!	resolveActivityInfo(inout pm : PackageManager, in flags : int) : ActivityInfo
        ActivityInfo ai = null;
        if (mComponent != null) {
            try {
                ai = pm.getActivityInfo(mComponent, flags);
            } catch (PackageManager.NameNotFoundException e) {
                // ignore
            }
        } else {
            ResolveInfo info = pm.resolveActivity(
                this, PackageManager.MATCH_DEFAULT_ONLY | flags);
            if (info != null) {
                ai = info.activityInfo;
            }
        }

        return ai;
!!!3100684.java!!!	setAction(in action : String) : Intent
        mAction = action != null ? action.intern() : null;
        return this;
!!!3100812.java!!!	setData(inout data : Uri) : Intent
        mData = data;
        mType = null;
        return this;
!!!3100940.java!!!	setDataAndNormalize(inout data : Uri) : Intent
        return setData(data.normalizeScheme());
!!!3101068.java!!!	setType(in type : String) : Intent
        mData = null;
        mType = type;
        return this;
!!!3101196.java!!!	setTypeAndNormalize(in type : String) : Intent
        return setType(normalizeMimeType(type));
!!!3101324.java!!!	setDataAndType(inout data : Uri, in type : String) : Intent
        mData = data;
        mType = type;
        return this;
!!!3101452.java!!!	setDataAndTypeAndNormalize(inout data : Uri, in type : String) : Intent
        return setDataAndType(data.normalizeScheme(), normalizeMimeType(type));
!!!3101580.java!!!	addCategory(in category : String) : Intent
        if (mCategories == null) {
            mCategories = new HashSet<String>();
        }
        mCategories.add(category.intern());
        return this;
!!!3101708.java!!!	removeCategory(in category : String) : void
        if (mCategories != null) {
            mCategories.remove(category);
            if (mCategories.size() == 0) {
                mCategories = null;
            }
        }
!!!3101836.java!!!	setSelector(inout selector : Intent) : void
        if (selector == this) {
            throw new IllegalArgumentException(
                    "Intent being set as a selector of itself");
        }
        if (selector != null && mPackage != null) {
            throw new IllegalArgumentException(
                    "Can't set selector when package name is already set");
        }
        mSelector = selector;
!!!3101964.java!!!	setClipData(inout clip : ClipData) : void
        mClipData = clip;
!!!3102092.java!!!	putExtra(in name : String, inout value : boolean) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putBoolean(name, value);
        return this;
!!!3102220.java!!!	putExtra(in name : String, in value : byte) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putByte(name, value);
        return this;
!!!3102348.java!!!	putExtra(in name : String, in value : char) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putChar(name, value);
        return this;
!!!3102476.java!!!	putExtra(in name : String, in value : short) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putShort(name, value);
        return this;
!!!3102604.java!!!	putExtra(in name : String, in value : int) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putInt(name, value);
        return this;
!!!3102732.java!!!	putExtra(in name : String, in value : long) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putLong(name, value);
        return this;
!!!3102860.java!!!	putExtra(in name : String, in value : float) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putFloat(name, value);
        return this;
!!!3102988.java!!!	putExtra(in name : String, in value : double) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putDouble(name, value);
        return this;
!!!3103116.java!!!	putExtra(in name : String, in value : String) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putString(name, value);
        return this;
!!!3103244.java!!!	putExtra(in name : String, inout value : CharSequence) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putCharSequence(name, value);
        return this;
!!!3103372.java!!!	putExtra(in name : String, inout value : Parcelable) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putParcelable(name, value);
        return this;
!!!3103500.java!!!	putExtra(in name : String, inout value : Parcelable) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putParcelableArray(name, value);
        return this;
!!!3103628.java!!!	putParcelableArrayListExtra(in name : String, inout value : ArrayList<? extends Parcelable>) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putParcelableArrayList(name, value);
        return this;
!!!3103756.java!!!	putIntegerArrayListExtra(in name : String, inout value : ArrayList<Integer>) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putIntegerArrayList(name, value);
        return this;
!!!3103884.java!!!	putStringArrayListExtra(in name : String, inout value : ArrayList<String>) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putStringArrayList(name, value);
        return this;
!!!3104012.java!!!	putCharSequenceArrayListExtra(in name : String, inout value : ArrayList<CharSequence>) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putCharSequenceArrayList(name, value);
        return this;
!!!3104140.java!!!	putExtra(in name : String, inout value : Serializable) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putSerializable(name, value);
        return this;
!!!3104268.java!!!	putExtra(in name : String, inout value : boolean) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putBooleanArray(name, value);
        return this;
!!!3104396.java!!!	putExtra(in name : String, inout value : byte) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putByteArray(name, value);
        return this;
!!!3104524.java!!!	putExtra(in name : String, inout value : short) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putShortArray(name, value);
        return this;
!!!3104652.java!!!	putExtra(in name : String, inout value : char) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putCharArray(name, value);
        return this;
!!!3104780.java!!!	putExtra(in name : String, inout value : int) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putIntArray(name, value);
        return this;
!!!3104908.java!!!	putExtra(in name : String, inout value : long) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putLongArray(name, value);
        return this;
!!!3105036.java!!!	putExtra(in name : String, inout value : float) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putFloatArray(name, value);
        return this;
!!!3105164.java!!!	putExtra(in name : String, inout value : double) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putDoubleArray(name, value);
        return this;
!!!3105292.java!!!	putExtra(in name : String, inout value : String) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putStringArray(name, value);
        return this;
!!!3105420.java!!!	putExtra(in name : String, inout value : CharSequence) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putCharSequenceArray(name, value);
        return this;
!!!3105548.java!!!	putExtra(in name : String, inout value : Bundle) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putBundle(name, value);
        return this;
!!!3105676.java!!!	putExtra(in name : String, inout value : IBinder) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putIBinder(name, value);
        return this;
!!!3105804.java!!!	putExtras(inout src : Intent) : Intent
        if (src.mExtras != null) {
            if (mExtras == null) {
                mExtras = new Bundle(src.mExtras);
            } else {
                mExtras.putAll(src.mExtras);
            }
        }
        return this;
!!!3105932.java!!!	putExtras(inout extras : Bundle) : Intent
        if (mExtras == null) {
            mExtras = new Bundle();
        }
        mExtras.putAll(extras);
        return this;
!!!3106060.java!!!	replaceExtras(inout src : Intent) : Intent
        mExtras = src.mExtras != null ? new Bundle(src.mExtras) : null;
        return this;
!!!3106188.java!!!	replaceExtras(inout extras : Bundle) : Intent
        mExtras = extras != null ? new Bundle(extras) : null;
        return this;
!!!3106316.java!!!	removeExtra(in name : String) : void
        if (mExtras != null) {
            mExtras.remove(name);
            if (mExtras.size() == 0) {
                mExtras = null;
            }
        }
!!!3106444.java!!!	setFlags(in flags : int) : Intent
        mFlags = flags;
        return this;
!!!3106572.java!!!	addFlags(in flags : int) : Intent
        mFlags |= flags;
        return this;
!!!3106700.java!!!	setPackage(in packageName : String) : Intent
        if (packageName != null && mSelector != null) {
            throw new IllegalArgumentException(
                    "Can't set package name when selector is already set");
        }
        mPackage = packageName;
        return this;
!!!3106828.java!!!	setComponent(inout component : ComponentName) : Intent
        mComponent = component;
        return this;
!!!3106956.java!!!	setClassName(inout packageContext : Context, in className : String) : Intent
        mComponent = new ComponentName(packageContext, className);
        return this;
!!!3107084.java!!!	setClassName(in packageName : String, in className : String) : Intent
        mComponent = new ComponentName(packageName, className);
        return this;
!!!3107212.java!!!	setClass(inout packageContext : Context, inout cls : Class<?>) : Intent
        mComponent = new ComponentName(packageContext, cls);
        return this;
!!!3107340.java!!!	setSourceBounds(inout r : Rect) : void
        if (r != null) {
            mSourceBounds = new Rect(r);
        } else {
            mSourceBounds = null;
        }
!!!3107468.java!!!	fillIn(inout other : Intent, in flags : int) : int
        int changes = 0;
        if (other.mAction != null
                && (mAction == null || (flags&FILL_IN_ACTION) != 0)) {
            mAction = other.mAction;
            changes |= FILL_IN_ACTION;
        }
        if ((other.mData != null || other.mType != null)
                && ((mData == null && mType == null)
                        || (flags&FILL_IN_DATA) != 0)) {
            mData = other.mData;
            mType = other.mType;
            changes |= FILL_IN_DATA;
        }
        if (other.mCategories != null
                && (mCategories == null || (flags&FILL_IN_CATEGORIES) != 0)) {
            if (other.mCategories != null) {
                mCategories = new HashSet<String>(other.mCategories);
            }
            changes |= FILL_IN_CATEGORIES;
        }
        if (other.mPackage != null
                && (mPackage == null || (flags&FILL_IN_PACKAGE) != 0)) {
            // Only do this if mSelector is not set.
            if (mSelector == null) {
                mPackage = other.mPackage;
                changes |= FILL_IN_PACKAGE;
            }
        }
        // Selector is special: it can only be set if explicitly allowed,
        // for the same reason as the component name.
        if (other.mSelector != null && (flags&FILL_IN_SELECTOR) != 0) {
            if (mPackage == null) {
                mSelector = new Intent(other.mSelector);
                mPackage = null;
                changes |= FILL_IN_SELECTOR;
            }
        }
        if (other.mClipData != null
                && (mClipData == null || (flags&FILL_IN_CLIP_DATA) != 0)) {
            mClipData = other.mClipData;
            changes |= FILL_IN_CLIP_DATA;
        }
        // Component is special: it can -only- be set if explicitly allowed,
        // since otherwise the sender could force the intent somewhere the
        // originator didn't intend.
        if (other.mComponent != null && (flags&FILL_IN_COMPONENT) != 0) {
            mComponent = other.mComponent;
            changes |= FILL_IN_COMPONENT;
        }
        mFlags |= other.mFlags;
        if (other.mSourceBounds != null
                && (mSourceBounds == null || (flags&FILL_IN_SOURCE_BOUNDS) != 0)) {
            mSourceBounds = new Rect(other.mSourceBounds);
            changes |= FILL_IN_SOURCE_BOUNDS;
        }
        if (mExtras == null) {
            if (other.mExtras != null) {
                mExtras = new Bundle(other.mExtras);
            }
        } else if (other.mExtras != null) {
            try {
                Bundle newb = new Bundle(other.mExtras);
                newb.putAll(mExtras);
                mExtras = newb;
            } catch (RuntimeException e) {
                // Modifying the extras can cause us to unparcel the contents
                // of the bundle, and if we do this in the system process that
                // may fail.  We really should handle this (i.e., the Bundle
                // impl shouldn't be on top of a plain map), but for now just
                // ignore it and keep the original contents. :(
                Log.w("Intent", "Failure filling in extras", e);
            }
        }
        return changes;
!!!3108108.java!!!	filterEquals(inout other : Intent) : boolean
        if (other == null) {
            return false;
        }
        if (mAction != other.mAction) {
            if (mAction != null) {
                if (!mAction.equals(other.mAction)) {
                    return false;
                }
            } else {
                if (!other.mAction.equals(mAction)) {
                    return false;
                }
            }
        }
        if (mData != other.mData) {
            if (mData != null) {
                if (!mData.equals(other.mData)) {
                    return false;
                }
            } else {
                if (!other.mData.equals(mData)) {
                    return false;
                }
            }
        }
        if (mType != other.mType) {
            if (mType != null) {
                if (!mType.equals(other.mType)) {
                    return false;
                }
            } else {
                if (!other.mType.equals(mType)) {
                    return false;
                }
            }
        }
        if (mPackage != other.mPackage) {
            if (mPackage != null) {
                if (!mPackage.equals(other.mPackage)) {
                    return false;
                }
            } else {
                if (!other.mPackage.equals(mPackage)) {
                    return false;
                }
            }
        }
        if (mComponent != other.mComponent) {
            if (mComponent != null) {
                if (!mComponent.equals(other.mComponent)) {
                    return false;
                }
            } else {
                if (!other.mComponent.equals(mComponent)) {
                    return false;
                }
            }
        }
        if (mCategories != other.mCategories) {
            if (mCategories != null) {
                if (!mCategories.equals(other.mCategories)) {
                    return false;
                }
            } else {
                if (!other.mCategories.equals(mCategories)) {
                    return false;
                }
            }
        }

        return true;
!!!3108236.java!!!	filterHashCode() : int
        int code = 0;
        if (mAction != null) {
            code += mAction.hashCode();
        }
        if (mData != null) {
            code += mData.hashCode();
        }
        if (mType != null) {
            code += mType.hashCode();
        }
        if (mPackage != null) {
            code += mPackage.hashCode();
        }
        if (mComponent != null) {
            code += mComponent.hashCode();
        }
        if (mCategories != null) {
            code += mCategories.hashCode();
        }
        return code;
!!!3108364.java!!!	toString() : String
        StringBuilder b = new StringBuilder(128);

        b.append("Intent { ");
        toShortString(b, true, true, true, false);
        b.append(" }");

        return b.toString();
!!!3108492.java!!!	toInsecureString() : String
        StringBuilder b = new StringBuilder(128);

        b.append("Intent { ");
        toShortString(b, false, true, true, false);
        b.append(" }");

        return b.toString();
!!!3108620.java!!!	toInsecureStringWithClip() : String
        StringBuilder b = new StringBuilder(128);

        b.append("Intent { ");
        toShortString(b, false, true, true, true);
        b.append(" }");

        return b.toString();
!!!3108748.java!!!	toShortString(inout secure : boolean, inout comp : boolean, inout extras : boolean, inout clip : boolean) : String
        StringBuilder b = new StringBuilder(128);
        toShortString(b, secure, comp, extras, clip);
        return b.toString();
!!!3108876.java!!!	toShortString(inout b : StringBuilder, inout secure : boolean, inout comp : boolean, inout extras : boolean, inout clip : boolean) : void
        boolean first = true;
        if (mAction != null) {
            b.append("act=").append(mAction);
            first = false;
        }
        if (mCategories != null) {
            if (!first) {
                b.append(' ');
            }
            first = false;
            b.append("cat=[");
            Iterator<String> i = mCategories.iterator();
            boolean didone = false;
            while (i.hasNext()) {
                if (didone) b.append(",");
                didone = true;
                b.append(i.next());
            }
            b.append("]");
        }
        if (mData != null) {
            if (!first) {
                b.append(' ');
            }
            first = false;
            b.append("dat=");
            if (secure) {
                b.append(mData.toSafeString());
            } else {
                b.append(mData);
            }
        }
        if (mType != null) {
            if (!first) {
                b.append(' ');
            }
            first = false;
            b.append("typ=").append(mType);
        }
        if (mFlags != 0) {
            if (!first) {
                b.append(' ');
            }
            first = false;
            b.append("flg=0x").append(Integer.toHexString(mFlags));
        }
        if (mPackage != null) {
            if (!first) {
                b.append(' ');
            }
            first = false;
            b.append("pkg=").append(mPackage);
        }
        if (comp && mComponent != null) {
            if (!first) {
                b.append(' ');
            }
            first = false;
            b.append("cmp=").append(mComponent.flattenToShortString());
        }
        if (mSourceBounds != null) {
            if (!first) {
                b.append(' ');
            }
            first = false;
            b.append("bnds=").append(mSourceBounds.toShortString());
        }
        if (mClipData != null) {
            if (!first) {
                b.append(' ');
            }
            first = false;
            if (clip) {
                b.append("clip={");
                mClipData.toShortString(b);
                b.append('}');
            } else {
                b.append("(has clip)");
            }
        }
        if (extras && mExtras != null) {
            if (!first) {
                b.append(' ');
            }
            first = false;
            b.append("(has extras)");
        }
        if (mSelector != null) {
            b.append(" sel={");
            mSelector.toShortString(b, secure, comp, extras, clip);
            b.append("}");
        }
!!!3109004.java!!!	toURI() : String
        return toUri(0);
!!!3109132.java!!!	toUri(in flags : int) : String
        StringBuilder uri = new StringBuilder(128);
        String scheme = null;
        if (mData != null) {
            String data = mData.toString();
            if ((flags&URI_INTENT_SCHEME) != 0) {
                final int N = data.length();
                for (int i=0; i<N; i++) {
                    char c = data.charAt(i);
                    if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')
                            || c == '.' || c == '-') {
                        continue;
                    }
                    if (c == ':' && i > 0) {
                        // Valid scheme.
                        scheme = data.substring(0, i);
                        uri.append("intent:");
                        data = data.substring(i+1);
                        break;
                    }

                    // No scheme.
                    break;
                }
            }
            uri.append(data);

        } else if ((flags&URI_INTENT_SCHEME) != 0) {
            uri.append("intent:");
        }

        uri.append("#Intent;");

        toUriInner(uri, scheme, flags);
        if (mSelector != null) {
            uri.append("SEL;");
            // Note that for now we are not going to try to handle the
            // data part; not clear how to represent this as a URI, and
            // not much utility in it.
            mSelector.toUriInner(uri, null, flags);
        }

        uri.append("end");

        return uri.toString();
!!!3109260.java!!!	toUriInner(inout uri : StringBuilder, in scheme : String, in flags : int) : void
        if (scheme != null) {
            uri.append("scheme=").append(scheme).append(';');
        }
        if (mAction != null) {
            uri.append("action=").append(Uri.encode(mAction)).append(';');
        }
        if (mCategories != null) {
            for (String category : mCategories) {
                uri.append("category=").append(Uri.encode(category)).append(';');
            }
        }
        if (mType != null) {
            uri.append("type=").append(Uri.encode(mType, "/")).append(';');
        }
        if (mFlags != 0) {
            uri.append("launchFlags=0x").append(Integer.toHexString(mFlags)).append(';');
        }
        if (mPackage != null) {
            uri.append("package=").append(Uri.encode(mPackage)).append(';');
        }
        if (mComponent != null) {
            uri.append("component=").append(Uri.encode(
                    mComponent.flattenToShortString(), "/")).append(';');
        }
        if (mSourceBounds != null) {
            uri.append("sourceBounds=")
                    .append(Uri.encode(mSourceBounds.flattenToString()))
                    .append(';');
        }
        if (mExtras != null) {
            for (String key : mExtras.keySet()) {
                final Object value = mExtras.get(key);
                char entryType =
                        value instanceof String    ? 'S' :
                        value instanceof Boolean   ? 'B' :
                        value instanceof Byte      ? 'b' :
                        value instanceof Character ? 'c' :
                        value instanceof Double    ? 'd' :
                        value instanceof Float     ? 'f' :
                        value instanceof Integer   ? 'i' :
                        value instanceof Long      ? 'l' :
                        value instanceof Short     ? 's' :
                        '\0';

                if (entryType != '\0') {
                    uri.append(entryType);
                    uri.append('.');
                    uri.append(Uri.encode(key));
                    uri.append('=');
                    uri.append(Uri.encode(value.toString()));
                    uri.append(';');
                }
            }
        }
!!!3109388.java!!!	describeContents() : int
        return (mExtras != null) ? mExtras.describeContents() : 0;
!!!3109516.java!!!	writeToParcel(inout out : Parcel, in flags : int) : void
        out.writeString(mAction);
        Uri.writeToParcel(out, mData);
        out.writeString(mType);
        out.writeInt(mFlags);
        out.writeString(mPackage);
        ComponentName.writeToParcel(mComponent, out);

        if (mSourceBounds != null) {
            out.writeInt(1);
            mSourceBounds.writeToParcel(out, flags);
        } else {
            out.writeInt(0);
        }

        if (mCategories != null) {
            out.writeInt(mCategories.size());
            for (String category : mCategories) {
                out.writeString(category);
            }
        } else {
            out.writeInt(0);
        }

        if (mSelector != null) {
            out.writeInt(1);
            mSelector.writeToParcel(out, flags);
        } else {
            out.writeInt(0);
        }

        if (mClipData != null) {
            out.writeInt(1);
            mClipData.writeToParcel(out, flags);
        } else {
            out.writeInt(0);
        }

        out.writeBundle(mExtras);
!!!3109644.java!!!	Intent(inout in : Parcel)
        readFromParcel(in);
!!!3109772.java!!!	readFromParcel(inout in : Parcel) : void
        setAction(in.readString());
        mData = Uri.CREATOR.createFromParcel(in);
        mType = in.readString();
        mFlags = in.readInt();
        mPackage = in.readString();
        mComponent = ComponentName.readFromParcel(in);

        if (in.readInt() != 0) {
            mSourceBounds = Rect.CREATOR.createFromParcel(in);
        }

        int N = in.readInt();
        if (N > 0) {
            mCategories = new HashSet<String>();
            int i;
            for (i=0; i<N; i++) {
                mCategories.add(in.readString().intern());
            }
        } else {
            mCategories = null;
        }

        if (in.readInt() != 0) {
            mSelector = new Intent(in);
        }

        if (in.readInt() != 0) {
            mClipData = new ClipData(in);
        }

        mExtras = in.readBundle();
!!!3109900.java!!!	parseIntent(inout resources : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : Intent
        Intent intent = new Intent();

        TypedArray sa = resources.obtainAttributes(attrs,
                com.android.internal.R.styleable.Intent);

        intent.setAction(sa.getString(com.android.internal.R.styleable.Intent_action));

        String data = sa.getString(com.android.internal.R.styleable.Intent_data);
        String mimeType = sa.getString(com.android.internal.R.styleable.Intent_mimeType);
        intent.setDataAndType(data != null ? Uri.parse(data) : null, mimeType);

        String packageName = sa.getString(com.android.internal.R.styleable.Intent_targetPackage);
        String className = sa.getString(com.android.internal.R.styleable.Intent_targetClass);
        if (packageName != null && className != null) {
            intent.setComponent(new ComponentName(packageName, className));
        }

        sa.recycle();

        int outerDepth = parser.getDepth();
        int type;
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT
               && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
            if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
                continue;
            }

            String nodeName = parser.getName();
            if (nodeName.equals("category")) {
                sa = resources.obtainAttributes(attrs,
                        com.android.internal.R.styleable.IntentCategory);
                String cat = sa.getString(com.android.internal.R.styleable.IntentCategory_name);
                sa.recycle();

                if (cat != null) {
                    intent.addCategory(cat);
                }
                XmlUtils.skipCurrentTag(parser);

            } else if (nodeName.equals("extra")) {
                if (intent.mExtras == null) {
                    intent.mExtras = new Bundle();
                }
                resources.parseBundleExtra("extra", attrs, intent.mExtras);
                XmlUtils.skipCurrentTag(parser);

            } else {
                XmlUtils.skipCurrentTag(parser);
            }
        }

        return intent;
!!!3110028.java!!!	normalizeMimeType(in type : String) : String
        if (type == null) {
            return null;
        }

        type = type.trim().toLowerCase(Locale.US);

        final int semicolonIndex = type.indexOf(';');
        if (semicolonIndex != -1) {
            type = type.substring(0, semicolonIndex);
        }
        return type;
!!!3110156.java!!!	migrateExtraStreamToClipData() : boolean
        // Refuse to touch if extras already parcelled
        if (mExtras != null && mExtras.isParcelled()) return false;

        // Bail when someone already gave us ClipData
        if (getClipData() != null) return false;

        final String action = getAction();
        if (ACTION_CHOOSER.equals(action)) {
            try {
                // Inspect target intent to see if we need to migrate
                final Intent target = getParcelableExtra(EXTRA_INTENT);
                if (target != null && target.migrateExtraStreamToClipData()) {
                    // Since we migrated in child, we need to promote ClipData
                    // and flags to ourselves to grant.
                    setClipData(target.getClipData());
                    addFlags(target.getFlags()
                            & (FLAG_GRANT_READ_URI_PERMISSION | FLAG_GRANT_WRITE_URI_PERMISSION));
                    return true;
                } else {
                    return false;
                }
            } catch (ClassCastException e) {
            }

        } else if (ACTION_SEND.equals(action)) {
            try {
                final Uri stream = getParcelableExtra(EXTRA_STREAM);
                final CharSequence text = getCharSequenceExtra(EXTRA_TEXT);
                final String htmlText = getStringExtra(EXTRA_HTML_TEXT);
                if (stream != null || text != null || htmlText != null) {
                    final ClipData clipData = new ClipData(
                            null, new String[] { getType() },
                            new ClipData.Item(text, htmlText, null, stream));
                    setClipData(clipData);
                    addFlags(FLAG_GRANT_READ_URI_PERMISSION);
                    return true;
                }
            } catch (ClassCastException e) {
            }

        } else if (ACTION_SEND_MULTIPLE.equals(action)) {
            try {
                final ArrayList<Uri> streams = getParcelableArrayListExtra(EXTRA_STREAM);
                final ArrayList<CharSequence> texts = getCharSequenceArrayListExtra(EXTRA_TEXT);
                final ArrayList<String> htmlTexts = getStringArrayListExtra(EXTRA_HTML_TEXT);
                int num = -1;
                if (streams != null) {
                    num = streams.size();
                }
                if (texts != null) {
                    if (num >= 0 && num != texts.size()) {
                        // Wha...!  F- you.
                        return false;
                    }
                    num = texts.size();
                }
                if (htmlTexts != null) {
                    if (num >= 0 && num != htmlTexts.size()) {
                        // Wha...!  F- you.
                        return false;
                    }
                    num = htmlTexts.size();
                }
                if (num > 0) {
                    final ClipData clipData = new ClipData(
                            null, new String[] { getType() },
                            makeClipItem(streams, texts, htmlTexts, 0));

                    for (int i = 1; i < num; i++) {
                        clipData.addItem(makeClipItem(streams, texts, htmlTexts, i));
                    }

                    setClipData(clipData);
                    addFlags(FLAG_GRANT_READ_URI_PERMISSION);
                    return true;
                }
            } catch (ClassCastException e) {
            }
        }

        return false;
!!!3110284.java!!!	makeClipItem(inout streams : ArrayList<Uri>, inout texts : ArrayList<CharSequence>, inout htmlTexts : ArrayList<String>, in which : int) : Item
        Uri uri = streams != null ? streams.get(which) : null;
        CharSequence text = texts != null ? texts.get(which) : null;
        String htmlText = htmlTexts != null ? htmlTexts.get(which) : null;
        return new ClipData.Item(text, htmlText, null, uri);
