class JarUtils
!!!13037836.java!!!	JarUtils()
        // This utility class is not publicly instantiable.
!!!13037964.java!!!	getJarFile(in loader : ClassLoader) : JarFile
        final URL resUrl = loader.getResource(MANIFEST);
        if (!resUrl.getProtocol().equals("jar")) {
            throw new RuntimeException("Should run as jar");
        }
        final String path = resUrl.getPath();
        if (!path.startsWith("file:")) {
            throw new RuntimeException("Unknown jar path: " + path);
        }
        final String jarPath = path.substring("file:".length(), path.indexOf('!'));
        try {
            return new JarFile(URLDecoder.decode(jarPath, "UTF-8"));
        } catch (UnsupportedEncodingException e) {
        } catch (IOException e) {
        }
        return null;
!!!13038092.java!!!	openResource(in name : String) : InputStream
        return JarUtils.class.getResourceAsStream("/" + name);
!!!13038348.java!!!	getNameListing(in jar : JarFile, in filter : JarFilter) : ArrayList<String>
        final ArrayList<String> result = new ArrayList<String>();
        final Enumeration<JarEntry> entries = jar.entries();
        while (entries.hasMoreElements()) {
            final JarEntry entry = entries.nextElement();
            final String path = entry.getName();
            final int pos = path.lastIndexOf('/');
            final String dirName = (pos >= 0) ? path.substring(0, pos) : "";
            final String name = (pos >= 0) ? path.substring(pos + 1) : path;
            if (filter.accept(dirName, name)) {
                result.add(path);
            }
        }
        return result;
!!!13038476.java!!!	getNameListing(in jar : JarFile, in filterName : String) : ArrayList<String>
        return getNameListing(jar, new JarFilter() {
            @Override
            public boolean accept(final String dirName, final String name) {
                return name.equals(filterName);
            }
        });
