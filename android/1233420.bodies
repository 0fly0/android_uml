class AsyncRunner
!!!6967692.java!!!	AsyncRunner(inout context : FilterContext, inout schedulerClass : Class)
        super(context);

        mSchedulerClass = schedulerClass;
        mLogVerbose = Log.isLoggable(TAG, Log.VERBOSE);
!!!6967820.java!!!	AsyncRunner(inout context : FilterContext)
        super(context);

        mSchedulerClass = SimpleScheduler.class;
        mLogVerbose = Log.isLoggable(TAG, Log.VERBOSE);
!!!6967948.java!!!	setDoneCallback(inout listener : OnRunnerDoneListener) : void
        mDoneListener = listener;
!!!6968076.java!!!	setGraph(inout graph : FilterGraph) : void
        if (isRunning()) {
            throw new RuntimeException("Graph is already running!");
        }
        mRunner = new SyncRunner(mFilterContext, graph, mSchedulerClass);
!!!6968204.java!!!	getGraph() : FilterGraph
        return mRunner != null ? mRunner.getGraph() : null;
!!!6968332.java!!!	run() : void
        if (mLogVerbose) Log.v(TAG, "Running graph.");
        setException(null);

        if (isRunning()) {
            throw new RuntimeException("Graph is already running!");
        }
        if (mRunner == null) {
            throw new RuntimeException("Cannot run before a graph is set!");
        }
        mRunTask = this.new AsyncRunnerTask();

        setRunning(true);
        mRunTask.execute(mRunner);
!!!6968460.java!!!	stop() : void
        if (mRunTask != null && !mRunTask.isCancelled() ) {
            if (mLogVerbose) Log.v(TAG, "Stopping graph.");
            mRunTask.cancel(false);
        }
!!!6968588.java!!!	close() : void
        if (isRunning()) {
            throw new RuntimeException("Cannot close graph while it is running!");
        }
        if (mLogVerbose) Log.v(TAG, "Closing filters.");
        mRunner.close();
!!!6968716.java!!!	isRunning() : boolean
        return isProcessing;
!!!6968844.java!!!	getError() : Exception
        return mException;
!!!6968972.java!!!	setRunning(inout running : boolean) : void
        isProcessing = running;
!!!6969100.java!!!	setException(inout exception : Exception) : void
        mException = exception;
