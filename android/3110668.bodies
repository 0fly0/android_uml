class IrBlasterSetupActivity
!!!13050508.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setExplainButtonVisible(false);
        Uri videoUri = MediaDevicesIntents.getVideoUri(getIntent());
        setProperty(VideoPreviewFragment.VIDEO_URI_PROPERTY, videoUri);
!!!13050636.java!!!	onResume() : void
        super.onResume();
        // TODO(mlindner): Remove this when we can use generic fallback devices.
        startService(new Intent(MediaDevicesConstants.ACTION_RELEASE_CLIENTS));
!!!13050764.java!!!	onPause() : void
        super.onPause();
!!!13050892.java!!!	onDestroy() : void
        mControllerContext = null;
        super.onDestroy();
!!!13051020.java!!!	onConnectedToService() : void
        String deviceId = MediaDevicesIntents.getDeviceId(getIntent());
        mControllerContext = new DeviceControllerContext() {
                @Override
                public Context getApplicationContext() {
                    return IrBlasterSetupActivity.this.getApplicationContext();
                }

                @Override
                public Handler getHandler() {
                    return IrBlasterSetupActivity.this.getHandler();
                }
            };
        mController = ControllerFactory.createController(mControllerContext,
                getService().getSettings(), deviceId);
!!!13051148.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        return processKeyEvent(keyCode, event) || super.onKeyDown(keyCode, event);
!!!13051276.java!!!	onKeyUp(in keyCode : int, inout event : KeyEvent) : boolean
        return processKeyEvent(keyCode, event) || super.onKeyUp(keyCode, event);
!!!13051404.java!!!	processKeyEvent(in keyCode : int, inout event : KeyEvent) : boolean
        IrCommandSet irCommandSet = (IrCommandSet) getProperty(
                SelectIrCommandSetFragment.SELECTED_COMMAND_SET);
        if (irCommandSet != null) {
            Action action;
            switch (keyCode) {
                case KeyEvent.KEYCODE_CHANNEL_DOWN:
                    action = Action.CHANNEL_DOWN;
                    break;
                case KeyEvent.KEYCODE_CHANNEL_UP:
                    action = Action.CHANNEL_UP;
                    break;
                default:
                    action = null;
            }
            if (action != null) {
                mController.performAction(ActionEvent.fromKeyEvent(event, action));
                return true;
            }
        }
        return false;
!!!13051532.java!!!	setPaired(inout paired : boolean) : void
        String deviceId = getService().getSettings().generateUniqueDeviceId(
                OneWayConstants.IR_BLASTER_DEVICE_ID_PREFIX);
        IrCommandSet irCommandSet = (IrCommandSet) getProperty(
                SelectIrCommandSetFragment.SELECTED_COMMAND_SET);
        String manufacturer = (String) getProperty(
                SelectIrCommandSetFragment.SELECTED_MANUFACTURER);
        String model = (String) getProperty(
                SelectIrCommandSetFragment.SELECTED_MODEL);
        getService().getSettings().setString(deviceId,
                OneWayConstants.KEY_IR_COMMAND_SET_ID, irCommandSet.getId());
        getService().getSettings().setDevicePaired(deviceId, paired);
        // OEM NOTE: the device label can be set here in order to customize how this device
        // appears to the user. For this sample, we just use the name of the command set.
        String deviceLabel = irCommandSet.getName();
        Uri videoUri = MediaDevicesIntents.getVideoUri(getIntent());
        // Create a new instance of this new device and attach it to the result.
        // Need to make sure the capabilities here match the ones that were advertised by the
        // service.
        // New capabilities can also be added here depending on the device which was paired.
        Device device = new Device.Builder(getPackageName(), deviceId)
                .setType(DeviceType.IR_BLASTER)
                .setLabel(deviceLabel)
                .setManufacturer(manufacturer)
                .setModel(model)
                .setCapability(Capability.IS_INTERNAL, true)
                .setCapability(Capability.PROVIDES_CHANNEL_LINEUP, false)
                // Request a lineup update at 1-day intervals.
                .setCapability(Capability.REQUIRES_LINEUP_UPDATES, 1)
                .build();

        Intent intent = MediaDevicesIntents.createPairingResultIntent(device, videoUri, null,
                paired);
        setResult(paired ? RESULT_OK : RESULT_CANCELED, intent);
!!!13051660.java!!!	onBack() : boolean
        String step = getCurrentStep();
        if (DEBUG) {
            Log.d(LOG_TAG, "onBack(); current step = " + step);
        }
        if (step == TAG_SELECT_IR_COMMAND_SET) {
            setResult(RESULT_CANCELED);
            finish();
            return false;
        }
        return true;
!!!13051788.java!!!	onNext() : void
        String step = getCurrentStep();
        if (DEBUG) {
            Log.d(LOG_TAG, "onNext(); current step = " + step);
        }
        if (step == null) {
            doSelectIrCommandSet();
        } else if (step == TAG_SELECT_IR_COMMAND_SET) {
            doIrTest();
        } else if (step == TAG_IR_TEST) {
            setPaired(true);
            finish();
        }
!!!13051916.java!!!	doSelectIrCommandSet() : void
        if (DEBUG) Log.d(LOG_TAG, "doSelectIrCommandSet");
        setCurrentStep(TAG_SELECT_IR_COMMAND_SET, SelectIrCommandSetFragment.class,
                VideoPreviewFragment.class);
!!!13052044.java!!!	doIrTest() : void
        if (DEBUG) Log.d(LOG_TAG, "doIrTest");
        setCurrentStep(TAG_IR_TEST, IrTestBlasterFragment.class,
                VideoPreviewFragment.class);
