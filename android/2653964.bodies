class OmxVideoScheduler
!!!11174028.cpp!!!	OmxVideoScheduler(in name : OMX_STRING)
  strncpy(mName, name, OMX_MAX_STRINGNAME_SIZE);
!!!11174156.cpp!!!	~OmxVideoScheduler()
  OMX_LOGD("destroyed");
!!!11174284.cpp!!!	initRole() : OMX_ERRORTYPE
  if (strncmp(mName, kCompNamePrefix, kCompNamePrefixLength)) {
    return OMX_ErrorInvalidComponentName;
  }
  char * role_name = mName + kCompNamePrefixLength;
  if (!strncmp(role_name, OMX_ROLE_VIDEO_SCHEDULER_BINARY,
      strlen(OMX_ROLE_VIDEO_SCHEDULER_BINARY))) {
    addRole(OMX_ROLE_VIDEO_SCHEDULER_BINARY);
  } else {
    return OMX_ErrorInvalidComponentName;
  }
  return OMX_ErrorNone;
!!!11174412.cpp!!!	initPort() : OMX_ERRORTYPE
  OMX_ERRORTYPE err = OMX_ErrorNone;
  mInputPort = new OmxAmpVideoPort(kVideoPortStartNumber, OMX_DirInput);
  addPort(mInputPort);
  mOutputPort = new OmxAmpVideoPort(kVideoPortStartNumber + 1, OMX_DirOutput);
  addPort(mOutputPort);
  mClockPort = new OmxAmpClockPort(kClockPortStartNumber, OMX_DirInput);
  addPort(mClockPort);
  return err;
!!!11174540.cpp!!!	componentDeInit(in hComponent : OMX_HANDLETYPE) : OMX_ERRORTYPE
  // ASSERT(hComponent != NULL)
  OmxComponent *comp = reinterpret_cast<OmxComponent *>(
      reinterpret_cast<OMX_COMPONENTTYPE *>(hComponent)->pComponentPrivate);
  OmxVideoScheduler *schduler = static_cast<OmxVideoScheduler *>(comp);
  delete schduler;
  return OMX_ErrorNone;
!!!11174668.cpp!!!	getVideoPlane() : OMX_S32
  OmxPortImpl *port = getPort(kVideoPortStartNumber + 1);
  OmxComponentImpl *pComp =  static_cast<OmxComponentImpl *>(
      static_cast<OMX_COMPONENTTYPE *>(
          port->getTunnelComponent())->pComponentPrivate);
  if (NULL != strstr(pComp->mName, "iv_renderer")) {
    return static_cast<OmxVoutProxy *>(pComp)->getVideoPlane();
  }
  return -1;
!!!11174796.cpp!!!	createComponent(inout handle : OMX_HANDLETYPE, in componentName : OMX_STRING, in appData : OMX_PTR, inout callBacks : OMX_CALLBACKTYPE) : OMX_ERRORTYPE
  OmxVideoScheduler* comp = new OmxVideoScheduler(componentName);
  *handle = comp->makeComponent(comp);
  comp->setCallbacks(callBacks, appData);
  comp->componentInit();
  return OMX_ErrorNone;
