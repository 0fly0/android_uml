class TableSchemaBuilder
!!!13288844.java!!!	TableSchemaBuilder(in tableName : String)
        if (TextUtils.isEmpty(tableName)) {
            throw new IllegalArgumentException("invalid empty table name");
        }

        mTableName = tableName;
        mColumns = new ArrayList<ColumnDef>();
!!!13288972.java!!!	setCreateIfNotExistsFlag(inout createIfNotExists : boolean) : TableSchemaBuilder
        mIfNotExists = createIfNotExists;

        return this;
!!!13289100.java!!!	addIntegerColumn(in name : String, in flags : int, in index : int) : TableSchemaBuilder
        mColumns.add(new ColumnDef(name, ColumnDef.TYPE_INTEGER, flags, index,
                        null));

        return this;
!!!13289228.java!!!	addIntegerColumn(in name : String, in flags : int, in index : int, in defaultValue : int) : TableSchemaBuilder
        mColumns.add(new ColumnDef(name, ColumnDef.TYPE_INTEGER, flags, index,
                        defaultValue));

        return this;
!!!13289356.java!!!	addRealColumn(in name : String, in flags : int, in index : int) : TableSchemaBuilder
        mColumns.add(new ColumnDef(name, ColumnDef.TYPE_REAL, flags, index, null));

        return this;
!!!13289484.java!!!	addTextColumn(in name : String, in flags : int, in index : int) : TableSchemaBuilder
        return addTextColumn(name, flags, index, null);
!!!13289612.java!!!	addTextColumn(in name : String, in flags : int, in index : int, in defaultValue : String) : TableSchemaBuilder
        mColumns.add(new ColumnDef(name, ColumnDef.TYPE_TEXT, flags, index,
                        defaultValue));

        return this;
!!!13289740.java!!!	addBlobColumn(in name : String, in flags : int, in index : int) : TableSchemaBuilder
        mColumns.add(new ColumnDef(name, ColumnDef.TYPE_BLOB, flags, index, null));

        return this;
!!!13289868.java!!!	addColumnsFrom(inout columnsClass : Class) : TableSchemaBuilder

        if (!BaseColumns.class.isAssignableFrom(columnsClass)) {
            throw new IllegalArgumentException(
                    "columnsClass must be a subclass of BaseColumns");
        }

        mColumns.add(new ColumnDef(BaseColumns._ID, ColumnDef.TYPE_INTEGER,
                        (FLAG_NOT_NULL | FLAG_UNIQUE | FLAG_PRIMARY_KEY) , 0, null));

        final Field[] fields = columnsClass.getFields();
        for (Field field : fields) {
            final String name = field.getName();
            final int modifiers = field.getModifiers();

            if ((field.getType() != String.class)
                    || name.startsWith("_")
                    || !Modifier.isFinal(modifiers)
                    || !Modifier.isPublic(modifiers)
                    || !Modifier.isStatic(modifiers)) {
                continue;
            }

            String fieldValue = null;
            try {
                fieldValue = (String) field.get(null);
            } catch (Exception ex) {
                continue;
            }

            ColumnSpec columnSpec = null;
            Annotation annotations[] = field.getDeclaredAnnotations();
            for (Annotation annotation : annotations) {
                if (annotation instanceof ColumnSpec) {
                    columnSpec = (ColumnSpec) annotation;
                    break;
                }
            }

            if (columnSpec == null) {
                continue;
            }

            int type;
            switch (columnSpec.type()) {
                case BOOLEAN:
                case SHORT:
                case INTEGER:
                case LONG:
                case LONG_TIME_MS:
                    type = ColumnDef.TYPE_INTEGER;
                    break;

                case FLOAT:
                case DOUBLE:
                    type = ColumnDef.TYPE_REAL;
                    break;

                case STRING:
                case STRING_URI:
                case ENUM:
                    type = ColumnDef.TYPE_TEXT;
                    break;

                case BLOB:
                case BLOB_IMAGE:
                    type = ColumnDef.TYPE_BLOB;
                    break;

                default:
                    type = ColumnDef.TYPE_INVALID;
            }

            if (type == ColumnDef.TYPE_INVALID) {
                continue;
            }

            int flags = 0;

            if (name.equalsIgnoreCase(BaseColumns._ID)) {
                flags |= FLAG_PRIMARY_KEY;
            }
            if (columnSpec.required()) {
                flags |= FLAG_NOT_NULL;
            }
            if (columnSpec.unique()) {
                flags |= FLAG_UNIQUE;
            }

            String defaultValue = columnSpec.defaultValue();
            if (TextUtils.isEmpty(defaultValue)) {
                defaultValue = null;
            }

            mColumns.add(new ColumnDef(fieldValue, type, flags, columnSpec.index(),
                            defaultValue));
        }

        return this;
!!!13289996.java!!!	build() : String
        // Sort the columns by index.
        Collections.sort(mColumns, COLUMN_INDEX_COMPARATOR);

        StringBuilder sb = new StringBuilder();
        sb.append("CREATE TABLE ");
        if (mIfNotExists) {
            sb.append("IF NOT EXISTS ");
        }
        sb.append(mTableName)
                .append(" (\n");

        int count = mColumns.size();
        for (int i = 0; i < count; ++i) {
            ColumnDef column = mColumns.get(i);
            boolean notLast = i < (count - 1);
            sb.append("  ");
            column.toSql(sb);
            if (notLast) {
                sb.append(',');
            }
            sb.append('\n');
        }

        sb.append(");\n");

        return sb.toString();
