class AVSettingObserver
!!!11088140.cpp!!!	AVSettingObserver(inout player : MrvlTvPlayer)

!!!11088396.cpp!!!	OnSettingUpdate(in name : char, in value : AVSettingValue) : void
    ENTER();
    if (NULL != name) {
        ALOGD("OnSettingUpdate, (key:%s, string:%s)",
              name,
              value.getFormattedValue().string());
    }
    if (!value.isInt()) {
        return;
    }
    char drc_mode_key[MAX_KEY_LEN];
    char source_gain_key[MAX_KEY_LEN];
    char channel_map_key[MAX_KEY_LEN];
    memset(drc_mode_key, 0, sizeof(drc_mode_key));
    memset(source_gain_key, 0, sizeof(source_gain_key));
    memset(channel_map_key, 0, sizeof(channel_map_key));
    snprintf(drc_mode_key, MAX_KEY_LEN, "%s.%s", marvell::kAudioOutputSettingsPrefix,
             marvell::kPhyDrcMode);
    snprintf(source_gain_key, MAX_KEY_LEN, "%s.%s", marvell::kAudioOutputSettingsPrefix,
             marvell::kPhySourceGain);
    snprintf(channel_map_key, MAX_KEY_LEN, "%s.%s", marvell::kAudioOutputSettingsPrefix,
             marvell::kPhyChannelMap);
    if (!strncmp(drc_mode_key, name, strlen(drc_mode_key))) {
        ALOGD("DRC mode setting updated to (%d)", value.getInt());
        mPlayer.setDRCMode(value.getInt());
    } else if (!strncmp(source_gain_key, name, strlen(source_gain_key))) {
        ALOGD("source gain setting updated to (%d)", value.getInt());
        mPlayer.setSourceGain(value.getInt());
    } else if (!strncmp(channel_map_key, name, strlen(channel_map_key))) {
        ALOGD("channel map setting updated to (%d)", value.getInt());
        mPlayer.setChanMap(value.getInt());
    }

    // TODO: add stereo mode, dual mode setting observer after FEPlayer command constants added
#if 0
    // pseudo code for input lock support
    if (InputLockSts-->unLocked) {
        lock_sts_ = kUnLocked;
        if (fe_player_ != NULL) {
            fe_player_->command(IFEPlayer::kUnMuteAudio);
            fe_player_->command(IFEPlayer::kUnMutePlane);
        }
    }

#endif
    LEAVE();
