class SubMap
!!!1495451.java!!!	SubMap(inout map : ConcurrentSkipListMap, inout fromKey : K, inout fromInclusive : boolean, inout toKey : K, inout toInclusive : boolean, inout isDescending : boolean)
            if (fromKey != null && toKey != null &&
                map.compare(fromKey, toKey) > 0)
                throw new IllegalArgumentException("inconsistent range");
            this.m = map;
            this.lo = fromKey;
            this.hi = toKey;
            this.loInclusive = fromInclusive;
            this.hiInclusive = toInclusive;
            this.isDescending = isDescending;
!!!1495579.java!!!	tooLow(inout key : K) : boolean
            if (lo != null) {
                int c = m.compare(key, lo);
                if (c < 0 || (c == 0 && !loInclusive))
                    return true;
            }
            return false;
!!!1495707.java!!!	tooHigh(inout key : K) : boolean
            if (hi != null) {
                int c = m.compare(key, hi);
                if (c > 0 || (c == 0 && !hiInclusive))
                    return true;
            }
            return false;
!!!1495835.java!!!	inBounds(inout key : K) : boolean
            return !tooLow(key) && !tooHigh(key);
!!!1495963.java!!!	checkKeyBounds(inout key : K) : void
            if (key == null)
                throw new NullPointerException();
            if (!inBounds(key))
                throw new IllegalArgumentException("key out of range");
!!!1496091.java!!!	isBeforeEnd(inout n : Node) : boolean
            if (n == null)
                return false;
            if (hi == null)
                return true;
            K k = n.key;
            if (k == null) // pass by markers and headers
                return true;
            int c = m.compare(k, hi);
            if (c > 0 || (c == 0 && !hiInclusive))
                return false;
            return true;
!!!1496219.java!!!	loNode() : Node
            if (lo == null)
                return m.findFirst();
            else if (loInclusive)
                return m.findNear(lo, GT|EQ);
            else
                return m.findNear(lo, GT);
!!!1496347.java!!!	hiNode() : Node
            if (hi == null)
                return m.findLast();
            else if (hiInclusive)
                return m.findNear(hi, LT|EQ);
            else
                return m.findNear(hi, LT);
!!!1496475.java!!!	lowestKey() : K
            ConcurrentSkipListMap.Node<K,V> n = loNode();
            if (isBeforeEnd(n))
                return n.key;
            else
                throw new NoSuchElementException();
!!!1496603.java!!!	highestKey() : K
            ConcurrentSkipListMap.Node<K,V> n = hiNode();
            if (n != null) {
                K last = n.key;
                if (inBounds(last))
                    return last;
            }
            throw new NoSuchElementException();
!!!1496731.java!!!	lowestEntry() : Entry
            for (;;) {
                ConcurrentSkipListMap.Node<K,V> n = loNode();
                if (!isBeforeEnd(n))
                    return null;
                Map.Entry<K,V> e = n.createSnapshot();
                if (e != null)
                    return e;
            }
!!!1496859.java!!!	highestEntry() : Entry
            for (;;) {
                ConcurrentSkipListMap.Node<K,V> n = hiNode();
                if (n == null || !inBounds(n.key))
                    return null;
                Map.Entry<K,V> e = n.createSnapshot();
                if (e != null)
                    return e;
            }
!!!1496987.java!!!	removeLowest() : Entry
            for (;;) {
                Node<K,V> n = loNode();
                if (n == null)
                    return null;
                K k = n.key;
                if (!inBounds(k))
                    return null;
                V v = m.doRemove(k, null);
                if (v != null)
                    return new AbstractMap.SimpleImmutableEntry<K,V>(k, v);
            }
!!!1497115.java!!!	removeHighest() : Entry
            for (;;) {
                Node<K,V> n = hiNode();
                if (n == null)
                    return null;
                K k = n.key;
                if (!inBounds(k))
                    return null;
                V v = m.doRemove(k, null);
                if (v != null)
                    return new AbstractMap.SimpleImmutableEntry<K,V>(k, v);
            }
!!!1497243.java!!!	getNearEntry(inout key : K, in rel : int) : Entry
            if (isDescending) { // adjust relation for direction
                if ((rel & LT) == 0)
                    rel |= LT;
                else
                    rel &= ~LT;
            }
            if (tooLow(key))
                return ((rel & LT) != 0) ? null : lowestEntry();
            if (tooHigh(key))
                return ((rel & LT) != 0) ? highestEntry() : null;
            for (;;) {
                Node<K,V> n = m.findNear(key, rel);
                if (n == null || !inBounds(n.key))
                    return null;
                K k = n.key;
                V v = n.getValidValue();
                if (v != null)
                    return new AbstractMap.SimpleImmutableEntry<K,V>(k, v);
            }
!!!1497371.java!!!	getNearKey(inout key : K, in rel : int) : K
            if (isDescending) { // adjust relation for direction
                if ((rel & LT) == 0)
                    rel |= LT;
                else
                    rel &= ~LT;
            }
            if (tooLow(key)) {
                if ((rel & LT) == 0) {
                    ConcurrentSkipListMap.Node<K,V> n = loNode();
                    if (isBeforeEnd(n))
                        return n.key;
                }
                return null;
            }
            if (tooHigh(key)) {
                if ((rel & LT) != 0) {
                    ConcurrentSkipListMap.Node<K,V> n = hiNode();
                    if (n != null) {
                        K last = n.key;
                        if (inBounds(last))
                            return last;
                    }
                }
                return null;
            }
            for (;;) {
                Node<K,V> n = m.findNear(key, rel);
                if (n == null || !inBounds(n.key))
                    return null;
                K k = n.key;
                V v = n.getValidValue();
                if (v != null)
                    return k;
            }
!!!1497499.java!!!	containsKey(inout key : Object) : boolean
            if (key == null) throw new NullPointerException();
            K k = (K)key;
            return inBounds(k) && m.containsKey(k);
!!!1497627.java!!!	get(inout key : Object) : V
            if (key == null) throw new NullPointerException();
            K k = (K)key;
            return (!inBounds(k)) ? null : m.get(k);
!!!1497755.java!!!	put(inout key : K, inout value : V) : V
            checkKeyBounds(key);
            return m.put(key, value);
!!!1497883.java!!!	remove(inout key : Object) : V
            K k = (K)key;
            return (!inBounds(k)) ? null : m.remove(k);
!!!1498011.java!!!	size() : int
            long count = 0;
            for (ConcurrentSkipListMap.Node<K,V> n = loNode();
                 isBeforeEnd(n);
                 n = n.next) {
                if (n.getValidValue() != null)
                    ++count;
            }
            return count >= Integer.MAX_VALUE ? Integer.MAX_VALUE : (int)count;
!!!1498139.java!!!	isEmpty() : boolean
            return !isBeforeEnd(loNode());
!!!1498267.java!!!	containsValue(inout value : Object) : boolean
            if (value == null)
                throw new NullPointerException();
            for (ConcurrentSkipListMap.Node<K,V> n = loNode();
                 isBeforeEnd(n);
                 n = n.next) {
                V v = n.getValidValue();
                if (v != null && value.equals(v))
                    return true;
            }
            return false;
!!!1498395.java!!!	clear() : void
            for (ConcurrentSkipListMap.Node<K,V> n = loNode();
                 isBeforeEnd(n);
                 n = n.next) {
                if (n.getValidValue() != null)
                    m.remove(n.key);
            }
!!!1498523.java!!!	putIfAbsent(inout key : K, inout value : V) : V
            checkKeyBounds(key);
            return m.putIfAbsent(key, value);
!!!1498651.java!!!	remove(inout key : Object, inout value : Object) : boolean
            K k = (K)key;
            return inBounds(k) && m.remove(k, value);
!!!1498779.java!!!	replace(inout key : K, inout oldValue : V, inout newValue : V) : boolean
            checkKeyBounds(key);
            return m.replace(key, oldValue, newValue);
!!!1498907.java!!!	replace(inout key : K, inout value : V) : V
            checkKeyBounds(key);
            return m.replace(key, value);
!!!1499035.java!!!	comparator() : Comparator
            Comparator<? super K> cmp = m.comparator();
            if (isDescending)
                return Collections.reverseOrder(cmp);
            else
                return cmp;
!!!1499163.java!!!	newSubMap(inout fromKey : K, inout fromInclusive : boolean, inout toKey : K, inout toInclusive : boolean) : SubMap
            if (isDescending) { // flip senses
                K tk = fromKey;
                fromKey = toKey;
                toKey = tk;
                boolean ti = fromInclusive;
                fromInclusive = toInclusive;
                toInclusive = ti;
            }
            if (lo != null) {
                if (fromKey == null) {
                    fromKey = lo;
                    fromInclusive = loInclusive;
                }
                else {
                    int c = m.compare(fromKey, lo);
                    if (c < 0 || (c == 0 && !loInclusive && fromInclusive))
                        throw new IllegalArgumentException("key out of range");
                }
            }
            if (hi != null) {
                if (toKey == null) {
                    toKey = hi;
                    toInclusive = hiInclusive;
                }
                else {
                    int c = m.compare(toKey, hi);
                    if (c > 0 || (c == 0 && !hiInclusive && toInclusive))
                        throw new IllegalArgumentException("key out of range");
                }
            }
            return new SubMap<K,V>(m, fromKey, fromInclusive,
                                   toKey, toInclusive, isDescending);
!!!1499291.java!!!	subMap(inout fromKey : K, inout fromInclusive : boolean, inout toKey : K, inout toInclusive : boolean) : SubMap
            if (fromKey == null || toKey == null)
                throw new NullPointerException();
            return newSubMap(fromKey, fromInclusive, toKey, toInclusive);
!!!1499419.java!!!	headMap(inout toKey : K, inout inclusive : boolean) : SubMap
            if (toKey == null)
                throw new NullPointerException();
            return newSubMap(null, false, toKey, inclusive);
!!!1499547.java!!!	tailMap(inout fromKey : K, inout inclusive : boolean) : SubMap
            if (fromKey == null)
                throw new NullPointerException();
            return newSubMap(fromKey, inclusive, null, false);
!!!1499675.java!!!	subMap(inout fromKey : K, inout toKey : K) : SubMap
            return subMap(fromKey, true, toKey, false);
!!!1499803.java!!!	headMap(inout toKey : K) : SubMap
            return headMap(toKey, false);
!!!1499931.java!!!	tailMap(inout fromKey : K) : SubMap
            return tailMap(fromKey, true);
!!!1500059.java!!!	descendingMap() : SubMap
            return new SubMap<K,V>(m, lo, loInclusive,
                                   hi, hiInclusive, !isDescending);
!!!1500187.java!!!	ceilingEntry(inout key : K) : Entry
            return getNearEntry(key, GT|EQ);
!!!1500315.java!!!	ceilingKey(inout key : K) : K
            return getNearKey(key, GT|EQ);
!!!1500443.java!!!	lowerEntry(inout key : K) : Entry
            return getNearEntry(key, LT);
!!!1500571.java!!!	lowerKey(inout key : K) : K
            return getNearKey(key, LT);
!!!1500699.java!!!	floorEntry(inout key : K) : Entry
            return getNearEntry(key, LT|EQ);
!!!1500827.java!!!	floorKey(inout key : K) : K
            return getNearKey(key, LT|EQ);
!!!1500955.java!!!	higherEntry(inout key : K) : Entry
            return getNearEntry(key, GT);
!!!1501083.java!!!	higherKey(inout key : K) : K
            return getNearKey(key, GT);
!!!1501211.java!!!	firstKey() : K
            return isDescending ? highestKey() : lowestKey();
!!!1501339.java!!!	lastKey() : K
            return isDescending ? lowestKey() : highestKey();
!!!1501467.java!!!	firstEntry() : Entry
            return isDescending ? highestEntry() : lowestEntry();
!!!1501595.java!!!	lastEntry() : Entry
            return isDescending ? lowestEntry() : highestEntry();
!!!1501723.java!!!	pollFirstEntry() : Entry
            return isDescending ? removeHighest() : removeLowest();
!!!1501851.java!!!	pollLastEntry() : Entry
            return isDescending ? removeLowest() : removeHighest();
!!!1501979.java!!!	keySet() : NavigableSet
            KeySet<K> ks = keySetView;
            return (ks != null) ? ks : (keySetView = new KeySet<K>(this));
!!!1502107.java!!!	navigableKeySet() : NavigableSet
            KeySet<K> ks = keySetView;
            return (ks != null) ? ks : (keySetView = new KeySet<K>(this));
!!!1502235.java!!!	values() : Collection
            Collection<V> vs = valuesView;
            return (vs != null) ? vs : (valuesView = new Values<V>(this));
!!!1502363.java!!!	entrySet() : Set
            Set<Map.Entry<K,V>> es = entrySetView;
            return (es != null) ? es : (entrySetView = new EntrySet<K,V>(this));
!!!1502491.java!!!	descendingKeySet() : NavigableSet
            return descendingMap().navigableKeySet();
!!!1502619.java!!!	keyIterator() : Iterator
            return new SubMapKeyIterator();
!!!1502747.java!!!	valueIterator() : Iterator
            return new SubMapValueIterator();
!!!1502875.java!!!	entryIterator() : Iterator
            return new SubMapEntryIterator();
