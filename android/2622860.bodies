class QicCamera
!!!11049228.cpp!!!	QicCamera()
    LOGV("enter %s", __func__);
    memset(&mPreviewTv, 0, sizeof(mPreviewTv));
    memset(&mRecordTv, 0, sizeof(mRecordTv));
    memset(mSupportPreviewSize, 0, sizeof(mSupportPreviewSize));
    memset(mSupportVideoSize, 0, sizeof(mSupportVideoSize));
!!!11049356.cpp!!!	~QicCamera()
    LOGV("enter %s", __func__);
    mUseAVCOutput = 0;
!!!11049740.cpp!!!	setAVCOutputEnable(in flag : int) : void
    LOGV("enter %s", __func__);

    if (flag)
        mUseAVCOutput = 1;
    else
        mUseAVCOutput = 0;
!!!11050380.cpp!!!	startPreview(in  : void) : int
    LOGV("enter %s", __func__);
    int ret = 0;

    if (mFlagCameraStart) {
        LOGW("WARN(%s): camera already start preview", __func__);
        return 0;
    }

    ret = qic_start_capture(DEV_ID_0);

    if (ret < 0) {
        LOGE("ERR(%s):failed to start capture DEV_ID_0", __func__);
        goto exit;
    }

    mPreviewFd = qic_get_fd_from_devid(DEV_ID_0);

    if (mPreviewFd == -1) {
        LOGE("ERR(%s): failed on get fd from DEV_ID_0", __func__);
        ret = -1;
        qic_stop_capture(DEV_ID_0);
        goto exit;
    }

    mFlagLock.lock();
    mFlagCameraStart = 1;
    mFlagLock.unlock();

exit:
    return ret;
!!!11050508.cpp!!!	stopPreview(in  : void) : int
    LOGV("enter %s", __func__);
    int ret = 0;

    if (!mFlagCameraStart) {
        LOGW("WARN(%s): camera already stop preview", __func__);
        return 0;
    }

    ret = qic_stop_capture(DEV_ID_0);

    if (ret < 0)
        LOGE("ERR(%s):failed to stop capture DEV_ID_0", __func__);

    mFlagLock.lock();
    mFlagCameraStart = 0;
    mFlagLock.unlock();

    mPreviewFd = -1;
    return ret;
!!!11050636.cpp!!!	getPreview(in  : void) : int
    LOGV("enter %s", __func__);

    int ret = 0;

    if (mFlagCameraStart == 0) {
        LOGE("ERR(%s): Camera preview has already been stopped", __func__);
        return -1;
    }

    FD_ZERO(&mPreviewFds);
    FD_SET(mPreviewFd, &mPreviewFds);
    mPreviewTv.tv_sec = 2;
    mPreviewTv.tv_usec = 0;

    ret = select(mPreviewFd + 1, &mPreviewFds, NULL, NULL, &mPreviewTv);

    if (ret == -1) {
        if (EINTR == errno) {
            //continue;
            return 0;
        }

        LOGE("YUYV select error %d, %s", errno, strerror(errno));
        ret = UNKNOWN_ERROR;
        goto exit;
    } else if (ret == 0) {
        LOGE("YUYV select timeout");
        ret = UNKNOWN_ERROR;
        goto exit;
    }

    if (FD_ISSET(mPreviewFd, &mPreviewFds)) {
        mFrameLock.lock();
        ret = qic_getframe(DEV_ID_0);
        mFrameLock.unlock();

        if (ret) {
            LOGE("YUYV qic_getframe error");
            ret = UNKNOWN_ERROR;
        }
    }

exit:
    return ret;
!!!11050764.cpp!!!	startRecord(in  : void) : int
    LOGV("enter %s", __func__);

    if (!mFlagCameraStart) {
        LOGE("ERR(%s): failed on Start Recording, please run preview first", __func__);
        return -1;
    }

    if (mUseAVCOutput) {
        if (qic_start_capture(DEV_ID_1)) {
            LOGE("ERR(%s): failed to start capture DEV_ID_1", __func__);
            return -1;
        }
    }

    mRecordFd = qic_get_fd_from_devid(DEV_ID_1);

    if (mRecordFd == -1) {
        LOGE("ERR(%s): failed on get fd from DEV_ID_1", __func__);
        qic_stop_capture(DEV_ID_1);
        return -1;
    }

    return 0;
!!!11050892.cpp!!!	stopRecord(in  : void) : int
    LOGV("enter %s", __func__);

    if (!mFlagCameraStart) {
        LOGE("ERR(%s): camera is not running, exit here", __func__);
        return 0;
    }

    if (mUseAVCOutput) {
        if (qic_stop_capture(DEV_ID_1)) {
            LOGE("ERR(%s): failed to stop capture DEV_ID_1", __func__);
            return -1;
        }
    }

    mRecordFd = -1;

    return 0;
!!!11051020.cpp!!!	getRecordFrame(in  : void) : int
    LOGV("enter %s", __func__);
    int ret = 0;

    FD_ZERO(&mRecordFds);
    FD_SET(mRecordFd, &mRecordFds);

    mRecordTv.tv_sec = 2;
    mRecordTv.tv_usec = 0;
    ret = select(mRecordFd + 1, &mRecordFds, NULL, NULL, &mRecordTv);

    if (ret == -1) {
        if (EINTR == errno) {
            return 0;
        }

        LOGE("ERR(%s):AVC select error %d, %s", __func__, errno, strerror(errno));
        ret = UNKNOWN_ERROR;
        goto exit;
    } else if (ret == 0) {
        LOGE("ERR(%s): AVC select timeout", __func__);
        ret = UNKNOWN_ERROR;
        goto exit;
    }

    if (FD_ISSET(mRecordFd, &mRecordFds)) {
        mFrameLock.lock();
        ret = qic_getframe(DEV_ID_1);
        mFrameLock.unlock();

        if (ret) {
            LOGE("ERR(%s): AVC qic get frame error on DEV_ID_1", __func__);
            ret = UNKNOWN_ERROR;
            goto exit;
        }
    }

exit:
    return ret;
!!!11051148.cpp!!!	releaseRecordFrame(in index : int) : int
    LOGV("enter %s", __func__);
    int ret = 0;

    return ret;
!!!11051916.cpp!!!	getPicture(in  : void) : int
    LOGV("enter %s", __func__);

    int ret = 0;

    if (mFlagCameraStart == 0) {
        LOGE("ERR(%s): Camera preview has already been stopped", __func__);
        return -1;
    }

    FD_ZERO(&mCaptureFds);
    FD_SET(mCaptureFd, &mCaptureFds);
    mCaptureTv.tv_sec = 2;
    mCaptureTv.tv_usec = 0;

    ret = select(mCaptureFd + 1, &mCaptureFds, NULL, NULL, &mCaptureTv);

    if (ret == -1) {
        if (EINTR == errno) {
            //continue;
            return 0;
        }

        LOGE("MJPEG select error %d, %s", errno, strerror(errno));
        ret = UNKNOWN_ERROR;
        goto exit;
    } else if (ret == 0) {
        LOGE("MJPEG select timeout");
        ret = UNKNOWN_ERROR;
        goto exit;
    }

    if (FD_ISSET(mCaptureFd, &mCaptureFds)) {
        mFrameLock.lock();
        ret = qic_getframe(DEV_ID_0);
        mFrameLock.unlock();

        if (ret) {
            LOGE("MJPEG qic_getframe error");
            ret = UNKNOWN_ERROR;
        }
    }

exit:
    return ret;
!!!11052044.cpp!!!	getPreviewSize(inout width : uint, inout height : uint) : int
    LOGV("enter %s", __func__);

    if (width == NULL || height == NULL)
        return -1;

    *width = mPreviewWidth;
    *height = mPreviewHeight;
    return 0;
!!!11052172.cpp!!!	setPreviewSize(in width : uint, in height : uint) : int
    LOGV("enter %s", __func__);

    // TODO: check params before setting
    mPreviewWidth = width;
    mPreviewHeight = height;

    return 0;;
!!!11052428.cpp!!!	setPreviewPixelFormat(in pixelFormat : int) : int
    LOGV("enter %s", __func__);

    if (pixelFormat == V4L2_PIX_FMT_YUV420)
        LOGW("PreviewFormat:V4L2_PIX_FMT_YUV420");
    else if (pixelFormat == V4L2_PIX_FMT_NV12)
        LOGW("PreviewFormat:V4L2_PIX_FMT_NV12");
    else if (pixelFormat == V4L2_PIX_FMT_NV21)
        LOGW("PreviewFormat:V4L2_PIX_FMT_NV21");
    else if(pixelFormat == V4L2_PIX_FMT_YVU420)
        LOGW("PreviewFormat:V4L2_PIX_FMT_YVU420");
    else if (pixelFormat == V4L2_PIX_FMT_YUV422P)
        LOGW("PreviewFormat:V4L2_PIX_FMT_YUV422P");
    else if (pixelFormat == V4L2_PIX_FMT_YUYV)
        LOGW("PreviewFormat:V4L2_PIX_FMT_YUYV");
    else if (pixelFormat == V4L2_PIX_FMT_RGB565)
        LOGW("PreviewFormat:V4L2_PIX_FMT_RGB565");
    else
        LOGW("PreviewFormat:UnknownFormat");

    mPreviewFormat = pixelFormat;
    return 0;
!!!11052556.cpp!!!	getMaxPreviewSize(inout width : uint, inout height : uint) : int
    LOGV("enter %s", __func__);

    if (width == NULL || height == NULL)
        return -1;

    *width = mPreviewMaxWidth;
    *height = mPreviewMaxHeight;

    return 0;
!!!11053068.cpp!!!	getVideoSize(inout width : uint, inout height : uint) : int
    LOGV("enter %s", __func__);

    if (width == NULL || height == NULL)
        return -1;

    *width  = mRecordingWidth;
    *height = mRecordingHeight;

    return 0;
!!!11053196.cpp!!!	setVideoSize(in width : uint, in height : uint) : int
    LOGV("enter %s", __func__);

    mRecordingWidth  = width;
    mRecordingHeight = height;
    return 0;
!!!11053324.cpp!!!	getPictureSize(inout width : uint, inout height : uint) : int
    LOGV("enter %s", __func__);

    if (width == NULL || height == NULL)
        return -1;

    *width = mPictureWidth;
    *height = mPictureHeight;
    return 0;
!!!11053452.cpp!!!	setPictureSize(in width : uint, in height : uint) : int
    LOGV("enter %s", __func__);

    mPictureWidth = width;
    mPictureHeight = height;
    return 0;
!!!11053580.cpp!!!	getFrameRate(in  : void) : uint
    LOGV("enter %s", __func__);

    return mFrameRate;
!!!11053708.cpp!!!	setFrameRate(in dev : int, in frameRate : uint) : int
    LOGV("enter %s", __func__);

    //YUYV output don't support dynamic changing frame rate
    if (dev == DEV_ID_1) {
        if (qic_change_framerate(dev, frameRate)) {
            LOGE("ERR(%s):failed to change framerate", __func__);
            return -1;
        }
    }

    mFrameRate = frameRate;
    return 0;
!!!11053964.cpp!!!	setBitRate(in dev : int, in bitRate : uint) : int
    LOGV("enter %s", __func__);

    //only available for AVC video device
    if (dev == DEV_ID_1) {
        if (qic_change_bitrate(dev, bitRate)) {
            LOGE("ERR(%s):failed to change bitrate", __func__);
            return -1;
        }
    }

    mBitRate = bitRate;
    return 0;
!!!11054220.cpp!!!	setSaturation(in sat : int) : int
    LOGV("enter %s", __func__);

    int dev = getDeviceId();

    if (mFlagCameraStart) {
        if (qic_change_V4L2_SATURATION(dev, sat)) {
            LOGE("ERR(%s):failed to change saturation", __func__);
            return -1;
        }
    }

    mSat = sat;
    return 0;
!!!11054476.cpp!!!	setBrightness(in brightness : int) : int
    LOGV("enter %s", __func__);

    int dev = getDeviceId();

    if (qic_change_V4L2_BRIGHTNESS(dev, brightness)) {
        LOGE("ERR(%s):failed to change brightness", __func__);
        return -1;
    }

    mBrightness = brightness;
    return 0;
!!!11054732.cpp!!!	setContrast(in contrast : int) : int
    LOGV("enter %s", __func__);

    int dev = getDeviceId();

    if (qic_change_V4L2_CONTRAST(dev, contrast)) {
        LOGE("ERR(%s):failed to change contrast", __func__);
        return -1;
    }

    mContrast = contrast;
    return 0;
!!!11055116.cpp!!!	setWBT(in mode : int, in wbt : int) : int
    LOGV("enter %s", __func__);

    int dev = getDeviceId();

    if (mode == WB_MODE_AUTO && (wbt == AWB_ENABLE || wbt == AWB_DISABLE)) {
        LOGV("use auto awb mode: [%d]", wbt);
    } else if (mode == 0 && wbt >= 0 && wbt <= 3700) {
        wbt += 2800;
        LOGV("use manuel awb mode:[%d]", wbt);
    } else {
        LOGE("ERR(%s):failed to set AWB/WBT, wrong parameters", __func__);
        return -1;
    }

    if (mFlagCameraStart) {
        if (qic_change_V4L2_WHITE_BALANCE(dev, mode, wbt)) {
            LOGE("ERR(%s):failed to set AWB/WBT", __func__);
            return -1;
        }
    }

    mWBTMode = mode;
    mWBTValue = wbt;

    return 0;
!!!11055372.cpp!!!	setSharpness(in sharpness : int) : int
    LOGV("enter %s", __func__);

    int dev = getDeviceId();

    if (qic_change_V4L2_SHARPNESS(dev, sharpness)) {
        LOGE("ERR(%s):failed to change sharpness", __func__);
        return -1;
    }

    mSharpness = sharpness;
    return 0;
!!!11055628.cpp!!!	setGain(in gain : int) : int
    LOGV("enter %s", __func__);

    int dev = getDeviceId();

    if (qic_change_V4L2_GAIN(dev, gain)) {
        LOGE("ERR(%s):failed to change gain", __func__);
        return -1;
    }

    mGain = gain;
    return 0;
!!!11056012.cpp!!!	setExposure(in mode : int, in expo : int) : int
    LOGV("enter %s", __func__);

    int dev = getDeviceId();

    if (mode == EXPO_MODE_AUTO && (expo == AE_ENABLE || expo == AE_DISABLE)) {
        LOGV("use auto exposure mode: [%d]", expo);
    } else if (mode == EXPO_MODE_MANUAL && expo >= 0 && expo <= 1250) {
        LOGV("use manuel exposure mode:[%d]", expo);
    } else {
        LOGE("ERR(%s):failed to set exposure, wrong parameters", __func__);
        return -1;
    }

    if (mFlagCameraStart) {
        if (qic_change_V4L2_EXPOSURE(dev, mode, expo)) {
            LOGE("ERR(%s):failed to set exposure", __func__);
            return -1;
        }
    }

    mExposureMode = mode;

    if (mode == EXPO_MODE_AUTO) {
        mExposureValue = expo;
    }

    return 0;

!!!11056268.cpp!!!	setZoom(in zoom : int) : int
    LOGV("enter %s", __func__);

    int dev = getDeviceId();

    if (mFlagCameraStart) {
        if (qic_change_V4L2_ZOOM_ABSOLUTE(dev, zoom)) {
            LOGE("ERR(%s):failed to change zoom", __func__);
            return -1;
        }
    }

    mZoom = zoom;
    return 0;
!!!11056396.cpp!!!	setPanTilt(in pan : int, in tilt : int) : int
    LOGV("enter %s", __func__);

    int dev = getDeviceId();

    if (mFlagCameraStart) {
        if (qic_change_pan_tilt(dev, pan, tilt)) {
            LOGE("ERR(%s):failed to change pan tilt", __func__);
            return -1;
        }
    }

    return 0;
!!!11056524.cpp!!!	requestIFrame(in dev : int) : int
    LOGV("enter %s", __func__);

    //only available for AVC video device
    if (dev == DEV_ID_1) {
        if (qic_setIframe(dev)) {
            LOGE("ERR(%s):failed to set I frame", __func__);
            return -1;
        }
    }

    return 0;

!!!11056652.cpp!!!	setFrameCallBack(in frameCB : getFrameFunc) : int
    LOGV("enter %s", __func__);

    if (frameCB == NULL) {
        LOGE("WARN(%s), callback function is NULL", __func__);
        return -1;
    }

    mGetFrameCB = frameCB;
    return 0;
!!!11056780.cpp!!!	getDeviceId() : int

    int dev = DEV_ID_0;

    if (mUseAVCOutput) {
        dev = DEV_ID_0 + DEV_ID_1;
    }

    return dev;
