class FinalizerReference
!!!459803.java!!!	FinalizerReference(inout r : T, inout q : ReferenceQueue)
        super(r, q);
!!!459931.java!!!	get() : T
        return zombie;
!!!460059.java!!!	clear() : void
        zombie = null;
!!!460187.java!!!	add(inout referent : Object) : void
        FinalizerReference<?> reference = new FinalizerReference<Object>(referent, queue);
        synchronized (LIST_LOCK) {
            reference.prev = null;
            reference.next = head;
            if (head != null) {
                head.prev = reference;
            }
            head = reference;
        }
!!!460315.java!!!	remove(inout reference : FinalizerReference) : void
        synchronized (LIST_LOCK) {
            FinalizerReference<?> next = reference.next;
            FinalizerReference<?> prev = reference.prev;
            reference.next = null;
            reference.prev = null;
            if (prev != null) {
                prev.next = next;
            } else {
                head = next;
            }
            if (next != null) {
                next.prev = prev;
            }
        }
!!!460443.java!!!	finalizeAllEnqueued() : void
        Sentinel sentinel = new Sentinel();
        enqueueSentinelReference(sentinel);
        sentinel.awaitFinalization();
!!!460571.java!!!	enqueueSentinelReference(inout sentinel : Sentinel) : void
        synchronized (LIST_LOCK) {
            // When a finalizable object is allocated, a FinalizerReference is added to the list.
            // We search the list for that FinalizerReference (it should be at or near the head),
            // and then put it on the queue so that it can be finalized.
            for (FinalizerReference<?> r = head; r != null; r = r.next) {
                if (r.referent == sentinel) {
                    FinalizerReference<Sentinel> sentinelReference = (FinalizerReference<Sentinel>) r;
                    sentinelReference.referent = null;
                    sentinelReference.zombie = sentinel;
                    sentinelReference.enqueueInternal();
                    return;
                }
            }
        }
        // We just created a finalizable object and still hold a reference to it.
        // It must be on the list.
        throw new AssertionError("newly-created live Sentinel not on list!");
