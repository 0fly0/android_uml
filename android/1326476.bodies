class AccountUnlockScreen
!!!7949068.java!!!	AccountUnlockScreen(inout context : Context, inout configuration : Configuration, inout updateMonitor : KeyguardUpdateMonitor, inout callback : KeyguardScreenCallback, inout lockPatternUtils : LockPatternUtils)
        super(context);
        mCallback = callback;
        mLockPatternUtils = lockPatternUtils;

        LayoutInflater.from(context).inflate(
                R.layout.keyguard_screen_glogin_unlock, this, true);

        mTopHeader = (TextView) findViewById(R.id.topHeader);
        mTopHeader.setText(mLockPatternUtils.isPermanentlyLocked() ?
                R.string.lockscreen_glogin_too_many_attempts :
                R.string.lockscreen_glogin_forgot_pattern);

        mInstructions = (TextView) findViewById(R.id.instructions);

        mLogin = (EditText) findViewById(R.id.login);
        mLogin.setFilters(new InputFilter[] { new LoginFilter.UsernameFilterGeneric() } );
        mLogin.addTextChangedListener(this);

        mPassword = (EditText) findViewById(R.id.password);
        mPassword.addTextChangedListener(this);

        mOk = (Button) findViewById(R.id.ok);
        mOk.setOnClickListener(this);

        mUpdateMonitor = updateMonitor;

        mKeyguardStatusViewManager = new KeyguardStatusViewManager(this, updateMonitor,
                lockPatternUtils, callback, true);
!!!7949452.java!!!	onTextChanged(inout s : CharSequence, in start : int, in before : int, in count : int) : void
        mCallback.pokeWakelock(AWAKE_POKE_MILLIS);
!!!7949580.java!!!	onRequestFocusInDescendants(in direction : int, inout previouslyFocusedRect : Rect) : boolean
        // send focus to the login field
        return mLogin.requestFocus(direction, previouslyFocusedRect);
!!!7949708.java!!!	needsInput() : boolean
        return true;
!!!7949836.java!!!	onPause() : void
        mKeyguardStatusViewManager.onPause();
!!!7949964.java!!!	onResume() : void
        // start fresh
        mLogin.setText("");
        mPassword.setText("");
        mLogin.requestFocus();
        mKeyguardStatusViewManager.onResume();
!!!7950092.java!!!	cleanUp() : void
        if (mCheckingDialog != null) {
            mCheckingDialog.hide();
        }
        mUpdateMonitor.removeCallback(this); // this must be first
        mCallback = null;
        mLockPatternUtils = null;
        mUpdateMonitor = null;
!!!7950220.java!!!	onClick(inout v : View) : void
        mCallback.pokeWakelock();
        if (v == mOk) {
            asyncCheckPassword();
        }
!!!7950348.java!!!	postOnCheckPasswordResult(in success : boolean) : void
        // ensure this runs on UI thread
        mLogin.post(new Runnable() {
            public void run() {
                if (success) {
                    // clear out forgotten password
                    mLockPatternUtils.setPermanentlyLocked(false);
                    mLockPatternUtils.setLockPatternEnabled(false);
                    mLockPatternUtils.saveLockPattern(null);

                    // launch the 'choose lock pattern' activity so
                    // the user can pick a new one if they want to
                    Intent intent = new Intent();
                    intent.setClassName(LOCK_PATTERN_PACKAGE, LOCK_PATTERN_CLASS);
                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                    mContext.startActivity(intent);
                    mCallback.reportSuccessfulUnlockAttempt();

                    // close the keyguard
                    mCallback.keyguardDone(true);
                } else {
                    mInstructions.setText(R.string.lockscreen_glogin_invalid_input);
                    mPassword.setText("");
                    mCallback.reportFailedUnlockAttempt();
                }
            }
        });
!!!7950476.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        if (event.getAction() == KeyEvent.ACTION_DOWN
                && event.getKeyCode() == KeyEvent.KEYCODE_BACK) {
            if (mLockPatternUtils.isPermanentlyLocked()) {
                mCallback.goToLockScreen();
            } else {
                mCallback.forgotPattern(false);
            }
            return true;
        }
        return super.dispatchKeyEvent(event);
!!!7950604.java!!!	findIntendedAccount(in username : String) : Account
        Account[] accounts = AccountManager.get(mContext).getAccountsByType("com.google");

        // Try to figure out which account they meant if they
        // typed only the username (and not the domain), or got
        // the case wrong.

        Account bestAccount = null;
        int bestScore = 0;
        for (Account a: accounts) {
            int score = 0;
            if (username.equals(a.name)) {
                score = 4;
            } else if (username.equalsIgnoreCase(a.name)) {
                score = 3;
            } else if (username.indexOf('@') < 0) {
                int i = a.name.indexOf('@');
                if (i >= 0) {
                    String aUsername = a.name.substring(0, i);
                    if (username.equals(aUsername)) {
                        score = 2;
                    } else if (username.equalsIgnoreCase(aUsername)) {
                        score = 1;
                    }
                }
            }
            if (score > bestScore) {
                bestAccount = a;
                bestScore = score;
            } else if (score == bestScore) {
                bestAccount = null;
            }
        }
        return bestAccount;
!!!7950732.java!!!	asyncCheckPassword() : void
        mCallback.pokeWakelock(AWAKE_POKE_MILLIS);
        final String login = mLogin.getText().toString();
        final String password = mPassword.getText().toString();
        Account account = findIntendedAccount(login);
        if (account == null) {
            postOnCheckPasswordResult(false);
            return;
        }
        getProgressDialog().show();
        Bundle options = new Bundle();
        options.putString(AccountManager.KEY_PASSWORD, password);
        AccountManager.get(mContext).confirmCredentials(account, options, null /* activity */,
                new AccountManagerCallback<Bundle>() {
            public void run(AccountManagerFuture<Bundle> future) {
                try {
                    mCallback.pokeWakelock(AWAKE_POKE_MILLIS);
                    final Bundle result = future.getResult();
                    final boolean verified = result.getBoolean(AccountManager.KEY_BOOLEAN_RESULT);
                    postOnCheckPasswordResult(verified);
                } catch (OperationCanceledException e) {
                    postOnCheckPasswordResult(false);
                } catch (IOException e) {
                    postOnCheckPasswordResult(false);
                } catch (AuthenticatorException e) {
                    postOnCheckPasswordResult(false);
                } finally {
                    mLogin.post(new Runnable() {
                        public void run() {
                            getProgressDialog().hide();
                        }
                    });
                }
            }
        }, null /* handler */);
!!!7950860.java!!!	getProgressDialog() : Dialog
        if (mCheckingDialog == null) {
            mCheckingDialog = new ProgressDialog(mContext);
            mCheckingDialog.setMessage(
                    mContext.getString(R.string.lockscreen_glogin_checking_password));
            mCheckingDialog.setIndeterminate(true);
            mCheckingDialog.setCancelable(false);
            mCheckingDialog.getWindow().setType(
                    WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);
        }
        return mCheckingDialog;
