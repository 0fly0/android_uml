class WebViewEventSender
!!!9043596.java!!!	WebViewEventSender(inout webView : WebView)
        mWebView = webView;
        mWebView.getSettings().setBuiltInZoomControls(true);
        mTouchPoints = new Vector<TouchPoint>();
!!!9043724.java!!!	resetMouse() : void
		mouseX = mouseY = 0;
!!!9043852.java!!!	enableDOMUIEventLogging(in DOMNode : int) : void
		// TODO Auto-generated method stub

!!!9043980.java!!!	fireKeyboardEventsToElement(in DOMNode : int) : void
		// TODO Auto-generated method stub

!!!9044108.java!!!	keyDown(in character : String, inout withModifiers : String) : void
        Log.e("EventSender", "KeyDown: " + character + "("
                + character.getBytes()[0] + ") Modifiers: "
                + Arrays.toString(withModifiers));
        KeyEvent modifier = null;
        if (withModifiers != null && withModifiers.length > 0) {
            for (int i = 0; i < withModifiers.length; i++) {
                int keyCode = modifierMapper(withModifiers[i]);
                modifier = new KeyEvent(KeyEvent.ACTION_DOWN, keyCode);
                mWebView.onKeyDown(modifier.getKeyCode(), modifier);
            }
        }
        int keyCode = keyMapper(character.toLowerCase().toCharArray()[0]);
        KeyEvent event = new KeyEvent(KeyEvent.ACTION_DOWN, keyCode);
        mWebView.onKeyDown(event.getKeyCode(), event);

!!!9044236.java!!!	keyDown(in character : String) : void
        keyDown(character, null);
!!!9044364.java!!!	leapForward(in milliseconds : int) : void
		// TODO Auto-generated method stub

!!!9044492.java!!!	mouseClick() : void
		mouseDown();
		mouseUp();
!!!9044620.java!!!	mouseDown() : void
        long ts = SystemClock.uptimeMillis();
        MotionEvent event = MotionEvent.obtain(ts, ts, MotionEvent.ACTION_DOWN, mouseX, mouseY, 0);
        mWebView.onTouchEvent(event);
!!!9044748.java!!!	mouseMoveTo(in X : int, in Y : int) : void
        mouseX= X;
        mouseY= Y;
!!!9044876.java!!!	mouseUp() : void
        long ts = SystemClock.uptimeMillis();
        MotionEvent event = MotionEvent.obtain(ts, ts, MotionEvent.ACTION_UP, mouseX, mouseY, 0);
        mWebView.onTouchEvent(event);
!!!9045004.java!!!	keyMapper(in c : char) : int
		// handle numbers
		if (c >= '0' && c<= '9') {
			int offset = c - '0';
			return KeyEvent.KEYCODE_0 + offset;
		}

		// handle characters
		if (c >= 'a' && c <= 'z') {
			int offset = c - 'a';
			return KeyEvent.KEYCODE_A + offset;
		}

		// handle all others
		switch (c) {
		case '*':
			return KeyEvent.KEYCODE_STAR;
		case '#':
			return KeyEvent.KEYCODE_POUND;
		case ',':
			return KeyEvent.KEYCODE_COMMA;
		case '.':
			return KeyEvent.KEYCODE_PERIOD;
		case '\t':
			return KeyEvent.KEYCODE_TAB;
		case ' ':
			return KeyEvent.KEYCODE_SPACE;
		case '\n':
			return KeyEvent.KEYCODE_ENTER;
		case '\b':
        case 0x7F:
			return KeyEvent.KEYCODE_DEL;
		case '~':
			return KeyEvent.KEYCODE_GRAVE;
		case '-':
			return KeyEvent.KEYCODE_MINUS;
		case '=':
			return KeyEvent.KEYCODE_EQUALS;
		case '(':
			return KeyEvent.KEYCODE_LEFT_BRACKET;
		case ')':
			return KeyEvent.KEYCODE_RIGHT_BRACKET;
		case '\\':
			return KeyEvent.KEYCODE_BACKSLASH;
		case ';':
			return KeyEvent.KEYCODE_SEMICOLON;
		case '\'':
			return KeyEvent.KEYCODE_APOSTROPHE;
		case '/':
			return KeyEvent.KEYCODE_SLASH;
		default:
			break;
		}

		return c;
!!!9045132.java!!!	modifierMapper(in modifier : String) : int
		if (modifier.equals("ctrlKey")) {
			return KeyEvent.KEYCODE_ALT_LEFT;
		} else if (modifier.equals("shiftKey")) {
			return KeyEvent.KEYCODE_SHIFT_LEFT;
		} else if (modifier.equals("altKey")) {
			return KeyEvent.KEYCODE_SYM;
		} else if (modifier.equals("metaKey")) {
			return KeyEvent.KEYCODE_UNKNOWN;
		}
		return KeyEvent.KEYCODE_UNKNOWN;
!!!9045260.java!!!	touchStart() : void
        final int numPoints = mTouchPoints.size();
        if (numPoints == 0) {
            return;
        }

        int[] pointerIds = new int[numPoints];
        MotionEvent.PointerCoords[] pointerCoords = new MotionEvent.PointerCoords[numPoints];
        long downTime = SystemClock.uptimeMillis();

        for (int i = 0; i < numPoints; ++i) {
            pointerIds[i] = mTouchPoints.get(i).getId();
            pointerCoords[i] = new MotionEvent.PointerCoords();
            pointerCoords[i].x = mTouchPoints.get(i).getX();
            pointerCoords[i].y = mTouchPoints.get(i).getY();
            mTouchPoints.get(i).setDownTime(downTime);
        }

        MotionEvent event = MotionEvent.obtain(downTime, downTime,
            MotionEvent.ACTION_DOWN, numPoints, pointerIds, pointerCoords,
            mTouchMetaState, 1.0f, 1.0f, 0, 0, 0, 0);

        mWebView.onTouchEvent(event);
!!!9045388.java!!!	touchMove() : void
        final int numPoints = mTouchPoints.size();
        if (numPoints == 0) {
            return;
        }

        int[] pointerIds = new int[numPoints];
        MotionEvent.PointerCoords[] pointerCoords = new MotionEvent.PointerCoords[numPoints];
        int numMovedPoints = 0;
        for (int i = 0; i < numPoints; ++i) {
            TouchPoint tp = mTouchPoints.get(i);
            if (tp.hasMoved()) {
                pointerIds[numMovedPoints] = mTouchPoints.get(i).getId();
                pointerCoords[i] = new MotionEvent.PointerCoords();
                pointerCoords[numMovedPoints].x = mTouchPoints.get(i).getX();
                pointerCoords[numMovedPoints].y = mTouchPoints.get(i).getY();
                ++numMovedPoints;
                tp.setMoved(false);
            }
        }

        if (numMovedPoints == 0) {
            return;
        }

        MotionEvent event = MotionEvent.obtain(mTouchPoints.get(0).downTime(),
                SystemClock.uptimeMillis(), MotionEvent.ACTION_MOVE,
                numMovedPoints, pointerIds, pointerCoords,
                mTouchMetaState, 1.0f, 1.0f, 0, 0, 0, 0);
        mWebView.onTouchEvent(event);
!!!9045516.java!!!	touchEnd() : void
        final int numPoints = mTouchPoints.size();
        if (numPoints == 0) {
            return;
        }

        int[] pointerIds = new int[numPoints];
        MotionEvent.PointerCoords[] pointerCoords = new MotionEvent.PointerCoords[numPoints];

        for (int i = 0; i < numPoints; ++i) {
            pointerIds[i] = mTouchPoints.get(i).getId();
            pointerCoords[i] = new MotionEvent.PointerCoords();
            pointerCoords[i].x = mTouchPoints.get(i).getX();
            pointerCoords[i].y = mTouchPoints.get(i).getY();
        }

        MotionEvent event = MotionEvent.obtain(mTouchPoints.get(0).downTime(),
                SystemClock.uptimeMillis(), MotionEvent.ACTION_UP,
                numPoints, pointerIds, pointerCoords,
                mTouchMetaState, 1.0f, 1.0f, 0, 0, 0, 0);
        mWebView.onTouchEvent(event);

        for (int i = numPoints - 1; i >= 0; --i) {  // remove released points.
            TouchPoint tp = mTouchPoints.get(i);
            if (tp.isReleased()) {
              mTouchPoints.remove(i);
            }
        }
!!!9045644.java!!!	touchCancel() : void
        final int numPoints = mTouchPoints.size();
        if (numPoints == 0) {
            return;
        }

        int[] pointerIds = new int[numPoints];
        MotionEvent.PointerCoords[] pointerCoords = new MotionEvent.PointerCoords[numPoints];
        long cancelTime = SystemClock.uptimeMillis();
        int numCanceledPoints = 0;

        for (int i = 0; i < numPoints; ++i) {
            TouchPoint tp = mTouchPoints.get(i);
            if (tp.cancelled()) {
                pointerIds[numCanceledPoints] = mTouchPoints.get(i).getId();
                pointerCoords[numCanceledPoints] = new MotionEvent.PointerCoords();
                pointerCoords[numCanceledPoints].x = mTouchPoints.get(i).getX();
                pointerCoords[numCanceledPoints].y = mTouchPoints.get(i).getY();
                ++numCanceledPoints;
            }
        }

        if (numCanceledPoints == 0) {
            return;
        }

        MotionEvent event = MotionEvent.obtain(mTouchPoints.get(0).downTime(),
            SystemClock.uptimeMillis(), MotionEvent.ACTION_CANCEL,
            numCanceledPoints, pointerIds, pointerCoords,
            mTouchMetaState, 1.0f, 1.0f, 0, 0, 0, 0);

        mWebView.onTouchEvent(event);
!!!9045772.java!!!	cancelTouchPoint(in id : int) : void
        TouchPoint tp = mTouchPoints.get(id);
        if (tp == null) {
            return;
        }

        tp.cancel();
!!!9045900.java!!!	addTouchPoint(in x : int, in y : int) : void
        final int numPoints = mTouchPoints.size();
        int id;
        if (numPoints == 0) {
          id = 0;
        } else {
          id = mTouchPoints.get(numPoints - 1).getId() + 1;
        }

        mTouchPoints.add(new TouchPoint(id, contentsToWindowX(x), contentsToWindowY(y)));
!!!9046028.java!!!	updateTouchPoint(in i : int, in x : int, in y : int) : void
        TouchPoint tp = mTouchPoints.get(i);
        if (tp == null) {
            return;
        }

        tp.update(contentsToWindowX(x), contentsToWindowY(y));
        tp.setMoved(true);
!!!9046156.java!!!	setTouchModifier(in modifier : String, inout enabled : boolean) : void
        int mask = 0;
        if ("alt".equals(modifier.toLowerCase())) {
            mask = KeyEvent.META_ALT_ON;
        } else if ("shift".equals(modifier.toLowerCase())) {
            mask = KeyEvent.META_SHIFT_ON;
        } else if ("ctrl".equals(modifier.toLowerCase())) {
            mask = KeyEvent.META_SYM_ON;
        }

        if (enabled) {
            mTouchMetaState |= mask;
        } else {
            mTouchMetaState &= ~mask;
        }
!!!9046284.java!!!	releaseTouchPoint(in id : int) : void
        TouchPoint tp = mTouchPoints.get(id);
        if (tp == null) {
            return;
        }

        tp.release();
!!!9046412.java!!!	clearTouchPoints() : void
        mTouchPoints.clear();
!!!9046540.java!!!	clearTouchMetaState() : void
        mTouchMetaState = 0;
!!!9046668.java!!!	contentsToWindowX(in x : int) : int
        return Math.round(x * mWebView.getScale()) - mWebView.getScrollX();
!!!9046796.java!!!	contentsToWindowY(in y : int) : int
        return Math.round(y * mWebView.getScale()) - mWebView.getScrollY();
