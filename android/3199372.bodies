class TvLauncher
!!!13736460.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        mLauncherView = findViewById(R.id.launcher);
        mNotificationButton = (NotificationButton) findViewById(R.id.notification_button);

        mSharedPrefs = getSharedPreferences(LauncherApplication.getSharedPreferencesKey(),
                Context.MODE_PRIVATE);
        setShowWallpaperAlways(mSharedPrefs.getBoolean(SHOW_WALLPAPER_ALWAYS_KEY, false));
!!!13736588.java!!!	onResume() : void
        super.onResume();

        if (launchTutorial() || launchStartupApplication()) return;

        mNotificationButton.updateNotificationCount();
        if (!mShowWallpaperAlways) {
            checkWallpaper(true);
        }
!!!13736716.java!!!	onPause() : void
        super.onPause();

        if (!mShowWallpaperAlways) {
            hideWallpaper();
        }
!!!13736844.java!!!	onBackPressed() : void
        if (isAllAppsVisible() || getWorkspace().getOpenFolder() != null) {
            super.onBackPressed();
        } else if (getDragController().isDragging()) {
            getDragController().cancelDrag();
        } else if (getDragLayer().hasResizeFrames()) {
            getWorkspace().exitWidgetResizeMode();
        } else if (!isRunningAlone()) {
            moveTaskToBack(false);
        }
!!!13736972.java!!!	onCreateOptionsMenu(inout menu : Menu) : boolean
        if (isWorkspaceLocked()) {
            return false;
        }

        // Use MENU_GROUP_WALLPAPER to hide in all apps, from super.onPrepareOptionsMenu().
        SubMenu subMenu = menu.addSubMenu(MENU_GROUP_WALLPAPER, MENU_LAUNCHER_SETTINGS, 0,
                R.string.menu_launcher_settings);
        subMenu.getItem().setAlphabeticShortcut('L');
        subMenu.add(0, MENU_STARTUP_APPLICATIONS, 0, R.string.menu_startup_applications)
            .setAlphabeticShortcut('A');
        subMenu.add(0, MENU_SHOW_WALLPAPER_ALWAYS, 0, R.string.menu_show_wallpaper_always)
            .setCheckable(true)
            .setAlphabeticShortcut('S');
        subMenu.add(0, MENU_WALLPAPER_SETTINGS, 0, R.string.menu_choose_wallpaper)
            .setIcon(android.R.drawable.ic_menu_gallery)
            .setAlphabeticShortcut('W');

        super.onCreateOptionsMenu(menu);
        menu.removeItem(MENU_WALLPAPER_SETTINGS);

        return true;
!!!13737100.java!!!	onPrepareOptionsMenu(inout menu : Menu) : boolean
        if (!super.onPrepareOptionsMenu(menu)) {
            return false;
        }

        menu.findItem(MENU_LAUNCHER_SETTINGS).getSubMenu().findItem(MENU_SHOW_WALLPAPER_ALWAYS)
            .setChecked(mShowWallpaperAlways);
        return true;
!!!13737228.java!!!	onOptionsItemSelected(inout item : MenuItem) : boolean
        switch (item.getItemId()) {
            case MENU_STARTUP_APPLICATIONS:
                showStartupApplicationChooser();
                return true;

            case MENU_SHOW_WALLPAPER_ALWAYS:
                item.setChecked(!item.isChecked());
                setShowWallpaperAlways(item.isChecked());
                return true;
        }

        return super.onOptionsItemSelected(item);
!!!13737356.java!!!	isRunningAlone() : boolean
        ActivityManager am = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
        // If the number of running tasks is only one, the running activity is me
        // because Launcher runs singleTask mode
        return (am.getRunningTasks(2).size() == 1);
!!!13737484.java!!!	setShowWallpaperAlways(inout show : boolean) : void
        if (show == mShowWallpaperAlways) return;

        if (show || isRunningAlone()) {
            showWallpaper();
            mHandler.removeCallbacks(mWallpaperChecker);
        } else {
            hideWallpaper();
        }

        mShowWallpaperAlways = show;
        mSharedPrefs.edit().putBoolean(SHOW_WALLPAPER_ALWAYS_KEY, mShowWallpaperAlways).apply();
!!!13737612.java!!!	checkWallpaper(inout resetCount : boolean) : void
        if (resetCount) {
            mWallpaperCheckCount = 0;
        } else {
            mWallpaperCheckCount++;
        }

        if (isRunningAlone()) {
            showWallpaper();
        } else if (mWallpaperCheckCount < WALLPAPER_CHECK_COUNT_MAX) {
            mHandler.removeCallbacks(mWallpaperChecker);
            mHandler.postDelayed(mWallpaperChecker, WALLPAPER_CHECK_DELAY_MS);
        }
!!!13737740.java!!!	showWallpaper() : void
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER);
        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
!!!13737868.java!!!	hideWallpaper() : void
        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SHOW_WALLPAPER);
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
!!!13737996.java!!!	updateWallpaperVisibility(inout visible : boolean) : void
        // When mShowWallpaperAlways is false, wallpaper is completely handled by this class.
        if (!mShowWallpaperAlways) return;

        super.updateWallpaperVisibility(visible);
!!!13738124.java!!!	showStartupApplicationChooser() : void
        StartupApplicationChooserDialogFragment fragment =
                new StartupApplicationChooserDialogFragment();
        fragment.show(getFragmentManager(), "dialog");
!!!13738252.java!!!	launchTutorial() : boolean
        if (SystemProperties.get("ro.kernel.qemu").equals("1")) return false;
        if (mSharedPrefs.getBoolean(LAUNCHED_TUTORIAL_KEY, false)) return false;

        mSharedPrefs.edit().putBoolean(LAUNCHED_TUTORIAL_KEY, true).apply();
        startActivityForResultSafely(new Intent(Intent.ACTION_SYSTEM_TUTORIAL), REQUEST_TUTORIAL);
        return true;
!!!13738380.java!!!	launchStartupApplication() : boolean
        String bootToken = SystemProperties.get(RO_BOOT_TOKEN);
        String savedBootToken = mSharedPrefs.getString(BOOT_TOKEN_KEY, null);
        if (bootToken == null || bootToken.equals(savedBootToken)) return false;

        mSharedPrefs.edit().putString(BOOT_TOKEN_KEY, bootToken).apply();
        Intent bootIntent = BootIntentUtils.load(this);
        if (bootIntent == null) {
            bootIntent = BootIntentUtils.makeDefault(this);
        }
        if (BootIntentUtils.isNone(bootIntent)) return false;

        if (mFirstLaunch) {
            mFirstLaunch = false;
            bootIntent.putExtra(EXTRA_FIRST_LAUNCH_FROM_HOME, true);
        }
        startActivitySafely(null, bootIntent, "startup app");
        return true;
!!!13738508.java!!!	onActivityResult(in requestCode : int, in resultCode : int, inout data : Intent) : void
        // Always call super to clear mWaitingForResult
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == REQUEST_TUTORIAL && resultCode == RESULT_OK) {
            mFirstLaunch = true;
        }
!!!13738636.java!!!	onWindowFocusChanged(inout hasFocus : boolean) : void
        super.onWindowFocusChanged(hasFocus);

        if (!hasFocus) {
            // Clear focus to prevent confusion when notification panel is shown.
            mLastFocusedView = getCurrentFocus();
            mLauncherView.setFocusable(true);
            mLauncherView.setFocusableInTouchMode(true);
            mLauncherView.requestFocus();
        } else {
            if (mLastFocusedView != null) {
                mLastFocusedView.requestFocus();
                mLastFocusedView = null;
            }
            mLauncherView.setFocusable(false);
            mLauncherView.setFocusableInTouchMode(false);
        }
!!!13738764.java!!!	finishBindingItems() : void
        super.finishBindingItems();

        if (mFirstBinding) {
            mFirstBinding = false;
            // Request focus on all apps button at start.  Do this after finishing the first
            // binding, because all apps button is re-added at binding time.
            ((TvHotseat) getHotseat()).getAllAppsButton().requestFocus();
        }
!!!13738892.java!!!	startActivity(inout v : View, inout intent : Intent, inout tag : Object) : boolean
        // Add extra which indicates that app is launched from the dock.
        // onClick() is better place, but do it here to avoid dupilcate code.
        if (tag instanceof ShortcutInfo
                && ((ShortcutInfo) tag).container == LauncherSettings.Favorites.CONTAINER_HOTSEAT) {
            intent = new Intent(intent);
            intent.putExtra(EXTRA_QUICK_LAUNCH, true);
        }

        return super.startActivity(v, intent, tag);
