class URLStreamHandler
!!!640539.java!!!	openConnection(inout u : URL, inout proxy : Proxy) : URLConnection
        throw new UnsupportedOperationException();
!!!640667.java!!!	parseURL(inout url : URL, inout spec : String, in start : int, in end : int) : void
        if (this != url.streamHandler) {
            throw new SecurityException("Only a URL's stream handler is permitted to mutate it");
        }
        if (end < start) {
            throw new StringIndexOutOfBoundsException(spec, start, end - start);
        }

        int fileStart;
        String authority;
        String userInfo;
        String host;
        int port = -1;
        String path;
        String query;
        String ref;
        if (spec.regionMatches(start, "//", 0, 2)) {
            // Parse the authority from the spec.
            int authorityStart = start + 2;
            fileStart = UrlUtils.findFirstOf(spec, "/?#", authorityStart, end);
            authority = spec.substring(authorityStart, fileStart);
            int userInfoEnd = UrlUtils.findFirstOf(spec, "@", authorityStart, fileStart);
            int hostStart;
            if (userInfoEnd != fileStart) {
                userInfo = spec.substring(authorityStart, userInfoEnd);
                hostStart = userInfoEnd + 1;
            } else {
                userInfo = null;
                hostStart = authorityStart;
            }

            /*
             * Extract the host and port. The host may be an IPv6 address with
             * colons like "[::1]", in which case we look for the port delimiter
             * colon after the ']' character.
             */
            int colonSearchFrom = hostStart;
            int ipv6End = UrlUtils.findFirstOf(spec, "]", hostStart, fileStart);
            if (ipv6End != fileStart) {
                if (UrlUtils.findFirstOf(spec, ":", hostStart, ipv6End) == ipv6End) {
                    throw new IllegalArgumentException("Expected an IPv6 address: "
                            + spec.substring(hostStart, ipv6End + 1));
                }
                colonSearchFrom = ipv6End;
            }
            int hostEnd = UrlUtils.findFirstOf(spec, ":", colonSearchFrom, fileStart);
            host = spec.substring(hostStart, hostEnd);
            int portStart = hostEnd + 1;
            if (portStart < fileStart) {
                port = Integer.parseInt(spec.substring(portStart, fileStart));
                if (port < 0) {
                    throw new IllegalArgumentException("port < 0: " + port);
                }
            }
            path = null;
            query = null;
            ref = null;
        } else {
            // Get the authority from the context URL.
            fileStart = start;
            authority = url.getAuthority();
            userInfo = url.getUserInfo();
            host = url.getHost();
            if (host == null) {
                host = "";
            }
            port = url.getPort();
            path = url.getPath();
            query = url.getQuery();
            ref = url.getRef();
        }

        /*
         * Extract the path, query and fragment. Each part has its own leading
         * delimiter character. The query can contain slashes and the fragment
         * can contain slashes and question marks.
         *    / path ? query # fragment
         */
        int pos = fileStart;
        while (pos < end) {
            int nextPos;
            switch (spec.charAt(pos)) {
            case '#':
                nextPos = end;
                ref = spec.substring(pos + 1, nextPos);
                break;
            case '?':
                nextPos = UrlUtils.findFirstOf(spec, "#", pos, end);
                query = spec.substring(pos + 1, nextPos);
                ref = null;
                break;
            default:
                nextPos = UrlUtils.findFirstOf(spec, "?#", pos, end);
                path = relativePath(path, spec.substring(pos, nextPos));
                query = null;
                ref = null;
                break;
            }
            pos = nextPos;
        }

        if (path == null) {
            path = "";
        }

        path = UrlUtils.authoritySafePath(authority, path);

        setURL(url, url.getProtocol(), host, port, authority, userInfo, path, query, ref);
!!!640795.java!!!	relativePath(inout base : String, inout path : String) : String
        if (path.startsWith("/")) {
            return UrlUtils.canonicalizePath(path, true);
        } else if (base != null) {
            String combined = base.substring(0, base.lastIndexOf('/') + 1) + path;
            return UrlUtils.canonicalizePath(combined, true);
        } else {
            return path;
        }
!!!640923.java!!!	setURL(inout u : URL, inout protocol : String, inout host : String, in port : int, inout file : String, inout ref : String) : void
        if (this != u.streamHandler) {
            throw new SecurityException();
        }
        u.set(protocol, host, port, file, ref);
!!!641051.java!!!	setURL(inout u : URL, inout protocol : String, inout host : String, in port : int, inout authority : String, inout userInfo : String, inout path : String, inout query : String, inout ref : String) : void
        if (this != u.streamHandler) {
            throw new SecurityException();
        }
        u.set(protocol, host, port, authority, userInfo, path, query, ref);
!!!641179.java!!!	toExternalForm(inout url : URL) : String
        return toExternalForm(url, false);
!!!641307.java!!!	toExternalForm(inout url : URL, inout escapeIllegalCharacters : boolean) : String
        StringBuilder result = new StringBuilder();
        result.append(url.getProtocol());
        result.append(':');

        String authority = url.getAuthority();
        if (authority != null) {
            result.append("//");
            if (escapeIllegalCharacters) {
                URI.AUTHORITY_ENCODER.appendPartiallyEncoded(result, authority);
            } else {
                result.append(authority);
            }
        }

        String fileAndQuery = url.getFile();
        if (fileAndQuery != null) {
            if (escapeIllegalCharacters) {
                URI.FILE_AND_QUERY_ENCODER.appendPartiallyEncoded(result, fileAndQuery);
            } else {
                result.append(fileAndQuery);
            }
        }

        String ref = url.getRef();
        if (ref != null) {
            result.append('#');
            if (escapeIllegalCharacters) {
                URI.ALL_LEGAL_ENCODER.appendPartiallyEncoded(result, ref);
            } else {
                result.append(ref);
            }
        }

        return result.toString();
!!!641435.java!!!	equals(inout a : URL, inout b : URL) : boolean
        return sameFile(a, b)
                && Objects.equal(a.getRef(), b.getRef())
                && Objects.equal(a.getQuery(), b.getQuery());
!!!641563.java!!!	getDefaultPort() : int
        return -1;
!!!641691.java!!!	getHostAddress(inout url : URL) : InetAddress
        try {
            String host = url.getHost();
            if (host == null || host.length() == 0) {
                return null;
            }
            return InetAddress.getByName(host);
        } catch (UnknownHostException e) {
            return null;
        }
!!!641819.java!!!	hashCode(inout url : URL) : int
        return toExternalForm(url).hashCode();
!!!641947.java!!!	hostsEqual(inout a : URL, inout b : URL) : boolean
        // URLs with the same case-insensitive host name have equal hosts
        String aHost = a.getHost();
        String bHost = b.getHost();
        return (aHost == bHost) || aHost != null && aHost.equalsIgnoreCase(bHost);
!!!642075.java!!!	sameFile(inout a : URL, inout b : URL) : boolean
        return Objects.equal(a.getProtocol(), b.getProtocol())
                && hostsEqual(a, b)
                && a.getEffectivePort() == b.getEffectivePort()
                && Objects.equal(a.getFile(), b.getFile());
