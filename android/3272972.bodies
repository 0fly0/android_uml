class MediaDeviceSettingsActivity
!!!14202380.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        mToastHelper = new ToastHelper(this);

        mServiceConnection = new MediaDevicesServiceConnection(this) {
                @Override
                protected void onConnected() {
                    mService = getBoundService();
                    updateDevice();
                    if (mShouldUpdateUI) {
                        mShouldUpdateUI = false;
                        updateUI();
                    }
                }

                @Override
                protected void onDisconnected() {
                    mService = null;
                }
            };

        mDevice = MediaDevicesIntents.getDevice(getIntent());
        mVideoUri = MediaDevicesIntents.getVideoUri(getIntent());

        addPreferencesFromResource(R.xml.media_device_settings);

        int prefCount = GENERIC_PREFERENCES.length;
        for (String prefKey : GENERIC_PREFERENCES) {
            Preference preference = findPreference(prefKey);
            preference.setOnPreferenceClickListener(this);
            boolean removePreference = false;
            if (prefKey == KEY_MAKE_SEARCHABLE
                    && !mDevice.hasCapability(Capability.USES_CHANNEL_LINEUP)) {
                removePreference = true;
            } else if ((prefKey == KEY_EDIT_LINEUP
                    || prefKey == KEY_EDIT_CHANNELS
                    || prefKey == KEY_HAS_HD_CHANNELS)
                    && !mDevice.hasCapability(Capability.USES_CHANNEL_LINEUP)) {
                removePreference = true;
            } else if (prefKey == KEY_DISCONNECT
                    && !mDevice.hasCapability(Capability.CAN_DISCONNECT)) {
                removePreference = true;
            }
            if (prefKey == KEY_EDIT_CHANNELS
                    && mDevice.hasCapability(Capability.HAS_CHANNEL_EDITOR)) {
                removePreference = true;
            }
            if (prefKey == KEY_EDIT_LINEUP
                    && (mDevice.hasCapability(Capability.PROVIDES_CHANNEL_LINEUP)
                            || mDevice.hasCapability(Capability.LOCK_CHANNEL_LINEUP))) {
                makeLineupNonEditable(preference);
            }
            if (removePreference) {
                getPreferenceScreen().removePreference(preference);
                --prefCount;
            }
        }

        if (prefCount > 0) {
            getPreferenceScreen().removePreference(findPreference(KEY_NO_SETTINGS));
        }

        setupDeviceSpecificPreferences();

        int activityWidth = getResources().getDimensionPixelSize(R.dimen.activity_width);
        getWindow().setLayout(activityWidth, ViewGroup.LayoutParams.WRAP_CONTENT);
!!!14202508.java!!!	makeLineupNonEditable(inout preference : Preference) : void
        preference.setTitle(R.string.lineup_title);
        preference.setEnabled(false);
!!!14202636.java!!!	onStart() : void
        super.onStart();

        mServiceConnection.connect();

        setTitle(getString(R.string.device_settings_label, mDevice.getLabel()));

        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(MediaDevicesConstants.ACTION_PAIR_DEVICE_IN_SERVICE);
        mDeviceChangeReceiver = new BroadcastReceiver() {
                @Override
                public void onReceive(Context context, Intent intent) {
                    if (mDevice.getId().equals(MediaDevicesIntents.getDeviceId(intent))) {
                        updateDevice();
                    }
                }
            };
        registerReceiver(mDeviceChangeReceiver, intentFilter);
!!!14202764.java!!!	onStop() : void
        unregisterReceiver(mDeviceChangeReceiver);
        mDeviceChangeReceiver = null;
        mServiceConnection.disconnect();
        super.onStop();
!!!14202892.java!!!	onDestroy() : void
        mServiceConnection = null;
        super.onDestroy();
!!!14203020.java!!!	updateDevice() : void
        if (mService != null) {
            try {
                Device newDevice = mService.getDeviceById(mDevice.getId());
                if (newDevice != null) {
                    mDevice = newDevice;
                    setTitle(getString(R.string.device_settings_label, mDevice.getLabel()));
                }
            } catch (RemoteException re) {
                Log.w(TAG, "Failed to get device: " + mDevice.getId(), re);
            }
        }
!!!14203148.java!!!	onResume() : void
        super.onResume();
        if (mServiceConnection.isConnected()) {
            updateUI();
        } else {
            mShouldUpdateUI = true;
        }
!!!14203276.java!!!	setupDeviceSpecificPreferences() : void
        List<ResolveInfo> infos = getDeviceSettingsResolveInfos();

        for (ResolveInfo info : infos) {
            Preference preference = new Preference(this);
            configureDeviceSpecificPreference(preference, info);
            preference.setOrder(0);
            getPreferenceScreen().addPreference(preference);
        }
!!!14203404.java!!!	getDeviceSettingsResolveInfos() : ResolveInfo
        Intent intent = new Intent(MediaDevicesConstants.ACTION_DEVICE_SETTINGS);
        PackageManager pm = getPackageManager();
        List<ResolveInfo> resolveInfoList = pm.queryIntentActivities(intent,
                PackageManager.GET_META_DATA);
        ArrayList<ResolveInfo> infos = new ArrayList<ResolveInfo>();
        for (ResolveInfo info : resolveInfoList) {
            if (info.activityInfo.packageName.equals(
                    mDevice.getPackageName())) {
                infos.add(info);
            }
        }
        return infos;
!!!14203532.java!!!	configureDeviceSpecificPreference(inout preference : Preference, inout ri : ResolveInfo) : void
        PackageManager pm = getPackageManager();
        preference.setTitle(ri.activityInfo.loadLabel(pm));
        Bundle metaData = ri.activityInfo.metaData;
        int summaryResId = (metaData != null) ? metaData.getInt(
                MediaDevicesConstants.META_DATA_DEVICE_SETTINGS_SUMMARY, 0) : 0;
        if (summaryResId != 0) {
            try {
                Resources r = pm.getResourcesForApplication(
                        ri.activityInfo.applicationInfo);
                preference.setSummary(r.getString(summaryResId));
            } catch (NameNotFoundException e) {
                Log.w(TAG, "Not able to load meta data label for: " +
                        ri.activityInfo.loadLabel(pm));
            }
        }

        int order = metaData != null ? metaData.getInt(
                MediaDevicesConstants.META_DATA_DEVICE_SETTINGS_ORDER) : 0;
        if (order != 0) {
            preference.setOrder(order);
        }

        Intent intent = new Intent();
        intent.setClassName(ri.activityInfo.packageName, ri.activityInfo.name);
        intent.putExtra(MediaDevicesConstants.EXTRA_SELECTED_DEVICE_ID, mDevice.getId());
        preference.setIntent(intent);

        preference.setOnPreferenceClickListener(
                new Preference.OnPreferenceClickListener() {
            @Override
            public boolean onPreferenceClick(Preference preference) {
                startActivity(preference.getIntent());
                return true;
            }
        });

        preference.setPersistent(false);
!!!14203660.java!!!	onPreferenceClick(inout preference : Preference) : boolean
        String key = preference.getKey();
        if (KEY_DISCONNECT.equals(key)) {
            confirmUnpair();
        } else if (KEY_MAKE_SEARCHABLE.equals(key)) {
            try {
                if(mService.setSearchableDevice(mDevice.getId())) {
                    setDeviceSearchablePreferenceEnabled();
                }
            } catch (RemoteException re) {
                Log.w(TAG, "Failed to set searchable device: " + mDevice.getId(), re);
            }
        } else if (KEY_EDIT_LINEUP.equals(key)) {
            // Invoke MediaDeviceSetupActivity in "lineup setup only" mode.
            Intent intent = new Intent(this, MediaDeviceSetupActivity.class)
                    .putExtra(MediaDevicesConstants.EXTRA_DEVICE, mDevice)
                    .putExtra(MediaDevicesConstants.EXTRA_VIDEO_URI, mVideoUri)
                    .putExtra(Constants.EXTRA_LINEUP_SETUP_ONLY, true);
            startActivity(intent);
        } else if (KEY_EDIT_CHANNELS.equals(key)) {
            MediaDevicesIntents.launchEditChannelListIntent(this, mDevice);
        } else if (KEY_HAS_HD_CHANNELS.equals(key)) {
            boolean hasHdChannels = ((CheckBoxPreference) findPreference(
                                             KEY_HAS_HD_CHANNELS)).isChecked();
            try {
                mService.setSuppressHdForDevice(mDevice.getId(), !hasHdChannels);
            } catch (RemoteException re) {
                Log.w(TAG, "Failed to set suppress HD for device: " + mDevice.getId(), re);
            }
        }
        return true;
!!!14203788.java!!!	confirmUnpair() : void
        new AlertDialog.Builder(this)
                .setPositiveButton(R.string.button_yes, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            unpairDevice();
                        }
                    })
                .setNegativeButton(R.string.button_no, null)
                .setMessage(R.string.disconnect_device_confirmation)
                .setCancelable(true)
                .show();
!!!14203916.java!!!	unpairDevice() : void
        // Send an unpair request to the device's controller service.
        if (!MediaDevicesIntents.launchUnpairIntent(this, mDevice)) {
            Log.w(TAG, "No intent handler found for unpairing device " + mDevice);
            mToastHelper.showLongToast(R.string.warning_unable_to_unpair_device,
                    mDevice.getLabel());
            return;
        }

        // Unpair the device in the MediaDevicesService.
        try {
            mService.unpairDevice(mDevice.getId());
        } catch (RemoteException re) {
            Log.w(TAG, "Failed to unpair device: " + mDevice.getId(), re);
        }

        finish();
!!!14204044.java!!!	getLineupName(in lineupId : String) : String
        Cursor cursor = getContentResolver().query(
                Lineups.getLineupsUri(),
                new String []{ LineupsColumns.LINEUP_NAME },
                new SqlQueryBuilder(40).append(LineupsColumns.LINEUP_ID).append(" = ?").build(),
                new String[] { lineupId },
                null);
        String lineupName = null;
        if (cursor.moveToNext()) {
            lineupName = cursor.getString(0);
        }
        cursor.close();
        return lineupName;
!!!14204172.java!!!	updateUI() : void
        try {
            final String lineupId = mService.getLineupForDevice(mDevice.getId());

            // Suppress HD option
            final boolean suppressHd = mService.getSuppressHdForDevice(mDevice.getId());
            CheckBoxPreference suppressHdPreference =
                    (CheckBoxPreference) findPreference(KEY_HAS_HD_CHANNELS);
            if (suppressHdPreference != null) {
                suppressHdPreference.setEnabled(lineupId != null);
                suppressHdPreference.setChecked(!suppressHd);
            }

            // Searchable device option
            String searchableDeviceId = mService.getSearchableDeviceId();
            if (mDevice.getId().equals(searchableDeviceId)
                    && mDevice.hasCapability(Capability.USES_CHANNEL_LINEUP)) {
                Preference preference = findPreference(KEY_MAKE_SEARCHABLE);
                preference.setTitle(R.string.device_is_default);
                preference.setEnabled(false);
            }

            if (lineupId != null) {
                // Lineup summary
                Preference lineupPreference = findPreference(KEY_EDIT_LINEUP);
                if (lineupPreference != null) {
                    final String lineupName = getLineupName(lineupId);
                    if (lineupName != null) {
                        lineupPreference.setSummary(lineupName);
                    }
                }
            }
        } catch (RemoteException re) {
            Log.w(TAG, "Failed to update UI", re);
        }
!!!14204300.java!!!	setDeviceSearchablePreferenceEnabled() : void
        Preference preference = findPreference(KEY_MAKE_SEARCHABLE);
        preference.setTitle(R.string.device_is_default);
        preference.setEnabled(false);
