class Transition
!!!6919052.java!!!	Transition()
        this(null, null, null, 0, 0);
!!!6919180.java!!!	Transition(in transitionId : String, inout afterMediaItem : MediaItem, inout beforeMediaItem : MediaItem, in durationMs : long, in behavior : int)
        if (behavior < BEHAVIOR_MIN_VALUE || behavior > BEHAVIOR_MAX_VALUE) {
            throw new IllegalArgumentException("Invalid behavior: " + behavior);
        }
        if ((afterMediaItem == null) && (beforeMediaItem == null)) {
            throw new IllegalArgumentException("Null media items");
        }
        mUniqueId = transitionId;
        mAfterMediaItem = afterMediaItem;
        mBeforeMediaItem = beforeMediaItem;
        mDurationMs = durationMs;
        mBehavior = behavior;
        mNativeHelper = null;
        if (durationMs > getMaximumDuration()) {
            throw new IllegalArgumentException("The duration is too large");
        }
        if (afterMediaItem != null) {
            mNativeHelper = afterMediaItem.getNativeContext();
        }else {
            mNativeHelper = beforeMediaItem.getNativeContext();
        }
!!!6919308.java!!!	getId() : String
        return mUniqueId;
!!!6919436.java!!!	getAfterMediaItem() : MediaItem
        return mAfterMediaItem;
!!!6919564.java!!!	getBeforeMediaItem() : MediaItem
        return mBeforeMediaItem;
!!!6919692.java!!!	setDuration(in durationMs : long) : void
        if (durationMs > getMaximumDuration()) {
            throw new IllegalArgumentException("The duration is too large");
        }

        mDurationMs = durationMs;
        invalidate();
        mNativeHelper.setGeneratePreview(true);
!!!6919820.java!!!	getDuration() : long
        return mDurationMs;
!!!6919948.java!!!	getMaximumDuration() : long
        if (mAfterMediaItem == null) {
            return mBeforeMediaItem.getTimelineDuration() / 2;
        } else if (mBeforeMediaItem == null) {
            return mAfterMediaItem.getTimelineDuration() / 2;
        } else {
            return (Math.min(mAfterMediaItem.getTimelineDuration(),
                    mBeforeMediaItem.getTimelineDuration()) / 2);
        }
!!!6920076.java!!!	getBehavior() : int
        return mBehavior;
!!!6920204.java!!!	getTransitionSettings() : TransitionSettings
        TransitionAlpha transitionAlpha = null;
        TransitionSliding transitionSliding = null;
        TransitionCrossfade transitionCrossfade = null;
        TransitionFadeBlack transitionFadeBlack = null;
        TransitionSettings transitionSetting = null;
        transitionSetting = new TransitionSettings();
        transitionSetting.duration = (int)getDuration();
        if (this instanceof TransitionAlpha) {
            transitionAlpha = (TransitionAlpha)this;
            transitionSetting.videoTransitionType = VideoTransition.ALPHA_MAGIC;
            transitionSetting.audioTransitionType = AudioTransition.CROSS_FADE;
            transitionSetting.transitionBehaviour = mNativeHelper
            .getVideoTransitionBehaviour(transitionAlpha.getBehavior());
            transitionSetting.alphaSettings = new AlphaMagicSettings();
            transitionSetting.slideSettings = null;
            transitionSetting.alphaSettings.file = transitionAlpha.getPNGMaskFilename();
            transitionSetting.alphaSettings.blendingPercent = transitionAlpha.getBlendingPercent();
            transitionSetting.alphaSettings.invertRotation = transitionAlpha.isInvert();
            transitionSetting.alphaSettings.rgbWidth = transitionAlpha.getRGBFileWidth();
            transitionSetting.alphaSettings.rgbHeight = transitionAlpha.getRGBFileHeight();

        } else if (this instanceof TransitionSliding) {
            transitionSliding = (TransitionSliding)this;
            transitionSetting.videoTransitionType = VideoTransition.SLIDE_TRANSITION;
            transitionSetting.audioTransitionType = AudioTransition.CROSS_FADE;
            transitionSetting.transitionBehaviour = mNativeHelper
            .getVideoTransitionBehaviour(transitionSliding.getBehavior());
            transitionSetting.alphaSettings = null;
            transitionSetting.slideSettings = new SlideTransitionSettings();
            transitionSetting.slideSettings.direction = mNativeHelper
            .getSlideSettingsDirection(transitionSliding.getDirection());
        } else if (this instanceof TransitionCrossfade) {
            transitionCrossfade = (TransitionCrossfade)this;
            transitionSetting.videoTransitionType = VideoTransition.CROSS_FADE;
            transitionSetting.audioTransitionType = AudioTransition.CROSS_FADE;
            transitionSetting.transitionBehaviour = mNativeHelper
            .getVideoTransitionBehaviour(transitionCrossfade.getBehavior());
            transitionSetting.alphaSettings = null;
            transitionSetting.slideSettings = null;
        } else if (this instanceof TransitionFadeBlack) {
            transitionFadeBlack = (TransitionFadeBlack)this;
            transitionSetting.videoTransitionType = VideoTransition.FADE_BLACK;
            transitionSetting.audioTransitionType = AudioTransition.CROSS_FADE;
            transitionSetting.transitionBehaviour = mNativeHelper
            .getVideoTransitionBehaviour(transitionFadeBlack.getBehavior());
            transitionSetting.alphaSettings = null;
            transitionSetting.slideSettings = null;
        }

        return transitionSetting;
!!!6920332.java!!!	isEffectandOverlayOverlapping(inout m : MediaItem, inout clipSettings : ClipSettings, in clipNo : int) : EffectSettings
        List<Effect> effects;
        List<Overlay> overlays;
        List<EffectSettings> effectSettings = new ArrayList<EffectSettings>();
        EffectSettings tmpEffectSettings;

        overlays = m.getAllOverlays();
        for (Overlay overlay : overlays) {
            tmpEffectSettings = mNativeHelper.getOverlaySettings((OverlayFrame)overlay);
            mNativeHelper.adjustEffectsStartTimeAndDuration(tmpEffectSettings,
                    clipSettings.beginCutTime, clipSettings.endCutTime);
            if (tmpEffectSettings.duration != 0) {
                effectSettings.add(tmpEffectSettings);
            }
        }

        effects = m.getAllEffects();
        for (Effect effect : effects) {
            if (effect instanceof EffectColor) {
                tmpEffectSettings = mNativeHelper.getEffectSettings((EffectColor)effect);
                mNativeHelper.adjustEffectsStartTimeAndDuration(tmpEffectSettings,
                        clipSettings.beginCutTime, clipSettings.endCutTime);
                if (tmpEffectSettings.duration != 0) {
                    if (m instanceof MediaVideoItem) {
                        tmpEffectSettings.fiftiesFrameRate = mNativeHelper
                        .GetClosestVideoFrameRate(((MediaVideoItem)m).getFps());
                    }
                    effectSettings.add(tmpEffectSettings);
                }
            }
        }

         return effectSettings;
!!!6920460.java!!!	generate() : void
        MediaItem m1 = this.getAfterMediaItem();
        MediaItem m2 = this.getBeforeMediaItem();
        ClipSettings clipSettings1 = new ClipSettings();
        ClipSettings clipSettings2 = new ClipSettings();
        TransitionSettings transitionSetting = null;
        EditSettings editSettings = new EditSettings();
        List<EffectSettings> effectSettings_clip1;
        List<EffectSettings> effectSettings_clip2;

        String output = null;

        if (mNativeHelper == null) {
            if (m1 != null)
                mNativeHelper = m1.getNativeContext();
            else if (m2 != null)
                mNativeHelper = m2.getNativeContext();
        }
        transitionSetting = getTransitionSettings();
        if (m1 != null && m2 != null) {
            /* transition between media items */
            clipSettings1 = m1.getClipSettings();
            clipSettings2 = m2.getClipSettings();
            clipSettings1.beginCutTime = (int)(clipSettings1.endCutTime -
                                                              this.mDurationMs);
            clipSettings2.endCutTime = (int)(clipSettings2.beginCutTime +
                                                              this.mDurationMs);
            /*
             * Check how many effects and overlays overlap with transition and
             * generate effect clip first if there is any overlap
             */
            effectSettings_clip1 = isEffectandOverlayOverlapping(m1, clipSettings1,1);
            effectSettings_clip2 = isEffectandOverlayOverlapping(m2, clipSettings2,2);
            for (int index = 0; index < effectSettings_clip2.size(); index++ ) {
                effectSettings_clip2.get(index).startTime += this.mDurationMs;
            }
            editSettings.effectSettingsArray =
                                              new EffectSettings[effectSettings_clip1.size()
                                                 + effectSettings_clip2.size()];
            int i=0,j=0;
            while (i < effectSettings_clip1.size()) {
                editSettings.effectSettingsArray[j] = effectSettings_clip1.get(i);
                i++;
                j++;
            }
            i=0;
            while (i < effectSettings_clip2.size()) {
                editSettings.effectSettingsArray[j] = effectSettings_clip2.get(i);
                i++;
                j++;
            }
        } else if (m1 == null && m2 != null) {
            /* begin transition at first media item */
            m2.generateBlankFrame(clipSettings1);
            clipSettings2 = m2.getClipSettings();
            clipSettings1.endCutTime = (int)(this.mDurationMs + 50);
            clipSettings2.endCutTime = (int)(clipSettings2.beginCutTime +
                                                              this.mDurationMs);
            /*
             * Check how many effects and overlays overlap with transition and
             * generate effect clip first if there is any overlap
             */
            effectSettings_clip2 = isEffectandOverlayOverlapping(m2, clipSettings2,2);
            for (int index = 0; index < effectSettings_clip2.size(); index++ ) {
                effectSettings_clip2.get(index).startTime += this.mDurationMs;
            }
            editSettings.effectSettingsArray = new EffectSettings[effectSettings_clip2.size()];
            int i=0, j=0;
            while (i < effectSettings_clip2.size()) {
                editSettings.effectSettingsArray[j] = effectSettings_clip2.get(i);
                i++;
                j++;
            }
        } else if (m1 != null && m2 == null) {
            /* end transition at last media item */
            clipSettings1 = m1.getClipSettings();
            m1.generateBlankFrame(clipSettings2);
            clipSettings1.beginCutTime = (int)(clipSettings1.endCutTime -
                                                              this.mDurationMs);
            clipSettings2.endCutTime = (int)(this.mDurationMs + 50);
            /*
             * Check how many effects and overlays overlap with transition and
             * generate effect clip first if there is any overlap
             */
            effectSettings_clip1 = isEffectandOverlayOverlapping(m1, clipSettings1,1);
            editSettings.effectSettingsArray = new EffectSettings[effectSettings_clip1.size()];
            int i=0,j=0;
            while (i < effectSettings_clip1.size()) {
                editSettings.effectSettingsArray[j] = effectSettings_clip1.get(i);
                i++;
                j++;
            }
        }

        editSettings.clipSettingsArray = new ClipSettings[2];
        editSettings.clipSettingsArray[0] = clipSettings1;
        editSettings.clipSettingsArray[1] = clipSettings2;
        editSettings.backgroundMusicSettings = null;
        editSettings.transitionSettingsArray = new TransitionSettings[1];
        editSettings.transitionSettingsArray[0] = transitionSetting;
        output = mNativeHelper.generateTransitionClip(editSettings, mUniqueId,
                                                      m1, m2,this);
        setFilename(output);
!!!6920588.java!!!	setFilename(in filename : String) : void
        mFilename = filename;
!!!6920716.java!!!	getFilename() : String
        return mFilename;
!!!6920844.java!!!	invalidate() : void
        if (mFilename != null) {
            new File(mFilename).delete();
            mFilename = null;
        }
!!!6920972.java!!!	isGenerated() : boolean
        return (mFilename != null);
!!!6921100.java!!!	equals(inout object : Object) : boolean
        if (!(object instanceof Transition)) {
            return false;
        }
        return mUniqueId.equals(((Transition)object).mUniqueId);
!!!6921228.java!!!	hashCode() : int
        return mUniqueId.hashCode();
