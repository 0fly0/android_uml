class AccessibilityNodeInfo
!!!4710412.java!!!	getAccessibilityViewId(in accessibilityNodeId : long) : int
        return (int) accessibilityNodeId;
!!!4710540.java!!!	getVirtualDescendantId(in accessibilityNodeId : long) : int
        return (int) ((accessibilityNodeId & VIRTUAL_DESCENDANT_ID_MASK)
                >> VIRTUAL_DESCENDANT_ID_SHIFT);
!!!4710668.java!!!	makeNodeId(in accessibilityViewId : int, in virtualDescendantId : int) : long
        return (((long) virtualDescendantId) << VIRTUAL_DESCENDANT_ID_SHIFT) | accessibilityViewId;
!!!4710796.java!!!	AccessibilityNodeInfo()
        /* do nothing */
!!!4710924.java!!!	setSource(inout source : View) : void
        setSource(source, UNDEFINED);
!!!4711052.java!!!	setSource(inout root : View, in virtualDescendantId : int) : void
        enforceNotSealed();
        mWindowId = (root != null) ? root.getAccessibilityWindowId() : UNDEFINED;
        final int rootAccessibilityViewId =
            (root != null) ? root.getAccessibilityViewId() : UNDEFINED;
        mSourceNodeId = makeNodeId(rootAccessibilityViewId, virtualDescendantId);
!!!4711180.java!!!	findFocus(in focus : int) : AccessibilityNodeInfo
        enforceSealed();
        enforceValidFocusType(focus);
        if (!canPerformRequestOverConnection(mSourceNodeId)) {
            return null;
        }
        return AccessibilityInteractionClient.getInstance().findFocus(mConnectionId, mWindowId,
                mSourceNodeId, focus);
!!!4711308.java!!!	focusSearch(in direction : int) : AccessibilityNodeInfo
        enforceSealed();
        enforceValidFocusDirection(direction);
        if (!canPerformRequestOverConnection(mSourceNodeId)) {
            return null;
        }
        return AccessibilityInteractionClient.getInstance().focusSearch(mConnectionId, mWindowId,
                mSourceNodeId, direction);
!!!4711436.java!!!	getWindowId() : int
        return mWindowId;
!!!4711564.java!!!	getChildNodeIds() : SparseLongArray
        return mChildNodeIds;
!!!4711692.java!!!	getChildCount() : int
        return mChildNodeIds.size();
!!!4711820.java!!!	getChild(in index : int) : AccessibilityNodeInfo
        enforceSealed();
        if (!canPerformRequestOverConnection(mSourceNodeId)) {
            return null;
        }
        final long childId = mChildNodeIds.get(index);
        AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
        return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId, mWindowId,
                childId, FLAG_PREFETCH_DESCENDANTS);
!!!4711948.java!!!	addChild(inout child : View) : void
        addChild(child, UNDEFINED);
!!!4712076.java!!!	addChild(inout root : View, in virtualDescendantId : int) : void
        enforceNotSealed();
        final int index = mChildNodeIds.size();
        final int rootAccessibilityViewId =
            (root != null) ? root.getAccessibilityViewId() : UNDEFINED;
        final long childNodeId = makeNodeId(rootAccessibilityViewId, virtualDescendantId);
        mChildNodeIds.put(index, childNodeId);
!!!4712204.java!!!	getActions() : int
        return mActions;
!!!4712332.java!!!	addAction(in action : int) : void
        enforceNotSealed();
        mActions |= action;
!!!4712460.java!!!	setMovementGranularities(in granularities : int) : void
        enforceNotSealed();
        mMovementGranularities = granularities;
!!!4712588.java!!!	getMovementGranularities() : int
        return mMovementGranularities;
!!!4712716.java!!!	performAction(in action : int) : boolean
        enforceSealed();
        if (!canPerformRequestOverConnection(mSourceNodeId)) {
            return false;
        }
        AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
        return client.performAccessibilityAction(mConnectionId, mWindowId, mSourceNodeId,
                action, null);
!!!4712844.java!!!	performAction(in action : int, inout arguments : Bundle) : boolean
        enforceSealed();
        if (!canPerformRequestOverConnection(mSourceNodeId)) {
            return false;
        }
        AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
        return client.performAccessibilityAction(mConnectionId, mWindowId, mSourceNodeId,
                action, arguments);
!!!4712972.java!!!	findAccessibilityNodeInfosByText(in text : String) : AccessibilityNodeInfo
        enforceSealed();
        if (!canPerformRequestOverConnection(mSourceNodeId)) {
            return Collections.emptyList();
        }
        AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
        return client.findAccessibilityNodeInfosByText(mConnectionId, mWindowId, mSourceNodeId,
                text);
!!!4713100.java!!!	getParent() : AccessibilityNodeInfo
        enforceSealed();
        if (!canPerformRequestOverConnection(mParentNodeId)) {
            return null;
        }
        AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
        return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId,
                mWindowId, mParentNodeId, FLAG_PREFETCH_DESCENDANTS | FLAG_PREFETCH_SIBLINGS);
!!!4713228.java!!!	getParentNodeId() : long
        return mParentNodeId;
!!!4713356.java!!!	setParent(inout parent : View) : void
        setParent(parent, UNDEFINED);
!!!4713484.java!!!	setParent(inout root : View, in virtualDescendantId : int) : void
        enforceNotSealed();
        final int rootAccessibilityViewId =
            (root != null) ? root.getAccessibilityViewId() : UNDEFINED;
        mParentNodeId = makeNodeId(rootAccessibilityViewId, virtualDescendantId);
!!!4713612.java!!!	getBoundsInParent(inout outBounds : Rect) : void
        outBounds.set(mBoundsInParent.left, mBoundsInParent.top,
                mBoundsInParent.right, mBoundsInParent.bottom);
!!!4713740.java!!!	setBoundsInParent(inout bounds : Rect) : void
        enforceNotSealed();
        mBoundsInParent.set(bounds.left, bounds.top, bounds.right, bounds.bottom);
!!!4713868.java!!!	getBoundsInScreen(inout outBounds : Rect) : void
        outBounds.set(mBoundsInScreen.left, mBoundsInScreen.top,
                mBoundsInScreen.right, mBoundsInScreen.bottom);
!!!4713996.java!!!	setBoundsInScreen(inout bounds : Rect) : void
        enforceNotSealed();
        mBoundsInScreen.set(bounds.left, bounds.top, bounds.right, bounds.bottom);
!!!4714124.java!!!	isCheckable() : boolean
        return getBooleanProperty(PROPERTY_CHECKABLE);
!!!4714252.java!!!	setCheckable(inout checkable : boolean) : void
        setBooleanProperty(PROPERTY_CHECKABLE, checkable);
!!!4714380.java!!!	isChecked() : boolean
        return getBooleanProperty(PROPERTY_CHECKED);
!!!4714508.java!!!	setChecked(inout checked : boolean) : void
        setBooleanProperty(PROPERTY_CHECKED, checked);
!!!4714636.java!!!	isFocusable() : boolean
        return getBooleanProperty(PROPERTY_FOCUSABLE);
!!!4714764.java!!!	setFocusable(inout focusable : boolean) : void
        setBooleanProperty(PROPERTY_FOCUSABLE, focusable);
!!!4714892.java!!!	isFocused() : boolean
        return getBooleanProperty(PROPERTY_FOCUSED);
!!!4715020.java!!!	setFocused(inout focused : boolean) : void
        setBooleanProperty(PROPERTY_FOCUSED, focused);
!!!4715148.java!!!	isVisibleToUser() : boolean
        return getBooleanProperty(PROPERTY_VISIBLE_TO_USER);
!!!4715276.java!!!	setVisibleToUser(inout visibleToUser : boolean) : void
        setBooleanProperty(PROPERTY_VISIBLE_TO_USER, visibleToUser);
!!!4715404.java!!!	isAccessibilityFocused() : boolean
        return getBooleanProperty(PROPERTY_ACCESSIBILITY_FOCUSED);
!!!4715532.java!!!	setAccessibilityFocused(inout focused : boolean) : void
        setBooleanProperty(PROPERTY_ACCESSIBILITY_FOCUSED, focused);
!!!4715660.java!!!	isSelected() : boolean
        return getBooleanProperty(PROPERTY_SELECTED);
!!!4715788.java!!!	setSelected(inout selected : boolean) : void
        setBooleanProperty(PROPERTY_SELECTED, selected);
!!!4715916.java!!!	isClickable() : boolean
        return getBooleanProperty(PROPERTY_CLICKABLE);
!!!4716044.java!!!	setClickable(inout clickable : boolean) : void
        setBooleanProperty(PROPERTY_CLICKABLE, clickable);
!!!4716172.java!!!	isLongClickable() : boolean
        return getBooleanProperty(PROPERTY_LONG_CLICKABLE);
!!!4716300.java!!!	setLongClickable(inout longClickable : boolean) : void
        setBooleanProperty(PROPERTY_LONG_CLICKABLE, longClickable);
!!!4716428.java!!!	isEnabled() : boolean
        return getBooleanProperty(PROPERTY_ENABLED);
!!!4716556.java!!!	setEnabled(inout enabled : boolean) : void
        setBooleanProperty(PROPERTY_ENABLED, enabled);
!!!4716684.java!!!	isPassword() : boolean
        return getBooleanProperty(PROPERTY_PASSWORD);
!!!4716812.java!!!	setPassword(inout password : boolean) : void
        setBooleanProperty(PROPERTY_PASSWORD, password);
!!!4716940.java!!!	isScrollable() : boolean
        return getBooleanProperty(PROPERTY_SCROLLABLE);
!!!4717068.java!!!	setScrollable(inout scrollable : boolean) : void
        enforceNotSealed();
        setBooleanProperty(PROPERTY_SCROLLABLE, scrollable);
!!!4717196.java!!!	getPackageName() : CharSequence
        return mPackageName;
!!!4717324.java!!!	setPackageName(inout packageName : CharSequence) : void
        enforceNotSealed();
        mPackageName = packageName;
!!!4717452.java!!!	getClassName() : CharSequence
        return mClassName;
!!!4717580.java!!!	setClassName(inout className : CharSequence) : void
        enforceNotSealed();
        mClassName = className;
!!!4717708.java!!!	getText() : CharSequence
        return mText;
!!!4717836.java!!!	setText(inout text : CharSequence) : void
        enforceNotSealed();
        mText = text;
!!!4717964.java!!!	getContentDescription() : CharSequence
        return mContentDescription;
!!!4718092.java!!!	setContentDescription(inout contentDescription : CharSequence) : void
        enforceNotSealed();
        mContentDescription = contentDescription;
!!!4718220.java!!!	setLabelFor(inout labeled : View) : void
        setLabelFor(labeled, UNDEFINED);
!!!4718348.java!!!	setLabelFor(inout root : View, in virtualDescendantId : int) : void
        enforceNotSealed();
        final int rootAccessibilityViewId = (root != null)
                ? root.getAccessibilityViewId() : UNDEFINED;
        mLabelForId = makeNodeId(rootAccessibilityViewId, virtualDescendantId);
!!!4718476.java!!!	getLabelFor() : AccessibilityNodeInfo
        enforceSealed();
        if (!canPerformRequestOverConnection(mLabelForId)) {
            return null;
        }
        AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
        return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId,
                mWindowId, mLabelForId, FLAG_PREFETCH_DESCENDANTS | FLAG_PREFETCH_SIBLINGS);
!!!4718604.java!!!	setLabeledBy(inout label : View) : void
        setLabeledBy(label, UNDEFINED);
!!!4718732.java!!!	setLabeledBy(inout root : View, in virtualDescendantId : int) : void
        enforceNotSealed();
        final int rootAccessibilityViewId = (root != null)
                ? root.getAccessibilityViewId() : UNDEFINED;
        mLabeledById = makeNodeId(rootAccessibilityViewId, virtualDescendantId);
!!!4718860.java!!!	getLabeledBy() : AccessibilityNodeInfo
        enforceSealed();
        if (!canPerformRequestOverConnection(mLabeledById)) {
            return null;
        }
        AccessibilityInteractionClient client = AccessibilityInteractionClient.getInstance();
        return client.findAccessibilityNodeInfoByAccessibilityId(mConnectionId,
                mWindowId, mLabeledById, FLAG_PREFETCH_DESCENDANTS | FLAG_PREFETCH_SIBLINGS);
!!!4718988.java!!!	getBooleanProperty(in property : int) : boolean
        return (mBooleanProperties & property) != 0;
!!!4719116.java!!!	setBooleanProperty(in property : int, inout value : boolean) : void
        enforceNotSealed();
        if (value) {
            mBooleanProperties |= property;
        } else {
            mBooleanProperties &= ~property;
        }
!!!4719244.java!!!	setConnectionId(in connectionId : int) : void
        enforceNotSealed();
        mConnectionId = connectionId;
!!!4719372.java!!!	describeContents() : int
        return 0;
!!!4719500.java!!!	getSourceNodeId() : long
        return mSourceNodeId;
!!!4719628.java!!!	setSealed(inout sealed : boolean) : void
        mSealed = sealed;
!!!4719756.java!!!	isSealed() : boolean
        return mSealed;
!!!4719884.java!!!	enforceSealed() : void
        if (!isSealed()) {
            throw new IllegalStateException("Cannot perform this "
                    + "action on a not sealed instance.");
        }
!!!4720012.java!!!	enforceValidFocusDirection(in direction : int) : void
        switch (direction) {
            case View.FOCUS_DOWN:
            case View.FOCUS_UP:
            case View.FOCUS_LEFT:
            case View.FOCUS_RIGHT:
            case View.FOCUS_FORWARD:
            case View.FOCUS_BACKWARD:
                return;
            default:
                throw new IllegalArgumentException("Unknown direction: " + direction);
        }
!!!4720140.java!!!	enforceValidFocusType(in focusType : int) : void
        switch (focusType) {
            case FOCUS_INPUT:
            case FOCUS_ACCESSIBILITY:
                return;
            default:
                throw new IllegalArgumentException("Unknown focus type: " + focusType);
        }
!!!4720268.java!!!	enforceNotSealed() : void
        if (isSealed()) {
            throw new IllegalStateException("Cannot perform this "
                    + "action on a sealed instance.");
        }
!!!4720396.java!!!	obtain(inout source : View) : AccessibilityNodeInfo
        AccessibilityNodeInfo info = AccessibilityNodeInfo.obtain();
        info.setSource(source);
        return info;
!!!4720524.java!!!	obtain(inout root : View, in virtualDescendantId : int) : AccessibilityNodeInfo
        AccessibilityNodeInfo info = AccessibilityNodeInfo.obtain();
        info.setSource(root, virtualDescendantId);
        return info;
!!!4720652.java!!!	obtain() : AccessibilityNodeInfo
        synchronized (sPoolLock) {
            if (sPool != null) {
                AccessibilityNodeInfo info = sPool;
                sPool = sPool.mNext;
                sPoolSize--;
                info.mNext = null;
                info.mIsInPool = false;
                return info;
            }
            return new AccessibilityNodeInfo();
        }
!!!4720780.java!!!	obtain(inout info : AccessibilityNodeInfo) : AccessibilityNodeInfo
        AccessibilityNodeInfo infoClone = AccessibilityNodeInfo.obtain();
        infoClone.init(info);
        return infoClone;
!!!4720908.java!!!	recycle() : void
        if (mIsInPool) {
            throw new IllegalStateException("Info already recycled!");
        }
        clear();
        synchronized (sPoolLock) {
            if (sPoolSize <= MAX_POOL_SIZE) {
                mNext = sPool;
                sPool = this;
                mIsInPool = true;
                sPoolSize++;
            }
        }
!!!4721036.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        parcel.writeInt(isSealed() ? 1 : 0);
        parcel.writeLong(mSourceNodeId);
        parcel.writeInt(mWindowId);
        parcel.writeLong(mParentNodeId);
        parcel.writeLong(mLabelForId);
        parcel.writeLong(mLabeledById);
        parcel.writeInt(mConnectionId);

        SparseLongArray childIds = mChildNodeIds;
        final int childIdsSize = childIds.size();
        parcel.writeInt(childIdsSize);
        for (int i = 0; i < childIdsSize; i++) {
            parcel.writeLong(childIds.valueAt(i));
        }

        parcel.writeInt(mBoundsInParent.top);
        parcel.writeInt(mBoundsInParent.bottom);
        parcel.writeInt(mBoundsInParent.left);
        parcel.writeInt(mBoundsInParent.right);

        parcel.writeInt(mBoundsInScreen.top);
        parcel.writeInt(mBoundsInScreen.bottom);
        parcel.writeInt(mBoundsInScreen.left);
        parcel.writeInt(mBoundsInScreen.right);

        parcel.writeInt(mActions);

        parcel.writeInt(mMovementGranularities);

        parcel.writeInt(mBooleanProperties);

        parcel.writeCharSequence(mPackageName);
        parcel.writeCharSequence(mClassName);
        parcel.writeCharSequence(mText);
        parcel.writeCharSequence(mContentDescription);

        // Since instances of this class are fetched via synchronous i.e. blocking
        // calls in IPCs we always recycle as soon as the instance is marshaled.
        recycle();
!!!4721164.java!!!	init(inout other : AccessibilityNodeInfo) : void
        mSealed = other.mSealed;
        mSourceNodeId = other.mSourceNodeId;
        mParentNodeId = other.mParentNodeId;
        mLabelForId = other.mLabelForId;
        mLabeledById = other.mLabeledById;
        mWindowId = other.mWindowId;
        mConnectionId = other.mConnectionId;
        mBoundsInParent.set(other.mBoundsInParent);
        mBoundsInScreen.set(other.mBoundsInScreen);
        mPackageName = other.mPackageName;
        mClassName = other.mClassName;
        mText = other.mText;
        mContentDescription = other.mContentDescription;
        mActions= other.mActions;
        mBooleanProperties = other.mBooleanProperties;
        mMovementGranularities = other.mMovementGranularities;
        final int otherChildIdCount = other.mChildNodeIds.size();
        for (int i = 0; i < otherChildIdCount; i++) {
            mChildNodeIds.put(i, other.mChildNodeIds.valueAt(i));    
        }
!!!4721292.java!!!	initFromParcel(inout parcel : Parcel) : void
        mSealed = (parcel.readInt()  == 1);
        mSourceNodeId = parcel.readLong();
        mWindowId = parcel.readInt();
        mParentNodeId = parcel.readLong();
        mLabelForId = parcel.readLong();
        mLabeledById = parcel.readLong();
        mConnectionId = parcel.readInt();

        SparseLongArray childIds = mChildNodeIds;
        final int childrenSize = parcel.readInt();
        for (int i = 0; i < childrenSize; i++) {
            final long childId = parcel.readLong();
            childIds.put(i, childId);
        }

        mBoundsInParent.top = parcel.readInt();
        mBoundsInParent.bottom = parcel.readInt();
        mBoundsInParent.left = parcel.readInt();
        mBoundsInParent.right = parcel.readInt();

        mBoundsInScreen.top = parcel.readInt();
        mBoundsInScreen.bottom = parcel.readInt();
        mBoundsInScreen.left = parcel.readInt();
        mBoundsInScreen.right = parcel.readInt();

        mActions = parcel.readInt();

        mMovementGranularities = parcel.readInt();

        mBooleanProperties = parcel.readInt();

        mPackageName = parcel.readCharSequence();
        mClassName = parcel.readCharSequence();
        mText = parcel.readCharSequence();
        mContentDescription = parcel.readCharSequence();
!!!4721420.java!!!	clear() : void
        mSealed = false;
        mSourceNodeId = ROOT_NODE_ID;
        mParentNodeId = ROOT_NODE_ID;
        mLabelForId = ROOT_NODE_ID;
        mLabeledById = ROOT_NODE_ID;
        mWindowId = UNDEFINED;
        mConnectionId = UNDEFINED;
        mMovementGranularities = 0;
        mChildNodeIds.clear();
        mBoundsInParent.set(0, 0, 0, 0);
        mBoundsInScreen.set(0, 0, 0, 0);
        mBooleanProperties = 0;
        mPackageName = null;
        mClassName = null;
        mText = null;
        mContentDescription = null;
        mActions = 0;
!!!4721548.java!!!	getActionSymbolicName(in action : int) : String
        switch (action) {
            case ACTION_FOCUS:
                return "ACTION_FOCUS";
            case ACTION_CLEAR_FOCUS:
                return "ACTION_CLEAR_FOCUS";
            case ACTION_SELECT:
                return "ACTION_SELECT";
            case ACTION_CLEAR_SELECTION:
                return "ACTION_CLEAR_SELECTION";
            case ACTION_CLICK:
                return "ACTION_CLICK";
            case ACTION_LONG_CLICK:
                return "ACTION_LONG_CLICK";
            case ACTION_ACCESSIBILITY_FOCUS:
                return "ACTION_ACCESSIBILITY_FOCUS";
            case ACTION_CLEAR_ACCESSIBILITY_FOCUS:
                return "ACTION_CLEAR_ACCESSIBILITY_FOCUS";
            case ACTION_NEXT_AT_MOVEMENT_GRANULARITY:
                return "ACTION_NEXT_AT_MOVEMENT_GRANULARITY";
            case ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY:
                return "ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY";
            case ACTION_NEXT_HTML_ELEMENT:
                return "ACTION_NEXT_HTML_ELEMENT";
            case ACTION_PREVIOUS_HTML_ELEMENT:
                return "ACTION_PREVIOUS_HTML_ELEMENT";
            case ACTION_SCROLL_FORWARD:
                return "ACTION_SCROLL_FORWARD";
            case ACTION_SCROLL_BACKWARD:
                return "ACTION_SCROLL_BACKWARD";
            default:
                throw new IllegalArgumentException("Unknown action: " + action);
        }
!!!4721676.java!!!	getMovementGranularitySymbolicName(in granularity : int) : String
        switch (granularity) {
            case MOVEMENT_GRANULARITY_CHARACTER:
                return "MOVEMENT_GRANULARITY_CHARACTER";
            case MOVEMENT_GRANULARITY_WORD:
                return "MOVEMENT_GRANULARITY_WORD";
            case MOVEMENT_GRANULARITY_LINE:
                return "MOVEMENT_GRANULARITY_LINE";
            case MOVEMENT_GRANULARITY_PARAGRAPH:
                return "MOVEMENT_GRANULARITY_PARAGRAPH";
            case MOVEMENT_GRANULARITY_PAGE:
                return "MOVEMENT_GRANULARITY_PAGE";
            default:
                throw new IllegalArgumentException("Unknown movement granularity: " + granularity);
        }
!!!4721804.java!!!	canPerformRequestOverConnection(in accessibilityNodeId : long) : boolean
        return (mWindowId != UNDEFINED
                && getAccessibilityViewId(accessibilityNodeId) != UNDEFINED
                && mConnectionId != UNDEFINED);
!!!4721932.java!!!	equals(inout object : Object) : boolean
        if (this == object) {
            return true;
        }
        if (object == null) {
            return false;
        }
        if (getClass() != object.getClass()) {
            return false;
        }
        AccessibilityNodeInfo other = (AccessibilityNodeInfo) object;
        if (mSourceNodeId != other.mSourceNodeId) {
            return false;
        }
        if (mWindowId != other.mWindowId) {
            return false;
        }
        return true;
!!!4722060.java!!!	hashCode() : int
        final int prime = 31;
        int result = 1;
        result = prime * result + getAccessibilityViewId(mSourceNodeId);
        result = prime * result + getVirtualDescendantId(mSourceNodeId);
        result = prime * result + mWindowId;
        return result;
!!!4722188.java!!!	toString() : String
        StringBuilder builder = new StringBuilder();
        builder.append(super.toString());

        if (DEBUG) {
            builder.append("; accessibilityViewId: " + getAccessibilityViewId(mSourceNodeId));
            builder.append("; virtualDescendantId: " + getVirtualDescendantId(mSourceNodeId));
            builder.append("; mParentNodeId: " + mParentNodeId);

            int granularities = mMovementGranularities;
            builder.append("; MovementGranularities: [");
            while (granularities != 0) {
                final int granularity = 1 << Integer.numberOfTrailingZeros(granularities);
                granularities &= ~granularity;
                builder.append(getMovementGranularitySymbolicName(granularity));
                if (granularities != 0) {
                    builder.append(", ");
                }
            }
            builder.append("]");

            SparseLongArray childIds = mChildNodeIds;
            builder.append("; childAccessibilityIds: [");
            for (int i = 0, count = childIds.size(); i < count; i++) {
                builder.append(childIds.valueAt(i));
                if (i < count - 1) {
                    builder.append(", ");
                }
            }
            builder.append("]");
        }

        builder.append("; boundsInParent: " + mBoundsInParent);
        builder.append("; boundsInScreen: " + mBoundsInScreen);

        builder.append("; packageName: ").append(mPackageName);
        builder.append("; className: ").append(mClassName);
        builder.append("; text: ").append(mText);
        builder.append("; contentDescription: ").append(mContentDescription);

        builder.append("; checkable: ").append(isCheckable());
        builder.append("; checked: ").append(isChecked());
        builder.append("; focusable: ").append(isFocusable());
        builder.append("; focused: ").append(isFocused());
        builder.append("; selected: ").append(isSelected());
        builder.append("; clickable: ").append(isClickable());
        builder.append("; longClickable: ").append(isLongClickable());
        builder.append("; enabled: ").append(isEnabled());
        builder.append("; password: ").append(isPassword());
        builder.append("; scrollable: " + isScrollable());

        builder.append("; [");
        for (int actionBits = mActions; actionBits != 0;) {
            final int action = 1 << Integer.numberOfTrailingZeros(actionBits);
            actionBits &= ~action;
            builder.append(getActionSymbolicName(action));
            if (actionBits != 0) {
                builder.append(", ");
            }
        }
        builder.append("]");

        return builder.toString();
