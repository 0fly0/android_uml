class MemoryHeapBase
!!!1462540.cpp!!!	MemoryHeapBase(in fd : int, in size : size_t, in flags : uint32_t = 0, in offset : uint32_t = 0)
    const size_t pagesize = getpagesize();
    size = ((size + pagesize-1) & ~(pagesize-1));
    mapfd(dup(fd), size, offset);
!!!1462668.cpp!!!	MemoryHeapBase(in device : char, in size : size_t = 0, in flags : uint32_t = 0)
    int open_flags = O_RDWR;
    if (flags & NO_CACHING)
        open_flags |= O_SYNC;

    int fd = open(device, open_flags);
    ALOGE_IF(fd<0, "error opening %s: %s", device, strerror(errno));
    if (fd >= 0) {
        const size_t pagesize = getpagesize();
        size = ((size + pagesize-1) & ~(pagesize-1));
        if (mapfd(fd, size) == NO_ERROR) {
            mDevice = device;
        }
    }
!!!1462796.cpp!!!	MemoryHeapBase(in size : size_t, in flags : uint32_t = 0, in name : char = NULL)
    const size_t pagesize = getpagesize();
    size = ((size + pagesize-1) & ~(pagesize-1));
    int fd = ashmem_create_region(name == NULL ? "MemoryHeapBase" : name, size);
    ALOGE_IF(fd<0, "error creating ashmem region: %s", strerror(errno));
    if (fd >= 0) {
        if (mapfd(fd, size) == NO_ERROR) {
            if (flags & READ_ONLY) {
                ashmem_set_prot_region(fd, PROT_READ);
            }
        }
    }
!!!1462924.cpp!!!	~MemoryHeapBase()
    dispose();
!!!1463052.cpp!!!	getHeapID() : int
    return mFD;
!!!1463180.cpp!!!	getBase() : void
    return mBase;
!!!1463308.cpp!!!	getSize() : size_t
    return mSize;
!!!1463436.cpp!!!	getFlags() : uint32_t
    return mFlags;
!!!1463564.cpp!!!	getOffset() : uint32_t
    return mOffset;
!!!1463692.cpp!!!	getDevice() : char
    return mDevice;
!!!1463820.cpp!!!	dispose() : void
    int fd = android_atomic_or(-1, &mFD);
    if (fd >= 0) {
        if (mNeedUnmap) {
            //ALOGD("munmap(fd=%d, base=%p, size=%lu)", fd, mBase, mSize);
            munmap(mBase, mSize);
        }
        mBase = 0;
        mSize = 0;
        close(fd);
    }
!!!1464204.cpp!!!	init(in fd : int, inout base : void, in size : int, in flags : int = 0, in device : char = NULL) : status_t
    if (mFD != -1) {
        return INVALID_OPERATION;
    }
    mFD = fd;
    mBase = base;
    mSize = size;
    mFlags = flags;
    mDevice = device;
    return NO_ERROR;
!!!1464332.cpp!!!	mapfd(in fd : int, in size : size_t, in offset : uint32_t = 0) : status_t
    if (size == 0) {
        // try to figure out the size automatically
#ifdef HAVE_ANDROID_OS
        // first try the PMEM ioctl
        pmem_region reg;
        int err = ioctl(fd, PMEM_GET_TOTAL_SIZE, &reg);
        if (err == 0)
            size = reg.len;
#endif
        if (size == 0) { // try fstat
            struct stat sb;
            if (fstat(fd, &sb) == 0)
                size = sb.st_size;
        }
        // if it didn't work, let mmap() fail.
    }

    if ((mFlags & DONT_MAP_LOCALLY) == 0) {
        void* base = (uint8_t*)mmap(0, size,
                PROT_READ|PROT_WRITE, MAP_SHARED, fd, offset);
        if (base == MAP_FAILED) {
            ALOGE("mmap(fd=%d, size=%u) failed (%s)",
                    fd, uint32_t(size), strerror(errno));
            close(fd);
            return -errno;
        }
        //ALOGD("mmap(fd=%d, base=%p, size=%lu)", fd, base, size);
        mBase = base;
        mNeedUnmap = true;
    } else  {
        mBase = 0; // not MAP_FAILED
        mNeedUnmap = false;
    }
    mFD = fd;
    mSize = size;
    mOffset = offset;
    return NO_ERROR;
