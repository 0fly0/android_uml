class AttributeTypeAndValue
!!!2210075.java!!!	AttributeTypeAndValue(inout oid : int, inout value : AttributeValue)
        ObjectIdentifier thisOid = getOID(oid);
        if (thisOid == null) {
            thisOid = new ObjectIdentifier(oid);
        }
        this.oid = thisOid;
        this.value = value;
!!!2210203.java!!!	AttributeTypeAndValue(inout sOid : String, inout value : AttributeValue)
        if (sOid.charAt(0) >= '0' && sOid.charAt(0) <= '9') {
            int[] array = org.apache.harmony.security.asn1.ObjectIdentifier.toIntArray(sOid);
            ObjectIdentifier thisOid = getOID(array);
            if (thisOid == null) {
                thisOid = new ObjectIdentifier(array);
            }
            this.oid = thisOid;

        } else {
            this.oid = KNOWN_NAMES.get(sOid.toUpperCase(Locale.US));
            if (this.oid == null) {
                throw new IOException("Unrecognizable attribute name: " + sOid);
            }
        }
        this.value = value;
!!!2210331.java!!!	appendName(inout attrFormat : String, inout sb : StringBuilder) : void
        boolean hexFormat = false;
        if (X500Principal.RFC1779.equals(attrFormat)) {
            if (RFC1779_NAMES == oid.getGroup()) {
                sb.append(oid.getName());
            } else {
                sb.append(oid.toOIDString());
            }

            sb.append('=');
            if (value.escapedString == value.getHexString()) {
                sb.append(value.getHexString().toUpperCase(Locale.US));
            } else if (value.escapedString.length() != value.rawString.length()) {
                // was escaped
                value.appendQEString(sb);
            } else {
                sb.append(value.escapedString);
            }
        } else {
            Object group = oid.getGroup();
            // RFC2253 includes names from RFC1779
            if (RFC1779_NAMES == group || RFC2253_NAMES == group) {
                sb.append(oid.getName());

                if (X500Principal.CANONICAL.equals(attrFormat)) {
                    // only PrintableString and UTF8String in string format
                    // all others are output in hex format
                    // no hex for teletex; see http://b/2102191
                    int tag = value.getTag();
                    if (!ASN1StringType.UTF8STRING.checkTag(tag)
                            && !ASN1StringType.PRINTABLESTRING.checkTag(tag)
                            && !ASN1StringType.TELETEXSTRING.checkTag(tag)) {
                        hexFormat = true;
                    }
                }

            } else {
                sb.append(oid.toString());
                hexFormat = true;
            }

            sb.append('=');

            if (hexFormat) {
                sb.append(value.getHexString());
            } else {
                if (X500Principal.CANONICAL.equals(attrFormat)) {
                    sb.append(value.makeCanonical());
                } else {
                    sb.append(value.escapedString);
                }
            }
        }
!!!2210459.java!!!	getType() : ObjectIdentifier
        return oid;
!!!2210587.java!!!	getOID(inout oid : int) : ObjectIdentifier
        int index = hashIntArray(oid) % CAPACITY;

        // look for OID in the pool
        ObjectIdentifier[] list = KNOWN_OIDS[index];
        for (int i = 0; list[i] != null; i++) {
            if (Arrays.equals(oid, list[i].getOid())) {
                return list[i];
            }
        }
        return null;
!!!2210715.java!!!	addOID(inout oid : ObjectIdentifier) : void
        int[] newOid = oid.getOid();
        int index = hashIntArray(newOid) % CAPACITY;

        // look for OID in the pool
        ObjectIdentifier[] list = KNOWN_OIDS[index];
        int i = 0;
        for (; list[i] != null; i++) {
            // check wrong static initialization: no duplicate OIDs
            if (Arrays.equals(newOid, list[i].getOid())) {
                throw new Error("ObjectIdentifier: invalid static initialization; " +
                        "duplicate OIDs: " + oid.getName() + " " + list[i].getName());
            }
        }

        // check : to avoid NPE
        if (i == (CAPACITY - 1)) {
            throw new Error("ObjectIdentifier: invalid static initialization; " +
                    "small OID pool capacity");
        }
        list[i] = oid;
!!!2210843.java!!!	hashIntArray(inout oid : int) : int
        int intHash = 0;
        for (int i = 0; i < oid.length && i < 4; i++) {
            intHash += oid[i] << (8 * i); //TODO what about to find better one?
        }
        return intHash & 0x7FFFFFFF; // only positive
