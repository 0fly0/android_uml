class OpenSSLX509Certificate
!!!2467739.java!!!	OpenSSLX509Certificate(in ctx : long)
        mContext = ctx;
!!!2467867.java!!!	fromX509DerInputStream(inout is : InputStream) : OpenSSLX509Certificate
        final OpenSSLBIOInputStream bis = new OpenSSLBIOInputStream(is);

        try {
            final long certCtx = NativeCrypto.d2i_X509_bio(bis.getBioContext());
            if (certCtx == 0) {
                return null;
            }
            return new OpenSSLX509Certificate(certCtx);
        } catch (Exception e) {
            throw new ParsingException(e);
        } finally {
            NativeCrypto.BIO_free(bis.getBioContext());
        }
!!!2467995.java!!!	fromX509Der(inout encoded : byte) : OpenSSLX509Certificate
        final long certCtx = NativeCrypto.d2i_X509(encoded);
        if (certCtx == 0) {
            return null;
        }
        return new OpenSSLX509Certificate(certCtx);
!!!2468123.java!!!	fromPkcs7DerInputStream(inout is : InputStream) : List
        OpenSSLBIOInputStream bis = new OpenSSLBIOInputStream(is);

        final long[] certRefs;
        try {
            certRefs = NativeCrypto.d2i_PKCS7_bio(bis.getBioContext(), NativeCrypto.PKCS7_CERTS);
        } catch (Exception e) {
            throw new ParsingException(e);
        } finally {
            NativeCrypto.BIO_free(bis.getBioContext());
        }

        if (certRefs == null) {
            return Collections.emptyList();
        }

        final List<OpenSSLX509Certificate> certs = new ArrayList<OpenSSLX509Certificate>(
                certRefs.length);
        for (int i = 0; i < certRefs.length; i++) {
            if (certRefs[i] == 0) {
                continue;
            }
            certs.add(new OpenSSLX509Certificate(certRefs[i]));
        }
        return certs;
!!!2468251.java!!!	fromX509PemInputStream(inout is : InputStream) : OpenSSLX509Certificate
        final OpenSSLBIOInputStream bis = new OpenSSLBIOInputStream(is);

        try {
            final long certCtx = NativeCrypto.PEM_read_bio_X509(bis.getBioContext());
            if (certCtx == 0L) {
                return null;
            }
            return new OpenSSLX509Certificate(certCtx);
        } catch (Exception e) {
            throw new ParsingException(e);
        } finally {
            NativeCrypto.BIO_free(bis.getBioContext());
        }
!!!2468379.java!!!	fromPkcs7PemInputStream(inout is : InputStream) : List
        OpenSSLBIOInputStream bis = new OpenSSLBIOInputStream(is);

        final long[] certRefs;
        try {
            certRefs = NativeCrypto.PEM_read_bio_PKCS7(bis.getBioContext(),
                    NativeCrypto.PKCS7_CERTS);
        } catch (Exception e) {
            throw new ParsingException(e);
        } finally {
            NativeCrypto.BIO_free(bis.getBioContext());
        }

        final List<OpenSSLX509Certificate> certs = new ArrayList<OpenSSLX509Certificate>(
                certRefs.length);
        for (int i = 0; i < certRefs.length; i++) {
            if (certRefs[i] == 0) {
                continue;
            }
            certs.add(new OpenSSLX509Certificate(certRefs[i]));
        }
        return certs;
!!!2468507.java!!!	getCriticalExtensionOIDs() : Set
        String[] critOids =
                NativeCrypto.get_X509_ext_oids(mContext, NativeCrypto.EXTENSION_TYPE_CRITICAL);

        /*
         * This API has a special case that if there are no extensions, we
         * should return null. So if we have no critical extensions, we'll check
         * non-critical extensions.
         */
        if ((critOids.length == 0)
                && (NativeCrypto.get_X509_ext_oids(mContext,
                        NativeCrypto.EXTENSION_TYPE_NON_CRITICAL).length == 0)) {
            return null;
        }

        return new HashSet<String>(Arrays.asList(critOids));
!!!2468635.java!!!	getExtensionValue(inout oid : String) : byte
        return NativeCrypto.X509_get_ext_oid(mContext, oid);
!!!2468763.java!!!	getNonCriticalExtensionOIDs() : Set
        String[] nonCritOids =
                NativeCrypto.get_X509_ext_oids(mContext, NativeCrypto.EXTENSION_TYPE_NON_CRITICAL);

        /*
         * This API has a special case that if there are no extensions, we
         * should return null. So if we have no non-critical extensions, we'll
         * check critical extensions.
         */
        if ((nonCritOids.length == 0)
                && (NativeCrypto.get_X509_ext_oids(mContext,
                        NativeCrypto.EXTENSION_TYPE_CRITICAL).length == 0)) {
            return null;
        }

        return new HashSet<String>(Arrays.asList(nonCritOids));
!!!2468891.java!!!	hasUnsupportedCriticalExtension() : boolean
        return (NativeCrypto.get_X509_ex_flags(mContext) & NativeCrypto.EXFLAG_CRITICAL) != 0;
!!!2469019.java!!!	checkValidity() : void
        checkValidity(new Date());
!!!2469147.java!!!	checkValidity(inout date : Date) : void
        if (getNotBefore().compareTo(date) > 0) {
            throw new CertificateNotYetValidException();
        }

        if (getNotAfter().compareTo(date) < 0) {
            throw new CertificateExpiredException();
        }
!!!2469275.java!!!	getVersion() : int
        return (int) NativeCrypto.X509_get_version(mContext) + 1;
!!!2469403.java!!!	getSerialNumber() : BigInteger
        return new BigInteger(NativeCrypto.X509_get_serialNumber(mContext));
!!!2469531.java!!!	getIssuerDN() : Principal
        return getIssuerX500Principal();
!!!2469659.java!!!	getSubjectDN() : Principal
        return getSubjectX500Principal();
!!!2469787.java!!!	getNotBefore() : Date
        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        calendar.set(Calendar.MILLISECOND, 0);
        NativeCrypto.ASN1_TIME_to_Calendar(NativeCrypto.X509_get_notBefore(mContext), calendar);
        return calendar.getTime();
!!!2469915.java!!!	getNotAfter() : Date
        Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        calendar.set(Calendar.MILLISECOND, 0);
        NativeCrypto.ASN1_TIME_to_Calendar(NativeCrypto.X509_get_notAfter(mContext), calendar);
        return calendar.getTime();
!!!2470043.java!!!	getTBSCertificate() : byte
        return NativeCrypto.get_X509_cert_info_enc(mContext);
!!!2470171.java!!!	getSignature() : byte
        return NativeCrypto.get_X509_signature(mContext);
!!!2470299.java!!!	getSigAlgName() : String
        return AlgNameMapper.map2AlgName(getSigAlgOID());
!!!2470427.java!!!	getSigAlgOID() : String
        return NativeCrypto.get_X509_sig_alg_oid(mContext);
!!!2470555.java!!!	getSigAlgParams() : byte
        return NativeCrypto.get_X509_sig_alg_parameter(mContext);
!!!2470683.java!!!	getIssuerUniqueID() : boolean
        return NativeCrypto.get_X509_issuerUID(mContext);
!!!2470811.java!!!	getSubjectUniqueID() : boolean
        return NativeCrypto.get_X509_subjectUID(mContext);
!!!2470939.java!!!	getKeyUsage() : boolean
        final boolean[] kusage = NativeCrypto.get_X509_ex_kusage(mContext);
        if (kusage == null) {
            return null;
        }

        if (kusage.length >= 9) {
            return kusage;
        }

        final boolean resized[] = new boolean[9];
        System.arraycopy(kusage, 0, resized, 0, kusage.length);
        return resized;
!!!2471067.java!!!	getBasicConstraints() : int
        if ((NativeCrypto.get_X509_ex_flags(mContext) & NativeCrypto.EXFLAG_CA) == 0) {
            return -1;
        }

        final int pathLen = NativeCrypto.get_X509_ex_pathlen(mContext);
        if (pathLen == -1) {
            return Integer.MAX_VALUE;
        }

        return pathLen;
!!!2471195.java!!!	getEncoded() : byte
        return NativeCrypto.i2d_X509(mContext);
!!!2471323.java!!!	verifyOpenSSL(inout pkey : OpenSSLKey) : void
        try {
            NativeCrypto.X509_verify(mContext, pkey.getPkeyContext());
        } catch (RuntimeException e) {
            throw new CertificateException(e);
        }
!!!2471451.java!!!	verifyInternal(inout key : PublicKey, inout sigProvider : String) : void
        String sigAlg = getSigAlgName();
        if (sigAlg == null) {
            sigAlg = getSigAlgOID();
        }

        final Signature sig;
        if (sigProvider == null) {
            sig = Signature.getInstance(sigAlg);
        } else {
            sig = Signature.getInstance(sigAlg, sigProvider);
        }

        sig.initVerify(key);
        sig.update(getTBSCertificate());
        if (!sig.verify(getSignature())) {
            throw new SignatureException("signature did not verify");
        }
!!!2471579.java!!!	verify(inout key : PublicKey) : void
        if (key instanceof OpenSSLKeyHolder) {
            OpenSSLKey pkey = ((OpenSSLKeyHolder) key).getOpenSSLKey();
            verifyOpenSSL(pkey);
            return;
        }

        verifyInternal(key, null);
!!!2471707.java!!!	verify(inout key : PublicKey, inout sigProvider : String) : void
        verifyInternal(key, sigProvider);
!!!2471835.java!!!	toString() : String
        ByteArrayOutputStream os = new ByteArrayOutputStream();
        long bioCtx = NativeCrypto.create_BIO_OutputStream(os);
        try {
            NativeCrypto.X509_print_ex(bioCtx, mContext, 0, 0);
            return os.toString();
        } finally {
            NativeCrypto.BIO_free(bioCtx);
        }
!!!2471963.java!!!	getPublicKey() : PublicKey
        /* First try to generate the key from supported OpenSSL key types. */
        try {
            OpenSSLKey pkey = new OpenSSLKey(NativeCrypto.X509_get_pubkey(mContext));
            return pkey.getPublicKey();
        } catch (NoSuchAlgorithmException ignored) {
        }

        /* Try generating the key using other Java providers. */
        String oid = NativeCrypto.get_X509_pubkey_oid(mContext);
        byte[] encoded = NativeCrypto.i2d_X509_PUBKEY(mContext);
        try {
            KeyFactory kf = KeyFactory.getInstance(oid);
            return kf.generatePublic(new X509EncodedKeySpec(encoded));
        } catch (NoSuchAlgorithmException ignored) {
        } catch (InvalidKeySpecException ignored) {
        }

        /*
         * We couldn't find anything else, so just return a nearly-unusable
         * X.509-encoded key.
         */
        return new X509PublicKey(oid, encoded, null);
!!!2472091.java!!!	getIssuerX500Principal() : X500Principal
        final byte[] issuer = NativeCrypto.X509_get_issuer_name(mContext);
        return new X500Principal(issuer);
!!!2472219.java!!!	getSubjectX500Principal() : X500Principal
        final byte[] subject = NativeCrypto.X509_get_subject_name(mContext);
        return new X500Principal(subject);
!!!2472347.java!!!	getExtendedKeyUsage() : List
        String[] extUsage = NativeCrypto.get_X509_ex_xkusage(mContext);
        if (extUsage == null) {
            return null;
        }

        return Arrays.asList(extUsage);
!!!2472475.java!!!	alternativeNameArrayToList(inout altNameArray : Object) : Collection
        if (altNameArray == null) {
            return null;
        }

        Collection<List<?>> coll = new ArrayList<List<?>>(altNameArray.length);
        for (int i = 0; i < altNameArray.length; i++) {
            coll.add(Collections.unmodifiableList(Arrays.asList(altNameArray[i])));
        }

        return Collections.unmodifiableCollection(coll);
!!!2472603.java!!!	getSubjectAlternativeNames() : Collection
        return alternativeNameArrayToList(NativeCrypto.get_X509_GENERAL_NAME_stack(mContext,
                NativeCrypto.GN_STACK_SUBJECT_ALT_NAME));
!!!2472731.java!!!	getIssuerAlternativeNames() : Collection
        return alternativeNameArrayToList(NativeCrypto.get_X509_GENERAL_NAME_stack(mContext,
                NativeCrypto.GN_STACK_ISSUER_ALT_NAME));
!!!2472859.java!!!	equals(inout other : Object) : boolean
        if (other instanceof OpenSSLX509Certificate) {
            OpenSSLX509Certificate o = (OpenSSLX509Certificate) other;

            return NativeCrypto.X509_cmp(mContext, o.mContext) == 0;
        }

        return super.equals(other);
!!!2472987.java!!!	hashCode() : int
        /* Make this faster since we might be in hash-based structures. */
        return NativeCrypto.get_X509_hashCode(mContext);
!!!2473115.java!!!	getContext() : long
        return mContext;
!!!2473243.java!!!	finalize() : void
        try {
            if (mContext != 0) {
                NativeCrypto.X509_free(mContext);
            }
        } finally {
            super.finalize();
        }
