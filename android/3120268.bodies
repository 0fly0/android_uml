class CharSequenceScanner
!!!13119500.java!!!	CharSequenceScanner(inout charSequence : CharSequence)

    this(charSequence.toString());
!!!13119628.java!!!	CharSequenceScanner(in string : String)

    this(string.toCharArray());
    this.str = string;
!!!13119756.java!!!	CharSequenceScanner(inout characters : char)

    this(characters, 0, characters.length);
!!!13119884.java!!!	CharSequenceScanner(inout characters : char, in offset : int, in length : int)

    super();
    if (offset < 0) {
      throw new IndexOutOfBoundsException(Integer.toString(offset));
    }
    if (length < 0) {
      throw new IndexOutOfBoundsException(Integer.toString(length));
    }
    if (offset > characters.length - length) {
      throw new IndexOutOfBoundsException(Integer.toString(offset + length));
    }
    this.chars = characters;
    this.length = length;
    this.startIndex = offset;
    this.endIndex = offset + this.length;
    this.pos = this.startIndex;
!!!13120012.java!!!	charAt(in index : int) : char

    return this.chars[this.startIndex + index];
!!!13120140.java!!!	getLength() : int

    return this.length;
!!!13120268.java!!!	substring(in start : int, in end : int) : String

    return new String(this.chars, this.startIndex + start, end - start);
!!!13120396.java!!!	getReplaced(in substitute : String, in start : int, in end : int) : String

    int restLength = this.endIndex - end;
    StringBuffer buffer = new StringBuffer(start + restLength + substitute.length());
    buffer.append(this.chars, this.startIndex, start);
    buffer.append(substitute);
    buffer.append(this.chars, this.startIndex + end, restLength);
    return buffer.toString();
!!!13120524.java!!!	appendSubstring(inout buffer : StringBuffer, in start : int, in end : int) : void

    buffer.append(this.chars, this.startIndex + start, end - start);
!!!13120652.java!!!	getCurrentIndex() : int

    return this.pos - this.startIndex;
!!!13120780.java!!!	setCurrentIndex(in index : int) : void

    // yes, index == this.length is allowed - that is the state when the end
    // is reached and setCurrentIndex(getCurrentPosition()) should NOT cause an
    // exception...
    if ((index < 0) || (index > this.length)) {
      throw new IndexOutOfBoundsException(Integer.toString(index));
    }
    this.pos = this.startIndex + index;
!!!13120908.java!!!	hasNext() : boolean

    return (this.pos < this.endIndex);
!!!13121036.java!!!	next() : char

    return this.chars[this.pos++];
!!!13121164.java!!!	forceNext() : char

    if (this.pos < this.endIndex) {
      return this.chars[this.pos++];
    } else {
      return 0;
    }
!!!13121292.java!!!	peek() : char

    return this.chars[this.pos];
!!!13121420.java!!!	forcePeek() : char

    if (this.pos < this.endIndex) {
      return this.chars[this.pos];
    } else {
      return 0;
    }
!!!13121548.java!!!	stepBack() : void

    if (this.pos > this.startIndex) {
      this.pos--;
    }
!!!13121676.java!!!	skipUntil(in stop : char) : boolean

    while (this.pos < this.endIndex) {
      if (this.chars[this.pos++] == stop) {
        return true;
      }
    }
    return false;
!!!13121804.java!!!	readUntil(in stop : char, inout acceptEof : boolean) : String

    int start = this.pos;
    while (this.pos < this.endIndex) {
      if (this.chars[this.pos++] == stop) {
        return new String(this.chars, start, this.pos - start - 1);
      }
    }
    if (acceptEof) {
      int len = this.pos - start;
      if (len > 0) {
        return new String(this.chars, start, len);
      } else {
        return "";
      }
    } else {
      return null;
    }
!!!13121932.java!!!	readUntil(in stop : char, inout acceptEof : boolean, inout syntax : CharScannerSyntax) : String

    StringBuilder result = new StringBuilder();
    char escape = syntax.getEscape();
    char quoteStart = syntax.getQuoteStart();
    char altQuoteStart = syntax.getAltQuoteStart();
    char entityStart = syntax.getEntityStart();
    boolean escapeActive = false;
    boolean done = false;
    char quoteEnd = 0;
    char quoteEscape = 0;
    char entityEnd = 0;
    boolean quoteLazy = false;
    int index = this.pos;
    int restIndex = this.endIndex;
    while (this.pos < this.endIndex) {
      char c = this.chars[this.pos++];
      boolean append = false;
      boolean newEscapeActive = false;
      if (quoteEnd != 0) {
        // in quotation
        if (escapeActive) {
          // current character c was escaped
          // it will be taken as is on the next append
        } else if (c == quoteEscape) {
          // escape in quote --> lookahead
          if (this.pos < this.endIndex) {
            c = this.chars[this.pos];
            if (c == quoteEnd) {
              // quoteEnd was escaped
              append = true;
              newEscapeActive = true;
            } else if (quoteEscape == quoteEnd) {
              // quotation done
              quoteEnd = 0;
              append = true;
            }
          } else {
            // end reached without stop char
            if (quoteEscape == quoteEnd) {
              // omit quote on appending of rest
              restIndex--;
            }
            break;
          }
        } else if (c == quoteEnd) {
          // quotation done
          quoteEnd = 0;
          append = true;
        }
      } else if (entityEnd != 0) {
        if (c == entityEnd) {
          // entity end detected...
          entityEnd = 0;
          int len = this.pos - index - 1;
          String entity = new String(this.chars, index, len);
          result.append(syntax.resolveEntity(entity));
          index = this.pos;
        }
      } else if (escapeActive) {
        // current character c was escaped
        // it will be taken as is on the next append
      } else if (c == stop) {
        append = true;
        done = true;
      } else if (c == escape) {
        append = true;
        newEscapeActive = true;
      } else if (c == entityStart) {
        entityEnd = syntax.getEntityEnd();
        append = true;
      } else {
        if (c == quoteStart) {
          quoteEnd = syntax.getQuoteEnd();
          quoteEscape = syntax.getQuoteEscape();
          quoteLazy = syntax.isQuoteEscapeLazy();
        } else if (c == altQuoteStart) {
          quoteEnd = syntax.getAltQuoteEnd();
          quoteEscape = syntax.getAltQuoteEscape();
          quoteLazy = syntax.isAltQuoteEscapeLazy();
        }
        if (quoteEnd != 0) {
          append = true;
          if ((quoteEnd == quoteEscape) && (c == quoteEscape) && (quoteLazy)) {
            // lazy quotation mode active --> lookahead
            if (this.pos < this.endIndex) {
              if (this.chars[this.pos] == quoteEscape) {
                // lazy quotation detected
                quoteEnd = 0;
                newEscapeActive = true;
              }
            }
          }
        }
      }
      if (append) {
        int len = this.pos - index - 1;
        if (len > 0) {
          result.append(this.chars, index, len);
        }
        if (done) {
          return result.toString();
        }
        index = this.pos;
      }
      escapeActive = newEscapeActive;
    }
    if (acceptEof) {
      int len = restIndex - index;
      if (len > 0) {
        // append rest
        result.append(this.chars, index, len);
      }
      return result.toString();
    } else {
      return null;
    }
!!!13122060.java!!!	read(in count : int) : String

    int len = this.endIndex - this.pos;
    if (len > count) {
      len = count;
    }
    String result = new String(this.chars, this.pos, len);
    this.pos += len;
    return result;
!!!13122188.java!!!	readDigit() : int

    int result = -1;
    if (this.pos < this.endIndex) {
      char c = this.chars[this.pos];
      if ((c >= '0') && (c <= '9')) {
        result = c - '0';
        this.pos++;
      }
    }
    return result;
!!!13122316.java!!!	readLong(in maxDigits : int) : long

    if (maxDigits <= 0) {
      throw new IllegalArgumentException();
    }
    int index = this.pos;
    int end = this.pos + maxDigits;
    if (end > this.endIndex) {
      end = this.endIndex;
    }
    while (this.pos < end) {
      char c = this.chars[this.pos];
      if ((c < '0') || (c > '9')) {
        break;
      }
      this.pos++;
    }
    int len = this.pos - index;
    String number = new String(this.chars, index, len);
    return Long.parseLong(number);
!!!13122444.java!!!	skipOver(in substring : String, inout ignoreCase : boolean) : boolean

    return skipOver(substring, ignoreCase, null);
!!!13122572.java!!!	skipOver(in substring : String, inout ignoreCase : boolean, inout stopFilter : CharFilter) : boolean

    int subLength = substring.length();
    if (subLength == 0) {
      return true;
    }
    char[] subChars;
    if (ignoreCase) {
      subChars = substring.toLowerCase(Locale.ENGLISH).toCharArray();
    } else {
      subChars = substring.toCharArray();
    }
    // we can only find the substring at a position
    // until where enough chars are left to go...
    int max = this.endIndex - subLength;
    char first = subChars[0];
    while (this.pos <= max) {
      char c = this.chars[this.pos++];
      if (stopFilter != null) {
        if (stopFilter.accept(c)) {
          return false;
        }
      }
      if (ignoreCase) {
        c = Character.toLowerCase(c);
      }
      if (c == first) {
        // found first character
        int myCharsIndex = this.pos;
        int subCharsIndex = 1;
        boolean found = true;
        while (subCharsIndex < subLength) {
          c = this.chars[myCharsIndex++];
          if (ignoreCase) {
            c = Character.toLowerCase(c);
          }
          if (c != subChars[subCharsIndex++]) {
            found = false;
            break;
          }
        }
        if (found) {
          this.pos = myCharsIndex;
          return true;
        }
      }
    }
    // substring not found (EOF)
    this.pos = this.endIndex;
    return false;
!!!13122700.java!!!	expect(in exprected : String, inout ignoreCase : boolean) : boolean

    int len = exprected.length();
    for (int i = 0; i < len; i++) {
      if (this.pos >= this.endIndex) {
        return false;
      }
      char c = this.chars[this.pos];
      char exp = exprected.charAt(i);
      if (c != exp) {
        if (!ignoreCase) {
          return false;
        }
        if (Character.toLowerCase(c) != Character.toLowerCase(exp)) {
          return false;
        }
      }
      this.pos++;
    }
    return true;
!!!13122828.java!!!	expect(in expected : char) : boolean

    if (this.pos < this.endIndex) {
      if (this.chars[this.pos] == expected) {
        this.pos++;
        return true;
      }
    }
    return false;
!!!13122956.java!!!	skipUntil(in stop : char, in escape : char) : boolean

    boolean escapeActive = false;
    while (this.pos < this.endIndex) {
      char c = this.chars[this.pos++];
      if (c == escape) {
        escapeActive = !escapeActive;
      } else {
        if ((c == stop) && (!escapeActive)) {
          return true;
        }
        escapeActive = false;
      }
    }
    return false;
!!!13123084.java!!!	skipWhile(in c : char) : int

    int currentPos = this.pos;
    while (this.pos < this.endIndex) {
      if (this.chars[this.pos] != c) {
        break;
      }
      this.pos++;
    }
    return this.pos - currentPos;
!!!13123212.java!!!	skipWhile(inout filter : CharFilter) : int

    return skipWhile(filter, Integer.MAX_VALUE);
!!!13123340.java!!!	skipWhile(inout filter : CharFilter, in max : int) : int

    if (max < 0) {
      throw new IllegalArgumentException("Max must NOT be negative: " + max);
    }
    int currentPos = this.pos;
    int end = currentPos + max;
    if (end < 0) {
      end = max;
    }
    if (this.endIndex < end) {
      end = this.endIndex;
    }
    while (this.pos < end) {
      char c = this.chars[this.pos];
      if (!filter.accept(c)) {
        break;
      }
      this.pos++;
    }
    return this.pos - currentPos;
!!!13123468.java!!!	readWhile(inout filter : CharFilter) : String

    int currentPos = this.pos;
    int len = skipWhile(filter);
    if (len == 0) {
      return "";
    } else {
      return new String(this.chars, currentPos, len);
    }
!!!13123596.java!!!	readWhile(inout filter : CharFilter, in max : int) : String

    int currentPos = this.pos;
    int len = skipWhile(filter);
    if (len == 0) {
      return "";
    } else {
      return new String(this.chars, currentPos, len);
    }
!!!13123724.java!!!	getOriginalString() : String

    if (this.str != null) {
      this.str = new String(this.chars, this.startIndex, this.length);
    }
    return this.str;
!!!13123852.java!!!	toString() : String

    if (this.pos < this.endIndex) {
      return new String(this.chars, this.pos, this.endIndex - this.pos);
    } else {
      return "";
    }
