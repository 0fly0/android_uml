class MemoryHandler
!!!1725595.java!!!	MemoryHandler()
        String className = this.getClass().getName();
        // init target
        final String targetName = manager.getProperty(className + ".target");
        try {
            ClassLoader loader = Thread.currentThread().getContextClassLoader();
            if (loader == null) {
                loader = ClassLoader.getSystemClassLoader();
            }
            Class<?> targetClass = loader.loadClass(targetName);
            target = (Handler) targetClass.newInstance();
        } catch (Exception e) {
            throw new RuntimeException("Cannot load target handler '" + targetName + "'");
        }
        // init size
        String sizeString = manager.getProperty(className + ".size");
        if (sizeString != null) {
            try {
                size = Integer.parseInt(sizeString);
                if (size <= 0) {
                    size = DEFAULT_SIZE;
                }
            } catch (Exception e) {
                printInvalidPropMessage(className + ".size", sizeString, e);
            }
        }
        // init push level
        String pushName = manager.getProperty(className + ".push");
        if (pushName != null) {
            try {
                push = Level.parse(pushName);
            } catch (Exception e) {
                printInvalidPropMessage(className + ".push", pushName, e);
            }
        }
        // init other properties which are common for all Handler
        initProperties("ALL", null, "java.util.logging.SimpleFormatter", null);
        buffer = new LogRecord[size];
!!!1725723.java!!!	MemoryHandler(inout target : Handler, in size : int, inout pushLevel : Level)
        if (size <= 0) {
            throw new IllegalArgumentException("size <= 0");
        }
        target.getLevel();
        pushLevel.intValue();
        this.target = target;
        this.size = size;
        this.push = pushLevel;
        initProperties("ALL", null, "java.util.logging.SimpleFormatter", null);
        buffer = new LogRecord[size];
!!!1725851.java!!!	close() : void
        manager.checkAccess();
        target.close();
        setLevel(Level.OFF);
!!!1725979.java!!!	flush() : void
        target.flush();
!!!1726107.java!!!	publish(inout record : LogRecord) : void
        if (!isLoggable(record)) {
            return;
        }
        if (cursor >= size) {
            cursor = 0;
        }
        buffer[cursor++] = record;
        if (record.getLevel().intValue() >= push.intValue()) {
            push();
        }
!!!1726235.java!!!	getPushLevel() : Level
        return push;
!!!1726363.java!!!	isLoggable(inout record : LogRecord) : boolean
        return super.isLoggable(record);
!!!1726491.java!!!	push() : void
        for (int i = cursor; i < size; i++) {
            if (buffer[i] != null) {
                target.publish(buffer[i]);
            }
            buffer[i] = null;
        }
        for (int i = 0; i < cursor; i++) {
            if (buffer[i] != null) {
                target.publish(buffer[i]);
            }
            buffer[i] = null;
        }
        cursor = 0;
!!!1726619.java!!!	setPushLevel(inout newLevel : Level) : void
        manager.checkAccess();
        newLevel.intValue();
        this.push = newLevel;
