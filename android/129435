format 74
"ref" // _unknown::java::lang::ref
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/lang/ref/"
  java_package "java.lang.ref"
  classview 129435 "ref"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 144667 "SoftReference"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 152219 // Reference
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A reference that is cleared when its referent is not strongly reachable and
there is memory pressure.

<h3>Avoid Soft References for Caching</h3>
In practice, soft references are inefficient for caching. The runtime doesn't
have enough information on which references to clear and which to keep. Most
fatally, it doesn't know what to do when given the choice between clearing a
soft reference and growing the heap.

<p>The lack of information on the value to your application of each reference
limits the usefulness of soft references. References that are cleared too
early cause unnecessary work; those that are cleared too late waste memory.

<p>Most applications should use an {@code android.util.LruCache} instead of
soft references. LruCache has an effective eviction policy and lets the user
tune how much memory is allotted.

<h3>Garbage Collection of Soft References</h3>
When the garbage collector encounters an object {@code obj} that is
softly-reachable, the following happens:
<ul>
  <li>A set {@code refs} of references is determined. {@code refs} contains
      the following elements:
      <ul>
        <li>All soft references pointing to {@code obj}.</li>
        <li>All soft references pointing to objects from which {@code obj} is
          strongly reachable.</li>
      </ul>
  </li>
  <li>All references in {@code refs} are atomically cleared.</li>
  <li>At the same time or some time in the future, all references in {@code
      refs} will be enqueued with their corresponding reference queues, if
      any.</li>
</ul>
The system may delay clearing and enqueueing soft references, yet all {@code
SoftReference}s pointing to softly reachable objects will be cleared before
the runtime throws an {@link OutOfMemoryError}.

<p>Unlike a {@code WeakReference}, a {@code SoftReference} will not be
cleared and enqueued until the runtime must reclaim memory to satisfy an
allocation."
      classrelation 214555 // <realization>
	relation 214555 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 214555 // <realization>
	  b parent class_ref 152219 // Reference
      end

      operation 461211 "SoftReference"
	public explicit_return_type ""
	nparams 1
	  param inout name "r" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new soft reference to the given referent. The newly created
reference is not registered with any reference queue.

@param r the referent to track"
      end

      operation 461339 "SoftReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "r" explicit_type "T"
	  param inout name "q" type class_ref 152475 // ReferenceQueue
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new soft reference to the given referent. The newly created
reference is registered with the given reference queue.

@param r the referent to track
@param q the queue to register to the reference object with. A null value
         results in a weak reference that is not associated with any
         queue."
      end
    end

    class 152219 "Reference"
      abstract visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provides an abstract class which describes behavior common to all reference
objects. It is not possible to create immediate subclasses of
{@code Reference} in addition to the ones provided by this package. It is
also not desirable to do so, since references require very close cooperation
with the system's garbage collector. The existing, specialized reference
classes should be used instead.

<p>Three different type of references exist, each being weaker than the preceding one:
{@link java.lang.ref.SoftReference}, {@link java.lang.ref.WeakReference}, and
{@link java.lang.ref.PhantomReference}. \"Weakness\" here means that less restrictions are
being imposed on the garbage collector as to when it is allowed to
actually garbage-collect the referenced object.

<p>In order to use reference objects properly it is important to understand
the different types of reachability that trigger their clearing and
enqueueing. The following table lists these, from strongest to weakest.
For each row, an object is said to have the reachability on the left side
if (and only if) it fulfills all of the requirements on the right side. In
all rows, consider the <em>root set</em> to be a set of references that
are \"resistant\" to garbage collection (that is, running threads, method
parameters, local variables, static fields and the like).

<p><table>
<tr>
<td>Strongly reachable</td>
<td> <ul>
<li>There exists at least one path from the root set to the object that does not traverse any
instance of a {@code java.lang.ref.Reference} subclass.
</li>
</ul> </td>
</tr>

<tr>
<td>Softly reachable</td>
<td> <ul>
<li>The object is not strongly reachable.</li>
<li>There exists at least one path from the root set to the object that does traverse
a {@code java.lang.ref.SoftReference} instance, but no {@code java.lang.ref.WeakReference}
or {@code java.lang.ref.PhantomReference} instances.</li>
</ul> </td>
</tr>

<tr>
<td>Weakly reachable</td>
<td> <ul>
<li>The object is neither strongly nor softly reachable.</li>
<li>There exists at least one path from the root set to the object that does traverse a
{@code java.lang.ref.WeakReference} instance, but no {@code java.lang.ref.PhantomReference}
instances.</li>
</ul> </td>
</tr>

<tr>
<td>Phantom-reachable</td>
<td> <ul>
<li>The object is neither strongly, softly, nor weakly reachable.</li>
<li>The object is referenced by a {@code java.lang.ref.PhantomReference} instance.</li>
<li>The object has already been finalized.</li>
</ul> </td>
</tr>
</table>"
      attribute 185115 "referent"
	volatile package explicit_type "T"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The object to which this reference refers.
VM requirement: this field <em>must</em> be called \"referent\"
and be an object.
"
      end

      classrelation 201243 // queue (<unidirectional association>)
	relation 201243 --->
	  a role_name "queue" volatile package
	    comment "
If non-null, the queue on which this reference will be enqueued
when the referent is appropriately reachable.
VM requirement: this field <em>must</em> be called \"queue\"
and be a java.lang.ref.ReferenceQueue.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super T> ${name}${value};
"
	    classrelation_ref 201243 // queue (<unidirectional association>)
	  b parent class_ref 152475 // ReferenceQueue
      end

      classrelation 201371 // queueNext (<unidirectional association>)
	relation 201371 --->
	  a role_name "queueNext" volatile package
	    comment "
Used internally by java.lang.ref.ReferenceQueue.
VM requirement: this field <em>must</em> be called \"queueNext\"
and be a java.lang.ref.Reference.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    java_annotation "@SuppressWarnings(\"unchecked\")
"
	    classrelation_ref 201371 // queueNext (<unidirectional association>)
	  b parent class_ref 152219 // Reference
      end

      classrelation 201499 // pendingNext (<unidirectional association>)
	relation 201499 --->
	  a role_name "pendingNext" volatile public
	    comment "
Used internally by the VM.  This field forms a circular and
singly linked list of reference objects discovered by the
garbage collector and awaiting processing by the reference
queue thread.

@hide

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 201499 // pendingNext (<unidirectional association>)
	  b parent class_ref 152219 // Reference
      end

      operation 374811 "Reference"
	package explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of this class."
      end

      operation 374939 "Reference"
	package explicit_return_type ""
	nparams 2
	  param inout name "r" explicit_type "T"
	  param inout name "q" type class_ref 152475 // ReferenceQueue
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 375067 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes the referent {@code null}. This does not force the reference
object to be enqueued."
      end

      operation 375195 "enqueueInternal"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds an object to its reference queue.

@return {@code true} if this call has caused the {@code Reference} to
become enqueued, or {@code false} otherwise

@hide"
      end

      operation 375323 "enqueue"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces the reference object to be enqueued if it has been associated with
a queue.

@return {@code true} if this call has caused the {@code Reference} to
become enqueued, or {@code false} otherwise"
      end

      operation 375451 "get"
	public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the referent of the reference object.

@return the referent to which reference refers, or {@code null} if the
        object has been cleared."
      end

      operation 375579 "isEnqueued"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Checks whether the reference object has been enqueued.

@return {@code true} if the {@code Reference} has been enqueued, {@code
        false} otherwise"
      end
    end

    class 152475 "ReferenceQueue"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The {@code ReferenceQueue} is the container on which reference objects are
enqueued when the garbage collector detects the reachability type specified
for the referent.

@since 1.2"
      attribute 185371 "NANOS_PER_MILLI"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 201883 // head (<unidirectional association>)
	relation 201883 --->
	  a role_name "head" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends T> ${name}${value};
"
	    classrelation_ref 201883 // head (<unidirectional association>)
	  b parent class_ref 152219 // Reference
      end

      operation 376091 "ReferenceQueue"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new instance of this class."
      end

      operation 376219 "poll"
	public return_type class_ref 152219 // Reference
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns the next available reference from the queue, removing it in the
process. Does not wait for a reference to become available.

@return the next available reference, or {@code null} if no reference is
        immediately available"
      end

      operation 376347 "remove"
	public return_type class_ref 152219 // Reference
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends T> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next available reference from the queue, removing it in the
process. Waits indefinitely for a reference to become available.

@throws InterruptedException if the blocking call was interrupted"
      end

      operation 376475 "remove"
	public return_type class_ref 152219 // Reference
	nparams 1
	  param in name "timeoutMillis" explicit_type "long"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? extends T> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next available reference from the queue, removing it in the
process. Waits for a reference to become available or the given timeout
period to elapse, whichever happens first.

@param timeoutMillis maximum time to spend waiting for a reference object
    to become available. A value of {@code 0} results in the method
    waiting indefinitely.
@return the next available reference, or {@code null} if no reference
    becomes available within the timeout period
@throws IllegalArgumentException if {@code timeoutMillis < 0}.
@throws InterruptedException if the blocking call was interrupted"
      end

      operation 376603 "enqueue"
	package explicit_return_type "void"
	nparams 1
	  param inout name "reference" type class_ref 152219 // Reference
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Enqueue the reference object on the receiver.

@param reference
           reference object to be enqueued."
      end

      classrelation 202011 // unenqueued (<unidirectional association>)
	relation 202011 --->
	  a role_name "unenqueued" init_value " null" class_relation public
	    comment " @hide 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 202011 // unenqueued (<unidirectional association>)
	  b parent class_ref 152219 // Reference
      end

      operation 376731 "add"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "list" type class_ref 152219 // Reference
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 152603 "FinalizerReference"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 152219 // Reference
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "@hide"
      classrelation 213659 // <realization>
	relation 213659 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 213659 // <realization>
	  b parent class_ref 152219 // Reference
      end

      classrelation 213787 // queue (<unidirectional association>)
	relation 213787 --->
	  a role_name "queue" init_value " new ReferenceQueue<Object>()" class_relation const_relation public
	    comment " This queue contains those objects eligible for finalization.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 213787 // queue (<unidirectional association>)
	  b parent class_ref 152475 // ReferenceQueue
      end

      classrelation 213915 // LIST_LOCK (<unidirectional association>)
	relation 213915 --->
	  a role_name "LIST_LOCK" init_value " new Object()" class_relation const_relation private
	    comment " Guards the list (not the queue).
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 213915 // LIST_LOCK (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      classrelation 214043 // head (<unidirectional association>)
	relation 214043 --->
	  a role_name "head" init_value " null" class_relation private
	    comment " This list contains a FinalizerReference for every finalizable object in the heap.
 Objects in this list may or may not be eligible for finalization yet.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 214043 // head (<unidirectional association>)
	  b parent class_ref 152603 // FinalizerReference
      end

      classrelation 214171 // prev (<unidirectional association>)
	relation 214171 --->
	  a role_name "prev" private
	    comment " The links used to construct the list.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 214171 // prev (<unidirectional association>)
	  b parent class_ref 152603 // FinalizerReference
      end

      classrelation 214299 // next (<unidirectional association>)
	relation 214299 --->
	  a role_name "next" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 214299 // next (<unidirectional association>)
	  b parent class_ref 152603 // FinalizerReference
      end

      attribute 196763 "zombie"
	private explicit_type "T"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " When the GC wants something finalized, it moves it from the 'referent' field to
 the 'zombie' field instead."
      end

      operation 459803 "FinalizerReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "r" explicit_type "T"
	  param inout name "q" type class_ref 152475 // ReferenceQueue
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 459931 "get"
	public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 460059 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 460187 "add"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "referent" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 460315 "remove"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "reference" type class_ref 152603 // FinalizerReference
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 460443 "finalizeAllEnqueued"
	class_operation public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits for all currently-enqueued references to be finalized."
      end

      operation 460571 "enqueueSentinelReference"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "sentinel" type class_ref 163995 // Sentinel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 163995 "Sentinel"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 196891 "finalized"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 460699 "finalize"
	  protected explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 134683 // Throwable
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 460827 "awaitFinalization"
	  package explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 155547 // InterruptedException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 157851 "WeakReference"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 152219 // Reference
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Implements a weak reference, which is the middle of the three types of
references. Once the garbage collector decides that an object {@code obj} is
is weakly-reachable, the following
happens:

<ul>
  <li>
    A set {@code ref} of references is determined. {@code ref} contains the
    following elements:
    <ul>
      <li>
        All weak references pointing to {@code obj}.
      </li>
      <li>
        All weak references pointing to objects from which {@code obj} is
        either strongly or softly reachable.
      </li>
    </ul>
  </li>
  <li>
    All references in {@code ref} are atomically cleared.
  </li>
  <li>
    All objects formerly being referenced by {@code ref} become eligible for
    finalization.
  </li>
  <li>
    At some future point, all references in {@code ref} will be enqueued
    with their corresponding reference queues, if any.
  </li>
</ul>

Weak references are useful for mappings that should have their entries
removed automatically once they are not referenced any more (from outside).
The difference between a {@code SoftReference} and a {@code WeakReference} is
the point of time at which the decision is made to clear and enqueue the
reference:

<ul>
  <li>
    A {@code SoftReference} should be cleared and enqueued <em>as late as
    possible</em>, that is, in case the VM is in danger of running out of
    memory.
  </li>
  <li>
    A {@code WeakReference} may be cleared and enqueued as soon as is
    known to be weakly-referenced.
  </li>
</ul>"
      classrelation 201627 // <realization>
	relation 201627 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 201627 // <realization>
	  b parent class_ref 152219 // Reference
      end

      operation 375707 "WeakReference"
	public explicit_return_type ""
	nparams 1
	  param inout name "r" explicit_type "T"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new weak reference to the given referent. The newly created
reference is not registered with any reference queue.

@param r the referent to track"
      end

      operation 375835 "WeakReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "r" explicit_type "T"
	  param inout name "q" type class_ref 152475 // ReferenceQueue
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new weak reference to the given referent. The newly created
reference is registered with the given reference queue.

@param r the referent to track
@param q the queue to register to the reference object with. A null value
         results in a weak reference that is not associated with any
         queue."
      end
    end

    class 164123 "PhantomReference"
      visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 152219 // Reference
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Implements a phantom reference, which is the weakest of the three types of
references. Once the garbage collector decides that an object {@code obj} is
phantom-reachable, it is being enqueued
on the corresponding queue, but its referent is not cleared. That is, the
reference queue of the phantom reference must explicitly be processed by some
application code. As a consequence, a phantom reference that is not
registered with any reference queue does not make any sense.
<p>
Phantom references are useful for implementing cleanup operations that are
necessary before an object gets garbage-collected. They are sometimes more
flexible than the {@link Object#finalize()} method."
      classrelation 214427 // <realization>
	relation 214427 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 214427 // <realization>
	  b parent class_ref 152219 // Reference
      end

      operation 460955 "PhantomReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "r" explicit_type "T"
	  param inout name "q" type class_ref 152475 // ReferenceQueue
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super T> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new phantom reference and registers it with the given
reference queue. The reference queue may be {@code null}, but this case
does not make any sense, since the reference will never be enqueued, and
the {@link #get()} method always returns {@code null}.

@param r the referent to track
@param q the queue to register the phantom reference object with"
      end

      operation 461083 "get"
	public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns {@code null}.  The referent of a phantom reference is not
accessible.

@return {@code null} (always)"
      end
    end
  end

  deploymentview 128923 "ref"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 150299 "Reference"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 152219 // Reference
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 150427 "WeakReference"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 157851 // WeakReference
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 150555 "ReferenceQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 152475 // ReferenceQueue
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 156059 "FinalizerReference"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 152603 // FinalizerReference
      end
      comment "Copyright (C) 2011 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 156187 "PhantomReference"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 164123 // PhantomReference
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 156315 "SoftReference"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 144667 // SoftReference
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.


Copyright (C) 2008 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
