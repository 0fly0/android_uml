class Signature
!!!885915.java!!!	Signature(inout algorithm : String)
        this.algorithm = algorithm;
!!!886043.java!!!	getInstance(inout algorithm : String) : Signature
        if (algorithm == null) {
            throw new NullPointerException("algorithm == null");
        }
        Engine.SpiAndProvider sap = ENGINE.getInstance(algorithm, null);
        Object spi = sap.spi;
        Provider provider = sap.provider;
        if (spi instanceof Signature) {
            Signature result = (Signature) spi;
            result.algorithm = algorithm;
            result.provider = provider;
            return result;
        }
        return new SignatureImpl((SignatureSpi) spi, provider, algorithm);
!!!886171.java!!!	getInstance(inout algorithm : String, inout provider : String) : Signature
        if (algorithm == null) {
            throw new NullPointerException("algorithm == null");
        }
        if (provider == null || provider.isEmpty()) {
            throw new IllegalArgumentException();
        }
        Provider p = Security.getProvider(provider);
        if (p == null) {
            throw new NoSuchProviderException(provider);
        }
        return getSignatureInstance(algorithm, p);
!!!886299.java!!!	getInstance(inout algorithm : String, inout provider : Provider) : Signature
        if (algorithm == null) {
            throw new NullPointerException("algorithm == null");
        }
        if (provider == null) {
            throw new IllegalArgumentException("provider == null");
        }
        return getSignatureInstance(algorithm, provider);
!!!886427.java!!!	getSignatureInstance(inout algorithm : String, inout provider : Provider) : Signature
        Object spi = ENGINE.getInstance(algorithm, provider, null);
        if (spi instanceof Signature) {
            Signature result = (Signature) spi;
            result.algorithm = algorithm;
            result.provider = provider;
            return result;
        }
        return new SignatureImpl((SignatureSpi) spi, provider, algorithm);
!!!886555.java!!!	getProvider() : Provider
        return provider;
!!!886683.java!!!	getAlgorithm() : String
        return algorithm;
!!!886811.java!!!	initVerify(inout publicKey : PublicKey) : void
        engineInitVerify(publicKey);
        state = VERIFY;
!!!886939.java!!!	initVerify(inout certificate : Certificate) : void
        if (certificate instanceof X509Certificate) {
            Set ce = ((X509Certificate) certificate).getCriticalExtensionOIDs();
            boolean critical = false;
            if (ce != null && !ce.isEmpty()) {
                for (Iterator i = ce.iterator(); i.hasNext();) {
                    if ("2.5.29.15".equals(i.next())) {
                        //KeyUsage OID = 2.5.29.15
                        critical = true;
                        break;
                    }
                }
                if (critical) {
                    boolean[] keyUsage = ((X509Certificate) certificate)
                            .getKeyUsage();
                    // As specified in RFC 3280 -
                    // Internet X.509 Public Key Infrastructure
                    // Certificate and Certificate Revocation List (CRL) Profile.
                    // (http://www.ietf.org/rfc/rfc3280.txt)
                    //
                    // KeyUsage ::= BIT STRING { digitalSignature (0), <skipped> }
                    if ((keyUsage != null) && (!keyUsage[0])) { // digitalSignature
                        throw new InvalidKeyException("The public key in the certificate cannot be used for digital signature purposes");
                    }
                }
            }
        }
        engineInitVerify(certificate.getPublicKey());
        state = VERIFY;
!!!887067.java!!!	initSign(inout privateKey : PrivateKey) : void
        engineInitSign(privateKey);
        state = SIGN;
!!!887195.java!!!	initSign(inout privateKey : PrivateKey, inout random : SecureRandom) : void
        engineInitSign(privateKey, random);
        state = SIGN;
!!!887323.java!!!	sign() : byte
        if (state != SIGN) {
            throw new SignatureException("Signature object is not initialized properly");
        }
        return engineSign();
!!!887451.java!!!	sign(inout outbuf : byte, in offset : int, in len : int) : int
        if (outbuf == null || offset < 0 || len < 0 ||
                offset + len > outbuf.length) {
            throw new IllegalArgumentException();
        }
        if (state != SIGN) {
            throw new SignatureException("Signature object is not initialized properly");
        }
        return engineSign(outbuf, offset, len);
!!!887579.java!!!	verify(inout signature : byte) : boolean
        if (state != VERIFY) {
            throw new SignatureException("Signature object is not initialized properly");
        }
        return engineVerify(signature);
!!!887707.java!!!	verify(inout signature : byte, in offset : int, in length : int) : boolean
        if (state != VERIFY) {
            throw new SignatureException("Signature object is not initialized properly");
        }
        if (signature == null || offset < 0 || length < 0 ||
                offset + length > signature.length) {
            throw new IllegalArgumentException();
        }
        return engineVerify(signature, offset, length);
!!!887835.java!!!	update(in b : byte) : void
        if (state == UNINITIALIZED) {
            throw new SignatureException("Signature object is not initialized properly");
        }
        engineUpdate(b);
!!!887963.java!!!	update(inout data : byte) : void
        if (state == UNINITIALIZED) {
            throw new SignatureException("Signature object is not initialized properly");
        }
        engineUpdate(data, 0, data.length);
!!!888091.java!!!	update(inout data : byte, in off : int, in len : int) : void
        if (state == UNINITIALIZED) {
            throw new SignatureException("Signature object is not initialized properly");
        }
        if (data == null || off < 0 || len < 0 ||
                off + len > data.length) {
            throw new IllegalArgumentException();
        }
        engineUpdate(data, off, len);
!!!888219.java!!!	update(inout data : ByteBuffer) : void
        if (state == UNINITIALIZED) {
            throw new SignatureException("Signature object is not initialized properly");
        }
        engineUpdate(data);
!!!888347.java!!!	toString() : String
        return "SIGNATURE " + algorithm + " state: " + stateToString(state);
!!!888475.java!!!	stateToString(in state : int) : String
        switch (state) {
        case UNINITIALIZED:
            return "UNINITIALIZED";
        case SIGN:
            return "SIGN";
        case VERIFY:
            return "VERIFY";
        default:
            return "";
        }
!!!888603.java!!!	setParameter(inout param : String, inout value : Object) : void
        engineSetParameter(param, value);
!!!888731.java!!!	setParameter(inout params : AlgorithmParameterSpec) : void
        engineSetParameter(params);
!!!888859.java!!!	getParameters() : AlgorithmParameters
        return engineGetParameters();
!!!888987.java!!!	getParameter(inout param : String) : Object
        return engineGetParameter(param);
!!!889115.java!!!	clone() : Object
        if (this instanceof Cloneable) {
            return super.clone();
        }
        throw new CloneNotSupportedException();
