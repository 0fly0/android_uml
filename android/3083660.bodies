class EditingUtils
!!!12793740.java!!!	EditingUtils()
        // Unintentional empty constructor for singleton.
!!!12793868.java!!!	getCursorPosition(inout connection : InputConnection) : int
        if (null == connection) return INVALID_CURSOR_POSITION;
        final ExtractedText extracted = connection.getExtractedText(new ExtractedTextRequest(), 0);
        if (extracted == null) {
            return INVALID_CURSOR_POSITION;
        }
        return extracted.startOffset + extracted.selectionStart;
!!!12793996.java!!!	getWordAtCursor(inout connection : InputConnection, in separators : String) : String
        // getWordRangeAtCursor returns null if the connection is null
        Range r = getWordRangeAtCursor(connection, separators);
        return (r == null) ? null : r.mWord;
!!!12794252.java!!!	getWordRangeAtCursor(inout connection : InputConnection, in sep : String) : Range
        if (connection == null || sep == null) {
            return null;
        }
        CharSequence before = connection.getTextBeforeCursor(1000, 0);
        CharSequence after = connection.getTextAfterCursor(1000, 0);
        if (before == null || after == null) {
            return null;
        }

        // Find first word separator before the cursor
        int start = before.length();
        while (start > 0 && !isWhitespace(before.charAt(start - 1), sep)) start--;

        // Find last word separator after the cursor
        int end = -1;
        while (++end < after.length() && !isWhitespace(after.charAt(end), sep)) {
            // Nothing to do here.
        }

        int cursor = getCursorPosition(connection);
        if (start >= 0 && cursor + end <= after.length() + before.length()) {
            String word = before.toString().substring(start, before.length())
                    + after.toString().substring(0, end);
            return new Range(before.length() - start, end, word);
        }

        return null;
!!!12794380.java!!!	isWhitespace(in code : int, in whitespace : String) : boolean
        return whitespace.contains(String.valueOf((char) code));
!!!12794508.java!!!	getPreviousWord(inout connection : InputConnection, in sentenceSeperators : String) : CharSequence
        //TODO: Should fix this. This could be slow!
        if (null == connection) return null;
        CharSequence prev = connection.getTextBeforeCursor(LOOKBACK_CHARACTER_NUM, 0);
        return getPreviousWord(prev, sentenceSeperators);
!!!12794636.java!!!	getPreviousWord(inout prev : CharSequence, in sentenceSeperators : String) : CharSequence
        if (prev == null) return null;
        String[] w = spaceRegex.split(prev);

        // If we can't find two words, or we found an empty word, return null.
        if (w.length < 2 || w[w.length - 2].length() <= 0) return null;

        // If ends in a separator, return null
        char lastChar = w[w.length - 2].charAt(w[w.length - 2].length() - 1);
        if (sentenceSeperators.contains(String.valueOf(lastChar))) return null;

        return w[w.length - 2];
!!!12794764.java!!!	getThisWord(inout connection : InputConnection, in sentenceSeperators : String) : CharSequence
        if (null == connection) return null;
        final CharSequence prev = connection.getTextBeforeCursor(LOOKBACK_CHARACTER_NUM, 0);
        return getThisWord(prev, sentenceSeperators);
!!!12794892.java!!!	getThisWord(inout prev : CharSequence, in sentenceSeperators : String) : CharSequence
        if (prev == null) return null;
        String[] w = spaceRegex.split(prev);

        // No word : return null
        if (w.length < 1 || w[w.length - 1].length() <= 0) return null;

        // If ends in a separator, return null
        char lastChar = w[w.length - 1].charAt(w[w.length - 1].length() - 1);
        if (sentenceSeperators.contains(String.valueOf(lastChar))) return null;

        return w[w.length - 1];
