class FastXmlSerializer
!!!5551884.java!!!	append(in c : char) : void
        int pos = mPos;
        if (pos >= (BUFFER_LEN-1)) {
            flush();
            pos = mPos;
        }
        mText[pos] = c;
        mPos = pos+1;
!!!5552012.java!!!	append(in str : String, in i : int, in length : int) : void
        if (length > BUFFER_LEN) {
            final int end = i + length;
            while (i < end) {
                int next = i + BUFFER_LEN;
                append(str, i, next<end ? BUFFER_LEN : (end-i));
                i = next;
            }
            return;
        }
        int pos = mPos;
        if ((pos+length) > BUFFER_LEN) {
            flush();
            pos = mPos;
        }
        str.getChars(i, i+length, mText, pos);
        mPos = pos + length;
!!!5552140.java!!!	append(inout buf : char, in i : int, in length : int) : void
        if (length > BUFFER_LEN) {
            final int end = i + length;
            while (i < end) {
                int next = i + BUFFER_LEN;
                append(buf, i, next<end ? BUFFER_LEN : (end-i));
                i = next;
            }
            return;
        }
        int pos = mPos;
        if ((pos+length) > BUFFER_LEN) {
            flush();
            pos = mPos;
        }
        System.arraycopy(buf, i, mText, pos, length);
        mPos = pos + length;
!!!5552268.java!!!	append(in str : String) : void
        append(str, 0, str.length());
!!!5552396.java!!!	escapeAndAppendString(in string : String) : void
        final int N = string.length();
        final char NE = (char)ESCAPE_TABLE.length;
        final String[] escapes = ESCAPE_TABLE;
        int lastPos = 0;
        int pos;
        for (pos=0; pos<N; pos++) {
            char c = string.charAt(pos);
            if (c >= NE) continue;
            String escape = escapes[c];
            if (escape == null) continue;
            if (lastPos < pos) append(string, lastPos, pos-lastPos);
            lastPos = pos + 1;
            append(escape);
        }
        if (lastPos < pos) append(string, lastPos, pos-lastPos);
!!!5552524.java!!!	escapeAndAppendString(inout buf : char, in start : int, in len : int) : void
        final char NE = (char)ESCAPE_TABLE.length;
        final String[] escapes = ESCAPE_TABLE;
        int end = start+len;
        int lastPos = start;
        int pos;
        for (pos=start; pos<end; pos++) {
            char c = buf[pos];
            if (c >= NE) continue;
            String escape = escapes[c];
            if (escape == null) continue;
            if (lastPos < pos) append(buf, lastPos, pos-lastPos);
            lastPos = pos + 1;
            append(escape);
        }
        if (lastPos < pos) append(buf, lastPos, pos-lastPos);
!!!5552652.java!!!	attribute(in namespace : String, in name : String, in value : String) : XmlSerializer
        append(' ');
        if (namespace != null) {
            append(namespace);
            append(':');
        }
        append(name);
        append("=\"");

        escapeAndAppendString(value);
        append('"');
        return this;
!!!5552780.java!!!	cdsect(in text : String) : void
        throw new UnsupportedOperationException();
!!!5552908.java!!!	comment(in text : String) : void
        throw new UnsupportedOperationException();
!!!5553036.java!!!	docdecl(in text : String) : void
        throw new UnsupportedOperationException();
!!!5553164.java!!!	endDocument() : void
        flush();
!!!5553292.java!!!	endTag(in namespace : String, in name : String) : XmlSerializer
        if (mInTag) {
            append(" />\n");
        } else {
            append("</");
            if (namespace != null) {
                append(namespace);
                append(':');
            }
            append(name);
            append(">\n");
        }
        mInTag = false;
        return this;
!!!5553420.java!!!	entityRef(in text : String) : void
        throw new UnsupportedOperationException();
!!!5553548.java!!!	flushBytes() : void
        int position;
        if ((position = mBytes.position()) > 0) {
            mBytes.flip();
            mOutputStream.write(mBytes.array(), 0, position);
            mBytes.clear();
        }
!!!5553676.java!!!	flush() : void
        //Log.i("PackageManager", "flush mPos=" + mPos);
        if (mPos > 0) {
            if (mOutputStream != null) {
                CharBuffer charBuffer = CharBuffer.wrap(mText, 0, mPos);
                CoderResult result = mCharset.encode(charBuffer, mBytes, true);
                while (true) {
                    if (result.isError()) {
                        throw new IOException(result.toString());
                    } else if (result.isOverflow()) {
                        flushBytes();
                        result = mCharset.encode(charBuffer, mBytes, true);
                        continue;
                    }
                    break;
                }
                flushBytes();
                mOutputStream.flush();
            } else {
                mWriter.write(mText, 0, mPos);
                mWriter.flush();
            }
            mPos = 0;
        }
!!!5553804.java!!!	getDepth() : int
        throw new UnsupportedOperationException();
!!!5553932.java!!!	getFeature(in name : String) : boolean
        throw new UnsupportedOperationException();
!!!5554060.java!!!	getName() : String
        throw new UnsupportedOperationException();
!!!5554188.java!!!	getNamespace() : String
        throw new UnsupportedOperationException();
!!!5554316.java!!!	getPrefix(in namespace : String, inout generatePrefix : boolean) : String
        throw new UnsupportedOperationException();
!!!5554444.java!!!	getProperty(in name : String) : Object
        throw new UnsupportedOperationException();
!!!5554572.java!!!	ignorableWhitespace(in text : String) : void
        throw new UnsupportedOperationException();
!!!5554700.java!!!	processingInstruction(in text : String) : void
        throw new UnsupportedOperationException();
!!!5554828.java!!!	setFeature(in name : String, inout state : boolean) : void
        if (name.equals("http://xmlpull.org/v1/doc/features.html#indent-output")) {
            return;
        }
        throw new UnsupportedOperationException();
!!!5554956.java!!!	setOutput(inout os : OutputStream, in encoding : String) : void
        if (os == null)
            throw new IllegalArgumentException();
        if (true) {
            try {
                mCharset = Charset.forName(encoding).newEncoder();
            } catch (IllegalCharsetNameException e) {
                throw (UnsupportedEncodingException) (new UnsupportedEncodingException(
                        encoding).initCause(e));
            } catch (UnsupportedCharsetException e) {
                throw (UnsupportedEncodingException) (new UnsupportedEncodingException(
                        encoding).initCause(e));
            }
            mOutputStream = os;
        } else {
            setOutput(
                encoding == null
                    ? new OutputStreamWriter(os)
                    : new OutputStreamWriter(os, encoding));
        }
!!!5555084.java!!!	setOutput(inout writer : Writer) : void
        mWriter = writer;
!!!5555212.java!!!	setPrefix(in prefix : String, in namespace : String) : void
        throw new UnsupportedOperationException();
!!!5555340.java!!!	setProperty(in name : String, inout value : Object) : void
        throw new UnsupportedOperationException();
!!!5555468.java!!!	startDocument(in encoding : String, inout standalone : Boolean) : void
        append("<?xml version='1.0' encoding='utf-8' standalone='"
                + (standalone ? "yes" : "no") + "' ?>\n");
!!!5555596.java!!!	startTag(in namespace : String, in name : String) : XmlSerializer
        if (mInTag) {
            append(">\n");
        }
        append('<');
        if (namespace != null) {
            append(namespace);
            append(':');
        }
        append(name);
        mInTag = true;
        return this;
!!!5555724.java!!!	text(inout buf : char, in start : int, in len : int) : XmlSerializer
        if (mInTag) {
            append(">");
            mInTag = false;
        }
        escapeAndAppendString(buf, start, len);
        return this;
!!!5555852.java!!!	text(in text : String) : XmlSerializer
        if (mInTag) {
            append(">");
            mInTag = false;
        }
        escapeAndAppendString(text);
        return this;
