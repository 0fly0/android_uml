class AmpDirectA2dp
!!!11977740.cpp!!!	AmpDirectA2dp()
    mModule = load_hw_module(AUDIO_HARDWARE_MODULE_ID_A2DP);
    if (mModule == 0) {
        ERROR("Unable to load module %s", AUDIO_HARDWARE_MODULE_ID_A2DP);
        return;
    }
    mStatus = NO_ERROR;
!!!11977868.cpp!!!	~AmpDirectA2dp()
    if (mStatus == NO_ERROR)
        stopPlay();
!!!11977996.cpp!!!	startPlay() : status_t
    audio_io_handle_t io;

    if (mStatus != NO_ERROR)
        return mStatus;

    if (mOutput != 0)
        return NO_ERROR;

    for (;;) {
        uint32_t sampleRate = 44100;
        audio_format_t audioFormat = AUDIO_FORMAT_PCM_16_BIT;
        audio_channel_mask_t channelMask = audio_channel_out_mask_from_count(2);
        audio_devices_t devices = AUDIO_DEVICE_OUT_ALL_A2DP;
        uint32_t latency_in_ms = 0;
        io = audio_io_open_output(mModule, &devices,
                &sampleRate, &audioFormat, &channelMask,
                &latency_in_ms, AUDIO_OUTPUT_FLAG_NONE);
        if (io == 0) {
            DEBUG("No connected A2DP device");
            usleep(500*1000); // 0.5s
            continue;
        }

        DEBUG("A2DP: connected(%d), sampleRate(%u), channelMask(%u), audioFormat(%u)",
                io, sampleRate, channelMask, audioFormat);

        if (startReceiver() != 0) {
            printf("faile to startReceiver\n");
            audio_io_close_output(io);
            return NO_INIT;
        }

        break;
    }

    mOutput = io;

    return NO_ERROR;
!!!11978124.cpp!!!	stopPlay() : status_t
    if (mStatus != NO_ERROR)
        return mStatus;
    if (mOutput != 0) {
        stopReceiver();
        audio_io_close_output(mOutput);
        mOutput = 0;
    }
    return NO_ERROR;
!!!11978380.cpp!!!	onDataReceive(inout buffer : void, in count : size_t) : bool
    if (mOutput != 0) {
        ssize_t n = audio_io_write_output(mOutput, buffer, count);
        if (static_cast<size_t>(n) != count) {
            return false;
        }
        if (getFd() > -1)
            write(getFd(), buffer, count);
        return true;
    }
    return false;
