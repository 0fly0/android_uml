class BatteryStatsService
!!!8440972.java!!!	BatteryStatsService(in filename : String)
        mStats = new BatteryStatsImpl(filename);
!!!8441100.java!!!	publish(inout context : Context) : void
        mContext = context;
        ServiceManager.addService("batteryinfo", asBinder());
        mStats.setNumSpeedSteps(new PowerProfile(mContext).getNumSpeedSteps());
        mStats.setRadioScanningTimeout(mContext.getResources().getInteger(
                com.android.internal.R.integer.config_radioScanningTimeout)
                * 1000L);
!!!8441228.java!!!	shutdown() : void
        Slog.w("BatteryStats", "Writing battery stats before shutdown...");
        synchronized (mStats) {
            mStats.shutdownLocked();
        }
!!!8441356.java!!!	getService() : IBatteryStats
        if (sService != null) {
            return sService;
        }
        IBinder b = ServiceManager.getService("batteryinfo");
        sService = asInterface(b);
        return sService;
!!!8441484.java!!!	getActiveStatistics() : BatteryStatsImpl
        return mStats;
!!!8441612.java!!!	getStatistics() : byte
        mContext.enforceCallingPermission(
                android.Manifest.permission.BATTERY_STATS, null);
        //Slog.i("foo", "SENDING BATTERY INFO:");
        //mStats.dumpLocked(new LogPrinter(Log.INFO, "foo", Log.LOG_ID_SYSTEM));
        Parcel out = Parcel.obtain();
        mStats.writeToParcel(out, 0);
        byte[] data = out.marshall();
        out.recycle();
        return data;
!!!8441740.java!!!	noteStartWakelock(in uid : int, in pid : int, in name : String, in type : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteStartWakeLocked(uid, pid, name, type);
        }
!!!8441868.java!!!	noteStopWakelock(in uid : int, in pid : int, in name : String, in type : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteStopWakeLocked(uid, pid, name, type);
        }
!!!8441996.java!!!	noteStartWakelockFromSource(inout ws : WorkSource, in pid : int, in name : String, in type : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteStartWakeFromSourceLocked(ws, pid, name, type);
        }
!!!8442124.java!!!	noteStopWakelockFromSource(inout ws : WorkSource, in pid : int, in name : String, in type : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteStopWakeFromSourceLocked(ws, pid, name, type);
        }
!!!8442252.java!!!	noteStartSensor(in uid : int, in sensor : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteStartSensorLocked(uid, sensor);
        }
!!!8442380.java!!!	noteStopSensor(in uid : int, in sensor : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteStopSensorLocked(uid, sensor);
        }
!!!8442508.java!!!	noteStartGps(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteStartGpsLocked(uid);
        }
!!!8442636.java!!!	noteStopGps(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteStopGpsLocked(uid);
        }
!!!8442764.java!!!	noteScreenOn() : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteScreenOnLocked();
        }
!!!8442892.java!!!	noteScreenBrightness(in brightness : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteScreenBrightnessLocked(brightness);
        }
!!!8443020.java!!!	noteScreenOff() : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteScreenOffLocked();
        }
!!!8443148.java!!!	noteInputEvent() : void
        enforceCallingPermission();
        mStats.noteInputEventAtomic();
!!!8443276.java!!!	noteUserActivity(in uid : int, in event : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteUserActivityLocked(uid, event);
        }
!!!8443404.java!!!	notePhoneOn() : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.notePhoneOnLocked();
        }
!!!8443532.java!!!	notePhoneOff() : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.notePhoneOffLocked();
        }
!!!8443660.java!!!	notePhoneSignalStrength(inout signalStrength : SignalStrength) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.notePhoneSignalStrengthLocked(signalStrength);
        }
!!!8443788.java!!!	notePhoneDataConnectionState(in dataType : int, inout hasData : boolean) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.notePhoneDataConnectionStateLocked(dataType, hasData);
        }
!!!8443916.java!!!	notePhoneState(in state : int) : void
        enforceCallingPermission();
        int simState = TelephonyManager.getDefault().getSimState();
        synchronized (mStats) {
            mStats.notePhoneStateLocked(state, simState);
        }
!!!8444044.java!!!	noteWifiOn() : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiOnLocked();
        }
!!!8444172.java!!!	noteWifiOff() : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiOffLocked();
        }
!!!8444300.java!!!	noteStartAudio(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteAudioOnLocked(uid);
        }
!!!8444428.java!!!	noteStopAudio(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteAudioOffLocked(uid);
        }
!!!8444556.java!!!	noteStartVideo(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteVideoOnLocked(uid);
        }
!!!8444684.java!!!	noteStopVideo(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteVideoOffLocked(uid);
        }
!!!8444812.java!!!	noteWifiRunning(inout ws : WorkSource) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiRunningLocked(ws);
        }
!!!8444940.java!!!	noteWifiRunningChanged(inout oldWs : WorkSource, inout newWs : WorkSource) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiRunningChangedLocked(oldWs, newWs);
        }
!!!8445068.java!!!	noteWifiStopped(inout ws : WorkSource) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiStoppedLocked(ws);
        }
!!!8445196.java!!!	noteBluetoothOn() : void
        enforceCallingPermission();
        BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
        if (adapter != null) {
            adapter.getProfileProxy(mContext, mBluetoothProfileServiceListener,
                                    BluetoothProfile.HEADSET);
        }
        synchronized (mStats) {
            if (mBluetoothHeadset != null) {
                mStats.noteBluetoothOnLocked();
                mStats.setBtHeadset(mBluetoothHeadset);
            } else {
                mBluetoothPendingStats = true;
            }
        }
!!!8445324.java!!!	noteBluetoothOff() : void
        enforceCallingPermission();
        synchronized (mStats) {
            mBluetoothPendingStats = false;
            mStats.noteBluetoothOffLocked();
        }
!!!8445452.java!!!	noteFullWifiLockAcquired(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteFullWifiLockAcquiredLocked(uid);
        }
!!!8445580.java!!!	noteFullWifiLockReleased(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteFullWifiLockReleasedLocked(uid);
        }
!!!8445708.java!!!	noteWifiScanStarted(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiScanStartedLocked(uid);
        }
!!!8445836.java!!!	noteWifiScanStopped(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiScanStoppedLocked(uid);
        }
!!!8445964.java!!!	noteWifiMulticastEnabled(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiMulticastEnabledLocked(uid);
        }
!!!8446092.java!!!	noteWifiMulticastDisabled(in uid : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiMulticastDisabledLocked(uid);
        }
!!!8446220.java!!!	noteFullWifiLockAcquiredFromSource(inout ws : WorkSource) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteFullWifiLockAcquiredFromSourceLocked(ws);
        }
!!!8446348.java!!!	noteFullWifiLockReleasedFromSource(inout ws : WorkSource) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteFullWifiLockReleasedFromSourceLocked(ws);
        }
!!!8446476.java!!!	noteWifiScanStartedFromSource(inout ws : WorkSource) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiScanStartedFromSourceLocked(ws);
        }
!!!8446604.java!!!	noteWifiScanStoppedFromSource(inout ws : WorkSource) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiScanStoppedFromSourceLocked(ws);
        }
!!!8446732.java!!!	noteWifiMulticastEnabledFromSource(inout ws : WorkSource) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiMulticastEnabledFromSourceLocked(ws);
        }
!!!8446860.java!!!	noteWifiMulticastDisabledFromSource(inout ws : WorkSource) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteWifiMulticastDisabledFromSourceLocked(ws);
        }
!!!8446988.java!!!	noteNetworkInterfaceType(in iface : String, in type : int) : void
        enforceCallingPermission();
        synchronized (mStats) {
            mStats.noteNetworkInterfaceTypeLocked(iface, type);
        }
!!!8447116.java!!!	isOnBattery() : boolean
        return mStats.isOnBattery();
!!!8447244.java!!!	setBatteryState(in status : int, in health : int, in plugType : int, in level : int, in temp : int, in volt : int) : void
        enforceCallingPermission();
        mStats.setBatteryState(status, health, plugType, level, temp, volt);
!!!8447372.java!!!	getAwakeTimeBattery() : long
        mContext.enforceCallingOrSelfPermission(
                android.Manifest.permission.BATTERY_STATS, null);
        return mStats.getAwakeTimeBattery();
!!!8447500.java!!!	getAwakeTimePlugged() : long
        mContext.enforceCallingOrSelfPermission(
                android.Manifest.permission.BATTERY_STATS, null);
        return mStats.getAwakeTimePlugged();
!!!8447628.java!!!	enforceCallingPermission() : void
        if (Binder.getCallingPid() == Process.myPid()) {
            return;
        }
        mContext.enforcePermission(android.Manifest.permission.UPDATE_DEVICE_STATS,
                Binder.getCallingPid(), Binder.getCallingUid(), null);
!!!8447756.java!!!	dumpHelp(inout pw : PrintWriter) : void
        pw.println("Battery stats (batteryinfo) dump options:");
        pw.println("  [--checkin] [--reset] [--write] [-h]");
        pw.println("  --checkin: format output for a checkin report.");
        pw.println("  --reset: reset the stats, clearing all current data.");
        pw.println("  --write: force write current collected stats to disk.");
        pw.println("  -h: print this help text.");
!!!8447884.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP)
                != PackageManager.PERMISSION_GRANTED) {
            pw.println("Permission Denial: can't dump BatteryStats from from pid="
                    + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid()
                    + " without permission " + android.Manifest.permission.DUMP);
            return;
        }

        boolean isCheckin = false;
        boolean noOutput = false;
        if (args != null) {
            for (String arg : args) {
                if ("--checkin".equals(arg)) {
                    isCheckin = true;
                } else if ("--reset".equals(arg)) {
                    synchronized (mStats) {
                        mStats.resetAllStatsLocked();
                        pw.println("Battery stats reset.");
                        noOutput = true;
                    }
                } else if ("--write".equals(arg)) {
                    synchronized (mStats) {
                        mStats.writeSyncLocked();
                        pw.println("Battery stats written.");
                        noOutput = true;
                    }
                } else if ("-h".equals(arg)) {
                    dumpHelp(pw);
                    return;
                } else if ("-a".equals(arg)) {
                    // fall through
                } else {
                    pw.println("Unknown option: " + arg);
                    dumpHelp(pw);
                }
            }
        }
        if (noOutput) {
            return;
        }
        if (isCheckin) {
            List<ApplicationInfo> apps = mContext.getPackageManager().getInstalledApplications(0);
            synchronized (mStats) {
                mStats.dumpCheckinLocked(pw, args, apps);
            }
        } else {
            synchronized (mStats) {
                mStats.dumpLocked(pw);
            }
        }
