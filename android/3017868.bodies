class TvDatabase
!!!12453132.java!!!	getIntValue(inout context : Context, in key : String, in defaultValue : int) : int
        return (int) getFloatValue(context, key, defaultValue);
!!!12453260.java!!!	setValue(inout context : Context, in key : String, inout contentValues : ContentValues) : boolean
        if (queryByKey(context, key) != null) {
            return updateByKey(context, key, contentValues);
        } else {
            return insertKey(context, key, contentValues);
        }
!!!12453388.java!!!	setIntValue(inout context : Context, in key : String, in value : int) : boolean
        final ContentValues contentValues = new ContentValues();
        contentValues.put(PROPERTY_KEY, key);
        contentValues.put(PROPERTY_VALUE_NUMBER, value);
        contentValues.put(PROPERTY_TYPE, PROPERTY_VALUE_TYPE_INTEGER);

        return setValue(context, key, contentValues);
!!!12453516.java!!!	getBooleanValue(inout context : Context, in key : String, inout defaultValue : boolean) : boolean
        return Float.compare(getFloatValue(context, key, defaultValue ? 1 : 0), 1f) == 0
                ? true : false;
!!!12453644.java!!!	setBooleanValue(inout context : Context, in key : String, inout value : boolean) : boolean
        final ContentValues contentValues = new ContentValues();
        contentValues.put(PROPERTY_KEY, key);
        contentValues.put(PROPERTY_VALUE_NUMBER, value ? 1 : 0);
        contentValues.put(PROPERTY_TYPE, PROPERTY_VALUE_TYPE_BOOLEAN);

        return setValue(context, key, contentValues);
!!!12453772.java!!!	getStringValue(inout context : Context, in key : String, in defaultValue : String) : String
        String result = defaultValue;
        ContentValues values = queryByKey(context, key);
        try {
            int iValueType = values.getAsInteger(PROPERTY_TYPE);
            if (PROPERTY_VALUE_TYPE_STRING == iValueType) {
                result = values.getAsString(PROPERTY_VALUE_STRING); // (PROPERTY_VALUE_NUMBER);
                                                                    // //
                                                                    // PROPERTY_VALUE_STRING
            } else {
                throw new IllegalArgumentException("Can't find the string value for " + key);
            }
        } catch (Exception e) {
            Log.e(TAG, "Can't find the string value for " + key);
        }
        return result;
!!!12453900.java!!!	setStringValue(inout context : Context, in key : String, in value : String) : boolean
        final ContentValues contentValues = new ContentValues();
        contentValues.put(PROPERTY_KEY, key);
        contentValues.put(PROPERTY_VALUE_STRING, value);
        contentValues.put(PROPERTY_TYPE, PROPERTY_VALUE_TYPE_STRING);

        return setValue(context, key, contentValues);
!!!12454028.java!!!	getFloatValue(inout context : Context, in key : String, in defaultValue : float) : float
        float f = defaultValue;

        ContentValues values = queryByKey(context, key);
        try {
            int iValueType = values.getAsInteger(PROPERTY_TYPE);
            Log.d(TAG, "iValueType = " + iValueType);
            if (PROPERTY_VALUE_TYPE_INTEGER == iValueType ||
                    PROPERTY_VALUE_TYPE_BOOLEAN == iValueType ||
                    PROPERTY_VALUE_TYPE_FLOAT == iValueType) {
                f = values.getAsFloat(PROPERTY_VALUE_NUMBER); // PROPERTY_VALUE_STRING
            } else {
                throw new IllegalArgumentException("Can't find the value for " + key);
            }
        } catch (Exception e) {
            Log.e(TAG, "Can't find the value for " + key);
        }
        return f;
!!!12454156.java!!!	setFloatValue(inout context : Context, in key : String, in value : float) : boolean
        final ContentValues contentValues = new ContentValues();
        contentValues.put(PROPERTY_KEY, key);
        contentValues.put(PROPERTY_VALUE_NUMBER, value);
        contentValues.put(PROPERTY_TYPE, PROPERTY_VALUE_TYPE_FLOAT);

        return setValue(context, key, contentValues);
!!!12454284.java!!!	testSetValue(inout context : Context) : void
        Log.d(TAG, "Set int value " + testIntValue + " to " + testIntType);
        setIntValue(context, testIntType, testIntValue);

        Log.d(TAG, "Set bool value " + testBoolValue + " to " + testBoolType);
        setBooleanValue(context, testBoolType, testBoolValue);

        Log.d(TAG, "Set float value " + testFloatValue + " to " + testFloatType);
        setFloatValue(context, testFloatType, testFloatValue);

        Log.d(TAG, "Set string value " + testStringValue + " to " + testStringType);
        setStringValue(context, testStringType, testStringValue);
!!!12454412.java!!!	testGetValue(inout context : Context) : void
        int iValue = getIntValue(context, testIntType, 0);
        String result = iValue == testIntValue ? "right" : "fail";
        Log.d(TAG, "get int value " + testIntType + "; result is " + iValue
                + "; It is " + result);

        boolean bValue = getBooleanValue(context, testBoolType, false);
        result = bValue == testBoolValue ? "right" : "fail";
        Log.d(TAG, "get bool value " + testBoolType + "; result is " + bValue
                + "; It is " + result);

        float fValue = getFloatValue(context, testFloatType, 0f);
        result = (Float.compare(fValue, testFloatValue) == 0) ? "right" : "fail";
        Log.d(TAG, "get float value " + testFloatType + "; result is " + fValue
                + "; It is " + result);

        String sValue = getStringValue(context, testStringType, null);
        result = testStringValue.equalsIgnoreCase(sValue) ? "right" : "fail";
        Log.d(TAG, "get string value " + testStringType + "; result is " + sValue
                + "; It is " + result);
!!!12454540.java!!!	queryByKey(inout context : Context, in key : String) : ContentValues
        if (context == null)
            return null;

        String[] projection = new String[] {
                PROPERTY_VALUE_STRING, PROPERTY_VALUE_NUMBER, PROPERTY_TYPE
        };
        String selection = PROPERTY_KEY + " = ?";
        String[] selectionArgs = new String[] {
                key
        };

        Cursor cursor = null;
        try {
            cursor = context.getContentResolver().query(PROPERTY_CONTENT_URI, projection,
                    selection,
                    selectionArgs, null);
            if (cursor == null) {
                return null;
            }
            if (cursor.moveToFirst()) {
                ContentValues resultValues = new ContentValues();
                resultValues.put(PROPERTY_KEY, key);
                int type = cursor.getInt(2);
                resultValues.put(PROPERTY_TYPE, type);
                if (type == PROPERTY_VALUE_TYPE_STRING) {
                    resultValues.put(PROPERTY_VALUE_STRING, cursor.getString(0));
                } else {
                    resultValues.put(PROPERTY_VALUE_NUMBER, cursor.getFloat(1));
                }
                return resultValues;
            }
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }

        return null;
!!!12454668.java!!!	updateByKey(inout context : Context, in key : String, inout values : ContentValues) : boolean
        if (context == null)
            return false;

        String where = PROPERTY_KEY + " = ?";
        String[] selectionArgs = new String[] {
                key
        };
        int rows = context.getContentResolver().update(PROPERTY_CONTENT_URI, values, where,
                selectionArgs);

        return rows == 1 ? true : false;
!!!12454796.java!!!	insertKey(inout context : Context, in key : String, inout values : ContentValues) : boolean
        if (context == null)
            return false;

        values.put(PROPERTY_KEY, key);
        Uri uri = context.getContentResolver().insert(PROPERTY_CONTENT_URI, values);

        return uri == null ? false : true;
