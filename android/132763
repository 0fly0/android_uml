format 74
"crypto" // framework::base::opengl::java::javax::crypto
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/javax/crypto/"
  java_package "javax.crypto"
  classview 131867 "crypto"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 205851 "SecretKey"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A cryptographic secret (symmetric) key.
<p>
This interface is a <i>marker interface</i> to group secret keys and to
provide type safety for.
<p>
Implementations of this interface have to overwrite the
{@link Object#equals(Object) equals} and {@link Object#hashCode() hashCode}
from {@link java.lang.Object} so comparison is done using the actual key data
and not the object reference."
      classrelation 514971 // <generalisation>
	relation 514971 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 514971 // <generalisation>
	  b parent class_ref 202011 // Key
      end

      attribute 439707 "serialVersionUID"
	class_attribute const_attribute public explicit_type "long"
	init_value " -4795878709595146952L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The serialization version identifier.

@serial
"
      end
    end

    class 286491 "BadPaddingException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The exception that is thrown when a padding mechanism is expected for the
input data, but the input data does not have the proper padding bytes."
      classrelation 509339 // <generalisation>
	relation 509339 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 509339 // <generalisation>
	  b parent class_ref 200603 // GeneralSecurityException
      end

      attribute 436251 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5315033893984728443L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      operation 1778971 "BadPaddingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of {@code BadPaddingException} with a message.

@param msg
           the message"
      end

      operation 1779099 "BadPaddingException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of {@code BadPaddingException} with no message."
      end
    end

    class 286619 "Cipher"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides access to implementations of cryptographic ciphers for
encryption and decryption. Cipher classes can not be instantiated directly,
one has to call the Cipher's {@code getInstance} method with the name of a
requested transformation, optionally with a provider. A transformation
specifies an operation (or a set of operations) as a string in the form:
<ul>
<li><i>\"algorithm/mode/padding\"</i></li> or
<li><i>\"algorithm\"</i></li>
</ul>
<i>algorithm</i> is the name of a cryptographic algorithm, <i>mode</i> is the
name of a feedback mode and <i>padding</i> is the name of a padding scheme.
If <i>mode</i> and/or <i>padding</i> values are omitted, provider specific
default values will be used.
<p>
A valid transformation would be:
<ul>
{@code Cipher c = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");}
</ul>
When a block cipher is requested in in stream cipher mode, the number of bits
to be processed at a time can be optionally specified by appending it to the
mode name. e.g. <i>\"AES/CFB8/NoPadding\"</i>. If no number is specified, a
provider specific default value is used."
      attribute 436379 "DECRYPT_MODE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for decryption operation mode.
"
      end

      attribute 436507 "ENCRYPT_MODE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for encryption operation mode.
"
      end

      attribute 436635 "PRIVATE_KEY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant indicating that the key to be unwrapped is a private key.
"
      end

      attribute 436763 "PUBLIC_KEY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant indicating that the key to be unwrapped is a public key.
"
      end

      attribute 436891 "SECRET_KEY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant indicating that the key to be unwrapped is a secret key.
"
      end

      attribute 437019 "UNWRAP_MODE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for key unwrapping operation mode.
"
      end

      attribute 437147 "WRAP_MODE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Constant for key wrapping operation mode.
"
      end

      attribute 437275 "mode"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 509467 // SERVICE (<unidirectional association>)
	relation 509467 --->
	  a role_name "SERVICE" init_value " \"Cipher\"" class_relation const_relation private
	    comment "
The service name.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 509467 // SERVICE (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 509595 // ENGINE (<unidirectional association>)
	relation 509595 --->
	  a role_name "ENGINE" init_value " new Engine(SERVICE)" class_relation const_relation private
	    comment "
Used to access common engine functionality.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 509595 // ENGINE (<unidirectional association>)
	  b parent class_ref 195355 // Engine
      end

      classrelation 509723 // provider (<unidirectional association>)
	relation 509723 --->
	  a role_name "provider" private
	    comment "
The provider.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 509723 // provider (<unidirectional association>)
	  b parent class_ref 195611 // Provider
      end

      classrelation 509851 // spiImpl (<unidirectional association>)
	relation 509851 --->
	  a role_name "spiImpl" private
	    comment "
The SPI implementation.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 509851 // spiImpl (<unidirectional association>)
	  b parent class_ref 286747 // CipherSpi
      end

      classrelation 509979 // transformation (<unidirectional association>)
	relation 509979 --->
	  a role_name "transformation" private
	    comment "
The transformation.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 509979 // transformation (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 510107 // secureRandom (<unidirectional association>)
	relation 510107 --->
	  a role_name "secureRandom" class_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 510107 // secureRandom (<unidirectional association>)
	  b parent class_ref 195483 // SecureRandom
      end

      operation 1779227 "Cipher"
	protected explicit_return_type ""
	nparams 3
	  param inout name "cipherSpi" type class_ref 286747 // CipherSpi
	  param inout name "provider" type class_ref 195611 // Provider
	  param inout name "transformation" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new Cipher instance.

@param cipherSpi
           the implementation delegate of the cipher.
@param provider
           the provider of the implementation of this cipher.
@param transformation
           the name of the transformation that this cipher performs.
@throws NullPointerException
            if either cipherSpi is {@code null} or provider is {@code
            null} and {@code cipherSpi} is a {@code NullCipherSpi}."
      end

      operation 1779355 "getInstance"
	class_operation public return_type class_ref 286619 // Cipher
	nparams 1
	  param inout name "transformation" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 286875 // NoSuchPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new Cipher for the specified transformation. The installed
providers are searched in order for an implementation of the specified
transformation. The first found provider providing the transformation is
used to create the cipher. If no provider is found an exception is
thrown.

@param transformation
           the name of the transformation to create a cipher for.
@return a cipher for the requested transformation.
@throws NoSuchAlgorithmException
            if no installed provider can provide the
            <i>transformation</i>, or it is {@code null}, empty or in an
            invalid format.
@throws NoSuchPaddingException
            if no installed provider can provide the padding scheme in
            the <i>transformation</i>."
      end

      operation 1779483 "getInstance"
	class_operation public return_type class_ref 286619 // Cipher
	nparams 2
	  param inout name "transformation" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 3399692 // String
	nexceptions 3
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 195995 // NoSuchProviderException
	  exception class_ref 286875 // NoSuchPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new cipher for the specified transformation provided by the
specified provider.

@param transformation
           the name of the transformation to create a cipher for.
@param provider
           the name of the provider to ask for the transformation.
@return a cipher for the requested transformation.
@throws NoSuchAlgorithmException
            if the specified provider can not provide the
            <i>transformation</i>, or it is {@code null}, empty or in an
            invalid format.
@throws NoSuchProviderException
            if no provider with the specified name can be found.
@throws NoSuchPaddingException
            if the requested padding scheme in the <i>transformation</i>
            is not available.
@throws IllegalArgumentException
            if the specified provider is {@code null}."
      end

      operation 1779611 "getInstance"
	class_operation public return_type class_ref 286619 // Cipher
	nparams 2
	  param inout name "transformation" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 195611 // Provider
	nexceptions 2
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 286875 // NoSuchPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new cipher for the specified transformation.

@param transformation
           the name of the transformation to create a cipher for.
@param provider
           the provider to ask for the transformation.
@return a cipher for the requested transformation.
@throws NoSuchAlgorithmException
            if the specified provider can not provide the
            <i>transformation</i>, or it is {@code null}, empty or in an
            invalid format.
@throws NoSuchPaddingException
            if the requested padding scheme in the <i>transformation</i>
            is not available.
@throws IllegalArgumentException
            if the provider is {@code null}."
      end

      operation 1779739 "invalidTransformation"
	class_operation private return_type class_ref 195867 // NoSuchAlgorithmException
	nparams 1
	  param inout name "transformation" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1779867 "getCipher"
	class_operation private return_type class_ref 286619 // Cipher
	nparams 2
	  param inout name "transformation" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 195611 // Provider
	nexceptions 2
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 286875 // NoSuchPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Find appropriate Cipher according the specification rules

@param transformation
@param provider
@return
@throws NoSuchAlgorithmException
@throws NoSuchPaddingException"
      end

      operation 1779995 "checkTransformation"
	class_operation private return_type class_ref 3399692 // String
	nparams 1
	  param inout name "transformation" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1780123 "getProvider"
	public return_type class_ref 195611 // Provider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this cipher instance.

@return the provider of this cipher instance."
      end

      operation 1780251 "getAlgorithm"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the algorithm of this cipher instance.
<p>
This is the name of the <i>transformation</i> argument used in the
{@code getInstance} call creating this object.

@return the name of the algorithm of this cipher instance."
      end

      operation 1780379 "getBlockSize"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this ciphers block size (in bytes).

@return this ciphers block size."
      end

      operation 1780507 "getOutputSize"
	public explicit_return_type "int"
	nparams 1
	  param in name "inputLen" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length in bytes an output buffer needs to be when this cipher
is updated with {@code inputLen} bytes.

@param inputLen
           the number of bytes of the input.
@return the output buffer length for the input length.
@throws IllegalStateException
            if this cipher instance is in an invalid state."
      end

      operation 1780635 "getIV"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the <i>initialization vector</i> for this cipher instance.

@return the <i>initialization vector</i> for this cipher instance."
      end

      operation 1780763 "getParameters"
	public return_type class_ref 196379 // AlgorithmParameters
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameters that where used to create this cipher instance.
<p>
These may be a the same parameters that were used to create this cipher
instance, or may be a combination of default and random parameters,
depending on the underlying cipher implementation.

@return the parameters that where used to create this cipher instance, or
        {@code null} if this cipher instance does not have any
        parameters."
      end

      operation 1780891 "getExemptionMechanism"
	public return_type class_ref 287003 // ExemptionMechanism
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exemption mechanism associated with this cipher.

@return currently {@code null}"
      end

      operation 1781019 "init"
	public explicit_return_type "void"
	nparams 2
	  param in name "opmode" explicit_type "int"
	  param inout name "key" type class_ref 202011 // Key
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this cipher instance with the specified key.
<p>
The cipher is initialized for the specified operational mode (one of:
encryption, decryption, key wrapping or key unwrapping) depending on
{@code opmode}.
<p>
If this cipher instance needs any algorithm parameters or random values
that the specified key can not provide, the underlying implementation of
this cipher is supposed to generate the required parameters (using its
provider or random values).
<p>
When a cipher instance is initialized by a call to any of the {@code
init} methods, the state of the instance is overridden, meaning that it
is equivalent to creating a new instance and calling its {@code init}
method.

@param opmode
           the operation this cipher instance should be initialized for
           (one of: {@code ENCRYPT_MODE}, {@code DECRYPT_MODE}, {@code
           WRAP_MODE} or {@code UNWRAP_MODE}).
@param key
           the input key for the operation.
@throws InvalidKeyException
            if the specified key can not be used to initialize this
            cipher instance."
      end

      operation 1781147 "init"
	public explicit_return_type "void"
	nparams 3
	  param in name "opmode" explicit_type "int"
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this cipher instance with the specified key and a source of
randomness.
<p>
The cipher is initialized for the specified operational mode (one of:
encryption, decryption, key wrapping or key unwrapping) depending on
{@code opmode}.
<p>
If this cipher instance needs any algorithm parameters or random values
that the specified key can not provide, the underlying implementation of
this cipher is supposed to generate the required parameters (using its
provider or random values). Random values are generated using {@code
random};
<p>
When a cipher instance is initialized by a call to any of the {@code
init} methods, the state of the instance is overridden, means it is
equivalent to creating a new instance and calling it {@code init} method.

@param opmode
           the operation this cipher instance should be initialized for
           (one of: {@code ENCRYPT_MODE}, {@code DECRYPT_MODE}, {@code
           WRAP_MODE} or {@code UNWRAP_MODE}).
@param key
           the input key for the operation.
@param random
           the source of randomness to use.
@throws InvalidKeyException
            if the specified key can not be used to initialize this
            cipher instance.
@throws InvalidParameterException
            if the specified opmode is invalid."
      end

      operation 1781275 "checkMode"
	private explicit_return_type "void"
	nparams 1
	  param in name "mode" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1781403 "init"
	public explicit_return_type "void"
	nparams 3
	  param in name "opmode" explicit_type "int"
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this cipher instance with the specified key and algorithm
parameters.
<p>
The cipher is initialized for the specified operational mode (one of:
encryption, decryption, key wrapping or key unwrapping).
<p>
If this cipher instance needs any algorithm parameters and {@code params}
is {@code null}, the underlying implementation of this cipher is supposed
to generate the required parameters (using its provider or random
values).
<p>
When a cipher instance is initialized by a call to any of the {@code
init} methods, the state of the instance is overridden, means it is
equivalent to creating a new instance and calling it {@code init} method.

@param opmode
           the operation this cipher instance should be initialized for
           (one of: {@code ENCRYPT_MODE}, {@code DECRYPT_MODE}, {@code
           WRAP_MODE} or {@code UNWRAP_MODE}).
@param key
           the input key for the operation.
@param params
           the algorithm parameters.
@throws InvalidKeyException
            if the specified key can not be used to initialize this
            cipher instance.
@throws InvalidAlgorithmParameterException
            it the specified parameters are inappropriate for this
            cipher."
      end

      operation 1781531 "init"
	public explicit_return_type "void"
	nparams 4
	  param in name "opmode" explicit_type "int"
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this cipher instance with the specified key, algorithm
parameters and a source of randomness.
<p>
The cipher is initialized for the specified operational mode (one of:
encryption, decryption, key wrapping or key unwrapping) depending on
{@code opmode}.
<p>
If this cipher instance needs any algorithm parameters and {@code params}
is {@code null}, the underlying implementation of this cipher is supposed
to generate the required parameters (using its provider or random
values). Random values are generated using {@code random};
<p>
When a cipher instance is initialized by a call to any of the {@code
init} methods, the state of the instance is overridden, meaning that it
is equivalent to creating a new instance and calling it {@code init}
method.

@param opmode
           the operation this cipher instance should be initialized for
           (one of: {@code ENCRYPT_MODE}, {@code DECRYPT_MODE}, {@code
           WRAP_MODE} or {@code UNWRAP_MODE}).
@param key
           the input key for the operation.
@param params
           the algorithm parameters.
@param random
           the source of randomness to use.
@throws InvalidKeyException
            if the specified key can not be used to initialize this
            cipher instance.
@throws InvalidAlgorithmParameterException
            it the specified parameters are inappropriate for this
            cipher.
@throws InvalidParameterException
            if the specified {@code opmode} is invalid."
      end

      operation 1781659 "init"
	public explicit_return_type "void"
	nparams 3
	  param in name "opmode" explicit_type "int"
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196379 // AlgorithmParameters
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this cipher instance with the specified key and algorithm
parameters.
<p>
The cipher is initialized for the specified operation (one of:
encryption, decryption, key wrapping or key unwrapping) depending on
{@code opmode}.
<p>
If this cipher instance needs any algorithm parameters and {@code params}
is {@code null}, the underlying implementation of this cipher is supposed
to generate the required parameters (using its provider or random
values).
<p>
When a cipher instance is initialized by a call to any of the {@code
init} methods, the state of the instance is overridden, meaning that it
is equivalent to creating a new instance and calling it {@code init}
method.

@param opmode
           the operation this cipher instance should be initialized for
           (one of: {@code ENCRYPT_MODE}, {@code DECRYPT_MODE}, {@code
           WRAP_MODE} or {@code UNWRAP_MODE}).
@param key
           the input key for the operation.
@param params
           the algorithm parameters.
@throws InvalidKeyException
            if the specified key can not be used to initialize this
            cipher instance.
@throws InvalidAlgorithmParameterException
            it the specified parameters are inappropriate for this
            cipher."
      end

      operation 1781787 "init"
	public explicit_return_type "void"
	nparams 4
	  param in name "opmode" explicit_type "int"
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196379 // AlgorithmParameters
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this cipher instance with the specified key, algorithm
parameters and a source of randomness.
<p>
The cipher will be initialized for the specified operation (one of:
encryption, decryption, key wrapping or key unwrapping) depending on
{@code opmode}.
<p>
If this cipher instance needs any algorithm parameters and {@code params}
is {@code null}, the underlying implementation of this cipher is supposed
to generate the required parameters (using its provider or random
values). Random values are generated using {@code random}.
<p>
When a cipher instance is initialized by a call to any of the {@code
init} methods, the state of the instance is overridden, means it is
equivalent to creating a new instance and calling it {@code init} method.

@param opmode
           the operation this cipher instance should be initialized for
           (one of: {@code ENCRYPT_MODE}, {@code DECRYPT_MODE}, {@code
           WRAP_MODE} or {@code UNWRAP_MODE}).
@param key
           the input key for the operation.
@param params
           the algorithm parameters.
@param random
           the source of randomness to use.
@throws InvalidKeyException
            if the specified key can not be used to initialize this
            cipher instance.
@throws InvalidAlgorithmParameterException
            if the specified parameters are inappropriate for this
            cipher.
@throws InvalidParameterException
            if the specified {@code opmode} is invalid."
      end

      operation 1781915 "init"
	public explicit_return_type "void"
	nparams 2
	  param in name "opmode" explicit_type "int"
	  param inout name "certificate" type class_ref 173595 // Certificate
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this cipher instance with the public key from the specified
certificate.
<p>
The cipher will be initialized for the specified operation (one of:
encryption, decryption, key wrapping or key unwrapping) depending on
{@code opmode}.
<p>
It the type of the certificate is X.509 and the certificate has a <i>key
usage</i> extension field marked as critical, the specified {@code
opmode} has the be enabled for this key, otherwise an {@code
InvalidKeyException} is thrown.
<p>
If this cipher instance needs any algorithm parameters that the key in
the certificate can not provide, the underlying implementation of this
cipher is supposed to generate the required parameters (using its
provider or random values).
<p>
When a cipher instance is initialized by a call to any of the {@code
init} methods, the state of the instance is overridden, means it is
equivalent to creating a new instance and calling it {@code init} method.

@param opmode
           the operation this cipher instance should be initialized for
           (one of: {@code ENCRYPT_MODE}, {@code DECRYPT_MODE}, {@code
           WRAP_MODE} or {@code UNWRAP_MODE}).
@param certificate
           the certificate.
@throws InvalidKeyException
            if the public key in the certificate can not be used to
            initialize this cipher instance."
      end

      operation 1782043 "init"
	public explicit_return_type "void"
	nparams 3
	  param in name "opmode" explicit_type "int"
	  param inout name "certificate" type class_ref 173595 // Certificate
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this cipher instance with the public key from the specified
certificate and a source of randomness.
<p>
The cipher will be initialized for the specified operation (one of:
encryption, decryption, key wrapping or key unwrapping) depending on
{@code opmode}.
<p>
It the type of the certificate is X.509 and the certificate has a <i>key
usage</i> extension field marked as critical, the specified {@code
opmode} has the be enabled for this key, otherwise an {@code
InvalidKeyException} is thrown.
<p>
If this cipher instance needs any algorithm parameters that the key in
the certificate can not provide, the underlying implementation of this
cipher is supposed to generate the required parameters (using its
provider or random values). Random values are generated using {@code
random}.
<p>
When a cipher instance is initialized by a call to any of the {@code
init} methods, the state of the instance is overridden, means it is
equivalent to creating a new instance and calling it {@code init} method.

@param opmode
           the operation this cipher instance should be initialized for
           (one of: {@code ENCRYPT_MODE}, {@code DECRYPT_MODE}, {@code
           WRAP_MODE} or {@code UNWRAP_MODE}).
@param certificate
           the certificate.
@param random
           the source of randomness to be used.
@throws InvalidKeyException
            if the public key in the certificate can not be used to
            initialize this cipher instance."
      end

      operation 1782171 "update"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "input" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Continues a multi-part transformation (encryption or decryption). The
transformed bytes are returned.

@param input
           the input bytes to transform.
@return the transformed bytes in a new buffer, or {@code null} if the
        input has zero length.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption.
@throws IllegalArgumentException
            if the input is {@code null}."
      end

      operation 1782299 "update"
	public explicit_return_type "byte"
	nparams 3
	  param inout name "input" explicit_type "byte"
	  param in name "inputOffset" explicit_type "int"
	  param in name "inputLen" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Continues a multi-part transformation (encryption or decryption). The
transformed bytes are returned.

@param input
           the input bytes to transform.
@param inputOffset
           the offset in the input to start.
@param inputLen
           the length of the input to transform.
@return the transformed bytes in a new buffer, or {@code null} if the
        input has zero length.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption.
@throws IllegalArgumentException
            if the input is {@code null}, or if {@code inputOffset} and
            {@code inputLen} do not specify a valid chunk in the input
            buffer."
      end

      operation 1782427 "checkInputOffsetAndCount"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "inputArrayLength" explicit_type "int"
	  param in name "inputOffset" explicit_type "int"
	  param in name "inputLen" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1782555 "update"
	public explicit_return_type "int"
	nparams 4
	  param inout name "input" explicit_type "byte"
	  param in name "inputOffset" explicit_type "int"
	  param in name "inputLen" explicit_type "int"
	  param inout name "output" explicit_type "byte"
	nexceptions 1
	  exception class_ref 287131 // ShortBufferException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Continues a multi-part transformation (encryption or decryption). The
transformed bytes are stored in the {@code output} buffer.
<p>
If the size of the {@code output} buffer is too small to hold the result,
a {@code ShortBufferException} is thrown. Use
{@link Cipher#getOutputSize getOutputSize} to check for the size of the
output buffer.

@param input
           the input bytes to transform.
@param inputOffset
           the offset in the input to start.
@param inputLen
           the length of the input to transform.
@param output
           the output buffer.
@return the number of bytes placed in output.
@throws ShortBufferException
            if the size of the {@code output} buffer is too small.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption.
@throws IllegalArgumentException
            if the input is {@code null}, the output is {@code null}, or
            if {@code inputOffset} and {@code inputLen} do not specify a
            valid chunk in the input buffer."
      end

      operation 1782683 "update"
	public explicit_return_type "int"
	nparams 5
	  param inout name "input" explicit_type "byte"
	  param in name "inputOffset" explicit_type "int"
	  param in name "inputLen" explicit_type "int"
	  param inout name "output" explicit_type "byte"
	  param in name "outputOffset" explicit_type "int"
	nexceptions 1
	  exception class_ref 287131 // ShortBufferException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Continues a multi-part transformation (encryption or decryption). The
transformed bytes are stored in the {@code output} buffer.
<p>
If the size of the {@code output} buffer is too small to hold the result,
a {@code ShortBufferException} is thrown. Use
{@link Cipher#getOutputSize getOutputSize} to check for the size of the
output buffer.

@param input
           the input bytes to transform.
@param inputOffset
           the offset in the input to start.
@param inputLen
           the length of the input to transform.
@param output
           the output buffer.
@param outputOffset
           the offset in the output buffer.
@return the number of bytes placed in output.
@throws ShortBufferException
            if the size of the {@code output} buffer is too small.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption.
@throws IllegalArgumentException
            if the input is {@code null}, the output is {@code null}, or
            if {@code inputOffset} and {@code inputLen} do not specify a
            valid chunk in the input buffer."
      end

      operation 1782811 "update"
	public explicit_return_type "int"
	nparams 2
	  param inout name "input" type class_ref 142363 // ByteBuffer
	  param inout name "output" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 287131 // ShortBufferException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Continues a multi-part transformation (encryption or decryption). The
{@code input.remaining()} bytes starting at {@code input.position()} are
transformed and stored in the {@code output} buffer.
<p>
If the {@code output.remaining()} is too small to hold the transformed
bytes a {@code ShortBufferException} is thrown. Use
{@link Cipher#getOutputSize getOutputSize} to check for the size of the
output buffer.

@param input
           the input buffer to transform.
@param output
           the output buffer to store the result within.
@return the number of bytes stored in the output buffer.
@throws ShortBufferException
            if the size of the {@code output} buffer is too small.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption.
@throws IllegalArgumentException
            if the input buffer and the output buffer are the identical
            object."
      end

      operation 1782939 "doFinal"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 2
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 286491 // BadPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes a multi-part transformation (encryption or decryption).
<p>
Processes any bytes that may have been buffered in previous {@code
update} calls.

@return the final bytes from the transformation.
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws BadPaddingException
            if the padding of the data does not match the padding scheme.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption."
      end

      operation 1783067 "doFinal"
	public explicit_return_type "int"
	nparams 2
	  param inout name "output" explicit_type "byte"
	  param in name "outputOffset" explicit_type "int"
	nexceptions 3
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 287131 // ShortBufferException
	  exception class_ref 286491 // BadPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes a multi-part transformation (encryption or decryption).
<p>
Processes any bytes that may have been buffered in previous {@code
update} calls.
<p>
The final transformed bytes are stored in the {@code output} buffer.

@param output
           the output buffer.
@param outputOffset
           the offset in the output buffer.
@return the number of bytes placed in the output buffer.
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws ShortBufferException
            if the size of the {@code output} buffer is too small.
@throws BadPaddingException
            if the padding of the data does not match the padding scheme.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption."
      end

      operation 1783195 "doFinal"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "input" explicit_type "byte"
	nexceptions 2
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 286491 // BadPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes a multi-part transformation (encryption or decryption).
<p>
Processes the bytes in {@code input} buffer, and any bytes that have been
buffered in previous {@code update} calls.

@param input
           the input buffer.
@return the final bytes from the transformation.
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws BadPaddingException
            if the padding of the data does not match the padding scheme.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption."
      end

      operation 1783323 "doFinal"
	public explicit_return_type "byte"
	nparams 3
	  param inout name "input" explicit_type "byte"
	  param in name "inputOffset" explicit_type "int"
	  param in name "inputLen" explicit_type "int"
	nexceptions 2
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 286491 // BadPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes a multi-part transformation (encryption or decryption).
<p>
Processes the {@code inputLen} bytes in {@code input} buffer at {@code
inputOffset}, and any bytes that have been buffered in previous {@code
update} calls.

@param input
           the input buffer.
@param inputOffset
           the offset in the input buffer.
@param inputLen
           the length of the input
@return the final bytes from the transformation.
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws BadPaddingException
            if the padding of the data does not match the padding scheme.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption.
@throws IllegalArgumentException
            if {@code inputOffset} and {@code inputLen} do not specify an
            valid chunk in the input buffer."
      end

      operation 1783451 "doFinal"
	public explicit_return_type "int"
	nparams 4
	  param inout name "input" explicit_type "byte"
	  param in name "inputOffset" explicit_type "int"
	  param in name "inputLen" explicit_type "int"
	  param inout name "output" explicit_type "byte"
	nexceptions 3
	  exception class_ref 287131 // ShortBufferException
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 286491 // BadPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes a multi-part transformation (encryption or decryption).
<p>
Processes the {@code inputLen} bytes in {@code input} buffer at {@code
inputOffset}, and any bytes that have been buffered in previous {@code
update} calls.

@param input
           the input buffer.
@param inputOffset
           the offset in the input buffer.
@param inputLen
           the length of the input.
@param output
           the output buffer for the transformed bytes.
@return the number of bytes placed in the output buffer.
@throws ShortBufferException
            if the size of the {@code output} buffer is too small.
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws BadPaddingException
            if the padding of the data does not match the padding scheme.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption.
@throws IllegalArgumentException
            if {@code inputOffset} and {@code inputLen} do not specify an
            valid chunk in the input buffer."
      end

      operation 1783579 "doFinal"
	public explicit_return_type "int"
	nparams 5
	  param inout name "input" explicit_type "byte"
	  param in name "inputOffset" explicit_type "int"
	  param in name "inputLen" explicit_type "int"
	  param inout name "output" explicit_type "byte"
	  param in name "outputOffset" explicit_type "int"
	nexceptions 3
	  exception class_ref 287131 // ShortBufferException
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 286491 // BadPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes a multi-part transformation (encryption or decryption).
<p>
Processes the {@code inputLen} bytes in {@code input} buffer at {@code
inputOffset}, and any bytes that have been buffered in previous {@code
update} calls.

@param input
           the input buffer.
@param inputOffset
           the offset in the input buffer.
@param inputLen
           the length of the input.
@param output
           the output buffer for the transformed bytes.
@param outputOffset
           the offset in the output buffer.
@return the number of bytes placed in the output buffer.
@throws ShortBufferException
            if the size of the {@code output} buffer is too small.
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws BadPaddingException
            if the padding of the data does not match the padding scheme.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption.
@throws IllegalArgumentException
            if {@code inputOffset} and {@code inputLen} do not specify an
            valid chunk in the input buffer."
      end

      operation 1783707 "doFinal"
	public explicit_return_type "int"
	nparams 2
	  param inout name "input" type class_ref 142363 // ByteBuffer
	  param inout name "output" type class_ref 142363 // ByteBuffer
	nexceptions 3
	  exception class_ref 287131 // ShortBufferException
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 286491 // BadPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes a multi-part transformation (encryption or decryption).
<p>
Processes the {@code input.remaining()} bytes in {@code input} buffer at
{@code input.position()}, and any bytes that have been buffered in
previous {@code update} calls. The transformed bytes are placed into
{@code output} buffer.

@param input
           the input buffer.
@param output
           the output buffer.
@return the number of bytes placed into the output buffer.
@throws ShortBufferException
            if the size of the {@code output} buffer is too small.
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws BadPaddingException
            if the padding of the data does not match the padding scheme.
@throws IllegalArgumentException
            if the input buffer and the output buffer are the same
            object.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption."
      end

      operation 1783835 "wrap"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "key" type class_ref 202011 // Key
	nexceptions 2
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wraps a key using this cipher instance.

@param key
           the key to wrap.
@return the wrapped key.
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws InvalidKeyException
            if this cipher instance can not wrap this key.
@throws IllegalStateException
            if this cipher instance is not initialized for wrapping."
      end

      operation 1783963 "unwrap"
	public return_type class_ref 202011 // Key
	nparams 3
	  param inout name "wrappedKey" explicit_type "byte"
	  param inout name "wrappedKeyAlgorithm" type class_ref 3399692 // String
	  param in name "wrappedKeyType" explicit_type "int"
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unwraps a key using this cipher instance.

@param wrappedKey
           the wrapped key to unwrap.
@param wrappedKeyAlgorithm
           the algorithm for the wrapped key.
@param wrappedKeyType
           the type of the wrapped key (one of: {@code SECRET_KEY
           <code>, <code>PRIVATE_KEY} or {@code PUBLIC_KEY})
@return the unwrapped key
@throws InvalidKeyException
            if the {@code wrappedKey} can not be unwrapped to a key of
            type {@code wrappedKeyType} for the {@code
            wrappedKeyAlgorithm}.
@throws NoSuchAlgorithmException
            if no provider can be found that can create a key of type
            {@code wrappedKeyType} for the {@code wrappedKeyAlgorithm}.
@throws IllegalStateException
            if this cipher instance is not initialized for unwrapping."
      end

      operation 1784091 "getMaxAllowedKeyLength"
	class_operation public explicit_return_type "int"
	nparams 1
	  param inout name "transformation" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum key length for the specified transformation.

@param transformation
           the transformation name.
@return the maximum key length, currently {@code Integer.MAX_VALUE}.
@throws NoSuchAlgorithmException
            if no provider for the specified {@code transformation} can
            be found.
@throws NullPointerException
            if {@code transformation} is {@code null}."
      end

      operation 1784219 "getMaxAllowedParameterSpec"
	class_operation public return_type class_ref 196123 // AlgorithmParameterSpec
	nparams 1
	  param inout name "transformation" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum cipher parameter value for the specified
transformation. If there is no maximum limit, {@code null} is returned.

@param transformation
           the transformation name.
@return a parameter spec holding the maximum value or {@code null}.
        Currently {@code null}.
@throws NoSuchAlgorithmException
            if no provider for the specified {@code transformation} can
            be found.
@throws NullPointerException
            if {@code transformation} is {@code null}."
      end
    end

    class 286747 "CipherSpi"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class defines the <i>Service Provider Interface</i> (<b>SPI</b>) for
cryptographic ciphers.
<p>
Implementers of cryptographic ciphers must implement all the abstract methods
for every cipher they implement. {@code CipherSpi} instances are created
along with ciphers when the {@link Cipher#getInstance} method is called. A
{@code Cipher} is referenced by a <i>transformation</i>, which is a string
that describes the operation (or set of operations), always consisting of the
cipher's name and optionally followed by a mode and a padding, in the form:
<ul>
<li>\"algorithm\"</li>or
<li>\"algorithm/mode/padding\"</li>
</ul>
The following behavior should be implemented for obtaining {@code Cipher}
instances.
<p>
When one of the {@link Cipher#getInstance} factory methods is called with a
<i>transformation</i> that is only an <i>algorithm</i>, check if the provider
defines a {@code CipherSpi} for \"algorithm\", if so: return it, otherwise
throw a {@link NoSuchAlgorithmException}.
<p>
The following rules apply when a <i>transformation</i> is of the form
\"algorithm/mode/padding\":
<ul>
1. The Provider has a {@code CipherSpi} subclass registered for
\"algorithm/mode/padding\": return it, otherwise go to step 2.
</ul>
<ul>
2. The Provider has a {@code CipherSpi} subclass registered for
\"algorithm/mode\": instantiate it, call
{@link CipherSpi#engineSetPadding(String) engineSetPadding(String)} for the
padding name and return it, otherwise go to step 3.
</ul>
<ul>
3. The Provider has a {@code CipherSpi} subclass registered for
\"algorithm//padding\": instantiate it, call
{@link CipherSpi#engineSetMode(String) engineSetMode(String)} for the mode
name and return it, otherwise go to step 4.
</ul>
<ul>
4. The Provider has a {@code CipherSpi} subclass registered for \"algorithm\":
instantiate it, call {@link CipherSpi#engineSetMode(String)
engineSetMode(String)} for the mode name , call
{@link CipherSpi#engineSetPadding(String) engineSetPadding(String)} for the
padding name and return it, otherwise throw a
{@link NoSuchAlgorithmException}.
</ul>

@see Cipher"
      operation 1786139 "CipherSpi"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code CipherSpi} instance."
      end

      operation 1786267 "engineSetMode"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "mode" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the mode for this cipher.

@param mode
           the name of the cipher mode.
@throws NoSuchAlgorithmException
            if the specified cipher mode is not supported by this
            provider."
      end

      operation 1786395 "engineSetPadding"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "padding" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 286875 // NoSuchPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the padding method for this cipher.

@param padding
           the name of the padding method.
@throws NoSuchPaddingException
            if the specified padding method is not supported by this
            cipher."
      end

      operation 1786523 "engineGetBlockSize"
	abstract protected explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the block size of this cipher (in bytes)

@return the block size of this cipher, or zero if this cipher is not a
        block cipher."
      end

      operation 1786651 "engineGetOutputSize"
	abstract protected explicit_return_type "int"
	nparams 1
	  param in name "inputLen" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size for a buffer (in bytes), that the next call to {@code
update} of {@code doFinal} would return, taking into account any buffered
data from previous {@code update} calls and padding.
<p>
The actual output length of the next call to {@code update} or {@code
doFinal} may be smaller than the length returned by this method.

@param inputLen
           the length of the input (in bytes).
@return the size for a buffer (in bytes)."
      end

      operation 1786779 "engineGetIV"
	abstract protected explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the Initialization Vector (IV) that was used to initialize this
cipher or {@code null} if none was used.

@return the Initialization Vector (IV), or {@code null} if none was used."
      end

      operation 1786907 "engineGetParameters"
	abstract protected return_type class_ref 196379 // AlgorithmParameters
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameters that where used to create this cipher instance.
<p>
These may be a the same parameters that were used to create this cipher
instance, or may be a combination of default and random parameters,
depending on the underlying cipher implementation.

@return the parameters that where used to create this cipher instance, or
        {@code null} if this cipher instance does not have any parameters
        at all."
      end

      operation 1787035 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 3
	  param in name "opmode" explicit_type "int"
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this cipher instance with the specified key and a source of
randomness.
<p>
The cipher will be initialized for the specified operation (one of:
encryption, decryption, key wrapping or key unwrapping) depending on
{@code opmode}.
<p>
If this cipher instance needs any algorithm parameters or random values
that the specified key cannot provide, the underlying implementation of
this cipher is supposed to generate the required parameters (using its
provider or random values). Random values will be generated using {@code
random};
<p>
When a cipher instance is initialized by a call to any of the {@code
init} methods, the state of the instance is overridden, means it is
equivalent to creating a new instance and calling it {@code init} method.

@param opmode
           the operation this cipher instance should be initialized for
           (one of: {@code ENCRYPT_MODE}, {@code DECRYPT_MODE}, {@code
           WRAP_MODE} or {@code UNWRAP_MODE}).
@param key
           the input key for the operation.
@param random
           the source of randomness to use.
@throws InvalidKeyException
            if the specified key cannot be used to initialize this cipher
            instance."
      end

      operation 1787163 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 4
	  param in name "opmode" explicit_type "int"
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this cipher instance with the specified key, algorithm
parameters and a source of randomness.
<p>
The cipher will be initialized for the specified operation (one of:
encryption, decryption, key wrapping or key unwrapping) depending on
{@code opmode}.
<p>
If this cipher instance needs any algorithm parameters and {@code params}
is {@code null}, the underlying implementation of this cipher is supposed
to generate the required parameters (using its provider or random
values). Random values are generated using {@code random}.
<p>
When a cipher instance is initialized by a call to any of the {@code
init} methods, the state of the instance is overridden, means it is
equivalent to creating a new instance and calling it {@code init} method.

@param opmode
           the operation this cipher instance should be initialized for
           (one of: {@code ENCRYPT_MODE}, {@code DECRYPT_MODE}, {@code
           WRAP_MODE} or {@code UNWRAP_MODE}).
@param key
           the input key for the operation.
@param params
           the algorithm parameters.
@param random
           the source of randomness to use.
@throws InvalidKeyException
            if the specified key cannot be used to initialize this cipher
            instance.
@throws InvalidAlgorithmParameterException
            it the specified parameters are inappropriate for this
            cipher."
      end

      operation 1787291 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 4
	  param in name "opmode" explicit_type "int"
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196379 // AlgorithmParameters
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this cipher instance with the specified key, algorithm
parameters and a source of randomness.
<p>
The cipher will be initialized for the specified operation (one of:
encryption, decryption, key wrapping or key unwrapping) depending on
{@code opmode}.
<p>
If this cipher instance needs any algorithm parameters and {@code params}
is {@code null}, the underlying implementation of this cipher is supposed
to generate the required parameters (using its provider or random
values). Random values are generated using {@code random}.
<p>
When a cipher instance is initialized by a call to any of the {@code
init} methods, the state of the instance is overridden, means it is
equivalent to creating a new instance and calling it {@code init} method.

@param opmode
           the operation this cipher instance should be initialized for
           (one of: {@code ENCRYPT_MODE}, {@code DECRYPT_MODE}, {@code
           WRAP_MODE} or {@code UNWRAP_MODE}).
@param key
           the input key for the operation.
@param params
           the algorithm parameters.
@param random
           the source of randomness to use.
@throws InvalidKeyException
            if the specified key cannot be used to initialize this cipher
            instance.
@throws InvalidAlgorithmParameterException
            if the specified parameters are inappropriate for this
            cipher."
      end

      operation 1787419 "engineUpdate"
	abstract protected explicit_return_type "byte"
	nparams 3
	  param inout name "input" explicit_type "byte"
	  param in name "inputOffset" explicit_type "int"
	  param in name "inputLen" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Continues a multi-part transformation (encryption or decryption). The
transformed bytes are returned.

@param input
           the input bytes to transform.
@param inputOffset
           the offset in the input to start.
@param inputLen
           the length of the input to transform.
@return the transformed bytes in a new buffer, or {@code null} if the
        input has zero length.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption.
@throws IllegalArgumentException
            if the input is null, or if {@code inputOffset} and {@code
            inputLen} do not specify a valid chunk in the input buffer."
      end

      operation 1787547 "engineUpdate"
	abstract protected explicit_return_type "int"
	nparams 5
	  param inout name "input" explicit_type "byte"
	  param in name "inputOffset" explicit_type "int"
	  param in name "inputLen" explicit_type "int"
	  param inout name "output" explicit_type "byte"
	  param in name "outputOffset" explicit_type "int"
	nexceptions 1
	  exception class_ref 287131 // ShortBufferException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Continues a multi-part transformation (encryption or decryption). The
transformed bytes are stored in the {@code output} buffer.
<p>
If the size of the {@code output} buffer is too small to hold the result,
a {@code ShortBufferException} is thrown. Use
{@link Cipher#getOutputSize getOutputSize} to check for the size of the
output buffer.

@param input
           the input bytes to transform.
@param inputOffset
           the offset in the input to start.
@param inputLen
           the length of the input to transform.
@param output
           the output buffer.
@param outputOffset
           the offset in the output buffer.
@return the number of bytes placed in output.
@throws ShortBufferException
            if the size of the {@code output} buffer is too small."
      end

      operation 1787675 "engineUpdate"
	protected explicit_return_type "int"
	nparams 2
	  param inout name "input" type class_ref 142363 // ByteBuffer
	  param inout name "output" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 287131 // ShortBufferException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Continues a multi-part transformation (encryption or decryption). The
{@code input.remaining()} bytes starting at {@code input.position()} are
transformed and stored in the {@code output} buffer.
<p>
If the {@code output.remaining()} is too small to hold the transformed
bytes a {@code ShortBufferException} is thrown. Use
{@link Cipher#getOutputSize getOutputSize} to check for the size of the
output buffer.

@param input
           the input buffer to transform.
@param output
           the output buffer to store the result within.
@return the number of bytes stored in the output buffer.
@throws ShortBufferException
            if the size of the {@code output} buffer is too small."
      end

      operation 1787803 "engineDoFinal"
	abstract protected explicit_return_type "byte"
	nparams 3
	  param inout name "input" explicit_type "byte"
	  param in name "inputOffset" explicit_type "int"
	  param in name "inputLen" explicit_type "int"
	nexceptions 2
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 286491 // BadPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes a multi-part transformation (encryption or decryption).
<p>
Processes the {@code inputLen} bytes in {@code input} buffer at {@code
inputOffset}, and any bytes that have been buffered in previous {@code
update} calls.

@param input
           the input buffer.
@param inputOffset
           the offset in the input buffer.
@param inputLen
           the length of the input.
@return the final bytes from the transformation.
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws BadPaddingException
            if the padding of the data does not match the padding scheme."
      end

      operation 1787931 "engineDoFinal"
	abstract protected explicit_return_type "int"
	nparams 5
	  param inout name "input" explicit_type "byte"
	  param in name "inputOffset" explicit_type "int"
	  param in name "inputLen" explicit_type "int"
	  param inout name "output" explicit_type "byte"
	  param in name "outputOffset" explicit_type "int"
	nexceptions 3
	  exception class_ref 287131 // ShortBufferException
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 286491 // BadPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes a multi-part transformation (encryption or decryption).
<p>
Processes the {@code inputLen} bytes in {@code input} buffer at
{@code inputOffset}, and any bytes that have been buffered in previous
{@code update} calls.

@param input
           the input buffer.
@param inputOffset
           the offset in the input buffer.
@param inputLen
           the length of the input.
@param output
           the output buffer for the transformed bytes.
@param outputOffset
           the offset in the output buffer.
@return the number of bytes placed in the output buffer.
@throws ShortBufferException
            if the size of the {@code output} buffer is too small.
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws BadPaddingException
            if the padding of the data does not match the padding scheme."
      end

      operation 1788059 "engineDoFinal"
	protected explicit_return_type "int"
	nparams 2
	  param inout name "input" type class_ref 142363 // ByteBuffer
	  param inout name "output" type class_ref 142363 // ByteBuffer
	nexceptions 3
	  exception class_ref 287131 // ShortBufferException
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 286491 // BadPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Finishes a multi-part transformation (encryption or decryption).
<p>
Processes the {@code input.remaining()} bytes in {@code input} buffer at
{@code input.position()}, and any bytes that have been buffered in
previous {@code update} calls. The transformed bytes are placed into
{@code output} buffer.

@param input
           the input buffer.
@param output
           the output buffer.
@return the number of bytes placed into the output buffer.
@throws ShortBufferException
            if the size of the {@code output} buffer is too small.
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws BadPaddingException
            if the padding of the data does not match the padding scheme.
@throws IllegalArgumentException
            if the input buffer and the output buffer are the same
            object.
@throws IllegalStateException
            if this cipher instance is not initialized for encryption or
            decryption."
      end

      operation 1788187 "engineWrap"
	protected explicit_return_type "byte"
	nparams 1
	  param inout name "key" type class_ref 202011 // Key
	nexceptions 2
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Wraps a key using this cipher instance. This method has been added to
this class (for backwards compatibility, it cannot be abstract). If this
method is not overridden, it throws an {@code
UnsupportedOperationException}.

@param key
           the key to wrap.
@return the wrapped key
@throws IllegalBlockSizeException
            if the size of the resulting bytes is not a multiple of the
            cipher block size.
@throws InvalidKeyException
            if this cipher instance cannot wrap this key."
      end

      operation 1788315 "engineUnwrap"
	protected return_type class_ref 202011 // Key
	nparams 3
	  param inout name "wrappedKey" explicit_type "byte"
	  param inout name "wrappedKeyAlgorithm" type class_ref 3399692 // String
	  param in name "wrappedKeyType" explicit_type "int"
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unwraps a key using this cipher instance.
<p>
This method has been added to this class (for backwards compatibility, it
cannot be abstract). If this method is not overridden, it throws an
{@code UnsupportedOperationException}.

@param wrappedKey
           the wrapped key to unwrap.
@param wrappedKeyAlgorithm
           the algorithm for the wrapped key.
@param wrappedKeyType
           the type of the wrapped key (one of: {@code SECRET_KEY},
           {@code PRIVATE_KEY} or {@code PUBLIC_KEY})
@return the unwrapped key.
@throws InvalidKeyException
            if the {@code wrappedKey} cannot be unwrapped to a key of
            type {@code wrappedKeyType} for the {@code
            wrappedKeyAlgorithm}.
@throws NoSuchAlgorithmException
            if no provider can be found that can create a key of type
            {@code wrappedKeyType} for the {@code wrappedKeyAlgorithm}."
      end

      operation 1788443 "engineGetKeySize"
	protected explicit_return_type "int"
	nparams 1
	  param inout name "key" type class_ref 202011 // Key
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of a specified key object in bits. This method has been
added to this class (for backwards compatibility, it cannot be abstract).
If this method is not overridden, it throws an {@code
UnsupportedOperationException}.

@param key
           the key to get the size for.
@return the size of a specified key object in bits.
@throws InvalidKeyException
            if the size of the key cannot be determined by this
            implementation."
      end
    end

    class 286875 "NoSuchPaddingException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The exception that is thrown when the requested padding mechanism is not
supported."
      classrelation 514331 // <generalisation>
	relation 514331 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 514331 // <generalisation>
	  b parent class_ref 200603 // GeneralSecurityException
      end

      attribute 439195 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4572885201200175466L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      operation 1802011 "NoSuchPaddingException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code NoSuchPaddingException} with the specified
message.

@param msg
           the message."
      end

      operation 1802139 "NoSuchPaddingException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code NoSuchPaddingException}."
      end
    end

    class 287003 "ExemptionMechanism"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class implements the functionality of an exemption mechanism such as
<i>key recovery</i>, <i>key weakening</i>, or <i>key escrow</i>."
      classrelation 511515 // ENGINE (<unidirectional association>)
	relation 511515 --->
	  a role_name "ENGINE" init_value " new Engine(\"ExemptionMechanism\")" class_relation const_relation private
	    comment " Used to access common engine functionality
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 511515 // ENGINE (<unidirectional association>)
	  b parent class_ref 195355 // Engine
      end

      classrelation 511643 // provider (<unidirectional association>)
	relation 511643 --->
	  a role_name "provider" const_relation private
	    comment " Store used provider
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 511643 // provider (<unidirectional association>)
	  b parent class_ref 195611 // Provider
      end

      classrelation 511771 // spiImpl (<unidirectional association>)
	relation 511771 --->
	  a role_name "spiImpl" const_relation private
	    comment " Store used spi implementation
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 511771 // spiImpl (<unidirectional association>)
	  b parent class_ref 288027 // ExemptionMechanismSpi
      end

      classrelation 511899 // mechanism (<unidirectional association>)
	relation 511899 --->
	  a role_name "mechanism" const_relation private
	    comment " Store mechanism name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 511899 // mechanism (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 438555 "isInit"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Store state (initialized or not)"
      end

      classrelation 512027 // initKey (<unidirectional association>)
	relation 512027 --->
	  a role_name "initKey" private
	    comment " Store initKey value
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 512027 // initKey (<unidirectional association>)
	  b parent class_ref 202011 // Key
      end

      attribute 438683 "generated"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Indicates if blob generated successfully"
      end

      operation 1790363 "ExemptionMechanism"
	protected explicit_return_type ""
	nparams 3
	  param inout name "exmechSpi" type class_ref 288027 // ExemptionMechanismSpi
	  param inout name "provider" type class_ref 195611 // Provider
	  param inout name "mechanism" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ExemptionMechanism} instance.

@param exmechSpi
           the implementation delegate.
@param provider
           the associated provider.
@param mechanism
           the name of the mechanism."
      end

      operation 1790491 "getName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of this {@code ExemptionMechanism}.

@return the name of this {@code ExemptionMechanism}."
      end

      operation 1790619 "getInstance"
	class_operation public return_type class_ref 287003 // ExemptionMechanism
	nparams 1
	  param inout name "algorithm" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code ExemptionMechanism} instance that provides the
specified exemption mechanism algorithm.

@param algorithm
           the name of the requested exemption mechanism.
@return the new {@code ExemptionMechanism} instance.
@throws NoSuchAlgorithmException
            if the specified algorithm is not available by any provider.
@throws NullPointerException
            if the algorithm parameter is {@code null}."
      end

      operation 1790747 "getInstance"
	class_operation public return_type class_ref 287003 // ExemptionMechanism
	nparams 2
	  param inout name "algorithm" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 195995 // NoSuchProviderException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code ExemptionMechansm} instance that provides the
specified exemption mechanism algorithm from the specified provider.

@param algorithm
           the name of the requested exemption mechanism.
@param provider
           the name of the provider that is providing the algorithm.
@return the new {@code ExemptionMechanism} instance.
@throws NoSuchAlgorithmException
            if the specified algorithm is not provided by the specified
            provider.
@throws NoSuchProviderException
            if the specified provider is not available.
@throws NullPointerException
            if the algorithm parameter is {@code null}.
@throws IllegalArgumentException
            if the provider parameter is {@code null}."
      end

      operation 1790875 "getInstance"
	class_operation public return_type class_ref 287003 // ExemptionMechanism
	nparams 2
	  param inout name "algorithm" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 195611 // Provider
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code ExemptionMechanism} instance that provides the
specified exemption mechanism algorithm from the specified provider.

@param algorithm
           the name of the requested exemption mechanism.
@param provider
           the provider that is providing the algorithm.
@return the new {@code ExemptionMechanism} instance.
@throws NoSuchAlgorithmException
            if the specified algorithm is not provided by the specified
            provider.
@throws NullPointerException
            if the algorithm parameter is {@code null}.
@throws IllegalArgumentException
            if the provider parameter is {@code null}."
      end

      operation 1791003 "getProvider"
	public return_type class_ref 195611 // Provider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this {@code ExemptionMechanism} instance.

@return the provider of this {@code ExemptionMechanism} instance."
      end

      operation 1791131 "isCryptoAllowed"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 202011 // Key
	nexceptions 1
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether the result blob for this {@code ExemptionMechanism}
instance has been generated successfully and that the specified key is
the same as the one that was used to initialize and generate.

@param key
           the key to verify.
@return whether the result blob for this {@code ExemptionMechanism}
        instance has been generated successfully.
@throws ExemptionMechanismException
            if an error occurs while determining whether the result blob
            has been generated successfully."
      end

      operation 1791259 "getOutputSize"
	public explicit_return_type "int"
	nparams 1
	  param in name "inputLen" explicit_type "int"
	nexceptions 1
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size in bytes for the output buffer needed to hold the output
of the next {@link #genExemptionBlob} call, given the specified {@code
inputLen} (in bytes).

@param inputLen
           the specified input length (in bytes).
@return the size in bytes for the output buffer.
@throws IllegalStateException
            if this {@code ExemptionMechanism} instance is not
            initialized."
      end

      operation 1791387 "init"
	public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 202011 // Key
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code ExemptionMechanism} instance with the
specified key.

@param key
           the key to initialize this instance with.
@throws InvalidKeyException
            if the key cannot be used to initialize this mechanism.
@throws ExemptionMechanismException
            if error(s) occur during initialization."
      end

      operation 1791515 "init"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "param" type class_ref 196379 // AlgorithmParameters
	nexceptions 3
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code ExemptionMechanism} instance with the
specified key and algorithm parameters.

@param key
           the key to initialize this instance with.
@param param
           the parameters for this exemption mechanism algorithm.
@throws InvalidKeyException
            if the key cannot be used to initialize this mechanism.
@throws InvalidAlgorithmParameterException
            if the parameters cannot be used to initialize this
            mechanism.
@throws ExemptionMechanismException
            if error(s) occur during initialization."
      end

      operation 1791643 "init"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "param" type class_ref 196123 // AlgorithmParameterSpec
	nexceptions 3
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code ExemptionMechanism} instance with the
specified key and algorithm parameters.

@param key
           the key to initialize this instance with.
@param param
           the parameters for this exemption mechanism algorithm.
@throws InvalidKeyException
            if the key cannot be used to initialize this mechanism.
@throws InvalidAlgorithmParameterException
            the the parameters cannot be used to initialize this
            mechanism.
@throws ExemptionMechanismException
            if error(s) occur during initialization."
      end

      operation 1791771 "genExemptionBlob"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 2
	  exception class_ref 154267 // IllegalStateException
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the result key blob for this exemption mechanism.

@return the result key blob for this exemption mechanism.
@throws IllegalStateException
            if this {@code ExemptionMechanism} instance is not
            initialized.
@throws ExemptionMechanismException
            if error(s) occur during generation."
      end

      operation 1791899 "genExemptionBlob"
	public explicit_return_type "int"
	nparams 1
	  param inout name "output" explicit_type "byte"
	nexceptions 3
	  exception class_ref 154267 // IllegalStateException
	  exception class_ref 287131 // ShortBufferException
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the result key blob for this exemption mechanism and stores it
into the {@code output} buffer.

@param output
           the output buffer for the result key blob.
@return the number of bytes written to the {@code output} buffer.
@throws IllegalStateException
            if this {@code ExemptionMechanism} instance is not
            initialized.
@throws ShortBufferException
            if the provided buffer is too small for the result key blob.
@throws ExemptionMechanismException
            if error(s) occur during generation."
      end

      operation 1792027 "genExemptionBlob"
	public explicit_return_type "int"
	nparams 2
	  param inout name "output" explicit_type "byte"
	  param in name "outputOffset" explicit_type "int"
	nexceptions 3
	  exception class_ref 154267 // IllegalStateException
	  exception class_ref 287131 // ShortBufferException
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the result key blob for this exemption mechanism and stores it
into the {@code output} buffer at offset {@code outputOffset}.

@param output
           the output buffer for the result key blob.
@param outputOffset
           the offset in the output buffer to start.
@return the number of bytes written to the {@code output} buffer.
@throws IllegalStateException
            if this {@code ExemptionMechanism} instance is not
            initialized.
@throws ShortBufferException
            if the provided buffer is too small for the result key blob.
@throws ExemptionMechanismException
            if error(s) occur during generation."
      end

      operation 1792155 "finalize"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Override to clear any key state in the instance."
      end
    end

    class 287131 "ShortBufferException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The exception that is thrown when the result of an operation is attempted to
store in a user provided buffer that is too small."
      classrelation 515611 // <generalisation>
	relation 515611 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 515611 // <generalisation>
	  b parent class_ref 200603 // GeneralSecurityException
      end

      attribute 439835 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8427718640832943747L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      operation 1804955 "ShortBufferException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of {@code ShortBufferException} with the
specified message

@param msg
           the exception message."
      end

      operation 1805083 "ShortBufferException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance of {@code ShortBufferException}."
      end
    end

    class 287259 "IllegalBlockSizeException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The exception, that is thrown when the data length provided to a block cipher
does not match the block size of the cipher."
      classrelation 512283 // <generalisation>
	relation 512283 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 512283 // <generalisation>
	  b parent class_ref 200603 // GeneralSecurityException
      end

      attribute 438939 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1965144811953540392L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      operation 1793435 "IllegalBlockSizeException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code IllegalBlockSizeException} with the specified
message.

@param msg
           the message"
      end

      operation 1793563 "IllegalBlockSizeException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code IllegalBlockSizeException}."
      end
    end

    class 287387 "CipherInputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class wraps an {@code InputStream} and a cipher so that {@code read()}
methods return data that are read from the underlying {@code InputStream} and
processed by the cipher.
<p>
The cipher must be initialized for the requested operation before being used
by a {@code CipherInputStream}. For example, if a cipher initialized for
decryption is used with a {@code CipherInputStream}, the {@code
CipherInputStream} tries to read the data an decrypt them before returning."
      classrelation 510235 // <generalisation>
	relation 510235 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 510235 // <generalisation>
	  b parent class_ref 131739 // FilterInputStream
      end

      attribute 437403 "I_BUFFER_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 20"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 510363 // cipher (<unidirectional association>)
	relation 510363 --->
	  a role_name "cipher" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 510363 // cipher (<unidirectional association>)
	  b parent class_ref 286619 // Cipher
      end

      attribute 437531 "inputBuffer"
	const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[I_BUFFER_SIZE]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 437659 "outputBuffer"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 437787 "outputIndex"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " index of the first byte to return from outputBuffer"
      end

      attribute 437915 "outputLength"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " count of the bytes to return from outputBuffer"
      end

      attribute 438043 "finished"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1784347 "CipherInputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "is" type class_ref 131867 // InputStream
	  param inout name "c" type class_ref 286619 // Cipher
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code CipherInputStream} instance for an {@code
InputStream} and a cipher.

<p><strong>Warning:</strong> passing a null source creates an invalid
{@code CipherInputStream}. All read operations on such a stream will
fail.

@param is
           the input stream to read data from.
@param c
           the cipher to process the data with."
      end

      operation 1784475 "CipherInputStream"
	protected explicit_return_type ""
	nparams 1
	  param inout name "is" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code CipherInputStream} instance for an {@code
InputStream} without a cipher.
<p>
A {@code NullCipher} is created and used to process the data.

@param is
           the input stream to read data from."
      end

      operation 1784603 "read"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads the next byte from this cipher input stream.

@return the next byte, or {@code -1} if the end of the stream is reached.
@throws IOException
            if an error occurs."
      end

      operation 1784731 "read"
	public explicit_return_type "int"
	nparams 3
	  param inout name "buf" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Reads the next {@code len} bytes from this input stream into buffer
{@code buf} starting at offset {@code off}.
<p>
if {@code buf} is {@code null}, the next {@code len} bytes are read and
discarded.

@return the number of bytes filled into buffer {@code buf}, or {@code -1}
        of the of the stream is reached.
@throws IOException
            if an error occurs.
@throws NullPointerException
            if the underlying input stream is {@code null}."
      end

      operation 1784859 "skip"
	public explicit_return_type "long"
	nparams 1
	  param in name "byteCount" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1784987 "available"
	public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1785115 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Closes this {@code CipherInputStream}, also closes the underlying input
stream and call {@code doFinal} on the cipher object.

@throws IOException
            if an error occurs."
      end

      operation 1785243 "markSupported"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns whether this input stream supports {@code mark} and
{@code reset}, which it does not.

@return false, since this input stream does not support {@code mark} and
        {@code reset}."
      end
    end

    class 287515 "CipherOutputStream"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class wraps an output stream and a cipher so that {@code write} methods
send the data through the cipher before writing them to the underlying output
stream.
<p>
The cipher must be initialized for the requested operation before being used
by a {@code CipherOutputStream}. For example, if a cipher initialized for
encryption is used with a {@code CipherOutputStream}, the {@code
CipherOutputStream} tries to encrypt the data writing it out."
      classrelation 510491 // <generalisation>
	relation 510491 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 510491 // <generalisation>
	  b parent class_ref 132507 // FilterOutputStream
      end

      classrelation 510619 // cipher (<unidirectional association>)
	relation 510619 --->
	  a role_name "cipher" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 510619 // cipher (<unidirectional association>)
	  b parent class_ref 286619 // Cipher
      end

      operation 1785371 "CipherOutputStream"
	public explicit_return_type ""
	nparams 2
	  param inout name "os" type class_ref 132635 // OutputStream
	  param inout name "c" type class_ref 286619 // Cipher
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code CipherOutputStream} instance for an {@code
OutputStream} and a {@code Cipher}.

@param os
           the output stream to write data to.
@param c
           the cipher to process the data with."
      end

      operation 1785499 "CipherOutputStream"
	protected explicit_return_type ""
	nparams 1
	  param inout name "os" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code CipherOutputStream} instance for an {@code
OutputStream} without a cipher.
<p>
A {@code NullCipher} is created to process the data.

@param os
           the output stream to write the data to."
      end

      operation 1785627 "write"
	public explicit_return_type "void"
	nparams 1
	  param in name "b" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes the single byte to this cipher output stream.

@param b
           the byte to write.
@throws IOException
            if an error occurs."
      end

      operation 1785755 "write"
	public explicit_return_type "void"
	nparams 3
	  param inout name "b" explicit_type "byte"
	  param in name "off" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Writes the {@code len} bytes from buffer {@code b} starting at offset
{@code off} to this cipher output stream.

@param b
           the buffer.
@param off
           the offset to start at.
@param len
           the number of bytes.
@throws IOException
            if an error occurs."
      end

      operation 1785883 "flush"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Flushes this cipher output stream.

@throws IOException
            if an error occurs"
      end

      operation 1786011 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Close this cipher output stream.
<p>
On the underlying cipher {@code doFinal} will be invoked, and any
buffered bytes from the cipher are also written out, and the cipher is
reset to its initial state. The underlying output stream is also closed.

@throws IOException
            if an error occurs."
      end
    end

    class 287643 "EncryptedPrivateKeyInfo"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class implements the {@code EncryptedPrivateKeyInfo} ASN.1 type as
specified in <a href=\"http://www.ietf.org/rfc/rfc5208.txt\">PKCS
#8 - Private-Key Information Syntax Standard</a>.
<p>
The definition of ASN.1 is as follows:
<dl>
EncryptedPrivateKeyInfo ::= SEQUENCE {
<dd>encryptionAlgorithm AlgorithmIdentifier,</dd>
<dd>encryptedData OCTET STRING }</dd>
</dl>
<dl>
AlgorithmIdentifier ::= SEQUENCE {
<dd>algorithm OBJECT IDENTIFIER,</dd>
<dd>parameters ANY DEFINED BY algorithm OPTIONAL }</dd>
</dl>"
      classrelation 510747 // algName (<unidirectional association>)
	relation 510747 --->
	  a role_name "algName" private
	    comment " Encryption algorithm name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 510747 // algName (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 510875 // algParameters (<unidirectional association>)
	relation 510875 --->
	  a role_name "algParameters" const_relation private
	    comment " Encryption algorithm parameters
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 510875 // algParameters (<unidirectional association>)
	  b parent class_ref 196379 // AlgorithmParameters
      end

      attribute 438171 "encryptedData"
	const_attribute private explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Encrypted private key data"
      end

      classrelation 511003 // oid (<unidirectional association>)
	relation 511003 --->
	  a role_name "oid" private
	    comment " Encryption algorithm OID
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 511003 // oid (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 438299 "encoded"
	volatile private explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " This EncryptedPrivateKeyInfo ASN.1 DER encoding"
      end

      operation 1788571 "EncryptedPrivateKeyInfo"
	public explicit_return_type ""
	nparams 1
	  param inout name "encoded" explicit_type "byte"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code EncryptedPrivateKeyInfo} instance from its encoded
representation by parsing it.

@param encoded
           the encoded representation of this object
@throws IOException
            if parsing the encoded representation fails.
@throws NullPointerException
            if {@code encoded} is {@code null}."
      end

      operation 1788699 "isNullValue"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param inout name "toCheck" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1788827 "EncryptedPrivateKeyInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "encryptionAlgorithmName" type class_ref 3399692 // String
	  param inout name "encryptedData" explicit_type "byte"
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code EncryptedPrivateKeyInfo} instance from an algorithm
name and its encrypted data.

@param encryptionAlgorithmName
           the name of an algorithm.
@param encryptedData
           the encrypted data.
@throws NoSuchAlgorithmException
            if the {@code encrAlgName} is not a supported algorithm.
@throws NullPointerException
            if {@code encrAlgName} or {@code encryptedData} is {@code
            null}.
@throws IllegalArgumentException
            if {@code encryptedData} is empty."
      end

      operation 1788955 "EncryptedPrivateKeyInfo"
	public explicit_return_type ""
	nparams 2
	  param inout name "algParams" type class_ref 196379 // AlgorithmParameters
	  param inout name "encryptedData" explicit_type "byte"
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code EncryptedPrivateKeyInfo} instance from the
encryption algorithm parameters an its encrypted data.

@param algParams
           the encryption algorithm parameters.
@param encryptedData
           the encrypted data.
@throws NoSuchAlgorithmException
            if the algorithm name of the specified {@code algParams}
            parameter is not supported.
@throws NullPointerException
            if {@code algParams} or {@code encryptedData} is
            {@code null}."
      end

      operation 1789083 "getAlgName"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the encryption algorithm.

@return the name of the encryption algorithm."
      end

      operation 1789211 "getAlgParameters"
	public return_type class_ref 196379 // AlgorithmParameters
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parameters used by the encryption algorithm.

@return the parameters used by the encryption algorithm."
      end

      operation 1789339 "getEncryptedData"
	public explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the encrypted data of this key.

@return the encrypted data of this key, each time this method is called a
        new array is returned."
      end

      operation 1789467 "getKeySpec"
	public return_type class_ref 218907 // PKCS8EncodedKeySpec
	nparams 1
	  param inout name "cipher" type class_ref 286619 // Cipher
	nexceptions 1
	  exception class_ref 202523 // InvalidKeySpecException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code PKCS8EncodedKeySpec} object extracted from the
encrypted data.
<p>
The cipher must be initialize in either {@code Cipher.DECRYPT_MODE} or
{@code Cipher.UNWRAP_MODE} with the same parameters and key used for
encrypting this.

@param cipher
           the cipher initialized for decrypting the encrypted data.
@return the extracted {@code PKCS8EncodedKeySpec}.
@throws InvalidKeySpecException
            if the specified cipher is not suited to decrypt the
            encrypted data.
@throws NullPointerException
            if {@code cipher} is {@code null}."
      end

      operation 1789595 "getKeySpec"
	public return_type class_ref 218907 // PKCS8EncodedKeySpec
	nparams 1
	  param inout name "decryptKey" type class_ref 202011 // Key
	nexceptions 2
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code PKCS8EncodedKeySpec} object extracted from the
encrypted data.

@param decryptKey
           the key to decrypt the encrypted data with.
@return the extracted {@code PKCS8EncodedKeySpec}.
@throws NoSuchAlgorithmException
            if no usable cipher can be found to decrypt the encrypted
            data.
@throws InvalidKeyException
            if {@code decryptKey} is not usable to decrypt the encrypted
            data.
@throws NullPointerException
            if {@code decryptKey} is {@code null}."
      end

      operation 1789723 "getKeySpec"
	public return_type class_ref 218907 // PKCS8EncodedKeySpec
	nparams 2
	  param inout name "decryptKey" type class_ref 202011 // Key
	  param inout name "providerName" type class_ref 3399692 // String
	nexceptions 3
	  exception class_ref 195995 // NoSuchProviderException
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code PKCS8EncodedKeySpec} object extracted from the
encrypted data.

@param decryptKey
           the key to decrypt the encrypted data with.
@param providerName
           the name of a provider whose cipher implementation should be
           used.
@return the extracted {@code PKCS8EncodedKeySpec}.
@throws NoSuchProviderException
            if no provider with {@code providerName} can be found.
@throws NoSuchAlgorithmException
            if no usable cipher can be found to decrypt the encrypted
            data.
@throws InvalidKeyException
            if {@code decryptKey} is not usable to decrypt the encrypted
            data.
@throws NullPointerException
            if {@code decryptKey} or {@code providerName} is {@code null}
            ."
      end

      operation 1789851 "getKeySpec"
	public return_type class_ref 218907 // PKCS8EncodedKeySpec
	nparams 2
	  param inout name "decryptKey" type class_ref 202011 // Key
	  param inout name "provider" type class_ref 195611 // Provider
	nexceptions 2
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@code PKCS8EncodedKeySpec} object extracted from the
encrypted data.

@param decryptKey
           the key to decrypt the encrypted data with.
@param provider
           the provider whose cipher implementation should be used.
@return the extracted {@code PKCS8EncodedKeySpec}.
@throws NoSuchAlgorithmException
            if no usable cipher can be found to decrypt the encrypted
            data.
@throws InvalidKeyException
            if {@code decryptKey} is not usable to decrypt the encrypted
            data.
@throws NullPointerException
            if {@code decryptKey} or {@code provider} is {@code null}."
      end

      operation 1789979 "invalidKey"
	private return_type class_ref 201755 // InvalidKeyException
	nparams 0
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1790107 "getEncoded"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the ASN.1 encoded representation of this object.

@return the ASN.1 encoded representation of this object.
@throws IOException
            if encoding this object fails."
      end

      operation 1790235 "mapAlgName"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Performs all needed alg name mappings.
 Returns 'true' if mapping available 'false' otherwise"
      end

      attribute 438427 "nullParam"
	class_attribute const_attribute private explicit_type "byte"
	multiplicity "[]"
	init_value " new byte[] { 5, 0 }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " EncryptedPrivateKeyInfo DER encoder/decoder.
 EncryptedPrivateKeyInfo ASN.1 definition
 (as defined in PKCS #8: Private-Key Information Syntax Standard
  http://www.ietf.org/rfc/rfc2313.txt)

 EncryptedPrivateKeyInfo ::=  SEQUENCE {
      encryptionAlgorithm   AlgorithmIdentifier,
      encryptedData   OCTET STRING }
"
      end

      classrelation 511131 // asn1 (<unidirectional association>)
	relation 511131 --->
	  a role_name "asn1" init_value " new ASN1Sequence(new ASN1Type[] {
            AlgorithmIdentifier.ASN1, ASN1OctetString.getInstance() }) {

                @Override
                protected void getValues(Object object, Object[] values) {

                    EncryptedPrivateKeyInfo epki = (EncryptedPrivateKeyInfo) object;

                    try {
                        byte[] algParmsEncoded = (epki.algParameters == null) ? nullParam
                                : epki.algParameters.getEncoded();
                        values[0] = new AlgorithmIdentifier(epki.oid, algParmsEncoded);
                        values[1] = epki.encryptedData;
                    } catch (IOException e) {
                        throw new RuntimeException(e.getMessage());
                    }
                }
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 511131 // asn1 (<unidirectional association>)
	  b parent class_ref 287771 // ASN1Sequence
      end

      classrelation 511259 // ASN1Attributes (<unidirectional association>)
	relation 511259 --->
	  a role_name "ASN1Attributes" init_value " new ASN1SetOf(ASN1Any.getInstance())" class_relation const_relation private
	    comment " PrivateKeyInfo DER decoder.
 PrivateKeyInfo ASN.1 definition
 (as defined in PKCS #8: Private-Key Information Syntax Standard
  http://www.ietf.org/rfc/rfc2313.txt)


    PrivateKeyInfo ::= SEQUENCE {
        version Version,
        privateKeyAlgorithm PrivateKeyAlgorithmIdentifier,
        privateKey PrivateKey,
        attributes [0] IMPLICIT Attributes OPTIONAL }

      Version ::= INTEGER

      PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier

      PrivateKey ::= OCTET STRING

      Attributes ::= SET OF Attribute
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 511259 // ASN1Attributes (<unidirectional association>)
	  b parent class_ref 287899 // ASN1SetOf
      end

      classrelation 511387 // ASN1PrivateKeyInfo (<unidirectional association>)
	relation 511387 --->
	  a role_name "ASN1PrivateKeyInfo" init_value " new ASN1Sequence(
            new ASN1Type[] { ASN1Integer.getInstance(), AlgorithmIdentifier.ASN1,
                    ASN1OctetString.getInstance(),
                    new ASN1Implicit(0, ASN1Attributes) }) {
        {
            setOptional(3); //attributes are optional
        }
    }" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 511387 // ASN1PrivateKeyInfo (<unidirectional association>)
	  b parent class_ref 287771 // ASN1Sequence
      end
    end

    class 288027 "ExemptionMechanismSpi"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <i>Service Provider Interface</i> (<b>SPI</b>) definition for the {@code
ExemptionMechanism} class."
      operation 1792539 "ExemptionMechanismSpi"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ExemptionMechanismSpi} instance."
      end

      operation 1792667 "engineGenExemptionBlob"
	abstract protected explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the result key blob for this exemption mechanism.

@return the result key blob for this exemption mechanism.
@throws ExemptionMechanismException
            if error(s) occur during generation."
      end

      operation 1792795 "engineGenExemptionBlob"
	abstract protected explicit_return_type "int"
	nparams 2
	  param inout name "output" explicit_type "byte"
	  param in name "outputOffset" explicit_type "int"
	nexceptions 2
	  exception class_ref 287131 // ShortBufferException
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the result key blob for this exemption mechanism and stores it
into the {@code output} buffer at offset {@code outputOffset}.

@param output
           the output buffer for the result key blob.
@param outputOffset
           the offset in the output buffer to start.
@return the number of bytes written to the {@code output} buffer.
@throws ShortBufferException
            if the provided buffer is too small for the result key blob.
@throws ExemptionMechanismException
            if error(s) occur during generation."
      end

      operation 1792923 "engineGetOutputSize"
	abstract protected explicit_return_type "int"
	nparams 1
	  param in name "inputLen" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size in bytes for the output buffer needed to hold the output
of the next {@link #engineGenExemptionBlob} call, given the specified
{@code inputLen} (in bytes).

@param inputLen
           the specified input length (in bytes).
@return the size in bytes for the output buffer."
      end

      operation 1793051 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 202011 // Key
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code ExemptionMechanism} instance with the specified
key.

@param key
           the key to initialize this instance with.
@throws InvalidKeyException
            if the key cannot be used to initialize this mechanism.
@throws ExemptionMechanismException
            if error(s) occur during initialization."
      end

      operation 1793179 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196379 // AlgorithmParameters
	nexceptions 3
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code ExemptionMechanism} instance with the specified
key and algorithm parameters.

@param key
           the key to initialize this instance with.
@param params
           the parameters for this exemption mechanism algorithm.
@throws InvalidKeyException
            if the key cannot be used to initialize this mechanism.
@throws InvalidAlgorithmParameterException
            if the parameters cannot be used to initialize this
            mechanism.
@throws ExemptionMechanismException
            if error(s) occur during initialization."
      end

      operation 1793307 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	nexceptions 3
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	  exception class_ref 288155 // ExemptionMechanismException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code ExemptionMechanism} instance with the specified
key and algorithm parameters.

@param key
           the key to initialize this instance with.
@param params
           the parameters for this exemption mechanism algorithm.
@throws InvalidKeyException
            if the key cannot be used to initialize this mechanism.
@throws InvalidAlgorithmParameterException
            the the parameters cannot be used to initialize this
            mechanism.
@throws ExemptionMechanismException
            if error(s) occur during initialization."
      end
    end

    class 288155 "ExemptionMechanismException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the base class for {@code ExemptionMechanismException}."
      classrelation 512155 // <generalisation>
	relation 512155 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 512155 // <generalisation>
	  b parent class_ref 200603 // GeneralSecurityException
      end

      attribute 438811 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1572699429277957109L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "@serial
"
      end

      operation 1792283 "ExemptionMechanismException"
	public explicit_return_type ""
	nparams 1
	  param inout name "msg" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ExemptionMechanismException} with the specified
message.

@param msg
           the exception message."
      end

      operation 1792411 "ExemptionMechanismException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ExemptionMechanismException} with no message."
      end
    end

    class 288283 "KeyAgreement"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides the functionality for a key exchange protocol. This
enables two or more parties to agree on a secret key for symmetric
cryptography."
      classrelation 512411 // ENGINE (<unidirectional association>)
	relation 512411 --->
	  a role_name "ENGINE" init_value " new Engine(\"KeyAgreement\")" class_relation const_relation private
	    comment " Used to access common engine functionality
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 512411 // ENGINE (<unidirectional association>)
	  b parent class_ref 195355 // Engine
      end

      classrelation 512539 // RANDOM (<unidirectional association>)
	relation 512539 --->
	  a role_name "RANDOM" init_value " new SecureRandom()" class_relation const_relation private
	    comment " Store SecureRandom
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 512539 // RANDOM (<unidirectional association>)
	  b parent class_ref 195483 // SecureRandom
      end

      classrelation 512667 // provider (<unidirectional association>)
	relation 512667 --->
	  a role_name "provider" const_relation private
	    comment " Store used provider
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 512667 // provider (<unidirectional association>)
	  b parent class_ref 195611 // Provider
      end

      classrelation 512795 // spiImpl (<unidirectional association>)
	relation 512795 --->
	  a role_name "spiImpl" const_relation private
	    comment " Store used spi implementation
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 512795 // spiImpl (<unidirectional association>)
	  b parent class_ref 288411 // KeyAgreementSpi
      end

      classrelation 512923 // algorithm (<unidirectional association>)
	relation 512923 --->
	  a role_name "algorithm" const_relation private
	    comment " Store used algorithm name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 512923 // algorithm (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1793691 "KeyAgreement"
	protected explicit_return_type ""
	nparams 3
	  param inout name "keyAgreeSpi" type class_ref 288411 // KeyAgreementSpi
	  param inout name "provider" type class_ref 195611 // Provider
	  param inout name "algorithm" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code KeyAgreement} instance.

@param keyAgreeSpi
           the <b>SPI</b> delegate.
@param provider
           the provider providing this KeyAgreement.
@param algorithm
           the name of the key agreement algorithm."
      end

      operation 1793819 "getAlgorithm"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the key agreement algorithm.

@return the name of the key agreement algorithm."
      end

      operation 1793947 "getProvider"
	public return_type class_ref 195611 // Provider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider for this {@code KeyAgreement} instance.

@return the provider for this {@code KeyAgreement} instance."
      end

      operation 1794075 "getInstance"
	class_operation public return_type class_ref 288283 // KeyAgreement
	nparams 1
	  param inout name "algorithm" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code KeyAgreement} for the specified algorithm.

@param algorithm
           the name of the key agreement algorithm to create.
@return a key agreement for the specified algorithm.
@throws NoSuchAlgorithmException
            if no installed provider can provide the requested algorithm.
@throws NullPointerException
            if the specified algorithm is {@code null}."
      end

      operation 1794203 "getInstance"
	class_operation public return_type class_ref 288283 // KeyAgreement
	nparams 2
	  param inout name "algorithm" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 195995 // NoSuchProviderException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code KeyAgreement} for the specified algorithm from the
specified provider.

@param algorithm
           the name of the key agreement algorithm to create.
@param provider
           the name of the provider that provides the requested
           algorithm.
@return a key agreement for the specified algorithm from the specified
        provider.
@throws NoSuchAlgorithmException
            if the specified provider cannot provide the requested
            algorithm.
@throws NoSuchProviderException
            if the specified provider does not exist.
@throws IllegalArgumentException
            if the specified provider name is {@code null} or empty."
      end

      operation 1794331 "getInstance"
	class_operation public return_type class_ref 288283 // KeyAgreement
	nparams 2
	  param inout name "algorithm" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 195611 // Provider
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new {@code KeyAgreement} for the specified algorithm from the
specified provider.

@param algorithm
           the name of the key agreement algorithm to create.
@param provider
           the provider that provides the requested algorithm.
@return a key agreement for the specified algorithm from the specified
        provider.
@throws NoSuchAlgorithmException
            if the specified provider cannot provide the requested
            algorithm.
@throws IllegalArgumentException
            if the specified provider is {@code null}.
@throws NullPointerException
            if the specified algorithm name is {@code null}."
      end

      operation 1794459 "init"
	public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 202011 // Key
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyAgreement} with the specified key.

@param key
           the key to initialize this key agreement.
@throws InvalidKeyException
            if the specified key cannot be used to initialize this key
            agreement."
      end

      operation 1794587 "init"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyAgreement} with the specified key and the
specified randomness source.

@param key
           the key to initialize this key agreement.
@param random
           the source for any randomness needed.
@throws InvalidKeyException
            if the specified key cannot be used to initialize this key
            agreement."
      end

      operation 1794715 "init"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyAgreement} with the specified key and the
algorithm parameters.

@param key
           the key to initialize this key agreement.
@param params
           the parameters for this key agreement algorithm.
@throws InvalidKeyException
            if the specified key cannot be used to initialize this key
            agreement.
@throws InvalidAlgorithmParameterException
            if the specified parameters are invalid for this key
            agreement algorithm."
      end

      operation 1794843 "init"
	public explicit_return_type "void"
	nparams 3
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyAgreement} with the specified key, algorithm
parameters and randomness source.

@param key
           the key to initialize this key agreement.
@param params
           the parameters for this key agreement algorithm.
@param random
           the source for any randomness needed.
@throws InvalidKeyException
            if the specified key cannot be used to initialize this key
            agreement.
@throws InvalidAlgorithmParameterException
            if the specified parameters are invalid for this key
            agreement algorithm."
      end

      operation 1794971 "doPhase"
	public return_type class_ref 202011 // Key
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "lastPhase" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does the next (or the last) phase of the key agreement, using the
specified key.

@param key
           the key received from the other party for this phase.
@param lastPhase
           set to {@code true} if this is the last phase of this key
           agreement.
@return the intermediate key from this phase or {@code null} if there is
        no intermediate key for this phase.
@throws InvalidKeyException
            if the specified key cannot be used in this key agreement or
            this phase,
@throws IllegalStateException
            if this instance has not been initialized."
      end

      operation 1795099 "generateSecret"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the shared secret.

@return the generated shared secret.
@throws IllegalStateException
            if this key agreement is not complete."
      end

      operation 1795227 "generateSecret"
	public explicit_return_type "int"
	nparams 2
	  param inout name "sharedSecret" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	nexceptions 2
	  exception class_ref 154267 // IllegalStateException
	  exception class_ref 287131 // ShortBufferException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the shared secret and stores it into the buffer {@code
sharedSecred} at {@code offset}.

@param sharedSecret
           the buffer to store the shared secret.
@param offset
           the offset in the buffer.
@return the number of bytes stored in the buffer.
@throws IllegalStateException
            if this key agreement is not complete.
@throws ShortBufferException
            if the specified buffer is too small for the shared secret."
      end

      operation 1795355 "generateSecret"
	public return_type class_ref 205851 // SecretKey
	nparams 1
	  param inout name "algorithm" type class_ref 3399692 // String
	nexceptions 3
	  exception class_ref 154267 // IllegalStateException
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the shared secret.

@param algorithm
           the algorithm to for the {@code SecretKey}
@return the shared secret as a {@code SecretKey} of the specified
        algorithm.
@throws IllegalStateException
            if this key agreement is not complete.
@throws NoSuchAlgorithmException
            if the specified algorithm for the secret key does not
            exists.
@throws InvalidKeyException
            if a {@code SecretKey} with the specified algorithm cannot be
            created using the generated shared secret."
      end
    end

    class 288411 "KeyAgreementSpi"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <i>Service Provider Interface</i> (<b>SPI</b>) definition for the
{@code KeyAgreement} class."
      operation 1795483 "KeyAgreementSpi"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code KeyAgreementSpi} instance."
      end

      operation 1795611 "engineDoPhase"
	abstract protected return_type class_ref 202011 // Key
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "lastPhase" explicit_type "boolean"
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does the next (or the last) phase of the key agreement, using the
specified key.

@param key
           the key received from the other party for this phase.
@param lastPhase
           set to {@code true} if this is the last phase of this key
           agreement.
@return the intermediate key from this phase or null if there is no
        intermediate key for this phase.
@throws InvalidKeyException
            if the specified key cannot be used in this key agreement or
            this phase,
@throws IllegalStateException
            if this instance has not been initialized."
      end

      operation 1795739 "engineGenerateSecret"
	abstract protected explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the shared secret.

@return the generated shared secret.
@throws IllegalStateException
            if this key agreement is not complete."
      end

      operation 1795867 "engineGenerateSecret"
	abstract protected explicit_return_type "int"
	nparams 2
	  param inout name "sharedSecret" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	nexceptions 2
	  exception class_ref 154267 // IllegalStateException
	  exception class_ref 287131 // ShortBufferException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the shared secret and stores it into the buffer {@code
sharedSecred} at {@code offset}.

@param sharedSecret
           the buffer to store the shared secret.
@param offset
           the offset in the buffer.
@return the number of bytes stored in the buffer.
@throws IllegalStateException
            if this key agreement is not complete.
@throws ShortBufferException
            if the specified buffer is too small for the shared secret."
      end

      operation 1795995 "engineGenerateSecret"
	abstract protected return_type class_ref 205851 // SecretKey
	nparams 1
	  param inout name "algorithm" type class_ref 3399692 // String
	nexceptions 3
	  exception class_ref 154267 // IllegalStateException
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates the shared secret.

@param algorithm
           the algorithm to for the {@code SecretKey}
@return the shared secret as a {@code SecretKey} of the specified
        algorithm.
@throws IllegalStateException
            if this key agreement is not complete.
@throws NoSuchAlgorithmException
            if the specified algorithm for the secret key does not
            exists.
@throws InvalidKeyException
            if a {@code SecretKey} with the specified algorithm cannot be
            created using the generated shared secret."
      end

      operation 1796123 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyAgreementSpi} with the specified key and the
specified randomness source.

@param key
           the key to initialize this key agreement.
@param random
           the source for any randomness needed.
@throws InvalidKeyException
            if the specified key cannot be used to initialize this key
            agreement."
      end

      operation 1796251 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 3
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyAgreementSpi} with the specified key,
algorithm parameters and randomness source.

@param key
           the key to initialize this key agreement.
@param params
           the parameters for this key agreement algorithm.
@param random
           the source for any randomness needed.
@throws InvalidKeyException
            if the specified key cannot be used to initialize this key
            agreement.
@throws InvalidAlgorithmParameterException
            if the specified parameters are invalid for this key
            agreement algorithm."
      end
    end

    class 288539 "KeyGenerator"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides the public API for generating symmetric cryptographic
keys."
      classrelation 513051 // ENGINE (<unidirectional association>)
	relation 513051 --->
	  a role_name "ENGINE" init_value " new Engine(\"KeyGenerator\")" class_relation const_relation private
	    comment " Used to access common engine functionality
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 513051 // ENGINE (<unidirectional association>)
	  b parent class_ref 195355 // Engine
      end

      classrelation 513179 // RANDOM (<unidirectional association>)
	relation 513179 --->
	  a role_name "RANDOM" init_value " new SecureRandom()" class_relation const_relation private
	    comment " Store SecureRandom
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 513179 // RANDOM (<unidirectional association>)
	  b parent class_ref 195483 // SecureRandom
      end

      classrelation 513307 // provider (<unidirectional association>)
	relation 513307 --->
	  a role_name "provider" const_relation private
	    comment " Store used provider
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 513307 // provider (<unidirectional association>)
	  b parent class_ref 195611 // Provider
      end

      classrelation 513435 // spiImpl (<unidirectional association>)
	relation 513435 --->
	  a role_name "spiImpl" const_relation private
	    comment " Store used spi implementation
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 513435 // spiImpl (<unidirectional association>)
	  b parent class_ref 288667 // KeyGeneratorSpi
      end

      classrelation 513563 // algorithm (<unidirectional association>)
	relation 513563 --->
	  a role_name "algorithm" const_relation private
	    comment " Store used algorithm name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 513563 // algorithm (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1796379 "KeyGenerator"
	protected explicit_return_type ""
	nparams 3
	  param inout name "keyGenSpi" type class_ref 288667 // KeyGeneratorSpi
	  param inout name "provider" type class_ref 195611 // Provider
	  param inout name "algorithm" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code KeyGenerator} instance.

@param keyGenSpi
           the implementation delegate.
@param provider
           the implementation provider.
@param algorithm
           the name of the algorithm."
      end

      operation 1796507 "getAlgorithm"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the key generation algorithm.

@return the name of the key generation algorithm."
      end

      operation 1796635 "getProvider"
	public return_type class_ref 195611 // Provider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this {@code KeyGenerator} instance.

@return the provider of this {@code KeyGenerator} instance."
      end

      operation 1796763 "getInstance"
	class_operation public return_type class_ref 288539 // KeyGenerator
	nparams 1
	  param inout name "algorithm" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code KeyGenerator} instance that provides the specified
key algorithm,

@param algorithm
           the name of the requested key algorithm
@return the new {@code KeyGenerator} instance.
@throws NoSuchAlgorithmException
            if the specified algorithm is not available by any provider.
@throws NullPointerException
            if {@code algorithm} is {@code null}."
      end

      operation 1796891 "getInstance"
	class_operation public return_type class_ref 288539 // KeyGenerator
	nparams 2
	  param inout name "algorithm" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 195995 // NoSuchProviderException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code KeyGenerator} instance that provides the specified
key algorithm from the specified provider.

@param algorithm
           the name of the requested key algorithm.
@param provider
           the name of the provider that is providing the algorithm.
@return the new {@code KeyGenerator} instance.
@throws NoSuchAlgorithmException
            if the specified algorithm is not provided by the specified
            provider.
@throws NoSuchProviderException
            if the specified provider is not available.
@throws IllegalArgumentException
            if the specified provider is name is {@code null} or empty.
@throws NullPointerException
            if the specified algorithm name is {@code null}."
      end

      operation 1797019 "getInstance"
	class_operation public return_type class_ref 288539 // KeyGenerator
	nparams 2
	  param inout name "algorithm" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 195611 // Provider
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code KeyGenerator} instance that provides the specified
key algorithm from the specified provider.

@param algorithm
           the name of the requested key algorithm.
@param provider
           the provider that is providing the algorithm
@return the new {@code KeyGenerator} instance.
@throws NoSuchAlgorithmException
            if the specified algorithm is not provided by the specified
            provider.
@throws IllegalArgumentException
            if the specified provider is {@code null}.
@throws NullPointerException
            if the specified algorithm name is {@code null}."
      end

      operation 1797147 "generateKey"
	public return_type class_ref 205851 // SecretKey
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a secret key.

@return the generated secret key."
      end

      operation 1797275 "init"
	public explicit_return_type "void"
	nparams 1
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	nexceptions 1
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyGenerator} instance with the specified
algorithm parameters.

@param params
           the parameters for the key generation algorithm.
@throws InvalidAlgorithmParameterException
            if the parameters cannot be used to initialize this key
            generator algorithm."
      end

      operation 1797403 "init"
	public explicit_return_type "void"
	nparams 2
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 1
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyGenerator} instance with the specified
algorithm parameters and randomness source.

@param params
           the parameters for the key generation algorithm.
@param random
           the randomness source for any random bytes.
@throws InvalidAlgorithmParameterException
            if the parameters cannot be uses to initialize this key
            generator algorithm."
      end

      operation 1797531 "init"
	public explicit_return_type "void"
	nparams 1
	  param in name "keysize" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyGenerator} instance for the specified key size
(in bits).

@param keysize
           the size of the key (in bits)."
      end

      operation 1797659 "init"
	public explicit_return_type "void"
	nparams 2
	  param in name "keysize" explicit_type "int"
	  param inout name "random" type class_ref 195483 // SecureRandom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyGenerator} instance for the specified key size
(in bits) using the specified randomness source.

@param keysize
           the size of the key (in bits).
@param random
           the randomness source for any random bytes."
      end

      operation 1797787 "init"
	public explicit_return_type "void"
	nparams 1
	  param inout name "random" type class_ref 195483 // SecureRandom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyGenerator} with the specified randomness
source.

@param random
           the randomness source for any random bytes."
      end
    end

    class 288667 "KeyGeneratorSpi"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <i>Service Provider Interface</i> (<b>SPI</b>) definition for the
{@code KeyGenerator} class.

@see KeyGenerator"
      operation 1797915 "KeyGeneratorSpi"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code KeyGeneratorSpi} instance."
      end

      operation 1798043 "engineGenerateKey"
	abstract protected return_type class_ref 205851 // SecretKey
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generates a secret key.

@return the generated secret key."
      end

      operation 1798171 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	  param inout name "random" type class_ref 195483 // SecureRandom
	nexceptions 1
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyGeneratorSpi} instance with the specified
algorithm parameters and randomness source.

@param params
           the parameters for the key generation algorithm.
@param random
           the randomness source for any random bytes.
@throws InvalidAlgorithmParameterException
            if the parameters cannot be uses to initialize this key
            generator algorithm."
      end

      operation 1798299 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 2
	  param in name "keysize" explicit_type "int"
	  param inout name "random" type class_ref 195483 // SecureRandom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyGenerator} instance for the specified key
size (in bits) using the specified randomness source.

@param keysize
           the size of the key (in bits).
@param random
           the randomness source for any random bytes."
      end

      operation 1798427 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "random" type class_ref 195483 // SecureRandom
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code KeyGenerator} with the specified randomness
source.

@param random
           the randomness source for any random bytes."
      end
    end

    class 288795 "Mac"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides the public API for <i>Message Authentication Code</i>
(MAC) algorithms."
      classrelation 513691 // <realization>
	relation 513691 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 513691 // <realization>
	  b parent class_ref 129435 // Cloneable
      end

      classrelation 513819 // ENGINE (<unidirectional association>)
	relation 513819 --->
	  a role_name "ENGINE" init_value " new Engine(\"Mac\")" class_relation const_relation private
	    comment "Used to access common engine functionality
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 513819 // ENGINE (<unidirectional association>)
	  b parent class_ref 195355 // Engine
      end

      classrelation 513947 // provider (<unidirectional association>)
	relation 513947 --->
	  a role_name "provider" const_relation private
	    comment " Store used provider
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 513947 // provider (<unidirectional association>)
	  b parent class_ref 195611 // Provider
      end

      classrelation 514075 // spiImpl (<unidirectional association>)
	relation 514075 --->
	  a role_name "spiImpl" const_relation private
	    comment " Store used spi implementation
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 514075 // spiImpl (<unidirectional association>)
	  b parent class_ref 288923 // MacSpi
      end

      classrelation 514203 // algorithm (<unidirectional association>)
	relation 514203 --->
	  a role_name "algorithm" const_relation private
	    comment " Store used algorithm name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 514203 // algorithm (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 439067 "isInitMac"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Store Mac state (initialized or not initialized)"
      end

      operation 1798555 "Mac"
	protected explicit_return_type ""
	nparams 3
	  param inout name "macSpi" type class_ref 288923 // MacSpi
	  param inout name "provider" type class_ref 195611 // Provider
	  param inout name "algorithm" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code Mac} instance.

@param macSpi
           the implementation delegate.
@param provider
           the implementation provider.
@param algorithm
           the name of the MAC algorithm."
      end

      operation 1798683 "getAlgorithm"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the MAC algorithm.

@return the name of the MAC algorithm."
      end

      operation 1798811 "getProvider"
	public return_type class_ref 195611 // Provider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider of this {@code Mac} instance.

@return the provider of this {@code Mac} instance."
      end

      operation 1798939 "getInstance"
	class_operation public return_type class_ref 288795 // Mac
	nparams 1
	  param inout name "algorithm" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code Mac} instance that provides the specified MAC
algorithm.

@param algorithm
           the name of the requested MAC algorithm.
@return the new {@code Mac} instance.
@throws NoSuchAlgorithmException
            if the specified algorithm is not available by any provider.
@throws NullPointerException
            if {@code algorithm} is {@code null} (instead of
            NoSuchAlgorithmException as in 1.4 release)."
      end

      operation 1799067 "getInstance"
	class_operation public return_type class_ref 288795 // Mac
	nparams 2
	  param inout name "algorithm" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 195995 // NoSuchProviderException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code Mac} instance that provides the specified MAC
algorithm from the specified provider.

@param algorithm
           the name of the requested MAC algorithm.
@param provider
           the name of the provider that is providing the algorithm.
@return the new {@code Mac} instance.
@throws NoSuchAlgorithmException
            if the specified algorithm is not provided by the specified
            provider.
@throws NoSuchProviderException
            if the specified provider is not available.
@throws IllegalArgumentException
            if the specified provider name is {@code null} or empty.
@throws NullPointerException
            if {@code algorithm} is {@code null} (instead of
            NoSuchAlgorithmException as in 1.4 release)."
      end

      operation 1799195 "getInstance"
	class_operation public return_type class_ref 288795 // Mac
	nparams 2
	  param inout name "algorithm" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 195611 // Provider
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code Mac} instance that provides the specified MAC
algorithm from the specified provider.

@param algorithm
           the name of the requested MAC algorithm.
@param provider
           the provider that is providing the algorithm.
@return the new {@code Mac} instance.
@throws NoSuchAlgorithmException
            if the specified algorithm is not provided by the specified
            provider.
@throws IllegalArgumentException
            if {@code provider} is {@code null}.
@throws NullPointerException
            if {@code algorithm} is {@code null} (instead of
            NoSuchAlgorithmException as in 1.4 release)."
      end

      operation 1799323 "getMacLength"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this MAC (in bytes).

@return the length of this MAC (in bytes)."
      end

      operation 1799451 "init"
	public explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code Mac} instance with the specified key and
algorithm parameters.

@param key
           the key to initialize this algorithm.
@param params
           the parameters for this algorithm.
@throws InvalidKeyException
            if the specified key cannot be used to initialize this
            algorithm, or it is null.
@throws InvalidAlgorithmParameterException
            if the specified parameters cannot be used to initialize this
            algorithm."
      end

      operation 1799579 "init"
	public explicit_return_type "void"
	nparams 1
	  param inout name "key" type class_ref 202011 // Key
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code Mac} instance with the specified key.

@param key
           the key to initialize this algorithm.
@throws InvalidKeyException
            if initialization fails because the provided key is {@code
            null}.
@throws RuntimeException
            if the specified key cannot be used to initialize this
            algorithm."
      end

      operation 1799707 "update"
	public explicit_return_type "void"
	nparams 1
	  param in name "input" explicit_type "byte"
	nexceptions 1
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates this {@code Mac} instance with the specified byte.

@param input
           the byte
@throws IllegalStateException
            if this MAC is not initialized."
      end

      operation 1799835 "update"
	public explicit_return_type "void"
	nparams 3
	  param inout name "input" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	nexceptions 1
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates this {@code Mac} instance with the data from the specified buffer
{@code input} from the specified {@code offset} and length {@code len}.

@param input
           the buffer.
@param offset
           the offset in the buffer.
@param len
           the length of the data in the buffer.
@throws IllegalStateException
            if this MAC is not initialized.
@throws IllegalArgumentException
            if {@code offset} and {@code len} do not specified a valid
            chunk in {@code input} buffer."
      end

      operation 1799963 "update"
	public explicit_return_type "void"
	nparams 1
	  param inout name "input" explicit_type "byte"
	nexceptions 1
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies the buffer provided as input for further processing.

@param input
           the buffer.
@throws IllegalStateException
            if this MAC is not initialized."
      end

      operation 1800091 "update"
	public explicit_return_type "void"
	nparams 1
	  param inout name "input" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates this {@code Mac} instance with the data from the specified
buffer, starting at {@link ByteBuffer#position()}, including the next
{@link ByteBuffer#remaining()} bytes.

@param input
           the buffer.
@throws IllegalStateException
            if this MAC is not initialized."
      end

      operation 1800219 "doFinal"
	public explicit_return_type "byte"
	nparams 0
	nexceptions 1
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the digest of this MAC based on the data previously specified in
{@link #update} calls.
<p>
This {@code Mac} instance is reverted to its initial state and can be
used to start the next MAC computation with the same parameters or
initialized with different parameters.

@return the generated digest.
@throws IllegalStateException
            if this MAC is not initialized."
      end

      operation 1800347 "doFinal"
	public explicit_return_type "void"
	nparams 2
	  param inout name "output" explicit_type "byte"
	  param in name "outOffset" explicit_type "int"
	nexceptions 2
	  exception class_ref 287131 // ShortBufferException
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the digest of this MAC based on the data previously specified in
{@link #update} calls and stores the digest in the specified {@code
output} buffer at offset {@code outOffset}.
<p>
This {@code Mac} instance is reverted to its initial state and can be
used to start the next MAC computation with the same parameters or
initialized with different parameters.

@param output
           the output buffer
@param outOffset
           the offset in the output buffer
@throws ShortBufferException
            if the specified output buffer is either too small for the
            digest to be stored, the specified output buffer is {@code
            null}, or the specified offset is negative or past the length
            of the output buffer.
@throws IllegalStateException
            if this MAC is not initialized."
      end

      operation 1800475 "doFinal"
	public explicit_return_type "byte"
	nparams 1
	  param inout name "input" explicit_type "byte"
	nexceptions 1
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the digest of this MAC based on the data previously specified on
{@link #update} calls and on the final bytes specified by {@code input}
(or based on those bytes only).
<p>
This {@code Mac} instance is reverted to its initial state and can be
used to start the next MAC computation with the same parameters or
initialized with different parameters.

@param input
           the final bytes.
@return the generated digest.
@throws IllegalStateException
            if this MAC is not initialized."
      end

      operation 1800603 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this {@code Mac} instance to its initial state.
<p>
This {@code Mac} instance is reverted to its initial state and can be
used to start the next MAC computation with the same parameters or
initialized with different parameters."
      end

      operation 1800731 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 151451 // CloneNotSupportedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Clones this {@code Mac} instance and the underlying implementation.

@return the cloned instance.
@throws CloneNotSupportedException
            if the underlying implementation does not support cloning."
      end
    end

    class 288923 "MacSpi"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <i>Service-Provider Interface</i> (<b>SPI</b>) definition for the {@code
Mac} class.

@see Mac"
      operation 1800859 "MacSpi"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code MacSpi} instance."
      end

      operation 1800987 "engineGetMacLength"
	abstract protected explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of this MAC (in bytes).

@return the length of this MAC (in bytes)."
      end

      operation 1801115 "engineInit"
	abstract protected explicit_return_type "void"
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "params" type class_ref 196123 // AlgorithmParameterSpec
	nexceptions 2
	  exception class_ref 201755 // InvalidKeyException
	  exception class_ref 196251 // InvalidAlgorithmParameterException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes this {@code MacSpi} instance with the specified key and
algorithm parameters.

@param key
           the key to initialize this algorithm.
@param params
           the parameters for this algorithm.
@throws InvalidKeyException
            if the specified key cannot be used to initialize this
            algorithm, or it is {@code null}.
@throws InvalidAlgorithmParameterException
            if the specified parameters cannot be used to initialize this
            algorithm."
      end

      operation 1801243 "engineUpdate"
	abstract protected explicit_return_type "void"
	nparams 1
	  param in name "input" explicit_type "byte"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates this {@code MacSpi} instance with the specified byte.

@param input
           the byte."
      end

      operation 1801371 "engineUpdate"
	abstract protected explicit_return_type "void"
	nparams 3
	  param inout name "input" explicit_type "byte"
	  param in name "offset" explicit_type "int"
	  param in name "len" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates this {@code MacSpi} instance with the data from the specified
buffer {@code input} from the specified {@code offset} and length {@code
len}.

@param input
           the buffer.
@param offset
           the offset in the buffer.
@param len
           the length of the data in the buffer."
      end

      operation 1801499 "engineUpdate"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "input" type class_ref 142363 // ByteBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates this {@code MacSpi} instance with the data from the specified
buffer, starting at {@link ByteBuffer#position()}, including the next
{@link ByteBuffer#remaining()} bytes.

@param input
           the buffer."
      end

      operation 1801627 "engineDoFinal"
	abstract protected explicit_return_type "byte"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes the digest of this MAC based on the data previously specified in
{@link #engineUpdate} calls.
<p>
This {@code MacSpi} instance is reverted to its initial state and
can be used to start the next MAC computation with the same parameters or
initialized with different parameters.

@return the generated digest."
      end

      operation 1801755 "engineReset"
	abstract protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this {@code MacSpi} instance to its initial state.
<p>
This {@code MacSpi} instance is reverted to its initial state and can be
used to start the next MAC computation with the same parameters or
initialized with different parameters."
      end

      operation 1801883 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	nexceptions 1
	  exception class_ref 151451 // CloneNotSupportedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Clones this {@code MacSpi} instance.

@return the cloned instance.
@throws CloneNotSupportedException
            if cloning is not supported."
      end
    end

    class 289051 "NullCipher"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides an identity cipher that does not transform the input data
in any way. The <i>encrypted</i> data is identical to the <i>plain text</i>."
      classrelation 514459 // <generalisation>
	relation 514459 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 514459 // <generalisation>
	  b parent class_ref 286619 // Cipher
      end

      operation 1802267 "NullCipher"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code NullCipher} instance."
      end
    end

    class 289179 "SealedObject"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code SealedObject} is a wrapper around a {@code serializable} object
instance and encrypts it using a cryptographic cipher.

<p>Since a {@code SealedObject} instance is serializable it can
either be stored or transmitted over an insecure channel.

<p>The wrapped object can later be decrypted (unsealed) using the corresponding
key and then be deserialized to retrieve the original object. The sealed
object itself keeps track of the cipher and corresponding parameters."
      classrelation 514587 // <realization>
	relation 514587 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 514587 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 439323 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4482838265551344752L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 439451 "encodedParams"
	protected explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The cipher's {@link AlgorithmParameters} in encoded format.
Equivalent to {@code cipher.getParameters().getEncoded()},
or null if the cipher did not use any parameters.
"
      end

      attribute 439579 "encryptedContent"
	private explicit_type "byte"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 514715 // sealAlg (<unidirectional association>)
	relation 514715 --->
	  a role_name "sealAlg" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 514715 // sealAlg (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 514843 // paramsAlg (<unidirectional association>)
	relation 514843 --->
	  a role_name "paramsAlg" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 514843 // paramsAlg (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1802395 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1802523 "SealedObject"
	public explicit_return_type ""
	nparams 2
	  param inout name "object" type class_ref 128155 // Serializable
	  param inout name "c" type class_ref 286619 // Cipher
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 287259 // IllegalBlockSizeException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code SealedObject} instance wrapping the specified object
and sealing it using the specified cipher.
<p>
The cipher must be fully initialized.

@param object
           the object to seal, can be {@code null}.
@param c
           the cipher to encrypt the object.
@throws IOException
            if the serialization fails.
@throws IllegalBlockSizeException
            if the specified cipher is a block cipher and the length of
            the serialized data is not a multiple of the ciphers block
            size.
@throws NullPointerException
            if the cipher is {@code null}."
      end

      operation 1802651 "SealedObject"
	protected explicit_return_type ""
	nparams 1
	  param inout name "so" type class_ref 289179 // SealedObject
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code SealedObject} instance by copying the data from
the specified object.

@param so
           the object to copy."
      end

      operation 1802779 "getAlgorithm"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the algorithm this object was sealed with.

@return the algorithm this object was sealed with."
      end

      operation 1802907 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "key" type class_ref 202011 // Key
	nexceptions 4
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the wrapped object, decrypting it using the specified key.

@param key
           the key to decrypt the data with.
@return the encapsulated object.
@throws IOException
            if deserialization fails.
@throws ClassNotFoundException
            if deserialization fails.
@throws NoSuchAlgorithmException
            if the algorithm to decrypt the data is not available.
@throws InvalidKeyException
            if the specified key cannot be used to decrypt the data."
      end

      operation 1803035 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "c" type class_ref 286619 // Cipher
	nexceptions 4
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 287259 // IllegalBlockSizeException
	  exception class_ref 286491 // BadPaddingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the wrapped object, decrypting it using the specified
cipher.

@param c
           the cipher to decrypt the data.
@return the encapsulated object.
@throws IOException
            if deserialization fails.
@throws ClassNotFoundException
            if deserialization fails.
@throws IllegalBlockSizeException
            if the specified cipher is a block cipher and the length of
            the serialized data is not a multiple of the ciphers block
            size.
@throws BadPaddingException
            if the padding of the data does not match the padding scheme."
      end

      operation 1803163 "getObject"
	public return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "key" type class_ref 202011 // Key
	  param inout name "provider" type class_ref 3399692 // String
	nexceptions 5
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 195995 // NoSuchProviderException
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the wrapped object, decrypting it using the specified key. The
specified provider is used to retrieve the cipher algorithm.

@param key
           the key to decrypt the data.
@param provider
           the name of the provider that provides the cipher algorithm.
@return the encapsulated object.
@throws IOException
            if deserialization fails.
@throws ClassNotFoundException
            if deserialization fails.
@throws NoSuchAlgorithmException
            if the algorithm used to decrypt the data is not available.
@throws NoSuchProviderException
            if the specified provider is not available.
@throws InvalidKeyException
            if the specified key cannot be used to decrypt the data."
      end
    end

    class 289307 "SecretKeyFactory"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The public API for {@code SecretKeyFactory} implementations.
<p>
Secret key factories provide the following functionality:
<ul>
<li>convert {@link SecretKey} objects to and from {@link KeySpec} objects</li>
<li>translate {@link SecretKey} objects from one provider implementation to
another</li>
</ul>
Which key specifications are supported by the {@link #generateSecret} and
{@link #getKeySpec} is provider dependent."
      classrelation 515099 // ENGINE (<unidirectional association>)
	relation 515099 --->
	  a role_name "ENGINE" init_value " new Engine(\"SecretKeyFactory\")" class_relation const_relation private
	    comment " Used to access common engine functionality
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 515099 // ENGINE (<unidirectional association>)
	  b parent class_ref 195355 // Engine
      end

      classrelation 515227 // provider (<unidirectional association>)
	relation 515227 --->
	  a role_name "provider" const_relation private
	    comment " Store used provider
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 515227 // provider (<unidirectional association>)
	  b parent class_ref 195611 // Provider
      end

      classrelation 515355 // spiImpl (<unidirectional association>)
	relation 515355 --->
	  a role_name "spiImpl" const_relation private
	    comment " Store used spi implementation
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 515355 // spiImpl (<unidirectional association>)
	  b parent class_ref 289435 // SecretKeyFactorySpi
      end

      classrelation 515483 // algorithm (<unidirectional association>)
	relation 515483 --->
	  a role_name "algorithm" const_relation private
	    comment " Store used algorithm name
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 515483 // algorithm (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1803291 "SecretKeyFactory"
	protected explicit_return_type ""
	nparams 3
	  param inout name "keyFacSpi" type class_ref 289435 // SecretKeyFactorySpi
	  param inout name "provider" type class_ref 195611 // Provider
	  param inout name "algorithm" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code SecretKeyFactory}

@param keyFacSpi
           the SPI delegate.
@param provider
           the provider providing this key factory.
@param algorithm
           the algorithm name for the secret key."
      end

      operation 1803419 "getAlgorithm"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the name of the secret key algorithm.

@return the name of the secret key algorithm."
      end

      operation 1803547 "getProvider"
	public return_type class_ref 195611 // Provider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the provider for this {@code SecretKeyFactory} instance.

@return the provider for this {@code SecretKeyFactory} instance."
      end

      operation 1803675 "getInstance"
	class_operation public return_type class_ref 289307 // SecretKeyFactory
	nparams 1
	  param inout name "algorithm" type class_ref 3399692 // String
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code SecretKeyFactory} instance for the specified key
algorithm.

@param algorithm
           the name of the key algorithm.
@return a secret key factory for the specified key algorithm.
@throws NoSuchAlgorithmException
            if no installed provider can provide the requested algorithm.
@throws NullPointerException
            if the specified algorithm is {@code null}."
      end

      operation 1803803 "getInstance"
	class_operation public return_type class_ref 289307 // SecretKeyFactory
	nparams 2
	  param inout name "algorithm" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 3399692 // String
	nexceptions 2
	  exception class_ref 195867 // NoSuchAlgorithmException
	  exception class_ref 195995 // NoSuchProviderException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code SecretKeyFactory} instance for the specified key
algorithm from the specified {@code provider}.

@param algorithm
           the name of the key algorithm.
@param provider
           the name of the provider that provides the requested
           algorithm.
@return a secret key factory for the specified key algorithm from the
        specified provider.
@throws NoSuchAlgorithmException
            if the specified provider cannot provide the requested
            algorithm.
@throws NoSuchProviderException
            if the specified provider does not exist.
@throws IllegalArgumentException
            if the specified provider name is {@code null} or empty."
      end

      operation 1803931 "getInstance"
	class_operation public return_type class_ref 289307 // SecretKeyFactory
	nparams 2
	  param inout name "algorithm" type class_ref 3399692 // String
	  param inout name "provider" type class_ref 195611 // Provider
	nexceptions 1
	  exception class_ref 195867 // NoSuchAlgorithmException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code SecretKeyFactory} instance for the specified key
algorithm from the specified provider.

@param algorithm
           the name of the key algorithm.
@param provider
           the provider that provides the requested algorithm.
@return a secret key factory for the specified key algorithm from the
        specified provider.
@throws NoSuchAlgorithmException
            if the specified provider cannot provider the requested
            algorithm.
@throws IllegalArgumentException
            if the specified provider is {@code null}.
@throws NullPointerException
            is the specified algorithm name is {@code null}."
      end

      operation 1804059 "generateSecret"
	public return_type class_ref 205851 // SecretKey
	nparams 1
	  param inout name "keySpec" type class_ref 202395 // KeySpec
	nexceptions 1
	  exception class_ref 202523 // InvalidKeySpecException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a secret key from the specified key specification.

@param keySpec
           the key specification.
@return a secret key.
@throws InvalidKeySpecException
            if the specified key specification cannot be used to generate
            a secret key."
      end

      operation 1804187 "getKeySpec"
	public return_type class_ref 202395 // KeySpec
	nparams 2
	  param inout name "key" type class_ref 205851 // SecretKey
	  param inout name "keySpec" type class_ref 3421708 // Class
	nexceptions 1
	  exception class_ref 202523 // InvalidKeySpecException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns the key specification of the specified secret key.

@param key
           the secret key to get the specification from.
@param keySpec
           the target key specification class.
@return an instance of the specified key specification class.
@throws InvalidKeySpecException
            if the specified secret key cannot be transformed into the
            requested key specification."
      end

      operation 1804315 "translateKey"
	public return_type class_ref 205851 // SecretKey
	nparams 1
	  param inout name "key" type class_ref 205851 // SecretKey
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the specified secret key into an instance of the corresponding
key from the provider of this key factory.

@param key
           the secret key to translate.
@return the corresponding translated key.
@throws InvalidKeyException
            if the specified key cannot be translated using this key
            factory."
      end
    end

    class 289435 "SecretKeyFactorySpi"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The <i>Service Provider Interface</i> (<b>SPI</b>) definition for the {@code
SecretKeyFactory} class."
      operation 1804443 "SecretKeyFactorySpi"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code SecretKeyFactorySpi} instance."
      end

      operation 1804571 "engineGenerateSecret"
	abstract protected return_type class_ref 205851 // SecretKey
	nparams 1
	  param inout name "keySpec" type class_ref 202395 // KeySpec
	nexceptions 1
	  exception class_ref 202523 // InvalidKeySpecException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Generate a secret key from the specified key specification.

@param keySpec
           the key specification.
@return a secret key.
@throws InvalidKeySpecException
            if the specified key specification cannot be used to generate
            a secret key."
      end

      operation 1804699 "engineGetKeySpec"
	abstract protected return_type class_ref 202395 // KeySpec
	nparams 2
	  param inout name "key" type class_ref 205851 // SecretKey
	  param inout name "keySpec" type class_ref 3421708 // Class
	nexceptions 1
	  exception class_ref 202523 // InvalidKeySpecException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns the key specification of the specified secret key.

@param key
           the secret key to get the specification from.
@param keySpec
           the target key specification class.
@return an instance of the specified key specification class.
@throws InvalidKeySpecException
            if the specified secret key cannot be transformed into the
            requested key specification."
      end

      operation 1804827 "engineTranslateKey"
	abstract protected return_type class_ref 205851 // SecretKey
	nparams 1
	  param inout name "key" type class_ref 205851 // SecretKey
	nexceptions 1
	  exception class_ref 201755 // InvalidKeyException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Translates the specified secret key into an instance of the corresponding
key from the provider of this key factory.

@param key
           the secret key to translate.
@return the corresponding translated key.
@throws InvalidKeyException
            if the specified key cannot be translated using this key
            factory."
      end
    end
  end

  deploymentview 132507 "crypto"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 242203 "BadPaddingException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_classes
	class_ref 286491 // BadPaddingException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 242331 "Cipher"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import java.security.AlgorithmParameters;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.InvalidParameterException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.security.SecureRandom;
import java.security.Security;
import java.security.cert.Certificate;
import java.security.cert.X509Certificate;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Set;
import org.apache.harmony.crypto.internal.NullCipherSpi;
import org.apache.harmony.security.fortress.Engine;
${definition}"
      associated_classes
	class_ref 286619 // Cipher
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 242459 "CipherInputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.GeneralSecurityException;
import libcore.io.Streams;
${definition}"
      associated_classes
	class_ref 287387 // CipherInputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 242587 "CipherOutputStream"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import libcore.io.Streams;
${definition}"
      associated_classes
	class_ref 287515 // CipherOutputStream
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 242715 "CipherSpi"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import java.security.AlgorithmParameters;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
${definition}"
      associated_classes
	class_ref 286747 // CipherSpi
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 242843 "EncryptedPrivateKeyInfo"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.security.AlgorithmParameters;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.PKCS8EncodedKeySpec;
import org.apache.harmony.security.asn1.ASN1Any;
import org.apache.harmony.security.asn1.ASN1Implicit;
import org.apache.harmony.security.asn1.ASN1Integer;
import org.apache.harmony.security.asn1.ASN1OctetString;
import org.apache.harmony.security.asn1.ASN1Sequence;
import org.apache.harmony.security.asn1.ASN1SetOf;
import org.apache.harmony.security.asn1.ASN1Type;
import org.apache.harmony.security.utils.AlgNameMapper;
import org.apache.harmony.security.x509.AlgorithmIdentifier;
${definition}"
      associated_classes
	class_ref 287643 // EncryptedPrivateKeyInfo
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 242971 "ExemptionMechanism"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.AlgorithmParameters;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.security.Security;
import java.security.spec.AlgorithmParameterSpec;
import java.util.Arrays;
import org.apache.harmony.security.fortress.Engine;
${definition}"
      associated_classes
	class_ref 287003 // ExemptionMechanism
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 243099 "ExemptionMechanismException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_classes
	class_ref 288155 // ExemptionMechanismException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 243227 "ExemptionMechanismSpi"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.AlgorithmParameters;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.spec.AlgorithmParameterSpec;
${definition}"
      associated_classes
	class_ref 288027 // ExemptionMechanismSpi
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 243355 "IllegalBlockSizeException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_classes
	class_ref 287259 // IllegalBlockSizeException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 243483 "KeyAgreement"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.security.SecureRandom;
import java.security.Security;
import java.security.spec.AlgorithmParameterSpec;
import org.apache.harmony.security.fortress.Engine;
${definition}"
      associated_classes
	class_ref 288283 // KeyAgreement
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 243611 "KeyAgreementSpi"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
${definition}"
      associated_classes
	class_ref 288411 // KeyAgreementSpi
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 243739 "KeyGenerator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.security.SecureRandom;
import java.security.Security;
import java.security.spec.AlgorithmParameterSpec;
import org.apache.harmony.security.fortress.Engine;
${definition}"
      associated_classes
	class_ref 288539 // KeyGenerator
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 243867 "KeyGeneratorSpi"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidAlgorithmParameterException;
import java.security.SecureRandom;
import java.security.spec.AlgorithmParameterSpec;
${definition}"
      associated_classes
	class_ref 288667 // KeyGeneratorSpi
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 243995 "Mac"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.security.Security;
import java.security.spec.AlgorithmParameterSpec;
import org.apache.harmony.security.fortress.Engine;
${definition}"
      associated_classes
	class_ref 288795 // Mac
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 244123 "MacSpi"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.nio.ByteBuffer;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.spec.AlgorithmParameterSpec;
${definition}"
      associated_classes
	class_ref 288923 // MacSpi
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 244251 "NoSuchPaddingException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_classes
	class_ref 286875 // NoSuchPaddingException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 244379 "NullCipher"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.SecureRandom;
import org.apache.harmony.crypto.internal.NullCipherSpi;
${definition}"
      associated_classes
	class_ref 289051 // NullCipher
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.


@author Boris V. Kuznetsov
@version $Revision$"
    end

    artifact 244507 "SealedObject"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.security.AlgorithmParameters;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
${definition}"
      associated_classes
	class_ref 289179 // SealedObject
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 244635 "SecretKey"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.Key;
${definition}"
      associated_classes
	class_ref 205851 // SecretKey
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 244763 "SecretKeyFactory"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Provider;
import java.security.Security;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
import org.apache.harmony.security.fortress.Engine;
${definition}"
      associated_classes
	class_ref 289307 // SecretKeyFactory
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 244891 "SecretKeyFactorySpi"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.InvalidKeyException;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.KeySpec;
${definition}"
      associated_classes
	class_ref 289435 // SecretKeyFactorySpi
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 245019 "ShortBufferException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.security.GeneralSecurityException;
${definition}"
      associated_classes
	class_ref 287131 // ShortBufferException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.


@author Vera Y. Petrashkova
@version $Revision$"
    end
  end

  package_ref 135451 // interfaces

  package_ref 135579 // spec
end
