class Client
!!!913420.cpp!!!	disconnect() : void
    mCameraService->removeClient(mCameraClient);
    mCameraService->setCameraFree(mCameraId);
!!!916108.cpp!!!	Client(in cameraService : sp<CameraService>, in cameraClient : sp<ICameraClient>, in cameraId : int, in cameraFacing : int, in clientPid : int, in servicePid : int)
    int callingPid = getCallingPid();
    LOG1("Client::Client E (pid %d, id %d)", callingPid, cameraId);

    mCameraService = cameraService;
    mCameraClient = cameraClient;
    mCameraId = cameraId;
    mCameraFacing = cameraFacing;
    mClientPid = clientPid;
    mServicePid = servicePid;
    mDestructionStarted = false;

    cameraService->setCameraBusy(cameraId);
    cameraService->loadSound();
    LOG1("Client::Client X (pid %d, id %d)", callingPid, cameraId);
!!!916236.cpp!!!	~Client()
    mCameraService->releaseSound();

    // unconditionally disconnect. function is idempotent
    Client::disconnect();
!!!916748.cpp!!!	getClientLockFromCookie(inout user : void) : Mutex
    return gCameraService->getClientLockById((int) user);
!!!916876.cpp!!!	getClientFromCookie(inout user : void) : Client
    Client* client = gCameraService->getClientByIdUnsafe((int) user);

    // This could happen if the Client is in the process of shutting down (the
    // last strong reference is gone, but the destructor hasn't finished
    // stopping the hardware).
    if (client == NULL) return NULL;

    // destruction already started, so should not be accessed
    if (client->mDestructionStarted) return NULL;

    return client;
