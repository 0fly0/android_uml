class Long
!!!353435.java!!!	Long(in value : long)
        this.value = value;
!!!353563.java!!!	Long(inout string : String)
        this(parseLong(string));
!!!353691.java!!!	byteValue() : byte
        return (byte) value;
!!!353819.java!!!	compareTo(inout object : Long) : int
        return compare(value, object.value);
!!!353947.java!!!	compare(in lhs : long, in rhs : long) : int
        return lhs < rhs ? -1 : (lhs == rhs ? 0 : 1);
!!!354075.java!!!	invalidLong(inout s : String) : NumberFormatException
        throw new NumberFormatException("Invalid long: \"" + s + "\"");
!!!354203.java!!!	decode(inout string : String) : Long
        int length = string.length(), i = 0;
        if (length == 0) {
            throw invalidLong(string);
        }
        char firstDigit = string.charAt(i);
        boolean negative = firstDigit == '-';
        if (negative) {
            if (length == 1) {
                throw invalidLong(string);
            }
            firstDigit = string.charAt(++i);
        }

        int base = 10;
        if (firstDigit == '0') {
            if (++i == length) {
                return valueOf(0L);
            }
            if ((firstDigit = string.charAt(i)) == 'x' || firstDigit == 'X') {
                if (i == length) {
                    throw invalidLong(string);
                }
                i++;
                base = 16;
            } else {
                base = 8;
            }
        } else if (firstDigit == '#') {
            if (i == length) {
                throw invalidLong(string);
            }
            i++;
            base = 16;
        }

        long result = parse(string, i, base, negative);
        return valueOf(result);
!!!354331.java!!!	doubleValue() : double
        return value;
!!!354459.java!!!	equals(inout o : Object) : boolean
        return (o instanceof Long) && (((Long) o).value == value);
!!!354587.java!!!	floatValue() : float
        return value;
!!!354715.java!!!	getLong(inout string : String) : Long
        if (string == null || string.length() == 0) {
            return null;
        }
        String prop = System.getProperty(string);
        if (prop == null) {
            return null;
        }
        try {
            return decode(prop);
        } catch (NumberFormatException ex) {
            return null;
        }
!!!354843.java!!!	getLong(inout string : String, in defaultValue : long) : Long
        if (string == null || string.length() == 0) {
            return valueOf(defaultValue);
        }
        String prop = System.getProperty(string);
        if (prop == null) {
            return valueOf(defaultValue);
        }
        try {
            return decode(prop);
        } catch (NumberFormatException ex) {
            return valueOf(defaultValue);
        }
!!!354971.java!!!	getLong(inout string : String, inout defaultValue : Long) : Long
        if (string == null || string.length() == 0) {
            return defaultValue;
        }
        String prop = System.getProperty(string);
        if (prop == null) {
            return defaultValue;
        }
        try {
            return decode(prop);
        } catch (NumberFormatException ex) {
            return defaultValue;
        }
!!!355099.java!!!	hashCode() : int
        return (int) (value ^ (value >>> 32));
!!!355227.java!!!	intValue() : int
        return (int) value;
!!!355355.java!!!	longValue() : long
        return value;
!!!355483.java!!!	parseLong(inout string : String) : long
        return parseLong(string, 10);
!!!355611.java!!!	parseLong(inout string : String, in radix : int) : long
        if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {
            throw new NumberFormatException("Invalid radix: " + radix);
        }
        if (string == null) {
            throw invalidLong(string);
        }
        int length = string.length(), i = 0;
        if (length == 0) {
            throw invalidLong(string);
        }
        boolean negative = string.charAt(i) == '-';
        if (negative && ++i == length) {
            throw invalidLong(string);
        }

        return parse(string, i, radix, negative);
!!!355739.java!!!	parse(inout string : String, in offset : int, in radix : int, inout negative : boolean) : long
        long max = Long.MIN_VALUE / radix;
        long result = 0, length = string.length();
        while (offset < length) {
            int digit = Character.digit(string.charAt(offset++), radix);
            if (digit == -1) {
                throw invalidLong(string);
            }
            if (max > result) {
                throw invalidLong(string);
            }
            long next = result * radix - digit;
            if (next > result) {
                throw invalidLong(string);
            }
            result = next;
        }
        if (!negative) {
            result = -result;
            if (result < 0) {
                throw invalidLong(string);
            }
        }
        return result;
!!!355867.java!!!	shortValue() : short
        return (short) value;
!!!355995.java!!!	toBinaryString(in v : long) : String
        return IntegralToString.longToBinaryString(v);
!!!356123.java!!!	toHexString(in v : long) : String
        return IntegralToString.longToHexString(v);
!!!356251.java!!!	toOctalString(in v : long) : String
        return IntegralToString.longToOctalString(v);
!!!356379.java!!!	toString() : String
        return Long.toString(value);
!!!356507.java!!!	toString(in n : long) : String
        return IntegralToString.longToString(n);
!!!356635.java!!!	toString(in v : long, in radix : int) : String
        return IntegralToString.longToString(v, radix);
!!!356763.java!!!	valueOf(inout string : String) : Long
        return valueOf(parseLong(string));
!!!356891.java!!!	valueOf(inout string : String, in radix : int) : Long
        return valueOf(parseLong(string, radix));
!!!357019.java!!!	highestOneBit(in v : long) : long
        // Hacker's Delight, Figure 3-1
        v |= (v >> 1);
        v |= (v >> 2);
        v |= (v >> 4);
        v |= (v >> 8);
        v |= (v >> 16);
        v |= (v >> 32);
        return v - (v >>> 1);
!!!357147.java!!!	lowestOneBit(in v : long) : long
        return v & -v;
!!!357275.java!!!	numberOfLeadingZeros(in v : long) : int
        // After Hacker's Delight, Figure 5-6
        if (v < 0) {
            return 0;
        }
        if (v == 0) {
            return 64;
        }
        // On a 64-bit VM, the two previous tests should probably be replaced by
        // if (v <= 0) return ((int) (~v >> 57)) & 64;

        int n = 1;
        int i = (int) (v >>> 32);
        if (i == 0) {
            n +=  32;
            i = (int) v;
        }
        if (i >>> 16 == 0) {
            n +=  16;
            i <<= 16;
        }
        if (i >>> 24 == 0) {
            n +=  8;
            i <<= 8;
        }
        if (i >>> 28 == 0) {
            n +=  4;
            i <<= 4;
        }
        if (i >>> 30 == 0) {
            n +=  2;
            i <<= 2;
        }
        return n - (i >>> 31);
!!!357403.java!!!	numberOfTrailingZeros(in v : long) : int
        int low = (int) v;
        return low !=0 ? Integer.numberOfTrailingZeros(low)
                       : 32 + Integer.numberOfTrailingZeros((int) (v >>> 32));
!!!357531.java!!!	bitCount(in v : long) : int
        // Combines techniques from several sources
        v -=  (v >>> 1) & 0x5555555555555555L;
        v = (v & 0x3333333333333333L) + ((v >>> 2) & 0x3333333333333333L);
        int i =  ((int)(v >>> 32)) + (int) v;
        i = (i & 0x0F0F0F0F) + ((i >>> 4) & 0x0F0F0F0F);
        i += i >>> 8;
        i += i >>> 16;
        return i  & 0x0000007F;
!!!357659.java!!!	rotateLeft(in v : long, in distance : int) : long
        // Shift distances are mod 64 (JLS3 15.19), so we needn't mask -distance
        return (v << distance) | (v >>> -distance);
!!!357787.java!!!	rotateRight(in v : long, in distance : int) : long
        // Shift distances are mod 64 (JLS3 15.19), so we needn't mask -distance
        return (v >>> distance) | (v << -distance);
!!!357915.java!!!	reverseBytes(in v : long) : long
        // Hacker's Delight 7-1, with minor tweak from Veldmeijer
        // http://graphics.stanford.edu/~seander/bithacks.html
        v = ((v >>> 8) & 0x00FF00FF00FF00FFL) | ((v & 0x00FF00FF00FF00FFL) << 8);
        v = ((v >>>16) & 0x0000FFFF0000FFFFL) | ((v & 0x0000FFFF0000FFFFL) <<16);
        return ((v >>>32)                   ) | ((v                      ) <<32);
!!!358043.java!!!	reverse(in v : long) : long
        // Hacker's Delight 7-1, with minor tweak from Veldmeijer
        // http://graphics.stanford.edu/~seander/bithacks.html
        v = ((v >>> 1) & 0x5555555555555555L) | ((v & 0x5555555555555555L) << 1);
        v = ((v >>> 2) & 0x3333333333333333L) | ((v & 0x3333333333333333L) << 2);
        v = ((v >>> 4) & 0x0F0F0F0F0F0F0F0FL) | ((v & 0x0F0F0F0F0F0F0F0FL) << 4);
        v = ((v >>> 8) & 0x00FF00FF00FF00FFL) | ((v & 0x00FF00FF00FF00FFL) << 8);
        v = ((v >>>16) & 0x0000FFFF0000FFFFL) | ((v & 0x0000FFFF0000FFFFL) <<16);
        return ((v >>>32)                   ) | ((v                      ) <<32);
!!!358171.java!!!	signum(in v : long) : int
        return v < 0 ? -1 : (v == 0 ? 0 : 1);
!!!358299.java!!!	valueOf(in v : long) : Long
        return  v >= 128 || v < -128 ? new Long(v) : SMALL_VALUES[((int) v) + 128];
