class Utils
!!!12597004.java!!!	isMonkeyRunning() : boolean
        return ActivityManager.isUserAMonkey();
!!!12597132.java!!!	reboot(inout context : Context) : void

        // Do not reboot if on Mokey run.
        if (isMonkeyRunning()) {
            return;
        }

        Intent rebootIntent = new Intent(Intent.ACTION_REBOOT);
        // Flags that are required for WatchDog to not ignore the intent.
        rebootIntent.putExtra("nowait", 1);
        rebootIntent.putExtra("interval", 1);
        rebootIntent.putExtra("window", 0);
        context.sendBroadcast(rebootIntent);
!!!12597260.java!!!	isSystemMute(inout context : Context) : boolean
        Boolean mute = false;
        if (context != null) {
            AudioManager mAudioManager = (AudioManager) context
                    .getSystemService(Context.AUDIO_SERVICE);
            // boolean mute =
            // mAudioManager.isStreamMute(AudioManager.STREAM_MUSIC);
            // mute = (Boolean) Utils.getValueByAPI(mAudioManager,
            // "isStreamMute",
            // AudioManager.STREAM_MUSIC);
            mute = Utils.getValueByAPI_B(mAudioManager, "isMasterMute", false) ||
                    ((Boolean) Utils.getValueByAPI(mAudioManager, "isStreamMute",
                            AudioManager.STREAM_MUSIC)) ||
                    (mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC)
                        == 0 ? true : false);
        }
        Log.d(TAG, "mAudioManager.isStreamMute() = " + mute);
        return mute;
!!!12597388.java!!!	isWifiOnly() : boolean
        return false;
!!!12597516.java!!!	isValidIpAddress(in ipAddress : String, inout allowEmptyValue : boolean) : boolean
        if (ipAddress == null || ipAddress.length() == 0) {
            return allowEmptyValue;
        }

        int dotCount = 0;
        for (int i = 0; i < ipAddress.length(); i++) {
            if ('.' == ipAddress.charAt(i)) {
                dotCount++;
            }
        }

        if (dotCount != 3) {
            return false;
        }

        try {
            InetAddress.getByName(ipAddress);
            return true;
        } catch (Throwable ex) {
            return false;
        }
!!!12597644.java!!!	isNetworkActive(inout manager : ConnectivityManager, in connectionType : int) : boolean
        if (manager == null) {
            Log.e(TAG, "Connectivity Manager is null!");
            return false;
        } else {
            NetworkInfo networkInfo = manager.getActiveNetworkInfo();

            if (networkInfo == null) {
                return false;
            }

            if (connectionType == networkInfo.getType()) {
                if (networkInfo.getState() == State.CONNECTED) {
                    return true;
                }
            }
            return false;
        }
!!!12597772.java!!!	isNetworkConnected(inout context : Context) : boolean
        ConnectivityManager manager = (ConnectivityManager) context.getSystemService(
                Context.CONNECTIVITY_SERVICE);
        NetworkInfo info = manager.getActiveNetworkInfo();
        boolean connected = (info != null) && info.isConnected();
        return connected;
!!!12597900.java!!!	CreateObjectByClass(in className : String) : Object
        Object obj = null;
        if (!className.isEmpty()) {
            try {
                Class<?> c = Class.forName(className);
                obj = c.newInstance();
            } catch (Exception e) {
                Log.w(TAG, "CreateObjectByClass " + className + " exception " + e);
            }
        }
        return obj;
!!!12598028.java!!!	GetClassTypeByClassName(in className : String) : Class<?>
        Class<?> c = null;
        if (!className.isEmpty()) {
            try {
                c = Class.forName(className);
            } catch (Exception e) {
                Log.w(TAG, "GetClassTypeByClassName " + className + " exception " + e);
            }
        }
        return c;
!!!12598156.java!!!	getValueByAPI(inout API_obj : Object, in API_name : String) : int
        int retVal = 0;
        Class<?> iClass = API_obj.getClass();
        try {
            Method getMethod = iClass.getMethod("get" + API_name);
            retVal = (Integer) getMethod.invoke(API_obj);
            Log.v(TAG, "getValueByAPI " + API_name + " return:" + retVal);
        } catch (Exception e) {
            Log.w(TAG, "getValueByAPI " + API_name + " exception " + e);
        }
        return retVal;
!!!12598284.java!!!	getValueByAPI(inout API_obj : Object, in API_name : String, in value : int) : Object
        Object retVal = null;
        Class<?> iClass = API_obj.getClass();
        try {
            Method getMethod = iClass.getMethod(API_name, int.class);
            retVal = getMethod.invoke(API_obj, value);
            Log.v(TAG, "getValueByAPI " + API_name + " return:" + retVal);
        } catch (Exception e) {
            Log.w(TAG, "getValueByAPI " + API_name + " exception " + e);
        }
        return retVal;
!!!12598412.java!!!	getValueByAPI_S(inout API_obj : Object, in API_name : String) : String
        String retVal = null;
        Class<?> iClass = API_obj.getClass();
        try {
            Method getMethod = iClass.getMethod("get" + API_name);
            retVal = (String) getMethod.invoke(API_obj);
            Log.v(TAG, "getValueByAPI " + API_name + " return:" + retVal);
        } catch (Exception e) {
            Log.w(TAG, "getValueByAPI " + API_name + " exception " + e);
        }
        return retVal;
!!!12598540.java!!!	getValueByAPI_B(inout API_obj : Object, in API_name : String, inout defaultv : boolean) : boolean
        boolean retVal = defaultv;
        Class<?> iClass = API_obj.getClass();
        try {
            Method getMethod = iClass.getMethod(API_name);
            retVal = (Boolean) getMethod.invoke(API_obj);
            Log.v(TAG, "getValueByAPI " + API_name + " return:" + retVal);
        } catch (Exception e) {
            Log.w(TAG, "getValueByAPI " + API_name + " exception " + e);
        }
        return retVal;
!!!12598668.java!!!	setValueByAPI(inout API_obj : Object, in API_name : String, in val : int) : void
        Class<?> iClass = API_obj.getClass();
        try {
            Method setMethod = iClass.getMethod("set" + API_name, new Class[] {
                    int.class
            });
            Log.v(TAG, "setValueByAPI " + API_name + " value:" + val);
            setMethod.invoke(API_obj, val);
        } catch (Exception e) {
            Log.w(TAG, "setValueByAPI " + API_name + " exception " + e);
        }
!!!12598796.java!!!	invokeStaticMethod(in className : String, in methodName : String, inout args : Object) : Object
        if (!className.isEmpty()) {
            try {
                Class<?> c = Class.forName(className);
                Class<?>[] argsClass = new Class[args.length];

                for (int i = 0, j = args.length; i < j; i++) {
                    argsClass[i] = args[i].getClass();
                }

                Method method = c.getMethod(methodName, argsClass);
                return method.invoke(null, args);
            } catch (Exception e) {
                Log.w(TAG, "invokeStaticMethod " + className + "."
                        + methodName + " exception " + e);
            }
        }

        return null;
!!!12599052.java!!!	getPropertiesFile(in file : String, in context : Context) : Properties

        Properties properties = new Properties();
        InputStream stream = null;
        try {
            AssetManager assets = context.getResources().getAssets();
            stream = assets.open(file);
            properties.load(stream);
        } catch (IOException e) {
            ProgramaticException.displayException(context, TAG, e);
        } finally {
            if (stream != null) {
                try {
                    stream.close();
                } catch (IOException e) {
                    Log.e(TAG, " Exception occured when closing stream " + e);
                }
            }
        }
        return properties;
!!!12599180.java!!!	getRealTime() : long
        return SystemClock.elapsedRealtime();
!!!12599308.java!!!	startSleepTimer(in context : Context, in timer : int) : void
        Intent intent = new Intent(TvIntents.ACTION_START_TIMER_SLEEP);
        if (timer > 0) {
            intent.putExtra(TvIntents.EXTRA_TIMER_VALUE, timer);
            context.startService(intent);
            mSleepEndTime = getRealTime() + timer;
        } else {
            context.stopService(intent);
        }
!!!12599436.java!!!	getSleepTimerRemainingMinutes() : int
        long realTime = getRealTime();
        int minutes = 0;
        if (mSleepEndTime > realTime) {
            minutes = (int) ((mSleepEndTime - realTime + ONE_MINUTE - 1) / ONE_MINUTE);
        }

        return minutes;
!!!12599564.java!!!	startAutoPowerOffTimer(in context : Context, in timer : int) : void
        Intent intent = new Intent(TvIntents.ACTION_START_TIMER_AUTO_POWER);
        if (timer > 0) {
            intent.putExtra(TvIntents.EXTRA_TIMER_VALUE, timer);
            context.startService(intent);
        } else {
            context.stopService(intent);
        }
!!!12599692.java!!!	startNoSignalTimer(in context : Context, in timer : int) : void
        Intent intent = new Intent(TvIntents.ACTION_START_TIMER_NO_SIGNAL);
        if (timer > 0) {
            intent.putExtra(TvIntents.EXTRA_TIMER_VALUE, timer);
            context.startService(intent);
        } else {
            context.stopService(intent);
        }
!!!12599820.java!!!	setAlarmStartPendingService(in context : Context, in type : int, in pendingTime : int, inout intent : Intent) : void
        AlarmManager alarmManager = (AlarmManager) context
                .getSystemService(Context.ALARM_SERVICE);
        PendingIntent pendingIntent = null;
        switch (type) {
            case 0:
                pendingIntent = PendingIntent.getService(context, 007,
                        intent, PendingIntent.FLAG_CANCEL_CURRENT);
                break;
            case 1:
                pendingIntent = PendingIntent.getBroadcast(context, 007,
                        intent, PendingIntent.FLAG_CANCEL_CURRENT);
                break;
            case 2:
                pendingIntent = PendingIntent.getActivity(context, 007,
                        intent, PendingIntent.FLAG_CANCEL_CURRENT);
                break;
            default:
                return;
        }
        long triggerTime = getRealTime() + pendingTime;
        alarmManager.set(AlarmManager.ELAPSED_REALTIME, triggerTime, pendingIntent);
!!!12599948.java!!!	getServiceBinder(in serviceName : String) : IBinder
        IBinder binder = null;
        int tryCount = 0;
        do {
            Object[] argArray = new Object[1];
            argArray[0] = serviceName;
            binder = (IBinder) Utils.invokeStaticMethod("android.os.ServiceManager",
                    "getService", argArray);
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                Log.w(TAG, "getService e = " + e);
            }
        } while (null == binder && tryCount++ < 10);

        return binder;
!!!12600076.java!!!	isBinderAlive(inout binder : IBinder) : boolean
        boolean ret = true;
        try {
            ret = binder.isBinderAlive();
        } catch (Exception e) {
            Log.e(TAG, "isBinderAlive exception" + e);
            ret = false;
        }
        return ret;
!!!12600460.java!!!	bindTvRemoteService(inout context : Context) : void
        Log.d(TAG, "bindTvRemoteService context=" + context);
        if (context != null && getTvRemoteService() == null) {
            Intent tvRemoteintent = new Intent(TvIntents.ACTION_BIND_TV_REMOTE_SERVICE);
            mTvRemoteServiceConnection.mTvContext = context;
            context.bindService(tvRemoteintent, mTvRemoteServiceConnection,
                    Context.BIND_AUTO_CREATE);
        }
!!!12600588.java!!!	unbindTvRemoteService(inout context : Context) : void
        Log.d(TAG, "unbindTvRemoteService context=" + context);
        if (context != null && getTvRemoteService() != null) {
            context.unbindService(mTvRemoteServiceConnection);
            mTvRemoteServiceBinder = null;
            mITvRemoteService = null;
        }
!!!12600716.java!!!	getTvRemoteService() : ITvRemoteService
        if ((mITvRemoteService == null || !isBinderAlive(mTvRemoteServiceBinder))
                && !TvFramework.getInstance().isPrototyping()) {
            mTvRemoteServiceBinder = getServiceBinder(TvIntents.TV_REMOTE_SERVICE_NAME);
            if (mTvRemoteServiceBinder != null) {
                mITvRemoteService = ITvRemoteService.Stub
                        .asInterface(mTvRemoteServiceBinder);
            }
        }
        return mITvRemoteService;
!!!12600844.java!!!	doShutdown(in context : Context) : void
        Log.i(TAG, "doShutdown");

        // Intent intent = new Intent().setAction(ACTION_DO_POWER_OFF);
        // intent.putExtra(NEED_CONFIRM_EXTRA, false);
        // sendBroadcast(intent);

        Intent intent = new Intent(ACTION_REQUEST_SHUTDOWN);
        intent.putExtra(EXTRA_KEY_CONFIRM, false);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        context.startActivity(intent);
!!!12600972.java!!!	isTimeAutomatic(inout context : Context) : boolean
        try {
            return Settings.System.getInt(context.getContentResolver(),
                    Settings.System.AUTO_TIME) > 0;
        } catch (SettingNotFoundException snfe) {
            return true;
        }
!!!12601100.java!!!	syncPSIPDateTime(inout context : Context) : void
        boolean autoEnabled = isTimeAutomatic(context);
        boolean isNetConnected = isNetworkConnected(context);

        if (autoEnabled && !isNetConnected && Wrapper.getWrapperInstance().isDigitalChannel()) {
            USDTVCurrentTime currentTime = TvFramework.getInstance().getSystemInstance()
                    .getCurrentTime();

            Calendar c = Calendar.getInstance();
            c.set(Calendar.YEAR, currentTime.getYear());
            c.set(Calendar.MONTH, currentTime.getMonth() - 1);
            c.set(Calendar.DAY_OF_MONTH, currentTime.getDate());
            c.set(Calendar.HOUR_OF_DAY, currentTime.getHrs());
            c.set(Calendar.MINUTE, currentTime.getMins());
            c.set(Calendar.SECOND, currentTime.getSecs());

            long when = c.getTimeInMillis();
            if (when / 1000 < Integer.MAX_VALUE) {
                SystemClock.setCurrentTimeMillis(when);
            }
        }

