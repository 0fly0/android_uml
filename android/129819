format 74
"regex" // _unknown::java::util::regex
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/util/regex/"
  java_package "java.util.regex"
  classview 129819 "regex"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 153883 "Pattern"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Patterns are compiled regular expressions. In many cases, convenience methods such as
{@link String#matches String.matches}, {@link String#replaceAll String.replaceAll} and
{@link String#split String.split} will be preferable, but if you need to do a lot of work
with the same regular expression, it may be more efficient to compile it once and reuse it.
The {@code Pattern} class and its companion, {@link Matcher}, also offer more functionality
than the small amount exposed by {@code String}.

<pre>
// String convenience methods:
boolean sawFailures = s.matches(\"Failures: \\\\d+\");
String farewell = s.replaceAll(\"Hello, (\\\\S+)\", \"Goodbye, $1\");
String[] fields = s.split(\":\");

// Direct use of Pattern:
Pattern p = Pattern.compile(\"Hello, (\\\\S+)\");
Matcher m = p.matcher(inputString);
while (m.find()) { // Find each match in turn; String can't do this.
    String name = m.group(1); // Access a submatch group; String can't do this.
}
</pre>

<h3>Regular expression syntax</h3>
<span class=\"datatable\">
<style type=\"text/css\">
.datatable td { padding-right: 20px; }
</style>

<p>Java supports a subset of Perl 5 regular expression syntax. An important gotcha is that Java
has no regular expression literals, and uses plain old string literals instead. This means that
you need an extra level of escaping. For example, the regular expression {@code \\s+} has to
be represented as the string {@code \"\\\\s+\"}.

<h3>Escape sequences</h3>
<p><table>
<tr> <td> \\ </td> <td>Quote the following metacharacter (so {@code \\.} matches a literal {@code .}).</td> </tr>
<tr> <td> \\Q </td> <td>Quote all following metacharacters until {@code \\E}.</td> </tr>
<tr> <td> \\E </td> <td>Stop quoting metacharacters (started by {@code \\Q}).</td> </tr>
<tr> <td> \\\\ </td> <td>A literal backslash.</td> </tr>
<tr> <td> &#x005c;u<i>hhhh</i> </td> <td>The Unicode character U+hhhh (in hex).</td> </tr>
<tr> <td> &#x005c;x<i>hh</i> </td> <td>The Unicode character U+00hh (in hex).</td> </tr>
<tr> <td> \\c<i>x</i> </td> <td>The ASCII control character ^x (so {@code \\cH} would be ^H, U+0008).</td> </tr>

<tr> <td> \\a </td> <td>The ASCII bell character (U+0007).</td> </tr>
<tr> <td> \\e </td> <td>The ASCII ESC character (U+001b).</td> </tr>
<tr> <td> \\f </td> <td>The ASCII form feed character (U+000c).</td> </tr>
<tr> <td> \\n </td> <td>The ASCII newline character (U+000a).</td> </tr>
<tr> <td> \\r </td> <td>The ASCII carriage return character (U+000d).</td> </tr>
<tr> <td> \\t </td> <td>The ASCII tab character (U+0009).</td> </tr>
</table>

<h3>Character classes</h3>
<p>It's possible to construct arbitrary character classes using set operations:
<table>
<tr> <td> [abc] </td> <td>Any one of {@code a}, {@code b}, or {@code c}. (Enumeration.)</td> </tr>
<tr> <td> [a-c] </td> <td>Any one of {@code a}, {@code b}, or {@code c}. (Range.)</td> </tr>
<tr> <td> [^abc] </td> <td>Any character <i>except</i> {@code a}, {@code b}, or {@code c}. (Negation.)</td> </tr>
<tr> <td> [[a-f][0-9]] </td> <td>Any character in either range. (Union.)</td> </tr>
<tr> <td> [[a-z]&&[jkl]] </td> <td>Any character in both ranges. (Intersection.)</td> </tr>
</table>
<p>Most of the time, the built-in character classes are more useful:
<table>
<tr> <td> \\d </td> <td>Any digit character (see note below).</td> </tr>
<tr> <td> \\D </td> <td>Any non-digit character (see note below).</td> </tr>
<tr> <td> \\s </td> <td>Any whitespace character (see note below).</td> </tr>
<tr> <td> \\S </td> <td>Any non-whitespace character (see note below).</td> </tr>
<tr> <td> \\w </td> <td>Any word character (see note below).</td> </tr>
<tr> <td> \\W </td> <td>Any non-word character (see note below).</td> </tr>
<tr> <td> \\p{<i>NAME</i>} </td> <td> Any character in the class with the given <i>NAME</i>. </td> </tr>
<tr> <td> \\P{<i>NAME</i>} </td> <td> Any character <i>not</i> in the named class. </td> </tr>
</table>
<p>Note that these built-in classes don't just cover the traditional ASCII range. For example,
<code>\\w</code> is equivalent to the character class <code>[\\p{Ll}\\p{Lu}\\p{Lt}\\p{Lo}\\p{Nd}]</code>.
For more details see <a href=\"http://www.unicode.org/reports/tr18/#Compatibility_Properties\">Unicode TR-18</a>,
and bear in mind that the set of characters in each class can vary between Unicode releases.
If you actually want to match only ASCII characters, specify the explicit characters you want;
if you mean 0-9 use <code>[0-9]</code> rather than <code>\\d</code>, which would also include
Gurmukhi digits and so forth.
<p>There are also a variety of named classes:
<ul>
<li><a href=\"../../lang/Character.html#unicode_categories\">Unicode category names</a>,
prefixed by {@code Is}. For example {@code \\p{IsLu}} for all uppercase letters.
<li>POSIX class names. These are 'Alnum', 'Alpha', 'ASCII', 'Blank', 'Cntrl', 'Digit',
'Graph', 'Lower', 'Print', 'Punct', 'Upper', 'XDigit'.
<li>Unicode block names, as used by {@link java.lang.Character.UnicodeBlock#forName} prefixed
by {@code In}. For example {@code \\p{InHebrew}} for all characters in the Hebrew block.
<li>Character method names. These are all non-deprecated methods from {@link java.lang.Character}
whose name starts with {@code is}, but with the {@code is} replaced by {@code java}.
For example, {@code \\p{javaLowerCase}}.
</ul>

<h3>Quantifiers</h3>
<p>Quantifiers match some number of instances of the preceding regular expression.
<table>
<tr> <td> * </td> <td>Zero or more.</td> </tr>
<tr> <td> ? </td> <td>Zero or one.</td> </tr>
<tr> <td> + </td> <td>One or more.</td> </tr>
<tr> <td> {<i>n</i>} </td> <td>Exactly <i>n</i>.</td> </tr>
<tr> <td> {<i>n,</i>} </td> <td>At least <i>n</i>.</td> </tr>
<tr> <td> {<i>n</i>,<i>m</i>} </td> <td>At least <i>n</i> but not more than <i>m</i>.</td> </tr>
</table>
<p>Quantifiers are \"greedy\" by default, meaning that they will match the longest possible input
sequence. There are also non-greedy quantifiers that match the shortest possible input sequence.
They're same as the greedy ones but with a trailing {@code ?}:
<table>
<tr> <td> *? </td> <td>Zero or more (non-greedy).</td> </tr>
<tr> <td> ?? </td> <td>Zero or one (non-greedy).</td> </tr>
<tr> <td> +? </td> <td>One or more (non-greedy).</td> </tr>
<tr> <td> {<i>n</i>}? </td> <td>Exactly <i>n</i> (non-greedy).</td> </tr>
<tr> <td> {<i>n,</i>}? </td> <td>At least <i>n</i> (non-greedy).</td> </tr>
<tr> <td> {<i>n</i>,<i>m</i>}? </td> <td>At least <i>n</i> but not more than <i>m</i> (non-greedy).</td> </tr>
</table>
<p>Quantifiers allow backtracking by default. There are also possessive quantifiers to prevent
backtracking. They're same as the greedy ones but with a trailing {@code +}:
<table>
<tr> <td> *+ </td> <td>Zero or more (possessive).</td> </tr>
<tr> <td> ?+ </td> <td>Zero or one (possessive).</td> </tr>
<tr> <td> ++ </td> <td>One or more (possessive).</td> </tr>
<tr> <td> {<i>n</i>}+ </td> <td>Exactly <i>n</i> (possessive).</td> </tr>
<tr> <td> {<i>n,</i>}+ </td> <td>At least <i>n</i> (possessive).</td> </tr>
<tr> <td> {<i>n</i>,<i>m</i>}+ </td> <td>At least <i>n</i> but not more than <i>m</i> (possessive).</td> </tr>
</table>

<h3>Zero-width assertions</h3>
<p><table>
<tr> <td> ^ </td> <td>At beginning of line.</td> </tr>
<tr> <td> $ </td> <td>At end of line.</td> </tr>
<tr> <td> \\A </td> <td>At beginning of input.</td> </tr>
<tr> <td> \\b </td> <td>At word boundary.</td> </tr>
<tr> <td> \\B </td> <td>At non-word boundary.</td> </tr>
<tr> <td> \\G </td> <td>At end of previous match.</td> </tr>
<tr> <td> \\z </td> <td>At end of input.</td> </tr>
<tr> <td> \\Z </td> <td>At end of input, or before newline at end.</td> </tr>
</table>

<h3>Look-around assertions</h3>
<p>Look-around assertions assert that the subpattern does (positive) or doesn't (negative) match
after (look-ahead) or before (look-behind) the current position, without including the matched
text in the containing match. The maximum length of possible matches for look-behind patterns
must not be unbounded.
<p><table>
<tr> <td> (?=<i>a</i>) </td> <td>Zero-width positive look-ahead.</td> </tr>
<tr> <td> (?!<i>a</i>) </td> <td>Zero-width negative look-ahead.</td> </tr>
<tr> <td> (?&lt;=<i>a</i>) </td> <td>Zero-width positive look-behind.</td> </tr>
<tr> <td> (?&lt;!<i>a</i>) </td> <td>Zero-width negative look-behind.</td> </tr>
</table>

<h3>Groups</h3>

<p><table>
<tr> <td> (<i>a</i>) </td> <td>A capturing group.</td> </tr>
<tr> <td> (?:<i>a</i>) </td> <td>A non-capturing group.</td> </tr>
<tr> <td> (?&gt;<i>a</i>) </td> <td>An independent non-capturing group. (The first match of the subgroup is the only match tried.)</td> </tr>
<tr> <td> \\<i>n</i> </td> <td>The text already matched by capturing group <i>n</i>.</td> </tr>
</table>
<p>See {@link Matcher#group} for details of how capturing groups are numbered and accessed.

<h3>Operators</h3>
<p><table>
<tr> <td> <i>ab</i> </td> <td>Expression <i>a</i> followed by expression <i>b</i>.</td> </tr>
<tr> <td> <i>a</i>|<i>b</i> </td> <td>Either expression <i>a</i> or expression <i>b</i>.</td> </tr>
</table>

<a name=\"flags\"><h3>Flags</h3></a>
<p><table>
<tr> <td> (?dimsux-dimsux:<i>a</i>) </td> <td>Evaluates the expression <i>a</i> with the given flags enabled/disabled.</td> </tr>
<tr> <td> (?dimsux-dimsux) </td> <td>Evaluates the rest of the pattern with the given flags enabled/disabled.</td> </tr>
</table>

<p>The flags are:
<table>
<tr><td>{@code i}</td> <td>{@link #CASE_INSENSITIVE}</td> <td>case insensitive matching</td></tr>
<tr><td>{@code d}</td> <td>{@link #UNIX_LINES}</td>       <td>only accept {@code '\\n'} as a line terminator</td></tr>
<tr><td>{@code m}</td> <td>{@link #MULTILINE}</td>        <td>allow {@code ^} and {@code $} to match beginning/end of any line</td></tr>
<tr><td>{@code s}</td> <td>{@link #DOTALL}</td>           <td>allow {@code .} to match {@code '\\n'} (\"s\" for \"single line\")</td></tr>
<tr><td>{@code u}</td> <td>{@link #UNICODE_CASE}</td>     <td>enable Unicode case folding</td></tr>
<tr><td>{@code x}</td> <td>{@link #COMMENTS}</td>         <td>allow whitespace and comments</td></tr>
</table>
<p>Either set of flags may be empty. For example, {@code (?i-m)} would turn on case-insensitivity
and turn off multiline mode, {@code (?i)} would just turn on case-insensitivity,
and {@code (?-m)} would just turn off multiline mode.
<p>Note that on Android, {@code UNICODE_CASE} is always on: case-insensitive matching will
always be Unicode-aware.
<p>There are two other flags not settable via this mechanism: {@link #CANON_EQ} and
{@link #LITERAL}. Attempts to use {@link #CANON_EQ} on Android will throw an exception.
</span>

<h3>Implementation notes</h3>

<p>The regular expression implementation used in Android is provided by
<a href=\"http://www.icu-project.org\">ICU</a>. The notation for the regular
expressions is mostly a superset of those used in other Java language
implementations. This means that existing applications will normally work as
expected, but in rare cases Android may accept a regular expression that is
not accepted by other implementations.

<p>In some cases, Android will recognize that a regular expression is a simple
special case that can be handled more efficiently. This is true of both the convenience methods
in {@code String} and the methods in {@code Pattern}.

@see Matcher"
      classrelation 505883 // <realization>
	relation 505883 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 505883 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 429083 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5073258162644648461L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 429211 "UNIX_LINES"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x01"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant specifies that a pattern matches Unix line endings ('\\n')
only against the '.', '^', and '$' meta characters. Corresponds to {@code (?d)}.
"
      end

      attribute 429339 "CASE_INSENSITIVE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x02"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant specifies that a {@code Pattern} is matched
case-insensitively. That is, the patterns \"a+\" and \"A+\" would both match
the string \"aAaAaA\". See {@link #UNICODE_CASE}. Corresponds to {@code (?i)}.
"
      end

      attribute 429467 "COMMENTS"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x04"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant specifies that a {@code Pattern} may contain whitespace or
comments. Otherwise comments and whitespace are taken as literal
characters. Corresponds to {@code (?x)}.
"
      end

      attribute 429595 "MULTILINE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x08"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant specifies that the meta characters '^' and '$' match only
the beginning and end of an input line, respectively. Normally, they
match the beginning and the end of the complete input. Corresponds to {@code (?m)}.
"
      end

      attribute 429723 "LITERAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant specifies that the whole {@code Pattern} is to be taken
literally, that is, all meta characters lose their meanings.
"
      end

      attribute 429851 "DOTALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x20"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant specifies that the '.' meta character matches arbitrary
characters, including line endings, which is normally not the case.
Corresponds to {@code (?s)}.
"
      end

      attribute 429979 "UNICODE_CASE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x40"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant specifies that a {@code Pattern} that uses case-insensitive matching
will use Unicode case folding. On Android, {@code UNICODE_CASE} is always on:
case-insensitive matching will always be Unicode-aware. If your code is intended to
be portable and uses case-insensitive matching on non-ASCII characters, you should
use this flag. Corresponds to {@code (?u)}.
"
      end

      attribute 430107 "CANON_EQ"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x80"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This constant specifies that a character in a {@code Pattern} and a
character in the input string only match if they are canonically
equivalent. It is (currently) not supported in Android.
"
      end

      classrelation 506011 // pattern (<unidirectional association>)
	relation 506011 --->
	  a role_name "pattern" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 506011 // pattern (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 430235 "flags"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 430363 "address"
	package explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1757723 "matcher"
	public return_type class_ref 248475 // Matcher
	nparams 1
	  param inout name "input" type class_ref 133787 // CharSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Matcher} for this pattern applied to the given {@code input}.
The {@code Matcher} can be used to match the {@code Pattern} against the
whole input, find occurrences of the {@code Pattern} in the input, or
replace parts of the input."
      end

      operation 1757851 "split"
	public return_type class_ref 3399692 // String
	nparams 2
	  param inout name "input" type class_ref 133787 // CharSequence
	  param in name "limit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Splits the given {@code input} at occurrences of this pattern.

<p>If this pattern does not occur in the input, the result is an
array containing the input (converted from a {@code CharSequence} to
a {@code String}).

<p>Otherwise, the {@code limit} parameter controls the contents of the
returned array as described below.

@param limit
           Determines the maximum number of entries in the resulting
           array, and the treatment of trailing empty strings.
           <ul>
           <li>For n &gt; 0, the resulting array contains at most n
           entries. If this is fewer than the number of matches, the
           final entry will contain all remaining input.
           <li>For n &lt; 0, the length of the resulting array is
           exactly the number of occurrences of the {@code Pattern}
           plus one for the text after the final separator.
           All entries are included.
           <li>For n == 0, the result is as for n &lt; 0, except
           trailing empty strings will not be returned. (Note that
           the case where the input is itself an empty string is
           special, as described above, and the limit parameter does
           not apply there.)
           </ul>"
      end

      operation 1757979 "split"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "input" type class_ref 133787 // CharSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code split(input, 0)}."
      end

      operation 1758107 "pattern"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the regular expression supplied to {@code compile}."
      end

      operation 1758235 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1758363 "flags"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the flags supplied to {@code compile}."
      end

      operation 1758491 "compile"
	class_operation public return_type class_ref 153883 // Pattern
	nparams 2
	  param inout name "regularExpression" type class_ref 3399692 // String
	  param in name "flags" explicit_type "int"
	nexceptions 1
	  exception class_ref 284571 // PatternSyntaxException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a compiled form of the given {@code regularExpression}, as modified by the
given {@code flags}. See the <a href=\"#flags\">flags overview</a> for more on flags.

@throws PatternSyntaxException if the regular expression is syntactically incorrect.

@see #CANON_EQ
@see #CASE_INSENSITIVE
@see #COMMENTS
@see #DOTALL
@see #LITERAL
@see #MULTILINE
@see #UNICODE_CASE
@see #UNIX_LINES"
      end

      operation 1758619 "compile"
	class_operation public return_type class_ref 153883 // Pattern
	nparams 1
	  param inout name "pattern" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code Pattern.compile(pattern, 0)}."
      end

      operation 1758747 "Pattern"
	private explicit_return_type ""
	nparams 2
	  param inout name "pattern" type class_ref 3399692 // String
	  param in name "flags" explicit_type "int"
	nexceptions 1
	  exception class_ref 284571 // PatternSyntaxException
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1758875 "compile"
	private explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 284571 // PatternSyntaxException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759003 "matches"
	class_operation public explicit_return_type "boolean"
	nparams 2
	  param inout name "regularExpression" type class_ref 3399692 // String
	  param inout name "input" type class_ref 133787 // CharSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tests whether the given {@code regularExpression} matches the given {@code input}.
Equivalent to {@code Pattern.compile(regularExpression).matcher(input).matches()}.
If the same regular expression is to be used for multiple operations, it may be more
efficient to reuse a compiled {@code Pattern}.

@see Pattern#compile(java.lang.String, int)
@see Matcher#matches()"
      end

      operation 1759131 "quote"
	class_operation public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "string" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Quotes the given {@code string} using \"\\Q\" and \"\\E\", so that all
meta-characters lose their special meaning. This method correctly
escapes embedded instances of \"\\Q\" or \"\\E\". If the entire result
is to be passed verbatim to {@link #compile}, it's usually clearer
to use the {@link #LITERAL} flag instead."
      end

      operation 1759259 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1759387 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1759515 "closeImpl"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "addr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1759643 "compileImpl"
	class_operation private explicit_return_type "long"
	nparams 2
	  param inout name "regex" type class_ref 3399692 // String
	  param in name "flags" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end
    end

    class 248475 "Matcher"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The result of applying a {@code Pattern} to a given input. See {@link Pattern} for
example uses."
      classrelation 505243 // <realization>
	relation 505243 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 505243 // <realization>
	  b parent class_ref 248731 // MatchResult
      end

      classrelation 505371 // pattern (<unidirectional association>)
	relation 505371 --->
	  a role_name "pattern" private
	    comment "
Holds the pattern, that is, the compiled regular expression.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 505371 // pattern (<unidirectional association>)
	  b parent class_ref 153883 // Pattern
      end

      attribute 427931 "address"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The address of the native peer.
Uses of this must be manually synchronized to avoid native crashes.
"
      end

      classrelation 505499 // input (<unidirectional association>)
	relation 505499 --->
	  a role_name "input" private
	    comment "
Holds the input text.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 505499 // input (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 428059 "regionStart"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Holds the start of the region, or 0 if the matching should start at the
beginning of the text.
"
      end

      attribute 428187 "regionEnd"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Holds the end of the region, or input.length() if the matching should
go until the end of the input.
"
      end

      attribute 428315 "appendPos"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Holds the position where the next append operation will take place.
"
      end

      attribute 428443 "matchFound"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reflects whether a match has been found during the most recent find
operation.
"
      end

      attribute 428571 "matchOffsets"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Holds the offsets for the most recent match.
"
      end

      attribute 428699 "anchoringBounds"
	private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reflects whether the bounds of the region are anchoring.
"
      end

      attribute 428827 "transparentBounds"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reflects whether the bounds of the region are transparent.
"
      end

      operation 1750555 "Matcher"
	package explicit_return_type ""
	nparams 2
	  param inout name "pattern" type class_ref 153883 // Pattern
	  param inout name "input" type class_ref 133787 // CharSequence
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a matcher for a given combination of pattern and input. Both
elements can be changed later on.

@param pattern
           the pattern to use.
@param input
           the input to use."
      end

      operation 1750683 "appendReplacement"
	public return_type class_ref 248475 // Matcher
	nparams 2
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "replacement" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends a literal part of the input plus a replacement for the current
match to a given {@link StringBuffer}. The literal part is exactly the
part of the input between the previous match and the current match. The
method can be used in conjunction with {@link #find()} and
{@link #appendTail(StringBuffer)} to walk through the input and replace
all occurrences of the {@code Pattern} with something else.

@param buffer
           the {@code StringBuffer} to append to.
@param replacement
           the replacement text.
@return the {@code Matcher} itself.
@throws IllegalStateException
            if no successful match has been made."
      end

      operation 1750811 "appendEvaluated"
	private explicit_return_type "void"
	nparams 2
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Internal helper method to append a given string to a given string buffer.
If the string contains any references to groups, these are replaced by
the corresponding group's contents.

@param buffer
           the string buffer.
@param s
           the string to append."
      end

      operation 1750939 "reset"
	public return_type class_ref 248475 // Matcher
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the {@code Matcher}. This results in the region being set to the
whole input. Results of a previous find get lost. The next attempt to
find an occurrence of the {@link Pattern} in the string will start at the
beginning of the input.

@return the {@code Matcher} itself."
      end

      operation 1751067 "reset"
	public return_type class_ref 248475 // Matcher
	nparams 1
	  param inout name "input" type class_ref 133787 // CharSequence
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Provides a new input and resets the {@code Matcher}. This results in the
region being set to the whole input. Results of a previous find get lost.
The next attempt to find an occurrence of the {@link Pattern} in the
string will start at the beginning of the input.

@param input
           the new input sequence.

@return the {@code Matcher} itself."
      end

      operation 1751195 "reset"
	private return_type class_ref 248475 // Matcher
	nparams 3
	  param inout name "input" type class_ref 133787 // CharSequence
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the Matcher. A new input sequence and a new region can be
specified. Results of a previous find get lost. The next attempt to find
an occurrence of the Pattern in the string will start at the beginning of
the region. This is the internal version of reset() to which the several
public versions delegate.

@param input
           the input sequence.
@param start
           the start of the region.
@param end
           the end of the region.

@return the matcher itself."
      end

      operation 1751323 "usePattern"
	public return_type class_ref 248475 // Matcher
	nparams 1
	  param inout name "pattern" type class_ref 153883 // Pattern
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a new pattern for the {@code Matcher}. Results of a previous find
get lost. The next attempt to find an occurrence of the {@link Pattern}
in the string will start at the beginning of the input.

@param pattern
           the new {@code Pattern}.

@return the {@code Matcher} itself."
      end

      operation 1751451 "resetForInput"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1751579 "region"
	public return_type class_ref 248475 // Matcher
	nparams 2
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets this matcher and sets a region. Only characters inside the region
are considered for a match.

@param start
           the first character of the region.
@param end
           the first character after the end of the region.
@return the {@code Matcher} itself."
      end

      operation 1751707 "appendTail"
	public return_type class_ref 146715 // StringBuffer
	nparams 1
	  param inout name "buffer" type class_ref 146715 // StringBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends the (unmatched) remainder of the input to the given
{@link StringBuffer}. The method can be used in conjunction with
{@link #find()} and {@link #appendReplacement(StringBuffer, String)} to
walk through the input and replace all matches of the {@code Pattern}
with something else.

@param buffer
           the {@code StringBuffer} to append to.
@return the {@code StringBuffer}.
@throws IllegalStateException
            if no successful match has been made."
      end

      operation 1751835 "replaceFirst"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "replacement" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the first occurrence of this matcher's pattern in the input with
a given string.

@param replacement
           the replacement text.
@return the modified input string."
      end

      operation 1751963 "replaceAll"
	public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "replacement" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces all occurrences of this matcher's pattern in the input with a
given string.

@param replacement
           the replacement text.
@return the modified input string."
      end

      operation 1752091 "pattern"
	public return_type class_ref 153883 // Pattern
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the {@link Pattern} instance used inside this matcher.

@return the {@code Pattern} instance."
      end

      operation 1752219 "group"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "group" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the text that matched a given group of the regular expression.
Explicit capturing groups in the pattern are numbered left to right in order
of their <i>opening</i> parenthesis, starting at 1.
The special group 0 represents the entire match (as if the entire pattern is surrounded
by an implicit capturing group).
For example, \"a((b)c)\" matching \"abc\" would give the following groups:
<pre>
0 \"abc\"
1 \"bc\"
2 \"b\"
</pre>

<p>An optional capturing group that failed to match as part of an overall
successful match (for example, \"a(b)?c\" matching \"ac\") returns null.
A capturing group that matched the empty string (for example, \"a(b?)c\" matching \"ac\")
returns the empty string.

@throws IllegalStateException
            if no successful match has been made."
      end

      operation 1752347 "group"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the text that matched the whole regular expression.

@return the text.
@throws IllegalStateException
            if no successful match has been made."
      end

      operation 1752475 "find"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "start" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if there is another match in the input, starting
from the given position. The region is ignored.

@throws IndexOutOfBoundsException if {@code start < 0 || start > input.length()}"
      end

      operation 1752603 "find"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next occurrence of the {@link Pattern} in the input. If a
previous match was successful, the method continues the search from the
first character following that match in the input. Otherwise it searches
either from the region start (if one has been set), or from position 0.

@return true if (and only if) a match has been found."
      end

      operation 1752731 "lookingAt"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to match the {@link Pattern}, starting from the beginning of the
region (or the beginning of the input, if no region has been set).
Doesn't require the {@code Pattern} to match against the whole region.

@return true if (and only if) the {@code Pattern} matches."
      end

      operation 1752859 "matches"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to match the {@link Pattern} against the entire region (or the
entire input, if no region has been set).

@return true if (and only if) the {@code Pattern} matches the entire
        region."
      end

      operation 1752987 "start"
	public explicit_return_type "int"
	nparams 1
	  param in name "group" explicit_type "int"
	nexceptions 1
	  exception class_ref 154267 // IllegalStateException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character of the text that matched a given
group.

@param group
           the group, ranging from 0 to groupCount() - 1, with 0
           representing the whole pattern.
@return the character index.
@throws IllegalStateException
            if no successful match has been made."
      end

      operation 1753115 "end"
	public explicit_return_type "int"
	nparams 1
	  param in name "group" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character following the text that matched
a given group.

@param group
           the group, ranging from 0 to groupCount() - 1, with 0
           representing the whole pattern.
@return the character index.
@throws IllegalStateException
            if no successful match has been made."
      end

      operation 1753243 "quoteReplacement"
	class_operation public return_type class_ref 3399692 // String
	nparams 1
	  param inout name "s" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a replacement string for the given one that has all backslashes
and dollar signs escaped.

@param s
           the input string.
@return the input string, with all backslashes and dollar signs having
        been escaped."
      end

      operation 1753371 "start"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character of the text that matched the
whole regular expression.

@return the character index.
@throws IllegalStateException
            if no successful match has been made."
      end

      operation 1753499 "groupCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of groups in the results, which is always equal to
the number of groups in the original regular expression.

@return the number of groups."
      end

      operation 1753627 "end"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character following the text that matched
the whole regular expression.

@return the character index.
@throws IllegalStateException
            if no successful match has been made."
      end

      operation 1753755 "toMatchResult"
	public return_type class_ref 248731 // MatchResult
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Converts the current match into a separate {@link MatchResult} instance
that is independent from this matcher. The new object is unaffected when
the state of this matcher changes.

@return the new {@code MatchResult}.
@throws IllegalStateException
            if no successful match has been made."
      end

      operation 1753883 "useAnchoringBounds"
	public return_type class_ref 248475 // Matcher
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this matcher has anchoring bounds enabled or not. When
anchoring bounds are enabled, the start and end of the input match the
'^' and '$' meta-characters, otherwise not. Anchoring bounds are enabled
by default.

@param value
           the new value for anchoring bounds.
@return the {@code Matcher} itself."
      end

      operation 1754011 "hasAnchoringBounds"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this matcher has anchoring bounds enabled. When
anchoring bounds are enabled, the start and end of the input match the
'^' and '$' meta-characters, otherwise not. Anchoring bounds are enabled
by default.

@return true if (and only if) the {@code Matcher} uses anchoring bounds."
      end

      operation 1754139 "useTransparentBounds"
	public return_type class_ref 248475 // Matcher
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Determines whether this matcher has transparent bounds enabled or not.
When transparent bounds are enabled, the parts of the input outside the
region are subject to lookahead and lookbehind, otherwise they are not.
Transparent bounds are disabled by default.

@param value
           the new value for transparent bounds.
@return the {@code Matcher} itself."
      end

      operation 1754267 "ensureMatch"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Makes sure that a successful match has been made. Is invoked internally
from various places in the class.

@throws IllegalStateException
            if no successful match has been made."
      end

      operation 1754395 "hasTransparentBounds"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this matcher has transparent bounds enabled. When
transparent bounds are enabled, the parts of the input outside the region
are subject to lookahead and lookbehind, otherwise they are not.
Transparent bounds are disabled by default.

@return true if (and only if) the {@code Matcher} uses anchoring bounds."
      end

      operation 1754523 "regionStart"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this matcher's region start, that is, the index of the first character that is
considered for a match."
      end

      operation 1754651 "regionEnd"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns this matcher's region end, that is, the index of the first character that is
not considered for a match."
      end

      operation 1754779 "requireEnd"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if and only if more input might change a successful match into an
unsuccessful one."
      end

      operation 1754907 "hitEnd"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if and only if the last match hit the end of the input."
      end

      operation 1755035 "finalize"
	protected explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1755163 "closeImpl"
	class_operation private explicit_return_type "void"
	nparams 1
	  param in name "addr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1755291 "findImpl"
	class_operation private explicit_return_type "boolean"
	nparams 4
	  param in name "addr" explicit_type "long"
	  param inout name "s" type class_ref 3399692 // String
	  param in name "startIndex" explicit_type "int"
	  param inout name "offsets" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}${)}${throws};
"
	
	
	
      end

      operation 1755419 "findNextImpl"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param in name "addr" explicit_type "long"
	  param inout name "s" type class_ref 3399692 // String
	  param inout name "offsets" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws};
"
	
	
	
      end

      operation 1755547 "groupCountImpl"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "addr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1755675 "hitEndImpl"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "addr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1755803 "lookingAtImpl"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param in name "addr" explicit_type "long"
	  param inout name "s" type class_ref 3399692 // String
	  param inout name "offsets" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws};
"
	
	
	
      end

      operation 1755931 "matchesImpl"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param in name "addr" explicit_type "long"
	  param inout name "s" type class_ref 3399692 // String
	  param inout name "offsets" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws};
"
	
	
	
      end

      operation 1756059 "openImpl"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "patternAddr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1756187 "requireEndImpl"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "addr" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}${)}${throws};
"
	
	
	
      end

      operation 1756315 "setInputImpl"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "addr" explicit_type "long"
	  param inout name "s" type class_ref 3399692 // String
	  param in name "start" explicit_type "int"
	  param in name "end" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws};
"
	
	
	
      end

      operation 1756443 "useAnchoringBoundsImpl"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "addr" explicit_type "long"
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end

      operation 1756571 "useTransparentBoundsImpl"
	class_operation private explicit_return_type "void"
	nparams 2
	  param in name "addr" explicit_type "long"
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws};
"
	
	
	
      end
    end

    class 248731 "MatchResult"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Holds the results of a successful match of a {@link Pattern} against a
given string. The result is divided into groups, with one group for each
pair of parentheses in the regular expression and an additional group for
the whole regular expression. The start, end, and contents of each group
can be queried.

@see Matcher
@see Matcher#toMatchResult()"
      operation 1749659 "end"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character following the text that matched
the whole regular expression.

@return the character index."
      end

      operation 1749787 "end"
	public explicit_return_type "int"
	nparams 1
	  param in name "group" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character following the text that matched
a given group.

@param group
           the group, ranging from 0 to groupCount() - 1, with 0
           representing the whole pattern.

@return the character index."
      end

      operation 1749915 "group"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the text that matched the whole regular expression.

@return the text."
      end

      operation 1750043 "group"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "group" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the text that matched a given group of the regular expression.

@param group
           the group, ranging from 0 to groupCount() - 1, with 0
           representing the whole pattern.

@return the text that matched the group."
      end

      operation 1750171 "groupCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of groups in the result, which is always equal to
the number of groups in the original regular expression.

@return the number of groups."
      end

      operation 1750299 "start"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character of the text that matched
the whole regular expression.

@return the character index."
      end

      operation 1750427 "start"
	public explicit_return_type "int"
	nparams 1
	  param in name "group" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index of the first character of the text that matched a given
group.

@param group
           the group, ranging from 0 to groupCount() - 1, with 0
           representing the whole pattern.

@return the character index."
      end
    end

    class 284443 "MatchResultImpl"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Holds the results of a successful match of a regular expression against a
given string. Only used internally, thus sparsely documented (though the
defining public interface has full documentation).

@see java.util.regex.MatchResult"
      classrelation 505627 // <realization>
	relation 505627 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 505627 // <realization>
	  b parent class_ref 248731 // MatchResult
      end

      classrelation 505755 // text (<unidirectional association>)
	relation 505755 --->
	  a role_name "text" private
	    comment "
Holds the original input text.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 505755 // text (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 428955 "offsets"
	private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Holds the offsets of the groups in the input text. The first two
elements specifiy start and end of the zero group, the next two specify
group 1, and so on.
"
      end

      operation 1756699 "MatchResultImpl"
	package explicit_return_type ""
	nparams 2
	  param inout name "text" type class_ref 3399692 // String
	  param inout name "offsets" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}[] ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1756827 "end"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1756955 "end"
	public explicit_return_type "int"
	nparams 1
	  param in name "group" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757083 "group"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757211 "group"
	public return_type class_ref 3399692 // String
	nparams 1
	  param in name "group" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757339 "groupCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757467 "start"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1757595 "start"
	public explicit_return_type "int"
	nparams 1
	  param in name "group" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 284571 "PatternSyntaxException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Encapsulates a syntax error that occurred during the compilation of a
{@link Pattern}. Might include a detailed description, the original regular
expression, and the index at which the error occurred.

@see Pattern#compile(String)
@see Pattern#compile(java.lang.String,int)"
      classrelation 506139 // <generalisation>
	relation 506139 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 506139 // <generalisation>
	  b parent class_ref 128283 // IllegalArgumentException
      end

      attribute 430491 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3864639126226059218L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 506267 // desc (<unidirectional association>)
	relation 506267 --->
	  a role_name "desc" private
	    comment "
Holds the description of the syntax error, or null if the description is
not known.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 506267 // desc (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 506395 // pattern (<unidirectional association>)
	relation 506395 --->
	  a role_name "pattern" private
	    comment "
Holds the syntactically incorrect regular expression, or null if the
regular expression is not known.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 506395 // pattern (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 430619 "index"
	private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Holds the index around which the error occured, or -1, in case it is
unknown.
"
      end

      operation 1759771 "PatternSyntaxException"
	public explicit_return_type ""
	nparams 3
	  param inout name "description" type class_ref 3399692 // String
	  param inout name "pattern" type class_ref 3399692 // String
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new PatternSyntaxException for a given message, pattern, and
error index.

@param description
           the description of the syntax error, or {@code null} if the
           description is not known.
@param pattern
           the syntactically incorrect regular expression, or
           {@code null} if the regular expression is not known.
@param index
           the character index around which the error occurred, or -1 if
           the index is not known."
      end

      operation 1759899 "getPattern"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the syntactically incorrect regular expression.

@return the regular expression.
"
      end

      operation 1760027 "getMessage"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a detailed error message for the exception. The message is
potentially multi-line, and it might include a detailed description, the
original regular expression, and the index at which the error occurred.

@return the error message."
      end

      operation 1760155 "getDescription"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the description of the syntax error, or {@code null} if the
description is not known.

@return the description."
      end

      operation 1760283 "getIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the character index around which the error occurred, or -1 if the
index is not known.

@return the index.
"
      end
    end

    class 284699 "Splitter"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Used to make {@code String.split} fast (and to help {@code Pattern.split} too).
@hide"
      classrelation 506523 // METACHARACTERS (<unidirectional association>)
	relation 506523 --->
	  a role_name "METACHARACTERS" init_value " \"\\\\?*+[](){}^$.|\"" class_relation const_relation private
	    comment " The RI allows regular expressions beginning with ] or }, but that's probably a bug.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 506523 // METACHARACTERS (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1760411 "Splitter"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760539 "fastSplit"
	class_operation public return_type class_ref 3399692 // String
	nparams 3
	  param inout name "re" type class_ref 3399692 // String
	  param inout name "input" type class_ref 3399692 // String
	  param in name "limit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a result equivalent to {@code s.split(separator, limit)} if it's able
to compute it more cheaply than ICU, or null if the caller should fall back to
using ICU."
      end

      operation 1760667 "split"
	class_operation public return_type class_ref 3399692 // String
	nparams 4
	  param inout name "pattern" type class_ref 153883 // Pattern
	  param inout name "re" type class_ref 3399692 // String
	  param inout name "input" type class_ref 3399692 // String
	  param in name "limit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1760795 "finishSplit"
	class_operation private return_type class_ref 3399692 // String
	nparams 4
	  param inout name "list" type class_ref 131483 // List
	  param inout name "input" type class_ref 3399692 // String
	  param in name "begin" explicit_type "int"
	  param in name "limit" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${t0}<String> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 132379 "regex"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 239387 "MatchResult"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 248731 // MatchResult
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 239515 "Matcher"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 248475 // Matcher
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 239643 "MatchResultImpl"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 284443 // MatchResultImpl
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 239771 "Pattern"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
${definition}"
      associated_classes
	class_ref 153883 // Pattern
      end
      comment "Copyright (C) 2007 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 239899 "PatternSyntaxException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
${definition}"
      associated_classes
	class_ref 284571 // PatternSyntaxException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 240027 "Splitter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.List;
import libcore.util.EmptyArray;
${definition}"
      associated_classes
	class_ref 284699 // Splitter
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
