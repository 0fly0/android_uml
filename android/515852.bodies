class SensorEventQueue
!!!1502732.cpp!!!	onFirstRef() : void
    mSensorChannel = mSensorEventConnection->getSensorChannel();
!!!1502860.cpp!!!	getFd() : int
    return mSensorChannel->getFd();
!!!1502988.cpp!!!	write(in tube : sp<BitTube>, in events : ASensorEvent, in numEvents : size_t) : ssize_t
    return BitTube::sendObjects(tube, events, numEvents);
!!!1503116.cpp!!!	read(inout events : ASensorEvent, in numEvents : size_t) : ssize_t
    return BitTube::recvObjects(mSensorChannel, events, numEvents);
!!!1503244.cpp!!!	waitForEvent() : status_t
    const int fd = getFd();
    sp<Looper> looper(getLooper());

    int events;
    int32_t result;
    do {
        result = looper->pollOnce(-1, NULL, &events, NULL);
        if (result == ALOOPER_POLL_ERROR) {
            ALOGE("SensorEventQueue::waitForEvent error (errno=%d)", errno);
            result = -EPIPE; // unknown error, so we make up one
            break;
        }
        if (events & ALOOPER_EVENT_HANGUP) {
            // the other-side has died
            ALOGE("SensorEventQueue::waitForEvent error HANGUP");
            result = -EPIPE; // unknown error, so we make up one
            break;
        }
    } while (result != fd);

    return  (result == fd) ? status_t(NO_ERROR) : result;
!!!1503372.cpp!!!	wake() : status_t
    sp<Looper> looper(getLooper());
    looper->wake();
    return NO_ERROR;
!!!1503500.cpp!!!	enableSensor(in sensor : Sensor) : status_t
    return mSensorEventConnection->enableDisable(sensor->getHandle(), true);
!!!1503628.cpp!!!	disableSensor(in sensor : Sensor) : status_t
    return mSensorEventConnection->enableDisable(sensor->getHandle(), false);
!!!1503756.cpp!!!	setEventRate(in sensor : Sensor, in ns : nsecs_t) : status_t
    return mSensorEventConnection->setEventRate(sensor->getHandle(), ns);
!!!1503884.cpp!!!	enableSensor(in handle : int32_t, in us : int32_t) : status_t
    status_t err = mSensorEventConnection->enableDisable(handle, true);
    if (err == NO_ERROR) {
        mSensorEventConnection->setEventRate(handle, us2ns(us));
    }
    return err;
!!!1504012.cpp!!!	disableSensor(in handle : int32_t) : status_t
    return mSensorEventConnection->enableDisable(handle, false);
!!!1504140.cpp!!!	getLooper() : sp<Looper>
    Mutex::Autolock _l(mLock);
    if (mLooper == 0) {
        mLooper = new Looper(true);
        mLooper->addFd(getFd(), getFd(), ALOOPER_EVENT_INPUT, NULL, NULL);
    }
    return mLooper;
