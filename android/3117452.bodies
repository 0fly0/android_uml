class HttpMessage
!!!13098764.java!!!	HttpMessage()

    super();
    this.header = new HashMap<Object, String>();
    this.version = VERSION_1_1;
!!!13098892.java!!!	getVersion() : String

    return this.version;
!!!13099020.java!!!	setVersion(in httpVersion : String) : void

    this.version = httpVersion;
!!!13099148.java!!!	createHeaderNameHash(in name : String) : Object

    return new HeaderPropertyKey(name);
!!!13099276.java!!!	getHeaderProperty(in name : String) : String

    return this.header.get(createHeaderNameHash(name));
!!!13099404.java!!!	setHeaderPropertyAttribute(in name : String, in attributeName : String, in attributeValue : String) : void

    if (attributeName.length() == 0) {
      throw new IllegalArgumentException("Attribute name must NOT be empty!");
    }
    String value = getHeaderProperty(name);
    if (value == null) {
      value = attributeName;
      if (attributeValue.length() > 0) {
        value = value + "=" + attributeValue;
      }
    } else {
      CharSequenceScanner parser = new CharSequenceScanner(value);
      boolean found = false;
      while (parser.hasNext()) {
        boolean startsWith = parser.expect(attributeName, true);
        if (startsWith) {
          int startIndex = parser.getCurrentIndex();
          // be tolerant and ommit spaces
          parser.skipWhile(' ');
          if (parser.hasNext()) {
            char c = parser.next();
            if ((c == '=') || (c == ';') || (c == ',')) {
              found = true;
              if (c == '=') {
                parser.skipWhile(CHAR_FILTER_BLACKLIST_COMMA_OR_SEMICOLON);
              }
              String substring = "";
              if (attributeValue.length() > 0) {
                substring = "=" + attributeValue;
              }
              value = parser.getReplaced(substring, startIndex, parser.getCurrentIndex());
            }
          } else {
            // string end...
            found = true;
            if (attributeValue.length() > 0) {
              value = value + "=" + attributeValue;
            }
          }
        }
        if (found) {
          break;
        } else {
          parser.skipWhile(CHAR_FILTER_BLACKLIST_COMMA_OR_SEMICOLON);
          // ensure to read over ',' / ';'
          parser.forceNext();
        }
      }
      if (!found) {
        StringBuffer buffer = new StringBuffer(value.length() + attributeName.length()
            + attributeValue.length() + 2);
        buffer.append(value);
        buffer.append(',');
        buffer.append(attributeName);
        if (attributeValue.length() > 0) {
          buffer.append('=');
          buffer.append(attributeValue);
        }
        value = buffer.toString();
      }
    }
    setHeaderProperty(name, value);
!!!13099532.java!!!	getHeaderPropertyAttribute(in name : String, in attributeName : String) : String

    if (attributeName.length() == 0) {
      // avoid infinity loop
      return null;
    }
    String value = getHeaderProperty(name);
    if (value != null) {
      CharSequenceScanner parser = new CharSequenceScanner(value);
      while (parser.hasNext()) {
        if (parser.expect(attributeName, true)) {
          // be tolerant and ommit spaces
          parser.skipWhile(' ');
          char c = parser.forceNext();
          if (c == '=') {
            String attributeValue = parser.readWhile(CHAR_FILTER_BLACKLIST_COMMA_OR_SEMICOLON);
            if (attributeValue != null) {
              return attributeValue.trim();
            }
          } else if ((c == ';') || (c == ',')) {
            return "";
          }
        }
        parser.skipWhile(CHAR_FILTER_BLACKLIST_COMMA_OR_SEMICOLON);
        parser.forceNext();
      }
    }
    return null;
!!!13099660.java!!!	setHeaderProperty(in name : String, in value : String) : void

    this.header.put(createHeaderNameHash(name), value);
!!!13099788.java!!!	appendHeaderProperty(in name : String, in appendValue : String) : void

    appendHeaderProperty(name, appendValue, null);
!!!13099916.java!!!	appendHeaderProperty(in name : String, in appendValue : String, in separator : String) : void

    String value = getHeaderProperty(name);
    if (value == null) {
      value = appendValue;
    } else {
      if (separator == null) {
        value = value + appendValue;
      } else {
        StringBuffer buffer = new StringBuffer(value.length() + separator.length()
            + appendValue.length());
        buffer.append(value);
        buffer.append(separator);
        buffer.append(appendValue);
        value = buffer.toString();
      }
    }
    setHeaderProperty(name, value);
!!!13100044.java!!!	getContentType() : String

    return getHeaderProperty(HEADER_PROPERTY_CONTENT_TYPE);
!!!13100172.java!!!	setContentType(in contentType : String) : void

    setHeaderProperty(HEADER_PROPERTY_CONTENT_TYPE, contentType);
!!!13100300.java!!!	getContentLength() : Long

    String length = getHeaderProperty(HEADER_PROPERTY_CONTENT_LENGTH);
    if (length != null) {
      return Long.valueOf(length);
    }
    return null;
!!!13100428.java!!!	setContentLength(in contentLength : long) : void

    setHeaderProperty(HEADER_PROPERTY_CONTENT_LENGTH, Long.toString(contentLength));
!!!13100556.java!!!	getContentEncoding() : String

    return getHeaderProperty(HEADER_PROPERTY_CONTENT_ENCODING);
!!!13100684.java!!!	setContentEncoding(in encoding : String) : void

    setHeaderProperty(HEADER_PROPERTY_CONTENT_ENCODING, encoding);
!!!13100812.java!!!	setCacheControlMaxAge(in seconds : int) : void

    setHeaderPropertyAttribute(HEADER_PROPERTY_CACHE_CONTROL, HEADER_ATTRIBUTE_MAX_AGE, Integer
        .toString(seconds));
!!!13100940.java!!!	getCacheControlMaxAge() : int

    String age = getHeaderPropertyAttribute(HEADER_PROPERTY_CACHE_CONTROL, HEADER_ATTRIBUTE_MAX_AGE);
    int result = -1;
    if (age != null) {
      try {
        result = Integer.parseInt(age.trim());
      } catch (NumberFormatException e) {
        // ignore
      }
    }
    return result;
!!!13101068.java!!!	getDate() : String

    return getHeaderProperty(HEADER_PROPERTY_DATE);
!!!13101196.java!!!	setDate(in date : String) : void

    setHeaderProperty(HEADER_PROPERTY_DATE, date);
!!!13101452.java!!!	serialize(inout buffer : StringBuffer) : void

    writeFirstLine(buffer);
    for (Object key : this.header.keySet()) {
      String value = this.header.get(key);
      buffer.append(key);
      buffer.append(": ");
      buffer.append(value);
      buffer.append(CRLF);
    }
!!!13101580.java!!!	toString() : String

    StringBuffer buffer = new StringBuffer();
    serialize(buffer);
    return buffer.toString();
