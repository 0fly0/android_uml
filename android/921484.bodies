class PackedObjectVector
!!!4256140.java!!!	PackedObjectVector(in columns : int)
        mColumns = columns;
        mRows = ArrayUtils.idealIntArraySize(0) / mColumns;

        mRowGapStart = 0;
        mRowGapLength = mRows;

        mValues = new Object[mRows * mColumns];
!!!4256268.java!!!	getValue(in row : int, in column : int) : E
        if (row >= mRowGapStart)
            row += mRowGapLength;

        Object value = mValues[row * mColumns + column];

        return (E) value;
!!!4256396.java!!!	setValue(in row : int, in column : int, inout value : E) : void
        if (row >= mRowGapStart)
            row += mRowGapLength;

        mValues[row * mColumns + column] = value;
!!!4256524.java!!!	insertAt(in row : int, inout values : E) : void
        moveRowGapTo(row);

        if (mRowGapLength == 0)
            growBuffer();

        mRowGapStart++;
        mRowGapLength--;

        if (values == null)
            for (int i = 0; i < mColumns; i++)
                setValue(row, i, null);
        else
            for (int i = 0; i < mColumns; i++)
                setValue(row, i, values[i]);
!!!4256652.java!!!	deleteAt(in row : int, in count : int) : void
        moveRowGapTo(row + count);

        mRowGapStart -= count;
        mRowGapLength += count;

        if (mRowGapLength > size() * 2)
        {
            // dump();
            // growBuffer();
        }
!!!4256780.java!!!	size() : int
        return mRows - mRowGapLength;
!!!4256908.java!!!	width() : int
        return mColumns;
!!!4257036.java!!!	growBuffer() : void
        int newsize = size() + 1;
        newsize = ArrayUtils.idealIntArraySize(newsize * mColumns) / mColumns;
        Object[] newvalues = new Object[newsize * mColumns];

        int after = mRows - (mRowGapStart + mRowGapLength);

        System.arraycopy(mValues, 0, newvalues, 0, mColumns * mRowGapStart);
        System.arraycopy(mValues, (mRows - after) * mColumns, newvalues, (newsize - after) * mColumns, after * mColumns);

        mRowGapLength += newsize - mRows;
        mRows = newsize;
        mValues = newvalues;
!!!4257164.java!!!	moveRowGapTo(in where : int) : void
        if (where == mRowGapStart)
            return;

        if (where > mRowGapStart)
        {
            int moving = where + mRowGapLength - (mRowGapStart + mRowGapLength);

            for (int i = mRowGapStart + mRowGapLength; i < mRowGapStart + mRowGapLength + moving; i++)
            {
                int destrow = i - (mRowGapStart + mRowGapLength) + mRowGapStart;

                for (int j = 0; j < mColumns; j++)
                {
                    Object val = mValues[i * mColumns + j];

                    mValues[destrow * mColumns + j] = val;
                }
            }
        }
        else /* where < mRowGapStart */
        {
            int moving = mRowGapStart - where;

            for (int i = where + moving - 1; i >= where; i--)
            {
                int destrow = i - where + mRowGapStart + mRowGapLength - moving;

                for (int j = 0; j < mColumns; j++)
                {
                    Object val = mValues[i * mColumns + j];

                    mValues[destrow * mColumns + j] = val;
                }
            }
        }

        mRowGapStart = where;
!!!4257292.java!!!	dump() : void
        for (int i = 0; i < mRows; i++)
        {
            for (int j = 0; j < mColumns; j++)
            {
                Object val = mValues[i * mColumns + j];

                if (i < mRowGapStart || i >= mRowGapStart + mRowGapLength)
                    System.out.print(val + " ");
                else
                    System.out.print("(" + val + ") ");
            }

            System.out.print(" << \n");
        }

        System.out.print("-----\n\n");
