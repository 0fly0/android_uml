format 74
"cpp" // vendor::tv::chrome::plugins::drmserver_adapter::jni::ppapi::cpp
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/vendor/tv/chrome/plugins/drmserver_adapter/jni/ppapi/cpp/"
  cpp_src_dir "/home/shchen/work/jellybean/vendor/tv/chrome/plugins/drmserver_adapter/jni/ppapi/cpp/"
  cpp_namespace "pp"
  classview 274956 "cpp"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 2788620 "ArrayOutputAdapterBase"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Non-templatized base class for the array output conversion. It provides the
 C implementation of a PP_ArrayOutput whose callback function is implemented
 as a virtual call on a derived class. Do not use directly, use one of the
 derived classes below."
      operation 11383052 "ArrayOutputAdapterBase"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
    pp_array_output_.GetDataBuffer =
        &ArrayOutputAdapterBase::GetDataBufferThunk;
    pp_array_output_.user_data = this;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11383180 "~ArrayOutputAdapterBase"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 11383308 "pp_array_output"
	cpp_inline public return_type class_ref 2738060 // PP_ArrayOutput
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return pp_array_output_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11383436 "GetDataBuffer"
	abstract cpp_virtual protected explicit_return_type "void"
	nparams 2
	  param in name "element_count" type class_ref 2345996 // uint32_t
	  param in name "element_size" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11383564 "GetDataBufferThunk"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "user_data" explicit_type "void"
	  param in name "element_count" type class_ref 2345996 // uint32_t
	  param in name "element_size" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 5220364 // pp_array_output_ (<directional composition>)
	relation 5220236 *-->
	  a role_name "pp_array_output_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5220364 // pp_array_output_ (<directional composition>)
	  b parent class_ref 2738060 // PP_ArrayOutput
      end

      operation 11383692 "ArrayOutputAdapterBase"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 2788620 // ArrayOutputAdapterBase
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Disallow copying and assignment. This will do the wrong thing for most
 subclasses."
      end

      operation 11383820 "operator ="
	private return_type class_ref 2788620 // ArrayOutputAdapterBase
	nparams 1
	  param in name "" type class_ref 2788620 // ArrayOutputAdapterBase
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 2788748 "ArrayOutputAdapter"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This adapter provides functionality for implementing a PP_ArrayOutput
 structure as writing to a given vector object.

 This is generally used internally in the C++ wrapper objects to
 write into an output parameter supplied by the plugin. If the element size
 that the browser is writing does not match the size of the type we're using
 this will assert and return NULL (which will cause the browser to fail the
 call).

 Example that allows the browser to write into a given vector:
   void DoFoo(std::vector<int>* results) {
     ArrayOutputAdapter<int> adapter(results);
     ppb_foo->DoFoo(adapter.pp_array_output());
   }"
      classrelation 5220492 // <generalisation>
	relation 5220364 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5220492 // <generalisation>
	  b parent class_ref 2788620 // ArrayOutputAdapterBase
      end

      operation 11383948 "ArrayOutputAdapter"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "output" explicit_type "std::vector<T>"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} : output_(output) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11384076 "ArrayOutputAdapter"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : output_(NULL) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Two-step init for the \"with storage\" version below."
      end

      operation 11384204 "set_output"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "output" explicit_type "std::vector<T>"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { output_ = output; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11384332 "GetDataBuffer"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "element_count" type class_ref 2345996 // uint32_t
	  param in name "element_size" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    if (element_count == 0)
      return NULL;
    PP_DCHECK(element_size == sizeof(T));
    if (element_size != sizeof(T))
      return NULL;
    output_->resize(element_count);
    return &(*output_)[0];
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ArrayOutputAdapterBase implementation."
      end

      attribute 10051212 "output_"
	private explicit_type "T"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2788876 "ResourceArrayOutputAdapter"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This adapter provides functionality for implementing a PP_ArrayOutput
 structure as writing resources to a given vector object.

 When returning an array of resources, the browser will write PP_Resources
 via a PP_ArrayOutput. This code will automatically convert the PP_Resources
 to the given wrapper type, (as long as that wrapper type supports the
 correct constructor). The ownership of the resources that the browser passed
 to us will be transferred to the C++ wrapper object.

 Conversion of the PP_Resources to the C++ wrapper object occurs in the
 destructor. This object is intended to be used on the stack in a C++ wrapper
 object for a call.

 Example:
   void GetFiles(std::vector<pp::FileRef>* results) {
     ResourceArrayOutputAdapter<pp::FileRef> adapter(results);
     ppb_foo->DoFoo(adapter.pp_array_output());
   }"
      classrelation 5220620 // <generalisation>
	relation 5220492 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5220620 // <generalisation>
	  b parent class_ref 2788620 // ArrayOutputAdapterBase
      end

      operation 11384460 "ResourceArrayOutputAdapter"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "output" explicit_type "std::vector<T>"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} : output_(output) {
    output_->resize(0);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11384588 "~ResourceArrayOutputAdapter"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
    ConvertPPResourceArrayToObjects(PASS_REF, intermediate_output_, output_);
  };
"
	
	
	
	
      end

      operation 11384716 "ResourceArrayOutputAdapter"
	cpp_inline protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : output_(NULL) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Two-step init for the \"with storage\" version below."
      end

      operation 11384844 "set_output"
	cpp_inline protected explicit_return_type "void"
	nparams 1
	  param inout name "output" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { output_ = output; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11384972 "GetDataBuffer"
	cpp_virtual cpp_inline protected explicit_return_type "void"
	nparams 2
	  param in name "element_count" type class_ref 2345996 // uint32_t
	  param in name "element_size" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    if (element_count == 0)
      return NULL;
    PP_DCHECK(element_size == sizeof(PP_Resource));
    if (element_size != sizeof(PP_Resource))
      return NULL;
    intermediate_output_.resize(element_count);
    return &intermediate_output_[0];
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ArrayOutputAdapterBase implementation."
      end

      classrelation 5220748 // intermediate_output_ (<directional composition>)
	relation 5220620 *-->
	  stereotype "std::vector"
	  a role_name "intermediate_output_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5220748 // intermediate_output_ (<directional composition>)
	  b parent class_ref 2734220 // PP_Resource
      end

      attribute 10051340 "output_"
	private explicit_type "T"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2789004 "ArrayOutputAdapterWithStorage"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 2788748 // ArrayOutputAdapter
        rank 0 explicit_value "T"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This adapter is like the ArrayOutputAdapter except that it also contains
 the underlying std::vector that will be populated (rather than writing it to
 an object passed into the constructor).

 This is used by the CompletionCallbackFactory system to collect the output
 parameters from an async function call. The collected data is then passed to
 the plugins callback function.

 You can also use it directly if you want to have an array output and aren't
 using the CompletionCallbackFactory. For example, if you're calling a
 PPAPI function DoFoo that takes a PP_OutputArray that is supposed to be
 writing integers, do this:

    ArrayOutputAdapterWithStorage<int> adapter;
    ppb_foo->DoFoo(adapter.pp_output_array());
    const std::vector<int>& result = adapter.output();"
      classrelation 5220876 // <realization>
	relation 5220748 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5220876 // <realization>
	  b parent class_ref 2788748 // ArrayOutputAdapter
      end

      operation 11385100 "ArrayOutputAdapterWithStorage"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
    this->set_output(&output_storage_);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11385228 "output"
	cpp_inline public explicit_return_type "std::vector<T>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return output_storage_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 10051468 "output_storage_"
	private explicit_type "T"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2789132 "VarArrayOutputAdapterWithStorage"
      visibility package 
      nactuals 1
      actual class class_ref 2788748 // ArrayOutputAdapter
        rank 0 value class_ref 2741388 // PP_Var
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This adapter is like the ArrayOutputAdapterWithStorage except this
 additionally converts PP_Var structs to pp::Var objects.

 You can also use it directly if you want to have an array output and aren't
 using the CompletionCallbackFactory. For example, if you're calling a
 PPAPI function GetVars that takes a PP_OutputArray that is supposed to be
 writing PP_Vars, do this:

    VarArrayOutputAdapterWithStorage adapter;
    ppb_foo->GetVars(adapter.pp_output_array());
    const std::vector<pp::Var>& result = adapter.output().

 This one is non-inline since it's not templatized."
      classrelation 5221004 // <realization>
	relation 5220876 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5221004 // <realization>
	  b parent class_ref 2788748 // ArrayOutputAdapter
      end

      operation 11385356 "VarArrayOutputAdapterWithStorage"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11385484 "~VarArrayOutputAdapterWithStorage"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 11385612 "output"
	public explicit_return_type "std::vector<Var>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the final array of resource objects, converting the PP_Vars
 written by the browser to pp::Var objects.

 This function should only be called once or we would end up converting
 the array more than once, which would mess up the refcounting."
      end

      classrelation 5221132 // temp_storage_ (<directional composition>)
	relation 5221004 *-->
	  stereotype "std::vector"
	  a role_name "temp_storage_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5221132 // temp_storage_ (<directional composition>)
	  b parent class_ref 2741388 // PP_Var
      end

      classrelation 5221260 // output_storage_ (<directional composition>)
	relation 5221132 *-->
	  stereotype "std::vector"
	  a role_name "output_storage_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5221260 // output_storage_ (<directional composition>)
	  b parent class_ref 2789260 // Var
      end
    end

    class 2789260 "Var"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ @file
/ This file defines the API for handling the passing of data types between
/ your module and the page.
/ A generic type used for passing data types between the module and the page."
      class 2798732 "Null"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 11432588 "Var"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor. Creates a <code>Var</code> of type
/ <code>Undefined</code>."
      end

      operation 11432716 "Var"
	public explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 2798732 // Null
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used to create a <code>Var</code> of type <code>Null</code>."
      end

      operation 11432844 "Var"
	public explicit_return_type ""
	nparams 1
	  param in name "b" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used to create a <code>Var</code> of type <code>Bool</code>.
/
/ @param[in] b A boolean value."
      end

      operation 11432972 "Var"
	public explicit_return_type ""
	nparams 1
	  param in name "i" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used to create a 32 bit integer <code>Var</code>.
/
/ @param[in] i A 32 bit integer value."
      end

      operation 11433100 "Var"
	public explicit_return_type ""
	nparams 1
	  param in name "d" explicit_type "double"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used to create a double value <code>Var</code>.
/
/ @param[in] d A double value."
      end

      operation 11433228 "Var"
	public explicit_return_type ""
	nparams 1
	  param in name "utf8_str" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} * ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used to create a UTF-8 character <code>Var</code>."
      end

      operation 11433356 "Var"
	public explicit_return_type ""
	nparams 1
	  param in name "utf8_str" explicit_type "std::string"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Must be encoded in UTF-8.
/ A constructor used to create a UTF-8 character <code>Var</code>."
      end

      operation 11433484 "Var"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "" type class_ref 2791436 // PassRef
	  param in name "var" type class_ref 2741388 // PP_Var
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw} {
    var_ = var;
    is_managed_ = true;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Must be encoded in UTF-8.
/ A constructor used when you have received a <code>Var</code> as a return
/ value that has had its reference count incremented for you.
/
/ You will not normally need to use this constructor because
/ the reference count will not normally be incremented for you."
      end

      operation 11433612 "Var"
	public explicit_return_type ""
	nparams 1
	  param in name "var" type class_ref 2741388 // PP_Var
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor that increments the reference count."
      end

      class 2798860 "DontManage"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 11433740 "Var"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "" type class_ref 2798860 // DontManage
	  param in name "var" type class_ref 2741388 // PP_Var
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw} {
    var_ = var;
    is_managed_ = false;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " TODO(brettw): remove DontManage when this bug is fixed
               http://code.google.com/p/chromium/issues/detail?id=52105
/ This constructor is used when we've given a <code>PP_Var</code> as an
/ input argument from somewhere and that reference is managing the
/ reference count for us. The object will not have its reference count
/ increased or decreased by this class instance.
/
/ @param[in] var A <code>Var</code>."
      end

      operation 11433868 "Var"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor for copying a <code>Var</code>."
      end

      operation 11433996 "~Var"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11434124 "operator ="
	cpp_virtual public return_type class_ref 2789260 // Var
	nparams 1
	  param in name "other" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ This function assigns one <code>Var</code> to another <code>Var</code>.
/
/ @param[in] other The <code>Var</code> to be assigned.
/
/ @return A resulting <code>Var</code>."
      end

      operation 11434252 "operator =="
	const public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "other" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ This function compares object identity (rather than value identity) for
/ objects, dictionaries, and arrays
/
/ @param[in] other The <code>Var</code> to be compared to this Var.
/
/ @return true if the <code>other</code> <code>Var</code> is the same as
/ this <code>Var</code>, otherwise false."
      end

      operation 11434380 "is_undefined"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_.type == PP_VARTYPE_UNDEFINED; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if this <code>Var</code> is an undefined value.
/
/ @return true if this <code>Var</code> is undefined, otherwise false."
      end

      operation 11434508 "is_null"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_.type == PP_VARTYPE_NULL; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if this <code>Var</code> is a null value.
/
/ @return true if this <code>Var</code> is null, otherwise false."
      end

      operation 11434636 "is_bool"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_.type == PP_VARTYPE_BOOL; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if this <code>Var</code> is a bool value.
/
/ @return true if this <code>Var</code> is a bool, otherwise false."
      end

      operation 11434764 "is_string"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_.type == PP_VARTYPE_STRING; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if this <code>Var</code> is a string value.
/
/ @return true if this <code>Var</code> is a string, otherwise false."
      end

      operation 11434892 "is_object"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_.type == PP_VARTYPE_OBJECT; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if this <code>Var</code> is an object.
/
/ @return true if this <code>Var</code> is an object, otherwise false."
      end

      operation 11435020 "is_array"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_.type == PP_VARTYPE_ARRAY; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if this <code>Var</code> is an array.
/
/ @return true if this <code>Var</code> is an array, otherwise false."
      end

      operation 11435148 "is_dictionary"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_.type == PP_VARTYPE_DICTIONARY; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if this <code>Var</code> is a dictionary.
/
/ @return true if this <code>Var</code> is a dictinoary, otherwise false."
      end

      operation 11435276 "is_int"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_.type == PP_VARTYPE_INT32; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if this <code>Var</code> is an integer value.
/ The <code>is_int</code> function returns the internal representation.
/ The JavaScript runtime may convert between the two as needed, so the
/ distinction may not be relevant in all cases (int is really an
/ optimization inside the runtime). So most of the time, you will want
/ to check is_number().
/
/ @return true if this <code>Var</code> is an integer, otherwise false."
      end

      operation 11435404 "is_double"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_.type == PP_VARTYPE_DOUBLE; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if this <code>Var</code> is a double value.
/ The <code>is_double</code> function returns the internal representation.
/ The JavaScript runtime may convert between the two as needed, so the
/ distinction may not be relevant in all cases (int is really an
/ optimization inside the runtime). So most of the time, you will want to
/ check is_number().
/
/ @return true if this <code>Var</code> is a double, otherwise false."
      end

      operation 11435532 "is_number"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_.type == PP_VARTYPE_INT32 ||
           var_.type == PP_VARTYPE_DOUBLE;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if this <code>Var</code> is a number.
/
/ @return true if this <code>Var</code> is an int32 or double number,
/ otherwise false."
      end

      operation 11435660 "is_array_buffer"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return var_.type == PP_VARTYPE_ARRAY_BUFFER; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function determines if this <code>Var</code> is an ArrayBuffer."
      end

      operation 11435788 "AsBool"
	const public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ AsBool() converts this <code>Var</code> to a bool. Assumes the
/ internal representation is_bool(). If it's not, it will assert in debug
/ mode, and return false.
/
/ @return A bool version of this <code>Var</code>."
      end

      operation 11435916 "AsInt"
	const public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ AsInt() converts this <code>Var</code> to an int32_t. This function
/ is required because JavaScript doesn't have a concept of ints and doubles,
/ only numbers. The distinction between the two is an optimization inside
/ the compiler. Since converting from a double to an int may be lossy, if
/ you care about the distinction, either always work in doubles, or check
/ !is_double() before calling AsInt().
/
/ These functions will assert in debug mode and return 0 if the internal
/ representation is not is_number().
/
/ @return An int32_t version of this <code>Var</code>."
      end

      operation 11436044 "AsDouble"
	const public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ AsDouble() converts this <code>Var</code> to a double. This function is
/ necessary because JavaScript doesn't have a concept of ints and doubles,
/ only numbers. The distinction between the two is an optimization inside
/ the compiler. Since converting from a double to an int may be lossy, if
/ you care about the distinction, either always work in doubles, or check
/ !is_double() before calling AsInt().
/
/ These functions will assert in debug mode and return 0 if the internal
/ representation is not is_number().
/
/ @return An double version of this <code>Var</code>."
      end

      operation 11436172 "AsString"
	const public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ AsString() converts this <code>Var</code> to a string. If this object is
/ not a string, it will assert in debug mode, and return an empty string.
/
/ @return A string version of this <code>Var</code>."
      end

      operation 11436300 "pp_var"
	const cpp_inline public return_type class_ref 2741388 // PP_Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return var_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function returns the internal <code>PP_Var</code>
/ managed by this <code>Var</code> object.
/
/ @return A const reference to a <code>PP_Var</code>."
      end

      operation 11436428 "Detach"
	cpp_inline public return_type class_ref 2741388 // PP_Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    PP_Var ret = var_;
    var_ = PP_MakeUndefined();
    is_managed_ = true;
    return ret;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Detach() detaches from the internal <code>PP_Var</code> of this
/ object, keeping the reference count the same. This is used when returning
/ a <code>PP_Var</code> from an API function where the caller expects the
/ return value to have the reference count incremented for it.
/
/ @return A detached version of this object without affecting the reference
/ count."
      end

      operation 11436556 "DebugString"
	const public explicit_return_type "std::string"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ DebugString() returns a short description \"Var<X>\" that can be used for
/ logging, where \"X\" is the underlying scalar or \"UNDEFINED\" or \"OBJ\" as
/ it does not call into the browser to get the object description.
/
/ @return A string displaying the value of this <code>Var</code>. This
/ function is used for debugging."
      end

      class 2798988 "OutException"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11436684 "OutException"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "v" type class_ref 2789260 // Var
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} : output_(v),
          originally_had_exception_(v && !v->is_undefined()) {
      if (output_) {
        temp_ = output_->var_;
      } else {
        temp_.padding = 0;
        temp_.type = PP_VARTYPE_UNDEFINED;
      }
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment "/ A constructor."
	end

	operation 11436812 "~OutException"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
      if (output_ && !originally_had_exception_)
        *output_ = Var(PASS_REF, temp_);
    };
"
	  
	  
	  
	  
	  comment "/ Destructor."
	end

	operation 11436940 "get"
	  cpp_inline public return_type class_ref 2741388 // PP_Var
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      if (output_)
        return &temp_;
      return NULL;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 5229708 // output_ (<unidirectional association>)
	  relation 5229580 --->
	    a role_name "output_" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5229708 // output_ (<unidirectional association>)
	    b parent class_ref 2789260 // Var
	end

	attribute 10052364 "originally_had_exception_"
	  private type class_ref 2322828 // bool
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 5229836 // temp_ (<directional composition>)
	  relation 5229708 *-->
	    a role_name "temp_" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5229836 // temp_ (<directional composition>)
	    b parent class_ref 2741388 // PP_Var
	end
      end

      classrelation 5229964 // var_ (<directional composition>)
	relation 5229836 *-->
	  a role_name "var_" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5229964 // var_ (<directional composition>)
	  b parent class_ref 2741388 // PP_Var
      end

      attribute 10052492 "is_managed_"
	protected type class_ref 2322828 // bool
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 11437068 "Var"
	private explicit_return_type ""
	nparams 1
	  param inout name "non_scriptable_object_pointer" explicit_type "void"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Prevent an arbitrary pointer argument from being implicitly converted to
 a bool at Var construction. If somebody makes such a mistake, (s)he will
 get a compilation error."
      end
    end

    class 2789388 "ResourceArrayOutputAdapterWithStorage"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 2788748 // ArrayOutputAdapter
        rank 0 value class_ref 2734220 // PP_Resource
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This adapter is like the ArrayOutputAdapterWithStorage except this
 additionally converts PP_Resources to C++ wrapper objects of the given type.

 You can also use it directly if you want to have an array output and aren't
 using the CompletionCallbackFactory. For example, if you're calling a
 PPAPI function GetFiles that takes a PP_OutputArray that is supposed to be
 writing PP_Resources cooresponding to FileRefs, do this:

    ResourceArrayOutputAdapterWithStorage<FileRef> adapter;
    ppb_foo->GetFiles(adapter.pp_output_array());
    std::vector<FileRef> result = adapter.output()."
      classrelation 5221388 // <realization>
	relation 5221260 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5221388 // <realization>
	  b parent class_ref 2788748 // ArrayOutputAdapter
      end

      operation 11385740 "ResourceArrayOutputAdapterWithStorage"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
    set_output(&temp_storage_);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11385868 "~ResourceArrayOutputAdapterWithStorage"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
    if (!temp_storage_.empty()) {
      // An easy way to release the resource references held by this object.
      output();
    }
  };
"
	
	
	
	
      end

      operation 11385996 "output"
	cpp_inline public explicit_return_type "std::vector<T>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    PP_DCHECK(output_storage_.empty());

    ConvertPPResourceArrayToObjects(PASS_REF, temp_storage_, &output_storage_);
    temp_storage_.clear();
    return output_storage_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the final array of resource objects, converting the PP_Resources
 written by the browser to resource objects.

 This function should only be called once or we would end up converting
 the array more than once, which would mess up the refcounting."
      end

      classrelation 5221516 // temp_storage_ (<directional composition>)
	relation 5221388 *-->
	  stereotype "std::vector"
	  a role_name "temp_storage_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5221516 // temp_storage_ (<directional composition>)
	  b parent class_ref 2734220 // PP_Resource
      end

      attribute 10051596 "output_storage_"
	private explicit_type "T"
	stereotype "std::vector"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2789516 "DirectoryEntryArrayOutputAdapterWithStorage"
      visibility package 
      nactuals 1
      actual class class_ref 2788748 // ArrayOutputAdapter
        rank 0 value class_ref 2760844 // PP_DirectoryEntry_Dev
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5221644 // <realization>
	relation 5221516 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5221644 // <realization>
	  b parent class_ref 2788748 // ArrayOutputAdapter
      end

      operation 11386124 "DirectoryEntryArrayOutputAdapterWithStorage"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
    set_output(&temp_storage_);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11386252 "~DirectoryEntryArrayOutputAdapterWithStorage"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
    if (!temp_storage_.empty()) {
      // An easy way to release the resource references held by |temp_storage_|.
      // A destructor for PP_DirectoryEntry_Dev will release them.
      output();
    }
  };
"
	
	
	
	
      end

      operation 11386380 "output"
	cpp_inline public explicit_return_type "std::vector<pp::DirectoryEntry_Dev>"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    PP_DCHECK(output_storage_.empty());
    typedef std::vector<PP_DirectoryEntry_Dev> Entries;
    for (Entries::iterator it = temp_storage_.begin();
         it != temp_storage_.end(); ++it)
      output_storage_.push_back(DirectoryEntry_Dev(PASS_REF, *it));
    temp_storage_.clear();
    return output_storage_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Returns the final array of resource objects, converting the
 PP_DirectoryEntry_Dev written by the browser to pp::DirectoryEntry_Dev
 objects.

 This function should only be called once or we would end up converting
 the array more than once, which would mess up the refcounting."
      end

      classrelation 5221772 // temp_storage_ (<directional composition>)
	relation 5221644 *-->
	  stereotype "std::vector"
	  a role_name "temp_storage_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5221772 // temp_storage_ (<directional composition>)
	  b parent class_ref 2760844 // PP_DirectoryEntry_Dev
      end

      classrelation 5221900 // output_storage_ (<directional composition>)
	relation 5221772 *-->
	  stereotype "std::vector"
	  a role_name "output_storage_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${stereotype}<${type}> ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5221900 // output_storage_ (<directional composition>)
	  b parent class_ref 2789644 // DirectoryEntry_Dev
      end
    end

    class 2789772 "Audio"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ An audio resource. Refer to the
/ <a href=\"/native-client/devguide/coding/audio\">Audio</a>
/ chapter in the Developer's Guide for information on using this interface."
      classrelation 5222028 // <generalisation>
	relation 5221900 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5222028 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11386508 "Audio"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ An empty constructor for an Audio resource."
      end

      operation 11386636 "Audio"
	public explicit_return_type ""
	nparams 4
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "config" type class_ref 2790156 // AudioConfig
	  param in name "callback" type class_ref 2741644 // PPB_Audio_Callback
	  param inout name "user_data" explicit_type "void"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}, ${t3} * ${p3}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor that creates an Audio resource. No sound will be heard
/ until StartPlayback() is called. The callback is called with the buffer
/ address and given user data whenever the buffer needs to be filled.
/ From within the callback, you should not call <code>PPB_Audio</code>
/ functions. The callback will be called on a different thread than the one
/ which created the interface. For performance-critical applications (such
/ as low-latency audio), the callback should avoid blocking or calling
/ functions that can obtain locks, such as malloc. The layout and the size
/ of the buffer passed to the audio callback will be determined by
/ the device configuration and is specified in the <code>AudioConfig</code>
/ documentation.
/
/ @param[in] instance The instance with which this resource will be
/ associated.

/ @param[in] config An <code>AudioConfig</code> containing the audio config
/ resource.

/ @param[in] callback A <code>PPB_Audio_Callback</code> callback function
/ that the browser calls when it needs more samples to play.

/ @param[in] user_data A pointer to user data used in the callback function."
      end

      operation 11386764 "config"
	cpp_inline public return_type class_ref 2790156 // AudioConfig
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return config_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal <code>PPB_AudioConfig</code>
/ struct.
/
/ @return A mutable reference to the PPB_AudioConfig struct."
      end

      operation 11386892 "config"
	const cpp_inline public return_type class_ref 2790156 // AudioConfig
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return config_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal <code>PPB_AudioConfig</code>
/ struct.
/
/ @return A const reference to the internal <code>PPB_AudioConfig</code>
/ struct."
      end

      operation 11387020 "StartPlayback"
	public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ StartPlayback() starts playback of audio.
/
/ @return true if successful, otherwise false."
      end

      operation 11387148 "StopPlayback"
	public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ StopPlayback stops playback of audio.
/
/ @return true if successful, otherwise false."
      end

      classrelation 5222156 // config_ (<directional composition>)
	relation 5222028 *-->
	  a role_name "config_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5222156 // config_ (<directional composition>)
	  b parent class_ref 2790156 // AudioConfig
      end
    end

    class 2789900 "Resource"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ @file
/ This file defines a <code>Resource</code> type representing data associated
/ with the module.
/ A reference counted module resource."
      operation 11422860 "Resource"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The default constructor."
      end

      operation 11422988 "Resource"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 2789900 // Resource
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor for copying a resource.
/
/ @param[in] other A <code>Resource</code>."
      end

      operation 11423116 "~Resource"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11423244 "operator ="
	public return_type class_ref 2789900 // Resource
	nparams 1
	  param in name "other" type class_ref 2789900 // Resource
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ This function assigns one <code>Resource</code> to another
/ <code>Resource</code>.
/
/ @param[in] other A Resource.
/
/ @return A Resource containing the assigned Resource."
      end

      operation 11423372 "is_null"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return !pp_resource_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This functions determines if this resource is invalid or
/ uninitialized.
/
/ @return true if this resource is invalid or uninitialized."
      end

      operation 11423500 "pp_resource"
	const cpp_inline public return_type class_ref 2734220 // PP_Resource
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return pp_resource_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11423628 "detach"
	public return_type class_ref 2734220 // PP_Resource
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function releases ownership of this resource and returns it to the
/ caller.
/
/ Note that the reference count on the resource is unchanged and the caller
/ needs to release the resource.
/
/ @return The detached <code>PP_Resource</code>."
      end

      operation 11423756 "Resource"
	protected explicit_return_type ""
	nparams 1
	  param in name "resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used when a <code>PP_Resource</code> is provided as a
/ return value whose reference count we need to increment.
/
/ @param[in] resource A <code>PP_Resource</code> corresponding to a
/ resource."
      end

      operation 11423884 "Resource"
	protected explicit_return_type ""
	nparams 2
	  param in name "" type class_ref 2791436 // PassRef
	  param in name "resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructor used when a <code>PP_Resource</code> already has a ref count
/ assigned. Add additional refcount is not taken."
      end

      operation 11424012 "PassRefFromConstructor"
	protected explicit_return_type "void"
	nparams 1
	  param in name "resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ PassRefFromConstructor is called by derived class' constructors to
/ initialize this <code>Resource</code> with a <code>PP_Resource</code>
/ that has already had its reference count incremented by
/ <code>Core::AddRefResource</code>. It also assumes this object has no
/ current resource.
/
/ The intended usage of this function that the derived class constructor
/ will call the default <code>Resource</code> constructor, then make a call
/ to create a resource. It then wants to assign the new resource (which,
/ since it was returned by the browser, already had its reference count
/ increased).
/
/ @param[in] resource A <code>PP_Resource</code> corresponding to a
/ resource."
      end

      classrelation 5228940 // pp_resource_ (<directional composition>)
	relation 5228812 *-->
	  a role_name "pp_resource_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5228940 // pp_resource_ (<directional composition>)
	  b parent class_ref 2734220 // PP_Resource
      end
    end

    class 2790028 "InstanceHandle"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ An instance handle identifies an instance in a constructor for a resource.
/ This class solves two different problems:
/
/ 1. A pp::Instance object's lifetime is managed by the system on the main
/ pepper thread of the module. This means that it may get destroyed at any
/ time based on something that happens on the web page. Therefore, it's not
/ safe to refer to a <code>pp::Instance</code> object on a background thread.
/ Instead, we need to pass some kind of identifier to resource constructors
/ so that they may safely be used on background threads. If the instance
/ becomes invalid, the resource creation will fail on the background thread,
/ but it won't crash.
/
/ 2. <code>PP_Instance</code> would be a good identifier to use for this case.
/ However, using <code>PP_Instance</code> in the constructor to resources is
/ problematic because it is just a typedef for an integer, as is a
/ <code>PP_Resource</code>. Many resources have alternate constructors that
/ just take an existing <code>PP_Resource</code>, so the constructors would
/ be ambiguous. Having this wrapper around a <code>PP_Instance</code>
/ prevents this ambiguity, and also provides a nice place to consolidate an
/ implicit conversion from <code>pp::Instance*</code> for prettier code on
/ the main thread (you can just pass \"this\" to resource constructors in your
/ instance objects).
/
/ You should always pass an <code>InstanceHandle</code> to background threads
/ instead of a <code>pp::Instance</code>, and use them in resource
/ constructors and code that may be used from background threads."
      operation 11406860 "InstanceHandle"
	public explicit_return_type ""
	nparams 1
	  param inout name "instance" type class_ref 2792716 // Instance
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Implicit constructor for converting a <code>pp::Instance</code> to an
/ instance handle.
/
/ @param[in] instance The instance with which this
/ <code>InstanceHandle</code> will be associated."
      end

      operation 11406988 "InstanceHandle"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "pp_instance" type class_ref 2740108 // PP_Instance
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : pp_instance_(pp_instance) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ This constructor explicitly converts a <code>PP_Instance</code> to an
/ instance handle. This should not be implicit because it can make some
/ resource constructors ambiguous. <code>PP_Instance</code> is just a
/ typedef for an integer, as is <code>PP_Resource</code>, so the compiler
/ can get confused between the two.
/
/ @param[in] pp_instance The instance with which this
/ <code>InstanceHandle</code> will be associated."
      end

      operation 11407116 "pp_instance"
	const cpp_inline public return_type class_ref 2740108 // PP_Instance
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return pp_instance_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ The pp_instance() function returns the <code>PP_Instance</code>.
/
/ @return A <code>PP_Instance</code> internal instance handle."
      end

      classrelation 5225740 // pp_instance_ (<directional composition>)
	relation 5225612 *-->
	  a role_name "pp_instance_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5225740 // pp_instance_ (<directional composition>)
	  b parent class_ref 2740108 // PP_Instance
      end
    end

    class 2790156 "AudioConfig"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ A 16 bit stereo AudioConfig resource. Refer to the
/ <a href=\"/native-client/{{pepperversion}}/devguide/coding/audio\">Audio
/ </a>chapter in the Developer's Guide for information on using this
/ interface.
/
/ A single sample frame on a stereo device means one value for the left
/ channel and one value for the right channel.
/
/ Buffer layout for a stereo int16 configuration:
/
/ <code>int16_t *buffer16;</code>
/ <code>buffer16[0]</code> is the first left channel sample.
/ <code>buffer16[1]</code> is the first right channel sample.
/ <code>buffer16[2]</code> is the second left channel sample.
/ <code>buffer16[3]</code> is the second right channel sample.
/ <code>...</code>
/ <code>buffer16[2 * (sample_frame_count - 1)]</code> is the last left
/ channel sample.
/ <code>buffer16[2 * (sample_frame_count - 1) + 1]</code> is the last right
/ channel sample.
/ Data will always be in the native endian format of the platform.
/
/ <strong>Example:</strong>
/ @code
/
/ // Create an audio config with a supported frame count.
/ uint32_t sample_frame_count = AudioConfig::RecommendSampleFrameCount(
/    PP_AUDIOSAMPLERATE_44100, 4096);
/  AudioConfig config(PP_AUDIOSAMPLERATE_44100, sample_frame_count);
/  if (config.is_null())
/    return false;  // Couldn't configure audio.
/
/   // Then use the config to create your audio resource.
/  Audio audio(instance, config, callback, user_data);
/   if (audio.is_null())
/     return false;  // Couldn't create audio.
/ @endcode"
      classrelation 5222284 // <generalisation>
	relation 5222156 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5222284 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11387276 "AudioConfig"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ An empty constructor for an <code>AudioConfig</code> resource."
      end

      operation 11387404 "AudioConfig"
	public explicit_return_type ""
	nparams 3
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "sample_rate" type class_ref 2742156 // PP_AudioSampleRate
	  param in name "sample_frame_count" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor that creates an audio config based on the given sample rate
/ and frame count. If the rate and frame count aren't supported, the
/ resulting resource will be is_null(). You can pass the result of
/ RecommendSampleFrameCount() as the sample frame count.
/
/ @param[in] instance The instance associated with this resource.
/
/ @param[in] sample_rate A <code>PP_AudioSampleRate</code> which is either
/ <code>PP_AUDIOSAMPLERATE_44100</code> or
/ <code>PP_AUDIOSAMPLERATE_48000</code>.
/
/ @param[in] sample_frame_count A uint32_t frame count returned from the
/ <code>RecommendSampleFrameCount</code> function."
      end

      operation 11387532 "RecommendSampleRate"
	class_operation public return_type class_ref 2742156 // PP_AudioSampleRate
	nparams 1
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ RecommendSampleRate() returns the native sample rate used by the
/ audio system.  Applications that use the recommended sample rate might
/ obtain lower latency and higher fidelity output.
/
/ @param[in] instance The instance associated with this resource."
      end

      operation 11387660 "RecommendSampleFrameCount"
	class_operation public return_type class_ref 2345996 // uint32_t
	nparams 3
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "sample_rate" type class_ref 2742156 // PP_AudioSampleRate
	  param in name "requested_sample_frame_count" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ RecommendSampleFrameCount() returns a supported frame count closest to
/ the requested count. The sample frame count determines the overall
/ latency of audio. Smaller frame counts will yield lower latency, but
/ higher CPU utilization. Supported sample frame counts will vary by
/ hardware and system (consider that the local system might be anywhere
/ from a cell phone or a high-end audio workstation). Sample counts less
/ than <code>PP_AUDIOMINSAMPLEFRAMECOUNT</code> and greater than
/ <code>PP_AUDIOMAXSAMPLEFRAMECOUNT</code> are never supported on any
/ system, but values in between aren't necessarily valid. This function
/ will return a supported count closest to the requested value for use in
/ the constructor.
/
/ @param[in] instance The instance associated with this resource.
/ @param[in] sample_rate A <code>PP_AudioSampleRate</code> which is either
/ <code>PP_AUDIOSAMPLERATE_44100</code> or
/ <code>PP_AUDIOSAMPLERATE_48000</code>.
/ @param[in] requested_sample_frame_count A uint_32t requested frame count.
/
/ @return A uint32_t containing the recommended sample frame count if
/ successful. If the sample frame count or bit rate is not supported,
/ this function will fail and return 0."
      end

      operation 11387788 "sample_rate"
	const cpp_inline public return_type class_ref 2742156 // PP_AudioSampleRate
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return sample_rate_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal
/ <code>PP_AudioSampleRate</code> enum.
/
/ @return The <code>PP_AudioSampleRate</code> enum."
      end

      operation 11387916 "sample_frame_count"
	const cpp_inline public return_type class_ref 2345996 // uint32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return sample_frame_count_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal sample frame count.
/
/ @return A uint32_t containing the sample frame count."
      end

      classrelation 5222412 // sample_rate_ (<directional composition>)
	relation 5222284 *-->
	  a role_name "sample_rate_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5222412 // sample_rate_ (<directional composition>)
	  b parent class_ref 2742156 // PP_AudioSampleRate
      end

      classrelation 5222540 // sample_frame_count_ (<directional composition>)
	relation 5222412 *-->
	  a role_name "sample_frame_count_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5222540 // sample_frame_count_ (<directional composition>)
	  b parent class_ref 2345996 // uint32_t
      end
    end

    class 2790284 "CompletionCallback"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ This API enables you to implement and receive callbacks when
/ Pepper operations complete asynchronously.
/
/ You can create these objects yourself, but it is most common to use the
/ CompletionCallbackFactory to allow the callbacks to call class member
/ functions."
      operation 11388044 "CompletionCallback"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
    cc_ = PP_BlockUntilComplete();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The default constructor will create a blocking
/ <code>CompletionCallback</code> that can be passed to a method to
/ indicate that the calling thread should be blocked until the asynchronous
/ operation corresponding to the method completes.
/
/ <strong>Note:</strong> Blocking completion callbacks are only allowed from
/ from background threads."
      end

      operation 11388172 "CompletionCallback"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "func" type class_ref 2738316 // PP_CompletionCallback_Func
	  param inout name "user_data" explicit_type "void"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw} {
    cc_ = PP_MakeCompletionCallback(func, user_data);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor for creating a <code>CompletionCallback</code>.
/
/ @param[in] func The function to be called on completion.
/ @param[in] user_data The user data to be passed to the callback function.
/ This is optional and is typically used to help track state in case of
/ multiple pending callbacks."
      end

      operation 11388300 "CompletionCallback"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "func" type class_ref 2738316 // PP_CompletionCallback_Func
	  param inout name "user_data" explicit_type "void"
	  param in name "flags" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw} {
    cc_ = PP_MakeCompletionCallback(func, user_data);
    cc_.flags = flags;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor for creating a <code>CompletionCallback</code> with
/ specified flags.
/
/ @param[in] func The function to be called on completion.
/ @param[in] user_data The user data to be passed to the callback function.
/ This is optional and is typically used to help track state in case of
/ multiple pending callbacks.
/ @param[in] flags Bit field combination of
/ <code>PP_CompletionCallback_Flag</code> flags used to control how
/ non-NULL callbacks are scheduled by asynchronous methods."
      end

      operation 11388428 "set_flags"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "flags" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { cc_.flags = flags; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ The set_flags() function is used to set the flags used to control
/ how non-NULL callbacks are scheduled by asynchronous methods.
/
/ @param[in] flags Bit field combination of
/ <code>PP_CompletionCallback_Flag</code> flags used to control how
/ non-NULL callbacks are scheduled by asynchronous methods."
      end

      operation 11388556 "Run"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "result" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    PP_DCHECK(cc_.func);
    PP_RunCompletionCallback(&cc_, result);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Run() is used to run the <code>CompletionCallback</code>.
/ Normally, the system runs a <code>CompletionCallback</code> after an
/ asynchronous operation completes, but programs may wish to run the
/ <code>CompletionCallback</code> manually in order to reuse the same code
/ paths.
/
/ @param[in] result The result of the operation to be passed to the
/ callback function. Non-positive values correspond to the error codes
/ from <code>pp_errors.h</code> (excluding
/ <code>PP_OK_COMPLETIONPENDING</code>). Positive values indicate
/ additional information such as bytes read."
      end

      operation 11388684 "IsOptional"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return (cc_.func == NULL ||
            (cc_.flags & PP_COMPLETIONCALLBACK_FLAG_OPTIONAL) != 0);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ IsOptional() is used to determine the setting of the
/ <code>PP_COMPLETIONCALLBACK_FLAG_OPTIONAL</code> flag. This flag allows
/ any method taking such callback to complete synchronously
/ and not call the callback if the operation would not block. This is useful
/ when performance is an issue, and the operation bandwidth should not be
/ limited to the processing speed of the message loop.
/
/ On synchronous method completion, the completion result will be returned
/ by the method itself. Otherwise, the method will return
/ PP_OK_COMPLETIONPENDING, and the callback will be invoked asynchronously
/ on the same thread where the PPB method was invoked.
/
/ @return true if this callback is optional, otherwise false."
      end

      operation 11388812 "pp_completion_callback"
	const cpp_inline public return_type class_ref 2738572 // PP_CompletionCallback
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return cc_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ The pp_completion_callback() function returns the underlying
/ <code>PP_CompletionCallback</code>
/
/ @return A <code>PP_CompletionCallback</code>."
      end

      operation 11388940 "flags"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return cc_.flags; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ The flags() function returns flags used to control how non-NULL callbacks
/ are scheduled by asynchronous methods.
/
/ @return An int32_t containing a bit field combination of
/ <code>PP_CompletionCallback_Flag</code> flags."
      end

      operation 11389068 "MayForce"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "result" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (result == PP_OK_COMPLETIONPENDING || IsOptional())
      return result;
    // FIXME(dmichael): Use pp::MessageLoop here once it's out of Dev.
    Module::Get()->core()->CallOnMainThread(0, *this, result);
    return PP_OK_COMPLETIONPENDING;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ MayForce() is used when implementing functions taking callbacks.
/ If the callback is required and <code>result</code> indicates that it has
/ not been scheduled, it will be forced on the main thread.
/
/ <strong>Example:</strong>
/
/ @code
/
/ int32_t OpenURL(pp::URLLoader* loader,
/                 pp::URLRequestInfo* url_request_info,
/                 const CompletionCallback& cc) {
/   if (loader == NULL || url_request_info == NULL)
/     return cc.MayForce(PP_ERROR_BADRESOURCE);
/   return loader->Open(*loader, *url_request_info, cc);
/ }
/
/ @endcode
/
/ @param[in] result PP_OK_COMPLETIONPENDING or the result of the completed
/ operation to be passed to the callback function. PP_OK_COMPLETIONPENDING
/ indicates that the callback has already been scheduled. Other
/ non-positive values correspond to error codes from
/ <code>pp_errors.h</code>. Positive values indicate additional information
/ such as bytes read.
/
/ @return <code>PP_OK_COMPLETIONPENDING</code> if the callback has been
/ forced, result parameter otherwise."
      end

      classrelation 5222668 // cc_ (<directional composition>)
	relation 5222540 *-->
	  a role_name "cc_" protected
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5222668 // cc_ (<directional composition>)
	  b parent class_ref 2738572 // PP_CompletionCallback
      end
    end

    class 2790412 "CompletionCallbackWithOutput"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ A CompletionCallbackWithOutput defines a completion callback that
/ additionally stores a pointer to some output data. Some C++ wrappers
/ take a CompletionCallbackWithOutput when the browser is returning a
/ bit of data as part of the function call. The \"output\" parameter
/ stored in the CompletionCallbackWithOutput will receive the data from
/ the browser.
/
/ You can create this yourself, but it is most common to use with the
/ CompletionCallbackFactory's NewCallbackWithOutput, which manages the
/ storage for the output parameter for you and passes it as an argument
/ to your callback function.
/
/ Note that this class doesn't actually do anything with the output data,
/ it just stores a pointer to it. C++ wrapper objects that accept a
/ CompletionCallbackWithOutput will retrieve this pointer and pass it to
/ the browser as the output parameter."
      classrelation 5222796 // <generalisation>
	relation 5222668 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5222796 // <generalisation>
	  b parent class_ref 2790284 // CompletionCallback
      end

      class 2790540 "OutputStorageType"
	visibility package stereotype "typedef" explicit_base_type "internal::CallbackOutputTraits<T>::StorageType"
	cpp_decl "${comment}typedef  typename ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 2790668 "APIArgType"
	visibility package stereotype "typedef" explicit_base_type "internal::CallbackOutputTraits<T>::APIArgType"
	cpp_decl "${comment}typedef  typename ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 11389196 "CompletionCallbackWithOutput"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "output" type class_ref 2790540 // OutputStorageType
	cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} : CompletionCallback(),
        output_(output) {
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The default constructor will create a blocking
/ <code>CompletionCallback</code> that references the given output
/ data.
/
/ @param[in] output A pointer to the data associated with the callback. The
/ caller must ensure that this pointer outlives the completion callback.
/
/ <strong>Note:</strong> Blocking completion callbacks are only allowed from
/ from background threads."
      end

      operation 11389324 "CompletionCallbackWithOutput"
	cpp_inline public explicit_return_type ""
	nparams 3
	  param in name "func" type class_ref 2738316 // PP_CompletionCallback_Func
	  param inout name "user_data" explicit_type "void"
	  param inout name "output" type class_ref 2790540 // OutputStorageType
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} * ${p2}${v2}${)}${volatile}${throw} : CompletionCallback(func, user_data),
        output_(output) {
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor for creating a <code>CompletionCallback</code> that
/ references the given output data.
/
/ @param[in] func The function to be called on completion.
/ @param[in] user_data The user data to be passed to the callback function.
/ This is optional and is typically used to help track state in case of
/ multiple pending callbacks.
/ @param[in] output A pointer to the data associated with the callback. The
/ caller must ensure that this pointer outlives the completion callback."
      end

      operation 11389452 "CompletionCallbackWithOutput"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "func" type class_ref 2738316 // PP_CompletionCallback_Func
	  param inout name "user_data" explicit_type "void"
	  param in name "flags" type class_ref 2409996 // int32_t
	  param inout name "output" type class_ref 2790540 // OutputStorageType
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} * ${p3}${v3}${)}${volatile}${throw} : CompletionCallback(func, user_data, flags),
        output_(output) {
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor for creating a <code>CompletionCallback</code> that
/ references the given output data.
/
/ @param[in] func The function to be called on completion.
/
/ @param[in] user_data The user data to be passed to the callback function.
/ This is optional and is typically used to help track state in case of
/ multiple pending callbacks.
/
/ @param[in] flags Bit field combination of
/ <code>PP_CompletionCallback_Flag</code> flags used to control how
/ non-NULL callbacks are scheduled by asynchronous methods.
/
/ @param[in] output A pointer to the data associated with the callback. The
/ caller must ensure that this pointer outlives the completion callback."
      end

      operation 11389580 "output"
	const cpp_inline public return_type class_ref 2790668 // APIArgType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return internal::CallbackOutputTraits<T>::StorageToAPIArg(*output_);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 5222924 // output_ (<unidirectional association>)
	relation 5222796 --->
	  a role_name "output_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5222924 // output_ (<unidirectional association>)
	  b parent class_ref 2790540 // OutputStorageType
      end
    end

    class 2790796 "Core"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ APIs related to memory management, time, and threads."
      operation 11389708 "AddRefResource"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    interface_->AddRefResource(resource);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Note that we explicitly don't expose Resource& versions of this function
 since Resource will normally manage the refcount properly. These should
 be called only when doing manual management on raw PP_Resource handles,
 which should be fairly rare.
/ AddRefResource() increments the reference count for the provided
/ <code>resource</code>.
/
/ @param[in] resource A <code>PP_Resource</code> corresponding to a
/ resource."
      end

      operation 11389836 "ReleaseResource"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    interface_->ReleaseResource(resource);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ ReleaseResource() decrements the reference count for the provided
/ <code>resource</code>. The resource will be deallocated if the
/ reference count reaches zero.
/
/ @param[in] resource A <code>PP_Resource</code> corresponding to a
/ resource."
      end

      operation 11389964 "GetTime"
	cpp_inline public return_type class_ref 2739212 // PP_Time
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return interface_->GetTime();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetTime() returns the \"wall clock time\" according to the
/ browser.
/
/ @return A <code>PP_Time</code> containing the \"wall clock time\" according
/ to the browser."
      end

      operation 11390092 "GetTimeTicks"
	cpp_inline public return_type class_ref 2740876 // PP_TimeTicks
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return interface_->GetTimeTicks();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetTimeTicks() returns the \"tick time\" according to the browser.
/ This clock is used by the browser when passing some event times to the
/ module (for example, using the
/ <code>PP_InputEvent::time_stamp_seconds</code> field). It is not
/ correlated to any actual wall clock time (like GetTime()). Because
/ of this, it will not change if the user changes their computer clock.
/
/ @return A <code>PP_TimeTicks</code> containing the \"tick time\" according
/ to the browser."
      end

      operation 11390220 "CallOnMainThread"
	public explicit_return_type "void"
	nparams 3
	  param in name "delay_in_milliseconds" type class_ref 2409996 // int32_t
	  param in name "callback" type class_ref 2790284 // CompletionCallback
	  param in name "result" type class_ref 2409996 // int32_t
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ CallOnMainThread() schedules work to be executed on the main pepper
/ thread after the specified delay. The delay may be 0 to specify a call
/ back as soon as possible.
/
/ The |result| parameter will just be passed as the second argument to the
/ callback. Many applications won't need this, but it allows a module to
/ emulate calls of some callbacks which do use this value.
/
/ <strong>Note:</strong> CallOnMainThread(), even when used from the main
/ thread with a delay of 0 milliseconds, will never directly invoke the
/ callback.  Even in this case, the callback will be scheduled
/ asynchronously.
/
/ <strong>Note:</strong> If the browser is shutting down or if the module
/ has no instances, then the callback function may not be called.
/
/ @param[in] delay_in_milliseconds An int32_t delay in milliseconds.
/ @param[in] callback A <code>CompletionCallback</code> callback function
/ that the browser will call after the specified delay.
/ @param[in] result An int32_t that the browser will pass to the given
/ <code>CompletionCallback</code>."
      end

      operation 11390348 "IsMainThread"
	public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ IsMainThread() returns true if the current thread is the main pepper
/ thread.
/
/ This function is useful for implementing sanity checks, and deciding if
/ dispatching using CallOnMainThread() is required.
/
/ @return true if the current thread is the main pepper thread, otherwise
/ false."
      end

      classrelation 5223052 // <dependency>
	relation 5222924 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 5223052 // <dependency>
	  b parent class_ref 2790924 // Module
      end

      operation 11390476 "Core"
	cpp_inline private explicit_return_type ""
	nparams 1
	  param in name "inter" type class_ref 2743180 // PPB_Core
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} * ${p0}${v0}${)}${volatile}${throw} : interface_(inter) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Only module should make this class so this constructor is private."
      end

      operation 11390604 "Core"
	private explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 2790796 // Core
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Copy and assignment are disallowed."
      end

      operation 11390732 "operator ="
	private return_type class_ref 2790796 // Core
	nparams 1
	  param in name "other" type class_ref 2790796 // Core
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 5223180 // interface_ (<unidirectional association>)
	relation 5223052 --->
	  a role_name "interface_" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5223180 // interface_ (<unidirectional association>)
	  b parent class_ref 2743180 // PPB_Core
      end
    end

    class 2790924 "Module"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ The Module class.  The browser calls CreateInstance() to create
/ an instance of your module on the web page.  The browser creates a new
/ instance for each <code>\\<embed></code> tag with
/ <code>type=\"application/x-nacl\"</code>"
      class 2794252 "InstanceMap"
	visibility package stereotype "typedef" base_type class_ref 2740108 // PP_Instance
	cpp_decl "${comment}typedef std::map<${type},Instance*> ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 5225996 // <dependency>
	  relation 5225868 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 5225996 // <dependency>
	    b parent class_ref 2740108 // PP_Instance
	end
      end

      operation 11408524 "Module"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " You may not call any other PP functions from the constructor, put them
 in Init instead. Various things will not be set up until the constructor
 completes."
      end

      operation 11408652 "~Module"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 11408780 "Get"
	class_operation public return_type class_ref 2790924 // Module
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Get() returns the global instance of this module object, or NULL if the
/ module is not initialized yet.
/
/ @return The global instance of the module object."
      end

      operation 11408908 "Init"
	cpp_virtual public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Init() is automatically called after the object is created. This is where
/ you can put functions that rely on other parts of the API, now that the
/ module has been created.
/
/ @return true if successful, otherwise false."
      end

      operation 11409036 "pp_module"
	const cpp_inline public return_type class_ref 2740236 // PP_Module
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return pp_module_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ The pp_module() function returns the internal module handle.
/
/ @return A <code>PP_Module</code> internal module handle."
      end

      operation 11409164 "get_browser_interface"
	const cpp_inline public return_type class_ref 2741516 // PPB_GetInterface
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return get_browser_interface_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ The get_browser_interface() function returns the internal
/ <code>get_browser_interface</code> pointer.
/
/ @return A <code>PPB_GetInterface</code> internal pointer.
 TODO(sehr): This should be removed once the NaCl browser plugin no longer
 needs it."
      end

      operation 11409292 "core"
	cpp_inline public return_type class_ref 2790796 // Core
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return core_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ The core() function returns the core interface for doing basic
/ global operations. The return value is guaranteed to be non-NULL once the
/ module has successfully initialized and during the Init() call.
/
/ It will be NULL before Init() has been called.
/
/ @return The core interface for doing basic global operations."
      end

      operation 11409420 "GetPluginInterface"
	public explicit_return_type "void"
	nparams 1
	  param in name "interface_name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetPluginInterface() implements <code>GetInterface</code> for the browser
/ to get module interfaces. If you need to provide your own implementations
/ of new interfaces, use AddPluginInterface() which this function will use.
/
/ @param[in] interface_name The module interface for the browser to get."
      end

      operation 11409548 "GetBrowserInterface"
	public explicit_return_type "void"
	nparams 1
	  param in name "interface_name" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetBrowserInterface() returns interfaces which the browser implements
/ (i.e. PPB interfaces).
/ @param[in] interface_name The browser interface for the moduel to get."
      end

      operation 11409676 "InstanceForPPInstance"
	public return_type class_ref 2792716 // Instance
	nparams 1
	  param in name "instance" type class_ref 2740108 // PP_Instance
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ InstanceForPPInstance() returns the object associated with this
/ <code>PP_Instance</code>, or NULL if one is not found. This should only
/ be called from the main thread! This instance object may be destroyed at
/ any time on the main thread, so using it on other threads may cause a
/ crash.
/
/ @param[in] instance This <code>PP_Instance</code>.
/
/ @return The object associated with this <code>PP_Instance</code>,
/ or NULL if one is not found."
      end

      operation 11409804 "AddPluginInterface"
	public explicit_return_type "void"
	nparams 2
	  param in name "interface_name" explicit_type "std::string"
	  param in name "vtable" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ AddPluginInterface() adds a handler for a provided interface name. When
/ the browser requests that interface name, the provided
/ <code>vtable</code> will be returned.
/
/ In general, modules will not need to call this directly. Instead, the
/ C++ wrappers for each interface will register themselves with this
/ function.
/
/ This function may be called more than once with the same interface name
/ and vtable with no effect. However, it may not be used to register a
/ different vtable for an already-registered interface. It will assert for
/ a different registration for an already-registered interface in debug
/ mode, and just ignore the registration in release mode.
/
/ @param[in] interface_name The interface name that will receive a handler.
/ @param[in,out] vtable The vtable to return for
/ <code>interface_name</code>."
      end

      operation 11409932 "InternalInit"
	public return_type class_ref 2322828 // bool
	nparams 2
	  param in name "mod" type class_ref 2740236 // PP_Module
	  param in name "get_browser_interface" type class_ref 2741516 // PPB_GetInterface
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " InternalInit() sets the browser interface and calls the regular Init()
/ function that can be overridden by the base classes.
/
/ @param[in] mod A <code>PP_Module</code>.
/ @param[in] get_browser_interface The browser interface to set.
/
/ @return true if successful, otherwise false.
 TODO(brettw) make this private when I can figure out how to make the
 initialize function a friend."
      end

      operation 11410060 "current_instances"
	const cpp_inline public return_type class_ref 2794252 // InstanceMap
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return current_instances_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ The current_instances() function allows iteration over the
/ current instances in the module.
/
/ @return An <code>InstanceMap</code> of all instances in the module."
      end

      operation 11410188 "CreateInstance"
	abstract cpp_virtual protected return_type class_ref 2792716 // Instance
	nparams 1
	  param in name "instance" type class_ref 2740108 // PP_Instance
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ CreateInstance() should be overridden to create your own module type.
/
/ @param[in] instance A <code>PP_Instance</code>.
/
/ @return The resulting instance."
      end

      operation 11410316 "Instance_DidCreate"
	friend private return_type class_ref 2738188 // PP_Bool
	nparams 4
	  param in name "pp_instance" type class_ref 2740108 // PP_Instance
	  param in name "argc" type class_ref 2345996 // uint32_t
	  param in name "argn" explicit_type "char"
	  param in name "argv" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} * ${p2}[]${v2}, const ${t3} * ${p3}[]${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} * ${p2}[], const ${t3} * ${p3}[]${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11410444 "Instance_DidDestroy"
	friend private explicit_return_type "void"
	nparams 1
	  param in name "instance" type class_ref 2740108 // PP_Instance
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11410572 "Module"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 2790924 // Module
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Unimplemented (disallow copy and assign)."
      end

      operation 11410700 "operator ="
	private return_type class_ref 2790924 // Module
	nparams 1
	  param in name "" type class_ref 2790924 // Module
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      classrelation 5226124 // current_instances_ (<directional composition>)
	relation 5225996 *-->
	  a role_name "current_instances_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5226124 // current_instances_ (<directional composition>)
	  b parent class_ref 2794252 // InstanceMap
      end

      classrelation 5226252 // pp_module_ (<directional composition>)
	relation 5226124 *-->
	  a role_name "pp_module_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5226252 // pp_module_ (<directional composition>)
	  b parent class_ref 2740236 // PP_Module
      end

      classrelation 5226380 // get_browser_interface_ (<directional composition>)
	relation 5226252 *-->
	  a role_name "get_browser_interface_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5226380 // get_browser_interface_ (<directional composition>)
	  b parent class_ref 2741516 // PPB_GetInterface
      end

      classrelation 5226508 // core_ (<unidirectional association>)
	relation 5226380 --->
	  a role_name "core_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5226508 // core_ (<unidirectional association>)
	  b parent class_ref 2790796 // Core
      end

      class 2794380 "InterfaceMap"
	visibility package stereotype "typedef" explicit_base_type "std::map<std::string, const void*>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 5226636 // additional_interfaces_ (<directional composition>)
	relation 5226508 *-->
	  a role_name "additional_interfaces_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5226636 // additional_interfaces_ (<directional composition>)
	  b parent class_ref 2794380 // InterfaceMap
      end
    end

    class 2791052 "FileIO"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ The <code>FileIO</code> class represents a regular file."
      classrelation 5223308 // <generalisation>
	relation 5223180 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5223308 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11390860 "FileIO"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor for creating an is_null() <code>FileIO</code>
/ object."
      end

      operation 11390988 "FileIO"
	public explicit_return_type ""
	nparams 1
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used to create a <code>FileIO</code> and associate it with
/ the provided <code>Instance</code>.
/
/ @param[in] instance The instance with which this resource will be
/ associated."
      end

      operation 11391116 "FileIO"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 2791052 // FileIO
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The copy constructor for <code>FileIO</code>.
/
/ @param[in] other A pointer to a <code>FileIO</code>."
      end

      operation 11391244 "Open"
	public return_type class_ref 2409996 // int32_t
	nparams 3
	  param in name "file_ref" type class_ref 2791180 // FileRef
	  param in name "open_flags" type class_ref 2409996 // int32_t
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Open() opens the specified regular file for I/O according to the given
/ open flags, which is a bit-mask of the PP_FileOpenFlags values.  Upon
/ success, the corresponding file is classified as \"in use\" by this FileIO
/ object until such time as the FileIO object is closed or destroyed.
/
/ @param[in] file_ref A <code>PP_Resource</code> corresponding to a file
/ reference.
/
/ @param[in] open_flags A bit-mask of the <code>PP_FileOpenFlags</code>
/ values. Valid values are:
/  - PP_FILEOPENFLAG_READ
/  - PP_FILEOPENFLAG_WRITE
/  - PP_FILEOPENFLAG_CREATE
/  - PP_FILEOPENFLAG_TRUNCATE
/  - PP_FILEOPENFLAG_EXCLUSIVE
/ See <code>PP_FileOpenFlags</code> in <code>ppb_file_io.h</code> for more
/ details on these flags.
/
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of Open().
/
/ @return An int32_t containing an error code from
/ <code>pp_errors.h</code>."
      end

      operation 11391372 "Query"
	public return_type class_ref 2409996 // int32_t
	nparams 2
	  param inout name "result_buf" type class_ref 2739084 // PP_FileInfo
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Query() queries info about the file opened by this FileIO object. This
/ function will fail if the FileIO object has not been opened.
/
/ @param[in] result_buf The <code>PP_FileInfo</code> structure representing
/ all information about the file.
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of Query().
/
/ @return An int32_t containing an error code from
/ <code>pp_errors.h</code>."
      end

      operation 11391500 "Touch"
	public return_type class_ref 2409996 // int32_t
	nparams 3
	  param in name "last_access_time" type class_ref 2739212 // PP_Time
	  param in name "last_modified_time" type class_ref 2739212 // PP_Time
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Touch() Updates time stamps for the file opened by this FileIO object.
/ This function will fail if the FileIO object has not been opened.
/
/ @param[in] last_access_time The last time the FileIO was accessed.
/ @param[in] last_modified_time The last time the FileIO was modified.
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of Touch().
/
/ @return An int32_t containing an error code from
/ <code>pp_errors.h</code>."
      end

      operation 11391628 "Read"
	public return_type class_ref 2409996 // int32_t
	nparams 4
	  param in name "offset" type class_ref 2603788 // int64_t
	  param inout name "buffer" explicit_type "char"
	  param in name "bytes_to_read" type class_ref 2409996 // int32_t
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}, ${t2} ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Reads from an offset in the file.
/
/ The size of the buffer must be large enough to hold the specified number
/ of bytes to read.  This function might perform a partial read, meaning
/ that all the requested bytes might not be returned, even if the end of the
/ file has not been reached.
/
/ This function reads into a buffer that the caller supplies. This buffer
/ must remain valid as long as the FileIO resource is alive. If you use
/ a completion callback factory and it goes out of scope, it will not issue
/ the callback on your class, BUT the callback factory can NOT cancel
/ the request from the browser's perspective. This means that the browser
/ will still try to write to your buffer even if the callback factory is
/ destroyed!
/
/ So you must ensure that your buffer outlives the FileIO resource. If you
/ have one class and use the FileIO resource exclusively from that class
/ and never make any copies, this will be fine: the resource will be
/ destroyed when your class is. But keep in mind that copying a pp::FileIO
/ object just creates a second reference to the original resource. For
/ example, if you have a function like this:
/   pp::FileIO MyClass::GetFileIO();
/ where a copy of your FileIO resource could outlive your class, the
/ callback will still be pending when your class goes out of scope, creating
/ the possibility of writing into invalid memory. So it's recommended to
/ keep your FileIO resource and any oubput buffers tightly controlled in
/ the same scope.
/
/ <strong>Caveat:</strong> This Read() is potentially unsafe if you're using
/ a CompletionCallbackFactory to scope callbacks to the lifetime of your
/ class.  When your class goes out of scope, the callback factory will not
/ actually cancel the callback, but will rather just skip issuing the
/ callback on your class.  This means that if the FileIO object outlives
/ your class (if you made a copy saved somewhere else, for example), then
/ the browser will still try to write into your buffer when the
/ asynchronous read completes, potentially causing a crash.
/
/ See the other version of Read() which avoids this problem by writing into
/ CompletionCallbackWithOutput, where the output buffer is automatically
/ managed by the callback.
/
/ @param[in] offset The offset into the file.
/ @param[in] buffer The buffer to hold the specified number of bytes read.
/ @param[in] bytes_to_read The number of bytes to read from
/ <code>offset</code>.
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of Read().
/
/ @return An The number of bytes read an error code from
/ <code>pp_errors.h</code>. If the return value is 0, then end-of-file was
/ reached. It is valid to call Read() multiple times with a completion
/ callback to queue up parallel reads from the file at different offsets."
      end

      operation 11391756 "Read"
	public return_type class_ref 2409996 // int32_t
	nparams 3
	  param in name "offset" type class_ref 2409996 // int32_t
	  param in name "max_read_length" type class_ref 2409996 // int32_t
	  param in name "cc" explicit_type "CompletionCallbackWithOutput< std::vector<char> >"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Read() reads from an offset in the file.  A PP_ArrayOutput must be
/ provided so that output will be stored in its allocated buffer.  This
/ function might perform a partial read.
/
/ @param[in] file_io A <code>PP_Resource</code> corresponding to a file
/ FileIO.
/ @param[in] offset The offset into the file.
/ @param[in] max_read_length The maximum number of bytes to read from
/ <code>offset</code>.
/ @param[in] output A <code>PP_ArrayOutput</code> to hold the output data.
/ @param[in] callback A <code>PP_CompletionCallback</code> to be called upon
/ completion of Read().
/
/ @return The number of bytes read or an error code from
/ <code>pp_errors.h</code>. If the return value is 0, then end-of-file was
/ reached. It is valid to call Read() multiple times with a completion
/ callback to queue up parallel reads from the file, but pending reads
/ cannot be interleaved with other operations."
      end

      operation 11391884 "Write"
	public return_type class_ref 2409996 // int32_t
	nparams 4
	  param in name "offset" type class_ref 2603788 // int64_t
	  param in name "buffer" explicit_type "char"
	  param in name "bytes_to_write" type class_ref 2409996 // int32_t
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}, ${t2} ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Write() writes to an offset in the file.  This function might perform a
/ partial write. The FileIO object must have been opened with write access.
/
/ @param[in] offset The offset into the file.
/ @param[in] buffer The buffer to hold the specified number of bytes read.
/ @param[in] bytes_to_write The number of bytes to write to
/ <code>offset</code>.
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of Write().
/
/ @return An The number of bytes written or an error code from
/ <code>pp_errors.h</code>. If the return value is 0, then end-of-file was
/ reached. It is valid to call Write() multiple times with a completion
/ callback to queue up parallel writes to the file at different offsets."
      end

      operation 11392012 "SetLength"
	public return_type class_ref 2409996 // int32_t
	nparams 2
	  param in name "length" type class_ref 2603788 // int64_t
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetLength() sets the length of the file.  If the file size is extended,
/ then the extended area of the file is zero-filled.  The FileIO object must
/ have been opened with write access.
/
/ @param[in] length The length of the file to be set.
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of SetLength().
/
/ @return An int32_t containing an error code from
/ <code>pp_errors.h</code>."
      end

      operation 11392140 "Flush"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Flush() flushes changes to disk.  This call can be very expensive!
/
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of Flush().
/
/ @return An int32_t containing an error code from
/ <code>pp_errors.h</code>."
      end

      operation 11392268 "Close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Close() cancels any IO that may be pending, and closes the FileIO object.
/ Any pending callbacks will still run, reporting
/ <code>PP_ERROR_ABORTED</code> if pending IO was interrupted.  It is not
/ valid to call Open() again after a call to this method.
/
/ <strong>Note:</strong> If the FileIO object is destroyed, and it is still
/ open, then it will be implicitly closed, so you are not required to call
/ Close()."
      end

      class 2791308 "CallbackData1_0"
	visibility package stereotype "struct"
	cpp_decl "${comment}${template}struct ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 5223436 // output (<directional composition>)
	  relation 5223308 *-->
	    a role_name "output" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5223436 // output (<directional composition>)
	    b parent class_ref 2738060 // PP_ArrayOutput
	end

	attribute 10051724 "temp_buffer"
	  public explicit_type "char"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 5223564 // original_callback (<directional composition>)
	  relation 5223436 *-->
	    a role_name "original_callback" public
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5223564 // original_callback (<directional composition>)
	    b parent class_ref 2738572 // PP_CompletionCallback
	end
      end

      operation 11392396 "CallbackConverter"
	class_operation private explicit_return_type "void"
	nparams 2
	  param inout name "user_data" explicit_type "void"
	  param in name "result" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Provide backwards-compatability for older Read versions. Converts the
 old-style \"char*\" output buffer of 1.0 to the new \"PP_ArrayOutput\"
 interface in 1.1.

 This takes a heap-allocated CallbackData1_0 struct passed as the user data
 and deletes it when the call completes."
      end
    end

    class 2791180 "FileRef"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ The <code>FileRef</code> class represents a \"weak pointer\" to a file in
/ a file system."
      classrelation 5223692 // <generalisation>
	relation 5223564 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5223692 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11392524 "FileRef"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor for creating an is_null() <code>FileRef</code>
/ object."
      end

      operation 11392652 "FileRef"
	public explicit_return_type ""
	nparams 1
	  param in name "resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used when you have an existing PP_Resource for a FileRef
/ and which to create a C++ object that takes an additional reference to
/ the resource.
/
/ @param[in] resource A PP_Resource corresponding to file reference."
      end

      operation 11392780 "FileRef"
	public explicit_return_type ""
	nparams 2
	  param in name "" type class_ref 2791436 // PassRef
	  param in name "resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used when you have received a PP_Resource as a return
/ value that has already been reference counted.
/
/ @param[in] resource A PP_Resource corresponding to file reference."
      end

      operation 11392908 "FileRef"
	public explicit_return_type ""
	nparams 2
	  param in name "file_system" type class_ref 2791564 // FileSystem
	  param in name "path" explicit_type "char"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} * ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} * ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor that creates a weak pointer to a file in the given file
/ system. File paths are POSIX style.
/
/ @param[in] file_system A <code>FileSystem</code> corresponding to a file
/ system typ.
/ @param[in] path A path to the file."
      end

      operation 11393036 "FileRef"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 2791180 // FileRef
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The copy constructor for <code>FileRef</code>.
/
/ @param[in] other A pointer to a <code>FileRef</code>."
      end

      operation 11393164 "GetFileSystemType"
	const public return_type class_ref 2738956 // PP_FileSystemType
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetFileSystemType() returns the type of the file system.
/
/ @return A <code>PP_FileSystemType</code> with the file system type if
/ valid or <code>PP_FILESYSTEMTYPE_INVALID</code> if the provided resource
/ is not a valid file reference."
      end

      operation 11393292 "GetName"
	const public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetName() returns the name of the file.
/
/ @return A <code>Var</code> containing the name of the file.  The value
/ returned by this function does not include any path components (such as
/ the name of the parent directory, for example). It is just the name of the
/ file. Use GetPath() to get the full file path."
      end

      operation 11393420 "GetPath"
	const public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetPath() returns the absolute path of the file.
/
/ @return A <code>Var</code> containing the absolute path of the file.
/ This function fails if the file system type is
/ <code>PP_FileSystemType_External</code>."
      end

      operation 11393548 "GetParent"
	const public return_type class_ref 2791180 // FileRef
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetParent() returns the parent directory of this file.  If
/ <code>file_ref</code> points to the root of the filesystem, then the root
/ is returned.
/
/ @return A <code>FileRef</code> containing the parent directory of the
/ file. This function fails if the file system type is
/ <code>PP_FileSystemType_External</code>."
      end

      operation 11393676 "MakeDirectory"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ MakeDirectory() makes a new directory in the file system.  It is not
/ valid to make a directory in the external file system.
/ <strong>Note:</strong> Use MakeDirectoryIncludingAncestors() to create
/ parent directories.
/
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of MakeDirectory().
/
/ @return An int32_t containing an error code from <code>pp_errors.h</code>.
/ Fails if the directory already exists."
      end

      operation 11393804 "MakeDirectoryIncludingAncestors"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ MakeDirectoryIncludingAncestors() makes a new directory in the file
/ system as well as any parent directories. It is not valid to make a
/ directory in the external file system.
/
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of MakeDirectoryIncludingAncestors().
/
/ @return An int32_t containing an error code from <code>pp_errors.h</code>.
/ Fails if the directory already exists."
      end

      operation 11393932 "Touch"
	public return_type class_ref 2409996 // int32_t
	nparams 3
	  param in name "last_access_time" type class_ref 2739212 // PP_Time
	  param in name "last_modified_time" type class_ref 2739212 // PP_Time
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Touch() Updates time stamps for a file.  You must have write access to the
/ file if it exists in the external filesystem.
/
/ @param[in] last_access_time The last time the file was accessed.
/ @param[in] last_modified_time The last time the file was modified.
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of Touch().
/
/ @return An int32_t containing an error code from <code>pp_errors.h</code>."
      end

      operation 11394060 "Delete"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Delete() deletes a file or directory. If <code>file_ref</code> refers to
/ a directory, then the directory must be empty. It is an error to delete a
/ file or directory that is in use.  It is not valid to delete a file in
/ the external file system.
/
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of Delete().
/
/ @return An int32_t containing an error code from <code>pp_errors.h</code>."
      end

      operation 11394188 "Rename"
	public return_type class_ref 2409996 // int32_t
	nparams 2
	  param in name "new_file_ref" type class_ref 2791180 // FileRef
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Rename() renames a file or directory. Argument <code>new_file_ref</code>
/ must refer to files in the same file system as in this object. It is an
/ error to rename a file or directory that is in use.  It is not valid to
/ rename a file in the external file system.
/
/ @param[in] new_file_ref A <code>FileRef</code> corresponding to a new
/ file reference.
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of Rename().
/
/ @return An int32_t containing an error code from <code>pp_errors.h</code>."
      end
    end

    class 2791436 "PassRef"
      visibility package stereotype "enum"
      cpp_decl "${comment}enum ${name} {
${items}
};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ @file
/ This file defines an annotation for constructors and other functions that
/ take ownership of a pointer.
/ An annotation for constructors and other functions that take ownership of
/ a pointer. For example, a resource constructor that takes ownership of a
/ provided <code>PP_Resource</code> ref count would take this enumeration to
/ differentiate from the more typical use case of taking its own reference."
      attribute 10052236 "PASS_REF"
	public type class_ref 2791436 // PassRef
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name}${value},${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2791564 "FileSystem"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ The <code>FileSystem</code> class identifies the file system type
/ associated with a file."
      classrelation 5223820 // <generalisation>
	relation 5223692 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5223820 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11394316 "FileSystem"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructs an is_null() filesystem resource. If you use this constructor,
/ you will have to assign it to a \"real\" FileSystem object before you can
/ use it."
      end

      operation 11394444 "FileSystem"
	public explicit_return_type ""
	nparams 2
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "type" type class_ref 2738956 // PP_FileSystemType
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ This constructor creates a file system object of the given type.
/
/ @param[in] instance The instance with which this resource will be
/ associated.
/
/ @param[in] type A file system type as defined by
/ <code>PP_FileSystemType</code> enum."
      end

      operation 11394572 "Open"
	public return_type class_ref 2409996 // int32_t
	nparams 2
	  param in name "expected_size" type class_ref 2603788 // int64_t
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Open() opens the file system. A file system must be opened before running
/ any other operation on it.
/
/ @param[in] expected_size The expected size of the file system. Note that
/ this does not request quota; to do that, you must either invoke
/ requestQuota from JavaScript:
/ http://www.html5rocks.com/en/tutorials/file/filesystem/#toc-requesting-quota
/ or set the unlimitedStorage permission for Chrome Web Store apps:
/ http://code.google.com/chrome/extensions/manifest.html#permissions
/
/ @param[in] cc A <code>PP_CompletionCallback</code> to be called upon
/ completion of Open().
/
/ @return An int32_t containing an error code from <code>pp_errors.h</code>."
      end
    end

    class 2791692 "Fullscreen"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ The Fullscreen class allowing you to check and toggle fullscreen mode."
      operation 11394700 "Fullscreen"
	public explicit_return_type ""
	nparams 1
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor for creating a <code>Fullscreen</code>.
/
/ @param[in] instance The instance with which this resource will be
/ associated."
      end

      operation 11394828 "~Fullscreen"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11394956 "IsFullscreen"
	public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ IsFullscreen() checks whether the module instance is currently in
/ fullscreen mode.
/
/ @return <code>true</code> if the module instance is in fullscreen mode,
/ <code>false</code> if the module instance is not in fullscreen mode."
      end

      operation 11395084 "SetFullscreen"
	public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "fullscreen" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetFullscreen() switches the module instance to and from fullscreen
/ mode.
/
/ The transition to and from fullscreen mode is asynchronous. During the
/ transition, IsFullscreen() will return the previous value and
/ no 2D or 3D device can be bound. The transition ends at DidChangeView()
/ when IsFullscreen() returns the new value. You might receive other
/ DidChangeView() calls while in transition.
/
/ The transition to fullscreen mode can only occur while the browser is
/ processing a user gesture, even if <code>true</code> is returned.
/
/ @param[in] fullscreen <code>true</code> to enter fullscreen mode, or
/ <code>false</code> to exit fullscreen mode.
/
/ @return <code>true</code> on success or <code>false</code> on
/ failure."
      end

      operation 11395212 "GetScreenSize"
	public return_type class_ref 2322828 // bool
	nparams 1
	  param inout name "size" type class_ref 2791820 // Size
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetScreenSize() gets the size of the screen in pixels. The module instance
/ will be resized to this size when SetFullscreen() is called to enter
/ fullscreen mode.
/
/ @param[out] size The size of the entire screen in pixels.
/
/ @return <code>true</code> on success or <code>false</code> on
/ failure."
      end

      classrelation 5223948 // instance_ (<directional composition>)
	relation 5223820 *-->
	  a role_name "instance_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5223948 // instance_ (<directional composition>)
	  b parent class_ref 2790028 // InstanceHandle
      end
    end

    class 2791820 "Size"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ @file
/ This file defines the API to create a size based on width
/ and height.
/ A size of an object based on width and height."
      operation 11424140 "Size"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
    size_.width = 0;
    size_.height = 0;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The default constructor. Initializes the width and height to 0."
      end

      operation 11424268 "Size"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "s" type class_ref 2740748 // PP_Size
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} {  // Implicit.
    // Want the >= 0 checking of the setter.
    set_width(s.width);
    set_height(s.height);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor accepting a pointer to a <code>PP_Size</code> and
/ converting the <code>PP_Size</code> to a <code>Size</code>. This is an
/ implicit conversion constructor.
/
/ @param[in] s A pointer to a <code>PP_Size</code>."
      end

      operation 11424396 "Size"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} {
    // Want the >= 0 checking of the setter.
    set_width(w);
    set_height(h);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor accepting two int values for width and height and
/ converting them to a <code>Size</code>.
/
/ @param[in] w An int value representing a width.
/ @param[in] h An int value representing a height."
      end

      operation 11424524 "~Size"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
  };
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11424652 "operator PP_Size"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return size_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ PP_Size() allows implicit conversion of a <code>Size</code> to a
/ <code>PP_Size</code>.
/
/ @return A Size."
      end

      operation 11424780 "pp_size"
	const cpp_inline public return_type class_ref 2740748 // PP_Size
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return size_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal <code>PP_Size</code> struct.
/
/ @return A const reference to the internal <code>PP_Size</code> struct."
      end

      operation 11424908 "pp_size"
	cpp_inline public return_type class_ref 2740748 // PP_Size
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return size_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal <code>PP_Size</code> struct.
/
/ @return A mutable reference to the <code>PP_Size</code> struct."
      end

      operation 11425036 "width"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return size_.width;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the value of width.
/
/ @return The value of width for this <code>Size</code>."
      end

      operation 11425164 "set_width"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "w" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (w < 0) {
      PP_DCHECK(w >= 0);
      w = 0;
    }
    size_.width = w;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of width.
/
/ @param[in] w A new width value."
      end

      operation 11425292 "height"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return size_.height;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the value of height.
/
/ @return The value of height for this <code>Size</code>."
      end

      operation 11425420 "set_height"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "h" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (h < 0) {
      PP_DCHECK(h >= 0);
      h = 0;
    }
    size_.height = h;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of height.
/
/ @param[in] h A new height value."
      end

      operation 11425548 "GetArea"
	const cpp_inline public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return width() * height();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetArea() determines the area (width * height).
/
/ @return The area."
      end

      operation 11425676 "SetSize"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    set_width(w);
    set_height(h);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetSize() sets the value of width and height.
/
/ @param[in] w A new width value.
/ @param[in] h A new height value."
      end

      operation 11425804 "Enlarge"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "w" explicit_type "int"
	  param in name "h" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    set_width(width() + w);
    set_height(height() + h);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Enlarge() enlarges the size of an object.
/
/ @param[in] w A width to add the current width.
/ @param[in] h A height to add to the current height."
      end

      operation 11425932 "IsEmpty"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    // Size doesn't allow negative dimensions, so testing for 0 is enough.
    return (width() == 0) || (height() == 0);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ IsEmpty() determines if the size is zero.
/
/ @return true if the size is zero."
      end

      classrelation 5229068 // size_ (<directional composition>)
	relation 5228940 *-->
	  a role_name "size_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5229068 // size_ (<directional composition>)
	  b parent class_ref 2740748 // PP_Size
      end
    end

    class 2791948 "Graphics2D"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5224076 // <generalisation>
	relation 5223948 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5224076 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11395340 "Graphics2D"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor for creating an is_null() <code>Graphics2D</code>
/ object."
      end

      operation 11395468 "Graphics2D"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 2791948 // Graphics2D
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The copy constructor for Graphics2D. The underlying 2D context is not
/ copied; this constructor creates another reference to the original 2D
/ context.
/
/ @param[in] other A pointer to a <code>Graphics2D</code> context."
      end

      operation 11395596 "Graphics2D"
	public explicit_return_type ""
	nparams 3
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "size" type class_ref 2791820 // Size
	  param in name "is_always_opaque" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} ${p2}${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} ${p2}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor allocating a new 2D graphics context with the given size
/ in the browser, resulting object will be is_null() if the allocation
/ failed.
/
/ @param[in] instance The instance with which this resource will be
/ associated.
/
/ @param[in] size The size of the 2D graphics context in the browser,
/ measured in device pixels.
/
/ @param[in] is_always_opaque Set the <code>is_always_opaque</code> flag
/ to true if you know that you will be painting only opaque data to this
/ context. This option will disable blending when compositing the module
/ with the web page, which might give higher performance on some computers.
/
/ If you set <code>is_always_opaque</code>, your alpha channel should
/ always be set to 0xFF or there may be painting artifacts. The alpha values
/ overwrite the destination alpha values without blending when
/ <code>is_always_opaque</code> is true."
      end

      operation 11395724 "~Graphics2D"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/ A destructor that decrements the reference count of a
/ <code>Graphics2D</code> object made using the previous copy constructor.
/ It is possible that the destructor does not toally destroy the underlying
/ 2D context if there are outstanding references to it."
      end

      operation 11395852 "operator ="
	public return_type class_ref 2791948 // Graphics2D
	nparams 1
	  param in name "other" type class_ref 2791948 // Graphics2D
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ This function assigns one 2D graphics context to this 2D graphics
/ context. This function increases the reference count of the 2D resource
/ of the other 2D graphics context while decrementing the reference counter
/ of this 2D graphics context.
/
/ @param[in] other An other 2D graphics context.
/
/ @return A new Graphics2D context."
      end

      operation 11395980 "size"
	const cpp_inline public return_type class_ref 2791820 // Size
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return size_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning size of the 2D graphics context.
/
/ @return The size of the 2D graphics context measured in device pixels."
      end

      operation 11396108 "PaintImageData"
	public explicit_return_type "void"
	nparams 2
	  param in name "image" type class_ref 2792076 // ImageData
	  param in name "top_left" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ PaintImageData() enqueues a paint command of the given image into
/ the context. This command has no effect until you call Flush(). As a
/ result, what counts is the contents of the bitmap when you call Flush,
/ not when you call this function.
/
/ The provided image will be placed at <code>top_left</code> from the top
/ left of the context's internal backing store. This version of
/ PaintImageData paints the entire image. Refer to the other version of
/ this function to paint only part of the area.
/
/ The painted area of the source bitmap must fall entirely within the
/ context. Attempting to paint outside of the context will result in an
/ error.
/
/ There are two methods most modules will use for painting. The first
/ method is to generate a new <code>ImageData</code> and then paint it.
/ In this case, you'll set the location of your painting to
/ <code>top_left</code> and set <code>src_rect</code> to <code>NULL</code>.
/ The second is that you're generating small invalid regions out of a larger
/ bitmap representing your entire module's image.
/
/ @param[in] image The <code>ImageData</code> to be painted.
/ @param[in] top_left A <code>Point</code> representing the
/ <code>top_left</code> location where the <code>ImageData</code> will be
/ painted."
      end

      operation 11396236 "PaintImageData"
	public explicit_return_type "void"
	nparams 3
	  param in name "image" type class_ref 2792076 // ImageData
	  param in name "top_left" type class_ref 2792204 // Point
	  param in name "src_rect" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ PaintImageData() enqueues a paint command of the given image into
/ the context. This command has no effect until you call Flush(). As a
/ result, what counts is the contents of the bitmap when you call Flush(),
/ not when you call this function.
/
/ The provided image will be placed at <code>top_left</code> from the top
/ left of the context's internal backing store. Then the pixels contained
/ in <code>src_rect</code> will be copied into the backing store. This
/ means that the rectangle being painted will be at <code>src_rect</code>
/ offset by <code>top_left</code>.
/
/ The <code>src_rect</code> is specified in the coordinate system of the
/ image being painted, not the context. For the common case of copying the
/ entire image, you may specify an empty <code>src_rect</code>.
/
/ The painted area of the source bitmap must fall entirely within the
/ context. Attempting to paint outside of the context will result in an
/ error. However, the source bitmap may fall outside the context, as long
/ as the <code>src_rect</code> subset of it falls entirely within the
/ context.
/
/ There are two methods most modules will use for painting. The first
/ method is to generate a new <code>ImageData</code> and then paint it. In
/ this case, you'll set the location of your painting to
/ <code>top_left</code> and set <code>src_rect</code> to <code>NULL</code>.
/ The second is that you're generating small invalid regions out of a larger
/ bitmap representing your entire module. In this case, you would set the
/ location of your image to (0,0) and then set <code>src_rect</code> to the
/ pixels you changed.
/
/ @param[in] image The <code>ImageData</code> to be painted.
/ @param[in] top_left A <code>Point</code> representing the
/ <code>top_left</code> location where the <code>ImageData</code> will be
/ painted.
/ @param[in] src_rect The rectangular area where the <code>ImageData</code>
/ will be painted."
      end

      operation 11396364 "Scroll"
	public explicit_return_type "void"
	nparams 2
	  param in name "clip" type class_ref 2792332 // Rect
	  param in name "amount" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Scroll() enqueues a scroll of the context's backing store. This
/ function has no effect until you call Flush(). The data within the
/ provided clipping rectangle will be shifted by (dx, dy) pixels.
/
/ This function will result in some exposed region which will have
/ undefined contents. The module should call PaintImageData() on
/ these exposed regions to give the correct contents.
/
/ The scroll can be larger than the area of the clipping rectangle, which
/ means the current image will be scrolled out of the rectangle. This
/ scenario is not an error but will result in a no-op.
/
/ @param[in] clip The clipping rectangle.
/ @param[in] amount The amount the area in the clipping rectangle will
/ shifted."
      end

      operation 11396492 "ReplaceContents"
	public explicit_return_type "void"
	nparams 1
	  param inout name "image" type class_ref 2792076 // ImageData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ ReplaceContents() provides a slightly more efficient way to paint the
/ entire module's image. Normally, calling PaintImageData() requires that
/ the browser copy the pixels out of the image and into the graphics
/ context's backing store. This function replaces the graphics context's
/ backing store with the given image, avoiding the copy.
/
/ The new image must be the exact same size as this graphics context. If
/ the new image uses a different image format than the browser's native
/ bitmap format (use ImageData::GetNativeImageDataFormat() to retrieve the
/ format), then a conversion will be done inside the browser which may slow
/ the performance a little bit.
/
/ <strong>Note:</strong> The new image will not be painted until you call
/ Flush().
/
/ After this call, you should take care to release your references to the
/ image. If you paint to the image after ReplaceContents(), there is the
/ possibility of significant painting artifacts because the page might use
/ partially-rendered data when copying out of the backing store.
/
/ In the case of an animation, you will want to allocate a new image for
/ the next frame. It is best if you wait until the flush callback has
/ executed before allocating this bitmap. This gives the browser the option
/ of caching the previous backing store and handing it back to you
/ (assuming the sizes match). In the optimal case, this means no bitmaps are
/ allocated during the animation, and the backing store and \"front buffer\"
/ (which the module is painting into) are just being swapped back and forth.
/
/ @param[in] image The <code>ImageData</code> to be painted."
      end

      operation 11396620 "Flush"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Flush() flushes any enqueued paint, scroll, and replace commands
/ to the backing store. This actually executes the updates, and causes a
/ repaint of the webpage, assuming this graphics context is bound to a
/ module instance.
/
/ Flush() runs in asynchronous mode. Specify a callback function and
/ the argument for that callback function. The callback function will be
/ executed on the calling thread when the image has been painted to the
/ screen. While you are waiting for a <code>Flush</code> callback,
/ additional calls to Flush() will fail.
/
/ Because the callback is executed (or thread unblocked) only when the
/ module's image is actually on the screen, this function provides
/ a way to rate limit animations. By waiting until the image is on the
/ screen before painting the next frame, you can ensure you're not
/ flushing 2D graphics faster than the screen can be updated.
/
/ <strong>Unbound contexts</strong>
/ If the context is not bound to a module instance, you will
/ still get a callback. The callback will execute after Flush() returns
/ to avoid reentrancy. The callback will not wait until anything is
/ painted to the screen because there will be nothing on the screen. The
/ timing of this callback is not guaranteed and may be deprioritized by
/ the browser because it is not affecting the user experience.
/
/ <strong>Off-screen instances</strong>
/ If the context is bound to an instance that is
/ currently not visible (for example, scrolled out of view) it will
/ behave like the \"unbound context\" case.
/
/ <strong>Detaching a context</strong>
/ If you detach a context from a module instance, any
/ pending flush callbacks will be converted into the \"unbound context\"
/ case.
/
/ <strong>Released contexts</strong>
/ A callback may or may not still get called even if you have released all
/ of your references to the context. This can occur if there are internal
/ references to the context that means it has not been internally
/ destroyed (for example, if it is still bound to an instance) or due to
/ other implementation details. As a result, you should be careful to
/ check that flush callbacks are for the context you expect and that
/ you're capable of handling callbacks for context that you may have
/ released your reference to.
/
/ <strong>Shutdown</strong>
/ If a module instance is removed when a Flush is pending, the
/ callback will not be executed.
/
/ @param[in] cc A <code>CompletionCallback</code> to be called when the
/ image has been painted on the screen.
/
/ @return Returns <code>PP_OK</code> on success or
/ <code>PP_ERROR_BADRESOURCE</code> if the graphics context is invalid,
/ <code>PP_ERROR_BADARGUMENT</code> if the callback is null and
/ flush is being called from the main thread of the module, or
/ <code>PP_ERROR_INPROGRESS</code> if a flush is already pending that has
/ not issued its callback yet.  In the failure case, nothing will be
/ updated and no callback will be scheduled.
 TODO(darin): We should ensure that the completion callback always runs, so
 that it is easier for consumers to manage memory referenced by a callback.
 TODO(): Add back in the synchronous mode description once we have support
 for it."
      end

      classrelation 5224204 // size_ (<directional composition>)
	relation 5224076 *-->
	  a role_name "size_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5224204 // size_ (<directional composition>)
	  b parent class_ref 2791820 // Size
      end
    end

    class 2792076 "ImageData"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5224588 // <generalisation>
	relation 5224460 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5224588 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11398156 "ImageData"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor for creating an is_null() <code>ImageData</code>
/ object."
      end

      operation 11398284 "ImageData"
	public explicit_return_type ""
	nparams 2
	  param in name "" type class_ref 2791436 // PassRef
	  param in name "resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used when you have received a <code>PP_Resource</code> as a
/ return value that has already been reference counted.
/
/ @param[in] resource A PP_Resource corresponding to image data."
      end

      operation 11398412 "ImageData"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 2792076 // ImageData
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The copy constructor for <code>ImageData</code>. This constructor
/ produces an <code>ImageData</code> object that shares the underlying
/ <code>Image</code> resource with <code>other</code>.
/
/ @param[in] other A pointer to an image data."
      end

      operation 11398540 "ImageData"
	public explicit_return_type ""
	nparams 4
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "format" type class_ref 2745612 // PP_ImageDataFormat
	  param in name "size" type class_ref 2791820 // Size
	  param in name "init_to_zero" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, ${t3} ${p3}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor that allocates a new <code>ImageData</code> in the browser
/ with the provided parameters. The resulting object will be is_null() if
/ the allocation failed.
/
/ @param[in] instance The instance with which this resource will be
/ associated.
/
/ @param[in] format A PP_ImageDataFormat containing desired image format.
/ PP_ImageDataFormat is an enumeration of the different types of
/ image data formats. Refer to
/ <a href=\"../pepperc/ppb__image__data_8h.html\">
/ <code>ppb_image_data.h</code></a> for further information.
/
/ @param[in] size A pointer to a <code>Size</code> containing the image
/ size.
/
/ @param[in] init_to_zero A bool used to determine transparency at
/ creation. Set the <code>init_to_zero</code> flag if you want the bitmap
/ initialized to transparent during the creation process. If this flag is
/ not set, the current contents of the bitmap will be undefined, and the
/ module should be sure to set all the pixels."
      end

      operation 11398668 "operator ="
	public return_type class_ref 2792076 // ImageData
	nparams 1
	  param in name "other" type class_ref 2792076 // ImageData
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ This function decrements the reference count of this
/ <code>ImageData</code> and increments the reference count of the
/ <code>other</code> <code>ImageData</code>. This <code>ImageData</code>
/ shares the underlying image resource with <code>other</code>.
/
/ @param[in] other An other image data.
/
/ @return A new image data context."
      end

      operation 11398796 "IsImageDataFormatSupported"
	class_operation public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "format" type class_ref 2745612 // PP_ImageDataFormat
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ IsImageDataFormatSupported() returns <code>true</code> if the supplied
/ format is supported by the browser. Note:
/ <code>PP_IMAGEDATAFORMAT_BGRA_PREMUL</code> and
/ <code>PP_IMAGEDATAFORMAT_RGBA_PREMUL</code> formats are always supported.
/ Other image formats do not make this guarantee, and should be checked
/ first with IsImageDataFormatSupported() before using.
/
/ @param[in] format Image data format.
/
/ @return <code>true</code> if the format is supported by the browser."
      end

      operation 11398924 "GetNativeImageDataFormat"
	class_operation public return_type class_ref 2745612 // PP_ImageDataFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetNativeImageDataFormat() determines the browser's preferred format for
/ images. Using this format guarantees no extra conversions will occur when
/ painting.
/
/ @return <code>PP_ImageDataFormat</code> containing the preferred format."
      end

      operation 11399052 "format"
	const cpp_inline public return_type class_ref 2745612 // PP_ImageDataFormat
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return desc_.format; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ A getter function for returning the current format for images.
/
/ @return <code>PP_ImageDataFormat</code> containing the preferred format."
      end

      operation 11399180 "size"
	const cpp_inline public return_type class_ref 2791820 // Size
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return desc_.size; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ A getter function for returning the image size.
/
/ @return The image size in pixels."
      end

      operation 11399308 "stride"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return desc_.stride; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ A getter function for returning the row width in bytes.
/
/ @return The row width in bytes."
      end

      operation 11399436 "data"
	const cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return data_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ A getter function for returning a raw pointer to the image pixels.
/
/ @return A raw pointer to the image pixels."
      end

      operation 11399564 "GetAddr32"
	const public return_type class_ref 2345996 // uint32_t
	nparams 1
	  param in name "coord" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}const ${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function is used retrieve the address of the given pixel for 32-bit
/ pixel formats.
/
/ @param[in] coord A <code>Point</code> representing the x and y
/ coordinates for a specific pixel.
/
/ @return The address for the pixel."
      end

      operation 11399692 "GetAddr32"
	public return_type class_ref 2345996 // uint32_t
	nparams 1
	  param in name "coord" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function is used retrieve the address of the given pixel for 32-bit
/ pixel formats.
/
/ @param[in] coord A <code>Point</code> representing the x and y
/ coordinates for a specific pixel.
/
/ @return The address for the pixel."
      end

      operation 11399820 "InitData"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 5224716 // desc_ (<directional composition>)
	relation 5224588 *-->
	  a role_name "desc_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5224716 // desc_ (<directional composition>)
	  b parent class_ref 2745740 // PP_ImageDataDesc
      end

      attribute 10051852 "data_"
	private explicit_type "void"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end

    class 2792204 "Point"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ @file
/ This file defines the API to create a 2 dimensional point.
/ A 2 dimensional point with 0,0 being the upper-left starting coordinate."
      operation 11413516 "Point"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
    point_.x = 0;
    point_.y = 0;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The default constructor for a point at 0,0."
      end

      operation 11413644 "Point"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "in_x" type class_ref 2409996 // int32_t
	  param in name "in_y" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} {
    point_.x = in_x;
    point_.y = in_y;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor accepting two int32_t values for x and y and converting
/ them to a Point.
/
/ @param[in] in_x An int32_t value representing a horizontal coordinate
/ of a point, starting with 0 as the left-most coordinate.
/ @param[in] in_y An int32_t value representing a vertical coordinate
/ of a point, starting with 0 as the top-most coordinate."
      end

      operation 11413772 "Point"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "point" type class_ref 2740364 // PP_Point
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} {  // Implicit.
    point_.x = point.x;
    point_.y = point.y;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor accepting a pointer to a PP_Point and converting the
/ PP_Point to a Point. This is an implicit conversion constructor.
/
/ @param[in] point A pointer to a PP_Point."
      end

      operation 11413900 "~Point"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
  };
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11414028 "operator PP_Point"
	const cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return point_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ A function allowing implicit conversion of a Point to a PP_Point.
/ @return A Point."
      end

      operation 11414156 "pp_point"
	const cpp_inline public return_type class_ref 2740364 // PP_Point
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return point_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal PP_Point struct.
/
/ @return A const reference to the internal PP_Point struct."
      end

      operation 11414284 "pp_point"
	cpp_inline public return_type class_ref 2740364 // PP_Point
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return point_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal PP_Point struct.
/
/ @return A mutable reference to the PP_Point struct."
      end

      operation 11414412 "x"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return point_.x; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the value of x.
/
/ @return The value of x for this Point."
      end

      operation 11414540 "set_x"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "in_x" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    point_.x = in_x;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of x.
/
/ @param[in] in_x A new x value."
      end

      operation 11414668 "y"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return point_.y; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the value of y.
/
/ @return The value of y for this Point."
      end

      operation 11414796 "set_y"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "in_y" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    point_.y = in_y;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of y.
/
/ @param[in] in_y A new y value."
      end

      operation 11414924 "operator +"
	const cpp_inline public return_type class_ref 2792204 // Point
	nparams 1
	  param in name "other" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return Point(x() + other.x(), y() + other.y());
  };
"
	
	
	
	
	comment "/ Adds two Points (this and other) together by adding their x values and
/ y values.
/
/ @param[in] other A Point.
/
/ @return A new Point containing the result."
      end

      operation 11415052 "operator -"
	const cpp_inline public return_type class_ref 2792204 // Point
	nparams 1
	  param in name "other" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return Point(x() - other.x(), y() - other.y());
  };
"
	
	
	
	
	comment "/ Subtracts one Point from another Point by subtracting their x values
/ and y values. Returnes a new point with the result.
/
/ @param[in] other A Point.
/
/ @return A new Point containing the result."
      end

      operation 11415180 "operator +="
	cpp_inline public return_type class_ref 2792204 // Point
	nparams 1
	  param in name "other" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    point_.x += other.x();
    point_.y += other.y();
    return *this;
  };
"
	
	
	
	
	comment "/ Adds two Points (this and other) together by adding their x and y
/ values. Returns this point as the result.
/
/ @param[in] other A Point.
/
/ @return This Point containing the result."
      end

      operation 11415308 "operator -="
	cpp_inline public return_type class_ref 2792204 // Point
	nparams 1
	  param in name "other" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    point_.x -= other.x();
    point_.y -= other.y();
    return *this;
  };
"
	
	
	
	
	comment "/ Subtracts one Point from another Point by subtracting their x values
/ and y values. Returns this point as the result.
/
/ @param[in] other A Point.
/
/ @return This Point containing the result."
      end

      operation 11415436 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    int32_t x = point_.x;
    int32_t y = point_.y;
    point_.x = other.point_.x;
    point_.y = other.point_.y;
    other.point_.x = x;
    other.point_.y = y;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Swaps the coordinates of two Points.
/
/ @param[in] other A Point."
      end

      classrelation 5228556 // point_ (<directional composition>)
	relation 5228428 *-->
	  a role_name "point_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5228556 // point_ (<directional composition>)
	  b parent class_ref 2740364 // PP_Point
      end
    end

    class 2792332 "Rect"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ @file
/ This file defines the APIs for creating a 2 dimensional rectangle.
/ A 2 dimensional rectangle. A rectangle is represented by x and y (which
/ identifies the upper-left corner of the rectangle), width, and height."
      operation 11417612 "Rect"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
    rect_.point.x = 0;
    rect_.point.y = 0;
    rect_.size.width = 0;
    rect_.size.height = 0;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The default constructor. Creates a <code>Rect</code> in the upper-left
/ at 0,0 with height and width of 0."
      end

      operation 11417740 "Rect"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "rect" type class_ref 2740620 // PP_Rect
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} {  // Implicit.
    set_x(rect.point.x);
    set_y(rect.point.y);
    set_width(rect.size.width);
    set_height(rect.size.height);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor accepting a reference to a <code>PP_Rect and</code>
/ converting the <code>PP_Rect</code> to a <code>Rect</code>. This is an
/ implicit conversion constructor.
/
/ @param[in] rect A <code>PP_Rect</code>."
      end

      operation 11417868 "Rect"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "w" type class_ref 2409996 // int32_t
	  param in name "h" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} {
    set_x(0);
    set_y(0);
    set_width(w);
    set_height(h);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor accepting two int32_t values for width and height and
/ converting them to a <code>Rect</code> in the upper-left starting
/ coordinate of 0,0.
/
/ @param[in] w An int32_t value representing a width.
/ @param[in] h An int32_t value representing a height."
      end

      operation 11417996 "Rect"
	cpp_inline public explicit_return_type ""
	nparams 4
	  param in name "x" type class_ref 2409996 // int32_t
	  param in name "y" type class_ref 2409996 // int32_t
	  param in name "w" type class_ref 2409996 // int32_t
	  param in name "h" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw} {
    set_x(x);
    set_y(y);
    set_width(w);
    set_height(h);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor accepting four int32_t values for width, height, x, and y.
/
/ @param[in] x An int32_t value representing a horizontal coordinate
/ of a point, starting with 0 as the left-most coordinate.
/ @param[in] y An int32_t value representing a vertical coordinate
/ of a point, starting with 0 as the top-most coordinate.
/ @param[in] w An int32_t value representing a width.
/ @param[in] h An int32_t value representing a height."
      end

      operation 11418124 "Rect"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "s" type class_ref 2791820 // Size
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} {
    set_x(0);
    set_y(0);
    set_size(s);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor accepting a pointer to a Size and converting the
/ <code>Size</code> to a <code>Rect</code> in the upper-left starting
/ coordinate of 0,0.
/
/ @param[in] s A pointer to a <code>Size</code>."
      end

      operation 11418252 "Rect"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "origin" type class_ref 2792204 // Point
	  param in name "size" type class_ref 2791820 // Size
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw} {
    set_point(origin);
    set_size(size);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor accepting a pointer to a <code>Point</code> representing
/ the origin of the rectangle and a pointer to a <code>Size</code>
/ representing the height and width.
/
/ @param[in] origin A pointer to a <code>Point</code> representing the
/ upper-left starting coordinate.
/ @param[in] size A pointer to a <code>Size</code> representing the height
/ and width."
      end

      operation 11418380 "~Rect"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
  };
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11418508 "operator PP_Rect"
	const cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rect_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ PP_Rect() allows implicit conversion of a <code>Rect</code> to a
/ <code>PP_Rect</code>.
/
/ @return A <code>Point</code>."
      end

      operation 11418636 "pp_rect"
	const cpp_inline public return_type class_ref 2740620 // PP_Rect
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rect_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal <code>PP_Rect</code> struct.
/
/ @return A const reference to the internal <code>PP_Rect</code> struct."
      end

      operation 11418764 "pp_rect"
	cpp_inline public return_type class_ref 2740620 // PP_Rect
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rect_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal <code>PP_Rect</code> struct.
/
/ @return A mutable reference to the <code>PP_Rect</code> struct."
      end

      operation 11418892 "x"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rect_.point.x;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the value of x.
/
/ @return The value of x for this <code>Point</code>."
      end

      operation 11419020 "set_x"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "in_x" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    rect_.point.x = in_x;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of x.
/
/ @param[in] in_x A new x value."
      end

      operation 11419148 "y"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rect_.point.y;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the value of y.
/
/ @return The value of y for this <code>Point</code>."
      end

      operation 11419276 "set_y"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "in_y" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    rect_.point.y = in_y;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of y.
/
/ @param[in] in_y A new y value."
      end

      operation 11419404 "width"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rect_.size.width;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the value of width.
/
/ @return The value of width for this <code>Rect</code>."
      end

      operation 11419532 "set_width"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "w" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (w < 0) {
      PP_DCHECK(w >= 0);
      w = 0;
    }
    rect_.size.width = w;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of width.
/
/ @param[in] w A new width value."
      end

      operation 11419660 "height"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rect_.size.height;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the value of height.
/
/ @return The value of height for this <code>Rect</code>."
      end

      operation 11419788 "set_height"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "h" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (h < 0) {
      PP_DCHECK(h >= 0);
      h = 0;
    }
    rect_.size.height = h;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of height.
/
/ @param[in] h A new width height."
      end

      operation 11419916 "point"
	const cpp_inline public return_type class_ref 2792204 // Point
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return Point(rect_.point);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the <code>Point</code>.
/
/ @return A <code>Point</code>."
      end

      operation 11420044 "set_point"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "origin" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    rect_.point = origin;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of the <code>Point</code>.
/
/ @param[in] origin A <code>Point</code> representing the upper-left
/ starting coordinate."
      end

      operation 11420172 "size"
	const cpp_inline public return_type class_ref 2791820 // Size
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return Size(rect_.size);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the <code>Size</code>.
/
/ @return The size of the rectangle."
      end

      operation 11420300 "set_size"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "s" type class_ref 2791820 // Size
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    rect_.size.width = s.width();
    rect_.size.height = s.height();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the <code>Size</code>.
/
/ @param[in] s A pointer to a <code>Size</code> representing the height
/ and width."
      end

      operation 11420428 "right"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return x() + width();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function to get the upper-bound for the x-coordinates of the
/ rectangle.  Note that this coordinate value is one past the highest x
/ value of pixels in the rectangle.  This loop will access all the pixels
/ in a horizontal line in the rectangle:
/ <code>for (int32_t x = rect.x(); x < rect.right(); ++x) {}</code>
/
/ @return The value of x + width for this point."
      end

      operation 11420556 "bottom"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return y() + height();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function to get the upper-bound for the y-coordinates of the
/ rectangle.  Note that this coordinate value is one past the highest xy
/ value of pixels in the rectangle.  This loop will access all the pixels
/ in a horizontal line in the rectangle:
/ <code>for (int32_t y = rect.y(); y < rect.bottom(); ++y) {}</code>
/
/ @return The value of y + height for this point."
      end

      operation 11420684 "SetRect"
	cpp_inline public explicit_return_type "void"
	nparams 4
	  param in name "x" type class_ref 2409996 // int32_t
	  param in name "y" type class_ref 2409996 // int32_t
	  param in name "w" type class_ref 2409996 // int32_t
	  param in name "h" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
    set_x(x);
    set_y(y);
    set_width(w);
    set_height(h);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of the <code>Rect</code>.
/
/ @param[in] x A new x value.
/ @param[in] y A new y value.
/ @param[in] w A new width value.
/ @param[in] h A new height value."
      end

      operation 11420812 "SetRect"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "rect" type class_ref 2740620 // PP_Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    rect_ = rect;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of the <code>Rect</code>.
/
/ @param[in] rect A pointer to a <code>PP_Rect</code>."
      end

      operation 11420940 "Inset"
	cpp_inline public explicit_return_type "void"
	nparams 2
	  param in name "horizontal" type class_ref 2409996 // int32_t
	  param in name "vertical" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    Inset(horizontal, vertical, horizontal, vertical);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Inset() shrinks the rectangle by a horizontal and vertical
/ distance on all sides.
/
/ @param[in] horizontal An int32_t value representing a horizontal
/ shrinking distance.
/ @param[in] vertical An int32_t value representing a vertical
/ shrinking distance."
      end

      operation 11421068 "Inset"
	public explicit_return_type "void"
	nparams 4
	  param in name "left" type class_ref 2409996 // int32_t
	  param in name "top" type class_ref 2409996 // int32_t
	  param in name "right" type class_ref 2409996 // int32_t
	  param in name "bottom" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Inset() shrinks the rectangle by the specified amount on each
/ side.
/
/ @param[in] left An int32_t value representing a left
/ shrinking distance.
/ @param[in] top An int32_t value representing a top
/ shrinking distance.
/ @param[in] right An int32_t value representing a right
/ shrinking distance.
/ @param[in] bottom An int32_t value representing a bottom
/ shrinking distance."
      end

      operation 11421196 "Offset"
	public explicit_return_type "void"
	nparams 2
	  param in name "horizontal" type class_ref 2409996 // int32_t
	  param in name "vertical" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Offset() moves the rectangle by a horizontal and vertical distance.
/
/ @param[in] horizontal An int32_t value representing a horzontal
/ move distance.
/ @param[in] vertical An int32_t value representing a vertical
/ move distance."
      end

      operation 11421324 "Offset"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "point" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    Offset(point.x(), point.y());
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Offset() moves the rectangle by a horizontal and vertical distance.
/
/ @param[in] point A pointer to a <code>Point</code> representing the
/ horizontal and vertical move distances."
      end

      operation 11421452 "IsEmpty"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return rect_.size.width == 0 && rect_.size.height == 0;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ IsEmpty() determines if the area of a rectangle is zero. Returns true if
/ the area of the rectangle is zero.
/
/ @return true if the area of the rectangle is zero."
      end

      operation 11421580 "Contains"
	const public return_type class_ref 2322828 // bool
	nparams 2
	  param in name "point_x" type class_ref 2409996 // int32_t
	  param in name "point_y" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Contains() determines if the point identified by point_x and point_y
/ falls inside this rectangle. The point (x, y) is inside the rectangle,
/ but the point (x + width, y + height) is not.
/
/ @param[in] point_x An int32_t value representing a x value.
/ @param[in] point_y An int32_t value representing a y value.
/
/ @return true if the point_x and point_y fall inside the rectangle."
      end

      operation 11421708 "Contains"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "point" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return Contains(point.x(), point.y());
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Contains() determines if the specified point is contained by this
/ rectangle.
/
/ @param[in] point A pointer to a Point representing a 2D coordinate.
/
/ @return true if the point_x and point_y fall inside the rectangle."
      end

      operation 11421836 "Contains"
	const public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "rect" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Contains() determines if this rectangle contains the specified rectangle.
/
/ @param[in] rect A pointer to a <code>Rect</code>.
/
/ @return true if the rectangle fall inside this rectangle."
      end

      operation 11421964 "Intersects"
	const public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "rect" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Insersects() determines if this rectangle intersects the specified
/ rectangle.
/
/ @param[in] rect A pointer to a <code>Rect</code>.
/
/ @return true if the rectangle intersects  this rectangle."
      end

      operation 11422092 "Intersect"
	const public return_type class_ref 2792332 // Rect
	nparams 1
	  param in name "rect" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Intersect() computes the intersection of this rectangle with the given
/ rectangle.
/
/ @param[in] rect A pointer to a <code>Rect</code>.
/
/ @return A <code>Rect</code> representing the intersection."
      end

      operation 11422220 "Union"
	const public return_type class_ref 2792332 // Rect
	nparams 1
	  param in name "rect" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Union() computes the union of this rectangle with the given rectangle.
/ The union is the smallest rectangle containing both rectangles.
/
/ @param[in] rect A pointer to a <code>Rect</code>.
/
/ @return A <code>Rect</code> representing the union."
      end

      operation 11422348 "Subtract"
	const public return_type class_ref 2792332 // Rect
	nparams 1
	  param in name "rect" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Subtract() computes the rectangle resulting from subtracting
/ <code>rect</code> from this Rect.  If <code>rect</code>does not intersect
/ completely in either the x or y direction, then <code>*this</code> is
/ returned. If <code>rect</code> contains <code>this</code>, then an empty
/ <code>Rect</code> is returned.
/
/ @param[in] rect A pointer to a <code>Rect</code>.
/
/ @return A <code>Rect</code> representing the subtraction."
      end

      operation 11422476 "AdjustToFit"
	const public return_type class_ref 2792332 // Rect
	nparams 1
	  param in name "rect" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ AdjustToFit() fits as much of the receiving rectangle within
/ the supplied rectangle as possible, returning the result. For example,
/ if the receiver had a x-location of 2 and a width of 4, and the supplied
/ rectangle had an x-location of 0 with a width of 5, the returned
/ rectangle would have an x-location of 1 with a width of 4.
/
/ @param[in] rect A pointer to a <code>Rect</code>.
/
/ @return A <code>Rect</code> representing the difference between this
/ rectangle and the receiving rectangle."
      end

      operation 11422604 "CenterPoint"
	const public return_type class_ref 2792204 // Point
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ CenterPoint() determines the center of this rectangle.
/
/ @return A <code>Point</code> representing the center of this rectangle."
      end

      operation 11422732 "SharesEdgeWith"
	const public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "rect" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SharesEdgeWith() determines if this rectangle shares an entire edge
/ (same width or same height) with the given rectangle, and the
/ rectangles do not overlap.
/
/ @param[in] rect A pointer to a <code>Rect</code>.
/
/ @return true if this rectangle and supplied rectangle share an edge."
      end

      classrelation 5228812 // rect_ (<directional composition>)
	relation 5228684 *-->
	  a role_name "rect_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5228812 // rect_ (<directional composition>)
	  b parent class_ref 2740620 // PP_Rect
      end
    end

    class 2792460 "Graphics3D"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ This class represents a 3D rendering context in the browser."
      classrelation 5224332 // <generalisation>
	relation 5224204 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5224332 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11396748 "Graphics3D"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor for creating an is_null() Graphics3D object."
      end

      operation 11396876 "Graphics3D"
	public explicit_return_type ""
	nparams 2
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "attrib_list" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} ${p1}[]${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} ${p1}[]${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor for creating and and initializing a 3D rendering context.
/ The returned context is created off-screen and must be attached
/ to a module instance using <code>Instance::BindGraphics</code> to draw on
/ the web page.
/
/ @param[in] instance The instance with which this resource will be
/ associated.
/
/ @param[in] attrib_list The list of attributes (name=value pairs) for the
/ context. The list is terminated with
/ <code>PP_GRAPHICS3DATTRIB_NONE</code>. The <code>attrib_list</code> may
/ be <code>NULL</code> or empty (first attribute is
/ <code>PP_GRAPHICS3DATTRIB_NONE</code>). If an attribute is not specified
/ in <code>attrib_list</code>, then the default value is used.
/
/ Attributes are classified into two categories:
/
/ 1. AtLeast: The attribute value in the returned context will meet or
/            exceed the value requested when creating the object.
/ 2. Exact: The attribute value in the returned context is equal to
/          the value requested when creating the object.
/
/ AtLeast attributes are (all have default values of 0):
/
/ <code>PP_GRAPHICS3DATTRIB_ALPHA_SIZE</code>
/ <code>PP_GRAPHICS3DATTRIB_BLUE_SIZE</code>
/ <code>PP_GRAPHICS3DATTRIB_GREEN_SIZE</code>
/ <code>PP_GRAPHICS3DATTRIB_RED_SIZE</code>
/ <code>PP_GRAPHICS3DATTRIB_DEPTH_SIZE</code>
/ <code>PP_GRAPHICS3DATTRIB_STENCIL_SIZE</code>
/ <code>PP_GRAPHICS3DATTRIB_SAMPLES</code>
/ <code>PP_GRAPHICS3DATTRIB_SAMPLE_BUFFERS</code>
/
/ Exact attributes are:
/
/ <code>PP_GRAPHICS3DATTRIB_WIDTH</code> Default 0
/ <code>PP_GRAPHICS3DATTRIB_HEIGHT</code> Default 0
/ <code>PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR</code>
/ Default: Implementation defined.
/
/ On failure, the object will be is_null()."
      end

      operation 11397004 "Graphics3D"
	public explicit_return_type ""
	nparams 3
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "share_context" type class_ref 2792460 // Graphics3D
	  param in name "attrib_list" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} ${p2}[]${v2}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, const ${t2} ${p2}[]${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor for creating and initializing a 3D rendering context. The
/ returned context is created off-screen. It must be attached to a
/ module instance using <code>Instance::BindGraphics</code> to draw on the
/ web page.
/
/ This constructor is identical to the 2-argument version except that this
/ version allows sharing of resources with another context.
/
/ @param[in] instance The instance that will own the new Graphics3D.
/
/ @param[in] share_context Specifies the context with which all
/ shareable data will be shared. The shareable data is defined by the
/ client API (note that for OpenGL and OpenGL ES, shareable data excludes
/ texture objects named 0). An arbitrary number of Graphics3D resources
/ can share data in this fashion.

/ @param[in] attrib_list The list of attributes for the context. See the
/ 2-argument version of this constructor for more information.
/
/ On failure, the object will be is_null()."
      end

      operation 11397132 "~Graphics3D"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11397260 "GetAttribs"
	const public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "attrib_list" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}[]${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}[]${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetAttribs() retrieves the value for each attribute in
/ <code>attrib_list</code>. The list has the same structure as described
/ for the constructor. All attribute values specified in
/ <code>pp_graphics_3d.h</code> can be retrieved.
/
/ @param[in,out] attrib_list The list of attributes (name=value pairs) for
/ the context. The list is terminated with
/ <code>PP_GRAPHICS3DATTRIB_NONE</code>.
/
/ The following error codes may be returned on failure:
/
/ PP_ERROR_BADRESOURCE if context is invalid.
/ PP_ERROR_BADARGUMENT if <code>attrib_list</code> is NULL or any attribute
/ in the <code>attrib_list</code> is not a valid attribute.
/
/ <strong>Example:</strong>
/
/ <code>
/ int attrib_list[] = {PP_GRAPHICS3DATTRIB_RED_SIZE, 0,
/                      PP_GRAPHICS3DATTRIB_GREEN_SIZE, 0,
/                      PP_GRAPHICS3DATTRIB_BLUE_SIZE, 0,
/                      PP_GRAPHICS3DATTRIB_NONE};
/ GetAttribs(context, attrib_list);
/ int red_bits = attrib_list[1];
/ int green_bits = attrib_list[3];
/ int blue_bits = attrib_list[5];
/ </code>
/
/ This example retrieves the values for rgb bits in the color buffer."
      end

      operation 11397388 "SetAttribs"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "attrib_list" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} ${p0}[]${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} ${p0}[]${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetAttribs() sets the values for each attribute in
/ <code>attrib_list</code>. The list has the same structure as the list
/ used in the constructors.
/
/ Attributes that can be specified are:
/ - PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR
/
/ On failure the following error codes may be returned:
/ - PP_ERROR_BADRESOURCE if context is invalid.
/ - PP_ERROR_BADARGUMENT if attrib_list is NULL or any attribute in the
/   attrib_list is not a valid attribute."
      end

      operation 11397516 "ResizeBuffers"
	public return_type class_ref 2409996 // int32_t
	nparams 2
	  param in name "width" type class_ref 2409996 // int32_t
	  param in name "height" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ ResizeBuffers() resizes the backing surface for the context.
/
/ @param[in] width The width of the backing surface.
/ @param[in] height The height of the backing surface.
/
/ @return An int32_t containing <code>PP_ERROR_BADRESOURCE</code> if
/ context is invalid or <code>PP_ERROR_BADARGUMENT</code> if the value
/ specified for width or height is less than zero.
/ <code>PP_ERROR_NOMEMORY</code> might be returned on the next
/ SwapBuffers() callback if the surface could not be resized due to
/ insufficient resources."
      end

      operation 11397644 "SwapBuffers"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SwapBuffers() makes the contents of the color buffer available for
/ compositing. This function has no effect on off-screen surfaces: surfaces
/ not bound to any module instance. The contents of ancillary buffers are
/ always undefined after calling SwapBuffers(). The contents of the color
/ buffer are undefined if the value of the
/ <code>PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR</code> attribute of context is
/ not <code>PP_GRAPHICS3DATTRIB_BUFFER_PRESERVED</code>.
/
/ SwapBuffers() runs in asynchronous mode. Specify a callback function and
/ the argument for that callback function. The callback function will be
/ executed on the calling thread after the color buffer has been composited
/ with rest of the html page. While you are waiting for a SwapBuffers()
/ callback, additional calls to SwapBuffers() will fail.
/
/ Because the callback is executed (or thread unblocked) only when the
/ instance's current state is actually on the screen, this function
/ provides a way to rate limit animations. By waiting until the image is on
/ the screen before painting the next frame, you can ensure you're not
/ generating updates faster than the screen can be updated.
/
/ SwapBuffers() performs an implicit flush operation on context.
/ If the context gets into an unrecoverable error condition while
/ processing a command, the error code will be returned as the argument
/ for the callback. The callback may return the following error codes:
/
/ <code>PP_ERROR_NOMEMORY</code>
/ <code>PP_ERROR_CONTEXT_LOST</code>
/
/ Note that the same error code may also be obtained by calling GetError().
/
/ param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion of SwapBuffers().
/
/ @return An int32_t containing <code>PP_ERROR_BADRESOURCE</code> if
/ context is invalid or <code>PP_ERROR_BADARGUMENT</code> if callback is
/ invalid."
      end
    end

    class 2792588 "Graphics3DClient"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This class provides a C++ interface for callbacks related to 3D. You
 would normally use multiple inheritance to derive from this class in your
 instance."
      operation 11397772 "Graphics3DClient"
	public explicit_return_type ""
	nparams 1
	  param inout name "instance" type class_ref 2792716 // Instance
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/
/ A constructor for creating a Graphics3DClient.
/
/ @param[in] instance The instance that will own the new
/ <code>Graphics3DClient</code>."
      end

      operation 11397900 "~Graphics3DClient"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11398028 "Graphics3DContextLost"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Graphics3DContextLost() is a notification that the context was lost for
/ the 3D devices."
      end

      classrelation 5224460 // associated_instance_ (<directional composition>)
	relation 5224332 *-->
	  a role_name "associated_instance_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5224460 // associated_instance_ (<directional composition>)
	  b parent class_ref 2790028 // InstanceHandle
      end
    end

    class 2792716 "Instance"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 11403916 "Instance"
	public explicit_return_type ""
	nparams 1
	  param in name "instance" type class_ref 2740108 // PP_Instance
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor. Construction of an instance should only be done in
/ response to a browser request in <code>Module::CreateInstance</code>.
/ Otherwise, the instance will lack the proper bookkeeping in the browser
/ and in the C++ wrapper.
/
/ Init() will be called immediately after the constructor. This allows you
/ to perform initialization tasks that can fail and to report that failure
/ to the browser."
      end

      operation 11404044 "~Instance"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Destructor. When the instance is removed from the web page,
/ the <code>pp::Instance</code> object will be deleted. You should never
/ delete the <code>Instance</code> object yourself since the lifetime is
/ handled by the C++ wrapper and is controlled by the browser's calls to
/ the <code>PPP_Instance</code> interface.
/
/ The <code>PP_Instance</code> identifier will still be valid during this
/ call so the instance can perform cleanup-related tasks. Once this function
/ returns, the <code>PP_Instance</code> handle will be invalid. This means
/ that you can't do any asynchronous operations such as network requests or
/ file writes from this destructor since they will be immediately canceled.
/
/ <strong>Note:</strong> This function may be skipped in certain
/ call so the instance can perform cleanup-related tasks. Once this function
/ returns, the <code>PP_Instance</code> handle will be invalid. This means
/ that you can't do any asynchronous operations such as network requests or
/ file writes from this destructor since they will be immediately canceled."
      end

      operation 11404172 "pp_instance"
	const cpp_inline public return_type class_ref 2740108 // PP_Instance
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return pp_instance_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function returns the <code>PP_Instance</code> identifying this
/ object.
/
/ @return A <code>PP_Instance</code> identifying this object."
      end

      operation 11404300 "Init"
	cpp_virtual public return_type class_ref 2322828 // bool
	nparams 3
	  param in name "argc" type class_ref 2345996 // uint32_t
	  param in name "argn" explicit_type "char"
	  param in name "argv" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} * ${p1}[]${v1}, const ${t2} * ${p2}[]${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} * ${p1}[], const ${t2} * ${p2}[]${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Init() initializes this instance with the provided arguments. This
/ function will be called immediately after the instance object is
/ constructed.
/
/ @param[in] argc The number of arguments contained in <code>argn</code>
/ and <code>argv</code>.
/
/ @param[in] argn An array of argument names.  These argument names are
/ supplied in the \\<embed\\> tag, for example:
/ <code>\\<embed id=\"nacl_module\" dimensions=\"2\"\\></code> will produce two
/ argument names: \"id\" and \"dimensions\".
/
/ @param[in] argv An array of argument values.  These are the values of the
/ arguments listed in the \\<embed\\> tag, for example
/ <code>\\<embed id=\"nacl_module\" dimensions=\"2\"\\></code> will produce two
/ argument values: \"nacl_module\" and \"2\".  The indices of these values
/ match the indices of the corresponding names in <code>argn</code>.
/
/ @return true on success. Returning false causes the instance to be
/ deleted and no other functions to be called."
      end

      operation 11404428 "DidChangeView"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "view" type class_ref 2793740 // View
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @{
/ @name PPP_Instance methods for the module to override:
/ DidChangeView() is called when the view information for the Instance
/ has changed. See the <code>View</code> object for information.
/
/ Most implementations will want to check if the size and user visibility
/ changed, and either resize themselves or start/stop generating updates.
/
/ You should not call the default implementation. For
/ backwards-compatibility, it will call the deprecated version of
/ DidChangeView below."
      end

      operation 11404556 "DidChangeView"
	cpp_virtual public explicit_return_type "void"
	nparams 2
	  param in name "position" type class_ref 2792332 // Rect
	  param in name "clip" type class_ref 2792332 // Rect
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Deprecated backwards-compatible version of <code>DidChangeView()</code>.
/ New code should derive from the version that takes a
/ <code>ViewChanged</code> object rather than this version. This function
/ is called by the default implementation of the newer
/ <code>DidChangeView</code> function for source compatibility with older
/ code.
/
/ A typical implementation will check the size of the <code>position</code>
/ argument and reallocate the graphics context when a different size is
/ received. Note that this function will be called for scroll events where
/ the size doesn't change, so you should always check that the size is
/ actually different before doing any reallocations.
/
/ @param[in] position The location on the page of the instance. The
/ position is relative to the top left corner of the viewport, which changes
/ as the page is scrolled. Generally the size of this value will be used to
/ create a graphics device, and the position is ignored (most things are
/ relative to the instance so the absolute position isn't useful in most
/ cases).
/
/ @param[in] clip The visible region of the instance. This is relative to
/ the top left of the instance's coordinate system (not the page).  If the
/ instance is invisible, <code>clip</code> will be (0, 0, 0, 0).
/
/ It's recommended to check for invisible instances and to stop
/ generating graphics updates in this case to save system resources. It's
/ not usually worthwhile, however, to generate partial updates according to
/ the clip when the instance is partially visible. Instead, update the
/ entire region. The time saved doing partial paints is usually not
/ significant and it can create artifacts when scrolling (this notification
/ is sent asynchronously from scolling so there can be flashes of old
/ content in the exposed regions)."
      end

      operation 11404684 "DidChangeFocus"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "has_focus" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ DidChangeFocus() is called when an instance has gained or lost focus.
/ Having focus means that keyboard events will be sent to the instance.
/ An instance's default condition is that it will not have focus.
/
/ The focus flag takes into account both browser tab and window focus as
/ well as focus of the plugin element on the page. In order to be deemed
/ to have focus, the browser window must be topmost, the tab must be
/ selected in the window, and the instance must be the focused element on
/ the page.
/
/ <strong>Note:</strong>Clicks on instances will give focus only if you
/ handle the click event. Return <code>true</code> from
/ <code>HandleInputEvent</code> in <code>PPP_InputEvent</code> (or use
/ unfiltered events) to signal that the click event was handled. Otherwise,
/ the browser will bubble the event and give focus to the element on the
/ page that actually did end up consuming it. If you're not getting focus,
/ check to make sure you're either requesting them via
/ <code>RequestInputEvents()<code> (which implicitly marks all input events
/ as consumed) or via <code>RequestFilteringInputEvents()</code> and
/ returning true from your event handler.
/
/ @param[in] has_focus Indicates the new focused state of the instance."
      end

      operation 11404812 "HandleInputEvent"
	cpp_virtual public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "event" type class_ref 2792844 // InputEvent
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ HandleInputEvent() handles input events from the browser. The default
/ implementation does nothing and returns false.
/
/ In order to receive input events, you must register for them by calling
/ RequestInputEvents() or RequestFilteringInputEvents(). By
/ default, no events are delivered.
/
/ If the event was handled, it will not be forwarded to the web page or
/ browser. If it was not handled, it will bubble according to the normal
/ rules. So it is important that an instance respond accurately with whether
/ event propagation should continue.
/
/ Event propagation also controls focus. If you handle an event like a mouse
/ event, typically the instance will be given focus. Returning false from
/ a filtered event handler or not registering for an event type means that
/ the click will be given to a lower part of the page and your instance will
/ not receive focus. This allows an instance to be partially transparent,
/ where clicks on the transparent areas will behave like clicks to the
/ underlying page.
/
/ In general, you should try to keep input event handling short. Especially
/ for filtered input events, the browser or page may be blocked waiting for
/ you to respond.
/
/ The caller of this function will maintain a reference to the input event
/ resource during this call. Unless you take a reference to the resource
/ to hold it for later, you don't need to release it.
/
/ <strong>Note: </strong>If you're not receiving input events, make sure
/ you register for the event classes you want by calling
/ <code>RequestInputEvents</code> or
/ <code>RequestFilteringInputEvents</code>. If you're still not receiving
/ keyboard input events, make sure you're returning true (or using a
/ non-filtered event handler) for mouse events. Otherwise, the instance will
/ not receive focus and keyboard events will not be sent.
/
/ Refer to <code>RequestInputEvents</code> and
/ <code>RequestFilteringInputEvents</code> for further information.
/
/ @param[in] event The event to handle.
/
/ @return true if the event was handled, false if not. If you have
/ registered to filter this class of events by calling
/ <code>RequestFilteringInputEvents</code>, and you return false,
/ the event will be forwarded to the page (and eventually the browser)
/ for the default handling. For non-filtered events, the return value
/ will be ignored."
      end

      operation 11404940 "HandleDocumentLoad"
	cpp_virtual public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "url_loader" type class_ref 2793868 // URLLoader
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ HandleDocumentLoad() is called after Init() for a full-frame
/ instance that was instantiated based on the MIME type of a DOMWindow
/ navigation. This situation only applies to modules that are
/ pre-registered to handle certain MIME types. If you haven't specifically
/ registered to handle a MIME type or aren't positive this applies to you,
/ your implementation of this function can just return false.
/
/ The given url_loader corresponds to a <code>URLLoader</code> object that
/ is already opened. Its response headers may be queried using
/ GetResponseInfo(). If you want to use the <code>URLLoader</code> to read
/ data, you will need to save a copy of it or the underlying resource will
/ be freed when this function returns and the load will be canceled.
/
/ This method returns false if the module cannot handle the data. In
/ response to this method, the module should call ReadResponseBody() to read
/ the incoming data.
/
/ @param[in] url_loader An open <code>URLLoader</code> instance.
/
/ @return true if the data was handled, false otherwise."
      end

      operation 11405068 "HandleMessage"
	cpp_virtual public explicit_return_type "void"
	nparams 1
	  param in name "message" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ HandleMessage() is a function that the browser calls when PostMessage()
/ is invoked on the DOM element for the instance in JavaScript. Note
/ that PostMessage() in the JavaScript interface is asynchronous, meaning
/ JavaScript execution will not be blocked while HandleMessage() is
/ processing the message.
/
/ <strong>Example:</strong>
/
/ The following JavaScript code invokes <code>HandleMessage</code>, passing
/ the instance on which it was invoked, with <code>message</code> being a
/ string <code>Var</code> containing \"Hello world!\"
/
/ <code>
/
/ <body>
/   <object id=\"plugin\"
/           type=\"application/x-ppapi-postMessage-example\"/>
/   <script type=\"text/javascript\">
/     document.getElementById('plugin').postMessage(\"Hello world!\");
/   </script>
/ </body>
/
/ </code>
/
/ Refer to PostMessage() for sending messages to JavaScript.
/
/ @param[in] message A <code>Var</code> containing the data sent from
/ JavaScript. Message can have an int32_t, double, bool, or string value
/ (objects are not supported)."
      end

      operation 11405196 "BindGraphics"
	public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "graphics" type class_ref 2791948 // Graphics2D
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @}
/ @{
/ @name PPB_Instance methods for querying the browser:
/ BindGraphics() binds the given graphics as the current display surface.
/ The contents of this device is what will be displayed in the instance's
/ area on the web page. The device must be a 2D or a 3D device.
/
/ You can pass an <code>is_null()</code> (default constructed) Graphics2D
/ as the device parameter to unbind all devices from the given instance.
/ The instance will then appear transparent. Re-binding the same device
/ will return <code>true</code> and will do nothing.
/
/ Any previously-bound device will be released. It is an error to bind
/ a device when it is already bound to another instance. If you want
/ to move a device between instances, first unbind it from the old one, and
/ then rebind it to the new one.
/
/ Binding a device will invalidate that portion of the web page to flush the
/ contents of the new device to the screen.
/
/ @param[in] graphics A <code>Graphics2D</code> to bind.
/
/ @return true if bind was successful or false if the device was not the
/ correct type. On success, a reference to the device will be held by the
/ instance, so the caller can release its reference if it chooses."
      end

      operation 11405324 "BindGraphics"
	public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "graphics" type class_ref 2792460 // Graphics3D
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Binds the given Graphics3D as the current display surface.
/ Refer to <code>BindGraphics(const Graphics2D& graphics)</code> for
/ further information.
/
/ @param[in] graphics A <code>Graphics3D</code> to bind.
/
/ @return true if bind was successful or false if the device was not the
/ correct type. On success, a reference to the device will be held by the
/ instance, so the caller can release its reference if it chooses."
      end

      operation 11405452 "IsFullFrame"
	public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ IsFullFrame() determines if the instance is full-frame (repr).
/ Such an instance represents the entire document in a frame rather than an
/ embedded resource. This can happen if the user does a top-level
/ navigation or the page specifies an iframe to a resource with a MIME
/ type registered by the module.
/
/ @return true if the instance is full-frame, false if not."
      end

      operation 11405580 "RequestInputEvents"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "event_classes" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ RequestInputEvents() requests that input events corresponding to the
/ given input events are delivered to the instance.
/
/ By default, no input events are delivered. Call this function with the
/ classes of events you are interested in to have them be delivered to
/ the instance. Calling this function will override any previous setting for
/ each specified class of input events (for example, if you previously
/ called RequestFilteringInputEvents(), this function will set those events
/ to non-filtering mode).
/
/ Input events may have high overhead, so you should only request input
/ events that your plugin will actually handle. For example, the browser may
/ do optimizations for scroll or touch events that can be processed
/ substantially faster if it knows there are no non-default receivers for
/ that message. Requesting that such messages be delivered, even if they are
/ processed very quickly, may have a noticable effect on the performance of
/ the page.
/
/ When requesting input events through this function, the events will be
/ delivered and <em>not</em> bubbled to the page. This means that even if
/ you aren't interested in the message, no other parts of the page will get
/ the message.
/
/ <strong>Example:</strong>
/
/ <code>
/   RequestInputEvents(PP_INPUTEVENT_CLASS_MOUSE);
/   RequestFilteringInputEvents(
/       PP_INPUTEVENT_CLASS_WHEEL | PP_INPUTEVENT_CLASS_KEYBOARD);
/
/ </code>
/
/ @param event_classes A combination of flags from
/ <code>PP_InputEvent_Class</code> that identifies the classes of events
/ the instance is requesting. The flags are combined by logically ORing
/ their values.
/
/ @return <code>PP_OK</code> if the operation succeeded,
/ <code>PP_ERROR_BADARGUMENT</code> if instance is invalid, or
/ <code>PP_ERROR_NOTSUPPORTED</code> if one of the event class bits were
/ illegal. In the case of an invalid bit, all valid bits will be applied
/ and only the illegal bits will be ignored."
      end

      operation 11405708 "RequestFilteringInputEvents"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "event_classes" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ RequestFilteringInputEvents() requests that input events corresponding
/ to the given input events are delivered to the instance for filtering.
/
/ By default, no input events are delivered. In most cases you would
/ register to receive events by calling RequestInputEvents(). In some cases,
/ however, you may wish to filter events such that they can be bubbled up
/ to the DOM. In this case, register for those classes of events using
/ this function instead of RequestInputEvents(). Keyboard events must always
/ be registered in filtering mode.
/
/ Filtering input events requires significantly more overhead than just
/ delivering them to the instance. As such, you should only request
/ filtering in those cases where it's absolutely necessary. The reason is
/ that it requires the browser to stop and block for the instance to handle
/ the input event, rather than sending the input event asynchronously. This
/ can have significant overhead.
/
/ <strong>Example:</strong>
/
/ <code>
/
/   RequestInputEvents(PP_INPUTEVENT_CLASS_MOUSE);
/   RequestFilteringInputEvents(
/       PP_INPUTEVENT_CLASS_WHEEL | PP_INPUTEVENT_CLASS_KEYBOARD);
/
/ </code>
/
/ @param event_classes A combination of flags from
/ <code>PP_InputEvent_Class</code> that identifies the classes of events
/ the instance is requesting. The flags are combined by logically ORing
/ their values.
/
/ @return <code>PP_OK</code> if the operation succeeded,
/ <code>PP_ERROR_BADARGUMENT</code> if instance is invalid, or
/ <code>PP_ERROR_NOTSUPPORTED</code> if one of the event class bits were
/ illegal. In the case of an invalid bit, all valid bits will be applied
/ and only the illegal bits will be ignored."
      end

      operation 11405836 "ClearInputEventRequest"
	public explicit_return_type "void"
	nparams 1
	  param in name "event_classes" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ ClearInputEventRequest() requests that input events corresponding to the
/ given input classes no longer be delivered to the instance.
/
/ By default, no input events are delivered. If you have previously
/ requested input events using RequestInputEvents() or
/ RequestFilteringInputEvents(), this function will unregister handling
/ for the given instance. This will allow greater browser performance for
/ those events.
/
/ <strong>Note: </strong> You may still get some input events after
/ clearing the flag if they were dispatched before the request was cleared.
/ For example, if there are 3 mouse move events waiting to be delivered,
/ and you clear the mouse event class during the processing of the first
/ one, you'll still receive the next two. You just won't get more events
/ generated.
/
/ @param[in] event_classes A combination of flags from
/ <code>PP_InputEvent_Class</code> that identifies the classes of events the
/ instance is no longer interested in."
      end

      operation 11405964 "PostMessage"
	public explicit_return_type "void"
	nparams 1
	  param in name "message" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ PostMessage() asynchronously invokes any listeners for message events on
/ the DOM element for the given instance. A call to PostMessage() will
/ not block while the message is processed.
/
/ <strong>Example:</strong>
/
/ <code>
/
/ <body>
/   <object id=\"plugin\"
/           type=\"application/x-ppapi-postMessage-example\"/>
/   <script type=\"text/javascript\">
/     var plugin = document.getElementById('plugin');
/     plugin.addEventListener(\"message\",
/                             function(message) { alert(message.data); },
/                             false);
/   </script>
/ </body>
/
/ </code>
/
/ The instance then invokes PostMessage() as follows:
/
/ <code>
/
/  PostMessage(pp::Var(\"Hello world!\"));
/
/ </code>
/
/ The browser will pop-up an alert saying \"Hello world!\"
/
/ Listeners for message events in JavaScript code will receive an object
/ conforming to the HTML 5 <code>MessageEvent</code> interface.
/ Specifically, the value of message will be contained as a property called
/ data in the received <code>MessageEvent</code>.
/
/ This messaging system is similar to the system used for listening for
/ messages from Web Workers. Refer to
/ <code>http://www.whatwg.org/specs/web-workers/current-work/</code> for
/ further information.
/
/ Refer to HandleMessage() for receiving events from JavaScript.
/
/ @param[in] message A <code>Var</code> containing the data to be sent to
/ JavaScript. Message can have a numeric, boolean, or string value; arrays
/ and dictionaries are not yet supported. Ref-counted var types are copied,
/ and are therefore not shared between the instance and the browser."
      end

      operation 11406092 "LogToConsole"
	public explicit_return_type "void"
	nparams 2
	  param in name "level" type class_ref 2742668 // PP_LogLevel
	  param in name "value" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @}
/ @{
/ @name PPB_Console methods for logging to the console:
/ Logs the given message to the JavaScript console associated with the
/ given plugin instance with the given logging level. The name of the plugin
/ issuing the log message will be automatically prepended to the message.
/ The value may be any type of Var."
      end

      operation 11406220 "LogToConsoleWithSource"
	public explicit_return_type "void"
	nparams 3
	  param in name "level" type class_ref 2742668 // PP_LogLevel
	  param in name "source" type class_ref 2789260 // Var
	  param in name "value" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Logs a message to the console with the given source information rather
/ than using the internal PPAPI plugin name. The name must be a string var.
/
/ The regular log function will automatically prepend the name of your
/ plugin to the message as the \"source\" of the message. Some plugins may
/ wish to override this. For example, if your plugin is a Python
/ interpreter, you would want log messages to contain the source .py file
/ doing the log statement rather than have \"python\" show up in the console."
      end

      operation 11406348 "AddPerInstanceObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "interface_name" explicit_type "std::string"
	  param inout name "object" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @}
/ AddPerInstanceObject() associates an instance with an interface,
/ creating an object.
/
/ Many optional interfaces are associated with a plugin instance. For
/ example, the find in PPP_Find interface receives updates on a per-instance
/ basis. This \"per-instance\" tracking allows such objects to associate
/ themselves with an instance as \"the\" handler for that interface name.
/
/ In the case of the find example, the find object registers with its
/ associated instance in its constructor and unregisters in its destructor.
/ Then whenever it gets updates with a PP_Instance parameter, it can
/ map back to the find object corresponding to that given PP_Instance by
/ calling GetPerInstanceObject.
/
/ This lookup is done on a per-interface-name basis. This means you can
/ only have one object of a given interface name associated with an
/ instance.
/
/ If you are adding a handler for an additional interface, be sure to
/ register with the module (AddPluginInterface) for your interface name to
/ get the C calls in the first place.
/
/ Refer to RemovePerInstanceObject() and GetPerInstanceObject() for further
/ information.
/
/ @param[in] interface_name The name of the interface to associate with the
/ instance
/ @param[in] object"
      end

      operation 11406476 "RemovePerInstanceObject"
	public explicit_return_type "void"
	nparams 2
	  param in name "interface_name" explicit_type "std::string"
	  param inout name "object" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " {PENDING: summarize Remove method here}
/
/ Refer to AddPerInstanceObject() for further information.
/
/ @param[in] interface_name The name of the interface to associate with the
/ instance
/ @param[in] object"
      end

      operation 11406604 "RemovePerInstanceObject"
	class_operation public explicit_return_type "void"
	nparams 3
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "interface_name" explicit_type "std::string"
	  param inout name "object" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}, ${t2} * ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}, ${t2} * ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Static version of AddPerInstanceObject that takes an InstanceHandle. As
/ with all other instance functions, this must only be called on the main
/ thread."
      end

      operation 11406732 "GetPerInstanceObject"
	class_operation public explicit_return_type "void"
	nparams 2
	  param in name "instance" type class_ref 2740108 // PP_Instance
	  param in name "interface_name" explicit_type "std::string"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Look up an object previously associated with an instance. Returns NULL
/ if the instance is invalid or there is no object for the given interface
/ name on the instance.
/
/ Refer to AddPerInstanceObject() for further information.
/
/ @param[in] instance
/ @param[in] interface_name The name of the interface to associate with the
/ instance."
      end

      classrelation 5225484 // pp_instance_ (<directional composition>)
	relation 5225356 *-->
	  a role_name "pp_instance_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5225484 // pp_instance_ (<directional composition>)
	  b parent class_ref 2740108 // PP_Instance
      end

      class 2793996 "InterfaceNameToObjectMap"
	visibility package stereotype "typedef" explicit_base_type "std::map<std::string, void*>"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 5225612 // interface_name_to_objects_ (<directional composition>)
	relation 5225484 *-->
	  a role_name "interface_name_to_objects_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5225612 // interface_name_to_objects_ (<directional composition>)
	  b parent class_ref 2793996 // InterfaceNameToObjectMap
      end
    end

    class 2792844 "InputEvent"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ This class represents an input event resource. Normally you will get passed
/ this object through the HandleInputEvent() function on the
/ <code>Instance</code> object.
/
/ Typically you would check the type of the event and then create the
/ appropriate event-specific object to query the properties.
/
/ <strong>Example:</strong>
/ <code>
/
/ bool MyInstance::HandleInputEvent(const pp::InputEvent& event) {
/   switch (event.GetType()) {
/     case PP_INPUTEVENT_TYPE_MOUSE_DOWN {
/       pp::MouseInputEvent mouse_event(event);
/       return HandleMouseDown(mouse_event.GetMousePosition());
/     }
/     default:
/       return false;
/ }
/
/ </code>"
      classrelation 5224844 // <generalisation>
	relation 5224716 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5224844 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11399948 "InputEvent"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor that creates an is_null() InputEvent object."
      end

      operation 11400076 "InputEvent"
	public explicit_return_type ""
	nparams 1
	  param in name "input_event_resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ This constructor constructs an input event from the provided input event
/ resource ID. The InputEvent object will be is_null() if the given
/ resource is not a valid input event.
/
/ @param[in] input_event_resource A input event resource ID."
      end

      operation 11400204 "~InputEvent"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 11400332 "GetType"
	const public return_type class_ref 2746124 // PP_InputEvent_Type
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetType() returns the type of input event for this input event
/ object.
/
/ @return A <code>PP_InputEvent_Type</code> if successful,
/ PP_INPUTEVENT_TYPE_UNDEFINED if the resource is invalid."
      end

      operation 11400460 "GetTimeStamp"
	const public return_type class_ref 2740876 // PP_TimeTicks
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetTimeStamp() returns the time that the event was generated. The time
/ will be before the current time since processing and dispatching the
/ event has some overhead. Use this value to compare the times the user
/ generated two events without being sensitive to variable processing time.
/
/ The return value is in time ticks, which is a monotonically increasing
/ clock not related to the wall clock time. It will not change if the user
/ changes their clock or daylight savings time starts, so can be reliably
/ used to compare events. This means, however, that you can't correlate
/ event times to a particular time of day on the system clock.
/
/ @return A <code>PP_TimeTicks</code> containing the time the event was
/ generated."
      end

      operation 11400588 "GetModifiers"
	const public return_type class_ref 2345996 // uint32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetModifiers() returns a bitfield indicating which modifiers were down
/ at the time of the event. This is a combination of the flags in the
/ <code>PP_InputEvent_Modifier</code> enum.
/
/ @return The modifiers associated with the event, or 0 if the given
/ resource is not a valid event resource."
      end
    end

    class 2792972 "MouseInputEvent"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ This class handles mouse events."
      classrelation 5224972 // <generalisation>
	relation 5224844 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5224972 // <generalisation>
	  b parent class_ref 2792844 // InputEvent
      end

      operation 11400716 "MouseInputEvent"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructs an is_null() mouse input event object."
      end

      operation 11400844 "MouseInputEvent"
	public explicit_return_type ""
	nparams 1
	  param in name "event" type class_ref 2792844 // InputEvent
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ This constructor constructs a mouse input event object from the provided
/ generic input event. If the given event is itself is_null() or is not
/ a mouse input event, the mouse object will be is_null().
/
/ @param event An <code>InputEvent</code>."
      end

      operation 11400972 "MouseInputEvent"
	public explicit_return_type ""
	nparams 8
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "type" type class_ref 2746124 // PP_InputEvent_Type
	  param in name "time_stamp" type class_ref 2740876 // PP_TimeTicks
	  param in name "modifiers" type class_ref 2345996 // uint32_t
	  param in name "mouse_button" type class_ref 2739852 // PP_InputEvent_MouseButton
	  param in name "mouse_position" type class_ref 2792204 // Point
	  param in name "click_count" type class_ref 2409996 // int32_t
	  param in name "mouse_movement" type class_ref 2792204 // Point
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, const ${t5} & ${p5}${v5}, ${t6} ${p6}${v6}, const ${t7} & ${p7}${v7}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, const ${t5} & ${p5}, ${t6} ${p6}, const ${t7} & ${p7}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ This constructor manually constructs a mouse event from the provided
/ parameters.
/
/ @param[in] instance The instance for which this event occured.
/
/ @param[in] type A <code>PP_InputEvent_Type</code> identifying the type of
/ input event.
/
/ @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time
/ when the event occured.
/
/ @param[in] modifiers A bit field combination of the
/ <code>PP_InputEvent_Modifier</code> flags.
/
/ @param[in] mouse_button The button that changed for mouse down or up
/ events. This value will be <code>PP_EVENT_MOUSEBUTTON_NONE</code> for
/ mouse move, enter, and leave events.
/
/ @param[in] mouse_position A <code>Point</code> containing the x and y
/ position of the mouse when the eent occurred.
/
/ @param[in] click_count
 TODO(brettw) figure out exactly what this means.
/
/ @param[in] mouse_movement The change in position of the mouse."
      end

      operation 11401100 "GetButton"
	const public return_type class_ref 2739852 // PP_InputEvent_MouseButton
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetButton() returns the mouse position for a mouse input event.
/
/ @return The mouse button associated with mouse down and up events. This
/ value will be PP_EVENT_MOUSEBUTTON_NONE for mouse move, enter, and leave
/ events, and for all non-mouse events."
      end

      operation 11401228 "GetPosition"
	const public return_type class_ref 2792204 // Point
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetPosition() returns the pixel location of a mouse input event. When
/ the mouse is locked, it returns the last known mouse position just as
/ mouse lock was entered.
/
/ @return The point associated with the mouse event, relative to the upper-
/ left of the instance receiving the event. These values can be negative for
/ mouse drags. The return value will be (0, 0) for non-mouse events."
      end

      operation 11401356 "GetClickCount"
	const public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " TODO(brettw) figure out exactly what this means."
      end

      operation 11401484 "GetMovement"
	const public return_type class_ref 2792204 // Point
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Returns the change in position of the mouse. When the mouse is locked,
/ although the mouse position doesn't actually change, this function
/ still provides movement information, which indicates what the change in
/ position would be had the mouse not been locked.
/
/ @return The change in position of the mouse, relative to the previous
/ position."
      end
    end

    class 2793100 "WheelInputEvent"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5225100 // <generalisation>
	relation 5224972 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5225100 // <generalisation>
	  b parent class_ref 2792844 // InputEvent
      end

      operation 11401612 "WheelInputEvent"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructs an is_null() wheel input event object."
      end

      operation 11401740 "WheelInputEvent"
	public explicit_return_type ""
	nparams 1
	  param in name "event" type class_ref 2792844 // InputEvent
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ This constructor constructs a wheel input event object from the
/ provided generic input event. If the given event is itself
/ is_null() or is not a wheel input event, the wheel object will be
/ is_null().
/
/ @param[in] event A generic input event."
      end

      operation 11401868 "WheelInputEvent"
	public explicit_return_type ""
	nparams 6
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "time_stamp" type class_ref 2740876 // PP_TimeTicks
	  param in name "modifiers" type class_ref 2345996 // uint32_t
	  param in name "wheel_delta" type class_ref 2793228 // FloatPoint
	  param in name "wheel_ticks" type class_ref 2793228 // FloatPoint
	  param in name "scroll_by_page" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}, const ${t4} & ${p4}${v4}, ${t5} ${p5}${v5}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, const ${t3} & ${p3}, const ${t4} & ${p4}, ${t5} ${p5}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructs a wheel input even from the given parameters.
/
/ @param[in] instance The instance for which this event occured.
/
/ @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time
/ when the event occured.
/
/ @param[in] modifiers A bit field combination of the
/ <code>PP_InputEvent_Modifier</code> flags.
/
/ @param[in] wheel_delta The scroll wheel's horizontal and vertical scroll
/ amounts.
/
/ @param[in] wheel_ticks The number of \"clicks\" of the scroll wheel that
/ have produced the event.
/
/ @param[in] scroll_by_page When true, the user is requesting to scroll
/ by pages. When false, the user is requesting to scroll by lines."
      end

      operation 11401996 "GetDelta"
	const public return_type class_ref 2793228 // FloatPoint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetDelta() returns the amount vertically and horizontally the user has
/ requested to scroll by with their mouse wheel. A scroll down or to the
/ right (where the content moves up or left) is represented as positive
/ values, and a scroll up or to the left (where the content moves down or
/ right) is represented as negative values.
/
/ This amount is system dependent and will take into account the user's
/ preferred scroll sensitivity and potentially also nonlinear acceleration
/ based on the speed of the scrolling.
/
/ Devices will be of varying resolution. Some mice with large detents will
/ only generate integer scroll amounts. But fractional values are also
/ possible, for example, on some trackpads and newer mice that don't have
/ \"clicks\".
/
/ @return The vertial and horizontal scroll values. The units are either in
/ pixels (when scroll_by_page is false) or pages (when scroll_by_page is
/ true). For example, y = -3 means scroll up 3 pixels when scroll_by_page
/ is false, and scroll up 3 pages when scroll_by_page is true."
      end

      operation 11402124 "GetTicks"
	const public return_type class_ref 2793228 // FloatPoint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetTicks() returns the number of \"clicks\" of the scroll wheel
/ that have produced the event. The value may have system-specific
/ acceleration applied to it, depending on the device. The positive and
/ negative meanings are the same as for GetDelta().
/
/ If you are scrolling, you probably want to use the delta values.  These
/ tick events can be useful if you aren't doing actual scrolling and don't
/ want or pixel values. An example may be cycling between different items in
/ a game.
/
/ @return The number of \"clicks\" of the scroll wheel. You may receive
/ fractional values for the wheel ticks if the mouse wheel is high
/ resolution or doesn't have \"clicks\". If your program wants discrete
/ events (as in the \"picking items\" example) you should accumulate
/ fractional click values from multiple messages until the total value
/ reaches positive or negative one. This should represent a similar amount
/ of scrolling as for a mouse that has a discrete mouse wheel."
      end

      operation 11402252 "GetScrollByPage"
	const public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetScrollByPage() indicates if the scroll delta x/y indicates pages or
/ lines to scroll by.
/
/ @return true if the event is a wheel event and the user is scrolling
/ by pages, false if not or if the resource is not a wheel event."
      end
    end

    class 2793228 "FloatPoint"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ A 2 dimensional floating-point point with 0,0 being the upper-left starting
/ coordinate."
      operation 11415564 "FloatPoint"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
    float_point_.x = 0.0f;
    float_point_.y = 0.0f;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor for a point at 0,0."
      end

      operation 11415692 "FloatPoint"
	cpp_inline public explicit_return_type ""
	nparams 2
	  param in name "in_x" explicit_type "float"
	  param in name "in_y" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw} {
    float_point_.x = in_x;
    float_point_.y = in_y;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor accepting two values for x and y and converting them to a
/ FloatPoint.
/
/ @param[in] in_x An value representing a horizontal coordinate of a
/ point, starting with 0 as the left-most coordinate.
/
/ @param[in] in_y An value representing a vertical coordinate of a point,
/ starting with 0 as the top-most coordinate."
      end

      operation 11415820 "FloatPoint"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "point" type class_ref 2740492 // PP_FloatPoint
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} {  // Implicit.
    float_point_.x = point.x;
    float_point_.y = point.y;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor accepting a pointer to a PP_FloatPoint and converting the
/ PP_Point to a Point. This is an implicit conversion constructor.
/
/ @param[in] point A PP_FloatPoint."
      end

      operation 11415948 "~FloatPoint"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
  };
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11416076 "operator PP_FloatPoint"
	const cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return float_point_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ A function allowing implicit conversion of a FloatPoint to a
/ PP_FloatPoint."
      end

      operation 11416204 "pp_float_point"
	const cpp_inline public return_type class_ref 2740492 // PP_FloatPoint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}const ${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return float_point_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal PP_FloatPoint struct.
/
/ @return A const reference to the internal PP_FloatPoint struct."
      end

      operation 11416332 "pp_float_point"
	cpp_inline public return_type class_ref 2740492 // PP_FloatPoint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return float_point_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the internal PP_Point struct.
/
/ @return A mutable reference to the PP_Point struct."
      end

      operation 11416460 "x"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return float_point_.x; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the value of x.
/
/ @return The value of x for this Point."
      end

      operation 11416588 "set_x"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "in_x" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    float_point_.x = in_x;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of x.
/
/ @param[in] in_x A new x value."
      end

      operation 11416716 "y"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return float_point_.y; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Getter function for returning the value of y.
/
/ @return The value of y for this Point."
      end

      operation 11416844 "set_y"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "in_y" explicit_type "float"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    float_point_.y = in_y;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Setter function for setting the value of y.
/
/ @param[in] in_y A new y value."
      end

      operation 11416972 "operator +"
	const cpp_inline public return_type class_ref 2793228 // FloatPoint
	nparams 1
	  param in name "other" type class_ref 2793228 // FloatPoint
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return FloatPoint(x() + other.x(), y() + other.y());
  };
"
	
	
	
	
	comment "/ Adds two Points (this and other) together by adding their x values and
/ y values.
/
/ @param[in] other A Point.
/
/ @return A new Point containing the result."
      end

      operation 11417100 "operator -"
	const cpp_inline public return_type class_ref 2793228 // FloatPoint
	nparams 1
	  param in name "other" type class_ref 2793228 // FloatPoint
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return FloatPoint(x() - other.x(), y() - other.y());
  };
"
	
	
	
	
	comment "/ Subtracts one Point from another Point by subtracting their x values
/ and y values. Returnes a new point with the result.
/
/ @param[in] other A FloatPoint.
/
/ @return A new Point containing the result."
      end

      operation 11417228 "operator +="
	cpp_inline public return_type class_ref 2793228 // FloatPoint
	nparams 1
	  param in name "other" type class_ref 2793228 // FloatPoint
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    float_point_.x += other.x();
    float_point_.y += other.y();
    return *this;
  };
"
	
	
	
	
	comment "/ Adds two Points (this and other) together by adding their x and y
/ values. Returns this point as the result.
/
/ @param[in] other A Point.
/
/ @return This Point containing the result."
      end

      operation 11417356 "operator -="
	cpp_inline public return_type class_ref 2793228 // FloatPoint
	nparams 1
	  param in name "other" type class_ref 2793228 // FloatPoint
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    float_point_.x -= other.x();
    float_point_.y -= other.y();
    return *this;
  };
"
	
	
	
	
	comment "/ Subtracts one Point from another Point by subtracting their x values
/ and y values. Returns this point as the result.
/
/ @param[in] other A Point.
/
/ @return This Point containing the result."
      end

      operation 11417484 "swap"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "other" type class_ref 2793228 // FloatPoint
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    float x = float_point_.x;
    float y = float_point_.y;
    float_point_.x = other.float_point_.x;
    float_point_.y = other.float_point_.y;
    other.float_point_.x = x;
    other.float_point_.y = y;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Swaps the coordinates of two Points.
/
/ @param[in] other A Point."
      end

      classrelation 5228684 // float_point_ (<directional composition>)
	relation 5228556 *-->
	  a role_name "float_point_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5228684 // float_point_ (<directional composition>)
	  b parent class_ref 2740492 // PP_FloatPoint
      end
    end

    class 2793356 "KeyboardInputEvent"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5225228 // <generalisation>
	relation 5225100 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5225228 // <generalisation>
	  b parent class_ref 2792844 // InputEvent
      end

      operation 11402380 "KeyboardInputEvent"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructs an is_null() keyboard input event object."
      end

      operation 11402508 "KeyboardInputEvent"
	public explicit_return_type ""
	nparams 1
	  param in name "event" type class_ref 2792844 // InputEvent
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructs a keyboard input event object from the provided generic input
/ event. If the given event is itself is_null() or is not a keyboard input
/ event, the keybaord object will be is_null().
/
/ @param[in] event A generic input event."
      end

      operation 11402636 "KeyboardInputEvent"
	public explicit_return_type ""
	nparams 6
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "type" type class_ref 2746124 // PP_InputEvent_Type
	  param in name "time_stamp" type class_ref 2740876 // PP_TimeTicks
	  param in name "modifiers" type class_ref 2345996 // uint32_t
	  param in name "key_code" type class_ref 2345996 // uint32_t
	  param in name "character_text" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}, ${t4} ${p4}${v4}, const ${t5} & ${p5}${v5}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, const ${t5} & ${p5}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructs a keyboard input even from the given parameters.
/
/ @param[in] instance The instance for which this event occured.
/
/ @param[in] type A <code>PP_InputEvent_Type</code> identifying the type of
/ input event.
/
/ @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time
/ when the event occured.
/
/ @param[in]  modifiers A bit field combination of the
/ <code>PP_InputEvent_Modifier</code> flags.
/
/ @param[in] key_code This value reflects the DOM KeyboardEvent
/ <code>keyCode</code> field. Chrome populates this with the Windows-style
/ Virtual Key code of the key.
/
/ @param[in] character_text This value represents the typed character as a
/ UTF-8 string."
      end

      operation 11402764 "GetKeyCode"
	const public return_type class_ref 2345996 // uint32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Returns the DOM keyCode field for the keyboard event.
/ Chrome populates this with the Windows-style Virtual Key code of the key."
      end

      operation 11402892 "GetCharacterText"
	const public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Returns the typed character for the given character event.
/
/ @return A string var representing a single typed character for character
/ input events. For non-character input events the return value will be an
/ undefined var."
      end
    end

    class 2793484 "TouchInputEvent"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5225356 // <generalisation>
	relation 5225228 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5225356 // <generalisation>
	  b parent class_ref 2792844 // InputEvent
      end

      operation 11403020 "TouchInputEvent"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructs an is_null() touch input event object."
      end

      operation 11403148 "TouchInputEvent"
	public explicit_return_type ""
	nparams 1
	  param in name "event" type class_ref 2792844 // InputEvent
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructs a touch input event object from the given generic input event.
/ If the given event is itself is_null() or is not a touch input event, the
/ touch object will be is_null()."
      end

      operation 11403276 "TouchInputEvent"
	public explicit_return_type ""
	nparams 4
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "type" type class_ref 2746124 // PP_InputEvent_Type
	  param in name "time_stamp" type class_ref 2740876 // PP_TimeTicks
	  param in name "modifiers" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructs a touch input even from the given parameters.
/
/ @param[in] instance The instance for which this event occured.
/
/ @param[in] type A <code>PP_InputEvent_Type</code> identifying the type of
/ input event.
/
/ @param[in] time_stamp A <code>PP_TimeTicks</code> indicating the time
/ when the event occured.
/
/ @param[in]  modifiers A bit field combination of the
/ <code>PP_InputEvent_Modifier</code> flags."
      end

      operation 11403404 "AddTouchPoint"
	public explicit_return_type "void"
	nparams 2
	  param in name "list" type class_ref 2747660 // PP_TouchListType
	  param in name "point" type class_ref 2741004 // PP_TouchPoint
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Adds the touch-point to the specified TouchList."
      end

      operation 11403532 "GetTouchCount"
	const public return_type class_ref 2345996 // uint32_t
	nparams 1
	  param in name "list" type class_ref 2747660 // PP_TouchListType
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @return The number of TouchPoints in this TouchList."
      end

      operation 11403660 "GetTouchByIndex"
	const public return_type class_ref 2793612 // TouchPoint
	nparams 2
	  param in name "list" type class_ref 2747660 // PP_TouchListType
	  param in name "index" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @return The TouchPoint at the given index of the given list, or an empty
/ TouchPoint if the index is out of range."
      end

      operation 11403788 "GetTouchById"
	const public return_type class_ref 2793612 // TouchPoint
	nparams 2
	  param in name "list" type class_ref 2747660 // PP_TouchListType
	  param in name "id" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @return The TouchPoint in the given list with the given identifier, or an
/ empty TouchPoint if the list does not contain a TouchPoint with that
/ identifier."
      end
    end

    class 2793612 "TouchPoint"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ Wrapper class for PP_TouchPoint."
      operation 11426060 "TouchPoint"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : touch_point_(PP_MakeTouchPoint()) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11426188 "TouchPoint"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "point" type class_ref 2741004 // PP_TouchPoint
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : touch_point_(point) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11426316 "id"
	const cpp_inline public return_type class_ref 2345996 // uint32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return touch_point_.id; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @return The identifier for this TouchPoint. This corresponds to the order
/ in which the points were pressed. For example, the first point to be
/ pressed has an id of 0, the second has an id of 1, and so on. An id can be
/ reused when a touch point is released.  For example, if two fingers are
/ down, with id 0 and 1, and finger 0 releases, the next finger to be
/ pressed can be assigned to id 0."
      end

      operation 11426444 "position"
	const cpp_inline public return_type class_ref 2793228 // FloatPoint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return pp::FloatPoint(touch_point_.position);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @return The x-y coordinates of this TouchPoint, in DOM coordinate space."
      end

      operation 11426572 "radii"
	const cpp_inline public return_type class_ref 2793228 // FloatPoint
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return pp::FloatPoint(touch_point_.radius); };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @return The elliptical radii, in screen pixels, in the x and y direction
/ of this TouchPoint."
      end

      operation 11426700 "rotation_angle"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return touch_point_.rotation_angle; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @return The angle of rotation of the elliptical model of this TouchPoint
/ from the y-axis."
      end

      operation 11426828 "pressure"
	const cpp_inline public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return touch_point_.pressure; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ @return The pressure applied to this TouchPoint.  This is typically a
/ value between 0 and 1, with 0 indicating no pressure and 1 indicating
/ some maximum pressure, but scaling differs depending on the hardware and
/ the value is not guaranteed to stay within that range."
      end

      classrelation 5229196 // touch_point_ (<directional composition>)
	relation 5229068 *-->
	  a role_name "touch_point_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5229196 // touch_point_ (<directional composition>)
	  b parent class_ref 2741004 // PP_TouchPoint
      end
    end

    class 2793740 "View"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ @file
/ This file defines the API for getting the state of a the view for an
/ instance.
/ This class represents the state of the view for an instance and contains
/ functions for retrieving the current state of that view."
      classrelation 5230220 // <generalisation>
	relation 5230092 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5230220 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11438348 "View"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor for creating an is_null() <code>View</code> object."
      end

      operation 11438476 "View"
	public explicit_return_type ""
	nparams 1
	  param in name "view_resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Creates a View resource, taking and holding an additional reference to
/ the given resource handle."
      end

      operation 11438604 "GetRect"
	const public return_type class_ref 2792332 // Rect
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetRect() retrieves the rectangle of the module instance associated
/ with a view changed notification relative to the upper-left of the browser
/ viewport. This position changes when the page is scrolled.
/
/ The returned rectangle may not be inside the visible portion of the
/ viewport if the module instance is scrolled off the page. Therefore, the
/ position may be negative or larger than the size of the page. The size
/ will always reflect the size of the module were it to be scrolled
/ entirely into view.
/
/ In general, most modules will not need to worry about the position of the
/module instance in the viewport, and only need to use the size.
/
/ @return The rectangle of the instance. The default return value for
/ an invalid View is the empty rectangle."
      end

      operation 11438732 "IsFullscreen"
	const public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ IsFullscreen() returns whether the instance is currently
/ displaying in fullscreen mode.
/
/ @return <code>true</code> if the instance is in full screen mode,
/ or <code>false</code> if it's not or the resource is invalid."
      end

      operation 11438860 "IsVisible"
	const public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ IsVisible() determines whether the module instance might be visible to
/ the user. For example, the Chrome window could be minimized or another
/ window could be over it. In both of these cases, the module instance
/ would not be visible to the user, but IsVisible() will return true.
/
/ Use the result to speed up or stop updates for invisible module
/ instances.
/
/ This function performs the duties of GetRect() (determining whether the
/ module instance is scrolled into view and the clip rectangle is nonempty)
/ and IsPageVisible() (whether the page is visible to the user).
/
/ @return <code>true</code> if the instance might be visible to the
/ user, <code>false</code> if it is definitely not visible."
      end

      operation 11438988 "IsPageVisible"
	const public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ IsPageVisible() determines if the page that contains the module instance
/ is visible. The most common cause of invisible pages is that
/ the page is in a background tab in the browser.
/
/ Most applications should use IsVisible() instead of this function since
/ the module instance could be scrolled off of a visible page, and this
/ function will still return true. However, depending on how your module
/ interacts with the page, there may be certain updates that you may want
/ to perform when the page is visible even if your specific module instance
/ is not visible.
/
/ @return <code>true</code> if the instance might be visible to the
/ user, <code>false</code> if it is definitely not visible."
      end

      operation 11439116 "GetClipRect"
	const public return_type class_ref 2792332 // Rect
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetClipRect() returns the clip rectangle relative to the upper-left corner
/ of the module instance. This rectangle indicates the portions of the
/ module instance that are scrolled into view.
/
/ If the module instance is scrolled off the view, the return value will be
/ (0, 0, 0, 0). This clip rectangle does <i>not</i> take into account page
/ visibility. Therefore, if the module instance is scrolled into view, but
/ the page itself is on a tab that is not visible, the return rectangle will
/ contain the visible rectangle as though the page were visible. Refer to
/ IsPageVisible() and IsVisible() if you want to account for page
/ visibility.
/
/ Most applications will not need to worry about the clip rectangle. The
/ recommended behavior is to do full updates if the module instance is
/ visible, as determined by IsVisible(), and do no updates if it is not
/ visible.
/
/ However, if the cost for computing pixels is very high for your
/ application, or the pages you're targeting frequently have very large
/ module instances with small visible portions, you may wish to optimize
/ further. In this case, the clip rectangle will tell you which parts of
/ the module to update.
/
/ Note that painting of the page and sending of view changed updates
/ happens asynchronously. This means when the user scrolls, for example,
/ it is likely that the previous backing store of the module instance will
/ be used for the first paint, and will be updated later when your
/ application generates new content with the new clip. This may cause
/ flickering at the boundaries when scrolling. If you do choose to do
/ partial updates, you may want to think about what color the invisible
/ portions of your backing store contain (be it transparent or some
/ background color) or to paint a certain region outside the clip to reduce
/ the visual distraction when this happens.
/
/ @return The rectangle representing the visible part of the module
/ instance. If the resource is invalid, the empty rectangle is returned."
      end
    end

    class 2793868 "URLLoader"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ URLLoader provides an API for loading URLs.
/ Refer to <code>ppapi/examples/url_loader/streaming.cc</code>
/ for an example of how to use this class."
      classrelation 5229324 // <generalisation>
	relation 5229196 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5229324 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11426956 "URLLoader"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor for creating an is_null()
/ <code>URLLoader</code> object."
      end

      operation 11427084 "URLLoader"
	public explicit_return_type ""
	nparams 1
	  param in name "resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used when a <code>PP_Resource</code> is provided as a
/ return value whose reference count we need to increment.
/
/ @param[in] resource A <code>PP_Resource</code> corresponding to a
/ <code>URLLoader</code> resource."
      end

      operation 11427212 "URLLoader"
	public explicit_return_type ""
	nparams 1
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used to allocate a new URLLoader in the browser. The
/ resulting object will be <code>is_null</code> if the allocation failed.
/
/ @param[in] instance The instance with which this resource will be
/ associated."
      end

      operation 11427340 "URLLoader"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 2793868 // URLLoader
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The copy constructor for <code>URLLoader</code>.
/
/ @param other A <code>URLLoader</code> to be copied."
      end

      operation 11427468 "Open"
	public return_type class_ref 2409996 // int32_t
	nparams 2
	  param in name "request_info" type class_ref 2798476 // URLRequestInfo
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function begins loading the <code>URLRequestInfo</code>.
/ The operation completes when response headers are received or when an
/ error occurs.  Use GetResponseInfo() to access the response
/ headers.
/
/ @param[in] request_info A <code>URLRequestInfo</code> corresponding to a
/ URLRequestInfo.
/ @param[in] cc A <code>CompletionCallback</code> to run on asynchronous
/ completion of Open(). This callback will run when response
/ headers for the url are received or error occured. This callback
/ will only run if Open() returns <code>PP_OK_COMPLETIONPENDING</code>.
/
/ @return An int32_t containing an error code from
/ <code>pp_errors.h</code>."
      end

      operation 11427596 "FollowRedirect"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function can be invoked to follow a
/ redirect after Open() completed on receiving redirect headers.
/
/ @param[in] cc A <code>CompletionCallback</code> to run on asynchronous
/ completion of FollowRedirect(). This callback will run when response
/ headers for the redirect url are received or error occured. This callback
/ will only run if FollowRedirect() returns
/ <code>PP_OK_COMPLETIONPENDING</code>.
/
/ @return An int32_t containing an error code from
/ <code>pp_errors.h</code>."
      end

      operation 11427724 "GetUploadProgress"
	const public return_type class_ref 2322828 // bool
	nparams 2
	  param inout name "bytes_sent" type class_ref 2603788 // int64_t
	  param inout name "total_bytes_to_be_sent" type class_ref 2603788 // int64_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function returns the current upload progress (which is only
/ meaningful after Open() has been called). Progress only refers to the
/ request body and does not include the headers.
/
/ This data is only available if the <code>URLRequestInfo</code> passed to
/ Open() had the
/ <code>PP_URLREQUESTPROPERTY_REPORTUPLOADPROGRESS</code> property set to
/ <code>PP_TRUE</code>.
/
/ @param[in] bytes_sent The number of bytes sent thus far.
/ @param[in] total_bytes_to_be_sent The total number of bytes to be sent.
/
/ @return true if the upload progress is available, false if it is not
/ available."
      end

      operation 11427852 "GetDownloadProgress"
	const public return_type class_ref 2322828 // bool
	nparams 2
	  param inout name "bytes_received" type class_ref 2603788 // int64_t
	  param inout name "total_bytes_to_be_received" type class_ref 2603788 // int64_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function returns the current download progress, which is meaningful
/ after Open() has been called. Progress only refers to the response body
/ and does not include the headers.
/
/ This data is only available if the <code>URLRequestInfo</code> passed to
/ Open() had the
/ <code>PP_URLREQUESTPROPERTY_REPORTDOWNLOADPROGRESS</code> property set to
/ PP_TRUE.
/
/ @param[in] bytes_received The number of bytes received thus far.
/ @param[in] total_bytes_to_be_received The total number of bytes to be
/ received. The total bytes to be received may be unknown, in which case
/ <code>total_bytes_to_be_received</code> will be set to -1.
/
/ @return true if the download progress is available, false if it is
/ not available."
      end

      operation 11427980 "GetResponseInfo"
	const public return_type class_ref 2798604 // URLResponseInfo
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This is a function that returns the current
/ <code>URLResponseInfo</code> object.
/
/ @return A <code>URLResponseInfo</code> corresponding to the
/ <code>URLResponseInfo</code> if successful, an <code>is_null</code>
/ object if the loader is not a valid resource or if Open() has not been
/ called."
      end

      operation 11428108 "ReadResponseBody"
	public return_type class_ref 2409996 // int32_t
	nparams 3
	  param inout name "buffer" explicit_type "void"
	  param in name "bytes_to_read" type class_ref 2409996 // int32_t
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, ${t1} ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function is used to read the response body. The size of the buffer
/ must be large enough to hold the specified number of bytes to read.
/ This function might perform a partial read.
/
/ @param[in,out] buffer A pointer to the buffer for the response body.
/ @param[in] bytes_to_read The number of bytes to read.
/ @param[in] cc A <code>CompletionCallback</code> to run on asynchronous
/ completion. The callback will run if the bytes (full or partial) are
/ read or an error occurs asynchronously. This callback will run only if
/ this function returns <code>PP_OK_COMPLETIONPENDING</code>.
/
/ @return An int32_t containing the number of bytes read or an error code
/ from <code>pp_errors.h</code>."
      end

      operation 11428236 "FinishStreamingToFile"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function is used to wait for the response body to be completely
/ downloaded to the file provided by the GetBodyAsFileRef() in the current
/ <code>URLResponseInfo</code>. This function is only used if
/ <code>PP_URLREQUESTPROPERTY_STREAMTOFILE</code> was set on the
/ <code>URLRequestInfo</code> passed to Open().
/
/ @param[in] cc A <code>CompletionCallback</code> to run on asynchronous
/ completion. This callback will run when body is downloaded or an error
/ occurs after FinishStreamingToFile() returns
/ <code>PP_OK_COMPLETIONPENDING</code>.
/
/ @return An int32_t containing the number of bytes read or an error code
/ from <code>pp_errors.h</code>."
      end

      operation 11428364 "Close"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function is used to cancel any pending IO and close the URLLoader
/ object. Any pending callbacks will still run, reporting
/ <code>PP_ERROR_ABORTED</code> if pending IO was interrupted.  It is NOT
/ valid to call Open() again after a call to this function.
/
/ <strong>Note:</strong> If the <code>URLLoader</code> object is destroyed
/ while it is still open, then it will be implicitly closed so you are not
/ required to call Close()."
      end
    end

    class 2794124 "MessageLoop"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ A message loop allows PPAPI calls to be issued on a thread. You may not
/ issue any API calls on a thread without creating a message loop. It also
/ allows you to post work to the message loop for a thread.
/
/ To process work posted to the message loop, as well as completion callbacks
/ for asynchronous operations, you must run the message loop via Run().
/
/ Note the system manages the lifetime of the instance (and all associated
/ resources). If the instance is deleted from the page, background threads may
/ suddenly see their PP_Resource handles become invalid. In this case, calls
/ will fail with PP_ERROR_BADRESOURCE. If you need to access data associated
/ with your instance, you will probably want to create some kind of threadsafe
/ proxy object that can handle asynchonous destruction of the instance object.
/
/ Typical usage:
/   On the main thread:
/    - Create the thread yourself (using pthreads).
/    - Create the message loop resource.
/    - Pass the message loop resource to your thread's main function.
/    - Call PostWork() on the message loop to run functions on the thread.
/
/   From the background thread's main function:
/    - Call AttachToCurrentThread() with the message loop resource.
/    - Call Run() with the message loop resource.
/
/   Your callacks should look like this:
/      void DoMyWork(void* user_data, int32_t status) {
/        if (status != PP_OK) {
/          Cleanup();  // e.g. free user_data.
/          return;
/        }
/        ... do your work...
/      }
/ For a C++ example, see ppapi/utility/threading/simple_thread.h
/
/ (You can also create the message loop resource on the background thread,
/ but then the main thread will have no reference to it should you want to
/ call PostWork()).
/
/
/ THREAD HANDLING
/
/ The main thread has an implicitly created message loop. The main thread is
/ the thread where PPP_InitializeModule and PPP_Instance functions are called.
/ You can retrieve a reference to this message loop by calling
/ GetForMainThread() or, if your code is on the main thread,
/ GetForCurrentThread() will also work.
/
/ Some special threads created by the system can not have message loops. In
/ particular, the background thread created for audio processing has this
/ requirement because it's intended to be highly responsive to keep up with
/ the realtime requirements of audio processing. You can not make PPAPI calls
/ from these threads.
/
/ Once you associate a message loop with a thread, you don't have to keep a
/ reference to it. The system will hold a reference to the message loop for as
/ long as the thread is running. The current message loop can be retrieved
/ using the GetCurrent() function.
/
/ It is legal to create threads in your plugin without message loops, but
/ PPAPI calls will fail unless explicitly noted in the documentation.
/
/ You can create a message loop object on a thread and never actually run the
/ message loop. This will allow you to call blocking PPAPI calls (via
/ PP_BlockUntilComplete()). If you make any asynchronous calls, the callbacks
/ from those calls will be queued in the message loop and never run. The same
/ thing will happen if work is scheduled after the message loop exits and
/ the message loop is not run again.
/
/
/ DESTRUCTION AND ERROR HANDLING
/
/ Often, your application will associate memory with completion callbacks. For
/ example, the C++ CompletionCallbackFactory has a small amount of
/ heap-allocated memory for each callback. This memory will be leaked if the
/ callback is never run. To avoid this memory leak, you need to be careful
/ about error handling and shutdown.
/
/ There are a number of cases where posted callbacks will never be run:
/
/  - You tear down the thread (via pthreads) without \"destroying\" the message
/    loop (via PostQuit with should_destroy = PP_TRUE). In this case, any
/    tasks in the message queue will be lost.
/
/  - You create a message loop, post callbacks to it, and never run it.
/
/  - You quit the message loop via PostQuit with should_destroy set to
/    PP_FALSE. In this case, the system will assume the message loop will be
/    run again later and keep your tasks.
/
/ To do proper shutdown, call PostQuit with should_destroy = PP_TRUE. This
/ will prohibit future work from being posted, and will allow the message loop
/ to run until all pending tasks are run.
/
/ If you post a callback to a message loop that's been destroyed, or to an
/ invalid message loop, PostWork will return an error and will not run the
/ callback. This is true even for callbacks with the \"required\" flag set,
/ since the system may not even know what thread to issue the error callback
/ on.
/
/ Therefore, you should check for errors from PostWork and destroy any
/ associated memory to avoid leaks. If you're using the C++
/ CompletionCallbackFactory, use the following pattern:
/
/   pp::CompletionCallback callback = factory_.NewOptionalCallback(...);
/   int32_t result = message_loop.PostWork(callback);
/   if (result != PP_OK)
/     callback.Run(result);
/
/ This will run the callback with an error value, and assumes that the
/ implementation of your callback checks the \"result\" argument and returns
/ immediately on error."
      classrelation 5225868 // <generalisation>
	relation 5225740 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5225868 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11407244 "MessageLoop"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Creates an is_null() MessageLoop resource."
      end

      operation 11407372 "MessageLoop"
	public explicit_return_type ""
	nparams 1
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Creates a message loop associated with the given instance. The resource
/ will be is_null() on failure.
/
/ This may be called from any thread. After your thread starts but before
/ issuing any other PPAPI calls on it, you must associate it with a message
/ loop by calling AttachToCurrentThread."
      end

      operation 11407500 "MessageLoop"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 2794124 // MessageLoop
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11407628 "MessageLoop"
	public explicit_return_type ""
	nparams 1
	  param in name "pp_message_loop" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Takes an additional ref to the resource."
      end

      operation 11407756 "GetForMainThread"
	class_operation public return_type class_ref 2794124 // MessageLoop
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11407884 "GetCurrent"
	class_operation public return_type class_ref 2794124 // MessageLoop
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11408012 "AttachToCurrentThread"
	public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Sets the given message loop resource as being the associated message loop
/ for the currently running thread.
/
/ You must call this function exactly once on a thread before making any
/ PPAPI calls. A message loop can only be attached to one thread, and the
/ message loop can not be changed later. The message loop will be attached
/ as long as the thread is running or until you quit with should_destroy
/ set to PP_TRUE.
/
/ If this function fails, attempting to run the message loop will fail.
/ Note that you can still post work to the message loop: it will get queued
/ up should the message loop eventually be successfully attached and run.
/
/ @return
/   - PP_OK: The message loop was successfully attached to the thread and is
/     ready to use.
/   - PP_ERROR_BADRESOURCE: The given message loop resource is invalid.
/   - PP_ERROR_INPROGRESS: The current thread already has a message loop
/     attached. This will always be the case for the main thread, which has
/     an implicit system-created message loop attached.
/   - PP_ERROR_WRONG_THREAD: The current thread type can not have a message
/     loop attached to it. See the interface level discussion about these
/     special threads, which include realtime audio threads."
      end

      operation 11408140 "Run"
	public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Runs the thread message loop. Running the message loop is required for
/ you to get issued completion callbacks on the thread.
/
/ The message loop identified by the argument must have been previously
/ successfully attached to the current thread.
/
/ You may not run nested message loops. Since the main thread has an
/ implicit message loop that the system runs, you may not call Run on the
/ main thread.
/
/ @return
/   - PP_OK: The message loop was successfully run. Note that on
/     success, the message loop will only exit when you call PostQuit().
/   - PP_ERROR_BADRESOURCE: The given message loop resource is invalid.
/   - PP_ERROR_WRONG_THREAD: You are attempting to run a message loop that
/     has not been successfully attached to the current thread. Call
/     AttachToCurrentThread().
/   - PP_ERROR_INPROGRESS: You are attempting to call Run in a nested
/     fashion (Run is already on the stack). This will occur if you attempt
/     to call run on the main thread's message loop (see above)."
      end

      operation 11408268 "PostWork"
	public return_type class_ref 2409996 // int32_t
	nparams 2
	  param in name "callback" type class_ref 2790284 // CompletionCallback
	  param in name "delay_ms" type class_ref 2603788 // int64_t
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Schedules work to run on the given message loop. This may be called from
/ any thread. Posted work will be executed in the order it was posted when
/ the message loop is Run().
/
/ @param callback A pointer to the completion callback to execute from the
/ message loop.
/
/ @param delay_ms The number of millseconds to delay execution of the given
/ completion callback. Passing 0 means it will get queued normally and
/ executed in order.
/
/
/ The completion callback will be called with PP_OK as the \"result\"
/ parameter if it is run normally. It is good practice to check for PP_OK
/ and return early otherwise.
/
/ The \"required\" flag on the completion callback is ignored. If there is an
/ error posting your callback, the error will be returned from PostWork and
/ the callback will never be run (because there is no appropriate place to
/ run your callback with an error without causing unexpected threading
/ problems). If you associate memory with the completion callback (for
/ example, you're using the C++ CompletionCallbackFactory), you will need to
/ free this or manually run the callback. See \"Desctruction and error
/ handling\" above.
/
/
/ You can call this function before the message loop has started and the
/ work will get queued until the message loop is run. You can also post
/ work after the message loop has exited as long as should_destroy was
/ PP_FALSE. It will be queued until the next invocation of Run().
/
/ @return
/   - PP_OK: The work was posted to the message loop's queue. As described
/     above, this does not mean that the work has been or will be executed
/     (if you never run the message loop after posting).
/   - PP_ERROR_BADRESOURCE: The given message loop resource is invalid.
/   - PP_ERROR_BADARGUMENT: The function pointer for the completion callback
/     is null (this will be the case if you pass PP_BlockUntilComplete()).
/   - PP_ERROR_FAILED: The message loop has been destroyed."
      end

      operation 11408396 "PostQuit"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "should_destroy" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Posts a quit message to the given message loop's work queue. Work posted
/ before that point will be processed before quitting.
/
/ This may be called on the message loop registered for the current thread,
/ or it may be called on the message loop registered for another thread. It
/ is an error to attempt to quit the main thread loop.
/
/ @param should_destroy Marks the message loop as being in a destroyed
/ state and prevents further posting of messages.
/
/ If you quit a message loop without setting should_destroy, it will still
/ be attached to the thread and you can still run it again by calling Run()
/ again. If you destroy it, it will be detached from the current thread.
/
/ @return
/   - PP_OK: The request to quit was successfully posted.
/   - PP_ERROR_BADRESOURCE: The message loop was invalid.
/   - PP_ERROR_WRONG_THREAD: You are attempting to quit the main thread.
/     The main thread's message loop is managed by the system and can't be
/     quit."
      end
    end

    class 2794508 "MouseCursor"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      operation 11410828 "SetCursor"
	class_operation public return_type class_ref 2322828 // bool
	nparams 4
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "type" type class_ref 2748812 // PP_MouseCursor_Type
	  param in name "image" type class_ref 2792076 // ImageData
	    defaultvalue "ImageData()"
	  param in name "hot_spot" type class_ref 2792204 // Point
	    defaultvalue "Point(0, 0)"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, const ${t2} & ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Sets the given mouse cursor. The mouse cursor will be in effect whenever
/ the mouse is over the given instance until it is set again by another
/ call. Note that you can hide the mouse cursor by setting it to the
/ <code>PP_MOUSECURSOR_TYPE_NONE</code> type.
/
/ This function allows setting both system defined mouse cursors and
/ custom cursors. To set a system-defined cursor, pass the type you want
/ and set the custom image to a default-constructor ImageData object.
/ To set a custom cursor, set the type to
/ <code>PP_MOUSECURSOR_TYPE_CUSTOM</code> and specify your image and hot
/ spot.
/
/ @param[in] instance A handle indentifying the instance that the mouse
/ cursor will affect.
/
/ @param[in] type A <code>PP_MouseCursor_Type</code> identifying the type
/ of mouse cursor to show. See <code>ppapi/c/ppb_mouse_cursor.h</code>.
/
/ @param[in] image A <code>ImageData</code> object identifying the
/ custom image to set when the type is
/ <code>PP_MOUSECURSOR_TYPE_CUSTOM</code>. The image must be less than 32
/ pixels in each direction and must be of the system's native image format.
/ When you are specifying a predefined cursor, this parameter should be a
/ default-constructed ImageData.
/
/ @param[in] hot_spot When setting a custom cursor, this idenfifies the
/ pixel position within the given image of the \"hot spot\" of the cursor.
/ When specifying a stock cursor, this parameter is ignored.
/
/ @return true on success, or false if the instance or cursor type
/ was invalid or if the image was too large."
      end
    end

    class 2794636 "MouseLock"
      abstract visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ This class allows you to associate the <code>PPP_MouseLock</code> and
/ <code>PPB_MouseLock</code> C-based interfaces with an object. It associates
/ itself with the given instance, and registers as the global handler for
/ handling the <code>PPP_MouseLock</code> interface that the browser calls.
/
/ You would typically use this class by inheritance on your instance or by
/ composition.
/
/ <strong>Example (inheritance):</strong>
/ <code>
/   class MyInstance : public pp::Instance, public pp::MouseLock {
/     class MyInstance() : pp::MouseLock(this) {
/     }
/     ...
/   };
/ </code>
/
/ <strong>Example (composition):</strong>
/ <code>
/   class MyMouseLock : public pp::MouseLock {
/     ...
/   };
/
/   class MyInstance : public pp::Instance {
/     MyInstance() : mouse_lock_(this) {
/     }
/
/     MyMouseLock mouse_lock_;
/   };
/ </code>"
      operation 11410956 "MouseLock"
	public explicit_return_type ""
	nparams 1
	  param inout name "instance" type class_ref 2792716 // Instance
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} * ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor for creating a <code>MouseLock</code>.
/
/ @param[in] instance The instance with which this resource will be
/ associated."
      end

      operation 11411084 "~MouseLock"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11411212 "MouseLockLost"
	abstract cpp_virtual public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ PPP_MouseLock functions exposed as virtual functions for you to override."
      end

      operation 11411340 "LockMouse"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "cc" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ LockMouse() requests the mouse to be locked.
/
/ While the mouse is locked, the cursor is implicitly hidden from the user.
/ Any movement of the mouse will generate a
/ <code>PP_INPUTEVENT_TYPE_MOUSEMOVE</code> event. The
/ <code>GetPosition()</code> function in <code>InputEvent()</code>
/ reports the last known mouse position just as mouse lock was
/ entered. The <code>GetMovement()</code> function provides relative
/ movement information indicating what the change in position of the mouse
/ would be had it not been locked.
/
/ The browser may revoke the mouse lock for reasons including (but not
/ limited to) the user pressing the ESC key, the user activating another
/ program using a reserved keystroke (e.g. ALT+TAB), or some other system
/ event.
/
/ @param[in] cc A <code>CompletionCallback</code> to be called upon
/ completion.
/
/ @return An int32_t containing an error code from <code>pp_errors.h</code>."
      end

      operation 11411468 "UnlockMouse"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ UnlockMouse causes the mouse to be unlocked, allowing it to track user
/ movement again. This is an asynchronous operation. The module instance
/ will be notified using the <code>PPP_MouseLock</code> interface when it
/ has lost the mouse lock."
      end

      classrelation 5226764 // associated_instance_ (<directional composition>)
	relation 5226636 *-->
	  a role_name "associated_instance_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5226764 // associated_instance_ (<directional composition>)
	  b parent class_ref 2790028 // InstanceHandle
      end
    end

    class 2798476 "URLRequestInfo"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ URLRequestInfo provides an API for creating and manipulating URL requests."
      classrelation 5229452 // <generalisation>
	relation 5229324 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5229452 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11428492 "URLRequestInfo"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor. This constructor creates an
/ <code>is_null</code> resource."
      end

      operation 11428620 "URLRequestInfo"
	public explicit_return_type ""
	nparams 1
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used to allocate a new <code>URLLoader</code> in the
/ browser. The resulting object will be <code>is_null</code> if the
/ allocation failed.
/
/ @param[in] instance The instance with which this resource will be
/ associated."
      end

      operation 11428748 "URLRequestInfo"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 2798476 // URLRequestInfo
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The copy constructor for <code>URLRequestInfo</code>.
/
/ @param[in] other A <code>URLRequestInfo</code> to be copied."
      end

      operation 11428876 "SetProperty"
	public return_type class_ref 2322828 // bool
	nparams 2
	  param in name "property" type class_ref 2752780 // PP_URLRequestProperty
	  param in name "value" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetProperty() sets a request property. The value of the property must be
/ the correct type according to the property being set.
/
/ @param[in] property A <code>PP_URLRequestProperty</code> identifying the
/ property to set.
/ @param[in] value A <code>Var</code> containing the property value.
/
/ @return true if successful, false if any of the
/ parameters are invalid."
      end

      operation 11429004 "AppendDataToBody"
	public return_type class_ref 2322828 // bool
	nparams 2
	  param in name "data" explicit_type "void"
	  param in name "len" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} * ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ AppendDataToBody() appends data to the request body. A content-length
/ request header will be automatically generated.
/
/ @param[in] data A pointer to a buffer holding the data.
/ @param[in] len The length, in bytes, of the data.
/
/ @return true if successful, false if any of the
/ parameters are invalid."
      end

      operation 11429132 "AppendFileToBody"
	public return_type class_ref 2322828 // bool
	nparams 2
	  param in name "file_ref" type class_ref 2791180 // FileRef
	  param in name "expected_last_modified_time" type class_ref 2739212 // PP_Time
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ AppendFileToBody() is used to append an entire file, to be uploaded, to
/ the request body. A content-length request header will be automatically
/ generated.
/
/ @param[in] file_ref A <code>FileRef</code> containing the file
/ reference.
/ @param[in] expected_last_modified_time An optional (non-zero) last
/ modified time stamp used to validate that the file was not modified since
/ the given time before it was uploaded. The upload will fail with an error
/ code of <code>PP_ERROR_FILECHANGED</code> if the file has been modified
/ since the given time. If expected_last_modified_time is 0, then no
/ validation is performed.
/
/ @return true if successful, false if any of the
/ parameters are invalid."
      end

      operation 11429260 "AppendFileRangeToBody"
	public return_type class_ref 2322828 // bool
	nparams 4
	  param in name "file_ref" type class_ref 2791180 // FileRef
	  param in name "start_offset" type class_ref 2603788 // int64_t
	  param in name "length" type class_ref 2603788 // int64_t
	  param in name "expected_last_modified_time" type class_ref 2739212 // PP_Time
	    defaultvalue "0"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}, ${t2} ${p2}${v2}, ${t3} ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ AppendFileRangeToBody() is a pointer to a function used to append part or
/ all of a file, to be uploaded, to the request body. A content-length
/ request header will be automatically generated.
/
/ @param[in] file_ref A <code>FileRef</code> containing the file
/ reference.
/ @param[in] start_offset An optional starting point offset within the
/ file.
/ @param[in] length An optional number of bytes of the file to
/ be included. If the value is -1, then the sub-range to upload extends
/ to the end of the file.
/ @param[in] expected_last_modified_time An optional (non-zero) last
/ modified time stamp used to validate that the file was not modified since
/ the given time before it was uploaded. The upload will fail with an error
/ code of <code>PP_ERROR_FILECHANGED</code> if the file has been modified
/ since the given time. If expected_last_modified_time is 0, then no
/ validation is performed.
/
/ @return true if successful, false if any of the
/ parameters are invalid."
      end

      operation 11429388 "SetURL"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "url_string" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_URL, url_string);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetURL() sets the <code>PP_URLREQUESTPROPERTY_URL</code>
/ property for the request.
/
/ @param[in] url_string A <code>Var</code> containing the property value.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11429516 "SetMethod"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "method_string" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_METHOD, method_string);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetMethod() sets the <code>PP_URLREQUESTPROPERTY_METHOD</code>
/ (corresponding to a string of type <code>PP_VARTYPE_STRING</code>)
/ property for the request. This string is either a POST or GET. Refer to
/ the <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html\">HTTP
/ Methods</a> documentation for further information.
/
/ @param[in] method_string A <code>Var</code> containing the property
/ value.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11429644 "SetHeaders"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "headers_string" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_HEADERS, headers_string);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetHeaders() sets the <code>PP_URLREQUESTPROPERTY_HEADERS</code>
/ (corresponding to a <code>\\n</code> delimited string of type
/ <code>PP_VARTYPE_STRING</code>) property for the request.
/ Refer to the
/ <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\"Header
/ Field Definitions</a> documentaiton for further information.
/
/ @param[in] headers_string A <code>Var</code> containing the property
/ value.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11429772 "SetStreamToFile"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "enable" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_STREAMTOFILE, enable);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetStreamToFile() sets the
/ <code>PP_URLREQUESTPROPERTY_STREAMTOFILE</code> (corresponding
/ to a bool of type <code>PP_VARTYPE_BOOL</code>). The default of the
/ property is false. Set this value to true if you want to download the
/ data to a file. Use URL_Loader::FinishStreamingToFile() to complete
/ the download.
/
/ @param[in] enable A <code>bool</code> containing the property value.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11429900 "SetFollowRedirects"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "enable" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_FOLLOWREDIRECTS, enable);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetFollowRedirects() sets the
/ <code>PP_URLREQUESTPROPERTY_FOLLOWREDIRECT</code> (corresponding
/ to a bool of type <code>PP_VARTYPE_BOOL</code>). The default of the
/ property is true. Set this value to false if you want to use
/ URLLoader::FollowRedirects() to follow the redirects only after examining
/ redirect headers.
/
/ @param[in] enable A <code>bool</code> containing the property value.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11430028 "SetRecordDownloadProgress"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "enable" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_RECORDDOWNLOADPROGRESS, enable);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetRecordDownloadProgress() sets the
/ <code>PP_URLREQUESTPROPERTY_RECORDDOWNLOADPROGESS</code>
/ (corresponding to a bool of type <code>PP_VARTYPE_BOOL</code>). The
/ default of the property is false. Set this value to true if you want to
/ be able to poll the download progress using
/ URLLoader::GetDownloadProgress().
/
/ @param[in] enable A <code>bool</code> containing the property value.
//
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11430156 "SetRecordUploadProgress"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "enable" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_RECORDUPLOADPROGRESS, enable);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetRecordUploadProgress() sets the
/ <code>PP_URLREQUESTPROPERTY_RECORDUPLOADPROGRESS</code>
/ (corresponding to a bool of type <code>PP_VARTYPE_BOOL</code>). The
/ default of the property is false. Set this value to true if you want to
/ be able to poll the upload progress using URLLoader::GetUploadProgress().
/
/ @param[in] enable A <code>bool</code> containing the property value.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11430284 "SetCustomReferrerURL"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "url" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_CUSTOMREFERRERURL, url);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetCustomReferrerURL() sets the
/ <code>PP_URLREQUESTPROPERTY_CUSTOMREFERRERURL</code>
/ (corresponding to a string of type <code>PP_VARTYPE_STRING</code> or
/ might be set to undefined as <code>PP_VARTYPE_UNDEFINED</code>). Set it
/ to a string to set a custom referrer (if empty, the referrer header will
/ be omitted), or to undefined to use the default referrer. Only loaders
/ with universal access (only available on trusted implementations) will
/ accept <code>URLRequestInfo</code> objects that try to set a custom
/ referrer; if given to a loader without universal access,
/ <code>PP_ERROR_BADARGUMENT</code> will result.
/
/ @param[in] url A <code>Var</code> containing the property value.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11430412 "SetAllowCrossOriginRequests"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "enable" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_ALLOWCROSSORIGINREQUESTS, enable);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetAllowCrossOriginRequests() sets the
/ <code>PP_URLREQUESTPROPERTY_ALLOWCROSSORIGINREQUESTS</code>
/ (corresponding to a bool of type <code>PP_VARTYPE_BOOL</code>). The
/ default of the property is false. Whether cross-origin requests are
/ allowed. Cross-origin requests are made using the CORS (Cross-Origin
/ Resource Sharing) algorithm to check whether the request should be
/ allowed. For the complete CORS algorithm, refer to the
/ <a href=\"http://www.w3.org/TR/access-control\">Cross-Origin Resource
/ Sharing</a> documentation.
/
/ @param[in] enable A <code>bool</code> containing the property value.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11430540 "SetAllowCredentials"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "enable" type class_ref 2322828 // bool
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_ALLOWCREDENTIALS, enable);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetAllowCredentials() sets the
/ <code>PP_URLREQUESTPROPERTY_ALLOWCREDENTIALS</code>
/ (corresponding to a bool of type <code>PP_VARTYPE_BOOL</code>). The
/ default of the property is false. Whether HTTP credentials are sent with
/ cross-origin requests. If false, no credentials are sent with the request
/ and cookies are ignored in the response. If the request is not
/ cross-origin, this property is ignored.
/
/ @param[in] enable A <code>bool</code> containing the property value.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11430668 "SetCustomContentTransferEncoding"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "content_transfer_encoding" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_CUSTOMCONTENTTRANSFERENCODING,
                       content_transfer_encoding);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetCustomContentTransferEncoding() sets the
/ <code>PP_URLREQUESTPROPERTY_CUSTOMCONTENTTRANSFERENCODING</code>
/ (corresponding to a string of type <code>PP_VARTYPE_STRING</code> or
/ might be set to undefined as <code>PP_VARTYPE_UNDEFINED</code>). Set it
/ to a string to set a custom content-transfer-encoding header (if empty,
/ that header will be omitted), or to undefined to use the default (if
/ any). Only loaders with universal access (only available on trusted
/ implementations) will accept <code>URLRequestInfo</code> objects that try
/ to set a custom content transfer encoding; if given to a loader without
/ universal access, <code>PP_ERROR_BADARGUMENT</code> will result.
/
/ @param[in] content_transfer_encoding A <code>Var</code> containing the
/ property value. To use the default content transfer encoding, set
/ <code>content_transfer_encoding</code> to an undefined <code>Var</code>.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11430796 "SetPrefetchBufferUpperThreshold"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "size" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_PREFETCHBUFFERUPPERTHRESHOLD,
                       size);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetPrefetchBufferUpperThreshold() sets the
/ <code>PP_URLREQUESTPROPERTY_PREFETCHBUFFERUPPERTHRESHOLD</code>
/ (corresponding to a integer of type <code>PP_VARTYPE_INT32</code>). The
/ default is not defined and is set by the browser possibly depending on
/ system capabilities. Set it to an integer to set an upper threshold for
/ the prefetched buffer of an asynchronous load. When exceeded, the browser
/ will defer loading until
/ <code>PP_URLREQUESTPROPERTY_PREFETCHBUFFERLOWERERTHRESHOLD</code> is hit,
/ at which time it will begin prefetching again. When setting this
/ property,
/ <code>PP_URLREQUESTPROPERTY_PREFETCHBUFFERLOWERERTHRESHOLD</code> must
/ also be set. Behavior is undefined if the former is <= the latter.
/
/ @param[in] size An int32_t containing the property value.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11430924 "SetPrefetchBufferLowerThreshold"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "size" type class_ref 2409996 // int32_t
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_PREFETCHBUFFERLOWERTHRESHOLD,
                       size);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetPrefetchBufferLowerThreshold() sets the
/ <code>PP_URLREQUESTPROPERTY_PREFETCHBUFFERLOWERTHRESHOLD</code>
/ (corresponding to a integer of type <code>PP_VARTYPE_INT32</code>). The
/ default is not defined and is set by the browser to a value appropriate
/ for the default
/ <code>PP_URLREQUESTPROPERTY_PREFETCHBUFFERUPPERTHRESHOLD</code>.
/ Set it to an integer to set a lower threshold for the prefetched buffer
/ of an asynchronous load. When reached, the browser will resume loading if
/ If <code>PP_URLREQUESTPROPERTY_PREFETCHBUFFERLOWERERTHRESHOLD</code> had
/ previously been reached.
/ When setting this property,
/ <code>PP_URLREQUESTPROPERTY_PREFETCHBUFFERUPPERTHRESHOLD</code> must also
/ be set. Behavior is undefined if the former is >= the latter.
/
/ @param[in] size An int32_t containing the property value.
/
/ @return true if successful, false if the parameter is invalid."
      end

      operation 11431052 "SetCustomUserAgent"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "user_agent" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return SetProperty(PP_URLREQUESTPROPERTY_CUSTOMUSERAGENT, user_agent);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SetCustomUserAgent() sets the
/ <code>PP_URLREQUESTPROPERTY_CUSTOMUSERAGENT</code> (corresponding to a
/ string of type <code>PP_VARTYPE_STRING</code> or might be set to undefined
/ as <code>PP_VARTYPE_UNDEFINED</code>). Set it to a string to set a custom
/ user-agent header (if empty, that header will be omitted), or to undefined
/ to use the default. Only loaders with universal access (only available on
/ trusted implementations) will accept <code>URLRequestInfo</code> objects
/ that try to set a custom user agent; if given to a loader without
/ universal access, <code>PP_ERROR_BADARGUMENT</code> will result.
/
/ @param[in] user_agent A <code>Var</code> containing the property value. To
/ use the default user agent, set <code>user_agent</code> to an undefined
/ <code>Var</code>.
/
/ @return true if successful, false if the parameter is invalid."
      end
    end

    class 2798604 "URLResponseInfo"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ URLResponseInfo provides an API for examaning URL responses."
      classrelation 5229580 // <generalisation>
	relation 5229452 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5229580 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11431180 "URLResponseInfo"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Default constructor. This constructor creates an <code>is_null</code>
/ resource."
      end

      operation 11431308 "URLResponseInfo"
	public explicit_return_type ""
	nparams 2
	  param in name "" type class_ref 2791436 // PassRef
	  param in name "resource" type class_ref 2734220 // PP_Resource
	cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ A constructor used when you have received a <code>PP_Resource</code> as a
/ return value that has already been reference counted.
/
/ @param[in] resource A <code>PP_Resource</code> corresponding to a
/ resource."
      end

      operation 11431436 "URLResponseInfo"
	public explicit_return_type ""
	nparams 1
	  param in name "other" type class_ref 2798604 // URLResponseInfo
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ The copy constructor for <code>URLResponseInfo</code>."
      end

      operation 11431564 "GetProperty"
	const public return_type class_ref 2789260 // Var
	nparams 1
	  param in name "property" type class_ref 2753164 // PP_URLResponseProperty
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function gets a response property.
/
/ @param[in] property A <code>PP_URLResponseProperty</code> identifying the
/ type of property in the response.
/
/ @return A <code>Var</code> containing the response property value if
/ successful, <code>is_undefined Var</code> if an input parameter is
/ invalid."
      end

      operation 11431692 "GetBodyAsFileRef"
	const public return_type class_ref 2791180 // FileRef
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function returns a <code>FileRef</code>
/ pointing to the file containing the response body.  This
/ is only valid if <code>PP_URLREQUESTPROPERTY_STREAMTOFILE</code> was set
/ on the <code>URLRequestInfo</code> used to produce this response.  This
/ file remains valid until the <code>URLLoader</code> associated with this
/ <code>URLResponseInfo</code> is closed or destroyed.
/
/ @return A <code>FileRef</code> corresponding to a
/ <code>FileRef</code> if successful, an <code>is_null</code> object if
/ <code>PP_URLREQUESTPROPERTY_STREAMTOFILE</code> was not requested or if
/ the <code>URLLoader</code> has not been opened yet."
      end

      operation 11431820 "GetURL"
	const cpp_inline public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return GetProperty(PP_URLRESPONSEPROPERTY_URL);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function gets the <code>PP_URLRESPONSEPROPERTY_URL</code>
/ property for the response.
/
/ @return An <code>is_string Var</code> containing the response property
/ value if successful, <code>is_undefined Var</code> if an input parameter
/ is invalid."
      end

      operation 11431948 "GetRedirectURL"
	const cpp_inline public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return GetProperty(PP_URLRESPONSEPROPERTY_REDIRECTURL);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function gets the <code>PP_URLRESPONSEPROPERTY_REDIRECTURL</code>
/ property for the response.
/
/ @return An <code>is_string Var</code> containing the response property
/ value if successful, <code>is_undefined Var</code> if an input parameter
/ is invalid."
      end

      operation 11432076 "GetRedirectMethod"
	const cpp_inline public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return GetProperty(PP_URLRESPONSEPROPERTY_REDIRECTMETHOD);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function gets the <code>PP_URLRESPONSEPROPERTY_REDIRECTMETHOD</code>
/ property for the response.
/
/ @return An <code>is_string Var</code> containing the response property
/ value if successful, <code>is_undefined Var</code> if an input parameter
/ is invalid."
      end

      operation 11432204 "GetStatusCode"
	const cpp_inline public return_type class_ref 2409996 // int32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return GetProperty(PP_URLRESPONSEPROPERTY_STATUSCODE).AsInt();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function gets the <code>PP_URLRESPONSEPROPERTY_STATUSCODE</code>
/ property for the response.
/
/ @return A int32_t containing the response property value if successful,
/ <code>is_undefined Var</code> if an input parameter is invalid."
      end

      operation 11432332 "GetStatusLine"
	const cpp_inline public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return GetProperty(PP_URLRESPONSEPROPERTY_STATUSLINE);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function gets the <code>PP_URLRESPONSEPROPERTY_STATUSLINE</code>
/ property for the response.
/
/ @return An <code>is_string Var</code> containing the response property
/ value if successful, <code>is_undefined Var</code> if an input parameter
/ is invalid."
      end

      operation 11432460 "GetHeaders"
	const cpp_inline public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return GetProperty(PP_URLRESPONSEPROPERTY_HEADERS);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ This function gets the <code>PP_URLRESPONSEPROPERTY_HEADERS</code>
/ property for the response.
/
/ @return An <code>is_string Var</code> containing the response property
/ value if successful, <code>is_undefined Var</code> if an input parameter
/ is invalid."
      end
    end

    class 2799116 "VarArrayBuffer"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ @file
/ This file defines the API for interacting with a JavaScript ArrayBuffer.
/ <code>VarArrayBuffer</code> provides a way to interact with JavaScript
/ ArrayBuffers, which represent a contiguous sequence of bytes. Note that
/ these vars are not part of the embedding page's DOM, and can only be
/ shared with JavaScript using the <code>PostMessage</code> and
/ <code>HandleMessage</code> functions of <code>Instance</code>."
      classrelation 5230092 // <generalisation>
	relation 5229964 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5230092 // <generalisation>
	  b parent class_ref 2789260 // Var
      end

      operation 11437196 "VarArrayBuffer"
	public explicit_return_type ""
	nparams 1
	  param in name "var" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Contruct a <code>VarArrayBuffer</code> given a var for which
/ is_array_buffer() is true. This will refer to the same
/ <code>ArrayBuffer</code> as var, but allows you to access methods
/ specific to <code>VarArrayBuffer</code>.
/
/ @param[in] var An <code>ArrayBuffer</code> var."
      end

      operation 11437324 "VarArrayBuffer"
	public explicit_return_type ""
	nparams 1
	  param in name "size_in_bytes" type class_ref 2345996 // uint32_t
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${t0} ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Construct a new <code>VarArrayBuffer_Dev</code> which is
/ <code>size_in_bytes</code> bytes long and initialized to zero.
/
/ @param[in] size_in_bytes The size of the constructed
/ <code>ArrayBuffer</code> in bytes."
      end

      operation 11437452 "VarArrayBuffer"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "buffer" type class_ref 2799116 // VarArrayBuffer
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} : Var(buffer) {};
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Copy constructor."
      end

      operation 11437580 "~VarArrayBuffer"
	cpp_virtual cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {};
"
	
	
	
	
      end

      operation 11437708 "operator ="
	public return_type class_ref 2799116 // VarArrayBuffer
	nparams 1
	  param in name "other" type class_ref 2799116 // VarArrayBuffer
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ This function assigns one <code>VarArrayBuffer</code> to another
/ <code>VarArrayBuffer</code>.
/
/ @param[in] other The <code>VarArrayBuffer</code> to be assigned.
/
/ @return The resulting <code>VarArrayBuffer</code>."
      end

      operation 11437836 "operator ="
	cpp_virtual public return_type class_ref 2789260 // Var
	nparams 1
	  param in name "other" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
	comment "/ This function assigns one <code>VarArrayBuffer</code> to another
/ <code>VarArrayBuffer</code>. A Var's assignment operator is overloaded
/ here so that we can check for assigning a non-ArrayBuffer var to a
/ <code>VarArrayBuffer_Dev</code>.
/
/ @param[in] other The <code>VarArrayBuffer</code> to be assigned.
/
/ @return The resulting <code>VarArrayBuffer</code> (as a Var&)."
      end

      operation 11437964 "ByteLength"
	const public return_type class_ref 2345996 // uint32_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ ByteLength() retrieves the length of the <code>VarArrayBuffer</code> in
/ bytes.
/
/ @return The length of the <code>VarArrayBuffer</code> in bytes."
      end

      operation 11438092 "Map"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} * ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Map() maps the <code>ArrayBuffer</code> in to the module's address space
/ and returns a pointer to the beginning of the internal buffer for
/ this <code>ArrayBuffer</code>. ArrayBuffers are copied when transmitted,
/ so changes to the underlying memory are not automatically available to
/ the embedding page.
/
/ Note that calling Map() can be a relatively expensive operation. Use care
/ when calling it in performance-critical code. For example, you should call
/ it only once when looping over an <code>ArrayBuffer</code>.
/
/ <strong>Example:</strong>
/
/ @code
/   char* data = static_cast<char*>(array_buffer_var.Map());
/   uint32_t byte_length = array_buffer_var.ByteLength();
/   for (uint32_t i = 0; i < byte_length; ++i)
/     data[i] = 'A';
/ @endcode
/
/ @return A pointer to the internal buffer for this
/ <code>ArrayBuffer</code>."
      end

      operation 11438220 "Unmap"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Unmap() unmaps this <code>ArrayBuffer</code> var from the module address
/ space. Use this if you want to save memory but might want to call Map()
/ to map the buffer again later."
      end
    end

    class 2799244 "WebSocket"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ The <code>WebSocket</code> class providing bi-directional,
/ full-duplex, communications over a single TCP socket."
      classrelation 5230348 // <generalisation>
	relation 5230220 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 5230348 // <generalisation>
	  b parent class_ref 2789900 // Resource
      end

      operation 11439244 "WebSocket"
	public explicit_return_type ""
	nparams 1
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Constructs a WebSocket object.
/
/ @param[in] instance The instance with which this resource will be
/ associated."
      end

      operation 11439372 "~WebSocket"
	cpp_virtual public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Destructs a WebSocket object."
      end

      operation 11439500 "Connect"
	public return_type class_ref 2409996 // int32_t
	nparams 4
	  param in name "url" type class_ref 2789260 // Var
	  param in name "protocols" type class_ref 2789260 // Var
	  param in name "protocol_count" type class_ref 2345996 // uint32_t
	  param in name "callback" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}, const ${t1} ${p1}[]${v1}, ${t2} ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}, const ${t1} ${p1}[], ${t2} ${p2}, const ${t3} & ${p3}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Connect() connects to the specified WebSocket server. You can call this
/ function once for an object.
/
/ @param[in] url A <code>Var</code> of string type representing a WebSocket
/ server URL.
/
/ @param[in] protocols A pointer to an array of <code>Var</code> of string
/ type specifying sub-protocols. Each <code>Var</code> represents one
/ sub-protocol. This argument can be null only if
/ <code>protocol_count</code> is 0.
/
/ @param[in] protocol_count The number of sub-protocols in
/ <code>protocols</code>.
/
/ @param[in] callback A <code>CompletionCallback</code> called
/ when a connection is established or an error occurs in establishing
/ connection.
/
/ @return An int32_t containing an error code from
/ <code>pp_errors.h</code>.
/ Returns <code>PP_ERROR_BADARGUMENT</code> if specified <code>url</code>,
/ or <code>protocols</code> contains invalid string as defined in
/ the WebSocket API specification. <code>PP_ERROR_BADARGUMENT</code>
/ corresponds to a SyntaxError in the WebSocket API specification.
/ Returns <code>PP_ERROR_NOACCESS</code> if the protocol specified in the
/ <code>url</code> is not a secure protocol, but the origin of the caller
/ has a secure scheme. Also returns <code>PP_ERROR_NOACCESS</code> if the
/ port specified in the <code>url</code> is a port that the user agent is
/ configured to block access to because it is a well-known port like SMTP.
/ <code>PP_ERROR_NOACCESS</code> corresponds to a SecurityError of the
/ specification.
/ Returns <code>PP_ERROR_INPROGRESS</code> if this is not the first call to
/ Connect()."
      end

      operation 11439628 "Close"
	public return_type class_ref 2409996 // int32_t
	nparams 3
	  param in name "code" type class_ref 2347788 // uint16_t
	  param in name "reason" type class_ref 2789260 // Var
	  param in name "callback" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, const ${t1} & ${p1}, const ${t2} & ${p2}${)}${const}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Close() closes the specified WebSocket connection by specifying
/ <code>code</code> and <code>reason</code>.
/
/ @param[in] code The WebSocket close code. This is ignored if it is 0.
/ <code>PP_WEBSOCKETSTATUSCODE_NORMAL_CLOSURE</code> must be used for the
/ usual case. To indicate some specific error cases, codes in the range
/ <code>PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MIN</code> to
/ <code>PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MAX</code>, and in the range
/ <code>PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MIN</code> to
/ <code>PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MAX</code> are available.
/
/ @param[in] reason A <code>Var</code> of string type representing the
/ close reason. This is ignored if it is an undefined type.
/
/ @param[in] callback A <code>CompletionCallback</code> called when the
/ connection is closed or an error occurs in closing the connection.
/
/ @return An int32_t containing an error code from
/ <code>pp_errors.h</code>.
/ Returns <code>PP_ERROR_BADARGUMENT</code> if <code>reason</code> contains
/ an invalid character as a UTF-8 string, or is longer than 123 bytes.
/ <code>PP_ERROR_BADARGUMENT</code> corresponds to a JavaScript
/ SyntaxError in the WebSocket API specification.
/ Returns <code>PP_ERROR_NOACCESS</code> if the code is not an integer
/ equal to 1000 or in the range 3000 to 4999.
/ <code>PP_ERROR_NOACCESS</code> corresponds to an InvalidAccessError in
/ the WebSocket API specification. Returns <code>PP_ERROR_INPROGRESS</code>
/ if a previous call to Close() is not finished."
      end

      operation 11439756 "ReceiveMessage"
	public return_type class_ref 2409996 // int32_t
	nparams 2
	  param inout name "message" type class_ref 2789260 // Var
	  param in name "callback" type class_ref 2790284 // CompletionCallback
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} * ${p0}, const ${t1} & ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ ReceiveMessage() receives a message from the WebSocket server.
/ This interface only returns a single message. That is, this interface
/ must be called at least N times to receive N messages, no matter the size
/ of each message.
/
/ @param[out] message The received message is copied to provided
/ <code>message</code>. The <code>message</code> must remain valid until
/ ReceiveMessage() completes. Its received <code>Var</code> will be of
/ string or ArrayBuffer type.
/
/ @param[in] callback A <code>CompletionCallback</code> called when
/ ReceiveMessage() completes. This callback is ignored if ReceiveMessage()
/ completes synchronously and returns <code>PP_OK</code>.
/
/ @return An int32_t containing an error code from
/ <code>pp_errors.h</code>.
/ If an error is detected or connection is closed, ReceiveMessage() returns
/ <code>PP_ERROR_FAILED</code> after all buffered messages are received.
/ Until buffered message become empty, ReceiveMessage() continues to return
/ <code>PP_OK</code> as if connection is still established without errors."
      end

      operation 11439884 "SendMessage"
	public return_type class_ref 2409996 // int32_t
	nparams 1
	  param in name "message" type class_ref 2789260 // Var
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ SendMessage() sends a message to the WebSocket server.
/
/ @param[in] message A message to send. The message is copied to an internal
/ buffer, so the caller can free <code>message</code> safely after returning
/ from the function. This <code>Var</code> must be of string or
/ ArrayBuffer types.
/
/ @return An int32_t containing an error code from
/ <code>pp_errors.h</code>.
/ Returns <code>PP_ERROR_FAILED</code> if the ReadyState is
/ <code>PP_WEBSOCKETREADYSTATE_CONNECTING</code>.
/ <code>PP_ERROR_FAILED</code> corresponds to a JavaScript
/ InvalidStateError in the WebSocket API specification.
/ Returns <code>PP_ERROR_BADARGUMENT</code> if the provided
/ <code>message</code> contains an invalid character as a
/ UTF-8 string. <code>PP_ERROR_BADARGUMENT</code> corresponds to a
/ JavaScript SyntaxError in the WebSocket API specification.
/ Otherwise, returns <code>PP_OK</code>, but it doesn't necessarily mean
/ that the server received the message."
      end

      operation 11440012 "GetBufferedAmount"
	public explicit_return_type "uint64_t"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetBufferedAmount() returns the number of bytes of text and binary
/ messages that have been queued for the WebSocket connection to send, but
/ have not been transmitted to the network yet.
/
/ @return Returns the number of bytes."
      end

      operation 11440140 "GetCloseCode"
	public return_type class_ref 2347788 // uint16_t
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetCloseCode() returns the connection close code for the WebSocket
/ connection.
/
/ @return Returns 0 if called before the close code is set."
      end

      operation 11440268 "GetCloseReason"
	public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetCloseReason() returns the connection close reason for the WebSocket
/ connection.
/
/ @return Returns a <code>Var</code> of string type. If called before the
/ close reason is set, the return value contains an empty string. Returns a
/ <code>PP_VARTYPE_UNDEFINED</code> if called on an invalid resource."
      end

      operation 11440396 "GetCloseWasClean"
	public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetCloseWasClean() returns if the connection was closed cleanly for the
/ specified WebSocket connection.
/
/ @return Returns <code>false</code> if called before the connection is
/ closed, called on an invalid resource, or closed for abnormal reasons.
/ Otherwise, returns <code>true</code> if the connection was closed
/ cleanly."
      end

      operation 11440524 "GetExtensions"
	public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetExtensions() returns the extensions selected by the server for the
/ specified WebSocket connection.
/
/ @return Returns a <code>Var</code> of string type. If called before the
/ connection is established, the <code>Var</code>'s data is an empty
/ string. Returns a <code>PP_VARTYPE_UNDEFINED</code> if called on an
/ invalid resource. Currently the <code>Var</code>'s data for valid
/ resources are always an empty string."
      end

      operation 11440652 "GetProtocol"
	public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetProtocol() returns the sub-protocol chosen by the server for the
/ specified WebSocket connection.
/
/ @return Returns a <code>Var</code> of string type. If called before the
/ connection is established, the <code>Var</code> contains the empty
/ string. Returns a code>PP_VARTYPE_UNDEFINED</code> if called on an
/ invalid resource."
      end

      operation 11440780 "GetReadyState"
	public return_type class_ref 2754444 // PP_WebSocketReadyState
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetReadyState() returns the ready state of the specified WebSocket
/ connection.
/
/ @return Returns <code>PP_WEBSOCKETREADYSTATE_INVALID</code> if called
/ before Connect() is called, or if this function is called on an
/ invalid resource."
      end

      operation 11440908 "GetURL"
	public return_type class_ref 2789260 // Var
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetURL() returns the URL associated with specified WebSocket connection.
/
/ @return Returns a <code>Var</code> of string type. If called before the
/ connection is established, the <code>Var</code> contains the empty
/ string. Returns a <code>PP_VARTYPE_UNDEFINED</code> if this function
/ is called on an invalid resource."
      end
    end
  end

  deploymentview 261132 "cpp"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1050380 "array_output"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2788620 // ArrayOutputAdapterBase
	class_ref 2788748 // ArrayOutputAdapter
	class_ref 2788876 // ResourceArrayOutputAdapter
	class_ref 2789004 // ArrayOutputAdapterWithStorage
	class_ref 2789132 // VarArrayOutputAdapterWithStorage
	class_ref 2789388 // ResourceArrayOutputAdapterWithStorage
	class_ref 2789516 // DirectoryEntryArrayOutputAdapterWithStorage
      end
    end

    artifact 1050508 "audio"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2789772 // Audio
      end
    end

    artifact 1050636 "audio_config"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2790156 // AudioConfig
      end
    end

    artifact 1050764 "completion_callback"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2790284 // CompletionCallback
	class_ref 2790412 // CompletionCallbackWithOutput
      end
    end

    artifact 1050892 "core"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2790796 // Core
      end
    end

    artifact 1051020 "file_io"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2791052 // FileIO
      end
    end

    artifact 1051148 "file_ref"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2791180 // FileRef
      end
    end

    artifact 1051276 "file_system"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2791564 // FileSystem
      end
    end

    artifact 1051404 "fullscreen"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2791692 // Fullscreen
      end
    end

    artifact 1051532 "graphics_2d"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2791948 // Graphics2D
      end
    end

    artifact 1051660 "graphics_3d"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2792460 // Graphics3D
      end
    end

    artifact 1051788 "graphics_3d_client"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2792588 // Graphics3DClient
      end
    end

    artifact 1051916 "image_data"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2792076 // ImageData
      end
    end

    artifact 1052044 "input_event"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2792844 // InputEvent
	class_ref 2792972 // MouseInputEvent
	class_ref 2793100 // WheelInputEvent
	class_ref 2793356 // KeyboardInputEvent
	class_ref 2793484 // TouchInputEvent
      end
    end

    artifact 1052172 "instance"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2792716 // Instance
      end
    end

    artifact 1052300 "instance_handle"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2790028 // InstanceHandle
      end
    end

    artifact 1052428 "message_loop"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2794124 // MessageLoop
      end
    end

    artifact 1052556 "module"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2790924 // Module
      end
    end

    artifact 1052684 "mouse_cursor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2794508 // MouseCursor
      end
    end

    artifact 1052812 "mouse_lock"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2794636 // MouseLock
      end
    end

    artifact 1053068 "pass_ref"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2791436 // PassRef
      end
    end

    artifact 1053196 "point"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2792204 // Point
	class_ref 2793228 // FloatPoint
      end
    end

    artifact 1053324 "rect"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2792332 // Rect
      end
    end

    artifact 1053452 "resource"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2789900 // Resource
      end
    end

    artifact 1053580 "size"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2791820 // Size
      end
    end

    artifact 1053708 "touch_point"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2793612 // TouchPoint
      end
    end

    artifact 1053836 "url_loader"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2793868 // URLLoader
      end
    end

    artifact 1053964 "url_request_info"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2798476 // URLRequestInfo
      end
    end

    artifact 1054092 "url_response_info"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2798604 // URLResponseInfo
      end
    end

    artifact 1054220 "var"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2789260 // Var
      end
    end

    artifact 1054348 "var_array_buffer"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2799116 // VarArrayBuffer
      end
    end

    artifact 1054476 "view"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2793740 // View
      end
    end

    artifact 1054604 "websocket"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2799244 // WebSocket
      end
    end
  end

  package_ref 315660 // dev

  package_ref 315788 // pp internal

  package_ref 316044 // private

  package_ref 316300 // extensions

  package_ref 316812 // trusted
end
