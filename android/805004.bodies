class DatabaseUtils
!!!3282572.java!!!	writeExceptionToParcel(inout reply : Parcel, inout e : Exception) : void
        int code = 0;
        boolean logException = true;
        if (e instanceof FileNotFoundException) {
            code = 1;
            logException = false;
        } else if (e instanceof IllegalArgumentException) {
            code = 2;
        } else if (e instanceof UnsupportedOperationException) {
            code = 3;
        } else if (e instanceof SQLiteAbortException) {
            code = 4;
        } else if (e instanceof SQLiteConstraintException) {
            code = 5;
        } else if (e instanceof SQLiteDatabaseCorruptException) {
            code = 6;
        } else if (e instanceof SQLiteFullException) {
            code = 7;
        } else if (e instanceof SQLiteDiskIOException) {
            code = 8;
        } else if (e instanceof SQLiteException) {
            code = 9;
        } else if (e instanceof OperationApplicationException) {
            code = 10;
        } else if (e instanceof OperationCanceledException) {
            code = 11;
            logException = false;
        } else {
            reply.writeException(e);
            Log.e(TAG, "Writing exception to parcel", e);
            return;
        }
        reply.writeInt(code);
        reply.writeString(e.getMessage());

        if (logException) {
            Log.e(TAG, "Writing exception to parcel", e);
        }
!!!3282700.java!!!	readExceptionFromParcel(inout reply : Parcel) : void
        int code = reply.readExceptionCode();
        if (code == 0) return;
        String msg = reply.readString();
        DatabaseUtils.readExceptionFromParcel(reply, msg, code);
!!!3282828.java!!!	readExceptionWithFileNotFoundExceptionFromParcel(inout reply : Parcel) : void
        int code = reply.readExceptionCode();
        if (code == 0) return;
        String msg = reply.readString();
        if (code == 1) {
            throw new FileNotFoundException(msg);
        } else {
            DatabaseUtils.readExceptionFromParcel(reply, msg, code);
        }
!!!3282956.java!!!	readExceptionWithOperationApplicationExceptionFromParcel(inout reply : Parcel) : void
        int code = reply.readExceptionCode();
        if (code == 0) return;
        String msg = reply.readString();
        if (code == 10) {
            throw new OperationApplicationException(msg);
        } else {
            DatabaseUtils.readExceptionFromParcel(reply, msg, code);
        }
!!!3283084.java!!!	readExceptionFromParcel(inout reply : Parcel, in msg : String, in code : int) : void
        switch (code) {
            case 2:
                throw new IllegalArgumentException(msg);
            case 3:
                throw new UnsupportedOperationException(msg);
            case 4:
                throw new SQLiteAbortException(msg);
            case 5:
                throw new SQLiteConstraintException(msg);
            case 6:
                throw new SQLiteDatabaseCorruptException(msg);
            case 7:
                throw new SQLiteFullException(msg);
            case 8:
                throw new SQLiteDiskIOException(msg);
            case 9:
                throw new SQLiteException(msg);
            case 11:
                throw new OperationCanceledException(msg);
            default:
                reply.readException(code, msg);
        }
!!!3283212.java!!!	bindObjectToProgram(inout prog : SQLiteProgram, in index : int, inout value : Object) : void
        if (value == null) {
            prog.bindNull(index);
        } else if (value instanceof Double || value instanceof Float) {
            prog.bindDouble(index, ((Number)value).doubleValue());
        } else if (value instanceof Number) {
            prog.bindLong(index, ((Number)value).longValue());
        } else if (value instanceof Boolean) {
            Boolean bool = (Boolean)value;
            if (bool) {
                prog.bindLong(index, 1);
            } else {
                prog.bindLong(index, 0);
            }
        } else if (value instanceof byte[]){
            prog.bindBlob(index, (byte[]) value);
        } else {
            prog.bindString(index, value.toString());
        }
!!!3283340.java!!!	getTypeOfObject(inout obj : Object) : int
        if (obj == null) {
            return Cursor.FIELD_TYPE_NULL;
        } else if (obj instanceof byte[]) {
            return Cursor.FIELD_TYPE_BLOB;
        } else if (obj instanceof Float || obj instanceof Double) {
            return Cursor.FIELD_TYPE_FLOAT;
        } else if (obj instanceof Long || obj instanceof Integer
                || obj instanceof Short || obj instanceof Byte) {
            return Cursor.FIELD_TYPE_INTEGER;
        } else {
            return Cursor.FIELD_TYPE_STRING;
        }
!!!3283468.java!!!	cursorFillWindow(in cursor : Cursor, in position : int, in window : CursorWindow) : void
        if (position < 0 || position >= cursor.getCount()) {
            return;
        }
        final int oldPos = cursor.getPosition();
        final int numColumns = cursor.getColumnCount();
        window.clear();
        window.setStartPosition(position);
        window.setNumColumns(numColumns);
        if (cursor.moveToPosition(position)) {
            do {
                if (!window.allocRow()) {
                    break;
                }
                for (int i = 0; i < numColumns; i++) {
                    final int type = cursor.getType(i);
                    final boolean success;
                    switch (type) {
                        case Cursor.FIELD_TYPE_NULL:
                            success = window.putNull(position, i);
                            break;

                        case Cursor.FIELD_TYPE_INTEGER:
                            success = window.putLong(cursor.getLong(i), position, i);
                            break;

                        case Cursor.FIELD_TYPE_FLOAT:
                            success = window.putDouble(cursor.getDouble(i), position, i);
                            break;

                        case Cursor.FIELD_TYPE_BLOB: {
                            final byte[] value = cursor.getBlob(i);
                            success = value != null ? window.putBlob(value, position, i)
                                    : window.putNull(position, i);
                            break;
                        }

                        default: // assume value is convertible to String
                        case Cursor.FIELD_TYPE_STRING: {
                            final String value = cursor.getString(i);
                            success = value != null ? window.putString(value, position, i)
                                    : window.putNull(position, i);
                            break;
                        }
                    }
                    if (!success) {
                        window.freeLastRow();
                        break;
                    }
                }
                position += 1;
            } while (cursor.moveToNext());
        }
        cursor.moveToPosition(oldPos);
!!!3283596.java!!!	appendEscapedSQLString(inout sb : StringBuilder, in sqlString : String) : void
        sb.append('\'');
        if (sqlString.indexOf('\'') != -1) {
            int length = sqlString.length();
            for (int i = 0; i < length; i++) {
                char c = sqlString.charAt(i);
                if (c == '\'') {
                    sb.append('\'');
                }
                sb.append(c);
            }
        } else
            sb.append(sqlString);
        sb.append('\'');
!!!3283724.java!!!	sqlEscapeString(in value : String) : String
        StringBuilder escaper = new StringBuilder();

        DatabaseUtils.appendEscapedSQLString(escaper, value);

        return escaper.toString();
!!!3283852.java!!!	appendValueToSql(inout sql : StringBuilder, inout value : Object) : void
        if (value == null) {
            sql.append("NULL");
        } else if (value instanceof Boolean) {
            Boolean bool = (Boolean)value;
            if (bool) {
                sql.append('1');
            } else {
                sql.append('0');
            }
        } else {
            appendEscapedSQLString(sql, value.toString());
        }
!!!3283980.java!!!	concatenateWhere(in a : String, in b : String) : String
        if (TextUtils.isEmpty(a)) {
            return b;
        }
        if (TextUtils.isEmpty(b)) {
            return a;
        }

        return "(" + a + ") AND (" + b + ")";
!!!3284108.java!!!	getCollationKey(in name : String) : String
        byte [] arr = getCollationKeyInBytes(name);
        try {
            return new String(arr, 0, getKeyLen(arr), "ISO8859_1");
        } catch (Exception ex) {
            return "";
        }
!!!3284236.java!!!	getHexCollationKey(in name : String) : String
        byte [] arr = getCollationKeyInBytes(name);
        char[] keys = Hex.encodeHex(arr);
        return new String(keys, 0, getKeyLen(arr) * 2);
!!!3284364.java!!!	getKeyLen(inout arr : byte) : int
        if (arr[arr.length - 1] != 0) {
            return arr.length;
        } else {
            // remove zero "termination"
            return arr.length-1;
        }
!!!3284492.java!!!	getCollationKeyInBytes(in name : String) : byte
        if (mColl == null) {
            mColl = Collator.getInstance();
            mColl.setStrength(Collator.PRIMARY);
        }
        return mColl.getCollationKey(name).toByteArray();
!!!3284620.java!!!	dumpCursor(inout cursor : Cursor) : void
        dumpCursor(cursor, System.out);
!!!3284748.java!!!	dumpCursor(inout cursor : Cursor, inout stream : PrintStream) : void
        stream.println(">>>>> Dumping cursor " + cursor);
        if (cursor != null) {
            int startPos = cursor.getPosition();

            cursor.moveToPosition(-1);
            while (cursor.moveToNext()) {
                dumpCurrentRow(cursor, stream);
            }
            cursor.moveToPosition(startPos);
        }
        stream.println("<<<<<");
!!!3284876.java!!!	dumpCursor(inout cursor : Cursor, inout sb : StringBuilder) : void
        sb.append(">>>>> Dumping cursor " + cursor + "\n");
        if (cursor != null) {
            int startPos = cursor.getPosition();

            cursor.moveToPosition(-1);
            while (cursor.moveToNext()) {
                dumpCurrentRow(cursor, sb);
            }
            cursor.moveToPosition(startPos);
        }
        sb.append("<<<<<\n");
!!!3285004.java!!!	dumpCursorToString(inout cursor : Cursor) : String
        StringBuilder sb = new StringBuilder();
        dumpCursor(cursor, sb);
        return sb.toString();
!!!3285132.java!!!	dumpCurrentRow(inout cursor : Cursor) : void
        dumpCurrentRow(cursor, System.out);
!!!3285260.java!!!	dumpCurrentRow(inout cursor : Cursor, inout stream : PrintStream) : void
        String[] cols = cursor.getColumnNames();
        stream.println("" + cursor.getPosition() + " {");
        int length = cols.length;
        for (int i = 0; i< length; i++) {
            String value;
            try {
                value = cursor.getString(i);
            } catch (SQLiteException e) {
                // assume that if the getString threw this exception then the column is not
                // representable by a string, e.g. it is a BLOB.
                value = "<unprintable>";
            }
            stream.println("   " + cols[i] + '=' + value);
        }
        stream.println("}");
!!!3285388.java!!!	dumpCurrentRow(inout cursor : Cursor, inout sb : StringBuilder) : void
        String[] cols = cursor.getColumnNames();
        sb.append("" + cursor.getPosition() + " {\n");
        int length = cols.length;
        for (int i = 0; i < length; i++) {
            String value;
            try {
                value = cursor.getString(i);
            } catch (SQLiteException e) {
                // assume that if the getString threw this exception then the column is not
                // representable by a string, e.g. it is a BLOB.
                value = "<unprintable>";
            }
            sb.append("   " + cols[i] + '=' + value + "\n");
        }
        sb.append("}\n");
!!!3285516.java!!!	dumpCurrentRowToString(inout cursor : Cursor) : String
        StringBuilder sb = new StringBuilder();
        dumpCurrentRow(cursor, sb);
        return sb.toString();
!!!3285644.java!!!	cursorStringToContentValues(inout cursor : Cursor, in field : String, inout values : ContentValues) : void
        cursorStringToContentValues(cursor, field, values, field);
!!!3285772.java!!!	cursorStringToInsertHelper(inout cursor : Cursor, in field : String, inout inserter : InsertHelper, in index : int) : void
        inserter.bind(index, cursor.getString(cursor.getColumnIndexOrThrow(field)));
!!!3285900.java!!!	cursorStringToContentValues(inout cursor : Cursor, in field : String, inout values : ContentValues, in key : String) : void
        values.put(key, cursor.getString(cursor.getColumnIndexOrThrow(field)));
!!!3286028.java!!!	cursorIntToContentValues(inout cursor : Cursor, in field : String, inout values : ContentValues) : void
        cursorIntToContentValues(cursor, field, values, field);
!!!3286156.java!!!	cursorIntToContentValues(inout cursor : Cursor, in field : String, inout values : ContentValues, in key : String) : void
        int colIndex = cursor.getColumnIndex(field);
        if (!cursor.isNull(colIndex)) {
            values.put(key, cursor.getInt(colIndex));
        } else {
            values.put(key, (Integer) null);
        }
!!!3286284.java!!!	cursorLongToContentValues(inout cursor : Cursor, in field : String, inout values : ContentValues) : void
        cursorLongToContentValues(cursor, field, values, field);
!!!3286412.java!!!	cursorLongToContentValues(inout cursor : Cursor, in field : String, inout values : ContentValues, in key : String) : void
        int colIndex = cursor.getColumnIndex(field);
        if (!cursor.isNull(colIndex)) {
            Long value = Long.valueOf(cursor.getLong(colIndex));
            values.put(key, value);
        } else {
            values.put(key, (Long) null);
        }
!!!3286540.java!!!	cursorDoubleToCursorValues(inout cursor : Cursor, in field : String, inout values : ContentValues) : void
        cursorDoubleToContentValues(cursor, field, values, field);
!!!3286668.java!!!	cursorDoubleToContentValues(inout cursor : Cursor, in field : String, inout values : ContentValues, in key : String) : void
        int colIndex = cursor.getColumnIndex(field);
        if (!cursor.isNull(colIndex)) {
            values.put(key, cursor.getDouble(colIndex));
        } else {
            values.put(key, (Double) null);
        }
!!!3286796.java!!!	cursorRowToContentValues(inout cursor : Cursor, inout values : ContentValues) : void
        AbstractWindowedCursor awc =
                (cursor instanceof AbstractWindowedCursor) ? (AbstractWindowedCursor) cursor : null;

        String[] columns = cursor.getColumnNames();
        int length = columns.length;
        for (int i = 0; i < length; i++) {
            if (awc != null && awc.isBlob(i)) {
                values.put(columns[i], cursor.getBlob(i));
            } else {
                values.put(columns[i], cursor.getString(i));
            }
        }
!!!3286924.java!!!	cursorPickFillWindowStartPosition(in cursorPosition : int, in cursorWindowCapacity : int) : int
        return Math.max(cursorPosition - cursorWindowCapacity / 3, 0);
!!!3287052.java!!!	queryNumEntries(inout db : SQLiteDatabase, in table : String) : long
        return queryNumEntries(db, table, null, null);
!!!3287180.java!!!	queryNumEntries(inout db : SQLiteDatabase, in table : String, in selection : String) : long
        return queryNumEntries(db, table, selection, null);
!!!3287308.java!!!	queryNumEntries(inout db : SQLiteDatabase, in table : String, in selection : String, inout selectionArgs : String) : long
        String s = (!TextUtils.isEmpty(selection)) ? " where " + selection : "";
        return longForQuery(db, "select count(*) from " + table + s,
                    selectionArgs);
!!!3287436.java!!!	longForQuery(inout db : SQLiteDatabase, in query : String, inout selectionArgs : String) : long
        SQLiteStatement prog = db.compileStatement(query);
        try {
            return longForQuery(prog, selectionArgs);
        } finally {
            prog.close();
        }
!!!3287564.java!!!	longForQuery(inout prog : SQLiteStatement, inout selectionArgs : String) : long
        prog.bindAllArgsAsStrings(selectionArgs);
        return prog.simpleQueryForLong();
!!!3287692.java!!!	stringForQuery(inout db : SQLiteDatabase, in query : String, inout selectionArgs : String) : String
        SQLiteStatement prog = db.compileStatement(query);
        try {
            return stringForQuery(prog, selectionArgs);
        } finally {
            prog.close();
        }
!!!3287820.java!!!	stringForQuery(inout prog : SQLiteStatement, inout selectionArgs : String) : String
        prog.bindAllArgsAsStrings(selectionArgs);
        return prog.simpleQueryForString();
!!!3287948.java!!!	blobFileDescriptorForQuery(inout db : SQLiteDatabase, in query : String, inout selectionArgs : String) : ParcelFileDescriptor
        SQLiteStatement prog = db.compileStatement(query);
        try {
            return blobFileDescriptorForQuery(prog, selectionArgs);
        } finally {
            prog.close();
        }
!!!3288076.java!!!	blobFileDescriptorForQuery(inout prog : SQLiteStatement, inout selectionArgs : String) : ParcelFileDescriptor
        prog.bindAllArgsAsStrings(selectionArgs);
        return prog.simpleQueryForBlobFileDescriptor();
!!!3288204.java!!!	cursorStringToContentValuesIfPresent(inout cursor : Cursor, inout values : ContentValues, in column : String) : void
        final int index = cursor.getColumnIndex(column);
        if (index != -1 && !cursor.isNull(index)) {
            values.put(column, cursor.getString(index));
        }
!!!3288332.java!!!	cursorLongToContentValuesIfPresent(inout cursor : Cursor, inout values : ContentValues, in column : String) : void
        final int index = cursor.getColumnIndex(column);
        if (index != -1 && !cursor.isNull(index)) {
            values.put(column, cursor.getLong(index));
        }
!!!3288460.java!!!	cursorShortToContentValuesIfPresent(inout cursor : Cursor, inout values : ContentValues, in column : String) : void
        final int index = cursor.getColumnIndex(column);
        if (index != -1 && !cursor.isNull(index)) {
            values.put(column, cursor.getShort(index));
        }
!!!3288588.java!!!	cursorIntToContentValuesIfPresent(inout cursor : Cursor, inout values : ContentValues, in column : String) : void
        final int index = cursor.getColumnIndex(column);
        if (index != -1 && !cursor.isNull(index)) {
            values.put(column, cursor.getInt(index));
        }
!!!3288716.java!!!	cursorFloatToContentValuesIfPresent(inout cursor : Cursor, inout values : ContentValues, in column : String) : void
        final int index = cursor.getColumnIndex(column);
        if (index != -1 && !cursor.isNull(index)) {
            values.put(column, cursor.getFloat(index));
        }
!!!3288844.java!!!	cursorDoubleToContentValuesIfPresent(inout cursor : Cursor, inout values : ContentValues, in column : String) : void
        final int index = cursor.getColumnIndex(column);
        if (index != -1 && !cursor.isNull(index)) {
            values.put(column, cursor.getDouble(index));
        }
!!!3291404.java!!!	createDbFromSqlStatements(inout context : Context, in dbName : String, in dbVersion : int, in sqlStatements : String) : void
        SQLiteDatabase db = context.openOrCreateDatabase(dbName, 0, null);
        // TODO: this is not quite safe since it assumes that all semicolons at the end of a line
        // terminate statements. It is possible that a text field contains ;\n. We will have to fix
        // this if that turns out to be a problem.
        String[] statements = TextUtils.split(sqlStatements, ";\n");
        for (String statement : statements) {
            if (TextUtils.isEmpty(statement)) continue;
            db.execSQL(statement);
        }
        db.setVersion(dbVersion);
        db.close();
!!!3291532.java!!!	getSqlStatementType(in sql : String) : int
        sql = sql.trim();
        if (sql.length() < 3) {
            return STATEMENT_OTHER;
        }
        String prefixSql = sql.substring(0, 3).toUpperCase(Locale.US);
        if (prefixSql.equals("SEL")) {
            return STATEMENT_SELECT;
        } else if (prefixSql.equals("INS") ||
                prefixSql.equals("UPD") ||
                prefixSql.equals("REP") ||
                prefixSql.equals("DEL")) {
            return STATEMENT_UPDATE;
        } else if (prefixSql.equals("ATT")) {
            return STATEMENT_ATTACH;
        } else if (prefixSql.equals("COM")) {
            return STATEMENT_COMMIT;
        } else if (prefixSql.equals("END")) {
            return STATEMENT_COMMIT;
        } else if (prefixSql.equals("ROL")) {
            return STATEMENT_ABORT;
        } else if (prefixSql.equals("BEG")) {
            return STATEMENT_BEGIN;
        } else if (prefixSql.equals("PRA")) {
            return STATEMENT_PRAGMA;
        } else if (prefixSql.equals("CRE") || prefixSql.equals("DRO") ||
                prefixSql.equals("ALT")) {
            return STATEMENT_DDL;
        } else if (prefixSql.equals("ANA") || prefixSql.equals("DET")) {
            return STATEMENT_UNPREPARED;
        }
        return STATEMENT_OTHER;
!!!3291660.java!!!	appendSelectionArgs(inout originalValues : String, inout newValues : String) : String
        if (originalValues == null || originalValues.length == 0) {
            return newValues;
        }
        String[] result = new String[originalValues.length + newValues.length ];
        System.arraycopy(originalValues, 0, result, 0, originalValues.length);
        System.arraycopy(newValues, 0, result, originalValues.length, newValues.length);
        return result;
!!!3291788.java!!!	findRowIdColumnIndex(inout columnNames : String) : int
        int length = columnNames.length;
        for (int i = 0; i < length; i++) {
            if (columnNames[i].equals("_id")) {
                return i;
            }
        }
        return -1;
