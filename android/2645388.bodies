class OmxAmpVC1Port
!!!11131276.cpp!!!	OmxAmpVC1Port(in index : OMX_U32, in dir : OMX_DIRTYPE)
  mDefinition.nPortIndex = index;
  mDefinition.eDir = dir;
  mDefinition.eDomain = OMX_PortDomainVideo;
  getVideoDefinition().eCompressionFormat = OMX_VIDEO_CodingVC1;
  getVideoDefinition().eColorFormat = OMX_COLOR_FormatUnused;
  getVideoDefinition().nFrameWidth = 176;
  getVideoDefinition().nFrameHeight = 144;
  getVideoDefinition().nBitrate = 64000;
  getVideoDefinition().xFramerate = 15<<16;
  updateDomainParameter();
  mFormatHeadSize = 4;
  pVc1Hdr = static_cast<OMX_U8 *>(kdMalloc(mFormatHeadSize));
  pVc1Hdr[0] = 0x00;
  pVc1Hdr[1] = 0x00;
  pVc1Hdr[2] = 0x01;
  pVc1Hdr[3] = 0x0D;
!!!11131404.cpp!!!	~OmxAmpVC1Port()
  if (NULL != pVc1Hdr) {
    kdFree(pVc1Hdr);
    pVc1Hdr = NULL;
  }
!!!11131532.cpp!!!	formatEsData(inout header : OMX_BUFFERHEADERTYPE, in isPadding : OMX_BOOL) : void
  OMX_U8 *buf = header->pBuffer + header->nOffset + mCodecDataSize;
  OMX_U32 len = header->nFilledLen - mCodecDataSize;
  OMX_U32 copy_size;
  if ((buf[0]!=0) || (buf[1] != 0) || (buf[2] != 1) ||
      (buf[3] != 0x0D && buf[3] != 0x0F && buf[3] != 0x0B && buf[3] != 0x0C)) {
    kdMemmove(buf + 4, buf, len);
    kdMemcpy(buf, pVc1Hdr, 4);
    copy_size = 4;
  } else {
    copy_size = 0;
  }
  if (mCodecDataSize) {
    OMX_LOGD("Vc1 first decoder frame.");
    mCodecDataSize = 0;
  }
  header->nFilledLen += copy_size;
  OmxAmpVideoPort::formatEsData(header, isPadding);
