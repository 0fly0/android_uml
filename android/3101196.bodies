class KeyTimerHandler
!!!12945676.java!!!	KeyTimerHandler(inout outerInstance : LatinKeyboardView, inout params : KeyTimerParams)
            super(outerInstance);
            mParams = params;
!!!12945804.java!!!	handleMessage(inout msg : Message) : void
            final LatinKeyboardView keyboardView = getOuterInstance();
            final PointerTracker tracker = (PointerTracker) msg.obj;
            switch (msg.what) {
            case MSG_REPEAT_KEY:
                tracker.onRegisterKey(tracker.getKey());
                startKeyRepeatTimer(tracker, mParams.mKeyRepeatInterval);
                break;
            case MSG_LONGPRESS_KEY:
                if (tracker != null) {
                    keyboardView.openMoreKeysKeyboardIfRequired(tracker.getKey(), tracker);
                } else {
                    KeyboardSwitcher.getInstance().onLongPressTimeout(msg.arg1);
                }
                break;
            case MSG_TYPING_STATE_EXPIRED:
                cancelAndStartAnimators(keyboardView.mAltCodeKeyWhileTypingFadeoutAnimator,
                        keyboardView.mAltCodeKeyWhileTypingFadeinAnimator);
                break;
            }
!!!12945932.java!!!	startKeyRepeatTimer(inout tracker : PointerTracker, in delay : long) : void
            sendMessageDelayed(obtainMessage(MSG_REPEAT_KEY, tracker), delay);
!!!12946060.java!!!	startKeyRepeatTimer(inout tracker : PointerTracker) : void
            mInKeyRepeat = true;
            startKeyRepeatTimer(tracker, mParams.mKeyRepeatStartTimeout);
!!!12946188.java!!!	cancelKeyRepeatTimer() : void
            mInKeyRepeat = false;
            removeMessages(MSG_REPEAT_KEY);
!!!12946316.java!!!	isInKeyRepeat() : boolean
            return mInKeyRepeat;
!!!12946444.java!!!	startLongPressTimer(in code : int) : void
            cancelLongPressTimer();
            final int delay;
            switch (code) {
            case Keyboard.CODE_SHIFT:
                delay = mParams.mLongPressShiftKeyTimeout;
                break;
            default:
                delay = 0;
                break;
            }
            if (delay > 0) {
                sendMessageDelayed(obtainMessage(MSG_LONGPRESS_KEY, code, 0), delay);
            }
!!!12946572.java!!!	startLongPressTimer(inout tracker : PointerTracker) : void
            cancelLongPressTimer();
            if (tracker == null) {
                return;
            }
            final Key key = tracker.getKey();
            final int delay;
            switch (key.mCode) {
            case Keyboard.CODE_SHIFT:
                delay = mParams.mLongPressShiftKeyTimeout;
                break;
            default:
                if (KeyboardSwitcher.getInstance().isInMomentarySwitchState()) {
                    // We use longer timeout for sliding finger input started from the symbols
                    // mode key.
                    delay = mParams.mLongPressKeyTimeout * 3;
                } else {
                    delay = mParams.mLongPressKeyTimeout;
                }
                break;
            }
            if (delay > 0) {
                sendMessageDelayed(obtainMessage(MSG_LONGPRESS_KEY, tracker), delay);
            }
!!!12946700.java!!!	cancelLongPressTimer() : void
            removeMessages(MSG_LONGPRESS_KEY);
!!!12946828.java!!!	cancelAndStartAnimators(in animatorToCancel : ObjectAnimator, in animatorToStart : ObjectAnimator) : void
            float startFraction = 0.0f;
            if (animatorToCancel.isStarted()) {
                animatorToCancel.cancel();
                startFraction = 1.0f - animatorToCancel.getAnimatedFraction();
            }
            final long startTime = (long)(animatorToStart.getDuration() * startFraction);
            animatorToStart.start();
            animatorToStart.setCurrentPlayTime(startTime);
!!!12946956.java!!!	startTypingStateTimer() : void
            final boolean isTyping = isTypingState();
            removeMessages(MSG_TYPING_STATE_EXPIRED);
            sendMessageDelayed(
                    obtainMessage(MSG_TYPING_STATE_EXPIRED), mParams.mIgnoreAltCodeKeyTimeout);
            if (isTyping) {
                return;
            }
            final LatinKeyboardView keyboardView = getOuterInstance();
            cancelAndStartAnimators(keyboardView.mAltCodeKeyWhileTypingFadeinAnimator,
                    keyboardView.mAltCodeKeyWhileTypingFadeoutAnimator);
!!!12947084.java!!!	isTypingState() : boolean
            return hasMessages(MSG_TYPING_STATE_EXPIRED);
!!!12947212.java!!!	startDoubleTapTimer() : void
            sendMessageDelayed(obtainMessage(MSG_DOUBLE_TAP),
                    ViewConfiguration.getDoubleTapTimeout());
!!!12947340.java!!!	cancelDoubleTapTimer() : void
            removeMessages(MSG_DOUBLE_TAP);
!!!12947468.java!!!	isInDoubleTapTimeout() : boolean
            return hasMessages(MSG_DOUBLE_TAP);
!!!12947596.java!!!	cancelKeyTimers() : void
            cancelKeyRepeatTimer();
            cancelLongPressTimer();
!!!12947724.java!!!	cancelAllMessages() : void
            cancelKeyTimers();
