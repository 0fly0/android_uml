class Node
!!!1395099.java!!!	Node(inout parent : Node, inout key : K)
            this.parent = parent;
            this.key = key;
            this.height = 1;
!!!1395227.java!!!	copy(inout parent : Node) : Node
            Node<K, V> result = new Node<K, V>(parent, key);
            if (left != null) {
                result.left = left.copy(result);
            }
            if (right != null) {
                result.right = right.copy(result);
            }
            result.value = value;
            result.height = height;
            return result;
!!!1395355.java!!!	getKey() : K
            return key;
!!!1395483.java!!!	getValue() : V
            return value;
!!!1395611.java!!!	setValue(inout value : V) : V
            V oldValue = this.value;
            this.value = value;
            return oldValue;
!!!1395739.java!!!	equals(inout o : Object) : boolean
            if (o instanceof Map.Entry) {
                Map.Entry other = (Map.Entry) o;
                return (key == null ? other.getKey() == null : key.equals(other.getKey()))
                        && (value == null ? other.getValue() == null : value.equals(other.getValue()));
            }
            return false;
!!!1395867.java!!!	hashCode() : int
            return (key == null ? 0 : key.hashCode())
                    ^ (value == null ? 0 : value.hashCode());
!!!1395995.java!!!	toString() : String
            return key + "=" + value;
!!!1396123.java!!!	next() : Node
            if (right != null) {
                return right.first();
            }

            Node<K, V> node = this;
            Node<K, V> parent = node.parent;
            while (parent != null) {
                if (parent.left == node) {
                    return parent;
                }
                node = parent;
                parent = node.parent;
            }
            return null;
!!!1396251.java!!!	prev() : Node
            if (left != null) {
                return left.last();
            }

            Node<K, V> node = this;
            Node<K, V> parent = node.parent;
            while (parent != null) {
                if (parent.right == node) {
                    return parent;
                }
                node = parent;
                parent = node.parent;
            }
            return null;
!!!1396379.java!!!	first() : Node
            Node<K, V> node = this;
            Node<K, V> child = node.left;
            while (child != null) {
                node = child;
                child = node.left;
            }
            return node;
!!!1396507.java!!!	last() : Node
            Node<K, V> node = this;
            Node<K, V> child = node.right;
            while (child != null) {
                node = child;
                child = node.right;
            }
            return node;
