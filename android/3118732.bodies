class ListeningSsdpSenderImpl
!!!13107340.java!!!	ListeningSsdpSenderImpl(inout executorService : ExecutorService)
    super();
    this.sender = new SsdpSenderImpl();
    this.executorService = executorService;
!!!13107468.java!!!	setAddress(inout multicastAddress : InetAddress) : void
    sender.setAddress(multicastAddress);
!!!13107596.java!!!	setPort(in multicastPort : int) : void
    sender.setPort(multicastPort);
!!!13107724.java!!!	initialize() : void
    sender.initialize();
    sender.getSocket().setTimeToLive(250);
    listening = true;
    executorService.submit(new ReceivingRunnable());
!!!13107852.java!!!	disconnect() : void
    try {
      this.listening = false; 
      // receive blocks with synchronization lock so disconnect stalls for
      // ever if nothing is received...
      // this.socket.disconnect();
      for (int retry = 0; retry < NUM_DISCONNECT_RETRIES; retry++) {
        if (this.stopped) {
          System.err.println("stopped");
          break;
        } else {
          try {
            Thread.sleep(100);
          } catch (InterruptedException e) {
            // Ignore
          }
        }
      }
    } finally {
      sender.dispose();
    }
!!!13107980.java!!!	send(inout request : SsdpRequest) : void
    sender.send(request);
!!!13108108.java!!!	sendMSearchRequest(in searchTarget : String) : void
    // Send an M-SEARCH request for the service, which broadcasts that this
    // device is searching for this particular service to trigger quick
    // responses.
    final SsdpRequest request = new SsdpRequest();
    request.setUri(SsdpRequest.SSDP_URI);
    request.setMethod(HttpRequest.METHOD_M_SEARCH);
    request.setHeaderProperty(SsdpRequest.HEADER_PROPERTY_HOST,
            SsdpRequest.MULTICAST_ADDRESS + ":"
                    + SsdpRequest.MULTICAST_PORT);
    request.setVersion(HttpRequest.VERSION_1_1);
    request.setHeaderProperty(SsdpRequest.HEADER_PROPERTY_MAN,
            SsdpRequest.MAN_SSDP_DISCOVER);
    request.setHeaderProperty(SsdpRequest.HEADER_PROPERTY_MAXIMUM_WAIT,
            MSEARCH_TIMEOUT_SECS);
    request.setSearchTarget(searchTarget);
    executorService.submit(new Runnable() {
      public void run() {
        try {
          send(request);
        } catch (IOException e) {
          e.printStackTrace();
        }
      }
    });
