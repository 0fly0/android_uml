class WebCoreThreadWatchdog
!!!4940684.java!!!	start(inout webCoreThreadHandler : Handler) : WebCoreThreadWatchdog
        if (sInstance == null) {
            sInstance = new WebCoreThreadWatchdog(webCoreThreadHandler);
            new Thread(sInstance, "WebCoreThreadWatchdog").start();
        }
        return sInstance;
!!!4940812.java!!!	registerWebView(inout w : WebViewClassic) : void
        if (sInstance != null) {
            sInstance.addWebView(w);
        }
!!!4940940.java!!!	unregisterWebView(inout w : WebViewClassic) : void
        if (sInstance != null) {
            sInstance.removeWebView(w);
        }
!!!4941068.java!!!	pause() : void
        if (sInstance != null) {
            sInstance.pauseWatchdog();
        }
!!!4941196.java!!!	resume() : void
        if (sInstance != null) {
            sInstance.resumeWatchdog();
        }
!!!4941324.java!!!	addWebView(inout w : WebViewClassic) : void
        if (mWebViews == null) {
            mWebViews = new HashSet<WebViewClassic>();
        }
        mWebViews.add(w);
!!!4941452.java!!!	removeWebView(inout w : WebViewClassic) : void
        mWebViews.remove(w);
!!!4941580.java!!!	WebCoreThreadWatchdog(inout webCoreThreadHandler : Handler)
        mWebCoreThreadHandler = webCoreThreadHandler;
!!!4941708.java!!!	pauseWatchdog() : void
        mPaused = true;

        if (mHandler == null) {
            return;
        }

        mHandler.removeMessages(TIMED_OUT);
        mHandler.removeMessages(IS_ALIVE);
        mWebCoreThreadHandler.removeMessages(EventHub.HEARTBEAT);
!!!4941836.java!!!	resumeWatchdog() : void
        if (!mPaused) {
            // Do nothing if we get a call to resume without being paused.
            // This can happen during the initialisation of the WebView.
            return;
        }

        mPaused = false;

        if (mHandler == null) {
            return;
        }

        mWebCoreThreadHandler.obtainMessage(EventHub.HEARTBEAT,
                mHandler.obtainMessage(IS_ALIVE)).sendToTarget();
        mHandler.sendMessageDelayed(mHandler.obtainMessage(TIMED_OUT), TIMEOUT_PERIOD);
!!!4941964.java!!!	createHandler() : void
        synchronized (WebCoreThreadWatchdog.class) {
            mHandler = new Handler() {
                @Override
                public void handleMessage(Message msg) {
                    switch (msg.what) {
                    case IS_ALIVE:
                        synchronized(WebCoreThreadWatchdog.class) {
                            if (mPaused) {
                                return;
                            }

                            // The WebCore thread still seems alive. Reset the countdown timer.
                            removeMessages(TIMED_OUT);
                            sendMessageDelayed(obtainMessage(TIMED_OUT), TIMEOUT_PERIOD);
                            mWebCoreThreadHandler.sendMessageDelayed(
                                    mWebCoreThreadHandler.obtainMessage(EventHub.HEARTBEAT,
                                            mHandler.obtainMessage(IS_ALIVE)),
                                    HEARTBEAT_PERIOD);
                        }
                        break;

                    case TIMED_OUT:
                        boolean postedDialog = false;
                        synchronized (WebCoreThreadWatchdog.class) {
                            Iterator<WebViewClassic> it = mWebViews.iterator();
                            // Check each WebView we are aware of and find one that is capable of
                            // showing the user a prompt dialog.
                            while (it.hasNext()) {
                                WebView activeView = it.next().getWebView();

                                if (activeView.getWindowToken() != null &&
                                        activeView.getViewRootImpl() != null) {
                                    postedDialog = activeView.post(new PageNotRespondingRunnable(
                                            activeView.getContext(), this));

                                    if (postedDialog) {
                                        // We placed the message into the UI thread for an attached
                                        // WebView so we've made our best attempt to display the
                                        // "page not responding" dialog to the user. Although the
                                        // message is in the queue, there is no guarantee when/if
                                        // the runnable will execute. In the case that the runnable
                                        // never executes, the user will need to terminate the
                                        // process manually.
                                        break;
                                    }
                                }
                            }

                            if (!postedDialog) {
                                // There's no active webview we can use to show the dialog, so
                                // wait again. If we never get a usable view, the user will
                                // never get the chance to terminate the process, and will
                                // need to do it manually.
                                sendMessageDelayed(obtainMessage(TIMED_OUT),
                                        SUBSEQUENT_TIMEOUT_PERIOD);
                            }
                        }
                        break;
                    }
                }
            };
        }
!!!4942092.java!!!	run() : void
        Looper.prepare();

        createHandler();

        // Send the initial control to WebViewCore and start the timeout timer as long as we aren't
        // paused.
        synchronized (WebCoreThreadWatchdog.class) {
            if (!mPaused) {
                mWebCoreThreadHandler.obtainMessage(EventHub.HEARTBEAT,
                        mHandler.obtainMessage(IS_ALIVE)).sendToTarget();
                mHandler.sendMessageDelayed(mHandler.obtainMessage(TIMED_OUT), TIMEOUT_PERIOD);
            }
        }

        Looper.loop();
