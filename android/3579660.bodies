class ChunkHandler
!!!15473292.java!!!	createFailChunk(in errorCode : int, in msg : String) : Chunk
        if (msg == null)
            msg = "";

        ByteBuffer out = ByteBuffer.allocate(8 + msg.length() * 2);
        out.order(ChunkHandler.CHUNK_ORDER);
        out.putInt(errorCode);
        out.putInt(msg.length());
        putString(out, msg);

        return new Chunk(CHUNK_FAIL, out);
!!!15473420.java!!!	wrapChunk(inout request : Chunk) : ByteBuffer
        ByteBuffer in;

        in = ByteBuffer.wrap(request.data, request.offset, request.length);
        in.order(CHUNK_ORDER);
        return in;
!!!15473548.java!!!	getString(inout buf : ByteBuffer, in len : int) : String
        char[] data = new char[len];
        for (int i = 0; i < len; i++)
            data[i] = buf.getChar();
        return new String(data);
!!!15473676.java!!!	putString(inout buf : ByteBuffer, in str : String) : void
        int len = str.length();
        for (int i = 0; i < len; i++)
            buf.putChar(str.charAt(i));
!!!15473804.java!!!	type(in typeName : String) : int
        if (typeName.length() != 4) {
            throw new IllegalArgumentException("Bad type name: " + typeName);
        }
        int result = 0;
        for (int i = 0; i < 4; ++i) {
            result = ((result << 8) | (typeName.charAt(i) & 0xff));
        }
        return result;
!!!15473932.java!!!	name(in type : int) : String
        char[] ascii = new char[4];

        ascii[0] = (char) ((type >> 24) & 0xff);
        ascii[1] = (char) ((type >> 16) & 0xff);
        ascii[2] = (char) ((type >> 8) & 0xff);
        ascii[3] = (char) (type & 0xff);

        return new String(ascii);
