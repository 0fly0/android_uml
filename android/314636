format 74
"threading" // vendor::tv::chrome::plugins::drmserver_adapter::jni::ppapi::utility::threading
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/vendor/tv/chrome/plugins/drmserver_adapter/jni/ppapi/utility/threading/"
  cpp_src_dir "/home/shchen/work/jellybean/vendor/tv/chrome/plugins/drmserver_adapter/jni/ppapi/utility/threading/"
  cpp_namespace "pp"
  classview 274188 "threading"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 2734348 "Lock"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ A simple wrapper around a platform-specific lock. See also AutoLock."
      operation 11533836 "Lock"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ Creates a lock in the \"not held\" state."
      end

      operation 11533964 "~Lock"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
	comment "/ Destroys the lock."
      end

      operation 11534092 "Acquire"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Acquires the lock, blocking if it's already held by a different thread.
/ The lock must not already be held on the current thread (i.e. recursive
/ locks are not supported).
/
/ Most callers should consider using an AutoLock instead to automatically
/ acquire and release the lock."
      end

      operation 11534220 "Release"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Releases the lock. This must be paired with a call to Acquire()."
      end

      class 2816524 "OSLockType"
	visibility package stereotype "typedef" explicit_base_type "pthread_mutex_t"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      classrelation 5245580 // os_lock_ (<directional composition>)
	relation 5245452 *-->
	  a role_name "os_lock_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5245580 // os_lock_ (<directional composition>)
	  b parent class_ref 2816524 // OSLockType
      end

      operation 11534348 "Lock"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 2734348 // Lock
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Copy and assign not supported."
      end

      operation 11534476 "operator ="
	private return_type class_ref 2734348 // Lock
	nparams 1
	  param in name "" type class_ref 2734348 // Lock
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 2812044 "CompletionCallbackFactory"
      visibility package 
      nformals 2
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      formal name "ThreadTraits" type "typename" explicit_default_value "ThreadSafeThreadTraits"
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " namespace internal
 ----------------------------------------------------------------------------
/ CompletionCallbackFactory<T> may be used to create CompletionCallback
/ objects that are bound to member functions.
/
/ If a factory is destroyed, then any pending callbacks will be cancelled
/ preventing any bound member functions from being called.  The CancelAll()
/ method allows pending callbacks to be cancelled without destroying the
/ factory.
/
/ <strong>Note: </strong><code>CompletionCallbackFactory<T></code> isn't
/ thread safe, but it is somewhat thread-friendly when used with a
/ thread-safe traits class as the second template element. However, it
/ only guarantees safety for creating a callback from another thread, the
/ callback itself needs to execute on the same thread as the thread that
/ creates/destroys the factory. With this restriction, it is safe to create
/ the <code>CompletionCallbackFactory</code> on the main thread, create
/ callbacks from any thread and pass them to CallOnMainThread().
/
/ <strong>Example: </strong>
/
/ @code
/   class MyClass {
/    public:
/     // If an compiler warns on following using |this| in the initializer
/     // list, use PP_ALLOW_THIS_IN_INITIALIZER_LIST macro.
/     MyClass() : factory_(this) {
/     }
/
/     void OpenFile(const pp::FileRef& file) {
/       pp::CompletionCallback cc = factory_.NewCallback(&MyClass::DidOpen);
/       int32_t rv = file_io_.Open(file, PP_FileOpenFlag_Read, cc);
/       CHECK(rv == PP_OK_COMPLETIONPENDING);
/     }
/
/    private:
/     void DidOpen(int32_t result) {
/       if (result == PP_OK) {
/         // The file is open, and we can begin reading.
/         // ...
/       } else {
/         // Failed to open the file with error given by 'result'.
/       }
/     }
/
/     pp::CompletionCallbackFactory<MyClass> factory_;
/   };
/ @endcode
/
/ <strong>Passing additional parameters to your callback</strong>
/
/ As a convenience, the <code>CompletionCallbackFactory</code> can optionally
/ create a closure with up to three bound parameters that it will pass to
/ your callback function. This can be useful for passing information about
/ the request to your callback function, which is especially useful if your
/ class has multiple asynchronous callbacks pending.
/
/ For the above example, of opening a file, let's say you want to keep some
/ description associated with your request, you might implement your OpenFile
/ and DidOpen callback as follows:
/
/ @code
/   void OpenFile(const pp::FileRef& file) {
/     std::string message = \"Opening file!\";
/     pp::CompletionCallback cc = factory_.NewCallback(&MyClass::DidOpen,
/                                                      message);
/     int32_t rv = file_io_.Open(file, PP_FileOpenFlag_Read, cc);
/     CHECK(rv == PP_OK_COMPLETIONPENDING);
/   }
/   void DidOpen(int32_t result, const std::string& message) {
/     // \"message\" will be \"Opening file!\".
/     ...
/   }
/ @endcode
/
/ <strong>Optional versus required callbacks</strong>
/
/ When you create an \"optional\" callback, the browser may return the results
/ synchronously if they are available. This can allow for higher performance
/ in some cases if data is available quickly (for example, for network loads
/ where there may be a lot of data coming quickly). In this case, the
/ callback will never be run.
/
/ When creating a new callback with the factory, there will be data allocated
/ on the heap that tracks the callback information and any bound arguments.
/ This data is freed when the callback executes. In the case of optional
/ callbacks, since the browser will never issue the callback, the internal
/ tracking data will be leaked.
/
/ Therefore, if you use optional callbacks, it's important to manually
/ issue the callback to free up this data. The typical pattern is:
/
/ @code
/   pp::CompletionCallback callback = callback_factory.NewOptionalCallback(
/       &MyClass::OnDataReady);
/   int32_t result = interface->GetData(callback);
/   if (result != PP_OK_COMPLETIONPENDING)
/      callback.Run(result);
/ @endcode
/
/ Because of this additional complexity, it's generally recommended that
/ you not use optional callbacks except when performance is more important
/ (such as loading large resources from the network). In most other cases,
/ the performance difference will not be worth the additional complexity,
/ and most functions may never actually have the ability to complete
/ synchronously.
/
/ <strong>Completion callbacks with output</strong>
/
/ For some API calls, the browser returns data to the caller via an output
/ parameter. These can be difficult to manage since the output parameter
/ must remain valid for as long as the callback is pending. Note also that
/ CancelAll (or destroying the callback factory) does <i>not</i> cancel the
/ callback from the browser's perspective, only the execution of the callback
/ in the plugin code, and the output parameter will still be written to!
/ This means that you can't use class members as output parameters without
/ risking crashes.
/
/ To make this case easier, the CompletionCallbackFactory can allocate and
/ manage the output data for you and pass it to your callback function. This
/ makes such calls more natural and less error-prone.
/
/ To create such a callback, use NewCallbackWithOutput and specify a callback
/ function that takes the output parameter as its second argument. Let's say
/ you're calling a function GetFile which asynchronously returns a
/ pp::FileRef. GetFile's signature will be <code>int32_t GetFile(const
/ CompletionCallbackWithOutput<pp::FileRef>& callback);</code> and your
/ calling code would look like this:
/
/ @code
/   void RequestFile() {
/     file_interface->GetFile(callback_factory_.NewCallbackWithOutput(
/         &MyClass::GotFile));
/   }
/   void GotFile(int32_t result, const pp::FileRef& file) {
/     if (result == PP_OK) {
/       ...use file...
/     } else {
/       ...handle error...
/     }
/   }
/ @endcode
/
/ As with regular completion callbacks, you can optionally add up to three
/ bound arguments. These are passed following the output argument.
/
/ Your callback may take the output argument as a copy (common for small
/ types like integers, a const reference (common for structures and
/ resources to avoid an extra copy), or as a non-const reference. One
/ optimization you can do if your callback function may take large arrays
/ is to accept your output argument as a non-const reference and to swap()
/ the argument with a vector of your own to store it. This means you don't
/ have to copy the buffer to consume it."
      operation 11518476 "CompletionCallbackFactory"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "object" explicit_type "T"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} : object_(object) {
    // Assume that we don't need to lock since construction should be complete
    // before the pointer is used on another thread.
    InitBackPointer();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment "/ This constructor creates a <code>CompletionCallbackFactory</code>
/ bound to an object. If the constructor is called without an argument,
/ the default value of <code>NULL</code> is used. The user then must call
/ Initialize() to initialize the object.
/
/ param[in] object Optional parameter. An object whose member functions
/ are to be bound to CompletionCallbacks created by this
/ <code>CompletionCallbackFactory</code>. The default value of this
/ parameter is <code>NULL</code>."
      end

      operation 11518604 "~CompletionCallbackFactory"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
    // Assume that we don't need to lock since this object should not be used
    // from multiple threads during destruction.
    ResetBackPointer();
  };
"
	
	
	
	
	comment "/ Destructor."
      end

      operation 11518732 "CancelAll"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    typename ThreadTraits::AutoLock lock(lock_);

    ResetBackPointer();
    InitBackPointer();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ CancelAll() cancels all <code>CompletionCallbacks</code> allocated from
/ this factory."
      end

      operation 11518860 "Initialize"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "object" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    PP_DCHECK(object);
    PP_DCHECK(!object_);  // May only initialize once!
    object_ = object;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ Initialize() binds the <code>CallbackFactory</code> to a particular
/ object. Use this when the object is not available at
/ <code>CallbackFactory</code> creation, and the <code>NULL</code> default
/ is passed to the constructor. The object may only be initialized once,
/ either by the constructor, or by a call to Initialize().
/
/ This class may not be used on any thread until initialization is complete.
/
/ @param[in] object The object whose member functions are to be bound to
/ the <code>CompletionCallback</code> created by this
/ <code>CompletionCallbackFactory</code>."
      end

      operation 11518988 "GetObject"
	cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    return object_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ GetObject() returns the object that was passed at initialization to
/ Intialize().
/
/ @return the object passed to the constructor or Intialize()."
      end

      operation 11519116 "NewCallback"
	stereotype "template"
	cpp_inline public return_type class_ref 2790284 // CompletionCallback
	nparams 1
	  param in name "method" explicit_type "Method"
	cpp_decl "    ${comment}template<typename Method>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return NewCallbackHelper(new Dispatcher0<Method>(method));
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewCallback allocates a new, single-use <code>CompletionCallback</code>.
/ The <code>CompletionCallback</code> must be run in order for the memory
/ allocated by the methods to be freed.
/
/ @param[in] method The method to be invoked upon completion of the
/ operation.
/
/ @return A <code>CompletionCallback</code>."
      end

      operation 11519244 "NewOptionalCallback"
	stereotype "template"
	cpp_inline public return_type class_ref 2790284 // CompletionCallback
	nparams 1
	  param in name "method" explicit_type "Method"
	cpp_decl "    ${comment}template<typename Method>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    CompletionCallback cc = NewCallback(method);
    cc.set_flags(cc.flags() | PP_COMPLETIONCALLBACK_FLAG_OPTIONAL);
    return cc;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewOptionalCallback() allocates a new, single-use
/ <code>CompletionCallback</code> that might not run if the method
/ taking it can complete synchronously. Thus, if after passing the
/ CompletionCallback to a Pepper method, the method does not return
/ PP_OK_COMPLETIONPENDING, then you should manually call the
/ CompletionCallback's Run method, or memory will be leaked.
/
/ @param[in] method The method to be invoked upon completion of the
/ operation.
/
/ @return A <code>CompletionCallback</code>."
      end

      operation 11519372 "NewCallbackWithOutput"
	stereotype "template"
	cpp_inline public explicit_return_type "CompletionCallbackWithOutput<
      typename internal::TypeUnwrapper<Output>::StorageType>"
	nparams 1
	  param in name "method" explicit_type "void (T::*)(int32_t, Output)"
	cpp_decl "    ${comment}template<typename Output>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}void (T::*${p0})(int32_t, Output)${v0}${)}${const}${volatile}${throw}${abstract} {
    return NewCallbackWithOutputHelper(new DispatcherWithOutput0<
        typename internal::TypeUnwrapper<Output>::StorageType,
        void (T::*)(int32_t, Output)>(method));
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewCallbackWithOutput() allocates a new, single-use
/ <code>CompletionCallback</code> where the browser will pass an additional
/ parameter comtaining the result of the request. The
/ <code>CompletionCallback</code> must be run in order for the memory
/ allocated by the methods to be freed.
/
/ @param[in] method The method to be invoked upon completion of the
/ operation.
/
/ @return A <code>CompletionCallback</code>."
      end

      operation 11519500 "NewCallback"
	stereotype "template"
	cpp_inline public return_type class_ref 2790284 // CompletionCallback
	nparams 2
	  param in name "method" explicit_type "Method"
	  param in name "a" explicit_type "A"
	cpp_decl "    ${comment}template<typename Methodtemplate<typename A>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    return NewCallbackHelper(new Dispatcher1<Method, A>(method, a));
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewCallback() allocates a new, single-use <code>CompletionCallback</code>.
/ The <code>CompletionCallback</code> must be run in order for the memory
/ allocated by the methods to be freed.
/
/ @param[in] method The method to be invoked upon completion of the
/ operation. Method should be of type:
/ <code>void (T::*)(int32_t result, const A& a)</code>
/
/ @param[in] a Passed to <code>method</code> when the completion callback
/ runs.
/
/ @return A <code>CompletionCallback</code>."
      end

      operation 11519628 "NewOptionalCallback"
	stereotype "template"
	cpp_inline public return_type class_ref 2790284 // CompletionCallback
	nparams 2
	  param in name "method" explicit_type "Method"
	  param in name "a" explicit_type "A"
	cpp_decl "    ${comment}template<typename Methodtemplate<typename A>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    CompletionCallback cc = NewCallback(method, a);
    cc.set_flags(cc.flags() | PP_COMPLETIONCALLBACK_FLAG_OPTIONAL);
    return cc;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewOptionalCallback() allocates a new, single-use
/ <code>CompletionCallback</code> that might not run if the method
/ taking it can complete synchronously. Thus, if after passing the
/ CompletionCallback to a Pepper method, the method does not return
/ PP_OK_COMPLETIONPENDING, then you should manually call the
/ CompletionCallback's Run method, or memory will be leaked.
/
/ @param[in] method The method to be invoked upon completion of the
/ operation. Method should be of type:
/ <code>void (T::*)(int32_t result, const A& a)</code>
/
/ @param[in] a Passed to <code>method</code> when the completion callback
/ runs.
/
/ @return A <code>CompletionCallback</code>."
      end

      operation 11519756 "NewCallbackWithOutput"
	stereotype "template"
	cpp_inline public explicit_return_type "CompletionCallbackWithOutput<
      typename internal::TypeUnwrapper<Output>::StorageType>"
	nparams 2
	  param in name "method" explicit_type "void (T::*)(int32_t, Output, A)"
	  param in name "a" explicit_type "A"
	cpp_decl "    ${comment}template<typename Outputtemplate<typename A>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}void (T::*${p0})(int32_t, Output, A)${v0}, const ${t1} & ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
    return NewCallbackWithOutputHelper(new DispatcherWithOutput1<
        typename internal::TypeUnwrapper<Output>::StorageType,
        void (T::*)(int32_t, Output, A),
        typename internal::TypeUnwrapper<A>::StorageType>(method, a));
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewCallbackWithOutput() allocates a new, single-use
/ <code>CompletionCallback</code> where the browser will pass an additional
/ parameter comtaining the result of the request. The
/ <code>CompletionCallback</code> must be run in order for the memory
/ allocated by the methods to be freed.
/
/ @param[in] method The method to be invoked upon completion of the
/ operation.
/
/ @param[in] a Passed to <code>method</code> when the completion callback
/ runs.
/
/ @return A <code>CompletionCallback</code>."
      end

      operation 11519884 "NewCallback"
	stereotype "template"
	cpp_inline public return_type class_ref 2790284 // CompletionCallback
	nparams 3
	  param in name "method" explicit_type "Method"
	  param in name "a" explicit_type "A"
	  param in name "b" explicit_type "B"
	cpp_decl "    ${comment}template<typename Methodtemplate<typename Atemplate<typename B>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
    return NewCallbackHelper(new Dispatcher2<Method, A, B>(method, a, b));
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewCallback() allocates a new, single-use
/ <code>CompletionCallback</code>.
/ The <code>CompletionCallback</code> must be run in order for the memory
/ allocated by the methods to be freed.
/
/ @param method The method taking the callback. Method should be of type:
/ <code>void (T::*)(int32_t result, const A& a, const B& b)</code>
/
/ @param[in] a Passed to <code>method</code> when the completion callback
/ runs.
/
/ @param[in] b Passed to <code>method</code> when the completion callback
/ runs.
/
/ @return A <code>CompletionCallback</code>."
      end

      operation 11520012 "NewOptionalCallback"
	stereotype "template"
	cpp_inline public return_type class_ref 2790284 // CompletionCallback
	nparams 3
	  param in name "method" explicit_type "Method"
	  param in name "a" explicit_type "A"
	  param in name "b" explicit_type "B"
	cpp_decl "    ${comment}template<typename Methodtemplate<typename Atemplate<typename B>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
    CompletionCallback cc = NewCallback(method, a, b);
    cc.set_flags(cc.flags() | PP_COMPLETIONCALLBACK_FLAG_OPTIONAL);
    return cc;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewOptionalCallback() allocates a new, single-use
/ <code>CompletionCallback</code> that might not run if the method
/ taking it can complete synchronously. Thus, if after passing the
/ CompletionCallback to a Pepper method, the method does not return
/ PP_OK_COMPLETIONPENDING, then you should manually call the
/ CompletionCallback's Run method, or memory will be leaked.
/
/ @param[in] method The method taking the callback. Method should be of
/ type:
/ <code>void (T::*)(int32_t result, const A& a, const B& b)</code>
/
/ @param[in] a Passed to <code>method</code> when the completion callback
/ runs.
/
/ @param[in] b Passed to <code>method</code> when the completion callback
/ runs.
/
/ @return A <code>CompletionCallback</code>."
      end

      operation 11520140 "NewCallbackWithOutput"
	stereotype "template"
	cpp_inline public explicit_return_type "CompletionCallbackWithOutput<
      typename internal::TypeUnwrapper<Output>::StorageType>"
	nparams 3
	  param in name "method" explicit_type "void (T::*)(int32_t, Output, A, B)"
	  param in name "a" explicit_type "A"
	  param in name "b" explicit_type "B"
	cpp_decl "    ${comment}template<typename Outputtemplate<typename Atemplate<typename B>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}void (T::*${p0})(int32_t, Output, A, B)${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${const}${volatile}${throw}${abstract} {
    return NewCallbackWithOutputHelper(new DispatcherWithOutput2<
        typename internal::TypeUnwrapper<Output>::StorageType,
        void (T::*)(int32_t, Output, A, B),
        typename internal::TypeUnwrapper<A>::StorageType,
        typename internal::TypeUnwrapper<B>::StorageType>(method, a, b));
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewCallbackWithOutput() allocates a new, single-use
/ <code>CompletionCallback</code> where the browser will pass an additional
/ parameter comtaining the result of the request. The
/ <code>CompletionCallback</code> must be run in order for the memory
/ allocated by the methods to be freed.
/
/ @param[in] method The method to be invoked upon completion of the
/ operation.
/
/ @param[in] a Passed to <code>method</code> when the completion callback
/ runs.
/
/ @param[in] b Passed to <code>method</code> when the completion callback
/ runs.
/
/ @return A <code>CompletionCallback</code>."
      end

      operation 11520268 "NewCallback"
	stereotype "template"
	cpp_inline public return_type class_ref 2790284 // CompletionCallback
	nparams 4
	  param in name "method" explicit_type "Method"
	  param in name "a" explicit_type "A"
	  param in name "b" explicit_type "B"
	  param in name "c" explicit_type "C"
	cpp_decl "    ${comment}template<typename Methodtemplate<typename Atemplate<typename Btemplate<typename C>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
    return NewCallbackHelper(new Dispatcher3<Method, A, B, C>(method, a, b, c));
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewCallback() allocates a new, single-use
/ <code>CompletionCallback</code>.
/ The <code>CompletionCallback</code> must be run in order for the memory
/ allocated by the methods to be freed.
/
/ @param method The method taking the callback. Method should be of type:
/ <code>
/ void (T::*)(int32_t result, const A& a, const B& b, const C& c)
/ </code>
/
/ @param[in] a Passed to <code>method</code> when the completion callback
/ runs.
/
/ @param[in] b Passed to <code>method</code> when the completion callback
/ runs.
/
/ @param[in] c Passed to <code>method</code> when the completion callback
/ runs.
/
/ @return A <code>CompletionCallback</code>."
      end

      operation 11520396 "NewOptionalCallback"
	stereotype "template"
	cpp_inline public return_type class_ref 2790284 // CompletionCallback
	nparams 4
	  param in name "method" explicit_type "Method"
	  param in name "a" explicit_type "A"
	  param in name "b" explicit_type "B"
	  param in name "c" explicit_type "C"
	cpp_decl "    ${comment}template<typename Methodtemplate<typename Atemplate<typename Btemplate<typename C>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
    CompletionCallback cc = NewCallback(method, a, b, c);
    cc.set_flags(cc.flags() | PP_COMPLETIONCALLBACK_FLAG_OPTIONAL);
    return cc;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewOptionalCallback() allocates a new, single-use
/ <code>CompletionCallback</code> that might not run if the method
/ taking it can complete synchronously. Thus, if after passing the
/ CompletionCallback to a Pepper method, the method does not return
/ PP_OK_COMPLETIONPENDING, then you should manually call the
/ CompletionCallback's Run method, or memory will be leaked.
/
/ @param[in] method The method taking the callback. Method should be of
/ type:
/ <code>
/ void (T::*)(int32_t result, const A& a, const B& b, const C& c)
/ </code>
/
/ @param[in] a Passed to <code>method</code> when the completion callback
/ runs.
/
/ @param[in] b Passed to <code>method</code> when the completion callback
/ runs.
/
/ @param[in] c Passed to <code>method</code> when the completion callback
/ runs.
/
/ @return A <code>CompletionCallback</code>."
      end

      operation 11520524 "NewCallbackWithOutput"
	stereotype "template"
	cpp_inline public explicit_return_type "CompletionCallbackWithOutput<
      typename internal::TypeUnwrapper<Output>::StorageType>"
	nparams 4
	  param in name "method" explicit_type "void (T::*)(int32_t, Output, A, B, C)"
	  param in name "a" explicit_type "A"
	  param in name "b" explicit_type "B"
	  param in name "c" explicit_type "C"
	cpp_decl "    ${comment}template<typename Outputtemplate<typename Atemplate<typename Btemplate<typename C>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}void (T::*${p0})(int32_t, Output, A, B, C)${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${const}${volatile}${throw}${abstract} {
    return NewCallbackWithOutputHelper(new DispatcherWithOutput3<
        typename internal::TypeUnwrapper<Output>::StorageType,
        void (T::*)(int32_t, Output, A, B, C),
        typename internal::TypeUnwrapper<A>::StorageType,
        typename internal::TypeUnwrapper<B>::StorageType,
        typename internal::TypeUnwrapper<C>::StorageType>(method, a, b, c));
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "/ NewCallbackWithOutput() allocates a new, single-use
/ <code>CompletionCallback</code> where the browser will pass an additional
/ parameter comtaining the result of the request. The
/ <code>CompletionCallback</code> must be run in order for the memory
/ allocated by the methods to be freed.
/
/ @param method The method to be run.
/
/ @param[in] a Passed to <code>method</code> when the completion callback
/ runs.
/
/ @param[in] b Passed to <code>method</code> when the completion callback
/ runs.
/
/ @param[in] c Passed to <code>method</code> when the completion callback
/ runs.
/
/ @return A <code>CompletionCallback</code>."
      end

      class 2812172 "BackPointer"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 2812300 "FactoryType"
	  visibility package stereotype "typedef" explicit_base_type "CompletionCallbackFactory<T, ThreadTraits>"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	operation 11520652 "BackPointer"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "factory" type class_ref 2812300 // FactoryType
	  cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} : factory_(factory) {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11520780 "AddRef"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      ref_.AddRef();
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11520908 "Release"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      if (ref_.Release() == 0)
        delete this;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11521036 "DropFactory"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      factory_ = NULL;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11521164 "GetObject"
	  cpp_inline public explicit_return_type "T"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return factory_ ? factory_->GetObject() : NULL;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 10055692 "ref_"
	  private explicit_type "ThreadTraits::RefCount"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}typename ${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 5242508 // factory_ (<unidirectional association>)
	  relation 5242380 --->
	    a role_name "factory_" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5242508 // factory_ (<unidirectional association>)
	    b parent class_ref 2812300 // FactoryType
	end
      end

      class 2812428 "CallbackData"
	visibility package 
	nformals 1
	formal name "Dispatcher" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11521292 "CallbackData"
	  cpp_inline public explicit_return_type ""
	  nparams 2
	    param inout name "back_pointer" type class_ref 2812172 // BackPointer
	    param inout name "dispatcher" explicit_type "Dispatcher"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} * ${p0}${v0}, ${t1} * ${p1}${v1}${)}${volatile}${throw} : back_pointer_(back_pointer),
          dispatcher_(dispatcher) {
      back_pointer_->AddRef();
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment " Takes ownership of the given dispatcher pointer."
	end

	operation 11521420 "~CallbackData"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
      back_pointer_->Release();
      delete dispatcher_;
    };
"
	  
	  
	  
	  
	end

	operation 11521548 "dispatcher"
	  cpp_inline public explicit_return_type "Dispatcher"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return dispatcher_; };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 11521676 "Thunk"
	  class_operation cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "user_data" explicit_type "void"
	    param in name "result" type class_ref 2409996 // int32_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      Self* self = static_cast<Self*>(user_data);
      T* object = self->back_pointer_->GetObject();

      // Please note that |object| may be NULL at this point. But we still need
      // to call into Dispatcher::operator() in that case, so that it can do
      // necessary cleanup.
      (*self->dispatcher_)(object, result);

      delete self;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 2812556 "Self"
	  visibility package stereotype "typedef" explicit_base_type "CallbackData<Dispatcher>"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	classrelation 5242636 // back_pointer_ (<unidirectional association>)
	  relation 5242508 --->
	    a role_name "back_pointer_" private
	      comment " We own a ref to this refcounted object."
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5242636 // back_pointer_ (<unidirectional association>)
	    b parent class_ref 2812172 // BackPointer
	end

	attribute 10055820 "dispatcher_"
	  private explicit_type "Dispatcher"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " We own this pointer."
	end

	operation 11521804 "CallbackData"
	  private explicit_return_type ""
	  nparams 1
	    param in name "" type class_ref 2812428 // CallbackData
	  cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment " Disallow copying & assignment."
	end

	operation 11521932 "operator ="
	  private return_type class_ref 2812428 // CallbackData
	  nparams 1
	    param in name "" type class_ref 2812428 // CallbackData
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  
	  
	  
	  
	end
      end

      class 2812684 "Dispatcher0"
	visibility package 
	nformals 1
	formal name "Method" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11522060 "Dispatcher0"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : method_(NULL) {};
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11522188 "Dispatcher0"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "method" explicit_type "Method"
	  cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : method_(method) {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11522316 "operator ()"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "object" explicit_type "T"
	    param in name "result" type class_ref 2409996 // int32_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      if (object)
        (object->*method_)(result);
    };
"
	  
	  
	  
	  
	end

	attribute 10055948 "method_"
	  private explicit_type "Method"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 2812812 "DispatcherWithOutput0"
	visibility package 
	nformals 2
	formal name "Output" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "Method" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 2812940 "OutputType"
	  visibility package stereotype "typedef" explicit_base_type "Output"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	class 2813068 "Traits"
	  visibility package stereotype "typedef" explicit_base_type "internal::CallbackOutputTraits<Output>"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	operation 11522444 "DispatcherWithOutput0"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : method_(NULL),
          output_() {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11522572 "DispatcherWithOutput0"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param in name "method" explicit_type "Method"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}${)}${volatile}${throw} : method_(method),
          output_() {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11522700 "operator ()"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "object" explicit_type "T"
	    param in name "result" type class_ref 2409996 // int32_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      // We must call Traits::StorageToPluginArg() even if we don't need to call
      // the callback anymore, otherwise we may leak resource or var references.
      if (object)
        (object->*method_)(result, Traits::StorageToPluginArg(output_));
      else
        Traits::StorageToPluginArg(output_);
    };
"
	  
	  
	  
	  
	end

	operation 11522828 "output"
	  cpp_inline public explicit_return_type "Traits::StorageType"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}typename ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return &output_;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 10056076 "method_"
	  private explicit_type "Method"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10056204 "output_"
	  private explicit_type "Traits::StorageType"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}typename ${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 2813196 "Dispatcher1"
	visibility package 
	nformals 2
	formal name "Method" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "A" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11522956 "Dispatcher1"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : method_(NULL),
          a_() {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11523084 "Dispatcher1"
	  cpp_inline public explicit_return_type ""
	  nparams 2
	    param in name "method" explicit_type "Method"
	    param in name "a" explicit_type "A"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw} : method_(method),
          a_(a) {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11523212 "operator ()"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "object" explicit_type "T"
	    param in name "result" type class_ref 2409996 // int32_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      if (object)
        (object->*method_)(result, a_);
    };
"
	  
	  
	  
	  
	end

	attribute 10056332 "method_"
	  private explicit_type "Method"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10056460 "a_"
	  private explicit_type "A"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 2813324 "DispatcherWithOutput1"
	visibility package 
	nformals 3
	formal name "Output" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "Method" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "A" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 2813452 "OutputType"
	  visibility package stereotype "typedef" explicit_base_type "Output"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	class 2813580 "Traits"
	  visibility package stereotype "typedef" explicit_base_type "internal::CallbackOutputTraits<Output>"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	operation 11523340 "DispatcherWithOutput1"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : method_(NULL),
          a_(),
          output_() {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11523468 "DispatcherWithOutput1"
	  cpp_inline public explicit_return_type ""
	  nparams 2
	    param in name "method" explicit_type "Method"
	    param in name "a" explicit_type "A"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}${)}${volatile}${throw} : method_(method),
          a_(a),
          output_() {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11523596 "operator ()"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "object" explicit_type "T"
	    param in name "result" type class_ref 2409996 // int32_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      // We must call Traits::StorageToPluginArg() even if we don't need to call
      // the callback anymore, otherwise we may leak resource or var references.
      if (object)
        (object->*method_)(result, Traits::StorageToPluginArg(output_), a_);
      else
        Traits::StorageToPluginArg(output_);
    };
"
	  
	  
	  
	  
	end

	operation 11523724 "output"
	  cpp_inline public explicit_return_type "Traits::StorageType"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}typename ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return &output_;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 10056588 "method_"
	  private explicit_type "Method"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10056716 "a_"
	  private explicit_type "A"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10056844 "output_"
	  private explicit_type "Traits::StorageType"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}typename ${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 2813708 "Dispatcher2"
	visibility package 
	nformals 3
	formal name "Method" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "A" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "B" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11523852 "Dispatcher2"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : method_(NULL),
          a_(),
          b_() {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11523980 "Dispatcher2"
	  cpp_inline public explicit_return_type ""
	  nparams 3
	    param in name "method" explicit_type "Method"
	    param in name "a" explicit_type "A"
	    param in name "b" explicit_type "B"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${volatile}${throw} : method_(method),
          a_(a),
          b_(b) {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11524108 "operator ()"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "object" explicit_type "T"
	    param in name "result" type class_ref 2409996 // int32_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      if (object)
        (object->*method_)(result, a_, b_);
    };
"
	  
	  
	  
	  
	end

	attribute 10056972 "method_"
	  private explicit_type "Method"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10057100 "a_"
	  private explicit_type "A"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10057228 "b_"
	  private explicit_type "B"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 2813836 "DispatcherWithOutput2"
	visibility package 
	nformals 4
	formal name "Output" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "Method" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "A" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "B" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 2813964 "OutputType"
	  visibility package stereotype "typedef" explicit_base_type "Output"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	class 2814092 "Traits"
	  visibility package stereotype "typedef" explicit_base_type "internal::CallbackOutputTraits<Output>"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	operation 11524236 "DispatcherWithOutput2"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : method_(NULL),
          a_(),
          b_(),
          output_() {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11524364 "DispatcherWithOutput2"
	  cpp_inline public explicit_return_type ""
	  nparams 3
	    param in name "method" explicit_type "Method"
	    param in name "a" explicit_type "A"
	    param in name "b" explicit_type "B"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}${)}${volatile}${throw} : method_(method),
          a_(a),
          b_(b),
          output_() {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11524492 "operator ()"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "object" explicit_type "T"
	    param in name "result" type class_ref 2409996 // int32_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      // We must call Traits::StorageToPluginArg() even if we don't need to call
      // the callback anymore, otherwise we may leak resource or var references.
      if (object)
        (object->*method_)(result, Traits::StorageToPluginArg(output_), a_, b_);
      else
        Traits::StorageToPluginArg(output_);
    };
"
	  
	  
	  
	  
	end

	operation 11524620 "output"
	  cpp_inline public explicit_return_type "Traits::StorageType"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}typename ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return &output_;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 10057356 "method_"
	  private explicit_type "Method"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10057484 "a_"
	  private explicit_type "A"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10057612 "b_"
	  private explicit_type "B"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10057740 "output_"
	  private explicit_type "Traits::StorageType"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}typename ${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 2814220 "Dispatcher3"
	visibility package 
	nformals 4
	formal name "Method" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "A" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "B" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "C" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11524748 "Dispatcher3"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : method_(NULL),
          a_(),
          b_(),
          c_() {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11524876 "Dispatcher3"
	  cpp_inline public explicit_return_type ""
	  nparams 4
	    param in name "method" explicit_type "Method"
	    param in name "a" explicit_type "A"
	    param in name "b" explicit_type "B"
	    param in name "c" explicit_type "C"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${volatile}${throw} : method_(method),
          a_(a),
          b_(b),
          c_(c) {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11525004 "operator ()"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "object" explicit_type "T"
	    param in name "result" type class_ref 2409996 // int32_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      if (object)
        (object->*method_)(result, a_, b_, c_);
    };
"
	  
	  
	  
	  
	end

	attribute 10057868 "method_"
	  private explicit_type "Method"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10057996 "a_"
	  private explicit_type "A"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10058124 "b_"
	  private explicit_type "B"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10058252 "c_"
	  private explicit_type "C"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 2814348 "DispatcherWithOutput3"
	visibility package 
	nformals 5
	formal name "Output" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "Method" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "A" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "B" type "typename" explicit_default_value ""
	  explicit_extends ""
	formal name "C" type "typename" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 2814476 "OutputType"
	  visibility package stereotype "typedef" explicit_base_type "Output"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	class 2814604 "Traits"
	  visibility package stereotype "typedef" explicit_base_type "internal::CallbackOutputTraits<Output>"
	  cpp_decl "${comment}typedef ${type} ${name};
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	end

	operation 11525132 "DispatcherWithOutput3"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : method_(NULL),
          a_(),
          b_(),
          c_(),
          output_() {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11525260 "DispatcherWithOutput3"
	  cpp_inline public explicit_return_type ""
	  nparams 4
	    param in name "method" explicit_type "Method"
	    param in name "a" explicit_type "A"
	    param in name "b" explicit_type "B"
	    param in name "c" explicit_type "C"
	  cpp_decl "    ${comment}${inline}${name}${(}${t0} ${p0}${v0}, const ${t1} & ${p1}${v1}, const ${t2} & ${p2}${v2}, const ${t3} & ${p3}${v3}${)}${volatile}${throw} : method_(method),
          a_(a),
          b_(b),
          c_(c),
          output_() {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11525388 "operator ()"
	  cpp_inline public explicit_return_type "void"
	  nparams 2
	    param inout name "object" explicit_type "T"
	    param in name "result" type class_ref 2409996 // int32_t
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}, ${t1} ${p1}${v1}${)}${const}${volatile}${throw}${abstract} {
      // We must call Traits::StorageToPluginArg() even if we don't need to call
      // the callback anymore, otherwise we may leak resource or var references.
      if (object) {
        (object->*method_)(result, Traits::StorageToPluginArg(output_),
                           a_, b_, c_);
      } else {
        Traits::StorageToPluginArg(output_);
      }
    };
"
	  
	  
	  
	  
	end

	operation 11525516 "output"
	  cpp_inline public explicit_return_type "Traits::StorageType"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}typename ${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      return &output_;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 10058380 "method_"
	  private explicit_type "Method"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10058508 "a_"
	  private explicit_type "A"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10058636 "b_"
	  private explicit_type "B"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10058764 "c_"
	  private explicit_type "C"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10058892 "output_"
	  private explicit_type "Traits::StorageType"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}typename ${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 11525644 "InitBackPointer"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    back_pointer_ = new BackPointer(this);
    back_pointer_->AddRef();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creates the back pointer object and takes a reference to it. This assumes
 either that the lock is held or that it is not needed."
      end

      operation 11525772 "ResetBackPointer"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    back_pointer_->DropFactory();
    back_pointer_->Release();
    back_pointer_ = NULL;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Releases our reference to the back pointer object and clears the pointer.
 This assumes either that the lock is held or that it is not needed."
      end

      operation 11525900 "NewCallbackHelper"
	stereotype "template"
	cpp_inline private return_type class_ref 2790284 // CompletionCallback
	nparams 1
	  param inout name "dispatcher" explicit_type "Dispatcher"
	cpp_decl "    ${comment}template<typename Dispatcher>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    typename ThreadTraits::AutoLock lock(lock_);

    PP_DCHECK(object_);  // Expects a non-null object!
    return CompletionCallback(
        &CallbackData<Dispatcher>::Thunk,
        new CallbackData<Dispatcher>(back_pointer_, dispatcher));
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Takes ownership of the dispatcher pointer, which should be heap allocated."
      end

      operation 11526028 "NewCallbackWithOutputHelper"
	stereotype "template"
	cpp_inline private explicit_return_type "CompletionCallbackWithOutput<
      typename internal::TypeUnwrapper<
          typename Dispatcher::OutputType>::StorageType>"
	nparams 1
	  param inout name "dispatcher" explicit_type "Dispatcher"
	cpp_decl "    ${comment}template<typename Dispatcher>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    typename ThreadTraits::AutoLock lock(lock_);

    PP_DCHECK(object_);  // Expects a non-null object!
    CallbackData<Dispatcher>* data =
        new CallbackData<Dispatcher>(back_pointer_, dispatcher);

    return CompletionCallbackWithOutput<typename Dispatcher::OutputType>(
        &CallbackData<Dispatcher>::Thunk,
        data,
        data->dispatcher()->output());
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Takes ownership of the dispatcher pointer, which should be heap allocated."
      end

      operation 11526156 "CompletionCallbackFactory"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 2812044 // CompletionCallbackFactory
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Disallowed:"
      end

      operation 11526284 "operator ="
	private return_type class_ref 2812044 // CompletionCallbackFactory
	nparams 1
	  param in name "" type class_ref 2812044 // CompletionCallbackFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end

      attribute 10059020 "object_"
	private explicit_type "T"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 10059148 "lock_"
	private explicit_type "ThreadTraits::Lock"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}typename ${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5242764 // back_pointer_ (<unidirectional association>)
	relation 5242636 --->
	  a role_name "back_pointer_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5242764 // back_pointer_ (<unidirectional association>)
	  b parent class_ref 2812172 // BackPointer
      end
    end

    class 2814732 "ThreadSafeThreadTraits"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ @file
/ Defines the traits structures for thread-safety of a completion callback
/ factory. We provide thread-safe and non-thread-safe version. The thread-safe
/ version is always correct (if you follow the thread usage rules of the
/ callback factory), but if you know your object will only be used on one
/ thread, you can uses the non-thread-safe version.
/
/ The traits defines three nested classes to perform reference counting,
/ locks, and scoped locking.
/ The thread-safe version of thread traits. Using this class as the \"traits\"
/ template argument to a completion callback factory will make it \"somewhat
/ thread-friendly.\" It will allow you to create completion callbacks from
/ background threads and post them to another thread to run.
/
/ Care still must be taken to ensure that the completion callbacks are
/ executed on the same thread that the factory is destroyed on to avoid a
/ race on destruction.
/
/ Implementation note: this uses a lock instead of atomic add instructions.
/ The number of platforms we need to support right now makes atomic
/ operations unwieldy for this case that we don't actually use that often.
/ As a further optimization, we can add support for this later."
      class 2814860 "RefCount"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11526412 "RefCount"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : ref_(0) {
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment "/ Default constructor. In debug mode, this checks that the object is being
/ created on the main thread."
	end

	operation 11526540 "AddRef"
	  cpp_inline public return_type class_ref 2409996 // int32_t
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      AutoLock lock(lock_);
      return ++ref_;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "/ AddRef() increments the reference counter.
/
/ @return An int32_t with the incremented reference counter."
	end

	operation 11526668 "Release"
	  cpp_inline public return_type class_ref 2409996 // int32_t
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      AutoLock lock(lock_);
      PP_DCHECK(ref_ > 0);
      return --ref_;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "/ Release() decrements the reference counter.
/
/ @return An int32_t with the decremeneted reference counter."
	end

	classrelation 5242892 // lock_ (<directional composition>)
	  relation 5242764 *-->
	    a role_name "lock_" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5242892 // lock_ (<directional composition>)
	    b parent class_ref 2814988 // Lock
	end

	classrelation 5243020 // ref_ (<directional composition>)
	  relation 5242892 *-->
	    a role_name "ref_" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5243020 // ref_ (<directional composition>)
	    b parent class_ref 2409996 // int32_t
	end
      end

      class 2814988 "Lock"
	visibility package stereotype "typedef" base_type class_ref 2814988 // Lock
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 5243148 // <dependency>
	  relation 5243020 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 5243148 // <dependency>
	    b parent class_ref 2814988 // Lock
	end
      end

      class 2815116 "AutoLock"
	visibility package stereotype "typedef" base_type class_ref 2815116 // AutoLock
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 5243276 // <dependency>
	  relation 5243148 -_->
	    a default
	      cpp default "#include in source"
	      classrelation_ref 5243276 // <dependency>
	    b parent class_ref 2815116 // AutoLock
	end
      end
    end

    class 2815244 "NonThreadSafeThreadTraits"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ The non-thread-safe version of thread traits. Using this class as the
/ \"traits\" template argument to a completion callback factory will make it
/ not thread-safe but with potential extra performance."
      class 2815372 "RefCount"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11526796 "RefCount"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} : ref_(0) {
#ifndef NDEBUG
      is_main_thread_ = Module::Get()->core()->IsMainThread();
#endif
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	  comment "/ Default constructor. In debug mode, this checks that the object is being
/ created on the main thread."
	end

	operation 11526924 "~RefCount"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
      PP_DCHECK(is_main_thread_ == Module::Get()->core()->IsMainThread());
    };
"
	  
	  
	  
	  
	  comment "/ Destructor."
	end

	operation 11527052 "AddRef"
	  cpp_inline public return_type class_ref 2409996 // int32_t
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      PP_DCHECK(is_main_thread_ == Module::Get()->core()->IsMainThread());
      return ++ref_;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "/ AddRef() increments the reference counter.
/
/ @return An int32_t with the incremented reference counter."
	end

	operation 11527180 "Release"
	  cpp_inline public return_type class_ref 2409996 // int32_t
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
      PP_DCHECK(is_main_thread_ == Module::Get()->core()->IsMainThread());
      return --ref_;
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "/ Release() decrements the reference counter.
/
/ @return An int32_t with the decremeneted reference counter."
	end

	classrelation 5243404 // ref_ (<directional composition>)
	  relation 5243276 *-->
	    a role_name "ref_" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5243404 // ref_ (<directional composition>)
	    b parent class_ref 2409996 // int32_t
	end

	attribute 10059276 "is_main_thread_"
	  private type class_ref 2322828 // bool
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 2815500 "Lock"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11527308 "Lock"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw} {
#ifndef NDEBUG
      is_main_thread_ = Module::Get()->core()->IsMainThread();
      lock_held_ = false;
#endif
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11527436 "~Lock"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
      PP_DCHECK(is_main_thread_ == Module::Get()->core()->IsMainThread());
    };
"
	  
	  
	  
	  
	end

	operation 11527564 "Acquire"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
#ifndef NDEBUG
      PP_DCHECK(!lock_held_);
      lock_held_ = true;
#endif
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "/ Acquires the fake \"lock\". This does nothing except perform checks in
/ debug mode."
	end

	operation 11527692 "Release"
	  cpp_inline public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
#ifndef NDEBUG
      PP_DCHECK(lock_held_);
      lock_held_ = false;
#endif
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "/ Releases the fake \"lock\". This does nothing except perform checks in
/ debug mode."
	end

	attribute 10059404 "is_main_thread_"
	  private type class_ref 2322828 // bool
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 10059532 "lock_held_"
	  private type class_ref 2322828 // bool
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 2815628 "AutoLock"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 11527820 "AutoLock"
	  cpp_inline public explicit_return_type ""
	  nparams 1
	    param inout name "lock" type class_ref 2815500 // Lock
	  cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw} : lock_(lock) {
      lock_.Acquire();
    };
"
	  java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	  
	  
	  
	end

	operation 11527948 "~AutoLock"
	  cpp_inline public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
      lock_.Release();
    };
"
	  
	  
	  
	  
	end

	classrelation 5243532 // lock_ (<unidirectional association>)
	  relation 5243404 --->
	    a role_name "lock_" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 5243532 // lock_ (<unidirectional association>)
	    b parent class_ref 2815500 // Lock
	end
      end
    end

    class 2816652 "AutoLock"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "/ A helper class that scopes holding a lock.
/
/ @code
/   class MyClass {
/    public:
/     void DoSomething() {
/       pp::AutoLock lock(lock_);
/       ...do something with the lock held...
/     }
/
/    private:
/     pp::Lock lock_;
/   };
/ @endcode"
      operation 11534604 "AutoLock"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "lock" type class_ref 2734348 // Lock
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} & ${p0}${v0}${)}${volatile}${throw} : lock_(lock) {
    lock_.Acquire();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11534732 "~AutoLock"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} {
    lock_.Release();
  };
"
	
	
	
	
      end

      classrelation 5245708 // lock_ (<unidirectional association>)
	relation 5245580 --->
	  a role_name "lock_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} & ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5245708 // lock_ (<unidirectional association>)
	  b parent class_ref 2734348 // Lock
      end

      operation 11534860 "AutoLock"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 2816652 // AutoLock
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Copy and assign not supported."
      end

      operation 11534988 "operator ="
	private return_type class_ref 2816652 // AutoLock
	nparams 1
	  param in name "" type class_ref 2816652 // AutoLock
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end

    class 2816780 "SimpleThread"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This class is a simple wrapper around a pthread/Windows thread that creates
 and runs a PPAPI message loop on that thread."
      class 2816908 "ThreadHandle"
	visibility package stereotype "typedef" explicit_base_type "pthread_t"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      class 2817036 "ThreadFunc"
	visibility package stereotype "typedef" explicit_base_type "void"
	cpp_decl "${comment}typedef ${type}(* ${name})(MessageLoop&, void* user_data);
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 11535116 "SimpleThread"
	public explicit_return_type ""
	nparams 1
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11535244 "SimpleThread"
	public explicit_return_type ""
	nparams 2
	  param in name "instance" type class_ref 2790028 // InstanceHandle
	  param in name "stacksize" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11535372 "~SimpleThread"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${throw}{
  ${body}}
"
	
	
	
	
      end

      operation 11535500 "Start"
	public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Starts a thread and runs a message loop in it. If you need control over
 how the message loop is run, use StartWithFunction. Returns true on
 success, false if the thread is already running or couldn't be started."
      end

      operation 11535628 "Join"
	public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Posts a quit message to the message loop and blocks until the thread
 exits. Returns true on success. If the thread is not running, returns
 false."
      end

      operation 11535756 "StartWithFunction"
	public return_type class_ref 2322828 // bool
	nparams 2
	  param in name "func" type class_ref 2817036 // ThreadFunc
	  param inout name "user_data" explicit_type "void"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} ${p0}${v0}, ${t1} * ${p1}${v1}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${t0} ${p0}, ${t1} * ${p1}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Normally you can just use Start() to start a thread, and then post work to
 it. In some cases you will want control over the message. If ThreadFunc
 is NULL, this acts the same as Start()."
      end

      operation 11535884 "message_loop"
	cpp_inline public return_type class_ref 2794124 // MessageLoop
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return message_loop_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11536012 "thread"
	const cpp_inline public return_type class_ref 2816908 // ThreadHandle
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} { return thread_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 5245836 // instance_ (<directional composition>)
	relation 5245708 *-->
	  a role_name "instance_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5245836 // instance_ (<directional composition>)
	  b parent class_ref 2790028 // InstanceHandle
      end

      classrelation 5245964 // message_loop_ (<directional composition>)
	relation 5245836 *-->
	  a role_name "message_loop_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5245964 // message_loop_ (<directional composition>)
	  b parent class_ref 2794124 // MessageLoop
      end

      attribute 10060556 "stacksize_"
	const_attribute private explicit_type "size_t"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5246092 // thread_ (<directional composition>)
	relation 5245964 *-->
	  a role_name "thread_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5246092 // thread_ (<directional composition>)
	  b parent class_ref 2816908 // ThreadHandle
      end

      operation 11536140 "SimpleThread"
	private explicit_return_type ""
	nparams 1
	  param in name "" type class_ref 2816780 // SimpleThread
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Disallow (not implemented)."
      end

      operation 11536268 "SimpleThread"
	private explicit_return_type ""
	nparams 2
	  param in name "" type class_ref 2816780 // SimpleThread
	  param in name "stacksize" explicit_type "size_t"
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}, ${t1} ${p1}${v1}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}const ${t0} & ${p0}, ${t1} ${p1}${)}${throw}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11536396 "operator ="
	private return_type class_ref 2816780 // SimpleThread
	nparams 1
	  param in name "" type class_ref 2816780 // SimpleThread
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} & ${class}::${name}${(}const ${t0} & ${p0}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	
	
	
	
      end
    end
  end

  deploymentview 262668 "threading"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1061900 "completion_callback_factory"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2812044 // CompletionCallbackFactory
      end
    end

    artifact 1062028 "completion_callback_factory_thread_traits"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2814732 // ThreadSafeThreadTraits
	class_ref 2815244 // NonThreadSafeThreadTraits
      end
    end

    artifact 1062540 "lock"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2734348 // Lock
	class_ref 2816652 // AutoLock
      end
    end

    artifact 1062668 "simple_thread"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2816780 // SimpleThread
      end
    end
  end
end
