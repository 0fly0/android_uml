class YouTubeStreamFinderTask
!!!12748556.java!!!	doInBackground(inout  : String...videoIds) : Uri
        if (videoIds.length != 1) {
            return null;
        }

        final String videoId = videoIds[0];

        String bestVideoUrl = null;

        try {
            Log.d(LOG_TAG, "finding stream for video: " + videoId);
            URL url = new URL(GET_VIDEO_INFO_URL + videoId);
            URLConnection urlConnection = url.openConnection();
            InputStream in = new BufferedInputStream(urlConnection.getInputStream());

            ByteArrayOutputStream out = new ByteArrayOutputStream(4096);
            readStreamToStream(in, out);
            String data = out.toString();

            String params[] = data.split("\\&");
            String streamMap = null;
            for (int i = 0; i < params.length; ++i) {
                if (params[i].startsWith(STREAM_MAP_KEY)) {
                    streamMap = URLDecoder.decode(params[i].substring(STREAM_MAP_KEY.length()));
                    Log.d(LOG_TAG, "found stream map");
                    break;
                }
            }

            if (streamMap == null) {
                Log.w(LOG_TAG, "didn't find stream map");
                return null;
            }

            String streams[] = streamMap.split("\\,");
            Log.d(LOG_TAG, "stream map has " + streams.length + " entries");
            int bestFormatIndex = -1;

            for (int i = 0; i < streams.length; ++i) {
                Log.d(LOG_TAG, "stream map entry " + i + ": " + streams[i]);
                String[] streamParams = streams[i].split("\\&");
                String videoUrl = null;
                int formatIndex = -1;

                for (int j = 0; j < streamParams.length; ++j) {
                    if (streamParams[j].startsWith(ITAG_KEY)) {
                        int itag = Integer.parseInt(streamParams[j].substring(ITAG_KEY.length()));
                        formatIndex = findFormat(itag);
                    } else if (streamParams[j].startsWith(URL_KEY)) {
                        videoUrl = URLDecoder.decode(streamParams[j].substring(URL_KEY.length()));
                    }
                }

                if (formatIndex != -1) {
                    Log.d(LOG_TAG, "considering itag=" + ITAG_SEARCH_ORDER[formatIndex]
                            + ", url=" + videoUrl);
                }

                if (formatIndex > bestFormatIndex) {
                    bestFormatIndex = formatIndex;
                    bestVideoUrl = videoUrl;
                }
            }

        } catch (IOException ex) {
            Log.e(LOG_TAG, "IO exception", ex);
        }

        Log.d(LOG_TAG, "bestVideoUrl=" + bestVideoUrl);

        return (bestVideoUrl == null) ? null : Uri.parse(bestVideoUrl);
!!!12748684.java!!!	findFormat(in itag : int) : int
        for (int i = 0; i < ITAG_SEARCH_ORDER.length; ++i) {
            if (itag == ITAG_SEARCH_ORDER[i]) {
                return i;
            }
        }

        return -1;
!!!12748812.java!!!	readStreamToStream(inout input : InputStream, inout output : OutputStream) : OutputStream
        byte buf[] = new byte[4096];
        int b;

        while ((b = input.read(buf)) > 0) {
            output.write(buf, 0, b);
        }

        return output;
