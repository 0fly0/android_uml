class GtvStatusBar
!!!13350412.java!!!	shouldShowNotification(inout entry : Entry) : boolean
        return (isDeviceProvisioned() || showNotificationEvenIfUnprovisioned(entry.notification))
                && notificationIsForCurrentUser(entry.notification);
!!!13350540.java!!!	expandNotification(inout entry : Entry) : void
        expandView(entry, true);
        entry.setUserExpanded(true);
!!!13350668.java!!!	shrinkNotification(inout entry : Entry) : void
        expandView(entry, false);
        entry.setUserExpanded(false);
!!!13350796.java!!!	clearNotification(inout sbn : StatusBarNotification, inout v : View) : void
        v.announceForAccessibility(mContext.getString(
                R.string.accessibility_notification_dismissed));
        try {
            mBarService.onNotificationClear(sbn.pkg, sbn.tag, sbn.id);
        } catch (RemoteException ex) {
        }
!!!13350924.java!!!	clearAllNotifications() : void
        try {
            mBarService.onClearAllNotifications();
        } catch (RemoteException ex) {
        }
!!!13351052.java!!!	createAndAddWindows() : void
        mWindowManager.getDefaultDisplay().getMetrics(mDisplayMetrics);

        // Ticker and notification use the same window type.
        // Add ticker later to show it on top of notification panel.
        addNotificationPanel();
        addTicker();

        registerBroadcastReceiver();
!!!13351180.java!!!	addNotificationPanel() : void
        final Resources res = mContext.getResources();

        mNotificationPanel = (NotificationPanel) View.inflate(mContext,
                R.layout.tv_notification_panel, null);
        mNotificationPanel.setBar(this);

        mBluetoothController = new BluetoothController(mContext);
        mBluetoothController.addIconView(
                (ImageView) mNotificationPanel.findViewById(R.id.bluetooth));

        mNetworkController = new TvNetworkController(mContext);
        mNetworkController.addCombinedSignalIconView(
                (ImageView) mNotificationPanel.findViewById(R.id.network));
        mNetworkController.addCombinedLabelView(
                (TextView) mNotificationPanel.findViewById(R.id.network_text));

        WindowManager.LayoutParams lp = new WindowManager.LayoutParams(
                res.getDimensionPixelSize(R.dimen.notification_panel_width),
                ViewGroup.LayoutParams.WRAP_CONTENT,
                WindowManager.LayoutParams.TYPE_NAVIGATION_BAR_PANEL,
                WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
                    | WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM
                    | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH
                    | WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,
                PixelFormat.TRANSLUCENT);
        lp.gravity = Gravity.BOTTOM | Gravity.LEFT;
        lp.verticalMargin = res.getDimension(R.dimen.notification_panel_margin_bottom)
                / mDisplayMetrics.heightPixels;
        lp.setTitle("NotificationPanel");
        lp.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_STATE_UNCHANGED
                | WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING;
        mWindowManager.addView(mNotificationPanel, lp);

        mPile = (NotificationRowLayout) mNotificationPanel.findViewById(R.id.pile);
!!!13351308.java!!!	addTicker() : void
        final Resources res = mContext.getResources();

        mTicker = new Ticker(mContext);

        WindowManager.LayoutParams lp = new WindowManager.LayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT,
                res.getDimensionPixelSize(com.android.internal.R.dimen.navigation_bar_height),
                WindowManager.LayoutParams.TYPE_NAVIGATION_BAR_PANEL,
                WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN
                    | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
                    | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE,
                PixelFormat.TRANSLUCENT);
        lp.gravity = Gravity.BOTTOM | Gravity.RIGHT;
        lp.setTitle("Ticker");
        lp.horizontalMargin = res.getDimension(R.dimen.notification_ticker_margin_right)
                / mDisplayMetrics.widthPixels;
        lp.verticalMargin = res.getDimension(R.dimen.notification_ticker_margin_bottom)
                / mDisplayMetrics.heightPixels;
        mWindowManager.addView(mTicker, lp);
!!!13351436.java!!!	registerBroadcastReceiver() : void
        IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_CLOSE_SYSTEM_DIALOGS);
        filter.addAction(Intent.ACTION_SCREEN_OFF);

        BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
            public void onReceive(Context context, Intent intent) {
                String action = intent.getAction();
                if (Intent.ACTION_CLOSE_SYSTEM_DIALOGS.equals(action)
                        || Intent.ACTION_SCREEN_OFF.equals(action)) {
                    int flags = CommandQueue.FLAG_EXCLUDE_NONE;
                    if (Intent.ACTION_CLOSE_SYSTEM_DIALOGS.equals(action)) {
                        String reason = intent.getStringExtra("reason");
                        if (reason != null && reason.equals(SYSTEM_DIALOG_REASON_RECENT_APPS)) {
                            flags |= CommandQueue.FLAG_EXCLUDE_RECENTS_PANEL;
                        }
                    }
                    animateCollapsePanels(flags);
                }
            }
        };

        mContext.registerReceiver(broadcastReceiver, filter);
!!!13351564.java!!!	userSwitched(in newUserId : int) : void
        animateCollapsePanels();
        updateNotificationIcons();
!!!13351692.java!!!	getRecentsLayoutParams(inout layoutParams : LayoutParams) : LayoutParams
        return null;
!!!13351820.java!!!	getSearchLayoutParams(inout layoutParams : LayoutParams) : LayoutParams
        return null;
!!!13351948.java!!!	getStatusBarView() : View
        // Provide ticker, to prevent crash during launching recent apps.
        return mTicker;
!!!13352076.java!!!	inflateViews(inout entry : Entry, inout parent : ViewGroup) : boolean
        if (!super.inflateViews(entry, parent)) return false;

        mNotificationPanel.setUpNotificationEntry(entry);
        return true;
!!!13352204.java!!!	haltTicker() : void
        mTicker.halt();
!!!13352460.java!!!	updateNotificationIcons() : void
        if (mNotificationPanel == null) return;

        mNotificationPanel.load(mNotificationData);
        // Nothing to do for icons
!!!13352588.java!!!	tick(inout key : IBinder, inout sbn : StatusBarNotification, inout firstTime : boolean) : void
        if (!isDeviceProvisioned()) return;
        if (!notificationIsForCurrentUser(sbn)) return;

        if ((mSystemUiVisibility & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) return;
        if ((mDisabled & (StatusBarManager.DISABLE_NOTIFICATION_ICONS
                | StatusBarManager.DISABLE_NOTIFICATION_TICKER)) != 0) {
            return;
        }
        if (!firstTime && (sbn.notification.flags & Notification.FLAG_ONLY_ALERT_ONCE) != 0) {
            return;
        }

        mTicker.add(key, sbn);
!!!13352844.java!!!	getExpandedViewMaxHeight() : int
        return 0;
!!!13352972.java!!!	shouldDisableNavbarGestures() : boolean
        return true;
!!!13353100.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        if (mNetworkController != null) {
            pw.println("mNetworkController:");
            mNetworkController.dump(fd, pw, args);
        } else {
            pw.println("mNetworkController: null");
        }
!!!13353612.java!!!	addNotification(inout key : IBinder, inout sbn : StatusBarNotification) : void
        if (DEBUG) Slog.d(TAG, "addNotification(" + key + " -> " + sbn + ")");

        StatusBarIconView iconView = addNotificationViews(key, sbn);
        if (iconView == null) return;

        // TODO: immersive mode popups for TV
        if (sbn.notification.fullScreenIntent != null) {
            // not immersive & a full-screen alert should be shown
            Slog.w(TAG, "Notification has fullScreenIntent and activity is not immersive;"
                    + " sending fullScreenIntent");
            try {
                sbn.notification.fullScreenIntent.send();
            } catch (PendingIntent.CanceledException e) {
            }
        } else {
            tick(key, sbn, true);
        }
!!!13353740.java!!!	removeNotification(inout key : IBinder) : void
        if (DEBUG) Slog.d(TAG, "removeNotification(" + key + ")");
        removeNotificationViews(key);
        mTicker.remove(key);
!!!13353868.java!!!	disable(in state : int) : void
        final int old = mDisabled;
        final int diff = state ^ old;
        mDisabled = state;

        // DISABLE_EXPAND prevents touch expansion only, and does not entirely disable panels.
        if ((diff & StatusBarManager.DISABLE_EXPAND) != 0
               && (state & StatusBarManager.DISABLE_EXPAND) != 0) {
            animateCollapsePanels();
        }

        if (((diff & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0
                    && (state & StatusBarManager.DISABLE_NOTIFICATION_ICONS) != 0)
                || ((diff & StatusBarManager.DISABLE_NOTIFICATION_TICKER) != 0
                    && (state & StatusBarManager.DISABLE_NOTIFICATION_TICKER) != 0)) {
            haltTicker();
        }
!!!13353996.java!!!	animateExpandNotificationsPanel() : void
        mNotificationPanel.show(true);
!!!13354124.java!!!	animateCollapsePanels() : void
        animateCollapsePanels(CommandQueue.FLAG_EXCLUDE_NONE);
        visibilityChanged(false);
!!!13354252.java!!!	animateCollapsePanels(in flags : int) : void
        if ((flags & CommandQueue.FLAG_EXCLUDE_NOTIFICATION_PANEL) == 0) {
            mNotificationPanel.show(false);
        }
!!!13354508.java!!!	setSystemUiVisibility(in vis : int, in mask : int) : void
        final int oldVal = mSystemUiVisibility;
        final int newVal = (oldVal & ~mask) | (vis & mask);
        final int diff = newVal ^ oldVal;

        if (diff == 0) return;

        mSystemUiVisibility = newVal;

        if ((diff & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0
                && (vis & View.SYSTEM_UI_FLAG_LOW_PROFILE) != 0) {
            animateCollapsePanels();
            haltTicker();
        }

        notifyUiVisibilityChanged();
!!!13354636.java!!!	notifyUiVisibilityChanged() : void
        try {
            mWindowManagerService.statusBarVisibilityChanged(mSystemUiVisibility);
        } catch (RemoteException ex) {
        }
