class DirectByteBuffer
!!!716059.java!!!	DirectByteBuffer(inout block : MemoryBlock, in capacity : int, in offset : int, inout isReadOnly : boolean, inout mapMode : MapMode)
    super(block, capacity, mapMode);

    long baseSize = block.getSize();
    if (baseSize >= 0 && (capacity + offset) > baseSize) {
      throw new IllegalArgumentException("capacity + offset > baseSize");
    }

    this.effectiveDirectAddress = block.toLong() + offset;

    this.offset = offset;
    this.isReadOnly = isReadOnly;
!!!716187.java!!!	DirectByteBuffer(in address : long, in capacity : int)
    this(MemoryBlock.wrapFromJni(address, capacity), capacity, 0, false, null);
!!!716315.java!!!	copy(inout other : DirectByteBuffer, in markOfOther : int, inout isReadOnly : boolean) : DirectByteBuffer
    DirectByteBuffer buf = new DirectByteBuffer(other.block, other.capacity(), other.offset, isReadOnly, other.mapMode);
    buf.limit = other.limit;
    buf.position = other.position();
    buf.mark = markOfOther;
    return buf;
!!!716443.java!!!	asReadOnlyBuffer() : ByteBuffer
    return copy(this, mark, true);
!!!716571.java!!!	compact() : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    Memory.memmove(this, 0, this, position, remaining());
    position = limit - position;
    limit = capacity;
    mark = UNSET_MARK;
    return this;
!!!716699.java!!!	duplicate() : ByteBuffer
    return copy(this, mark, isReadOnly);
!!!716827.java!!!	slice() : ByteBuffer
    return new DirectByteBuffer(block, remaining(), offset + position, isReadOnly, mapMode);
!!!716955.java!!!	isReadOnly() : boolean
    return isReadOnly;
!!!717083.java!!!	protectedArray() : byte
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    byte[] array = this.block.array();
    if (array == null) {
      throw new UnsupportedOperationException();
    }
    return array;
!!!717211.java!!!	protectedArrayOffset() : int
    protectedArray(); // Throw if we don't have an array or are read-only.
    return offset;
!!!717339.java!!!	protectedHasArray() : boolean
    return !isReadOnly && (block.array() != null);
!!!717467.java!!!	get(inout dst : byte, in dstOffset : int, in byteCount : int) : ByteBuffer
    checkGetBounds(1, dst.length, dstOffset, byteCount);
    this.block.peekByteArray(offset + position, dst, dstOffset, byteCount);
    position += byteCount;
    return this;
!!!717595.java!!!	get(inout dst : char, in dstOffset : int, in charCount : int) : void
    int byteCount = checkGetBounds(SizeOf.CHAR, dst.length, dstOffset, charCount);
    this.block.peekCharArray(offset + position, dst, dstOffset, charCount, order.needsSwap);
    position += byteCount;
!!!717723.java!!!	get(inout dst : double, in dstOffset : int, in doubleCount : int) : void
    int byteCount = checkGetBounds(SizeOf.DOUBLE, dst.length, dstOffset, doubleCount);
    this.block.peekDoubleArray(offset + position, dst, dstOffset, doubleCount, order.needsSwap);
    position += byteCount;
!!!717851.java!!!	get(inout dst : float, in dstOffset : int, in floatCount : int) : void
    int byteCount = checkGetBounds(SizeOf.FLOAT, dst.length, dstOffset, floatCount);
    this.block.peekFloatArray(offset + position, dst, dstOffset, floatCount, order.needsSwap);
    position += byteCount;
!!!717979.java!!!	get(inout dst : int, in dstOffset : int, in intCount : int) : void
    int byteCount = checkGetBounds(SizeOf.INT, dst.length, dstOffset, intCount);
    this.block.peekIntArray(offset + position, dst, dstOffset, intCount, order.needsSwap);
    position += byteCount;
!!!718107.java!!!	get(inout dst : long, in dstOffset : int, in longCount : int) : void
    int byteCount = checkGetBounds(SizeOf.LONG, dst.length, dstOffset, longCount);
    this.block.peekLongArray(offset + position, dst, dstOffset, longCount, order.needsSwap);
    position += byteCount;
!!!718235.java!!!	get(inout dst : short, in dstOffset : int, in shortCount : int) : void
    int byteCount = checkGetBounds(SizeOf.SHORT, dst.length, dstOffset, shortCount);
    this.block.peekShortArray(offset + position, dst, dstOffset, shortCount, order.needsSwap);
    position += byteCount;
!!!718363.java!!!	get() : byte
    if (position == limit) {
      throw new BufferUnderflowException();
    }
    return this.block.peekByte(offset + position++);
!!!718491.java!!!	get(in index : int) : byte
    checkIndex(index);
    return this.block.peekByte(offset + index);
!!!718619.java!!!	getChar() : char
    int newPosition = position + SizeOf.CHAR;
    if (newPosition > limit) {
      throw new BufferUnderflowException();
    }
    char result = (char) this.block.peekShort(offset + position, order);
    position = newPosition;
    return result;
!!!718747.java!!!	getChar(in index : int) : char
    checkIndex(index, SizeOf.CHAR);
    return (char) this.block.peekShort(offset + index, order);
!!!718875.java!!!	getDouble() : double
    int newPosition = position + SizeOf.DOUBLE;
    if (newPosition > limit) {
      throw new BufferUnderflowException();
    }
    double result = Double.longBitsToDouble(this.block.peekLong(offset + position, order));
    position = newPosition;
    return result;
!!!719003.java!!!	getDouble(in index : int) : double
    checkIndex(index, SizeOf.DOUBLE);
    return Double.longBitsToDouble(this.block.peekLong(offset + index, order));
!!!719131.java!!!	getFloat() : float
    int newPosition = position + SizeOf.FLOAT;
    if (newPosition > limit) {
      throw new BufferUnderflowException();
    }
    float result = Float.intBitsToFloat(this.block.peekInt(offset + position, order));
    position = newPosition;
    return result;
!!!719259.java!!!	getFloat(in index : int) : float
    checkIndex(index, SizeOf.FLOAT);
    return Float.intBitsToFloat(this.block.peekInt(offset + index, order));
!!!719387.java!!!	getInt() : int
    int newPosition = position + SizeOf.INT;
    if (newPosition > limit) {
      throw new BufferUnderflowException();
    }
    int result = this.block.peekInt(offset + position, order);
    position = newPosition;
    return result;
!!!719515.java!!!	getInt(in index : int) : int
    checkIndex(index, SizeOf.INT);
    return this.block.peekInt(offset + index, order);
!!!719643.java!!!	getLong() : long
    int newPosition = position + SizeOf.LONG;
    if (newPosition > limit) {
      throw new BufferUnderflowException();
    }
    long result = this.block.peekLong(offset + position, order);
    position = newPosition;
    return result;
!!!719771.java!!!	getLong(in index : int) : long
    checkIndex(index, SizeOf.LONG);
    return this.block.peekLong(offset + index, order);
!!!719899.java!!!	getShort() : short
    int newPosition = position + SizeOf.SHORT;
    if (newPosition > limit) {
      throw new BufferUnderflowException();
    }
    short result = this.block.peekShort(offset + position, order);
    position = newPosition;
    return result;
!!!720027.java!!!	getShort(in index : int) : short
    checkIndex(index, SizeOf.SHORT);
    return this.block.peekShort(offset + index, order);
!!!720155.java!!!	isDirect() : boolean
    return true;
!!!720283.java!!!	free() : void
    block.free();
!!!720411.java!!!	asCharBuffer() : CharBuffer
    return ByteBufferAsCharBuffer.asCharBuffer(this);
!!!720539.java!!!	asDoubleBuffer() : DoubleBuffer
    return ByteBufferAsDoubleBuffer.asDoubleBuffer(this);
!!!720667.java!!!	asFloatBuffer() : FloatBuffer
    return ByteBufferAsFloatBuffer.asFloatBuffer(this);
!!!720795.java!!!	asIntBuffer() : IntBuffer
    return ByteBufferAsIntBuffer.asIntBuffer(this);
!!!720923.java!!!	asLongBuffer() : LongBuffer
    return ByteBufferAsLongBuffer.asLongBuffer(this);
!!!721051.java!!!	asShortBuffer() : ShortBuffer
    return ByteBufferAsShortBuffer.asShortBuffer(this);
!!!721179.java!!!	put(in value : byte) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    if (position == limit) {
      throw new BufferOverflowException();
    }
    this.block.pokeByte(offset + position++, value);
    return this;
!!!721307.java!!!	put(in index : int, in value : byte) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index);
    this.block.pokeByte(offset + index, value);
    return this;
!!!721435.java!!!	put(inout src : byte, in srcOffset : int, in byteCount : int) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkPutBounds(1, src.length, srcOffset, byteCount);
    this.block.pokeByteArray(offset + position, src, srcOffset, byteCount);
    position += byteCount;
    return this;
!!!721563.java!!!	put(inout src : char, in srcOffset : int, in charCount : int) : void
    int byteCount = checkPutBounds(SizeOf.CHAR, src.length, srcOffset, charCount);
    this.block.pokeCharArray(offset + position, src, srcOffset, charCount, order.needsSwap);
    position += byteCount;
!!!721691.java!!!	put(inout src : double, in srcOffset : int, in doubleCount : int) : void
    int byteCount = checkPutBounds(SizeOf.DOUBLE, src.length, srcOffset, doubleCount);
    this.block.pokeDoubleArray(offset + position, src, srcOffset, doubleCount, order.needsSwap);
    position += byteCount;
!!!721819.java!!!	put(inout src : float, in srcOffset : int, in floatCount : int) : void
    int byteCount = checkPutBounds(SizeOf.FLOAT, src.length, srcOffset, floatCount);
    this.block.pokeFloatArray(offset + position, src, srcOffset, floatCount, order.needsSwap);
    position += byteCount;
!!!721947.java!!!	put(inout src : int, in srcOffset : int, in intCount : int) : void
    int byteCount = checkPutBounds(SizeOf.INT, src.length, srcOffset, intCount);
    this.block.pokeIntArray(offset + position, src, srcOffset, intCount, order.needsSwap);
    position += byteCount;
!!!722075.java!!!	put(inout src : long, in srcOffset : int, in longCount : int) : void
    int byteCount = checkPutBounds(SizeOf.LONG, src.length, srcOffset, longCount);
    this.block.pokeLongArray(offset + position, src, srcOffset, longCount, order.needsSwap);
    position += byteCount;
!!!722203.java!!!	put(inout src : short, in srcOffset : int, in shortCount : int) : void
    int byteCount = checkPutBounds(SizeOf.SHORT, src.length, srcOffset, shortCount);
    this.block.pokeShortArray(offset + position, src, srcOffset, shortCount, order.needsSwap);
    position += byteCount;
!!!722331.java!!!	putChar(in value : char) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    int newPosition = position + SizeOf.CHAR;
    if (newPosition > limit) {
      throw new BufferOverflowException();
    }
    this.block.pokeShort(offset + position, (short) value, order);
    position = newPosition;
    return this;
!!!722459.java!!!	putChar(in index : int, in value : char) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index, SizeOf.CHAR);
    this.block.pokeShort(offset + index, (short) value, order);
    return this;
!!!722587.java!!!	putDouble(in value : double) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    int newPosition = position + SizeOf.DOUBLE;
    if (newPosition > limit) {
      throw new BufferOverflowException();
    }
    this.block.pokeLong(offset + position, Double.doubleToRawLongBits(value), order);
    position = newPosition;
    return this;
!!!722715.java!!!	putDouble(in index : int, in value : double) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index, SizeOf.DOUBLE);
    this.block.pokeLong(offset + index, Double.doubleToRawLongBits(value), order);
    return this;
!!!722843.java!!!	putFloat(in value : float) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    int newPosition = position + SizeOf.FLOAT;
    if (newPosition > limit) {
      throw new BufferOverflowException();
    }
    this.block.pokeInt(offset + position, Float.floatToRawIntBits(value), order);
    position = newPosition;
    return this;
!!!722971.java!!!	putFloat(in index : int, in value : float) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index, SizeOf.FLOAT);
    this.block.pokeInt(offset + index, Float.floatToRawIntBits(value), order);
    return this;
!!!723099.java!!!	putInt(in value : int) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    int newPosition = position + SizeOf.INT;
    if (newPosition > limit) {
      throw new BufferOverflowException();
    }
    this.block.pokeInt(offset + position, value, order);
    position = newPosition;
    return this;
!!!723227.java!!!	putInt(in index : int, in value : int) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index, SizeOf.INT);
    this.block.pokeInt(offset + index, value, order);
    return this;
!!!723355.java!!!	putLong(in value : long) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    int newPosition = position + SizeOf.LONG;
    if (newPosition > limit) {
      throw new BufferOverflowException();
    }
    this.block.pokeLong(offset + position, value, order);
    position = newPosition;
    return this;
!!!723483.java!!!	putLong(in index : int, in value : long) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index, SizeOf.LONG);
    this.block.pokeLong(offset + index, value, order);
    return this;
!!!723611.java!!!	putShort(in value : short) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    int newPosition = position + SizeOf.SHORT;
    if (newPosition > limit) {
      throw new BufferOverflowException();
    }
    this.block.pokeShort(offset + position, value, order);
    position = newPosition;
    return this;
!!!723739.java!!!	putShort(in index : int, in value : short) : ByteBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index, SizeOf.SHORT);
    this.block.pokeShort(offset + index, value, order);
    return this;
