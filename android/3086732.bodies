class SubtypeSwitcher
!!!12845836.java!!!	getInstance() : SubtypeSwitcher
        return sInstance;
!!!12845964.java!!!	init(inout service : LatinIME) : void
        SubtypeLocale.init(service);
        sInstance.initialize(service);
        sInstance.updateAllParameters();
!!!12846092.java!!!	SubtypeSwitcher()
        // Intentional empty constructor for singleton.
!!!12846220.java!!!	initialize(inout service : LatinIME) : void
        mService = service;
        mResources = service.getResources();
        mImm = ImfUtils.getInputMethodManager(service);
        mConnectivityManager = (ConnectivityManager) service.getSystemService(
                Context.CONNECTIVITY_SERVICE);
        mCurrentSystemLocale = mResources.getConfiguration().locale;
        mCurrentSubtype = mImm.getCurrentInputMethodSubtype();
        mNoLanguageSubtype = ImfUtils.findSubtypeByLocaleAndKeyboardLayoutSet(
                service, SubtypeLocale.NO_LANGUAGE, SubtypeLocale.QWERTY);
        if (mNoLanguageSubtype == null) {
            throw new RuntimeException("Can't find no lanugage with QWERTY subtype");
        }

        final NetworkInfo info = mConnectivityManager.getActiveNetworkInfo();
        mIsNetworkConnected = (info != null && info.isConnected());
!!!12846348.java!!!	updateAllParameters() : void
        mCurrentSystemLocale = mResources.getConfiguration().locale;
        updateSubtype(mImm.getCurrentInputMethodSubtype());
        updateParametersOnStartInputView();
!!!12846476.java!!!	updateParametersOnStartInputView() : void
        updateEnabledSubtypes();
        updateShortcutIME();
!!!12846604.java!!!	updateEnabledSubtypes() : void
        final InputMethodSubtype currentSubtype = mCurrentSubtype;
        boolean foundCurrentSubtypeBecameDisabled = true;
        final List<InputMethodSubtype> enabledSubtypesOfThisIme =
                mImm.getEnabledInputMethodSubtypeList(null, true);
        for (InputMethodSubtype ims : enabledSubtypesOfThisIme) {
            if (ims.equals(currentSubtype)) {
                foundCurrentSubtypeBecameDisabled = false;
            }
        }
        mNeedsToDisplayLanguage.updateEnabledSubtypeCount(enabledSubtypesOfThisIme.size());
        if (foundCurrentSubtypeBecameDisabled) {
            if (DBG) {
                Log.w(TAG, "Last subtype: "
                        + currentSubtype.getLocale() + "/" + currentSubtype.getExtraValue());
                Log.w(TAG, "Last subtype was disabled. Update to the current one.");
            }
            updateSubtype(mImm.getCurrentInputMethodSubtype());
        }
!!!12846732.java!!!	updateShortcutIME() : void
        if (DBG) {
            Log.d(TAG, "Update shortcut IME from : "
                    + (mShortcutInputMethodInfo == null
                            ? "<null>" : mShortcutInputMethodInfo.getId()) + ", "
                    + (mShortcutSubtype == null ? "<null>" : (
                            mShortcutSubtype.getLocale() + ", " + mShortcutSubtype.getMode())));
        }
        // TODO: Update an icon for shortcut IME
        final Map<InputMethodInfo, List<InputMethodSubtype>> shortcuts =
                mImm.getShortcutInputMethodsAndSubtypes();
        mShortcutInputMethodInfo = null;
        mShortcutSubtype = null;
        for (InputMethodInfo imi : shortcuts.keySet()) {
            List<InputMethodSubtype> subtypes = shortcuts.get(imi);
            // TODO: Returns the first found IMI for now. Should handle all shortcuts as
            // appropriate.
            mShortcutInputMethodInfo = imi;
            // TODO: Pick up the first found subtype for now. Should handle all subtypes
            // as appropriate.
            mShortcutSubtype = subtypes.size() > 0 ? subtypes.get(0) : null;
            break;
        }
        if (DBG) {
            Log.d(TAG, "Update shortcut IME to : "
                    + (mShortcutInputMethodInfo == null
                            ? "<null>" : mShortcutInputMethodInfo.getId()) + ", "
                    + (mShortcutSubtype == null ? "<null>" : (
                            mShortcutSubtype.getLocale() + ", " + mShortcutSubtype.getMode())));
        }
!!!12846860.java!!!	updateSubtype(inout newSubtype : InputMethodSubtype) : void
        if (DBG) {
            Log.w(TAG, "onCurrentInputMethodSubtypeChanged: to: "
                    + newSubtype.getLocale() + "/" + newSubtype.getExtraValue() + ", from: "
                    + mCurrentSubtype.getLocale() + "/" + mCurrentSubtype.getExtraValue());
        }

        final Locale newLocale = SubtypeLocale.getSubtypeLocale(newSubtype);
        mNeedsToDisplayLanguage.updateIsSystemLanguageSameAsInputLanguage(
                mCurrentSystemLocale.equals(newLocale));

        if (newSubtype.equals(mCurrentSubtype)) return;

        mCurrentSubtype = newSubtype;
        updateShortcutIME();
        mService.onRefreshKeyboard();
!!!12846988.java!!!	switchToShortcutIME() : void
        if (mShortcutInputMethodInfo == null) {
            return;
        }

        final String imiId = mShortcutInputMethodInfo.getId();
        switchToTargetIME(imiId, mShortcutSubtype);
!!!12847116.java!!!	switchToTargetIME(in imiId : String, in subtype : InputMethodSubtype) : void
        final IBinder token = mService.getWindow().getWindow().getAttributes().token;
        if (token == null) {
            return;
        }
        final InputMethodManager imm = mImm;
        new AsyncTask<Void, Void, Void>() {
            @Override
            protected Void doInBackground(Void... params) {
                imm.setInputMethodAndSubtype(token, imiId, subtype);
                return null;
            }
        }.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
!!!12847244.java!!!	isShortcutImeEnabled() : boolean
        if (mShortcutInputMethodInfo == null) {
            return false;
        }
        if (mShortcutSubtype == null) {
            return true;
        }
        final boolean allowsImplicitlySelectedSubtypes = true;
        for (final InputMethodSubtype enabledSubtype : mImm.getEnabledInputMethodSubtypeList(
                mShortcutInputMethodInfo, allowsImplicitlySelectedSubtypes)) {
            if (enabledSubtype.equals(mShortcutSubtype)) {
                return true;
            }
        }
        return false;
!!!12847372.java!!!	isShortcutImeReady() : boolean
        if (mShortcutInputMethodInfo == null)
            return false;
        if (mShortcutSubtype == null)
            return true;
        if (mShortcutSubtype.containsExtraValueKey(REQ_NETWORK_CONNECTIVITY)) {
            return mIsNetworkConnected;
        }
        return true;
!!!12847500.java!!!	onNetworkStateChanged(inout intent : Intent) : void
        final boolean noConnection = intent.getBooleanExtra(
                ConnectivityManager.EXTRA_NO_CONNECTIVITY, false);
        mIsNetworkConnected = !noConnection;

        KeyboardSwitcher.getInstance().onNetworkStateChanged();
!!!12847628.java!!!	needsToDisplayLanguage(inout keyboardLocale : Locale) : boolean
        if (keyboardLocale.toString().equals(SubtypeLocale.NO_LANGUAGE)) {
            return true;
        }
        if (!keyboardLocale.equals(getCurrentSubtypeLocale())) {
            return false;
        }
        return mNeedsToDisplayLanguage.getValue();
!!!12847756.java!!!	getCurrentSubtypeLocale() : Locale
        return SubtypeLocale.getSubtypeLocale(mCurrentSubtype);
!!!12847884.java!!!	onConfigurationChanged(inout conf : Configuration) : void
        final Locale systemLocale = conf.locale;
        // If system configuration was changed, update all parameters.
        if (!systemLocale.equals(mCurrentSystemLocale)) {
            updateAllParameters();
        }
!!!12848012.java!!!	getCurrentSubtype() : InputMethodSubtype
        return mCurrentSubtype;
!!!12848140.java!!!	getNoLanguageSubtype() : InputMethodSubtype
        return mNoLanguageSubtype;
