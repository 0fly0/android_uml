class CameraStressTest
!!!7247116.java!!!	CameraStressTest()
        super("com.android.mediaframeworktest", MediaFrameworkTest.class);
!!!7247244.java!!!	setUp() : void
        final Semaphore sem = new Semaphore(0);
        mLooperThread = new Thread() {
            @Override
            public void run() {
                Log.v(TAG, "starting looper");
                Looper.prepare();
                mHandler = new Handler();
                sem.release();
                Looper.loop();
                Log.v(TAG, "quit looper");
            }
        };
        mLooperThread.start();
        if (!sem.tryAcquire(WAIT_TIMEOUT, TimeUnit.MILLISECONDS)) {
            fail("Failed to start the looper.");
        }
        getActivity();
        super.setUp();

        File sdcard = Environment.getExternalStorageDirectory();

        // Create the test images directory if it doesn't exist
        File stressImagesDirectory = new File(String.format("%s/%s", sdcard,
                CAMERA_STRESS_IMAGES_DIRECTORY));
        if (!stressImagesDirectory.exists()) {
            stressImagesDirectory.mkdir();
        }

        // Start writing output file
        File stressOutFile = new File(String.format("%s/%s",sdcard, CAMERA_STRESS_OUTPUT));
        mOutput = new BufferedWriter(new FileWriter(stressOutFile, true));
        mOutput.write(this.getName() + ":\n");
!!!7247372.java!!!	tearDown() : void
        if (mHandler != null) {
            mHandler.getLooper().quit();
            mHandler = null;
        }
        if (mLooperThread != null) {
            mLooperThread.join(WAIT_TIMEOUT);
            if (mLooperThread.isAlive()) {
                fail("Failed to stop the looper.");
            }
            mLooperThread = null;
        }

        mOutput.write("\n\n");
        mOutput.close();

        super.tearDown();
!!!7247500.java!!!	runOnLooper(in command : Runnable) : void
        final Semaphore sem = new Semaphore(0);
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    command.run();
                } finally {
                    sem.release();
                }
            }
        });
        if (!sem.tryAcquire(WAIT_TIMEOUT, TimeUnit.MILLISECONDS)) {
            fail("Failed to run the command on the looper.");
        }
!!!7247756.java!!!	cleanupStressTestImages() : void
        try {
            File stressImagesDirectory = new File(String.format("%s/%s",
                    Environment.getExternalStorageDirectory(), CAMERA_STRESS_IMAGES_DIRECTORY));
            File[] zoomImages = null;

            FilenameFilter filter = new FilenameFilter() {
                public boolean accept(File dir, String name) {
                    return name.startsWith(CAMERA_STRESS_IMAGES_PREFIX);
                }
            };

            zoomImages = stressImagesDirectory.listFiles(filter);

            for (File f : zoomImages) {
                f.delete();
            }
        } catch (SecurityException e) {
            Log.e(TAG, "Security manager access violation: " + e.toString());
        }
!!!7247884.java!!!	startCameraPreview(inout surfaceHolder : SurfaceHolder) : void
        try {
            mCamera.setErrorCallback(mCameraErrorCallback);
            mCamera.setPreviewDisplay(surfaceHolder);
            mCamera.startPreview();
            Thread.sleep(WAIT_GENERIC);
        } catch (IOException e) {
            Log.e(TAG, "Error setting preview display: " + e.toString());
        } catch (InterruptedException e) {
            Log.e(TAG, "Error waiting for preview to come up: " + e.toString());
        } catch (Exception e) {
            Log.e(TAG, "Error starting up camera preview: " + e.toString());
        }
!!!7248012.java!!!	capturePhoto() : void
        try {
            mCamera.takePicture(shutterCallback, rawCallback, jpegCallback);
            Thread.sleep(WAIT_GENERIC);
            mCamera.stopPreview();
            mCamera.release();
        } catch (InterruptedException e) {
            Log.e(TAG, "Error waiting for photo to be taken: " + e.toString());
        } catch (Exception e) {
            Log.e(TAG, "Error capturing photo: " + e.toString());
        }
!!!7248140.java!!!	testStressCameraZoom() : void
        SurfaceHolder mSurfaceHolder;
        mSurfaceHolder = MediaFrameworkTest.mSurfaceView.getHolder();
        mOutput.write("Total number of loops: " + NUMBER_OF_ZOOM_LOOPS + "\n");

        try {
            Log.v(TAG, "Start preview");
            mOutput.write("No of loop: ");

            mCamera = Camera.open(CAMERA_ID);
            Camera.Parameters params = mCamera.getParameters();
            mCamera.release();

            if (!params.isSmoothZoomSupported() && !params.isZoomSupported()) {
                Log.v(TAG, "Device camera does not support zoom");
                fail("Camera zoom stress test failed");
            } else {
                Log.v(TAG, "Device camera does support zoom");

                int nextZoomLevel = 0;

                for (int i = 0; i < NUMBER_OF_ZOOM_LOOPS; i++) {
                    runOnLooper(new Runnable() {
                        @Override
                        public void run() {
                            mCamera = Camera.open(CAMERA_ID);
                        }
                    });

                    startCameraPreview(mSurfaceHolder);
                    params = mCamera.getParameters();
                    int currentZoomLevel = params.getZoom();

                    if (nextZoomLevel >= params.getMaxZoom()) {
                        nextZoomLevel = 0;
                    }
                    ++nextZoomLevel;

                    if (params.isSmoothZoomSupported()) {
                        mCamera.startSmoothZoom(nextZoomLevel);
                    } else {
                        params.setZoom(nextZoomLevel);
                        mCamera.setParameters(params);
                    }
                    Log.v(TAG, "Zooming from " + currentZoomLevel + " to " + nextZoomLevel);

                    // sleep allows for zoom animation to finish
                    Thread.sleep(WAIT_ZOOM_ANIMATION);
                    capturePhoto();

                    if (i == 0) {
                        mOutput.write(Integer.toString(i));
                    } else {
                        mOutput.write(", " + i);
                    }
                }
            }
            cleanupStressTestImages();
        } catch (Exception e) {
            Log.e(TAG, e.toString());
            fail("Camera zoom stress test Exception");
        }
!!!7248268.java!!!	testStressCameraSceneModes() : void
        SurfaceHolder mSurfaceHolder;
        mSurfaceHolder = MediaFrameworkTest.mSurfaceView.getHolder();

        try {
            mCamera = Camera.open(CAMERA_ID);
            Camera.Parameters params = mCamera.getParameters();
            mCamera.release();
            List<String> supportedSceneModes = params.getSupportedSceneModes();
            assertNotNull("No scene modes supported", supportedSceneModes);

            mOutput.write("Total number of loops: " +
                    (NUMBER_OF_SCENE_MODE_LOOPS * supportedSceneModes.size()) + "\n");
            Log.v(TAG, "Start preview");
            mOutput.write("No of loop: ");

            for (int i = 0; i < supportedSceneModes.size(); i++) {
                for (int j = 0; j < NUMBER_OF_SCENE_MODE_LOOPS; j++) {
                    runOnLooper(new Runnable() {
                        @Override
                        public void run() {
                            mCamera = Camera.open(CAMERA_ID);
                        }
                    });

                    startCameraPreview(mSurfaceHolder);
                    Log.v(TAG, "Setting mode to " + supportedSceneModes.get(i));
                    params.setSceneMode(supportedSceneModes.get(i));
                    mCamera.setParameters(params);
                    capturePhoto();

                    if ((i == 0) && (j == 0)) {
                        mOutput.write(Integer.toString(j + i * NUMBER_OF_SCENE_MODE_LOOPS));
                    } else {
                        mOutput.write(", " + (j + i * NUMBER_OF_SCENE_MODE_LOOPS));
                    }
                }
            }
            cleanupStressTestImages();
        } catch (Exception e) {
            Log.e(TAG, e.toString());
            fail("Camera scene mode test Exception");
        }
