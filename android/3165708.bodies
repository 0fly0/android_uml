class PairingCodeActivity
!!!13422348.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setContentView(R.layout.pairing_code);
        processIntent(getIntent());
        mReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                finish();
            }
        };
        registerReceiver(mReceiver, new IntentFilter(ACTION_DISMISS));
        PowerManager powerManager =
            (PowerManager) getSystemService(POWER_SERVICE);
        wakeLock = powerManager.newWakeLock(PowerManager.FULL_WAKE_LOCK |
            PowerManager.ACQUIRE_CAUSES_WAKEUP, WAKE_LOCK_TAG);
        wakeLock.acquire();
!!!13422476.java!!!	onDestroy() : void
        unregisterReceiver(mReceiver);
        wakeLock.release();
        super.onDestroy();
!!!13422604.java!!!	onNewIntent(inout intent : Intent) : void
        super.onNewIntent(intent);
        processIntent(intent);
!!!13422732.java!!!	onPause() : void
        // Cancel the pairing session and finish if we are being moved to the
        // background.
        if (!isFinishing()) {
            cancelPairing();
        }
        super.onPause();
!!!13422860.java!!!	processIntent(inout intent : Intent) : void
        String code = intent.getStringExtra(EXTRA_CODE);
        String name = intent.getStringExtra(EXTRA_CLIENT_NAME);
        if (name == null) {
            name = getResources().getString(R.string.default_remote_name);
        }
        String template = getResources().getString(R.string.explanation);
        CharSequence message =
                TextUtils.expandTemplate(template, name, Build.MODEL);

        Bitmap qrCode = null;

        ((TextView) findViewById(R.id.explanation)).setText(message);
        ((TextView) findViewById(R.id.code)).setText(code);
        ((Button) findViewById(R.id.button_cancel)).setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        cancelPairing();
                    }
                });


        qrCode = generateQRCode(code, QR_CODE_WIDTH_PX, QR_CODE_HEIGHT_PX);

        if (qrCode != null) {
            ((ImageView) findViewById(R.id.qr_code)).setImageBitmap(qrCode);
        }

        ((Button) findViewById(R.id.button_ignore)).setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        showIgnoreRequestsChoice();
                    }
                });
!!!13422988.java!!!	generateQRCode(in code : String, in qrcodeWidthPx : int, in qrcodeHeightPx : int) : Bitmap
        ByteMatrix matrix = null;
        int borderSize = 0, width, height, resWidth, resHeight, resBorderSize;
        int [] pixels;

        try {
            matrix = new QRCodeWriter().encode(code, BarcodeFormat.QR_CODE, qrcodeWidthPx,
                    qrcodeHeightPx);
        } catch (WriterException e) {
            Log.i(LOG_TAG, "Can't create QR Code.");
            return null;
        }

        // Resizing QR Code border to at most BORDER_SIZE_PX size
        // We get the size of the border of the QR Code by finding first black
        // pixel on the diagonal of the image.

        for(int i = 0; i < matrix.getWidth(); ++i) {
            if (matrix.get(i, i) == 0) {
                borderSize = i;
                break;
            }
        }

        resBorderSize = Math.min(borderSize, QR_CODE_BORDER_SIZE_PX);

        width = matrix.getWidth();
        height = matrix.getHeight();

        resWidth = width - 2 * (borderSize - resBorderSize);
        resHeight = height - 2 * (borderSize - resBorderSize);

        pixels = new int[resWidth * resHeight];

        for (int y = 0; y < resHeight; ++y) {
            for (int x = 0; x < resWidth; ++x) {
                if (matrix.get(x + (borderSize - resBorderSize),
                         y + (borderSize - resBorderSize)) != 0) {
                    pixels[y * resWidth + x] = WHITE_ARGB;
                } else {
                    pixels[y * resWidth + x] = BLACK_ARGB;
                }
            }
        }

        Bitmap bitmap = Bitmap.createBitmap(resWidth, resHeight, Bitmap.Config.ARGB_8888);
        bitmap.setPixels(pixels, 0, resWidth, 0, 0, resWidth, resHeight);
        return bitmap;
!!!13423116.java!!!	cancelPairing() : void
        startService(new Intent(this, IpRemoteControlService.class)
                .setAction(IpRemoteControlService.ACTION_CANCEL_PAIRING));
        finish();
!!!13423244.java!!!	showIgnoreRequestsChoice() : void
        String template = getResources().getString(R.string.ignore_description);
        CharSequence message = TextUtils.expandTemplate(template, Build.MODEL);
        new AlertDialog.Builder(this)
                .setTitle(R.string.ignore_title)
                .setMessage(message)
                .setPositiveButton(R.string.ignore_confirm,
                        new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        setIgnoreRequests();
                    }
                })
                .setNegativeButton(R.string.ignore_cancel,
                        new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        // Nothing specific to do.
                    }
                })
                .show();
!!!13423372.java!!!	setIgnoreRequests() : void
        new Settings(this).setRequestsEnabled(false);
        cancelPairing();
        Toast message = Toast.makeText(this,
                R.string.toast_rejecting_future_requests,
                Toast.LENGTH_SHORT);
        message.show();
!!!13423500.java!!!	dismiss(inout context : Context) : void
        context.sendBroadcast(new Intent(ACTION_DISMISS));
