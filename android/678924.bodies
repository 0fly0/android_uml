class Bundle
!!!3817356.java!!!	Bundle()
        mMap = new HashMap<String, Object>();
        mClassLoader = getClass().getClassLoader();
!!!3817484.java!!!	Bundle(inout parcelledData : Parcel)
        readFromParcel(parcelledData);
!!!3817612.java!!!	Bundle(inout parcelledData : Parcel, in length : int)
        readFromParcelInner(parcelledData, length);
!!!3817740.java!!!	Bundle(inout loader : ClassLoader)
        mMap = new HashMap<String, Object>();
        mClassLoader = loader;
!!!3817868.java!!!	Bundle(in capacity : int)
        mMap = new HashMap<String, Object>(capacity);
        mClassLoader = getClass().getClassLoader();
!!!3817996.java!!!	Bundle(inout b : Bundle)
        if (b.mParcelledData != null) {
            mParcelledData = Parcel.obtain();
            mParcelledData.appendFrom(b.mParcelledData, 0, b.mParcelledData.dataSize());
            mParcelledData.setDataPosition(0);
        } else {
            mParcelledData = null;
        }

        if (b.mMap != null) {
            mMap = new HashMap<String, Object>(b.mMap);
        } else {
            mMap = null;
        }

        mHasFds = b.mHasFds;
        mFdsKnown = b.mFdsKnown;
        mClassLoader = b.mClassLoader;
!!!3818124.java!!!	forPair(in key : String, in value : String) : Bundle
        // TODO: optimize this case.
        Bundle b = new Bundle(1);
        b.putString(key, value);
        return b;
!!!3818252.java!!!	getPairValue() : String
        unparcel();
        int size = mMap.size();
        if (size > 1) {
            Log.w(LOG_TAG, "getPairValue() used on Bundle with multiple pairs.");
        }
        if (size == 0) {
            return null;
        }
        Object o = mMap.values().iterator().next();
        try {
            return (String) o;
        } catch (ClassCastException e) {
            typeWarning("getPairValue()", o, "String", e);
            return null;
        }
!!!3818380.java!!!	setClassLoader(inout loader : ClassLoader) : void
        mClassLoader = loader;
!!!3818508.java!!!	getClassLoader() : ClassLoader
        return mClassLoader;
!!!3818636.java!!!	setAllowFds(inout allowFds : boolean) : boolean
        boolean orig = mAllowFds;
        mAllowFds = allowFds;
        return orig;
!!!3818764.java!!!	clone() : Object
        return new Bundle(this);
!!!3818892.java!!!	unparcel() : void
        if (mParcelledData == null) {
            return;
        }

        int N = mParcelledData.readInt();
        if (N < 0) {
            return;
        }
        if (mMap == null) {
            mMap = new HashMap<String, Object>();
        }
        mParcelledData.readMapInternal(mMap, N, mClassLoader);
        mParcelledData.recycle();
        mParcelledData = null;
!!!3819020.java!!!	isParcelled() : boolean
        return mParcelledData != null;
!!!3819148.java!!!	size() : int
        unparcel();
        return mMap.size();
!!!3819276.java!!!	isEmpty() : boolean
        unparcel();
        return mMap.isEmpty();
!!!3819404.java!!!	clear() : void
        unparcel();
        mMap.clear();
        mHasFds = false;
        mFdsKnown = true;
!!!3819532.java!!!	containsKey(in key : String) : boolean
        unparcel();
        return mMap.containsKey(key);
!!!3819660.java!!!	get(in key : String) : Object
        unparcel();
        return mMap.get(key);
!!!3819788.java!!!	remove(in key : String) : void
        unparcel();
        mMap.remove(key);
!!!3819916.java!!!	putAll(inout map : Bundle) : void
        unparcel();
        map.unparcel();
        mMap.putAll(map.mMap);

        // fd state is now known if and only if both bundles already knew
        mHasFds |= map.mHasFds;
        mFdsKnown = mFdsKnown && map.mFdsKnown;
!!!3820044.java!!!	keySet() : Set<String>
        unparcel();
        return mMap.keySet();
!!!3820172.java!!!	hasFileDescriptors() : boolean
        if (!mFdsKnown) {
            boolean fdFound = false;    // keep going until we find one or run out of data
            
            if (mParcelledData != null) {
                if (mParcelledData.hasFileDescriptors()) {
                    fdFound = true;
                }
            } else {
                // It's been unparcelled, so we need to walk the map
                Iterator<Map.Entry<String, Object>> iter = mMap.entrySet().iterator();
                while (!fdFound && iter.hasNext()) {
                    Object obj = iter.next().getValue();
                    if (obj instanceof Parcelable) {
                        if ((((Parcelable)obj).describeContents()
                                & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                            fdFound = true;
                            break;
                        }
                    } else if (obj instanceof Parcelable[]) {
                        Parcelable[] array = (Parcelable[]) obj;
                        for (int n = array.length - 1; n >= 0; n--) {
                            if ((array[n].describeContents()
                                    & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                                fdFound = true;
                                break;
                            }
                        }
                    } else if (obj instanceof SparseArray) {
                        SparseArray<? extends Parcelable> array =
                                (SparseArray<? extends Parcelable>) obj;
                        for (int n = array.size() - 1; n >= 0; n--) {
                            if ((array.get(n).describeContents()
                                    & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0) {
                                fdFound = true;
                                break;
                            }
                        }
                    } else if (obj instanceof ArrayList) {
                        ArrayList array = (ArrayList) obj;
                        // an ArrayList here might contain either Strings or
                        // Parcelables; only look inside for Parcelables
                        if ((array.size() > 0)
                                && (array.get(0) instanceof Parcelable)) {
                            for (int n = array.size() - 1; n >= 0; n--) {
                                Parcelable p = (Parcelable) array.get(n);
                                if (p != null && ((p.describeContents()
                                        & Parcelable.CONTENTS_FILE_DESCRIPTOR) != 0)) {
                                    fdFound = true;
                                    break;
                                }
                            }
                        }
                    }
                }
            }

            mHasFds = fdFound;
            mFdsKnown = true;
        }
        return mHasFds;
!!!3820300.java!!!	putBoolean(in key : String, inout value : boolean) : void
        unparcel();
        mMap.put(key, value);
!!!3820428.java!!!	putByte(in key : String, in value : byte) : void
        unparcel();
        mMap.put(key, value);
!!!3820556.java!!!	putChar(in key : String, in value : char) : void
        unparcel();
        mMap.put(key, value);
!!!3820684.java!!!	putShort(in key : String, in value : short) : void
        unparcel();
        mMap.put(key, value);
!!!3820812.java!!!	putInt(in key : String, in value : int) : void
        unparcel();
        mMap.put(key, value);
!!!3820940.java!!!	putLong(in key : String, in value : long) : void
        unparcel();
        mMap.put(key, value);
!!!3821068.java!!!	putFloat(in key : String, in value : float) : void
        unparcel();
        mMap.put(key, value);
!!!3821196.java!!!	putDouble(in key : String, in value : double) : void
        unparcel();
        mMap.put(key, value);
!!!3821324.java!!!	putString(in key : String, in value : String) : void
        unparcel();
        mMap.put(key, value);
!!!3821452.java!!!	putCharSequence(in key : String, inout value : CharSequence) : void
        unparcel();
        mMap.put(key, value);
!!!3821580.java!!!	putParcelable(in key : String, inout value : Parcelable) : void
        unparcel();
        mMap.put(key, value);
        mFdsKnown = false;
!!!3821708.java!!!	putParcelableArray(in key : String, inout value : Parcelable) : void
        unparcel();
        mMap.put(key, value);
        mFdsKnown = false;
!!!3821836.java!!!	putParcelableArrayList(in key : String, inout value : ArrayList<? extends Parcelable>) : void
        unparcel();
        mMap.put(key, value);
        mFdsKnown = false;
!!!3821964.java!!!	putSparseParcelableArray(in key : String, inout value : SparseArray) : void
        unparcel();
        mMap.put(key, value);
        mFdsKnown = false;
!!!3822092.java!!!	putIntegerArrayList(in key : String, inout value : ArrayList<Integer>) : void
        unparcel();
        mMap.put(key, value);
!!!3822220.java!!!	putStringArrayList(in key : String, inout value : ArrayList<String>) : void
        unparcel();
        mMap.put(key, value);
!!!3822348.java!!!	putCharSequenceArrayList(in key : String, inout value : ArrayList<CharSequence>) : void
        unparcel();
        mMap.put(key, value);
!!!3822476.java!!!	putSerializable(in key : String, inout value : Serializable) : void
        unparcel();
        mMap.put(key, value);
!!!3822604.java!!!	putBooleanArray(in key : String, inout value : boolean) : void
        unparcel();
        mMap.put(key, value);
!!!3822732.java!!!	putByteArray(in key : String, inout value : byte) : void
        unparcel();
        mMap.put(key, value);
!!!3822860.java!!!	putShortArray(in key : String, inout value : short) : void
        unparcel();
        mMap.put(key, value);
!!!3822988.java!!!	putCharArray(in key : String, inout value : char) : void
        unparcel();
        mMap.put(key, value);
!!!3823116.java!!!	putIntArray(in key : String, inout value : int) : void
        unparcel();
        mMap.put(key, value);
!!!3823244.java!!!	putLongArray(in key : String, inout value : long) : void
        unparcel();
        mMap.put(key, value);
!!!3823372.java!!!	putFloatArray(in key : String, inout value : float) : void
        unparcel();
        mMap.put(key, value);
!!!3823500.java!!!	putDoubleArray(in key : String, inout value : double) : void
        unparcel();
        mMap.put(key, value);
!!!3823628.java!!!	putStringArray(in key : String, inout value : String) : void
        unparcel();
        mMap.put(key, value);
!!!3823756.java!!!	putCharSequenceArray(in key : String, inout value : CharSequence) : void
        unparcel();
        mMap.put(key, value);
!!!3823884.java!!!	putBundle(in key : String, inout value : Bundle) : void
        unparcel();
        mMap.put(key, value);
!!!3824012.java!!!	putIBinder(in key : String, inout value : IBinder) : void
        unparcel();
        mMap.put(key, value);
!!!3824140.java!!!	getBoolean(in key : String) : boolean
        unparcel();
        return getBoolean(key, false);
!!!3824268.java!!!	typeWarning(in key : String, inout value : Object, in className : String, inout defaultValue : Object, inout e : ClassCastException) : void
        StringBuilder sb = new StringBuilder();
        sb.append("Key ");
        sb.append(key);
        sb.append(" expected ");
        sb.append(className);
        sb.append(" but value was a ");
        sb.append(value.getClass().getName());
        sb.append(".  The default value ");
        sb.append(defaultValue);
        sb.append(" was returned.");
        Log.w(LOG_TAG, sb.toString());
        Log.w(LOG_TAG, "Attempt to cast generated internal exception:", e);
!!!3824396.java!!!	typeWarning(in key : String, inout value : Object, in className : String, inout e : ClassCastException) : void
        typeWarning(key, value, className, "<null>", e);
!!!3824524.java!!!	getBoolean(in key : String, inout defaultValue : boolean) : boolean
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Boolean) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Boolean", defaultValue, e);
            return defaultValue;
        }
!!!3824652.java!!!	getByte(in key : String) : byte
        unparcel();
        return getByte(key, (byte) 0);
!!!3824780.java!!!	getByte(in key : String, in defaultValue : byte) : Byte
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Byte) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Byte", defaultValue, e);
            return defaultValue;
        }
!!!3824908.java!!!	getChar(in key : String) : char
        unparcel();
        return getChar(key, (char) 0);
!!!3825036.java!!!	getChar(in key : String, in defaultValue : char) : char
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Character) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Character", defaultValue, e);
            return defaultValue;
        }
!!!3825164.java!!!	getShort(in key : String) : short
        unparcel();
        return getShort(key, (short) 0);
!!!3825292.java!!!	getShort(in key : String, in defaultValue : short) : short
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Short) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Short", defaultValue, e);
            return defaultValue;
        }
!!!3825420.java!!!	getInt(in key : String) : int
        unparcel();
        return getInt(key, 0);
!!!3825548.java!!!	getInt(in key : String, in defaultValue : int) : int
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Integer) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Integer", defaultValue, e);
            return defaultValue;
        }
!!!3825676.java!!!	getLong(in key : String) : long
        unparcel();
        return getLong(key, 0L);
!!!3825804.java!!!	getLong(in key : String, in defaultValue : long) : long
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Long) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Long", defaultValue, e);
            return defaultValue;
        }
!!!3825932.java!!!	getFloat(in key : String) : float
        unparcel();
        return getFloat(key, 0.0f);
!!!3826060.java!!!	getFloat(in key : String, in defaultValue : float) : float
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Float) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Float", defaultValue, e);
            return defaultValue;
        }
!!!3826188.java!!!	getDouble(in key : String) : double
        unparcel();
        return getDouble(key, 0.0);
!!!3826316.java!!!	getDouble(in key : String, in defaultValue : double) : double
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (Double) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Double", defaultValue, e);
            return defaultValue;
        }
!!!3826444.java!!!	getString(in key : String) : String
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (String) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "String", e);
            return null;
        }
!!!3826572.java!!!	getString(in key : String, in defaultValue : String) : String
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (String) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "String", e);
            return defaultValue;
        }
!!!3826700.java!!!	getCharSequence(in key : String) : CharSequence
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (CharSequence) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "CharSequence", e);
            return null;
        }
!!!3826828.java!!!	getCharSequence(in key : String, inout defaultValue : CharSequence) : CharSequence
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return defaultValue;
        }
        try {
            return (CharSequence) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "CharSequence", e);
            return defaultValue;
        }
!!!3826956.java!!!	getBundle(in key : String) : Bundle
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (Bundle) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Bundle", e);
            return null;
        }
!!!3827084.java!!!	getParcelable(in key : String) : T
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (T) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Parcelable", e);
            return null;
        }
!!!3827212.java!!!	getParcelableArray(in key : String) : Parcelable
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (Parcelable[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Parcelable[]", e);
            return null;
        }
!!!3827340.java!!!	getParcelableArrayList(in key : String) : ArrayList<T>
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (ArrayList<T>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "ArrayList", e);
            return null;
        }
!!!3827468.java!!!	getSparseParcelableArray(in key : String) : SparseArray
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (SparseArray<T>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "SparseArray", e);
            return null;
        }
!!!3827596.java!!!	getSerializable(in key : String) : Serializable
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (Serializable) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "Serializable", e);
            return null;
        }
!!!3827724.java!!!	getIntegerArrayList(in key : String) : ArrayList<Integer>
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (ArrayList<Integer>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "ArrayList<Integer>", e);
            return null;
        }
!!!3827852.java!!!	getStringArrayList(in key : String) : ArrayList<String>
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (ArrayList<String>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "ArrayList<String>", e);
            return null;
        }
!!!3827980.java!!!	getCharSequenceArrayList(in key : String) : ArrayList<CharSequence>
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (ArrayList<CharSequence>) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "ArrayList<CharSequence>", e);
            return null;
        }
!!!3828108.java!!!	getBooleanArray(in key : String) : boolean
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (boolean[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "byte[]", e);
            return null;
        }
!!!3828236.java!!!	getByteArray(in key : String) : byte
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (byte[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "byte[]", e);
            return null;
        }
!!!3828364.java!!!	getShortArray(in key : String) : short
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (short[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "short[]", e);
            return null;
        }
!!!3828492.java!!!	getCharArray(in key : String) : char
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (char[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "char[]", e);
            return null;
        }
!!!3828620.java!!!	getIntArray(in key : String) : int
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (int[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "int[]", e);
            return null;
        }
!!!3828748.java!!!	getLongArray(in key : String) : long
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (long[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "long[]", e);
            return null;
        }
!!!3828876.java!!!	getFloatArray(in key : String) : float
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (float[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "float[]", e);
            return null;
        }
!!!3829004.java!!!	getDoubleArray(in key : String) : double
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (double[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "double[]", e);
            return null;
        }
!!!3829132.java!!!	getStringArray(in key : String) : String
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (String[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "String[]", e);
            return null;
        }
!!!3829260.java!!!	getCharSequenceArray(in key : String) : CharSequence
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (CharSequence[]) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "CharSequence[]", e);
            return null;
        }
!!!3829388.java!!!	getIBinder(in key : String) : IBinder
        unparcel();
        Object o = mMap.get(key);
        if (o == null) {
            return null;
        }
        try {
            return (IBinder) o;
        } catch (ClassCastException e) {
            typeWarning(key, o, "IBinder", e);
            return null;
        }
!!!3829516.java!!!	describeContents() : int
        int mask = 0;
        if (hasFileDescriptors()) {
            mask |= Parcelable.CONTENTS_FILE_DESCRIPTOR;
        }
        return mask;
!!!3829644.java!!!	writeToParcel(inout parcel : Parcel, in flags : int) : void
        final boolean oldAllowFds = parcel.pushAllowFds(mAllowFds);
        try {
            if (mParcelledData != null) {
                int length = mParcelledData.dataSize();
                parcel.writeInt(length);
                parcel.writeInt(0x4C444E42); // 'B' 'N' 'D' 'L'
                parcel.appendFrom(mParcelledData, 0, length);
            } else {
                parcel.writeInt(-1); // dummy, will hold length
                parcel.writeInt(0x4C444E42); // 'B' 'N' 'D' 'L'
    
                int oldPos = parcel.dataPosition();
                parcel.writeMapInternal(mMap);
                int newPos = parcel.dataPosition();
    
                // Backpatch length
                parcel.setDataPosition(oldPos - 8);
                int length = newPos - oldPos;
                parcel.writeInt(length);
                parcel.setDataPosition(newPos);
            }
        } finally {
            parcel.restoreAllowFds(oldAllowFds);
        }
!!!3829772.java!!!	readFromParcel(inout parcel : Parcel) : void
        int length = parcel.readInt();
        if (length < 0) {
            throw new RuntimeException("Bad length in parcel: " + length);
        }
        readFromParcelInner(parcel, length);
!!!3829900.java!!!	readFromParcelInner(inout parcel : Parcel, in length : int) : void
        int magic = parcel.readInt();
        if (magic != 0x4C444E42) {
            //noinspection ThrowableInstanceNeverThrown
            String st = Log.getStackTraceString(new RuntimeException());
            Log.e("Bundle", "readBundle: bad magic number");
            Log.e("Bundle", "readBundle: trace = " + st);
        }

        // Advance within this Parcel
        int offset = parcel.dataPosition();
        parcel.setDataPosition(offset + length);

        Parcel p = Parcel.obtain();
        p.setDataPosition(0);
        p.appendFrom(parcel, offset, length);
        p.setDataPosition(0);
        
        mParcelledData = p;
        mHasFds = p.hasFileDescriptors();
        mFdsKnown = true;
!!!3830028.java!!!	toString() : String
        if (mParcelledData != null) {
            return "Bundle[mParcelledData.dataSize=" +
                    mParcelledData.dataSize() + "]";
        }
        return "Bundle[" + mMap.toString() + "]";
