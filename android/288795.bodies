class Mac
!!!1798555.java!!!	Mac(inout macSpi : MacSpi, inout provider : Provider, inout algorithm : String)
        this.provider = provider;
        this.algorithm = algorithm;
        this.spiImpl = macSpi;
        this.isInitMac = false;
!!!1798683.java!!!	getAlgorithm() : String
        return algorithm;
!!!1798811.java!!!	getProvider() : Provider
        return provider;
!!!1798939.java!!!	getInstance(inout algorithm : String) : Mac
        if (algorithm == null) {
            throw new NullPointerException("algorithm == null");
        }
        Engine.SpiAndProvider sap = ENGINE.getInstance(algorithm, null);
        return new Mac((MacSpi) sap.spi, sap.provider, algorithm);
!!!1799067.java!!!	getInstance(inout algorithm : String, inout provider : String) : Mac
        if (provider == null || provider.isEmpty()) {
            throw new IllegalArgumentException("Provider is null or empty");
        }
        Provider impProvider = Security.getProvider(provider);
        if (impProvider == null) {
            throw new NoSuchProviderException(provider);
        }
        return getInstance(algorithm, impProvider);
!!!1799195.java!!!	getInstance(inout algorithm : String, inout provider : Provider) : Mac
        if (provider == null) {
            throw new IllegalArgumentException("provider == null");
        }
        if (algorithm == null) {
            throw new NullPointerException("algorithm == null");
        }
        Object spi = ENGINE.getInstance(algorithm, provider, null);
        return new Mac((MacSpi) spi, provider, algorithm);
!!!1799323.java!!!	getMacLength() : int
        return spiImpl.engineGetMacLength();
!!!1799451.java!!!	init(inout key : Key, inout params : AlgorithmParameterSpec) : void
        if (key == null) {
            throw new InvalidKeyException("key == null");
        }
        spiImpl.engineInit(key, params);
        isInitMac = true;
!!!1799579.java!!!	init(inout key : Key) : void
        if (key == null) {
            throw new InvalidKeyException("key == null");
        }
        try {
            spiImpl.engineInit(key, null);
            isInitMac = true;
        } catch (InvalidAlgorithmParameterException e) {
            throw new RuntimeException(e);
        }
!!!1799707.java!!!	update(in input : byte) : void
        if (!isInitMac) {
            throw new IllegalStateException();
        }
        spiImpl.engineUpdate(input);
!!!1799835.java!!!	update(inout input : byte, in offset : int, in len : int) : void
        if (!isInitMac) {
            throw new IllegalStateException();
        }
        if (input == null) {
            return;
        }
        if ((offset < 0) || (len < 0) || ((offset + len) > input.length)) {
            throw new IllegalArgumentException("Incorrect arguments."
                                               + " input.length=" + input.length
                                               + " offset=" + offset + ", len=" + len);
        }
        spiImpl.engineUpdate(input, offset, len);
!!!1799963.java!!!	update(inout input : byte) : void
        if (!isInitMac) {
            throw new IllegalStateException();
        }
        if (input != null) {
            spiImpl.engineUpdate(input, 0, input.length);
        }
!!!1800091.java!!!	update(inout input : ByteBuffer) : void
        if (!isInitMac) {
            throw new IllegalStateException();
        }
        if (input != null) {
            spiImpl.engineUpdate(input);
        } else {
            throw new IllegalArgumentException("input == null");
        }
!!!1800219.java!!!	doFinal() : byte
        if (!isInitMac) {
            throw new IllegalStateException();
        }
        return spiImpl.engineDoFinal();
!!!1800347.java!!!	doFinal(inout output : byte, in outOffset : int) : void
        if (!isInitMac) {
            throw new IllegalStateException();
        }
        if (output == null) {
            throw new ShortBufferException("output == null");
        }
        if ((outOffset < 0) || (outOffset >= output.length)) {
            throw new ShortBufferException("Incorrect outOffset: " + outOffset);
        }
        int t = spiImpl.engineGetMacLength();
        if (t > (output.length - outOffset)) {
            throw new ShortBufferException("Output buffer is short. Needed " + t + " bytes.");
        }
        byte[] result = spiImpl.engineDoFinal();
        System.arraycopy(result, 0, output, outOffset, result.length);

!!!1800475.java!!!	doFinal(inout input : byte) : byte
        if (!isInitMac) {
            throw new IllegalStateException();
        }
        if (input != null) {
            spiImpl.engineUpdate(input, 0, input.length);
        }
        return spiImpl.engineDoFinal();
!!!1800603.java!!!	reset() : void
        spiImpl.engineReset();
!!!1800731.java!!!	clone() : Object
        MacSpi newSpiImpl = (MacSpi)spiImpl.clone();
        Mac mac = new Mac(newSpiImpl, this.provider, this.algorithm);
        mac.isInitMac = this.isInitMac;
        return mac;
