format 74
"atomic" // _unknown::java::util::concurrent::atomic
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/util/concurrent/atomic/"
  java_package "java.util.concurrent.atomic"
  classview 129947 "atomic"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 154779 "AtomicInteger"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code int} value that may be updated atomically.  See the
{@link java.util.concurrent.atomic} package specification for
description of the properties of atomic variables. An
{@code AtomicInteger} is used in applications such as atomically
incremented counters, and cannot be used as a replacement for an
{@link java.lang.Integer}. However, this class does extend
{@code Number} to allow uniform access by tools and utilities that
deal with numerically-based classes.

@since 1.5
@author Doug Lea"
      classrelation 464155 // <generalisation>
	relation 464155 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 464155 // <generalisation>
	  b parent class_ref 148379 // Number
      end

      classrelation 464283 // <realization>
	relation 464283 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 464283 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 400411 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6214790243416807050L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 464411 // unsafe (<unidirectional association>)
	relation 464411 --->
	  a role_name "unsafe" init_value " Unsafe.getUnsafe()" class_relation const_relation private
	    comment " setup to use Unsafe.compareAndSwapInt for updates
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 464411 // unsafe (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 400539 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 134299 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicInteger.class.getDeclaredField(\"value\"));
        } catch (Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
      end

      attribute 400667 "value"
	volatile private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1628827 "AtomicInteger"
	public explicit_return_type ""
	nparams 1
	  param in name "initialValue" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicInteger with the given initial value.

@param initialValue the initial value"
      end

      operation 1628955 "AtomicInteger"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicInteger with initial value {@code 0}."
      end

      operation 1629083 "get"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value.

@return the current value"
      end

      operation 1629211 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets to the given value.

@param newValue the new value"
      end

      operation 1629339 "lazySet"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets to the given value.

@param newValue the new value
@since 1.6"
      end

      operation 1629467 "getAndSet"
	public explicit_return_type "int"
	nparams 1
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets to the given value and returns the old value.

@param newValue the new value
@return the previous value"
      end

      operation 1629595 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 1629723 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 1629851 "getAndIncrement"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value.

@return the previous value"
      end

      operation 1629979 "getAndDecrement"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value.

@return the previous value"
      end

      operation 1630107 "getAndAdd"
	public explicit_return_type "int"
	nparams 1
	  param in name "delta" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value.

@param delta the value to add
@return the previous value"
      end

      operation 1630235 "incrementAndGet"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value.

@return the updated value"
      end

      operation 1630363 "decrementAndGet"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value.

@return the updated value"
      end

      operation 1630491 "addAndGet"
	public explicit_return_type "int"
	nparams 1
	  param in name "delta" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value.

@param delta the value to add
@return the updated value"
      end

      operation 1630619 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value."
      end

      operation 1630747 "intValue"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicInteger} as an {@code int}."
      end

      operation 1630875 "longValue"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicInteger} as a {@code long}
after a widening primitive conversion."
      end

      operation 1631003 "floatValue"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicInteger} as a {@code float}
after a widening primitive conversion."
      end

      operation 1631131 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicInteger} as a {@code double}
after a widening primitive conversion."
      end
    end

    class 188187 "AtomicBoolean"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code boolean} value that may be updated atomically. See the
{@link java.util.concurrent.atomic} package specification for
description of the properties of atomic variables. An
{@code AtomicBoolean} is used in applications such as atomically
updated flags, and cannot be used as a replacement for a
{@link java.lang.Boolean}.

@since 1.5
@author Doug Lea"
      classrelation 463899 // <realization>
	relation 463899 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 463899 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 400027 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4654671469794556979L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 464027 // unsafe (<unidirectional association>)
	relation 464027 --->
	  a role_name "unsafe" init_value " Unsafe.getUnsafe()" class_relation const_relation private
	    comment " setup to use Unsafe.compareAndSwapInt for updates
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 464027 // unsafe (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 400155 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 134171 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicBoolean.class.getDeclaredField(\"value\"));
        } catch (Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
      end

      attribute 400283 "value"
	volatile private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1627675 "AtomicBoolean"
	public explicit_return_type ""
	nparams 1
	  param inout name "initialValue" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code AtomicBoolean} with the given initial value.

@param initialValue the initial value"
      end

      operation 1627803 "AtomicBoolean"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code AtomicBoolean} with initial value {@code false}."
      end

      operation 1627931 "get"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value.

@return the current value"
      end

      operation 1628059 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "boolean"
	  param inout name "update" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 1628187 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "boolean"
	  param inout name "update" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 1628315 "set"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unconditionally sets to the given value.

@param newValue the new value"
      end

      operation 1628443 "lazySet"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets to the given value.

@param newValue the new value
@since 1.6"
      end

      operation 1628571 "getAndSet"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "newValue" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets to the given value and returns the previous value.

@param newValue the new value
@return the previous value"
      end

      operation 1628699 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value."
      end
    end

    class 263323 "AtomicReference"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object reference that may be updated atomically. See the {@link
java.util.concurrent.atomic} package specification for description
of the properties of atomic variables.
@since 1.5
@author Doug Lea
@param <V> The type of object referred to by this reference"
      classrelation 434971 // <realization>
	relation 434971 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 434971 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 367899 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -1848883965231344442L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 435099 // unsafe (<unidirectional association>)
	relation 435099 --->
	  a role_name "unsafe" init_value " Unsafe.getUnsafe()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 435099 // unsafe (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 368027 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 132507 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicReference.class.getDeclaredField(\"value\"));
        } catch (Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
      end

      attribute 368155 "value"
	volatile private explicit_type "V"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1526555 "AtomicReference"
	public explicit_return_type ""
	nparams 1
	  param inout name "initialValue" explicit_type "V"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicReference with the given initial value.

@param initialValue the initial value"
      end

      operation 1526683 "AtomicReference"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicReference with null initial value."
      end

      operation 1526811 "get"
	public explicit_return_type "V"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value.

@return the current value"
      end

      operation 1526939 "set"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets to the given value.

@param newValue the new value"
      end

      operation 1527067 "lazySet"
	public explicit_return_type "void"
	nparams 1
	  param inout name "newValue" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets to the given value.

@param newValue the new value
@since 1.6"
      end

      operation 1527195 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.
@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 1527323 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 1527451 "getAndSet"
	public explicit_return_type "V"
	nparams 1
	  param inout name "newValue" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets to the given value and returns the old value.

@param newValue the new value
@return the previous value"
      end

      operation 1527579 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value."
      end
    end

    class 270491 "AtomicLong"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code long} value that may be updated atomically.  See the
{@link java.util.concurrent.atomic} package specification for
description of the properties of atomic variables. An
{@code AtomicLong} is used in applications such as atomically
incremented sequence numbers, and cannot be used as a replacement
for a {@link java.lang.Long}. However, this class does extend
{@code Number} to allow uniform access by tools and utilities that
deal with numerically-based classes.

@since 1.5
@author Doug Lea"
      classrelation 465307 // <generalisation>
	relation 465307 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 465307 // <generalisation>
	  b parent class_ref 148379 // Number
      end

      classrelation 465435 // <realization>
	relation 465435 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 465435 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 401435 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1927816293512124184L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 465563 // unsafe (<unidirectional association>)
	relation 465563 --->
	  a role_name "unsafe" init_value " Unsafe.getUnsafe()" class_relation const_relation private
	    comment " setup to use Unsafe.compareAndSwapLong for updates
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 465563 // unsafe (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 401563 "valueOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 401691 "VM_SUPPORTS_LONG_CAS"
	class_attribute const_attribute package explicit_type "boolean"
	init_value " VMSupportsCS8()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Records whether the underlying JVM supports lockless
compareAndSwap for longs. While the Unsafe.compareAndSwapLong
method works in either case, some constructions should be
handled at Java level to avoid locking user-visible locks.
"
      end

      operation 1636635 "VMSupportsCS8"
	class_operation private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}native ${type} ${name}${(}${)}${throws};
"
	
	
	
	comment "Returns whether underlying JVM supports lockless CompareAndSet
for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS."
      end

      extra_member 134555 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            valueOffset = unsafe.objectFieldOffset
                (AtomicLong.class.getDeclaredField(\"value\"));
        } catch (Exception ex) { throw new Error(ex); }
    }"
	php ""
	python ""
	idl ""
      end

      attribute 401819 "value"
	volatile private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1636763 "AtomicLong"
	public explicit_return_type ""
	nparams 1
	  param in name "initialValue" explicit_type "long"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicLong with the given initial value.

@param initialValue the initial value"
      end

      operation 1636891 "AtomicLong"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicLong with initial value {@code 0}."
      end

      operation 1637019 "get"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value.

@return the current value"
      end

      operation 1637147 "set"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets to the given value.

@param newValue the new value"
      end

      operation 1637275 "lazySet"
	public explicit_return_type "void"
	nparams 1
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets to the given value.

@param newValue the new value
@since 1.6"
      end

      operation 1637403 "getAndSet"
	public explicit_return_type "long"
	nparams 1
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets to the given value and returns the old value.

@param newValue the new value
@return the previous value"
      end

      operation 1637531 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 1637659 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value to the given updated value
if the current value {@code ==} the expected value.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 1637787 "getAndIncrement"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value.

@return the previous value"
      end

      operation 1637915 "getAndDecrement"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value.

@return the previous value"
      end

      operation 1638043 "getAndAdd"
	public explicit_return_type "long"
	nparams 1
	  param in name "delta" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value.

@param delta the value to add
@return the previous value"
      end

      operation 1638171 "incrementAndGet"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value.

@return the updated value"
      end

      operation 1638299 "decrementAndGet"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value.

@return the updated value"
      end

      operation 1638427 "addAndGet"
	public explicit_return_type "long"
	nparams 1
	  param in name "delta" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value.

@param delta the value to add
@return the updated value"
      end

      operation 1638555 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current value.
@return the String representation of the current value."
      end

      operation 1638683 "intValue"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicLong} as an {@code int}
after a narrowing primitive conversion."
      end

      operation 1638811 "longValue"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicLong} as a {@code long}."
      end

      operation 1638939 "floatValue"
	public explicit_return_type "float"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicLong} as a {@code float}
after a widening primitive conversion."
      end

      operation 1639067 "doubleValue"
	public explicit_return_type "double"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value of this {@code AtomicLong} as a {@code double}
after a widening primitive conversion."
      end
    end

    class 272923 "AtomicIntegerArray"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code int} array in which elements may be updated atomically.
See the {@link java.util.concurrent.atomic} package
specification for description of the properties of atomic
variables.
@since 1.5
@author Doug Lea"
      classrelation 464539 // <realization>
	relation 464539 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 464539 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 400795 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2862133569453604235L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 464667 // unsafe (<unidirectional association>)
	relation 464667 --->
	  a role_name "unsafe" init_value " Unsafe.getUnsafe()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 464667 // unsafe (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 400923 "base"
	class_attribute const_attribute private explicit_type "int"
	init_value " unsafe.arrayBaseOffset(int[].class)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 401051 "shift"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 401179 "array"
	const_attribute private explicit_type "int"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 134427 "initialization"
	
	cpp "" ""
	java "  static {
        int scale = unsafe.arrayIndexScale(int[].class);
        if ((scale & (scale - 1)) != 0)
            throw new Error(\"data type scale not a power of two\");
        shift = 31 - Integer.numberOfLeadingZeros(scale);
    }"
	php ""
	python ""
	idl ""
      end

      operation 1631259 "checkedByteOffset"
	private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1631387 "byteOffset"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1631515 "AtomicIntegerArray"
	public explicit_return_type ""
	nparams 1
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicIntegerArray of the given length, with all
elements initially zero.

@param length the length of the array"
      end

      operation 1631643 "AtomicIntegerArray"
	public explicit_return_type ""
	nparams 1
	  param inout name "array" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicIntegerArray with the same length as, and
all elements copied from, the given array.

@param array the array to copy elements from
@throws NullPointerException if array is null"
      end

      operation 1631771 "length"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the array.

@return the length of the array"
      end

      operation 1631899 "get"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value at position {@code i}.

@param i the index
@return the current value"
      end

      operation 1632027 "getRaw"
	private explicit_return_type "int"
	nparams 1
	  param in name "offset" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1632155 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value"
      end

      operation 1632283 "lazySet"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value
@since 1.6"
      end

      operation 1632411 "getAndSet"
	public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
value and returns the old value.

@param i the index
@param newValue the new value
@return the previous value"
      end

      operation 1632539 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

@param i the index
@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 1632667 "compareAndSetRaw"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "offset" explicit_type "long"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1632795 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param i the index
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 1632923 "getAndIncrement"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the element at index {@code i}.

@param i the index
@return the previous value"
      end

      operation 1633051 "getAndDecrement"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the element at index {@code i}.

@param i the index
@return the previous value"
      end

      operation 1633179 "getAndAdd"
	public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the element at index {@code i}.

@param i the index
@param delta the value to add
@return the previous value"
      end

      operation 1633307 "incrementAndGet"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the element at index {@code i}.

@param i the index
@return the updated value"
      end

      operation 1633435 "decrementAndGet"
	public explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the element at index {@code i}.

@param i the index
@return the updated value"
      end

      operation 1633563 "addAndGet"
	public explicit_return_type "int"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the element at index {@code i}.

@param i the index
@param delta the value to add
@return the updated value"
      end

      operation 1633691 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current values of array.
@return the String representation of the current values of array"
      end
    end

    class 273051 "AtomicIntegerFieldUpdater"
      abstract visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A reflection-based utility that enables atomic updates to
designated {@code volatile int} fields of designated classes.
This class is designed for use in atomic data structures in which
several fields of the same node are independently subject to atomic
updates.

<p>Note that the guarantees of the {@code compareAndSet}
method in this class are weaker than in other atomic classes.
Because this class cannot ensure that all uses of the field
are appropriate for purposes of atomic access, it can
guarantee atomicity only with respect to other invocations of
{@code compareAndSet} and {@code set} on the same updater.

@since 1.5
@author Doug Lea
@param <T> The type of the object holding the updatable field"
      operation 1633819 "newUpdater"
	class_operation public return_type class_ref 273051 // AtomicIntegerFieldUpdater
	nparams 2
	  param inout name "tclass" type class_ref 3421708 // Class
	  param inout name "fieldName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<U> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns an updater for objects with the given field.
The Class argument is needed to check that reflective types and
generic types match.

@param tclass the class of the objects holding the field
@param fieldName the name of the field to be updated
@return the updater
@throws IllegalArgumentException if the field is not a
volatile integer type
@throws RuntimeException with a nested reflection-based
exception if the class does not hold field or is the wrong type"
      end

      operation 1633947 "AtomicIntegerFieldUpdater"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected do-nothing constructor for use by subclasses."
      end

      operation 1634075 "compareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful
@throws ClassCastException if {@code obj} is not an instance
of the class possessing the field established in the constructor"
      end

      operation 1634203 "weakCompareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "int"
	  param in name "update" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful
@throws ClassCastException if {@code obj} is not an instance
of the class possessing the field established in the constructor"
      end

      operation 1634331 "set"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the field of the given object managed by this updater to the
given updated value. This operation is guaranteed to act as a volatile
store with respect to subsequent invocations of {@code compareAndSet}.

@param obj An object whose field to set
@param newValue the new value"
      end

      operation 1634459 "lazySet"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the field of the given object managed by this
updater to the given updated value.

@param obj An object whose field to set
@param newValue the new value
@since 1.6"
      end

      operation 1634587 "get"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value held in the field of the given object managed
by this updater.

@param obj An object whose field to get
@return the current value"
      end

      operation 1634715 "getAndSet"
	public explicit_return_type "int"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given value and returns the old value.

@param obj An object whose field to get and set
@param newValue the new value
@return the previous value"
      end

      operation 1634843 "getAndIncrement"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the previous value"
      end

      operation 1634971 "getAndDecrement"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the previous value"
      end

      operation 1635099 "getAndAdd"
	public explicit_return_type "int"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value of the field of
the given object managed by this updater.

@param obj An object whose field to get and set
@param delta the value to add
@return the previous value"
      end

      operation 1635227 "incrementAndGet"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the updated value"
      end

      operation 1635355 "decrementAndGet"
	public explicit_return_type "int"
	nparams 1
	  param inout name "obj" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the updated value"
      end

      operation 1635483 "addAndGet"
	public explicit_return_type "int"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value of the field of
the given object managed by this updater.

@param obj An object whose field to get and set
@param delta the value to add
@return the updated value"
      end

      class 273179 "AtomicIntegerFieldUpdaterImpl"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 273051 // AtomicIntegerFieldUpdater
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 464795 // <realization>
	  relation 464795 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 464795 // <realization>
	    b parent class_ref 273051 // AtomicIntegerFieldUpdater
	end

	classrelation 464923 // unsafe (<unidirectional association>)
	  relation 464923 --->
	    a role_name "unsafe" init_value " Unsafe.getUnsafe()" class_relation const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 464923 // unsafe (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 401307 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 465051 // tclass (<unidirectional association>)
	  relation 465051 --->
	    a role_name "tclass" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 465051 // tclass (<unidirectional association>)
	    b parent class_ref 3421708 // Class
	end

	classrelation 465179 // cclass (<unidirectional association>)
	  relation 465179 --->
	    a role_name "cclass" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 465179 // cclass (<unidirectional association>)
	    b parent class_ref 3421708 // Class
	end

	operation 1635611 "AtomicIntegerFieldUpdaterImpl"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "tclass" type class_ref 3421708 // Class
	    param inout name "fieldName" type class_ref 3399692 // String
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1635739 "fullCheck"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1635867 "compareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "int"
	    param in name "update" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1635995 "weakCompareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "int"
	    param in name "update" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1636123 "set"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1636251 "lazySet"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1636379 "get"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1636507 "ensureProtectedAccess"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 273307 "AtomicLongArray"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code long} array in which elements may be updated atomically.
See the {@link java.util.concurrent.atomic} package specification
for description of the properties of atomic variables.
@since 1.5
@author Doug Lea"
      classrelation 465691 // <realization>
	relation 465691 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 465691 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 401947 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2308431214976778248L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 465819 // unsafe (<unidirectional association>)
	relation 465819 --->
	  a role_name "unsafe" init_value " Unsafe.getUnsafe()" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 465819 // unsafe (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 402075 "base"
	class_attribute const_attribute private explicit_type "int"
	init_value " unsafe.arrayBaseOffset(long[].class)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 402203 "shift"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 402331 "array"
	const_attribute private explicit_type "long"
	multiplicity "[]"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 134683 "initialization"
	
	cpp "" ""
	java "  static {
        int scale = unsafe.arrayIndexScale(long[].class);
        if ((scale & (scale - 1)) != 0)
            throw new Error(\"data type scale not a power of two\");
        shift = 31 - Integer.numberOfLeadingZeros(scale);
    }"
	php ""
	python ""
	idl ""
      end

      operation 1639195 "checkedByteOffset"
	private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1639323 "byteOffset"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1639451 "AtomicLongArray"
	public explicit_return_type ""
	nparams 1
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicLongArray of the given length, with all
elements initially zero.

@param length the length of the array"
      end

      operation 1639579 "AtomicLongArray"
	public explicit_return_type ""
	nparams 1
	  param inout name "array" explicit_type "long"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicLongArray with the same length as, and
all elements copied from, the given array.

@param array the array to copy elements from
@throws NullPointerException if array is null"
      end

      operation 1639707 "length"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the array.

@return the length of the array"
      end

      operation 1639835 "get"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value at position {@code i}.

@param i the index
@return the current value"
      end

      operation 1639963 "getRaw"
	private explicit_return_type "long"
	nparams 1
	  param in name "offset" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1640091 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value"
      end

      operation 1640219 "lazySet"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value
@since 1.6"
      end

      operation 1640347 "getAndSet"
	public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given value
and returns the old value.

@param i the index
@param newValue the new value
@return the previous value"
      end

      operation 1640475 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

@param i the index
@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 1640603 "compareAndSetRaw"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "offset" explicit_type "long"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1640731 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param i the index
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 1640859 "getAndIncrement"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the element at index {@code i}.

@param i the index
@return the previous value"
      end

      operation 1640987 "getAndDecrement"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the element at index {@code i}.

@param i the index
@return the previous value"
      end

      operation 1641115 "getAndAdd"
	public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the element at index {@code i}.

@param i the index
@param delta the value to add
@return the previous value"
      end

      operation 1641243 "incrementAndGet"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the element at index {@code i}.

@param i the index
@return the updated value"
      end

      operation 1641371 "decrementAndGet"
	public explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the element at index {@code i}.

@param i the index
@return the updated value"
      end

      operation 1641499 "addAndGet"
	public explicit_return_type "long"
	nparams 2
	  param in name "i" explicit_type "int"
	  param in name "delta" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the element at index {@code i}.

@param i the index
@param delta the value to add
@return the updated value"
      end

      operation 1641627 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current values of array.
@return the String representation of the current values of array"
      end
    end

    class 273435 "AtomicLongFieldUpdater"
      abstract visibility public 
      nformals 1
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A reflection-based utility that enables atomic updates to
designated {@code volatile long} fields of designated classes.
This class is designed for use in atomic data structures in which
several fields of the same node are independently subject to atomic
updates.

<p>Note that the guarantees of the {@code compareAndSet}
method in this class are weaker than in other atomic classes.
Because this class cannot ensure that all uses of the field
are appropriate for purposes of atomic access, it can
guarantee atomicity only with respect to other invocations of
{@code compareAndSet} and {@code set} on the same updater.

@since 1.5
@author Doug Lea
@param <T> The type of the object holding the updatable field"
      operation 1641755 "newUpdater"
	class_operation public return_type class_ref 273435 // AtomicLongFieldUpdater
	nparams 2
	  param inout name "tclass" type class_ref 3421708 // Class
	  param inout name "fieldName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U> ${type}<U> ${name}${(}${t0}<U> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns an updater for objects with the given field.
The Class argument is needed to check that reflective types and
generic types match.

@param tclass the class of the objects holding the field
@param fieldName the name of the field to be updated.
@return the updater
@throws IllegalArgumentException if the field is not a
volatile long type.
@throws RuntimeException with a nested reflection-based
exception if the class does not hold field or is the wrong type."
      end

      operation 1641883 "AtomicLongFieldUpdater"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected do-nothing constructor for use by subclasses."
      end

      operation 1642011 "compareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful.
@throws ClassCastException if {@code obj} is not an instance
of the class possessing the field established in the constructor."
      end

      operation 1642139 "weakCompareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param in name "expect" explicit_type "long"
	  param in name "update" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful.
@throws ClassCastException if {@code obj} is not an instance
of the class possessing the field established in the constructor."
      end

      operation 1642267 "set"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the field of the given object managed by this updater to the
given updated value. This operation is guaranteed to act as a volatile
store with respect to subsequent invocations of {@code compareAndSet}.

@param obj An object whose field to set
@param newValue the new value"
      end

      operation 1642395 "lazySet"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the field of the given object managed by this
updater to the given updated value.

@param obj An object whose field to set
@param newValue the new value
@since 1.6"
      end

      operation 1642523 "get"
	abstract public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value held in the field of the given object managed
by this updater.

@param obj An object whose field to get
@return the current value"
      end

      operation 1642651 "getAndSet"
	public explicit_return_type "long"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "newValue" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given value and returns the old value.

@param obj An object whose field to get and set
@param newValue the new value
@return the previous value"
      end

      operation 1642779 "getAndIncrement"
	public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the previous value"
      end

      operation 1642907 "getAndDecrement"
	public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the previous value"
      end

      operation 1643035 "getAndAdd"
	public explicit_return_type "long"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value of the field of
the given object managed by this updater.

@param obj An object whose field to get and set
@param delta the value to add
@return the previous value"
      end

      operation 1643163 "incrementAndGet"
	public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically increments by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the updated value"
      end

      operation 1643291 "decrementAndGet"
	public explicit_return_type "long"
	nparams 1
	  param inout name "obj" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically decrements by one the current value of the field of the
given object managed by this updater.

@param obj An object whose field to get and set
@return the updated value"
      end

      operation 1643419 "addAndGet"
	public explicit_return_type "long"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param in name "delta" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically adds the given value to the current value of the field of
the given object managed by this updater.

@param obj An object whose field to get and set
@param delta the value to add
@return the updated value"
      end

      class 273563 "CASUpdater"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 273435 // AtomicLongFieldUpdater
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 465947 // <realization>
	  relation 465947 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 465947 // <realization>
	    b parent class_ref 273435 // AtomicLongFieldUpdater
	end

	classrelation 466075 // unsafe (<unidirectional association>)
	  relation 466075 --->
	    a role_name "unsafe" init_value " Unsafe.getUnsafe()" class_relation const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 466075 // unsafe (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 402459 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 466203 // tclass (<unidirectional association>)
	  relation 466203 --->
	    a role_name "tclass" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 466203 // tclass (<unidirectional association>)
	    b parent class_ref 3421708 // Class
	end

	classrelation 466331 // cclass (<unidirectional association>)
	  relation 466331 --->
	    a role_name "cclass" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 466331 // cclass (<unidirectional association>)
	    b parent class_ref 3421708 // Class
	end

	operation 1643547 "CASUpdater"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "tclass" type class_ref 3421708 // Class
	    param inout name "fieldName" type class_ref 3399692 // String
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1643675 "fullCheck"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1643803 "compareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1643931 "weakCompareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1644059 "set"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1644187 "lazySet"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1644315 "get"
	  public explicit_return_type "long"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1644443 "ensureProtectedAccess"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 273691 "LockedUpdater"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 273435 // AtomicLongFieldUpdater
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 466459 // <realization>
	  relation 466459 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 466459 // <realization>
	    b parent class_ref 273435 // AtomicLongFieldUpdater
	end

	classrelation 466587 // unsafe (<unidirectional association>)
	  relation 466587 --->
	    a role_name "unsafe" init_value " Unsafe.getUnsafe()" class_relation const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 466587 // unsafe (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 402587 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 466715 // tclass (<unidirectional association>)
	  relation 466715 --->
	    a role_name "tclass" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 466715 // tclass (<unidirectional association>)
	    b parent class_ref 3421708 // Class
	end

	classrelation 466843 // cclass (<unidirectional association>)
	  relation 466843 --->
	    a role_name "cclass" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 466843 // cclass (<unidirectional association>)
	    b parent class_ref 3421708 // Class
	end

	operation 1644571 "LockedUpdater"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "tclass" type class_ref 3421708 // Class
	    param inout name "fieldName" type class_ref 3399692 // String
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1644699 "fullCheck"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1644827 "compareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1644955 "weakCompareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param in name "expect" explicit_type "long"
	    param in name "update" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1645083 "set"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1645211 "lazySet"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param in name "newValue" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1645339 "get"
	  public explicit_return_type "long"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1645467 "ensureProtectedAccess"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 273819 "AtomicMarkableReference"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code AtomicMarkableReference} maintains an object reference
along with a mark bit, that can be updated atomically.

<p>Implementation note: This implementation maintains markable
references by creating internal objects representing \"boxed\"
[reference, boolean] pairs.

@since 1.5
@author Doug Lea
@param <V> The type of object referred to by this reference"
      class 273947 "Pair"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 402715 "reference"
	  const_attribute package explicit_type "T"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 402843 "mark"
	  const_attribute package explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1645595 "Pair"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "reference" explicit_type "T"
	    param inout name "mark" explicit_type "boolean"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1645723 "of"
	  class_operation package return_type class_ref 273947 // Pair
	  nparams 2
	    param inout name "reference" explicit_type "T"
	    param inout name "mark" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 466971 // pair (<unidirectional association>)
	relation 466971 --->
	  a role_name "pair" volatile private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 466971 // pair (<unidirectional association>)
	  b parent class_ref 273947 // Pair
      end

      operation 1645851 "AtomicMarkableReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "initialRef" explicit_type "V"
	  param inout name "initialMark" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code AtomicMarkableReference} with the given
initial values.

@param initialRef the initial reference
@param initialMark the initial mark"
      end

      operation 1645979 "getReference"
	public explicit_return_type "V"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the reference.

@return the current value of the reference"
      end

      operation 1646107 "isMarked"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the mark.

@return the current value of the mark"
      end

      operation 1646235 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "markHolder" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current values of both the reference and the mark.
Typical usage is {@code boolean[1] holder; ref = v.get(holder); }.

@param markHolder an array of size of at least one. On return,
{@code markholder[0]} will hold the value of the mark.
@return the current value of the reference"
      end

      operation 1646363 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param inout name "expectedMark" explicit_type "boolean"
	  param inout name "newMark" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and mark
to the given update values if the
current reference is {@code ==} to the expected reference
and the current mark is equal to the expected mark.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedMark the expected value of the mark
@param newMark the new value for the mark
@return true if successful"
      end

      operation 1646491 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param inout name "expectedMark" explicit_type "boolean"
	  param inout name "newMark" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and mark
to the given update values if the
current reference is {@code ==} to the expected reference
and the current mark is equal to the expected mark.

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedMark the expected value of the mark
@param newMark the new value for the mark
@return true if successful"
      end

      operation 1646619 "set"
	public explicit_return_type "void"
	nparams 2
	  param inout name "newReference" explicit_type "V"
	  param inout name "newMark" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unconditionally sets the value of both the reference and mark.

@param newReference the new value for the reference
@param newMark the new value for the mark"
      end

      operation 1646747 "attemptMark"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newMark" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of the mark to the given update value
if the current reference is {@code ==} to the expected
reference.  Any given invocation of this operation may fail
(return {@code false}) spuriously, but repeated invocation
when the current value holds the expected value and no other
thread is also attempting to set the value will eventually
succeed.

@param expectedReference the expected value of the reference
@param newMark the new value for the mark
@return true if successful"
      end

      classrelation 467099 // UNSAFE (<unidirectional association>)
	relation 467099 --->
	  a role_name "UNSAFE" init_value " sun.misc.Unsafe.getUnsafe()" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 467099 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 402971 "pairOffset"
	class_attribute const_attribute private explicit_type "long"
	init_value "
        objectFieldOffset(UNSAFE, \"pair\", AtomicMarkableReference.class)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1646875 "casPair"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 273947 // Pair
	  param inout name "val" type class_ref 273947 // Pair
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<V> ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1647003 "objectFieldOffset"
	class_operation package explicit_return_type "long"
	nparams 3
	  param inout name "UNSAFE" type class_ref 255899 // Unsafe
	  param inout name "field" type class_ref 3399692 // String
	  param inout name "klazz" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 274075 "AtomicReferenceArray"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An array of object references in which elements may be updated
atomically.  See the {@link java.util.concurrent.atomic} package
specification for description of the properties of atomic
variables.
@since 1.5
@author Doug Lea
@param <E> The base class of elements held in this array"
      classrelation 467227 // <realization>
	relation 467227 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 467227 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 403099 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6209656149925076980L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 467355 // unsafe (<unidirectional association>)
	relation 467355 --->
	  a role_name "unsafe" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 467355 // unsafe (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 403227 "base"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 403355 "shift"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 403483 "arrayFieldOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 467483 // array (<unidirectional association>)
	relation 467483 --->
	  a role_name "array" multiplicity "[]" const_relation private
	    comment " must have exact type Object[]"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 467483 // array (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      extra_member 134811 "initialization"
	
	cpp "" ""
	java "  static {
        int scale;
        try {
            unsafe = Unsafe.getUnsafe();
            arrayFieldOffset = unsafe.objectFieldOffset
                (AtomicReferenceArray.class.getDeclaredField(\"array\"));
            base = unsafe.arrayBaseOffset(Object[].class);
            scale = unsafe.arrayIndexScale(Object[].class);
        } catch (Exception e) {
            throw new Error(e);
        }
        if ((scale & (scale - 1)) != 0)
            throw new Error(\"data type scale not a power of two\");
        shift = 31 - Integer.numberOfLeadingZeros(scale);
    }"
	php ""
	python ""
	idl ""
      end

      operation 1647131 "checkedByteOffset"
	private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1647259 "byteOffset"
	class_operation private explicit_return_type "long"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1647387 "AtomicReferenceArray"
	public explicit_return_type ""
	nparams 1
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicReferenceArray of the given length, with all
elements initially null.

@param length the length of the array"
      end

      operation 1647515 "AtomicReferenceArray"
	public explicit_return_type ""
	nparams 1
	  param inout name "array" explicit_type "E"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new AtomicReferenceArray with the same length as, and
all elements copied from, the given array.

@param array the array to copy elements from
@throws NullPointerException if array is null"
      end

      operation 1647643 "length"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the array.

@return the length of the array"
      end

      operation 1647771 "get"
	public explicit_return_type "E"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value at position {@code i}.

@param i the index
@return the current value"
      end

      operation 1647899 "getRaw"
	private explicit_return_type "E"
	nparams 1
	  param in name "offset" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1648027 "set"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "newValue" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value"
      end

      operation 1648155 "lazySet"
	public explicit_return_type "void"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "newValue" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the element at position {@code i} to the given value.

@param i the index
@param newValue the new value
@since 1.6"
      end

      operation 1648283 "getAndSet"
	public explicit_return_type "E"
	nparams 2
	  param in name "i" explicit_type "int"
	  param inout name "newValue" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
value and returns the old value.

@param i the index
@param newValue the new value
@return the previous value"
      end

      operation 1648411 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param inout name "expect" explicit_type "E"
	  param inout name "update" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

@param i the index
@param expect the expected value
@param update the new value
@return true if successful. False return indicates that
the actual value was not equal to the expected value."
      end

      operation 1648539 "compareAndSetRaw"
	private explicit_return_type "boolean"
	nparams 3
	  param in name "offset" explicit_type "long"
	  param inout name "expect" explicit_type "E"
	  param inout name "update" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1648667 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "i" explicit_type "int"
	  param inout name "expect" explicit_type "E"
	  param inout name "update" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the element at position {@code i} to the given
updated value if the current value {@code ==} the expected value.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param i the index
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 1648795 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the String representation of the current values of array.
@return the String representation of the current values of array"
      end

      operation 1648923 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 3
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	  exception class_ref 129563 // InvalidObjectException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes the instance from a stream (that is, deserializes it).
@param s the stream"
      end
    end

    class 274203 "AtomicReferenceFieldUpdater"
      abstract visibility public 
      nformals 2
      formal name "T" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A reflection-based utility that enables atomic updates to
designated {@code volatile} reference fields of designated
classes.  This class is designed for use in atomic data structures
in which several reference fields of the same node are
independently subject to atomic updates. For example, a tree node
might be declared as

 <pre> {@code
class Node {
  private volatile Node left, right;

  private static final AtomicReferenceFieldUpdater<Node, Node> leftUpdater =
    AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"left\");
  private static AtomicReferenceFieldUpdater<Node, Node> rightUpdater =
    AtomicReferenceFieldUpdater.newUpdater(Node.class, Node.class, \"right\");

  Node getLeft() { return left;  }
  boolean compareAndSetLeft(Node expect, Node update) {
    return leftUpdater.compareAndSet(this, expect, update);
  }
  // ... and so on
}}</pre>

<p>Note that the guarantees of the {@code compareAndSet}
method in this class are weaker than in other atomic classes.
Because this class cannot ensure that all uses of the field
are appropriate for purposes of atomic access, it can
guarantee atomicity only with respect to other invocations of
{@code compareAndSet} and {@code set} on the same updater.

@since 1.5
@author Doug Lea
@param <T> The type of the object holding the updatable field
@param <V> The type of the field"
      operation 1649051 "newUpdater"
	class_operation public return_type class_ref 274203 // AtomicReferenceFieldUpdater
	nparams 3
	  param inout name "tclass" type class_ref 3421708 // Class
	  param inout name "vclass" type class_ref 3421708 // Class
	  param inout name "fieldName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<U, W> ${type}<U,W> ${name}${(}${t0}<U> ${p0}, ${t1}<W> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and returns an updater for objects with the given field.
The Class arguments are needed to check that reflective types and
generic types match.

@param tclass the class of the objects holding the field.
@param vclass the class of the field
@param fieldName the name of the field to be updated.
@return the updater
@throws IllegalArgumentException if the field is not a volatile reference type.
@throws RuntimeException with a nested reflection-based
exception if the class does not hold field or is the wrong type."
      end

      operation 1649179 "AtomicReferenceFieldUpdater"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected do-nothing constructor for use by subclasses."
      end

      operation 1649307 "compareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 1649435 "weakCompareAndSet"
	abstract public explicit_return_type "boolean"
	nparams 3
	  param inout name "obj" explicit_type "T"
	  param inout name "expect" explicit_type "V"
	  param inout name "update" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given updated value if the current value {@code ==} the
expected value. This method is guaranteed to be atomic with respect to
other calls to {@code compareAndSet} and {@code set}, but not
necessarily with respect to other changes in the field.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param obj An object whose field to conditionally set
@param expect the expected value
@param update the new value
@return true if successful."
      end

      operation 1649563 "set"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "newValue" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the field of the given object managed by this updater to the
given updated value. This operation is guaranteed to act as a volatile
store with respect to subsequent invocations of {@code compareAndSet}.

@param obj An object whose field to set
@param newValue the new value"
      end

      operation 1649691 "lazySet"
	abstract public explicit_return_type "void"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "newValue" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Eventually sets the field of the given object managed by this
updater to the given updated value.

@param obj An object whose field to set
@param newValue the new value
@since 1.6"
      end

      operation 1649819 "get"
	abstract public explicit_return_type "V"
	nparams 1
	  param inout name "obj" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the current value held in the field of the given object managed
by this updater.

@param obj An object whose field to get
@return the current value"
      end

      operation 1649947 "getAndSet"
	public explicit_return_type "V"
	nparams 2
	  param inout name "obj" explicit_type "T"
	  param inout name "newValue" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the field of the given object managed by this updater
to the given value and returns the old value.

@param obj An object whose field to get and set
@param newValue the new value
@return the previous value"
      end

      class 274331 "AtomicReferenceFieldUpdaterImpl"
	visibility private 
	nformals 2
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 274203 // AtomicReferenceFieldUpdater
	  rank 0 explicit_value ""
	actual class class_ref 274203 // AtomicReferenceFieldUpdater
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 467611 // <realization>
	  relation 467611 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 467611 // <realization>
	    b parent class_ref 274203 // AtomicReferenceFieldUpdater
	end

	classrelation 467739 // unsafe (<unidirectional association>)
	  relation 467739 --->
	    a role_name "unsafe" init_value " Unsafe.getUnsafe()" class_relation const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 467739 // unsafe (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 403611 "offset"
	  const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 467867 // tclass (<unidirectional association>)
	  relation 467867 --->
	    a role_name "tclass" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 467867 // tclass (<unidirectional association>)
	    b parent class_ref 3421708 // Class
	end

	classrelation 467995 // vclass (<unidirectional association>)
	  relation 467995 --->
	    a role_name "vclass" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 467995 // vclass (<unidirectional association>)
	    b parent class_ref 3421708 // Class
	end

	classrelation 468123 // cclass (<unidirectional association>)
	  relation 468123 --->
	    a role_name "cclass" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	      classrelation_ref 468123 // cclass (<unidirectional association>)
	    b parent class_ref 3421708 // Class
	end

	operation 1650075 "AtomicReferenceFieldUpdaterImpl"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "tclass" type class_ref 3421708 // Class
	    param inout name "vclass" type class_ref 3421708 // Class
	    param inout name "fieldName" type class_ref 3399692 // String
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}, ${t1}<V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Internal type checks within all update methods contain
internal inlined optimizations checking for the common
cases where the class is final (in which case a simple
getClass comparison suffices) or is of type Object (in
which case no check is needed because all objects are
instances of Object). The Object case is handled simply by
setting vclass to null in constructor.  The targetCheck and
updateCheck methods are invoked when these faster
screenings fail."
	end

	operation 1650203 "targetCheck"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1650331 "updateCheck"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param inout name "update" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1650459 "compareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param inout name "expect" explicit_type "V"
	    param inout name "update" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1650587 "weakCompareAndSet"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "obj" explicit_type "T"
	    param inout name "expect" explicit_type "V"
	    param inout name "update" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1650715 "set"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param inout name "newValue" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1650843 "lazySet"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "obj" explicit_type "T"
	    param inout name "newValue" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1650971 "get"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1651099 "ensureProtectedAccess"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "obj" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 274459 "AtomicStampedReference"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code AtomicStampedReference} maintains an object reference
along with an integer \"stamp\", that can be updated atomically.

<p>Implementation note: This implementation maintains stamped
references by creating internal objects representing \"boxed\"
[reference, integer] pairs.

@since 1.5
@author Doug Lea
@param <V> The type of object referred to by this reference"
      class 274587 "Pair"
	visibility private 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 403739 "reference"
	  const_attribute package explicit_type "T"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 403867 "stamp"
	  const_attribute package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1651227 "Pair"
	  private explicit_return_type ""
	  nparams 2
	    param inout name "reference" explicit_type "T"
	    param in name "stamp" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1651355 "of"
	  class_operation package return_type class_ref 274587 // Pair
	  nparams 2
	    param inout name "reference" explicit_type "T"
	    param in name "stamp" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 468251 // pair (<unidirectional association>)
	relation 468251 --->
	  a role_name "pair" volatile private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 468251 // pair (<unidirectional association>)
	  b parent class_ref 274587 // Pair
      end

      operation 1651483 "AtomicStampedReference"
	public explicit_return_type ""
	nparams 2
	  param inout name "initialRef" explicit_type "V"
	  param in name "initialStamp" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code AtomicStampedReference} with the given
initial values.

@param initialRef the initial reference
@param initialStamp the initial stamp"
      end

      operation 1651611 "getReference"
	public explicit_return_type "V"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the reference.

@return the current value of the reference"
      end

      operation 1651739 "getStamp"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the stamp.

@return the current value of the stamp"
      end

      operation 1651867 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "stampHolder" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current values of both the reference and the stamp.
Typical usage is {@code int[1] holder; ref = v.get(holder); }.

@param stampHolder an array of size of at least one.  On return,
{@code stampholder[0]} will hold the value of the stamp.
@return the current value of the reference"
      end

      operation 1651995 "weakCompareAndSet"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param in name "expectedStamp" explicit_type "int"
	  param in name "newStamp" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and stamp
to the given update values if the
current reference is {@code ==} to the expected reference
and the current stamp is equal to the expected stamp.

<p>May <a href=\"package-summary.html#Spurious\">fail spuriously</a>
and does not provide ordering guarantees, so is only rarely an
appropriate alternative to {@code compareAndSet}.

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedStamp the expected value of the stamp
@param newStamp the new value for the stamp
@return true if successful"
      end

      operation 1652123 "compareAndSet"
	public explicit_return_type "boolean"
	nparams 4
	  param inout name "expectedReference" explicit_type "V"
	  param inout name "newReference" explicit_type "V"
	  param in name "expectedStamp" explicit_type "int"
	  param in name "newStamp" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of both the reference and stamp
to the given update values if the
current reference is {@code ==} to the expected reference
and the current stamp is equal to the expected stamp.

@param expectedReference the expected value of the reference
@param newReference the new value for the reference
@param expectedStamp the expected value of the stamp
@param newStamp the new value for the stamp
@return true if successful"
      end

      operation 1652251 "set"
	public explicit_return_type "void"
	nparams 2
	  param inout name "newReference" explicit_type "V"
	  param in name "newStamp" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unconditionally sets the value of both the reference and stamp.

@param newReference the new value for the reference
@param newStamp the new value for the stamp"
      end

      operation 1652379 "attemptStamp"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "expectedReference" explicit_type "V"
	  param in name "newStamp" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically sets the value of the stamp to the given update value
if the current reference is {@code ==} to the expected
reference.  Any given invocation of this operation may fail
(return {@code false}) spuriously, but repeated invocation
when the current value holds the expected value and no other
thread is also attempting to set the value will eventually
succeed.

@param expectedReference the expected value of the reference
@param newStamp the new value for the stamp
@return true if successful"
      end

      classrelation 468379 // UNSAFE (<unidirectional association>)
	relation 468379 --->
	  a role_name "UNSAFE" init_value " sun.misc.Unsafe.getUnsafe()" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 468379 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 403995 "pairOffset"
	class_attribute const_attribute private explicit_type "long"
	init_value "
        objectFieldOffset(UNSAFE, \"pair\", AtomicStampedReference.class)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1652507 "casPair"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 274587 // Pair
	  param inout name "val" type class_ref 274587 // Pair
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<V> ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1652635 "objectFieldOffset"
	class_operation package explicit_return_type "long"
	nparams 3
	  param inout name "UNSAFE" type class_ref 255899 // Unsafe
	  param inout name "field" type class_ref 3399692 // String
	  param inout name "klazz" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 274715 "Fences"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A set of methods providing fine-grained control over happens-before
and synchronization order relations among reads and/or writes.  The
methods of this class are designed for use in uncommon situations
where declaring variables {@code volatile} or {@code final}, using
instances of atomic classes, using {@code synchronized} blocks or
methods, or using other synchronization facilities are not possible
or do not provide the desired control.

<p><b>Memory Ordering.</b> There are three methods for controlling
ordering relations among memory accesses (i.e., reads and
writes). Method {@code orderWrites} is typically used to enforce
order between two writes, and {@code orderAccesses} between a write
and a read.  Method {@code orderReads} is used to enforce order
between two reads with respect to other {@code orderWrites} and/or
{@code orderAccesses} invocations.  The formally specified
properties of these methods described below provide
platform-independent guarantees that are honored by all levels of a
platform (compilers, systems, processors).  The use of these
methods may result in the suppression of otherwise valid compiler
transformations and optimizations that could visibly violate the
specified orderings, and may or may not entail the use of
processor-level \"memory barrier\" instructions.

<p>Each ordering method accepts a {@code ref} argument, and
controls ordering among accesses with respect to this reference.
Invocations must be placed <em>between</em> accesses performed in
expression evaluations and assignment statements to control the
orderings of prior versus subsequent accesses appearing in program
order. These methods also return their arguments to simplify
correct usage in these contexts.

<p>Usages of ordering methods almost always take one of the forms
illustrated in the examples below.  These idioms arrange some of
the ordering properties associated with {@code volatile} and
related language-based constructions, but without other
compile-time and runtime benefits that make language-based
constructions far better choices when they are applicable.  Usages
should be restricted to the control of strictly internal
implementation matters inside a class or package, and must either
avoid or document any consequent violations of ordering or safety
properties expected by users of a class employing them.

<p><b>Reachability.</b> Method {@code reachabilityFence}
establishes an ordering for strong reachability (as defined in the
{@link java.lang.ref} package specification) with respect to
garbage collection.  Method {@code reachabilityFence} differs from
the others in that it controls relations that are otherwise only
implicit in a program -- the reachability conditions triggering
garbage collection.  As illustrated in the sample usages below,
this method is applicable only when reclamation may have visible
effects, which is possible for objects with finalizers (see Section
12.6 of the Java Language Specification) that are implemented in
ways that rely on ordering control for correctness.

<p><b>Sample Usages</b>

<p><b>Safe publication.</b> With care, method {@code orderWrites}
may be used to obtain the memory safety effects of {@code final}
for a field that cannot be declared as {@code final}, because its
primary initialization cannot be performed in a constructor, in
turn because it is used in a framework requiring that all classes
have a no-argument constructor; as in:

 <pre> {@code
class WidgetHolder {
  private Widget widget;
  public WidgetHolder() {}
  public static WidgetHolder newWidgetHolder(Params params) {
    WidgetHolder h = new WidgetHolder();
    h.widget = new Widget(params);
    return Fences.orderWrites(h);
  }
}}</pre>

Here, the invocation of {@code orderWrites} ensures that the
effects of the widget assignment are ordered before those of any
(unknown) subsequent stores of {@code h} in other variables that
make {@code h} available for use by other objects.  Initialization
sequences using {@code orderWrites} require more care than those
involving {@code final} fields.  When {@code final} is not used,
compilers cannot help you to ensure that the field is set correctly
across all usages.  You must fully initialize objects
<em>before</em> the {@code orderWrites} invocation that makes
references to them safe to assign to accessible variables. Further,
initialization sequences must not internally \"leak\" the reference
by using it as an argument to a callback method or adding it to a
static data structure.  If less constrained usages were required,
it may be possible to cope using more extensive sets of fences, or
as a normally better choice, using synchronization (locking).
Conversely, if it were possible to do so, the best option would be
to rewrite class {@code WidgetHolder} to use {@code final}.

<p>An alternative approach is to place similar mechanics in the
(sole) method that makes such objects available for use by others.
Here is a stripped-down example illustrating the essentials. In
practice, among other changes, you would use access methods instead
of a public field.

 <pre> {@code
class AnotherWidgetHolder {
  public Widget widget;
  void publish(Widget w) {
    this.widget = Fences.orderWrites(w);
  }
  // ...
}}</pre>

In this case, the {@code orderWrites} invocation occurs before the
store making the object available. Correctness again relies on
ensuring that there are no leaks prior to invoking this method, and
that it really is the <em>only</em> means of accessing the
published object.  This approach is not often applicable --
normally you would publish objects using a thread-safe collection
that itself guarantees the expected ordering relations. However, it
may come into play in the construction of such classes themselves.

<p><b>Safely updating fields.</b> Outside of the initialization
idioms illustrated above, Fence methods ordering writes must be
paired with those ordering reads. To illustrate, suppose class
{@code c} contains an accessible variable {@code data} that should
have been declared as {@code volatile} but wasn't:

 <pre> {@code
class C {
   Object data;  // need volatile access but not volatile
   // ...
}

class App {
  Object getData(C c) {
     return Fences.orderReads(c).data;
  }

  void setData(C c) {
     Object newValue = ...;
     c.data = Fences.orderWrites(newValue);
     Fences.orderAccesses(c);
  }
  // ...
}}</pre>

Method {@code getData} provides an emulation of {@code volatile}
reads of (non-long/double) fields by ensuring that the read of
{@code c} obtained as an argument is ordered before subsequent
reads using this reference, and then performs the read of its
field. Method {@code setData} provides an emulation of volatile
writes, ensuring that all other relevant writes have completed,
then performing the assignment, and then ensuring that the write is
ordered before any other access.  These techniques may apply even
when fields are not directly accessible, in which case calls to
fence methods would surround calls to methods such as {@code
c.getData()}.  However, these techniques cannot be applied to
{@code long} or {@code double} fields because reads and writes of
fields of these types are not guaranteed to be
atomic. Additionally, correctness may require that all accesses of
such data use these kinds of wrapper methods, which you would need
to manually ensure.

<p>More generally, Fence methods can be used in this way to achieve
the safety properties of {@code volatile}. However their use does
not necessarily guarantee the full sequential consistency
properties specified in the Java Language Specification chapter 17
for programs using {@code volatile}. In particular, emulation using
Fence methods is not guaranteed to maintain the property that
{@code volatile} operations performed by different threads are
observed in the same order by all observer threads.

<p><b>Acquire/Release management of threadsafe objects</b>. It may
be possible to use weaker conventions for volatile-like variables
when they are used to keep track of objects that fully manage their
own thread-safety and synchronization.  Here, an acquiring read
operation remains the same as a volatile-read, but a releasing
write differs by virtue of not itself ensuring an ordering of its
write with subsequent reads, because the required effects are
already ensured by the referenced objects.
For example:

 <pre> {@code
class Item {
   synchronized f(); // ALL methods are synchronized
   // ...
}

class ItemHolder {
  private Item item;
  Item acquireItem() {
     return Fences.orderReads(item);
  }

  void releaseItem(Item x) {
     item = Fences.orderWrites(x);
  }

  // ...
}}</pre>

Because this construction avoids use of {@code orderAccesses},
which is typically more costly than the other fence methods, it may
result in better performance than using {@code volatile} or its
emulation. However, as is the case with most applications of fence
methods, correctness relies on the usage context -- here, the
thread safety of {@code Item}, as well as the lack of need for full
volatile semantics inside this class itself. However, the second
concern means that it can be difficult to extend the {@code
ItemHolder} class in this example to be more useful.

<p><b>Avoiding premature finalization.</b> Finalization may occur
whenever a Java Virtual Machine detects that no reference to an
object will ever be stored in the heap: A garbage collector may
reclaim an object even if the fields of that object are still in
use, so long as the object has otherwise become unreachable. This
may have surprising and undesirable effects in cases such as the
following example in which the bookkeeping associated with a class
is managed through array indices. Here, method {@code action}
uses a {@code reachabilityFence} to ensure that the Resource
object is not reclaimed before bookkeeping on an associated
ExternalResource has been performed; in particular here, to ensure
that the array slot holding the ExternalResource is not nulled out
in method {@link Object#finalize}, which may otherwise run
concurrently.

 <pre> {@code
class Resource {
  private static ExternalResource[] externalResourceArray = ...

  int myIndex;
  Resource(...) {
    myIndex = ...
    externalResourceArray[myIndex] = ...;
    ...
  }
  protected void finalize() {
    externalResourceArray[myIndex] = null;
    ...
  }
  public void action() {
    try {
      // ...
      int i = myIndex;
      Resource.update(externalResourceArray[i]);
    } finally {
      Fences.reachabilityFence(this);
    }
  }
  private static void update(ExternalResource ext) {
    ext.status = ...;
  }
}}</pre>

Here, the call to {@code reachabilityFence} is nonintuitively
placed <em>after</em> the call to {@code update}, to ensure that
the array slot is not nulled out by {@link Object#finalize} before
the update, even if the call to {@code action} was the last use of
this object. This might be the case if for example a usage in a
user program had the form {@code new Resource().action();} which
retains no other reference to this Resource.  While probably
overkill here, {@code reachabilityFence} is placed in a {@code
finally} block to ensure that it is invoked across all paths in the
method.  In a method with more complex control paths, you might
need further precautions to ensure that {@code reachabilityFence}
is encountered along all of them.

<p>It is sometimes possible to better encapsulate use of
{@code reachabilityFence}. Continuing the above example, if it
were OK for the call to method update to proceed even if the
finalizer had already executed (nulling out slot), then you could
localize use of {@code reachabilityFence}:

 <pre> {@code
public void action2() {
  // ...
  Resource.update(getExternalResource());
}
private ExternalResource getExternalResource() {
  ExternalResource ext = externalResourceArray[myIndex];
  Fences.reachabilityFence(this);
  return ext;
}}</pre>

<p>Method {@code reachabilityFence} is not required in
constructions that themselves ensure reachability. For example,
because objects that are locked cannot in general be reclaimed, it
would suffice if all accesses of the object, in all methods of
class Resource (including {@code finalize}) were enclosed in {@code
synchronized (this)} blocks. (Further, such blocks must not include
infinite loops, or themselves be unreachable, which fall into the
corner case exceptions to the \"in general\" disclaimer.) However,
method {@code reachabilityFence} remains a better option in cases
where this approach is not as efficient, desirable, or possible;
for example because it would encounter deadlock.

<p><b>Formal Properties.</b>

<p>Using the terminology of The Java Language Specification chapter
17, the rules governing the semantics of the methods of this class
are as follows:

<p> The following is still under construction.

<dl>

  <dt><b>[Definitions]</b>
  <dd>
  <ul>

    <li>Define <em>sequenced(a, b)</em> to be true if <em>a</em>
    occurs before <em>b</em> in <em>program order</em>.

    <li>Define <em>accesses(a, p)</em> to be true if
    <em>a</em> is a read or write of a field (or if an array, an
    element) of the object referenced by <em>p</em>.

    <li>Define <em>deeplyAccesses(a, p)</em> to be true if either
    <em>accesses(a, p)</em> or <em>deeplyAccesses(a, q)</em> where
    <em>q</em> is the value seen by some read <em>r</em>
    such that <em>accesses(r, p)</em>.

  </ul>
  <p>
  <dt><b>[Matching]</b>
  <dd> Given:

  <ul>

    <li><em>p</em>, a reference to an object

    <li><em>wf</em>, an invocation of {@code orderWrites(p)} or
      {@code orderAccesses(p)}

    <li><em>w</em>, a write of value <em>p</em>

    <li> <em>rf</em>, an invocation of {@code orderReads(p)} or
    {@code orderAccesses(p)}

    <li> <em>r</em>, a read returning value <em>p</em>

  </ul>
  If:
  <ul>
    <li>sequenced(wf, w)
    <li>read <em>r</em> sees write <em>w</em>
    <li>sequenced(r, rf)
  </ul>
  Then:
  <ul>

    <li> <em>wf happens-before rf</em>

    <li> <em>wf</em> precedes <em>rf</em> in the
         <em>synchronization order</em>

    <li> If (<em>r1</em>, <em>w1</em>) and (<em>r2</em>,
    <em>w2</em>) are two pairs of reads and writes, both
    respectively satisfying the above conditions for <em>p</em>,
    and sequenced(r1, r2) then it is not the case that <em>w2
    happens-before w1</em>.

  </ul>
  <p>
  <dt><b>[Initial Reads]</b>
  <dd> Given:

  <ul>

    <li><em>p</em>, a reference to an object

    <li> <em>a</em>, an access where deeplyAccesses(a, p)

    <li><em>wf</em>, an invocation of {@code orderWrites(p)} or
      {@code orderAccesses(p)}

    <li><em>w</em>, a write of value <em>p</em>

    <li> <em>r</em>, a read returning value <em>p</em>

    <li> <em>b</em>, an access where accesses(b, p)

  </ul>
  If:
  <ul>
    <li>sequenced(a, wf);
    <li>sequenced(wf, w)
    <li>read <em>r</em> sees write <em>w</em>, and
        <em>r</em> is the first read by some thread
        <em>t</em> that sees value <em>p</em>
    <li>sequenced(r, b)
  </ul>
  Then:
  <ul>
    <li> the effects of <em>b</em> are constrained
         by the relation <em>a happens-before b</em>.
  </ul>
 <p>
 <dt><b>[orderAccesses]</b>
 <dd> Given:

  <ul>
    <li><em>p</em>, a reference to an object
    <li><em>f</em>, an invocation of {@code orderAccesses(p)}
  </ul>
  If:
  <ul>
    <li>sequenced(f, w)
  </ul>

   Then:

  <ul>

    <li> <em>f</em> is an element of the <em>synchronization order</em>.

  </ul>
  <p>
  <dt><b>[Reachability]</b>
  <dd> Given:

  <ul>

    <li><em>p</em>, a reference to an object

    <li><em>f</em>, an invocation of {@code reachabilityFence(p)}

    <li><em>a</em>, an access where accesses(a, p)

    <li><em>b</em>, an action (by a garbage collector) taking
    the form of an invocation of {@code
    p.finalize()} or of enqueing any {@link
    java.lang.ref.Reference} constructed with argument <em>p</em>

  </ul>

  If:
  <ul>
    <li>sequenced(a, f)
  </ul>

   Then:

  <ul>

    <li> <em>a happens-before b</em>.

  </ul>

</dl>

@since 1.7
@hide
@author Doug Lea"
      operation 1652763 "Fences"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 404123 "theVolatile"
	class_attribute volatile private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Non-instantiable

The methods of this class are intended to be intrinisified by a
JVM. However, we provide correct but inefficient Java-level
code that simply reads and writes a static volatile
variable. Without JVM support, the consistency effects are
stronger than necessary, and the memory contention effects can
be a serious performance issue.
"
      end

      operation 1652891 "orderReads"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "ref" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informally: Ensures that a read of the given reference prior to
the invocation of this method occurs before a subsequent use of
the given reference with the effect of reading or writing a
field (or if an array, element) of the referenced object.  The
use of this method is sensible only when paired with other
invocations of {@link #orderWrites} and/or {@link
#orderAccesses} for the given reference. For details, see the
class documentation for this class.

@param ref the reference. If null, this method has no effect.
@return the given ref, to simplify usage"
      end

      operation 1653019 "orderWrites"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "ref" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informally: Ensures that a use of the given reference with the
effect of reading or writing a field (or if an array, element)
of the referenced object, prior to the invocation of this
method occur before a subsequent write of the reference. For
details, see the class documentation for this class.

@param ref the reference. If null, this method has no effect.
@return the given ref, to simplify usage"
      end

      operation 1653147 "orderAccesses"
	class_operation public explicit_return_type "T"
	nparams 1
	  param inout name "ref" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Informally: Ensures that accesses (reads or writes) using the
given reference prior to the invocation of this method occur
before subsequent accesses.  For details, see the class
documentation for this class.

@param ref the reference. If null, this method has no effect.
@return the given ref, to simplify usage"
      end

      operation 1653275 "reachabilityFence"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "ref" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that the object referenced by the given reference
remains <em>strongly reachable</em> (as defined in the {@link
java.lang.ref} package documentation), regardless of any prior
actions of the program that might otherwise cause the object to
become unreachable; thus, the referenced object is not
reclaimable by garbage collection at least until after the
invocation of this method. Invocation of this method does not
itself initiate garbage collection or finalization.

<p>See the class-level documentation for further explanation
and usage examples.

@param ref the reference. If null, this method has no effect."
      end
    end
  end

  deploymentview 131611 "atomic"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 226971 "AtomicReference"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
${definition}"
      associated_classes
	class_ref 263323 // AtomicReference
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 231067 "AtomicBoolean"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
${definition}"
      associated_classes
	class_ref 188187 // AtomicBoolean
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 231195 "AtomicInteger"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
${definition}"
      associated_classes
	class_ref 154779 // AtomicInteger
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 231323 "AtomicIntegerArray"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
${definition}"
      associated_classes
	class_ref 272923 // AtomicIntegerArray
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 231451 "AtomicIntegerFieldUpdater"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.VMStack;
import sun.misc.Unsafe;
import java.lang.reflect.*;
${definition}"
      associated_classes
	class_ref 273051 // AtomicIntegerFieldUpdater
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 231579 "AtomicLong"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
${definition}"
      associated_classes
	class_ref 270491 // AtomicLong
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 231707 "AtomicLongArray"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import sun.misc.Unsafe;
${definition}"
      associated_classes
	class_ref 273307 // AtomicLongArray
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 231835 "AtomicLongFieldUpdater"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.VMStack;
import sun.misc.Unsafe;
import java.lang.reflect.*;
${definition}"
      associated_classes
	class_ref 273435 // AtomicLongFieldUpdater
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 231963 "AtomicMarkableReference"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 273819 // AtomicMarkableReference
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 232091 "AtomicReferenceArray"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Arrays;
import java.lang.reflect.Array;
import sun.misc.Unsafe;
${definition}"
      associated_classes
	class_ref 274075 // AtomicReferenceArray
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 232219 "AtomicReferenceFieldUpdater"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import dalvik.system.VMStack;
import sun.misc.Unsafe;
import java.lang.reflect.*;
${definition}"
      associated_classes
	class_ref 274203 // AtomicReferenceFieldUpdater
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 232347 "AtomicStampedReference"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 274459 // AtomicStampedReference
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 232475 "Fences"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 274715 // Fences
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end
  end
end
