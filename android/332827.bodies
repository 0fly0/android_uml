class SubjectPublicKeyInfo
!!!2241307.java!!!	SubjectPublicKeyInfo(inout algID : AlgorithmIdentifier, inout subjectPublicKey : byte)
        this(algID, subjectPublicKey, 0);
!!!2241435.java!!!	SubjectPublicKeyInfo(inout algID : AlgorithmIdentifier, inout subjectPublicKey : byte, in unused : int)
        this(algID, subjectPublicKey, 0, null);
!!!2241563.java!!!	SubjectPublicKeyInfo(inout algID : AlgorithmIdentifier, inout subjectPublicKey : byte, in unused : int, inout encoding : byte)
        this.algorithmID = algID;
        this.subjectPublicKey = subjectPublicKey;
        this.unusedBits = unused;
        this.encoding = encoding;
!!!2241691.java!!!	getAlgorithmIdentifier() : AlgorithmIdentifier
        return algorithmID;
!!!2241819.java!!!	getSubjectPublicKey() : byte
        return subjectPublicKey;
!!!2241947.java!!!	getEncoded() : byte
        if (encoding == null) {
            encoding = ASN1.encode(this);
        }
        return encoding;
!!!2242075.java!!!	getPublicKey() : PublicKey
        if (publicKey == null) {
            final byte[] encoded = getEncoded();
            final KeySpec keySpec = new X509EncodedKeySpec(encoded);

            /* Try using the algorithm name first. */
            final String algName = algorithmID.getAlgorithmName();
            publicKey = generateKeyForAlgorithm(keySpec, algName);

            /*
             * Fall back to using the algorithm OID if it's not the same as the
             * algorithm name.
             */
            final String algOid = algorithmID.getAlgorithm();
            if (publicKey == null && !algOid.equals(algName)) {
                publicKey = generateKeyForAlgorithm(keySpec, algOid);
            }

            /*
             * Encode this as an X.509 public key since we didn't have any
             * KeyFactory that could handle this algorithm name or OID. Perhaps
             * the thing that's using this can decode it.
             */
            if (publicKey == null) {
                publicKey = new X509PublicKey(algOid, encoded, subjectPublicKey);
            }
        }
        return publicKey;
!!!2242203.java!!!	generateKeyForAlgorithm(inout keySpec : KeySpec, inout algorithm : String) : PublicKey
        try {
            return KeyFactory.getInstance(algorithm).generatePublic(keySpec);
        } catch (InvalidKeySpecException ignored) {
        } catch (NoSuchAlgorithmException ignored) {
        }
        return null;
