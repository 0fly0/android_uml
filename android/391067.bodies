class OldObjectOutputStreamTest
!!!2673307.java!!!	test_ConstructorLjava_io_OutputStream() : void
        oos.close();
        oos = new ObjectOutputStream(new ByteArrayOutputStream());
        oos.close();

        try {
            oos = new ObjectOutputStream(null);
            fail("Test 1: NullPointerException expected.");
        } catch (NullPointerException e) {
            // Expected.
        }

        Support_ASimpleOutputStream sos = new Support_ASimpleOutputStream(true);
        try {
            oos = new ObjectOutputStream(sos);
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2673435.java!!!	test_close() : void
        int outputSize = bao.size();
        // Writing of a primitive type should be buffered.
        oos.writeInt(42);
        assertTrue("Test 1: Primitive data unexpectedly written to the target stream.",
                bao.size() == outputSize);
        // Closing should write the buffered data to the target stream.
        oos.close();
        assertTrue("Test 2: Primitive data has not been written to the the target stream.",
                bao.size() > outputSize);

        try {
            oos_ioe.close();
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2673563.java!!!	test_drain() : void
        NoFlushTestOutputStream target = new NoFlushTestOutputStream();
        BasicObjectOutputStream boos = new BasicObjectOutputStream(target);
        int initialSize = target.size();
        boolean written = false;

        boos.writeBytes("Lorem ipsum");
        // If there is no buffer then the bytes have already been written.
        written = (target.size() > initialSize);

        boos.drain();
        assertTrue("Content has not been written to the target.",
                written || (target.size() > initialSize));
        assertFalse("flush() has been called on the target.",
                target.flushCalled);
!!!2673691.java!!!	test_enableReplaceObjectB() : void
        // Start testing without a SecurityManager.
        BasicObjectOutputStream boos = new BasicObjectOutputStream();
        assertFalse("Test 1: Object resolving must be disabled by default.",
                boos.enableReplaceObject(true));

        assertTrue("Test 2: enableReplaceObject did not return the previous value.",
                boos.enableReplaceObject(false));
!!!2673819.java!!!	test_flush() : void
        // Test for method void java.io.ObjectOutputStream.flush()
        int size = bao.size();
        oos.writeByte(127);
        assertTrue("Test 1: Data already flushed.", bao.size() == size);
        oos.flush();
        assertTrue("Test 2: Failed to flush data.", bao.size() > size);

        try {
            oos_ioe.flush();
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2673947.java!!!	test_putFields() : void
        /*
         * "SerializableTestHelper" is an object created for these tests with
         * two fields (Strings) and simple implementations of readObject and
         * writeObject which simply read and write the first field but not the
         * second one.
         */
        SerializableTestHelper sth;

        try {
            oos.putFields();
            fail("Test 1: NotActiveException expected.");
        } catch (NotActiveException e) {
            // Expected.
        }

        oos.writeObject(new SerializableTestHelper("Gabba", "Jabba"));
        oos.flush();
        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));
        sth = (SerializableTestHelper) (ois.readObject());
        assertEquals("Test 2: readFields or writeFields failed; first field not set.",
                "Gabba", sth.getText1());
        assertNull("Test 3: readFields or writeFields failed; second field should not have been set.",
                sth.getText2());
!!!2674075.java!!!	test_reset() : void
        String o = "HelloWorld";
        sos = new Support_OutputStream(200);
        oos.close();
        oos = new ObjectOutputStream(sos);
        oos.writeObject(o);
        oos.writeObject(o);
        oos.reset();
        oos.writeObject(o);

        sos.setThrowsException(true);
        try {
            oos.reset();
            fail("Test 1: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
        sos.setThrowsException(false);

        ois = new ObjectInputStream(new ByteArrayInputStream(sos.toByteArray()));
        assertEquals("Test 2: Incorrect object read.", o, ois.readObject());
        assertEquals("Test 3: Incorrect object read.", o, ois.readObject());
        assertEquals("Test 4: Incorrect object read.", o, ois.readObject());
        ois.close();
!!!2674203.java!!!	test_write$BII() : void
        byte[] buf = new byte[10];
        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));
        try {
            ois.read(buf, 0, -1);
            fail("IndexOutOfBoundsException not thrown");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }
        try {
            ois.read(buf, -1, 1);
            fail("IndexOutOfBoundsException not thrown");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }
        try {
            ois.read(buf, 10, 1);
            fail("IndexOutOfBoundsException not thrown");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }
        ois.close();

!!!2674331.java!!!	test_writeObjectOverrideLjava_lang_Object() : void
        BasicObjectOutputStream boos =
                new BasicObjectOutputStream(new ByteArrayOutputStream());

        try {
            boos.writeObjectOverride(new Object());
            fail("IOException expected.");
        }
        catch (IOException e) {
        }
        finally {
            boos.close();
        }
!!!2674459.java!!!	test_writeStreamHeader() : void
        BasicObjectOutputStream boos;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        short s;
        byte[] buffer;

        // Test 1: Make sure that writeStreamHeader() has been called.
        boos = new BasicObjectOutputStream(baos);
        try {
            assertTrue("Test 1: writeStreamHeader() has not been called.",
                         boos.writeStreamHeaderCalled);

            // Test 2: Check that at least four bytes have been written.
            buffer = baos.toByteArray();
            assertTrue("Test 2: At least four bytes should have been written",
                        buffer.length >= 4);

            // Test 3: Check the magic number.
            s = buffer[0];
            s <<= 8;
            s += ((short) buffer[1] & 0x00ff);
            assertEquals("Test 3: Invalid magic number written.",
                        java.io.ObjectStreamConstants.STREAM_MAGIC, s);

            // Test 4: Check the stream version number.
            s = buffer[2];
            s <<= 8;
            s += ((short) buffer[3] & 0x00ff);
            assertEquals("Invalid stream version number written.",
                        java.io.ObjectStreamConstants.STREAM_VERSION, s);
        }
        finally {
            boos.close();
        }
!!!2674587.java!!!	setUp() : void
        super.setUp();
        oos = new ObjectOutputStream(bao = new ByteArrayOutputStream());
        oos_ioe = new ObjectOutputStream(sos = new Support_OutputStream());
        sos.setThrowsException(true);
!!!2674715.java!!!	tearDown() : void
        super.tearDown();
        if (oos != null) {
            try {
                oos.close();
            } catch (Exception e) {}
        }
        if (oos_ioe != null) {
            try {
                oos_ioe.close();
            } catch (Exception e) {}
        }
        if (f != null && f.exists()) {
            if (!f.delete()) {
                fail("Error cleaning up files during teardown");
            }
        }
!!!2674843.java!!!	reload() : Object

        // Choose the load stream
        if (xload || xdump) {
            // Load from pre-existing file
            ois = new ObjectInputStream(new FileInputStream(xFileName + "-"
                    + getName() + ".ser"));
        } else {
            // Just load from memory, we dumped to memory
            ois = new ObjectInputStream(new ByteArrayInputStream(bao
                    .toByteArray()));
        }

        try {
            return ois.readObject();
        } finally {
            ois.close();
        }
!!!2674971.java!!!	dump(inout o : Object) : void

        // Choose the dump stream
        if (xdump) {
            oos = new ObjectOutputStream(new FileOutputStream(
                    f = new java.io.File(xFileName + "-" + getName() + ".ser")));
        } else {
            oos = new ObjectOutputStream(bao = new ByteArrayOutputStream());
        }

        // Dump the object
        try {
            oos.writeObject(o);
        } finally {
            oos.close();
        }
