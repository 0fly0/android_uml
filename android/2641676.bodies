class AmpBuffer
!!!11114892.cpp!!!	AmpBuffer(in type : AMP_SHM_TYPE, in size : int, in align : int, in hasBackup : bool, in es : AMP_SHM_HANDLE, in ctrl : AMP_SHM_HANDLE)
  HRESULT err = SUCCESS;
  if (!mCtrl) {
    err = AMP_SHM_Allocate(type, size, align, &mShm);
    if (err == SUCCESS) {
      err = AMP_SHM_GetVirtualAddress(mShm, 0, &mData);
      mIsAllocator = true;
    }
  }
  err = AMP_BD_Allocate(&mBD);
!!!11115020.cpp!!!	AmpBuffer(inout data : void, in size : int)
  HRESULT err = SUCCESS;
  mData = data;
  mIsAllocator = false;
  mCtrl = NULL;
  mHasBackup = false;
  err = AMP_SHM_Construct(data, size, &mShm);
  err = AMP_BD_Allocate(&mBD);
!!!11115148.cpp!!!	~AmpBuffer()
  HRESULT err = SUCCESS;
  if (NULL != mBD) {
    err = AMP_BDTAG_Clear(mBD);
    err = AMP_BD_Free(mBD);
  }
  if (!mCtrl) {
    if (mIsAllocator) {
      err = AMP_SHM_Release(mShm);
    } else {
      err = AMP_SHM_Destroy(mShm);
    }
  }
!!!11115276.cpp!!!	addPtsTag() : HRESULT
  UINT32 space = 0;
  AMP_BDTAG_UNITSTART pts_tag;
  kdMemset(&pts_tag, 0, sizeof(AMP_BDTAG_UNITSTART));
  pts_tag.Header = {AMP_BDTAG_BS_UNITSTART_CTRL, sizeof(AMP_BDTAG_UNITSTART)};
  return AMP_BDTAG_Append(mBD, (UINT8 *)&pts_tag, &mPtsIndex, &space);
!!!11115404.cpp!!!	addAVSPtsTag() : HRESULT
  UINT32 space = 0;
  AMP_BDTAG_AVS_PTS pts_tag;
  kdMemset(&pts_tag, 0, sizeof(AMP_BDTAG_AVS_PTS));
  pts_tag.Header = {AMP_BDTAG_SYNC_PTS_META, sizeof(AMP_BDTAG_AVS_PTS)};
  return AMP_BDTAG_Append(mBD, (UINT8 *)&pts_tag, &mPtsIndex, &space);
!!!11115532.cpp!!!	addPtsTag(inout header : OMX_BUFFERHEADERTYPE, in stream_pos : OMX_U32) : HRESULT
  UINT32 space = 0;
  AMP_BDTAG_UNITSTART pts_tag;
  kdMemset(&pts_tag, 0, sizeof(AMP_BDTAG_UNITSTART));
  pts_tag.Header = {AMP_BDTAG_BS_UNITSTART_CTRL, sizeof(AMP_BDTAG_UNITSTART)};
  convertUsto90K(header->nTimeStamp, &pts_tag.uPtsHigh, &pts_tag.uPtsLow);
  pts_tag.uStrmPos = stream_pos;
  return AMP_BDTAG_Append(mBD, (UINT8 *)&pts_tag, &mPtsIndex, &space);
!!!11115660.cpp!!!	addMemInfoTag() : HRESULT
  UINT32 space = 0;
  AMP_BDTAG_MEMINFO mem_tag;
  kdMemset(&mem_tag, 0, sizeof(AMP_BDTAG_MEMINFO));
  mem_tag.Header = {AMP_BDTAG_ASSOCIATE_MEM_INFO, sizeof(AMP_BDTAG_MEMINFO)};
  mem_tag.uMemHandle = mShm;
  mem_tag.uMemOffset = 0;
  return AMP_BDTAG_Append(mBD, (UINT8 *)&mem_tag, &mMemInfoIndex, &space);
!!!11115788.cpp!!!	addMemInfoTag(inout header : OMX_BUFFERHEADERTYPE, in offset : OMX_U32) : HRESULT
  UINT32 space = 0;
  AMP_BDTAG_MEMINFO mem_tag;
  kdMemset(&mem_tag, 0, sizeof(AMP_BDTAG_MEMINFO));
  mem_tag.Header = {AMP_BDTAG_ASSOCIATE_MEM_INFO, sizeof(AMP_BDTAG_MEMINFO)};
  mem_tag.uMemHandle = mShm;
  mem_tag.uSize = header->nFilledLen;
  mem_tag.uMemOffset = offset;
  if (header->nFlags & OMX_BUFFERFLAG_EOS) {
    mem_tag.uFlag |= AMP_MEMINFO_FLAG_EOS_MASK;
  }
  OMX_LOGD("addMemInfoTag  uMemOffset = %d  uSize = %d",
      mem_tag.uMemOffset, mem_tag.uSize);
  return AMP_BDTAG_Append(mBD, (UINT8 *)&mem_tag, &mMemInfoIndex, &space);
!!!11115916.cpp!!!	addFrameInfoTag() : HRESULT
  UINT32 space = 0;
  AMP_BGTAG_FRAME_INFO frame_tag;
  kdMemset(&frame_tag, 0, sizeof(AMP_BGTAG_FRAME_INFO));
  frame_tag.Header = {AMP_BGTAG_FRAME_INFO_META, sizeof(AMP_BGTAG_FRAME_INFO)};
  return AMP_BDTAG_Append(mBD, (UINT8 *)&frame_tag, &mFrameInfoIndex, &space);
!!!11116044.cpp!!!	addAudioFrameInfoTag(in channelnum : OMX_U32 = 8, in bitdepth : OMX_U32 = 16, in samplerate : OMX_U32 = 44100) : HRESULT
  UINT32 space = 0;
  AMP_BDTAG_AUD_FRAME_INFO audio_frame_tag;
  kdMemset(&audio_frame_tag, 0, sizeof(AMP_BDTAG_AUD_FRAME_INFO));
  audio_frame_tag.Header = {AMP_BDTAG_AUD_FRAME_CTRL,
      sizeof(AMP_BDTAG_AUD_FRAME_INFO)};
  audio_frame_tag.uBufNr = channelnum;
  audio_frame_tag.uBitDepth = bitdepth;
  audio_frame_tag.uSampleRate = samplerate;
  audio_frame_tag.uMemHandle = mShm;
  audio_frame_tag.uDataLength = 0;
  audio_frame_tag.uSize = AMP_AUD_MAX_BUF_NR * 4096;
  audio_frame_tag.uMemOffset[0] = 0 * 4096;
  audio_frame_tag.uMemOffset[1] = 1 * 4096;
  audio_frame_tag.uMemOffset[2] = 2 * 4096;
  audio_frame_tag.uMemOffset[3] = 3 * 4096;
  audio_frame_tag.uMemOffset[4] = 4 * 4096;
  audio_frame_tag.uMemOffset[5] = 5 * 4096;
  audio_frame_tag.uMemOffset[6] = 6 * 4096;
  audio_frame_tag.uMemOffset[7] = 7 * 4096;
  return AMP_BDTAG_Append(mBD, (UINT8 *)&audio_frame_tag,
      &mFrameInfoIndex, &space);
!!!11116172.cpp!!!	addCtrlInfoTag(in total : OMX_U32, in start : OMX_U32, in size : OMX_U32) : HRESULT
  UINT32 space = 0;
  AMP_BDTAG_TVPCTRLBUF ctrl_tag;
  kdMemset(&ctrl_tag, 0, sizeof(AMP_BDTAG_TVPCTRLBUF));
  ctrl_tag.Header = {AMP_BDTAG_PAYLOAD_CTRL_BUFFER, sizeof(AMP_BDTAG_TVPCTRLBUF)};
  ctrl_tag.uMemHandle = mCtrl;
  ctrl_tag.uTotal = total;
  ctrl_tag.uStart = start;
  ctrl_tag.uSize = size;
  OMX_LOGD("addCtrlInfoTag   uStart = %d   uSize = %d", ctrl_tag.uStart, ctrl_tag.uSize);
  return AMP_BDTAG_Append(mBD, (UINT8 *)&ctrl_tag, &mCtrlInfoIndex, &space);
!!!11116300.cpp!!!	addDmxCtrlInfoTag(in datacount : OMX_U32, in bytes : OMX_U32, in isEncrypted : OMX_BOOL, in sampleId : OMX_U64, in offset : OMX_U64, in drm_type : OMX_U8) : HRESULT
  UINT32 space = 0;
  AMP_BDTAG_DMX_CTRL_INFO ctrl_tag;
  kdMemset(&ctrl_tag, 0, sizeof(AMP_BDTAG_DMX_CTRL_INFO));
  if (drm_type == AMP_DRMSCHEME_PLAYREADY) {
    ctrl_tag.Header = {AMP_BDTAG_PAYLOAD_PLAYREADY_CTRL,
        sizeof(AMP_BDTAG_DMX_CTRL_INFO)};
    ctrl_tag.m_CtrlUnit.m_ControlInfoType = 0x11;  // DRM_PLAYREADY_PAYLOAD_CTRL;
  } else if (drm_type == AMP_DRMSCHEME_WIDEVINE) {
    ctrl_tag.Header = {AMP_BDTAG_PAYLOAD_WIDEVINE_CTRL,
        sizeof(AMP_BDTAG_DMX_CTRL_INFO)};
    ctrl_tag.m_CtrlUnit.m_ControlInfoType = 0x13;  // DRM_WIDEVINE_PAYLOAD_CTRL;
  } else {
    OMX_LOGE("Unsupported drm type %d\n", drm_type);
  }
  ctrl_tag.m_CtrlUnit.m_Rsvd = 0;
  ctrl_tag.m_CtrlUnit.m_DataCount = datacount;
  ctrl_tag.m_CtrlUnit.m_BufPosition = 0;
  ctrl_tag.m_CtrlUnit.m_UserData = 0;
  ctrl_tag.m_CtrlUnit.m_Union.m_PrPayloadInfo.m_IsEncrypted = isEncrypted;
  ctrl_tag.m_CtrlUnit.m_Union.m_PrPayloadInfo.m_PayloadSize = bytes;
  ctrl_tag.m_CtrlUnit.m_Union.m_PrPayloadInfo.SampleID = sampleId;
  ctrl_tag.m_CtrlUnit.m_Union.m_PrPayloadInfo.BlockOffset = offset>>4;
  ctrl_tag.m_CtrlUnit.m_Union.m_PrPayloadInfo.ByteOffset = offset & 0x0f;
  return AMP_BDTAG_Append(mBD, (UINT8 *)&ctrl_tag, &mCtrlInfoIndex, &space);
!!!11116428.cpp!!!	addDmxUnitStartTag(inout header : OMX_BUFFERHEADERTYPE, in stream_pos : OMX_U32) : HRESULT
  UINT32 space = 0;
  AMP_BDTAG_DMX_CTRL_INFO DmxCtrlTag;
  kdMemset(&DmxCtrlTag, 0, sizeof(AMP_BDTAG_DMX_CTRL_INFO));
  DmxCtrlTag.Header = {AMP_BDTAG_BS_UNITSTART_CTRL, sizeof(AMP_BDTAG_DMX_CTRL_INFO)};
  DmxCtrlTag.m_CtrlUnit.m_ControlInfoType = 0xa0;
  DmxCtrlTag.m_CtrlUnit.m_DataCount = stream_pos;
  convertUsto90K(header->nTimeStamp,
      &DmxCtrlTag.m_CtrlUnit.m_Union.m_UnitStart.m_PtsValue.uiStampHigh,
      &DmxCtrlTag.m_CtrlUnit.m_Union.m_UnitStart.m_PtsValue.uiStampLow);
  return AMP_BDTAG_Append(mBD, (UINT8 *)&DmxCtrlTag, &mPtsIndex, &space);
!!!11116556.cpp!!!	addCryptoCtrlInfoTag(in type : OMX_U8) : HRESULT
  UINT32 space = 0;
  AMP_BDTAG_DMX_CTRL_INFO ctrl_tag;

  ctrl_tag.Header = {AMP_BDTAG_BS_CRYPTO_CTRL,
      sizeof(AMP_BDTAG_DMX_CTRL_INFO)};
  // ctrl_tag.m_CtrlUnit.m_ControlInfoType = 0xf0;
  ctrl_tag.m_CtrlUnit.m_DataCount = 0;

  ctrl_tag.m_CtrlUnit.m_Union.m_CryptoPayloadInfo.CryptInfo.uiSchemeType = type;
  ctrl_tag.m_CtrlUnit.m_Union.m_CryptoPayloadInfo.CryptInfo.uiSessionID = 0;
  kdMemset(ctrl_tag.m_CtrlUnit.m_Union.m_CryptoPayloadInfo.CryptInfo.uiKeyID,
      0, 16);
  ctrl_tag.m_CtrlUnit.m_Union.m_CryptoPayloadInfo.CryptInfo.uiKeyIdLen = 4;
  return AMP_BDTAG_Append(mBD, (UINT8 *)&ctrl_tag, NULL, &space);
!!!11116684.cpp!!!	addStreamInfoTag() : HRESULT
  UINT32 space = 0;
  AMP_BDTAG_STREAM_INFO stream_tag;
  kdMemset(&stream_tag, 0, sizeof(AMP_BDTAG_STREAM_INFO));
  stream_tag.Header = {AMP_BDTAG_STREAM_INFO_META, sizeof(AMP_BDTAG_STREAM_INFO)};
  return AMP_BDTAG_Append(mBD, (UINT8 *)&stream_tag, &mStreamInfoIndex, &space);
!!!11116812.cpp!!!	clearBdTag() : HRESULT
  HRESULT err = SUCCESS;
  if (NULL != mBD) {
    err = AMP_BDTAG_Clear(mBD);
  }
  return err;
!!!11116940.cpp!!!	updatePts(inout header : OMX_BUFFERHEADERTYPE, in stream_pos : OMX_U32) : HRESULT
  AMP_BDTAG_UNITSTART *pts_tag = getPts();
  convertUsto90K(header->nTimeStamp, &pts_tag->uPtsHigh, &pts_tag->uPtsLow);
  pts_tag->uStrmPos = stream_pos;
  return SUCCESS;
!!!11117068.cpp!!!	updateAVSPts(inout header : OMX_BUFFERHEADERTYPE, in stream_pos : OMX_U32) : HRESULT
  AMP_BDTAG_AVS_PTS *pts_tag = getAVSPts();
  convertUsto90K(header->nTimeStamp, &pts_tag->uPtsHigh, &pts_tag->uPtsLow);
  return SUCCESS;
!!!11117196.cpp!!!	updateMemInfo(inout header : OMX_BUFFERHEADERTYPE) : HRESULT
  AMP_BDTAG_MEMINFO *mem_info = getMemInfo();
  if (header->nFlags & OMX_BUFFERFLAG_EOS) {
    mem_info->uFlag |= AMP_MEMINFO_FLAG_EOS_MASK;
  }
  mem_info->uSize = header->nFilledLen;
  mem_info->uMemOffset = header->nOffset;
  if (mHasBackup) {
    kdMemcpy(mData, header->pBuffer + header->nOffset, header->nFilledLen);
  }
  if (mem_info->uSize > 0) {
    AMP_SHM_CleanCache(mem_info->uMemHandle, 0, mem_info->uSize);
  }
  return SUCCESS;
!!!11117324.cpp!!!	updateAudioFrameInfo(inout header : OMX_BUFFERHEADERTYPE) : HRESULT
  AMP_BDTAG_AUD_FRAME_INFO *audio_frame_info = getAudioFrameInfo();
  if (header->nFlags & OMX_BUFFERFLAG_EOS) {
    audio_frame_info->uFlag |= AMP_MEMINFO_FLAG_EOS_MASK;
  }
  audio_frame_info->uDataLength = header->nFilledLen;
  audio_frame_info->uMemOffset[0] = header->nOffset;
  if (mHasBackup) {
    kdMemcpy(mData, header->pBuffer +header->nOffset, header->nFilledLen);
  }
  AMP_SHM_CleanCache(audio_frame_info->uMemHandle, 0, audio_frame_info->uSize);
  return SUCCESS;
!!!11117452.cpp!!!	updateFrameInfo(inout header : OMX_BUFFERHEADERTYPE) : HRESULT
  AMP_BGTAG_FRAME_INFO *frame_info = getFrameInfo();
  convertUsto90K(header->nTimeStamp, &frame_info->uiPtsHigh, &frame_info->uiPtsLow);
  return SUCCESS;
!!!11117580.cpp!!!	getAudioFrameInfo() : AMP_BDTAG_AUD_FRAME_INFO
  void *audio_frame_info = NULL;
  HRESULT err = AMP_BDTAG_GetWithIndex(mBD, mFrameInfoIndex, &audio_frame_info);
  return static_cast<AMP_BDTAG_AUD_FRAME_INFO *>(audio_frame_info);
!!!11117708.cpp!!!	getStreamInfo() : AMP_BDTAG_STREAM_INFO
  void *stream_info = NULL;
  HRESULT err = AMP_BDTAG_GetWithIndex(mBD, mStreamInfoIndex, &stream_info);
  return static_cast<AMP_BDTAG_STREAM_INFO *>(stream_info);
!!!11117836.cpp!!!	getPts() : AMP_BDTAG_UNITSTART
  void *pts_tag = NULL;
  HRESULT err = AMP_BDTAG_GetWithIndex(mBD, mPtsIndex, &pts_tag);
  return static_cast<AMP_BDTAG_UNITSTART *>(pts_tag);
!!!11117964.cpp!!!	getAVSPts() : AMP_BDTAG_AVS_PTS
  void *pts_tag = NULL;
  HRESULT err = AMP_BDTAG_GetWithIndex(mBD, mPtsIndex, &pts_tag);
  return static_cast<AMP_BDTAG_AVS_PTS *>(pts_tag);
!!!11118092.cpp!!!	getOutputPts() : AMP_BDTAG_AVS_PTS
  void *pts_tag = NULL;
  HRESULT err = AMP_BDTAG_GetWithIndex(mBD, mPtsIndex, &pts_tag);
  return static_cast<AMP_BDTAG_AVS_PTS *>(pts_tag);
!!!11118220.cpp!!!	getMemInfo() : AMP_BDTAG_MEMINFO
  void *mem_info = NULL;
  HRESULT err = AMP_BDTAG_GetWithIndex(mBD, mMemInfoIndex, &mem_info);
  return static_cast<AMP_BDTAG_MEMINFO *>(mem_info);
!!!11118348.cpp!!!	getCtrlInfo() : AMP_BDTAG_TVPCTRLBUF
  void *ctrl_info = NULL;
  HRESULT err = AMP_BDTAG_GetWithIndex(mBD, mCtrlInfoIndex, &ctrl_info);
  return static_cast<AMP_BDTAG_TVPCTRLBUF *>(ctrl_info);
!!!11118476.cpp!!!	getFrameInfo() : AMP_BGTAG_FRAME_INFO
  void *frame_info = NULL;
  HRESULT err = AMP_BDTAG_GetWithIndex(mBD, mFrameInfoIndex, &frame_info);
  return static_cast<AMP_BGTAG_FRAME_INFO *>(frame_info);
