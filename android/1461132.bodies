class DirListActivity
!!!9091468.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        ForwarderManager.getForwarderManager().start();

        mListView = getListView();

        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                ListItem item = (ListItem)parent.getItemAtPosition(position);

                if (item.isDirectory()) {
                    showDir(item.getRelativePath());
                } else {
                    /** Run the test */
                    runAllTestsUnder(item.getRelativePath());
                }
            }
        });

        mListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                ListItem item = (ListItem)parent.getItemAtPosition(position);

                if (item.isDirectory()) {
                    Bundle arguments = new Bundle(1);
                    arguments.putString("name", item.getName());
                    arguments.putString("relativePath", item.getRelativePath());
                    showDialog(DIALOG_RUN_ABORT_DIR, arguments);
                } else {
                    /** TODO: Maybe show some info about a test? */
                }

                return true;
            }
        });

        /** All the paths are relative to test root dir where possible */
        showDir("");
!!!9091596.java!!!	runAllTestsUnder(in relativePath : String) : void
        Intent intent = new Intent();
        intent.setClass(DirListActivity.this, TestsListActivity.class);
        intent.setAction(Intent.ACTION_RUN);
        intent.putExtra(TestsListActivity.EXTRA_TEST_PATH, relativePath);
        startActivity(intent);
!!!9091724.java!!!	onCreateOptionsMenu(inout menu : Menu) : boolean
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.gui_menu, menu);
        return true;
!!!9091852.java!!!	onOptionsItemSelected(inout item : MenuItem) : boolean
        switch (item.getItemId()) {
            case R.id.run_all:
                runAllTestsUnder(mCurrentDirPath);
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
!!!9091980.java!!!	onBackPressed() : void
        File currentDirParent = new File(mCurrentDirPath).getParentFile();
        if (currentDirParent != null) {
            showDir(currentDirParent.getPath());
        } else {
            showDir("");
        }
!!!9092108.java!!!	onConfigurationChanged(inout newConfig : Configuration) : void
        super.onConfigurationChanged(newConfig);

        setTitle(shortenTitle(mCurrentDirPath));
!!!9092236.java!!!	onCreateDialog(in id : int, in args : Bundle) : Dialog
        Dialog dialog = null;
        AlertDialog.Builder builder = new AlertDialog.Builder(this);

        switch (id) {
            case DIALOG_RUN_ABORT_DIR:
                builder.setTitle(getText(R.string.dialog_run_abort_dir_title_prefix) + " " +
                        args.getString("name"));
                builder.setMessage(R.string.dialog_run_abort_dir_msg);
                builder.setCancelable(true);

                builder.setPositiveButton(R.string.dialog_run_abort_dir_ok_button,
                        new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        removeDialog(DIALOG_RUN_ABORT_DIR);
                        runAllTestsUnder(args.getString("relativePath"));
                    }
                });

                builder.setNegativeButton(R.string.dialog_run_abort_dir_abort_button,
                        new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        removeDialog(DIALOG_RUN_ABORT_DIR);
                    }
                });

                dialog = builder.create();
                dialog.setOnCancelListener(new DialogInterface.OnCancelListener() {
                    @Override
                    public void onCancel(DialogInterface dialog) {
                        removeDialog(DIALOG_RUN_ABORT_DIR);
                    }
                });
                break;
        }

        return dialog;
!!!9092364.java!!!	showDir(in dirPath : String) : void
        mCurrentDirPath = dirPath;

        /** Show progress dialog with a delay */
        final Handler delayedDialogHandler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                if (msg.what == MSG_SHOW_PROGRESS_DIALOG) {
                    if (sProgressDialog == null) {
                        sProgressDialog = new ProgressDialog(DirListActivity.this);
                        sProgressDialog.setCancelable(false);
                        sProgressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
                        sProgressDialog.setTitle(R.string.dialog_progress_title);
                        sProgressDialog.setMessage(getText(R.string.dialog_progress_msg));
                    }
                    sProgressDialog.show();
                }
            }
        };
        Message msgShowDialog = delayedDialogHandler.obtainMessage(MSG_SHOW_PROGRESS_DIALOG);
        delayedDialogHandler.sendMessageDelayed(msgShowDialog, PROGRESS_DIALOG_DELAY_MS);

        /** Delegate loading contents from SD card to a new thread */
        new LoadListItemsThread(mCurrentDirPath, new Handler() {
            @Override
            public void handleMessage(Message msg) {
                if (msg.what == MSG_LOADED_ITEMS) {
                    setTitle(shortenTitle(mCurrentDirPath));
                    delayedDialogHandler.removeMessages(MSG_SHOW_PROGRESS_DIALOG);
                    if (sProgressDialog != null) {
                        sProgressDialog.dismiss();
                    }
                    if (msg.obj == null) {
                        Toast.makeText(DirListActivity.this, NO_RESPONSE_MESSAGE,
                                Toast.LENGTH_LONG).show();
                    } else {
                        setListAdapter(new DirListAdapter(DirListActivity.this,
                                (ListItem[])msg.obj));
                    }
                }
            }
        }).start();
!!!9092492.java!!!	shortenTitle(in title : String) : String
        if (title.equals("")) {
            return "Tests' root dir:";
        }
        int charCount = mListView.getWidth() / MEAN_TITLE_CHAR_SIZE;

        if (title.length() > charCount) {
            return "..." + title.substring(title.length() - charCount);
        } else {
            return title;
        }
!!!9092620.java!!!	getDirList(in dirPath : String) : ListItem
        List<ListItem> subDirs = new ArrayList<ListItem>();
        List<ListItem> subFiles = new ArrayList<ListItem>();

        List<String> dirRelativePaths = FsUtils.getLayoutTestsDirContents(dirPath, false, true);
        if (dirRelativePaths == null) {
            return null;
        }
        for (String dirRelativePath : dirRelativePaths) {
            if (FileFilter.isTestDir(new File(dirRelativePath).getName())) {
                subDirs.add(new ListItem(dirRelativePath, true));
            }
        }

        List<String> testRelativePaths = FsUtils.getLayoutTestsDirContents(dirPath, false, false);
        if (testRelativePaths == null) {
            return null;
        }
        for (String testRelativePath : testRelativePaths) {
            if (FileFilter.isTestFile(new File(testRelativePath).getName())) {
                subFiles.add(new ListItem(testRelativePath, false));
            }
        }

        /** Concatenate the two lists */
        subDirs.addAll(subFiles);

        return subDirs.toArray(new ListItem[subDirs.size()]);
