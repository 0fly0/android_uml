class ApplicationPackageManager
!!!2610572.java!!!	getPackageInfo(in packageName : String, in flags : int) : PackageInfo
        try {
            PackageInfo pi = mPM.getPackageInfo(packageName, flags, mContext.getUserId());
            if (pi != null) {
                return pi;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(packageName);
!!!2610700.java!!!	currentToCanonicalPackageNames(inout names : String) : String
        try {
            return mPM.currentToCanonicalPackageNames(names);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2610828.java!!!	canonicalToCurrentPackageNames(inout names : String) : String
        try {
            return mPM.canonicalToCurrentPackageNames(names);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2610956.java!!!	getLaunchIntentForPackage(in packageName : String) : Intent
        // First see if the package has an INFO activity; the existence of
        // such an activity is implied to be the desired front-door for the
        // overall package (such as if it has multiple launcher entries).
        Intent intentToResolve = new Intent(Intent.ACTION_MAIN);
        intentToResolve.addCategory(Intent.CATEGORY_INFO);
        intentToResolve.setPackage(packageName);
        List<ResolveInfo> ris = queryIntentActivities(intentToResolve, 0);

        // Otherwise, try to find a main launcher activity.
        if (ris == null || ris.size() <= 0) {
            // reuse the intent instance
            intentToResolve.removeCategory(Intent.CATEGORY_INFO);
            intentToResolve.addCategory(Intent.CATEGORY_LAUNCHER);
            intentToResolve.setPackage(packageName);
            ris = queryIntentActivities(intentToResolve, 0);
        }
        if (ris == null || ris.size() <= 0) {
            return null;
        }
        Intent intent = new Intent(intentToResolve);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.setClassName(ris.get(0).activityInfo.packageName,
                ris.get(0).activityInfo.name);
        return intent;
!!!2611084.java!!!	getPackageGids(in packageName : String) : int
        try {
            int[] gids = mPM.getPackageGids(packageName);
            if (gids == null || gids.length > 0) {
                return gids;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(packageName);
!!!2611212.java!!!	getPermissionInfo(in name : String, in flags : int) : PermissionInfo
        try {
            PermissionInfo pi = mPM.getPermissionInfo(name, flags);
            if (pi != null) {
                return pi;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(name);
!!!2611340.java!!!	queryPermissionsByGroup(in group : String, in flags : int) : PermissionInfo
        try {
            List<PermissionInfo> pi = mPM.queryPermissionsByGroup(group, flags);
            if (pi != null) {
                return pi;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(group);
!!!2611468.java!!!	getPermissionGroupInfo(in name : String, in flags : int) : PermissionGroupInfo
        try {
            PermissionGroupInfo pgi = mPM.getPermissionGroupInfo(name, flags);
            if (pgi != null) {
                return pgi;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(name);
!!!2611596.java!!!	getAllPermissionGroups(in flags : int) : PermissionGroupInfo
        try {
            return mPM.getAllPermissionGroups(flags);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2611724.java!!!	getApplicationInfo(in packageName : String, in flags : int) : ApplicationInfo
        try {
            ApplicationInfo ai = mPM.getApplicationInfo(packageName, flags, mContext.getUserId());
            if (ai != null) {
                return ai;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(packageName);
!!!2611852.java!!!	getActivityInfo(inout className : ComponentName, in flags : int) : ActivityInfo
        try {
            ActivityInfo ai = mPM.getActivityInfo(className, flags, mContext.getUserId());
            if (ai != null) {
                return ai;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(className.toString());
!!!2611980.java!!!	getReceiverInfo(inout className : ComponentName, in flags : int) : ActivityInfo
        try {
            ActivityInfo ai = mPM.getReceiverInfo(className, flags, mContext.getUserId());
            if (ai != null) {
                return ai;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(className.toString());
!!!2612108.java!!!	getServiceInfo(inout className : ComponentName, in flags : int) : ServiceInfo
        try {
            ServiceInfo si = mPM.getServiceInfo(className, flags, mContext.getUserId());
            if (si != null) {
                return si;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(className.toString());
!!!2612236.java!!!	getProviderInfo(inout className : ComponentName, in flags : int) : ProviderInfo
        try {
            ProviderInfo pi = mPM.getProviderInfo(className, flags, mContext.getUserId());
            if (pi != null) {
                return pi;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(className.toString());
!!!2612364.java!!!	getSystemSharedLibraryNames() : String
        try {
            return mPM.getSystemSharedLibraryNames();
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2612492.java!!!	getSystemAvailableFeatures() : FeatureInfo
        try {
            return mPM.getSystemAvailableFeatures();
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2612620.java!!!	hasSystemFeature(in name : String) : boolean
        try {
            return mPM.hasSystemFeature(name);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2612748.java!!!	checkPermission(in permName : String, in pkgName : String) : int
        try {
            return mPM.checkPermission(permName, pkgName);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2612876.java!!!	addPermission(inout info : PermissionInfo) : boolean
        try {
            return mPM.addPermission(info);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2613004.java!!!	addPermissionAsync(inout info : PermissionInfo) : boolean
        try {
            return mPM.addPermissionAsync(info);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2613132.java!!!	removePermission(in name : String) : void
        try {
            mPM.removePermission(name);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2613260.java!!!	grantPermission(in packageName : String, in permissionName : String) : void
        try {
            mPM.grantPermission(packageName, permissionName);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2613388.java!!!	revokePermission(in packageName : String, in permissionName : String) : void
        try {
            mPM.revokePermission(packageName, permissionName);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2613516.java!!!	checkSignatures(in pkg1 : String, in pkg2 : String) : int
        try {
            return mPM.checkSignatures(pkg1, pkg2);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2613644.java!!!	checkSignatures(in uid1 : int, in uid2 : int) : int
        try {
            return mPM.checkUidSignatures(uid1, uid2);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2613772.java!!!	getPackagesForUid(in uid : int) : String
        try {
            return mPM.getPackagesForUid(uid);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2613900.java!!!	getNameForUid(in uid : int) : String
        try {
            return mPM.getNameForUid(uid);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2614028.java!!!	getUidForSharedUser(in sharedUserName : String) : int
        try {
            int uid = mPM.getUidForSharedUser(sharedUserName);
            if(uid != -1) {
                return uid;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
        throw new NameNotFoundException("No shared userid for user:"+sharedUserName);
!!!2614156.java!!!	getInstalledPackages(in flags : int) : PackageInfo
        return getInstalledPackages(flags, mContext.getUserId());
!!!2614284.java!!!	getInstalledPackages(in flags : int, in userId : int) : PackageInfo
        try {
            final List<PackageInfo> packageInfos = new ArrayList<PackageInfo>();
            PackageInfo lastItem = null;
            ParceledListSlice<PackageInfo> slice;

            do {
                final String lastKey = lastItem != null ? lastItem.packageName : null;
                slice = mPM.getInstalledPackages(flags, lastKey, userId);
                lastItem = slice.populateList(packageInfos, PackageInfo.CREATOR);
            } while (!slice.isLastSlice());

            return packageInfos;
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2614412.java!!!	getInstalledApplications(in flags : int) : ApplicationInfo
        final int userId = mContext.getUserId();
        try {
            final List<ApplicationInfo> applicationInfos = new ArrayList<ApplicationInfo>();
            ApplicationInfo lastItem = null;
            ParceledListSlice<ApplicationInfo> slice;

            do {
                final String lastKey = lastItem != null ? lastItem.packageName : null;
                slice = mPM.getInstalledApplications(flags, lastKey, userId);
                lastItem = slice.populateList(applicationInfos, ApplicationInfo.CREATOR);
            } while (!slice.isLastSlice());

            return applicationInfos;
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2614540.java!!!	resolveActivity(inout intent : Intent, in flags : int) : ResolveInfo
        return resolveActivityAsUser(intent, flags, mContext.getUserId());
!!!2614668.java!!!	resolveActivityAsUser(inout intent : Intent, in flags : int, in userId : int) : ResolveInfo
        try {
            return mPM.resolveIntent(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                userId);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2614796.java!!!	queryIntentActivities(inout intent : Intent, in flags : int) : ResolveInfo
        return queryIntentActivitiesAsUser(intent, flags, mContext.getUserId());
!!!2614924.java!!!	queryIntentActivitiesAsUser(inout intent : Intent, in flags : int, in userId : int) : ResolveInfo
        try {
            return mPM.queryIntentActivities(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                userId);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2615052.java!!!	queryIntentActivityOptions(inout caller : ComponentName, inout specifics : Intent, inout intent : Intent, in flags : int) : ResolveInfo
        final ContentResolver resolver = mContext.getContentResolver();

        String[] specificTypes = null;
        if (specifics != null) {
            final int N = specifics.length;
            for (int i=0; i<N; i++) {
                Intent sp = specifics[i];
                if (sp != null) {
                    String t = sp.resolveTypeIfNeeded(resolver);
                    if (t != null) {
                        if (specificTypes == null) {
                            specificTypes = new String[N];
                        }
                        specificTypes[i] = t;
                    }
                }
            }
        }

        try {
            return mPM.queryIntentActivityOptions(caller, specifics,
                                                  specificTypes, intent, intent.resolveTypeIfNeeded(resolver),
                                                  flags, mContext.getUserId());
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2615180.java!!!	queryBroadcastReceivers(inout intent : Intent, in flags : int, in userId : int) : ResolveInfo
        try {
            return mPM.queryIntentReceivers(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                userId);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2615308.java!!!	queryBroadcastReceivers(inout intent : Intent, in flags : int) : ResolveInfo
        return queryBroadcastReceivers(intent, flags, mContext.getUserId());
!!!2615436.java!!!	resolveService(inout intent : Intent, in flags : int) : ResolveInfo
        try {
            return mPM.resolveService(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                mContext.getUserId());
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2615564.java!!!	queryIntentServicesAsUser(inout intent : Intent, in flags : int, in userId : int) : ResolveInfo
        try {
            return mPM.queryIntentServices(
                intent,
                intent.resolveTypeIfNeeded(mContext.getContentResolver()),
                flags,
                userId);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2615692.java!!!	queryIntentServices(inout intent : Intent, in flags : int) : ResolveInfo
        return queryIntentServicesAsUser(intent, flags, mContext.getUserId());
!!!2615820.java!!!	resolveContentProvider(in name : String, in flags : int) : ProviderInfo
        try {
            return mPM.resolveContentProvider(name, flags, mContext.getUserId());
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2615948.java!!!	queryContentProviders(in processName : String, in uid : int, in flags : int) : ProviderInfo
        try {
            return mPM.queryContentProviders(processName, uid, flags);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2616076.java!!!	getInstrumentationInfo(inout className : ComponentName, in flags : int) : InstrumentationInfo
        try {
            InstrumentationInfo ii = mPM.getInstrumentationInfo(
                className, flags);
            if (ii != null) {
                return ii;
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }

        throw new NameNotFoundException(className.toString());
!!!2616204.java!!!	queryInstrumentation(in targetPackage : String, in flags : int) : InstrumentationInfo
        try {
            return mPM.queryInstrumentation(targetPackage, flags);
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2616332.java!!!	getDrawable(in packageName : String, in resid : int, inout appInfo : ApplicationInfo) : Drawable
        ResourceName name = new ResourceName(packageName, resid);
        Drawable dr = getCachedIcon(name);
        if (dr != null) {
            return dr;
        }
        if (appInfo == null) {
            try {
                appInfo = getApplicationInfo(packageName, 0);
            } catch (NameNotFoundException e) {
                return null;
            }
        }
        try {
            Resources r = getResourcesForApplication(appInfo);
            dr = r.getDrawable(resid);
            if (false) {
                RuntimeException e = new RuntimeException("here");
                e.fillInStackTrace();
                Log.w(TAG, "Getting drawable 0x" + Integer.toHexString(resid)
                      + " from package " + packageName
                      + ": app scale=" + r.getCompatibilityInfo().applicationScale
                      + ", caller scale=" + mContext.getResources().getCompatibilityInfo().applicationScale,
                      e);
            }
            if (DEBUG_ICONS) Log.v(TAG, "Getting drawable 0x"
                                   + Integer.toHexString(resid) + " from " + r
                                   + ": " + dr);
            putCachedIcon(name, dr);
            return dr;
        } catch (NameNotFoundException e) {
            Log.w("PackageManager", "Failure retrieving resources for"
                  + appInfo.packageName);
        } catch (Resources.NotFoundException e) {
            Log.w("PackageManager", "Failure retrieving resources for"
                  + appInfo.packageName + ": " + e.getMessage());
        } catch (RuntimeException e) {
            // If an exception was thrown, fall through to return
            // default icon.
            Log.w("PackageManager", "Failure retrieving icon 0x"
                  + Integer.toHexString(resid) + " in package "
                  + packageName, e);
        }
        return null;
!!!2616460.java!!!	getActivityIcon(inout activityName : ComponentName) : Drawable
        return getActivityInfo(activityName, 0).loadIcon(this);
!!!2616588.java!!!	getActivityIcon(inout intent : Intent) : Drawable
        if (intent.getComponent() != null) {
            return getActivityIcon(intent.getComponent());
        }

        ResolveInfo info = resolveActivity(
            intent, PackageManager.MATCH_DEFAULT_ONLY);
        if (info != null) {
            return info.activityInfo.loadIcon(this);
        }

        throw new NameNotFoundException(intent.toUri(0));
!!!2616716.java!!!	getDefaultActivityIcon() : Drawable
        return Resources.getSystem().getDrawable(
            com.android.internal.R.drawable.sym_def_app_icon);
!!!2616844.java!!!	getApplicationIcon(inout info : ApplicationInfo) : Drawable
        return info.loadIcon(this);
!!!2616972.java!!!	getApplicationIcon(in packageName : String) : Drawable
        return getApplicationIcon(getApplicationInfo(packageName, 0));
!!!2617100.java!!!	getActivityLogo(inout activityName : ComponentName) : Drawable
        return getActivityInfo(activityName, 0).loadLogo(this);
!!!2617228.java!!!	getActivityLogo(inout intent : Intent) : Drawable
        if (intent.getComponent() != null) {
            return getActivityLogo(intent.getComponent());
        }

        ResolveInfo info = resolveActivity(
            intent, PackageManager.MATCH_DEFAULT_ONLY);
        if (info != null) {
            return info.activityInfo.loadLogo(this);
        }

        throw new NameNotFoundException(intent.toUri(0));
!!!2617356.java!!!	getApplicationLogo(inout info : ApplicationInfo) : Drawable
        return info.loadLogo(this);
!!!2617484.java!!!	getApplicationLogo(in packageName : String) : Drawable
        return getApplicationLogo(getApplicationInfo(packageName, 0));
!!!2617612.java!!!	getResourcesForActivity(inout activityName : ComponentName) : Resources
        return getResourcesForApplication(
            getActivityInfo(activityName, 0).applicationInfo);
!!!2617740.java!!!	getResourcesForApplication(inout app : ApplicationInfo) : Resources
        if (app.packageName.equals("system")) {
            return mContext.mMainThread.getSystemContext().getResources();
        }
        Resources r = mContext.mMainThread.getTopLevelResources(
                app.uid == Process.myUid() ? app.sourceDir : app.publicSourceDir,
                        Display.DEFAULT_DISPLAY, null, mContext.mPackageInfo);
        if (r != null) {
            return r;
        }
        throw new NameNotFoundException("Unable to open " + app.publicSourceDir);
!!!2617868.java!!!	getResourcesForApplication(in appPackageName : String) : Resources
        return getResourcesForApplication(
            getApplicationInfo(appPackageName, 0));
!!!2617996.java!!!	getResourcesForApplicationAsUser(in appPackageName : String, in userId : int) : Resources
        if (userId < 0) {
            throw new IllegalArgumentException(
                    "Call does not support special user #" + userId);
        }
        if ("system".equals(appPackageName)) {
            return mContext.mMainThread.getSystemContext().getResources();
        }
        try {
            ApplicationInfo ai = mPM.getApplicationInfo(appPackageName, 0, userId);
            if (ai != null) {
                return getResourcesForApplication(ai);
            }
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
        throw new NameNotFoundException("Package " + appPackageName + " doesn't exist");
!!!2618124.java!!!	isSafeMode() : boolean
        try {
            if (mCachedSafeMode < 0) {
                mCachedSafeMode = mPM.isSafeMode() ? 1 : 0;
            }
            return mCachedSafeMode != 0;
        } catch (RemoteException e) {
            throw new RuntimeException("Package manager has died", e);
        }
!!!2618252.java!!!	configurationChanged() : void
        synchronized (sSync) {
            sIconCache.clear();
            sStringCache.clear();
        }
!!!2618380.java!!!	ApplicationPackageManager(inout context : ContextImpl, inout pm : IPackageManager)
        mContext = context;
        mPM = pm;
!!!2618508.java!!!	getCachedIcon(inout name : ResourceName) : Drawable
        synchronized (sSync) {
            WeakReference<Drawable.ConstantState> wr = sIconCache.get(name);
            if (DEBUG_ICONS) Log.v(TAG, "Get cached weak drawable ref for "
                                   + name + ": " + wr);
            if (wr != null) {   // we have the activity
                Drawable.ConstantState state = wr.get();
                if (state != null) {
                    if (DEBUG_ICONS) {
                        Log.v(TAG, "Get cached drawable state for " + name + ": " + state);
                    }
                    // Note: It's okay here to not use the newDrawable(Resources) variant
                    //       of the API. The ConstantState comes from a drawable that was
                    //       originally created by passing the proper app Resources instance
                    //       which means the state should already contain the proper
                    //       resources specific information (like density.) See
                    //       BitmapDrawable.BitmapState for instance.
                    return state.newDrawable();
                }
                // our entry has been purged
                sIconCache.remove(name);
            }
        }
        return null;
!!!2618636.java!!!	putCachedIcon(inout name : ResourceName, inout dr : Drawable) : void
        synchronized (sSync) {
            sIconCache.put(name, new WeakReference<Drawable.ConstantState>(dr.getConstantState()));
            if (DEBUG_ICONS) Log.v(TAG, "Added cached drawable state for " + name + ": " + dr);
        }
!!!2618764.java!!!	handlePackageBroadcast(in cmd : int, inout pkgList : String, inout hasPkgInfo : boolean) : void
        boolean immediateGc = false;
        if (cmd == IApplicationThread.EXTERNAL_STORAGE_UNAVAILABLE) {
            immediateGc = true;
        }
        if (pkgList != null && (pkgList.length > 0)) {
            boolean needCleanup = false;
            for (String ssp : pkgList) {
                synchronized (sSync) {
                    if (sIconCache.size() > 0) {
                        Iterator<ResourceName> it = sIconCache.keySet().iterator();
                        while (it.hasNext()) {
                            ResourceName nm = it.next();
                            if (nm.packageName.equals(ssp)) {
                                //Log.i(TAG, "Removing cached drawable for " + nm);
                                it.remove();
                                needCleanup = true;
                            }
                        }
                    }
                    if (sStringCache.size() > 0) {
                        Iterator<ResourceName> it = sStringCache.keySet().iterator();
                        while (it.hasNext()) {
                            ResourceName nm = it.next();
                            if (nm.packageName.equals(ssp)) {
                                //Log.i(TAG, "Removing cached string for " + nm);
                                it.remove();
                                needCleanup = true;
                            }
                        }
                    }
                }
            }
            if (needCleanup || hasPkgInfo) {
                if (immediateGc) {
                    // Schedule an immediate gc.
                    Runtime.getRuntime().gc();
                } else {
                    ActivityThread.currentActivityThread().scheduleGcIdler();
                }
            }
        }
!!!2619788.java!!!	getCachedString(inout name : ResourceName) : CharSequence
        synchronized (sSync) {
            WeakReference<CharSequence> wr = sStringCache.get(name);
            if (wr != null) {   // we have the activity
                CharSequence cs = wr.get();
                if (cs != null) {
                    return cs;
                }
                // our entry has been purged
                sStringCache.remove(name);
            }
        }
        return null;
!!!2619916.java!!!	putCachedString(inout name : ResourceName, inout cs : CharSequence) : void
        synchronized (sSync) {
            sStringCache.put(name, new WeakReference<CharSequence>(cs));
        }
!!!2620044.java!!!	getText(in packageName : String, in resid : int, inout appInfo : ApplicationInfo) : CharSequence
        ResourceName name = new ResourceName(packageName, resid);
        CharSequence text = getCachedString(name);
        if (text != null) {
            return text;
        }
        if (appInfo == null) {
            try {
                appInfo = getApplicationInfo(packageName, 0);
            } catch (NameNotFoundException e) {
                return null;
            }
        }
        try {
            Resources r = getResourcesForApplication(appInfo);
            text = r.getText(resid);
            putCachedString(name, text);
            return text;
        } catch (NameNotFoundException e) {
            Log.w("PackageManager", "Failure retrieving resources for"
                  + appInfo.packageName);
        } catch (RuntimeException e) {
            // If an exception was thrown, fall through to return
            // default icon.
            Log.w("PackageManager", "Failure retrieving text 0x"
                  + Integer.toHexString(resid) + " in package "
                  + packageName, e);
        }
        return null;
!!!2620172.java!!!	getXml(in packageName : String, in resid : int, inout appInfo : ApplicationInfo) : XmlResourceParser
        if (appInfo == null) {
            try {
                appInfo = getApplicationInfo(packageName, 0);
            } catch (NameNotFoundException e) {
                return null;
            }
        }
        try {
            Resources r = getResourcesForApplication(appInfo);
            return r.getXml(resid);
        } catch (RuntimeException e) {
            // If an exception was thrown, fall through to return
            // default icon.
            Log.w("PackageManager", "Failure retrieving xml 0x"
                  + Integer.toHexString(resid) + " in package "
                  + packageName, e);
        } catch (NameNotFoundException e) {
            Log.w("PackageManager", "Failure retrieving resources for "
                  + appInfo.packageName);
        }
        return null;
!!!2620300.java!!!	getApplicationLabel(inout info : ApplicationInfo) : CharSequence
        return info.loadLabel(this);
!!!2620428.java!!!	installPackage(inout packageURI : Uri, inout observer : IPackageInstallObserver, in flags : int, in installerPackageName : String) : void
        try {
            mPM.installPackage(packageURI, observer, flags, installerPackageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2620556.java!!!	installPackageWithVerification(inout packageURI : Uri, inout observer : IPackageInstallObserver, in flags : int, in installerPackageName : String, inout verificationURI : Uri, inout manifestDigest : ManifestDigest, inout encryptionParams : ContainerEncryptionParams) : void
        try {
            mPM.installPackageWithVerification(packageURI, observer, flags, installerPackageName,
                    verificationURI, manifestDigest, encryptionParams);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2620684.java!!!	installPackageWithVerificationAndEncryption(inout packageURI : Uri, inout observer : IPackageInstallObserver, in flags : int, in installerPackageName : String, inout verificationParams : VerificationParams, inout encryptionParams : ContainerEncryptionParams) : void
        try {
            mPM.installPackageWithVerificationAndEncryption(packageURI, observer, flags,
                    installerPackageName, verificationParams, encryptionParams);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2620812.java!!!	installExistingPackage(in packageName : String) : int
        try {
            int res = mPM.installExistingPackage(packageName);
            if (res == INSTALL_FAILED_INVALID_URI) {
                throw new NameNotFoundException("Package " + packageName + " doesn't exist");
            }
            return res;
        } catch (RemoteException e) {
            // Should never happen!
            throw new NameNotFoundException("Package " + packageName + " doesn't exist");
        }
!!!2620940.java!!!	verifyPendingInstall(in id : int, in response : int) : void
        try {
            mPM.verifyPendingInstall(id, response);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2621068.java!!!	extendVerificationTimeout(in id : int, in verificationCodeAtTimeout : int, in millisecondsToDelay : long) : void
        try {
            mPM.extendVerificationTimeout(id, verificationCodeAtTimeout, millisecondsToDelay);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2621196.java!!!	setInstallerPackageName(in targetPackage : String, in installerPackageName : String) : void
        try {
            mPM.setInstallerPackageName(targetPackage, installerPackageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2621324.java!!!	movePackage(in packageName : String, inout observer : IPackageMoveObserver, in flags : int) : void
        try {
            mPM.movePackage(packageName, observer, flags);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2621452.java!!!	getInstallerPackageName(in packageName : String) : String
        try {
            return mPM.getInstallerPackageName(packageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
        return null;
!!!2621580.java!!!	deletePackage(in packageName : String, inout observer : IPackageDeleteObserver, in flags : int) : void
        try {
            mPM.deletePackage(packageName, observer, flags);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2621708.java!!!	clearApplicationUserData(in packageName : String, inout observer : IPackageDataObserver) : void
        try {
            mPM.clearApplicationUserData(packageName, observer, mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2621836.java!!!	deleteApplicationCacheFiles(in packageName : String, inout observer : IPackageDataObserver) : void
        try {
            mPM.deleteApplicationCacheFiles(packageName, observer);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2621964.java!!!	freeStorageAndNotify(in idealStorageSize : long, inout observer : IPackageDataObserver) : void
        try {
            mPM.freeStorageAndNotify(idealStorageSize, observer);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2622092.java!!!	freeStorage(in freeStorageSize : long, inout pi : IntentSender) : void
        try {
            mPM.freeStorage(freeStorageSize, pi);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2622220.java!!!	getPackageSizeInfo(in packageName : String, in userHandle : int, inout observer : IPackageStatsObserver) : void
        try {
            mPM.getPackageSizeInfo(packageName, userHandle, observer);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2622348.java!!!	addPackageToPreferred(in packageName : String) : void
        try {
            mPM.addPackageToPreferred(packageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2622476.java!!!	removePackageFromPreferred(in packageName : String) : void
        try {
            mPM.removePackageFromPreferred(packageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2622604.java!!!	getPreferredPackages(in flags : int) : PackageInfo
        try {
            return mPM.getPreferredPackages(flags);
        } catch (RemoteException e) {
            // Should never happen!
        }
        return new ArrayList<PackageInfo>();
!!!2622732.java!!!	addPreferredActivity(inout filter : IntentFilter, in match : int, inout set : ComponentName, inout activity : ComponentName) : void
        try {
            mPM.addPreferredActivity(filter, match, set, activity, mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2622860.java!!!	addPreferredActivity(inout filter : IntentFilter, in match : int, inout set : ComponentName, inout activity : ComponentName, in userId : int) : void
        try {
            mPM.addPreferredActivity(filter, match, set, activity, userId);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2622988.java!!!	replacePreferredActivity(inout filter : IntentFilter, in match : int, inout set : ComponentName, inout activity : ComponentName) : void
        try {
            mPM.replacePreferredActivity(filter, match, set, activity);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2623116.java!!!	clearPackagePreferredActivities(in packageName : String) : void
        try {
            mPM.clearPackagePreferredActivities(packageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2623244.java!!!	getPreferredActivities(inout outFilters : List<IntentFilter>, inout outActivities : List<ComponentName>, in packageName : String) : int
        try {
            return mPM.getPreferredActivities(outFilters, outActivities, packageName);
        } catch (RemoteException e) {
            // Should never happen!
        }
        return 0;
!!!2623372.java!!!	setComponentEnabledSetting(inout componentName : ComponentName, in newState : int, in flags : int) : void
        try {
            mPM.setComponentEnabledSetting(componentName, newState, flags, mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2623500.java!!!	getComponentEnabledSetting(inout componentName : ComponentName) : int
        try {
            return mPM.getComponentEnabledSetting(componentName, mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
        return PackageManager.COMPONENT_ENABLED_STATE_DEFAULT;
!!!2623628.java!!!	setApplicationEnabledSetting(in packageName : String, in newState : int, in flags : int) : void
        try {
            mPM.setApplicationEnabledSetting(packageName, newState, flags, mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
!!!2623756.java!!!	getApplicationEnabledSetting(in packageName : String) : int
        try {
            return mPM.getApplicationEnabledSetting(packageName, mContext.getUserId());
        } catch (RemoteException e) {
            // Should never happen!
        }
        return PackageManager.COMPONENT_ENABLED_STATE_DEFAULT;
!!!2623884.java!!!	getVerifierDeviceIdentity() : VerifierDeviceIdentity
        try {
            return mPM.getVerifierDeviceIdentity();
        } catch (RemoteException e) {
            // Should never happen!
        }
        return null;
