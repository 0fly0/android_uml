class CoreSettingsObserver
!!!8457484.java!!!	CoreSettingsObserver(inout activityManagerService : ActivityManagerService)
        super(activityManagerService.mHandler);
        mActivityManagerService = activityManagerService;
        beginObserveCoreSettings();
        sendCoreSettings();
!!!8457612.java!!!	getCoreSettingsLocked() : Bundle
        return (Bundle) mCoreSettings.clone();
!!!8457740.java!!!	onChange(inout selfChange : boolean) : void
        synchronized (mActivityManagerService) {
            sendCoreSettings();
        }
!!!8457868.java!!!	sendCoreSettings() : void
        populateCoreSettings(mCoreSettings);
        mActivityManagerService.onCoreSettingsChange(mCoreSettings);
!!!8457996.java!!!	beginObserveCoreSettings() : void
        for (String setting : sCoreSettingToTypeMap.keySet()) {
            Uri uri = Settings.Secure.getUriFor(setting);
            mActivityManagerService.mContext.getContentResolver().registerContentObserver(
                    uri, false, this);
        }
!!!8458124.java!!!	populateCoreSettings(inout snapshot : Bundle) : void
        Context context = mActivityManagerService.mContext;
        for (Map.Entry<String, Class<?>> entry : sCoreSettingToTypeMap.entrySet()) {
            String setting = entry.getKey();
            Class<?> type = entry.getValue();
            try {
                if (type == String.class) {
                    String value = Settings.Secure.getString(context.getContentResolver(),
                            setting);
                    snapshot.putString(setting, value);
                } else if (type == int.class) {
                    int value = Settings.Secure.getInt(context.getContentResolver(),
                            setting);
                    snapshot.putInt(setting, value);
                } else if (type == float.class) {
                    float value = Settings.Secure.getFloat(context.getContentResolver(),
                            setting);
                    snapshot.putFloat(setting, value);
                } else if (type == long.class) {
                    long value = Settings.Secure.getLong(context.getContentResolver(),
                            setting);
                    snapshot.putLong(setting, value);
                }
            } catch (SettingNotFoundException snfe) {
                Log.w(LOG_TAG, "Cannot find setting \"" + setting + "\"", snfe);
            }
        }
