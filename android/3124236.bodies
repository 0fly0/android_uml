class PoloChallengeResponse
!!!13163020.java!!!	PoloChallengeResponse(inout clientCert : Certificate, inout serverCert : Certificate, inout logger : DebugLogger)
    mClientCertificate = clientCert;
    mServerCertificate = serverCert;
    mLogger = logger;
!!!13163148.java!!!	getAlpha(inout nonce : byte) : byte
    PublicKey clientPubKey = mClientCertificate.getPublicKey();
    PublicKey serverPubKey = mServerCertificate.getPublicKey();

    logDebug("getAlpha, nonce=" + PoloUtil.bytesToHexString(nonce));
    
    if (!(clientPubKey instanceof RSAPublicKey) ||
        !(serverPubKey instanceof RSAPublicKey)) {
      throw new PoloException("Polo only supports RSA public keys");
    }

    RSAPublicKey clientPubRsa = (RSAPublicKey) clientPubKey;
    RSAPublicKey serverPubRsa = (RSAPublicKey) serverPubKey;
    
    MessageDigest digest;
    try {
      digest = MessageDigest.getInstance(HASH_ALGORITHM);
    } catch (NoSuchAlgorithmException e) {
      throw new PoloException("Could not get digest algorithm", e);
    }
    
    byte[] digestBytes;
    byte[] clientModulus = clientPubRsa.getModulus().abs().toByteArray();
    byte[] clientExponent =
        clientPubRsa.getPublicExponent().abs().toByteArray();
    byte[] serverModulus = serverPubRsa.getModulus().abs().toByteArray();
    byte[] serverExponent =
        serverPubRsa.getPublicExponent().abs().toByteArray();
    
    // Per "Polo Implementation Overview", section 6.1, leading null bytes must
    // be removed prior to hashing the key material.
    clientModulus = removeLeadingNullBytes(clientModulus);
    clientExponent = removeLeadingNullBytes(clientExponent);
    serverModulus = removeLeadingNullBytes(serverModulus);
    serverExponent = removeLeadingNullBytes(serverExponent);
    
    logVerbose("Hash inputs, in order: ");
    logVerbose("   client modulus: " + PoloUtil.bytesToHexString(clientModulus));
    logVerbose("  client exponent: " + PoloUtil.bytesToHexString(clientExponent));
    logVerbose("   server modulus: " + PoloUtil.bytesToHexString(serverModulus));
    logVerbose("  server exponent: " + PoloUtil.bytesToHexString(serverExponent));
    logVerbose("            nonce: " + PoloUtil.bytesToHexString(nonce));

    // Per "Polo Implementation Overview", section 6.1, client key material is
    // hashed first, followed by the server key material, followed by the
    // nonce.
    digest.update(clientModulus);
    digest.update(clientExponent);
    digest.update(serverModulus);
    digest.update(serverExponent);
    digest.update(nonce);
    
    digestBytes = digest.digest();
    logDebug("Generated hash: " + PoloUtil.bytesToHexString(digestBytes));
    return digestBytes;
!!!13163276.java!!!	getGamma(inout nonce : byte) : byte
      byte[] alphaBytes = getAlpha(nonce);
      assert(alphaBytes.length >= nonce.length);
      
      byte[] result = new byte[nonce.length * 2];
      
      System.arraycopy(alphaBytes, 0, result, 0, nonce.length);
      System.arraycopy(nonce, 0, result, nonce.length, nonce.length);
      
      return result;
!!!13163404.java!!!	extractNonce(inout gamma : byte) : byte
    if ((gamma.length < 2) || (gamma.length % 2 != 0)) {
      throw new IllegalArgumentException();
    }
    int nonceLength = gamma.length / 2;
    byte[] nonce = new byte[nonceLength];
    System.arraycopy(gamma, nonceLength, nonce, 0, nonceLength);
    return nonce;
!!!13163532.java!!!	checkGamma(inout gamma : byte) : boolean
    
    byte[] nonce;
    try {
      nonce = extractNonce(gamma);
    } catch (IllegalArgumentException e) {
      logDebug("Illegal nonce value.");
      return false;
    }
    logDebug("Nonce is: " + PoloUtil.bytesToHexString(nonce));
    logDebug("User gamma is: " + PoloUtil.bytesToHexString(gamma));
    logDebug("Generated gamma is: " + PoloUtil.bytesToHexString(getGamma(nonce)));
    return Arrays.equals(gamma, getGamma(nonce));
!!!13163660.java!!!	removeLeadingNullBytes(inout inArray : byte) : byte
    int offset = 0;
    while (offset < inArray.length & inArray[offset] == 0) {
      offset += 1;
    }
    byte[] result = new byte[inArray.length - offset];
    for (int i=offset; i < inArray.length; i++) {
      result[i - offset] = inArray[i];
    }
    return result;
!!!13163788.java!!!	logDebug(in message : String) : void
    if (mLogger != null) {
      mLogger.debug(message);
    }
!!!13163916.java!!!	logVerbose(in message : String) : void
    if (mLogger != null) {
      mLogger.verbose(message);
    }
