class ExpatReader
!!!2270235.java!!!	getFeature(inout name : String) : boolean
        if (name == null) {
            throw new NullPointerException("name == null");
        }

        if (name.equals(Feature.VALIDATION)
                || name.equals(Feature.EXTERNAL_GENERAL_ENTITIES)
                || name.equals(Feature.EXTERNAL_PARAMETER_ENTITIES)) {
            return false;
        }

        if (name.equals(Feature.NAMESPACES)) {
            return processNamespaces;
        }

        if (name.equals(Feature.NAMESPACE_PREFIXES)) {
            return processNamespacePrefixes;
        }

        if (name.equals(Feature.STRING_INTERNING)) {
            return true;
        }

        throw new SAXNotRecognizedException(name);
!!!2270363.java!!!	setFeature(inout name : String, inout value : boolean) : void
        if (name == null) {
            throw new NullPointerException("name == null");
        }

        if (name.equals(Feature.VALIDATION)
                || name.equals(Feature.EXTERNAL_GENERAL_ENTITIES)
                || name.equals(Feature.EXTERNAL_PARAMETER_ENTITIES)) {
            if (value) {
                throw new SAXNotSupportedException("Cannot enable " + name);
            } else {
                // Default.
                return;
            }
        }

        if (name.equals(Feature.NAMESPACES)) {
            processNamespaces = value;
            return;
        }

        if (name.equals(Feature.NAMESPACE_PREFIXES)) {
            processNamespacePrefixes = value;
            return;
        }

        if (name.equals(Feature.STRING_INTERNING)) {
            if (value) {
                // Default.
                return;
            } else {
                throw new SAXNotSupportedException("Cannot disable " + name);
            }
        }

        throw new SAXNotRecognizedException(name);
!!!2270491.java!!!	getProperty(inout name : String) : Object
        if (name == null) {
            throw new NullPointerException("name == null");
        }

        if (name.equals(LEXICAL_HANDLER_PROPERTY)) {
            return lexicalHandler;
        }

        throw new SAXNotRecognizedException(name);
!!!2270619.java!!!	setProperty(inout name : String, inout value : Object) : void
        if (name == null) {
            throw new NullPointerException("name == null");
        }

        if (name.equals(LEXICAL_HANDLER_PROPERTY)) {
            // The object must implement LexicalHandler
            if (value instanceof LexicalHandler || value == null) {
                this.lexicalHandler = (LexicalHandler) value;
                return;
            }
            throw new SAXNotSupportedException("value doesn't implement " +
                    "org.xml.sax.ext.LexicalHandler");
        }

        throw new SAXNotRecognizedException(name);
!!!2270747.java!!!	setEntityResolver(inout resolver : EntityResolver) : void
        this.entityResolver = resolver;
!!!2270875.java!!!	getEntityResolver() : EntityResolver
        return entityResolver;
!!!2271003.java!!!	setDTDHandler(inout dtdHandler : DTDHandler) : void
        this.dtdHandler = dtdHandler;
!!!2271131.java!!!	getDTDHandler() : DTDHandler
        return dtdHandler;
!!!2271259.java!!!	setContentHandler(inout handler : ContentHandler) : void
        this.contentHandler = handler;
!!!2271387.java!!!	getContentHandler() : ContentHandler
        return this.contentHandler;
!!!2271515.java!!!	setErrorHandler(inout handler : ErrorHandler) : void
        this.errorHandler = handler;
!!!2271643.java!!!	getErrorHandler() : ErrorHandler
        return errorHandler;
!!!2271771.java!!!	getLexicalHandler() : LexicalHandler
        return lexicalHandler;
!!!2271899.java!!!	setLexicalHandler(inout lexicalHandler : LexicalHandler) : void
        this.lexicalHandler = lexicalHandler;
!!!2272027.java!!!	isNamespaceProcessingEnabled() : boolean
        return processNamespaces;
!!!2272155.java!!!	setNamespaceProcessingEnabled(inout processNamespaces : boolean) : void
        this.processNamespaces = processNamespaces;
!!!2272283.java!!!	parse(inout input : InputSource) : void
        if (processNamespacePrefixes && processNamespaces) {
            /*
             * Expat has XML_SetReturnNSTriplet, but that still doesn't
             * include xmlns attributes like this feature requires. We may
             * have to implement namespace processing ourselves if we want
             * this (not too difficult). We obviously "support" namespace
             * prefixes if namespaces are disabled.
             */
            throw new SAXNotSupportedException("The 'namespace-prefix' " +
                    "feature is not supported while the 'namespaces' " +
                    "feature is enabled.");
        }

        // Try the character stream.
        Reader reader = input.getCharacterStream();
        if (reader != null) {
            try {
                parse(reader, input.getPublicId(), input.getSystemId());
            } finally {
                IoUtils.closeQuietly(reader);
            }
            return;
        }

        // Try the byte stream.
        InputStream in = input.getByteStream();
        String encoding = input.getEncoding();
        if (in != null) {
            try {
                parse(in, encoding, input.getPublicId(), input.getSystemId());
            } finally {
                IoUtils.closeQuietly(in);
            }
            return;
        }

        String systemId = input.getSystemId();
        if (systemId == null) {
            throw new SAXException("No input specified.");
        }

        // Try the system id.
        in = ExpatParser.openUrl(systemId);
        try {
            parse(in, encoding, input.getPublicId(), systemId);
        } finally {
            IoUtils.closeQuietly(in);
        }
!!!2272411.java!!!	parse(inout in : Reader, inout publicId : String, inout systemId : String) : void
        ExpatParser parser = new ExpatParser(
                ExpatParser.CHARACTER_ENCODING,
                this,
                processNamespaces,
                publicId,
                systemId
        );
        parser.parseDocument(in);
!!!2272539.java!!!	parse(inout in : InputStream, inout charsetName : String, inout publicId : String, inout systemId : String) : void
        ExpatParser parser =
            new ExpatParser(charsetName, this, processNamespaces, publicId, systemId);
        parser.parseDocument(in);
!!!2272667.java!!!	parse(inout systemId : String) : void
        parse(new InputSource(systemId));
