class PendingResult
!!!2522764.java!!!	PendingResult(in resultCode : int, in resultData : String, inout resultExtras : Bundle, in type : int, inout ordered : boolean, inout sticky : boolean, inout token : IBinder, in userId : int)
            mResultCode = resultCode;
            mResultData = resultData;
            mResultExtras = resultExtras;
            mType = type;
            mOrderedHint = ordered;
            mInitialStickyHint = sticky;
            mToken = token;
            mSendingUser = userId;
!!!2522892.java!!!	setResultCode(in code : int) : void
            checkSynchronousHint();
            mResultCode = code;
!!!2523020.java!!!	getResultCode() : int
            return mResultCode;
!!!2523148.java!!!	setResultData(in data : String) : void
            checkSynchronousHint();
            mResultData = data;
!!!2523276.java!!!	getResultData() : String
            return mResultData;
!!!2523404.java!!!	setResultExtras(inout extras : Bundle) : void
            checkSynchronousHint();
            mResultExtras = extras;
!!!2523532.java!!!	getResultExtras(inout makeMap : boolean) : Bundle
            Bundle e = mResultExtras;
            if (!makeMap) return e;
            if (e == null) mResultExtras = e = new Bundle();
            return e;
!!!2523660.java!!!	setResult(in code : int, in data : String, inout extras : Bundle) : void
            checkSynchronousHint();
            mResultCode = code;
            mResultData = data;
            mResultExtras = extras;
!!!2523788.java!!!	getAbortBroadcast() : boolean
            return mAbortBroadcast;
!!!2523916.java!!!	abortBroadcast() : void
            checkSynchronousHint();
            mAbortBroadcast = true;
!!!2524044.java!!!	clearAbortBroadcast() : void
            mAbortBroadcast = false;
!!!2524172.java!!!	finish() : void
            if (mType == TYPE_COMPONENT) {
                final IActivityManager mgr = ActivityManagerNative.getDefault();
                if (QueuedWork.hasPendingWork()) {
                    // If this is a broadcast component, we need to make sure any
                    // queued work is complete before telling AM we are done, so
                    // we don't have our process killed before that.  We now know
                    // there is pending work; put another piece of work at the end
                    // of the list to finish the broadcast, so we don't block this
                    // thread (which may be the main thread) to have it finished.
                    //
                    // Note that we don't need to use QueuedWork.add() with the
                    // runnable, since we know the AM is waiting for us until the
                    // executor gets to it.
                    QueuedWork.singleThreadExecutor().execute( new Runnable() {
                        @Override public void run() {
                            if (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,
                                    "Finishing broadcast after work to component " + mToken);
                            sendFinished(mgr);
                        }
                    });
                } else {
                    if (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,
                            "Finishing broadcast to component " + mToken);
                    sendFinished(mgr);
                }
            } else if (mOrderedHint && mType != TYPE_UNREGISTERED) {
                if (ActivityThread.DEBUG_BROADCAST) Slog.i(ActivityThread.TAG,
                        "Finishing broadcast to " + mToken);
                final IActivityManager mgr = ActivityManagerNative.getDefault();
                sendFinished(mgr);
            }
!!!2524300.java!!!	setExtrasClassLoader(inout cl : ClassLoader) : void
            if (mResultExtras != null) {
                mResultExtras.setClassLoader(cl);
            }
!!!2524428.java!!!	sendFinished(inout am : IActivityManager) : void
            synchronized (this) {
                if (mFinished) {
                    throw new IllegalStateException("Broadcast already finished");
                }
                mFinished = true;
            
                try {
                    if (mResultExtras != null) {
                        mResultExtras.setAllowFds(false);
                    }
                    if (mOrderedHint) {
                        am.finishReceiver(mToken, mResultCode, mResultData, mResultExtras,
                                mAbortBroadcast);
                    } else {
                        // This broadcast was sent to a component; it is not ordered,
                        // but we still need to tell the activity manager we are done.
                        am.finishReceiver(mToken, 0, null, null, false);
                    }
                } catch (RemoteException ex) {
                }
            }
!!!2524556.java!!!	getSendingUserId() : int
            return mSendingUser;
!!!2524684.java!!!	checkSynchronousHint() : void
            // Note that we don't assert when receiving the initial sticky value,
            // since that may have come from an ordered broadcast.  We'll catch
            // them later when the real broadcast happens again.
            if (mOrderedHint || mInitialStickyHint) {
                return;
            }
            RuntimeException e = new RuntimeException(
                    "BroadcastReceiver trying to return result during a non-ordered broadcast");
            e.fillInStackTrace();
            Log.e("BroadcastReceiver", e.getMessage(), e);
