class CameraCapture
!!!9300620.java!!!	beginCapture(in cameraId : int, in width : int, in height : int, inout st : SurfaceTexture) : void
        mCameraId = cameraId;
        mSurfaceTexture = st;

        // Open the camera
        openCamera(width, height);

        // Start the camera
        mStartCaptureTime = SystemClock.elapsedRealtime();
        mCamera.startPreview();
        mIsOpen = true;
!!!9300748.java!!!	getCurrentFrame() : void
        if (checkNewFrame()) {
            if (mStartCaptureTime > 0 && SystemClock.elapsedRealtime() - mStartCaptureTime > 2000) {
                // Lock white-balance and exposure for effects
                Log.i("CC", "Locking white-balance and exposure!");
                Camera.Parameters params = mCamera.getParameters();
                params.setAutoWhiteBalanceLock(true);
                params.setAutoExposureLock(true);
                //mCamera.setParameters(params);
                mStartCaptureTime = 0;
            }

            mSurfaceTexture.updateTexImage();
            mSurfaceTexture.getTransformMatrix(mCameraTransform);

            // display it here
        }
!!!9300876.java!!!	hasNewFrame() : boolean
        return mNewFrameAvailable;
!!!9301004.java!!!	endCapture() : void
        mIsOpen = false;
        if (mCamera != null) {
            mCamera.release();
            mCamera = null;
            mSurfaceTexture = null;
        }
!!!9301132.java!!!	isOpen() : boolean
        return mIsOpen;
!!!9301260.java!!!	getWidth() : int
        return mWidth;
!!!9301388.java!!!	getHeight() : int
        return mHeight;
!!!9301516.java!!!	setCameraFrameListener(inout listener : CameraFrameListener) : void
        mListener = listener;
!!!9301644.java!!!	openCamera(in width : int, in height : int) : void
        // Setup camera
        mCamera = Camera.open(mCameraId);
        mCamera.setParameters(calcCameraParameters(width, height));

        // Create camera surface texture
        try {
            mCamera.setPreviewTexture(mSurfaceTexture);
        } catch (IOException e) {
            throw new RuntimeException("Could not bind camera surface texture: " +
                                       e.getMessage() + "!");
        }

        // Connect SurfaceTexture to callback
        mSurfaceTexture.setOnFrameAvailableListener(onCameraFrameAvailableListener);
!!!9301772.java!!!	calcCameraParameters(in width : int, in height : int) : Parameters
        Camera.Parameters params = mCamera.getParameters();
        params.setPreviewSize(mWidth, mHeight);

        // Find closest size
        int closestSize[] = findClosestSize(width, height, params);
        mWidth = closestSize[0];
        mHeight = closestSize[1];
        params.setPreviewSize(mWidth, mHeight);

        // Find closest FPS
        int closestRange[] = findClosestFpsRange(FRAMES_PER_SEC, params);

        params.setPreviewFpsRange(closestRange[Camera.Parameters.PREVIEW_FPS_MIN_INDEX],
                                  closestRange[Camera.Parameters.PREVIEW_FPS_MAX_INDEX]);

        return params;
!!!9301900.java!!!	findClosestSize(in width : int, in height : int, inout parameters : Parameters) : int
        List<Camera.Size> previewSizes = parameters.getSupportedPreviewSizes();
        int closestWidth = -1;
        int closestHeight = -1;
        int smallestWidth = previewSizes.get(0).width;
        int smallestHeight =  previewSizes.get(0).height;
        for (Camera.Size size : previewSizes) {
            // Best match defined as not being larger in either dimension than
            // the requested size, but as close as possible. The below isn't a
            // stable selection (reording the size list can give different
            // results), but since this is a fallback nicety, that's acceptable.
            if ( size.width <= width &&
                 size.height <= height &&
                 size.width >= closestWidth &&
                 size.height >= closestHeight) {
                closestWidth = size.width;
                closestHeight = size.height;
            }
            if ( size.width < smallestWidth &&
                 size.height < smallestHeight) {
                smallestWidth = size.width;
                smallestHeight = size.height;
            }
        }
        if (closestWidth == -1) {
            // Requested size is smaller than any listed size; match with smallest possible
            closestWidth = smallestWidth;
            closestHeight = smallestHeight;
        }
        int[] closestSize = {closestWidth, closestHeight};
        return closestSize;
!!!9302028.java!!!	findClosestFpsRange(in fps : int, inout params : Parameters) : int
        List<int[]> supportedFpsRanges = params.getSupportedPreviewFpsRange();
        int[] closestRange = supportedFpsRanges.get(0);
        int fpsk = fps * 1000;
        int minDiff = 1000000;
        for (int[] range : supportedFpsRanges) {
            int low = range[Camera.Parameters.PREVIEW_FPS_MIN_INDEX];
            int high = range[Camera.Parameters.PREVIEW_FPS_MAX_INDEX];
            if (low <= fpsk && high >= fpsk) {
                int diff = (fpsk - low) + (high - fpsk);
                if (diff < minDiff) {
                    closestRange = range;
                    minDiff = diff;
                }
            }
        }
        Log.i("CC", "Found closest range: "
            + closestRange[Camera.Parameters.PREVIEW_FPS_MIN_INDEX] + " - "
            + closestRange[Camera.Parameters.PREVIEW_FPS_MAX_INDEX]);
        return closestRange;
!!!9302156.java!!!	signalNewFrame() : void
        mNewFrameAvailable = true;
        if (mListener != null) {
            mListener.onNewCameraFrame();
        }
!!!9302284.java!!!	checkNewFrame() : boolean
        if (mNewFrameAvailable) {
            mNewFrameAvailable = false;
            return true;
        }
        return false;
