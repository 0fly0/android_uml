class OldBufferedInputStreamTest
!!!2637979.java!!!	test_ConstructorLjava_io_InputStream() : void
        is = new BufferedInputStream(isFile);

        try {
            is.read();
        } catch (Exception e) {
            fail("Test 1: Read failed on a freshly constructed buffer.");
        }
!!!2638107.java!!!	test_ConstructorLjava_io_InputStreamI() : void
        // regression test for harmony-2407
        new testBufferedInputStream(null);
        assertNotNull(testBufferedInputStream.buf);
        testBufferedInputStream.buf = null;
        new testBufferedInputStream(null, 100);
        assertNotNull(testBufferedInputStream.buf);
!!!2638491.java!!!	test_available() : void
        // Test for method int java.io.BufferedInputStream.available()
        try {
            assertTrue("Returned incorrect number of available bytes", is
                    .available() == fileString.length());
        } catch (IOException e) {
            fail("Exception during available test");
        }

        // Test that a closed stream throws an IOE for available()
        BufferedInputStream bis = new BufferedInputStream(
                new ByteArrayInputStream(new byte[] { 'h', 'e', 'l', 'l', 'o',
                        ' ', 't', 'i', 'm' }));
        int available = 0;
        try {
            available = bis.available();
            bis.close();
        } catch (IOException ex) {
            fail();
        }
        assertTrue(available != 0);

        try {
            bis.available();
            fail("Expected test to throw IOE.");
        } catch (IOException ex) {
            // expected
        } catch (Throwable ex) {
            fail("Expected test to throw IOE not "
                    + ex.getClass().getName());
        }
!!!2638619.java!!!	test_close() : void
        is.close();

        try {
            is.read();
            fail("Test 1: IOException expected when reading after closing " +
                 "the stream.");
        } catch (IOException e) {
            // Expected.
        }

        Support_ASimpleInputStream sis = new Support_ASimpleInputStream(true);
        is = new BufferedInputStream(sis);
        try {
            is.close();
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
        sis.throwExceptionOnNextUse = false;
!!!2638747.java!!!	test_markI_reset() : void
        byte[] buf1 = new byte[100];
        byte[] buf2 = new byte[100];

        // Test 1: Check that reset fails if no mark has been set.
        try {
            is.reset();
            fail("Test 1: IOException expected if no mark has been set.");
        } catch (IOException e) {
            // Expected.
        }

        // Test 2: Check that mark / reset works when the mark is not invalidated.
        is.skip(10);
        is.mark(100);
        is.read(buf1, 0, buf1.length);
        is.reset();
        is.read(buf2, 0, buf2.length);
        is.reset();
        assertTrue("Test 2: Failed to mark correct position or reset failed.",
                new String(buf1, 0, buf1.length).equals(new String(buf2, 0, buf2.length)));

        // Tests 3 and 4: Check that skipping less than readlimit bytes does
        // not invalidate the mark.
        is.skip(10);
        try {
            is.reset();
        } catch (IOException e) {
            fail("Test 3: Unexpected IOException " + e.getMessage());
        }
        is.read(buf2, 0, buf2.length);
        is.reset();
        assertTrue("Test 4: Failed to mark correct position, or reset failed.",
                new String(buf1, 0, buf1.length).equals(new String(buf2, 0, buf2.length)));

        // Test 8: Check that reset fails for a closed input stream.
        is.close();
        try {
            is.reset();
            fail("Test 8: IOException expected because the input stream is closed.");
        } catch (IOException e) {
            // Expected.
        }
!!!2638875.java!!!	test_read() : void
        int c = is.read();
        assertTrue("Test 1: Incorrect character read.",
                c == fileString.charAt(0));

        byte[] bytes = new byte[256];
        for (int i = 0; i < 256; i++) {
            bytes[i] = (byte) i;
        }

        BufferedInputStream in = new BufferedInputStream(
                new ByteArrayInputStream(bytes), 5);

        // Read more bytes than are buffered.
        for (int i = 0; i < 10; i++) {
            assertEquals("Test 2: Incorrect byte read;", bytes[i], in.read());
        }

        in.close();
        try {
            in.read();
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2639003.java!!!	setUp() : void
        fileName = System.getProperty("user.dir");
            String separator = System.getProperty("file.separator");
            if (fileName.charAt(fileName.length() - 1) == separator.charAt(0)) {
                fileName = Support_PlatformFile.getNewPlatformFile(fileName,
                        "input.tst");
            } else {
                fileName = Support_PlatformFile.getNewPlatformFile(fileName
                        + separator, "input.tst");
            }
            OutputStream fos = new FileOutputStream(fileName);
            fos.write(fileString.getBytes());
            fos.close();
            isFile = new FileInputStream(fileName);
        is = new BufferedInputStream(isFile);
!!!2639131.java!!!	tearDown() : void
        try {
            is.close();
        } catch (Exception e) {
        }
        try {
            File f = new File(fileName);
            f.delete();
        } catch (Exception e) {
        }
