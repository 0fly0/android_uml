class PoloUtil
!!!13164300.java!!!	getPeerCert(inout session : SSLSession) : Certificate
    try {      
      // Peer certificate
      Certificate[] certs = session.getPeerCertificates();
      if (certs == null || certs.length < 1) {
        throw new PoloException("No peer certificate.");
      }
      return certs[0];
    } catch (SSLPeerUnverifiedException e) {
      throw new PoloException(e);
    }
!!!13164428.java!!!	getLocalCert(inout session : SSLSession) : Certificate
    Certificate[] certs = session.getLocalCertificates();
    if (certs == null || certs.length < 1) {
      throw new PoloException("No local certificate.");
    }
    return certs[0];
!!!13164556.java!!!	bytesToHexString(inout bytes : byte) : String
    if (bytes == null || bytes.length == 0) {
      return "";
    }
    BigInteger bigint = new BigInteger(1, bytes);
    int formatLen = bytes.length * 2;
    return String.format("%0" + formatLen + "x", bigint);
!!!13164684.java!!!	hexStringToBytes(in hexstr : String) : byte
    if (hexstr == null || hexstr.length() == 0 || (hexstr.length() % 2) != 0) {
      throw new IllegalArgumentException("Bad input string.");
    }
    
    byte[] result = new byte[hexstr.length() / 2];
    for (int i=0; i < result.length; i++) {
      result[i] = (byte) Integer.parseInt(hexstr.substring(2 * i, 2 * (i + 1)),
          16);
    }
    return result;
!!!13164812.java!!!	intToBigEndianIntBytes(in intVal : int) : byte
    byte[] outBuf = new byte[4];
    outBuf[0] = (byte)((intVal >> 24) & 0xff);
    outBuf[1] = (byte)((intVal >> 16) & 0xff);
    outBuf[2] = (byte)((intVal >> 8) & 0xff);
    outBuf[3] = (byte)(intVal & 0xff);
    return outBuf;
!!!13164940.java!!!	intBigEndianBytesToLong(inout input : byte) : long
    assert (input.length == 4);
    long ret = (long)(input[0]) & 0xff;
    ret <<= 8;
    ret |= (long)(input[1]) & 0xff;
    ret <<= 8;
    ret |= (long)(input[2]) & 0xff;
    ret <<= 8;
    ret |= (long)(input[3]) & 0xff;
    return ret;
