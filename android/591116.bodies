class SensorEventConnection
!!!1730060.cpp!!!	~SensorEventConnection()
    ALOGD_IF(DEBUG_CONNECTIONS, "~SensorEventConnection(%p)", this);
    mService->cleanupConnection(this);
!!!1730316.cpp!!!	getSensorChannel() : sp<BitTube>
    return mChannel;
!!!1730444.cpp!!!	enableDisable(in handle : int, in enabled : bool) : status_t
    status_t err;
    if (enabled) {
        err = mService->enable(this, handle);
    } else {
        err = mService->disable(this, handle);
    }
    return err;
!!!1730572.cpp!!!	setEventRate(in handle : int, in ns : nsecs_t) : status_t
    return mService->setEventRate(this, handle, ns);
!!!1730828.cpp!!!	sendEvents(in buffer : sensors_event_t, in numEvents : size_t, inout scratch : sensors_event_t = NULL) : status_t
    // filter out events not for this connection
    size_t count = 0;
    if (scratch) {
        Mutex::Autolock _l(mConnectionLock);
        size_t i=0;
        while (i<numEvents) {
            const int32_t curr = buffer[i].sensor;
            if (mSensorInfo.indexOf(curr) >= 0) {
                do {
                    scratch[count++] = buffer[i++];
                } while ((i<numEvents) && (buffer[i].sensor == curr));
            } else {
                i++;
            }
        }
    } else {
        scratch = const_cast<sensors_event_t *>(buffer);
        count = numEvents;
    }

    // NOTE: ASensorEvent and sensors_event_t are the same type
    ssize_t size = SensorEventQueue::write(mChannel,
            reinterpret_cast<ASensorEvent const*>(scratch), count);
    if (size == -EAGAIN) {
        // the destination doesn't accept events anymore, it's probably
        // full. For now, we just drop the events on the floor.
        //ALOGW("dropping %d events on the floor", count);
        return size;
    }

    return size < 0 ? status_t(size) : status_t(NO_ERROR);
!!!1730956.cpp!!!	hasSensor(in handle : int32_t) : bool
    Mutex::Autolock _l(mConnectionLock);
    return mSensorInfo.indexOf(handle) >= 0;
!!!1731084.cpp!!!	hasAnySensor() : bool
    Mutex::Autolock _l(mConnectionLock);
    return mSensorInfo.size() ? true : false;
!!!1731212.cpp!!!	addSensor(in handle : int32_t) : bool
    Mutex::Autolock _l(mConnectionLock);
    if (mSensorInfo.indexOf(handle) < 0) {
        mSensorInfo.add(handle);
        return true;
    }
    return false;
!!!1731340.cpp!!!	removeSensor(in handle : int32_t) : bool
    Mutex::Autolock _l(mConnectionLock);
    if (mSensorInfo.remove(handle) >= 0) {
        return true;
    }
    return false;
