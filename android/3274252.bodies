class MediaDeviceSetupActivity
!!!14208652.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        mLog.d("onCreate");
        super.onCreate(savedInstanceState);

        mServiceConnection = new MediaDevicesServiceConnection(this) {
                @Override
                protected void onConnected() {
                    mLog.d("Service is connected");
                    mService = mServiceConnection.getBoundService();

                    mVideoInputList = Collections.EMPTY_LIST;
                    try {
                        mService.releaseAllDevices();

                        mVideoInputList = mService.getVideoPorts();
                        if (mDefaultVideoInput == null) {
                            mDefaultVideoInput = null;
                            for (VideoPort port : mVideoInputList) {
                                if (port.isDefault()) {
                                    mDefaultVideoInput = port;
                                    break;
                                }
                            }
                            if (mDefaultVideoInput != null && getVideoUri() == null) {
                                setVideoUri(mDefaultVideoInput.getVideoUri());
                            }
                        }

                        mLog.d("calling updateUI()");
                        updateUI();
                    } catch (RemoteException re) {
                        mLog.w("Failed to initialize", re);
                    }
                }

                @Override
                protected void onDisconnected() {
                    mDefaultVideoInput = null;
                    mVideoInputList = null;
                    mService = null;
                }
            };
        mServiceConnection.connect();

        initialize(getIntent());
!!!14208780.java!!!	onSaveInstanceState(inout outState : Bundle) : void
        // Do not save instance state because SetupFragment requres Context and so
        // it is impossible to be restored automatically.
!!!14208908.java!!!	getSetupActivityLayoutId() : int
        int layoutVersion = getResources().getInteger(
                R.integer.config_setup_activity_layout_version);
        if (layoutVersion >= 2) {
            return com.google.android.tv.resources.R.layout.abstract_setup_activity_v2;
        } else {
            return com.google.android.tv.resources.R.layout.abstract_setup_activity;
        }
!!!14209036.java!!!	getHelpDialogLayoutId() : int
        int layoutVersion = getResources().getInteger(
                R.integer.config_setup_activity_layout_version);
        if (layoutVersion >= 2)  {
            return com.google.android.tv.resources.R.layout.setup_help_dialog_v2;
        } else {
            return com.google.android.tv.resources.R.layout.setup_help_dialog;
        }
!!!14209164.java!!!	initialize(inout intent : Intent) : void
        // Device will be absent if we are being called from TvWelcome. In this
        // case, the user selects the device in the TunerTypeSelectionFragment,
        // and then mOriginalDevice gets set to that device when the user moves
        // to the next step.
        mOriginalDevice = MediaDevicesIntents.getDevice(intent);
        setDevice(mOriginalDevice);
        mLineupSetupOnly = intent.getBooleanExtra(Constants.EXTRA_LINEUP_SETUP_ONLY, false);
        if (mLineupSetupOnly) {
            setVideoUri(MediaDevicesIntents.getVideoUri(intent));
        }
        setProperty(SetupProperties.LINEUP_SETUP_ONLY, mLineupSetupOnly);

        mInitialSetup = (mOriginalDevice == null);
        setProperty(SetupProperties.IS_INITIAL_SETUP, mInitialSetup);

        setMetaBarVisible(mInitialSetup);
!!!14209292.java!!!	reset() : void
        mAfterPairedStep = "";
        setDevice(mOriginalDevice);
        getIntent().putExtra(MediaDevicesConstants.EXTRA_DEVICE, mOriginalDevice);
!!!14209420.java!!!	onNewIntent(inout intent : Intent) : void
        mLog.d("onNewIntent");
        super.onNewIntent(intent);

        initialize(intent);
!!!14209548.java!!!	onStart() : void
        mLog.d("onStart");
        String zip = getZipCode();
        setProperty(SetupProperties.ZIP_CODE_PROPERTY, zip);

        super.onStart();
!!!14209676.java!!!	onResume() : void
        mLog.d("onResume");
        super.onResume();

        ConnectionType type = ConnectionType.WIRED;

        if (isWifiConnected()) {
            if (isWifiAccessPointEnabled()) {
                type = ConnectionType.WIRELESS_ACCESS_POINT;
            } else {
                type = ConnectionType.WIRELESS;
            }
        }

        setProperty(SetupProperties.CONNECTION_TYPE_PROPERTY, type);
!!!14209804.java!!!	onPause() : void
        mLog.d("onPause");
        super.onPause();
!!!14209932.java!!!	onStop() : void
        mLog.d("onStop");
        super.onStop();
!!!14210060.java!!!	onDestroy() : void
        mLog.d("onDestroy");
        mServiceConnection.disconnect();
        mServiceConnection = null;

        super.onDestroy();
!!!14210188.java!!!	onActivityResult(in requestCode : int, in resultCode : int, in data : Intent) : void
        mLog.d("onActivityResult: requestCode=" + requestCode + ", data=" + data
                + ", resultCode = " + resultCode);
        if ((requestCode == REQUEST_CODE_PAIR)) {
            if ((resultCode == RESULT_OK) && (data != null)) {
                Device device = MediaDevicesIntents.getDevice(data);
                mLog.d("device type: " + device.getType());
                setDevice(device);
                setVisible(true);

                // Pair the device in the MDS.
                getIntent().putExtra(MediaDevicesConstants.EXTRA_DEVICE, device);
                try {
                    mService.pairDevice(device, getVideoUri());
                } catch (RemoteException re) {
                    mLog.w("Failed to pair device: " + device.getId(), re);
                }

                if (device.hasCapability(Capability.USES_CHANNEL_LINEUP)) {
                    // The device uses a channel lineup. Save the lineup
                    // details to the DB and associate the device with the
                    // lineup. If the device provides its own lineup, or it
                    // wants to write the channel list itself, then ask it to
                    // write its own channels.

                    final boolean deviceProvidesLineup = device.hasCapability(
                            Capability.PROVIDES_CHANNEL_LINEUP);

                    if (deviceProvidesLineup) {
                        // The device pairing activity provided its own Lineup
                        // in the result intent, so save that in our intent.
                        setLineup(MediaDevicesIntents.getLineup(data));
                    }

                    final boolean deviceWritesChannels = deviceProvidesLineup
                            || device.hasCapability(Capability.WRITES_CHANNEL_LIST);

                    saveLineup(deviceWritesChannels);
                    if (!deviceWritesChannels) {
                        // If the lineup is not null, proceed as normal. If it *is*
                        // null, then the user skipped the lineup selection step (only
                        // possible for OTA tuner), so skip to either the channel scan
                        // or the setup-complete step.
                        if (getLineup() != null) {
                            switch (determineTierQuestion()) {
                                case TIER_QUESTION_EXTENDED_AND_PREMIUM:
                                    doExtendedTierQuestion();
                                    mAfterPairedStep = TAG_EXTENDED_TIER_QUESTION;
                                    break;
                                case TIER_QUESTION_PREMIUM:
                                    doPremiumTierQuestion();
                                    mAfterPairedStep = TAG_PREMIUM_TIER_QUESTION;
                                    break;

                                default:
                                    // proceed to the "analyze channels" step.
                                    doWriteChannels();
                                    mAfterPairedStep = TAG_WRITE_CHANNELS;
                            }
                        } else {
                            if (device.hasCapability(Capability.CAN_SCAN_CHANNELS)) {
                                scanChannels();
                            } else {
                                doSetupComplete();
                            }
                        }
                    } else {
                        // The device writes its own channels. So we're done.
                        doSetupComplete();
                        mAfterPairedStep = TAG_SETUP_COMPLETE;
                    }
                } else {
                    // The device doesn't use a channel lineup. We're done.
                    doSetupComplete();
                    mAfterPairedStep = TAG_SETUP_COMPLETE;
                }
            } else if (resultCode == RESULT_CANCELED) {
                mLog.d("Pairing activity was cancelled by user.");
                reset();
                setVisible(true);
            } else if (resultCode == MediaDevicesConstants.RESULT_SKIPPED) {
                mLog.d("Pairing activity was skipped by user.");
                if (getDevice() != null) {
                    try {
                        mService.unpairDevice(getDevice().getId());
                    } catch (RemoteException re) {
                        mLog.w("Failed to unpair device: " + getDevice().getId(), re);
                    }
                }
                setResult(RESULT_OK);
                finish();
            } else {
                setVisible(true);
                showToast(R.string.warning_unable_to_pair_device, getDevice().getLabel());
            }
        } else if (requestCode == REQUEST_CODE_CHANNEL_SCAN) {
            mLog.d("returned from channel scan with result " + resultCode);
            setVisible(true);

            if (resultCode == RESULT_CANCELED) {
                backToStep(TAG_LINEUP_SELECTION);
            } else if (mLineupSetupOnly) {
                doFinished();
            } else {
                doSetupComplete();
            }
        }
!!!14210316.java!!!	doTunerTypeSelection() : void
        setCurrentStep(TAG_TUNER_TYPE_SELECTION,
                TunerTypeSelectionFragment.class,
                TunerTypeGuideImageFragment.class);
!!!14210444.java!!!	doVideoInputSelection() : void
        setCurrentStep(TAG_VIDEO_INPUT_SELECTION,
                VideoInputSelectionFragment.class,
                VideoPreviewFragment.class);
!!!14210572.java!!!	doVideoInputConflict() : void
        setCurrentStep(TAG_VIDEO_INPUT_CONFLICT,
                VideoInputConflictFragment.class,
                VideoPreviewFragment.class);
!!!14210700.java!!!	branchAfterPairingDeviceSelected() : void
        Device device = getDevice();
        if (device == null) {
            doFinished();
            return;
        }

        if (!device.hasCapability(Capability.USES_VIDEO_PORT)) {
            // Doesn't use a video input, so go to next step.
            setVideoUri(VideoPort.NOINPUT_URI);
            branchAfterVideoInputSelection();
        } else if (device.hasCapability(Capability.IS_BOUND_TO_PORT)) {
            // Uses a fixed video input. Store the URI and go to next step.
            String videoUriString = device.getCapabilityStringValue(
                    Capability.IS_BOUND_TO_PORT);
            if (TextUtils.isEmpty(videoUriString)) {
                mLog.e("Device has IS_BOUND_TO_PORT capability, but no video input is set!");
                return;
            }
            setVideoUri(Uri.parse(videoUriString));
            branchAfterVideoInputSelection();
        } else {
            // Otherwise, we need to do video input selection.
            doVideoInputSelection();
        }
!!!14210828.java!!!	branchAfterVideoInputSelection() : void
        Device device = getDevice();
        if (device.getType() == DeviceType.IR_BLASTER) {
            doDeviceTypeSelection();
        } else {
            branchAfterDeviceTypeSelection();
        }
!!!14210956.java!!!	branchAfterDeviceTypeSelection() : void
        Device device = getDevice();

        if (device == null) {
            doFinished();
        }

        if (device.hasCapability(Capability.USES_CHANNEL_LINEUP)) {
            if (device.hasCapability(Capability.PROVIDES_CHANNEL_LINEUP)) {
                // Device provides its own channel lineup.
                doDevicePairing();
            } else {
                // Device doesn't provide its own channel lineup; user must
                // select a lineup.
                doLineupSelection();
            }
        } else {
            // Device doesn't use a channel lineup, so proceed to pairing.
            doDevicePairing();
        }
!!!14211084.java!!!	doDeviceTypeSelection() : void
        setCurrentStep(TAG_DEVICE_TYPE_SELECTION,
                DeviceTypeSelectionFragment.class,
                VideoPreviewFragment.class);
!!!14211212.java!!!	doLineupSelection() : void
        boolean isTuner = (getDevice().getType() == DeviceType.OTA_TUNER);
        Class<?> displayFragmentClass = isTuner ? TunerScanIsNextExplanationFragment.class
                : VideoPreviewFragment.class;

        setCurrentStep(TAG_LINEUP_SELECTION,
                LineupSelectionFragment.class,
                displayFragmentClass);
        setVisible(true);
!!!14211340.java!!!	doSuggestTwoWayPairing() : void
        setCurrentStep(TAG_SUGGEST_TWO_WAY_PAIRING,
                SuggestTwoWayPairingFragment.class,
                ConnectionsImageFragment.class);
!!!14211468.java!!!	doTwoWayDeviceSelection() : void
        setCurrentStep(TAG_TWO_WAY_DEVICE_SELECTION,
                TwoWayDeviceSelectionFragment.class,
                VideoPreviewFragment.class);
!!!14211596.java!!!	doDevicePairing() : void
        Uri videoUri = null;
        Device device = getDevice();
        Lineup lineup = getLineup();

        if (device.hasCapability(Capability.USES_VIDEO_PORT)) {
            videoUri = getVideoUri();
        } else {
            videoUri = VideoPort.NOINPUT_URI;
        }

        Intent pairIntent = MediaDevicesIntents.createPairIntent(this, device, videoUri, lineup);
        if (pairIntent == null) {
            showToast(R.string.warning_unable_to_pair, device.getLabel());
        } else {
            setVisible(false);
            if (mInitialSetup) {
                putStepExtras(pairIntent);
            }
            startActivityForResult(pairIntent, REQUEST_CODE_PAIR);
        }
!!!14211724.java!!!	doExtendedTierQuestion() : void
        setCurrentStep(TAG_EXTENDED_TIER_QUESTION,
                ExtendedTierQuestionFragment.class,
                VideoPreviewFragment.class);
!!!14211852.java!!!	doPremiumTierQuestion() : void
        setCurrentStep(TAG_PREMIUM_TIER_QUESTION,
                PremiumTierQuestionFragment.class,
                VideoPreviewFragment.class);
!!!14211980.java!!!	doWriteChannels() : void
        boolean isTuner = (getDevice().getType() == DeviceType.OTA_TUNER);
        Class<?> displayFragmentClass = isTuner ? TunerScanIsNextExplanationFragment.class
                : VideoPreviewFragment.class;

        setCurrentStep(TAG_WRITE_CHANNELS,
                WriteChannelsFragment.class,
                displayFragmentClass);
!!!14212108.java!!!	doSetupComplete() : void
        setCurrentStep(TAG_SETUP_COMPLETE,
                SetupCompleteFragment.class,
                VideoPreviewFragment.class);
        setVisible(true);
!!!14212236.java!!!	doFinished() : void
        mLog.d("doFinished");

        // Send a TUNE intent to TvPlayer to switch to this newly-paired input.
        if (!mInitialSetup && (getDevice() != null)) {
            Uri uri = TvUriUtils.addDeviceId(TvUriUtils.PASSTHROUGH_URI, getDevice().getId());
            TvPlayerIntents.launchTuneIntent(this, uri);
        }

        setResult(RESULT_OK);
        finish();
!!!14212364.java!!!	onNext() : void
        String step = getCurrentStep();
        mLog.d("onNext; current step is " + step);
        final Device device = getDevice();

        if (step == null) {
            if (mInitialSetup) {
                doTunerTypeSelection();
            } else if (mLineupSetupOnly) {
                doLineupSelection();
            } else {
                branchAfterPairingDeviceSelected();
            }
        } else if (TAG_TUNER_TYPE_SELECTION.equals(step)) {
            mOriginalDevice = getDevice();
            branchAfterPairingDeviceSelected();
        } else if (TAG_VIDEO_INPUT_SELECTION.equals(step)) {
            if (hasVideoInputConflict()) {
                doVideoInputConflict();
            } else {
                branchAfterVideoInputSelection();
            }
        } else if (TAG_VIDEO_INPUT_CONFLICT.equals(step)) {
            branchAfterVideoInputSelection();
        } else if (TAG_DEVICE_TYPE_SELECTION.equals(step)) {
            branchAfterDeviceTypeSelection();
        } else if (TAG_LINEUP_SELECTION.equals(step)) {
            if (mLineupSetupOnly) {
                switch (determineTierQuestion()) {
                    case TIER_QUESTION_EXTENDED_AND_PREMIUM:
                        doExtendedTierQuestion();
                        break;
                    case TIER_QUESTION_PREMIUM:
                        doPremiumTierQuestion();
                        break;
                    default: {
                        final boolean deviceWritesChannels =
                                device.hasCapability(Capability.WRITES_CHANNEL_LIST);
                        saveLineup(deviceWritesChannels);
                        if (!deviceWritesChannels) {
                            doWriteChannels();
                        } else {
                            doFinished();
                        }
                    }
                }
            } else {
                final Lineup lineup = getLineup();
                if ((lineup != null) && lineup.getSupportsTwoWay()
                        && (device.getType() != DeviceType.TWO_WAY)) {
                    // Selected lineup supports two-way integration, but the selected
                    // device isn't a two-way device. Ask the user to confirm one-way
                    // pairing.
                    doSuggestTwoWayPairing();
                } else {
                    doDevicePairing();
                }
            }
        } else if (TAG_EXTENDED_TIER_QUESTION.equals(step)) {
            // Always proceed to premium tier question if we asked about
            // extended tier.
            doPremiumTierQuestion();
        } else if (TAG_PREMIUM_TIER_QUESTION.equals(step)) {
            final boolean deviceWritesChannels =
                    device.hasCapability(Capability.WRITES_CHANNEL_LIST);
            saveLineup(deviceWritesChannels);
            if (!deviceWritesChannels) {
                doWriteChannels();
            } else if (mLineupSetupOnly) {
                doFinished();
            } else {
                doSetupComplete();
            }
        } else if (TAG_WRITE_CHANNELS.equals(step)) {
            final boolean shouldScan = (getLineup() != null) && (device != null)
                    && device.hasCapability(Capability.CAN_SCAN_CHANNELS);
            if (shouldScan) {
                scanChannels();
            } else if (mLineupSetupOnly) {
                notifyLineupChange();
                doFinished();
            } else {
                doSetupComplete();
            }
        } else if (TAG_SUGGEST_TWO_WAY_PAIRING.equals(step)) {
            if ((Boolean) getProperty(SetupProperties.PAIR_TWO_WAY)) {
                doTwoWayDeviceSelection();
            } else {
                doDevicePairing();
            }
        } else if (TAG_TWO_WAY_DEVICE_SELECTION.equals(step)) {
            doDevicePairing();
        } else if (TAG_SETUP_COMPLETE.equals(step)) {
            doFinished();
        }
!!!14212492.java!!!	onBack() : boolean
        String step = getCurrentStep();
        mLog.d("onBack(); current step now " + step + " (first step? " + isFirstStep() + " )");

        if ((step != null) && step.equals(mAfterPairedStep)) {
            try {
                mService.unpairDevice(getDevice().getId());
            } catch (RemoteException re) {
                mLog.w("Failed to unpair device: " + getDevice().getId(), re);
            }
            reset();
        }
        if ((step == null) || isFirstStep()) {
            setResult(RESULT_CANCELED);
            finish();
        }

        return true;
!!!14212620.java!!!	onSkip() : void
        // Show a confirmation dialog.
        new AlertDialog.Builder(this)
                .setMessage(getString(R.string.tv_skip_warning, getGoogleTvDeviceName()))
                .setPositiveButton(getString(R.string.button_ok),
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                // Undo everything that's been done so far
                                // (e.g., pairing, channel write).
                                if (getDevice() != null) {
                                    try {
                                        mService.unpairDevice(getDevice().getId());
                                    } catch (RemoteException re) {
                                        mLog.w("Failed to unpair device: " +
                                                getDevice().getId(), re);
                                    }
                                }
                                setResult(RESULT_OK);
                                finish();
                            }
                        })
                .setNegativeButton(getString(R.string.button_cancel), null)
                .show();
!!!14212748.java!!!	onExplain() : void
        String step = getCurrentStep();
        String explanation = null;

        if (TAG_TUNER_TYPE_SELECTION.equals(step)) {
            explanation = getString(R.string.tuner_type_selection_explanation,
                    getGoogleTvDeviceName());
        } else if (TAG_VIDEO_INPUT_SELECTION.equals(step)) {
            explanation = getString(R.string.video_input_selection_explanation,
                    getGoogleTvDeviceName());
        } else if (TAG_VIDEO_INPUT_CONFLICT.equals(step)) {
            explanation = getString(R.string.video_input_conflict_explanation);
        } else if (TAG_DEVICE_TYPE_SELECTION.equals(step)) {
            explanation = getString(R.string.device_type_selection_explanation);
        } else if (TAG_LINEUP_SELECTION.equals(step)) {
            explanation = getString(R.string.lineup_selection_explanation);
        } else if (TAG_EXTENDED_TIER_QUESTION.equals(step)) {
            explanation = getString(R.string.extended_tier_question_explanation);
        } else if (TAG_PREMIUM_TIER_QUESTION.equals(step)) {
            explanation = getString(R.string.premium_tier_question_explanation);
        } else if (TAG_SUGGEST_TWO_WAY_PAIRING.equals(step)) {
            explanation = getString(R.string.suggest_two_way_pairing_explanation);
        } else if (TAG_TWO_WAY_DEVICE_SELECTION.equals(step)) {
            explanation = getString(R.string.two_way_device_selection_explanation);
        } else if (TAG_WRITE_CHANNELS.equals(step)) {
            explanation = getString(R.string.write_channels_explanation);
        } else if (TAG_SETUP_COMPLETE.equals(step)) {
            explanation = getString(R.string.success_explanation);
        }

        if (explanation != null) {
            showHelpDialog(explanation);
        }
!!!14212876.java!!!	onStepChanged(in step : String) : void
        if (TAG_LINEUP_SELECTION.equals(step)) {
            reset();
        }
!!!14213004.java!!!	hasVideoInputConflict() : boolean
        mLog.d("hasVideoInputConflict()");
        mExistingDeviceList = null;

        if (!getResources().getBoolean(R.bool.config_confirm_video_uri_conflict)) {
            mLog.d("not confirming conflicts");
            return false;
        }

        Uri videoUri = getVideoUri();

        // This only applies to HDMI inputs.
        if (! VideoPort.isHdmiInputUri(videoUri)) return false;

        mLog.d("checking if existing list has video URI: " + videoUri);

        mExistingDeviceList = null;
        try {
            mExistingDeviceList = mService.getPairedDevicesByInput(videoUri);
        } catch (RemoteException re) {
            mLog.w("Failed to get paired device: " + videoUri);
        }
        return (mExistingDeviceList != null) && !mExistingDeviceList.isEmpty();
!!!14213132.java!!!	getZipCode() : String
        String zipCode = Settings.Secure.getString(getContentResolver(),
                TvSettings.Secure.LOCATION_LINEUP_LOOKUP);
        if (zipCode != null) {
            return zipCode;
        } else {
            return DEFAULT_POSTAL_CODE;
        }
!!!14213260.java!!!	getVideoInputs() : VideoPort
        return mVideoInputList;
!!!14213388.java!!!	getExistingDeviceList() : Device
        return mExistingDeviceList;
!!!14213516.java!!!	unpairExistingDevices() : void
        try {
            for (Device device : mExistingDeviceList) {
                mService.unpairDevice(device.getId());
            }
            mExistingDeviceList.clear();
        } catch (RemoteException re) {
            mLog.w("Failed to unpair existing devices", re);
        }
!!!14213644.java!!!	getVideoUri() : Uri
        return (Uri) getProperty(VideoPreviewFragment.VIDEO_URI_PROPERTY);
!!!14213772.java!!!	getDefaultVideoInput() : VideoPort
        return mDefaultVideoInput;
!!!14213900.java!!!	setVideoUri(inout uri : Uri) : void
        setProperty(VideoPreviewFragment.VIDEO_URI_PROPERTY, uri);
!!!14214028.java!!!	determineTierQuestion() : int
        int tierQuestion = TIER_QUESTION_NONE;

        final Device device = getDevice();
        final Lineup lineup = getLineup();

        if ((lineup == null)
                || !device.hasCapability(Capability.REQUIRES_CHANNEL_LINEUP_TIER_SELECTION)) {
            return tierQuestion;
        }

        switch (lineup.getLineupType()) {
            case CABLE:
                // Ask about tier two & three in cable case.
                if (isTierTwoQuestioningEnabled()) {
                    tierQuestion = TIER_QUESTION_EXTENDED_AND_PREMIUM;
                }

                if (lineup.hasTier(TmsChannelTier.PPV)) {
                    lineup.setTierEnabled(TmsChannelTier.PPV, false);
                }
                break;

            case SATELLITE:
                // Always include tier two.
                lineup.setTierEnabled(TmsChannelTier.EXTENDED, true);

                if (lineup.hasTier(TmsChannelTier.PREMIUM)) {
                    tierQuestion = TIER_QUESTION_PREMIUM;
                }

                if (lineup.hasTier(TmsChannelTier.PPV)) {
                    lineup.setTierEnabled(TmsChannelTier.PPV, false);
                }
                break;

            default:
                break;
        }

        return tierQuestion;
!!!14214156.java!!!	isTierTwoQuestioningEnabled() : boolean
        return Gservices.getBoolean(getContentResolver(),
                GSERVICES_DIRECT_TIER_TWO_QUESTIONING_ENABLED, true);
!!!14214284.java!!!	saveLineup(inout tellDeviceToWriteChannels : boolean) : void
        final Device device = getDevice();
        final Lineup lineup = getLineup();

        String lineupId = (lineup == null) ? null : lineup.getLineupId();

        mLog.d("save lineup: deviceId=" + device.getId() + ", lineupId=" + lineupId
                + ", tellDeviceToWriteChannels=" + tellDeviceToWriteChannels);

        try {
            mService.setLineupForDevice(device.getId(), lineup);
        } catch (RemoteException re) {
            mLog.w("Failed to set lineup for device: " + device.getId(), re);
        }

        if (tellDeviceToWriteChannels) {
            Intent intent = MediaDevicesIntents.createWriteLineupIntent(this, device, lineup);
            if (intent == null) {
                mLog.w("There is no ACTION_WRITE_LINEUP for " + device.getPackageName());
                showToast(R.string.unable_to_save_lineup_error, device.getLabel());
                return;
            }
            startService(intent);
        }
!!!14214412.java!!!	scanChannels() : boolean
        setVisible(false);
        return MediaDevicesIntents.launchChannelScanIntent(this, getDevice(), getVideoUri(),
                REQUEST_CODE_CHANNEL_SCAN);
!!!14214540.java!!!	isWifiAccessPointEnabled() : boolean
        WifiManager wifi = (WifiManager) getSystemService(Context.WIFI_SERVICE);
        try {
            // TODO(akersten): Find a supported way to do this.
            Method method = wifi.getClass().getMethod("isWifiApEnabled");
            return (Boolean) method.invoke(wifi);
        } catch (Exception e) {
            mLog.w("Failed to call hidden method isWifiApEnabled", e);
            return false;
        }
!!!14214668.java!!!	isWifiConnected() : boolean
        return isConnected(Context.WIFI_SERVICE);
!!!14214796.java!!!	isConnected(in queryInterfaceName : String) : boolean
        ConnectivityManager manager =
            (ConnectivityManager) getSystemService(CONNECTIVITY_SERVICE);

        if (manager == null) {
            mLog.e("Connectivity Manager is null!");
            return false;
        } else {
            NetworkInfo networkInfo = manager.getActiveNetworkInfo();

            if (networkInfo == null) {
                return false;
            }

            String interfaceName = networkInfo.getTypeName();
            if (queryInterfaceName.equalsIgnoreCase(interfaceName)) {
                if (networkInfo.getState() == State.CONNECTED) {
                    return true;
                }
            }
            return false;
        }
!!!14214924.java!!!	getLineup() : Lineup
        return (Lineup) getProperty(SetupProperties.LINEUP_PROPERTY);
!!!14215052.java!!!	setLineup(inout lineup : Lineup) : void
        setProperty(SetupProperties.LINEUP_PROPERTY, lineup);
!!!14215180.java!!!	getDevice() : Device
        return (Device) getProperty(SetupProperties.DEVICE_PROPERTY);
!!!14215308.java!!!	setDevice(inout device : Device) : void
        setProperty(SetupProperties.DEVICE_PROPERTY, device);
!!!14215436.java!!!	notifyLineupChange() : void
        final Device device = getDevice();
        final Lineup lineup = getLineup();

        mLog.d("notifty lineup change: deviceId=" + device.getId() + ", lineupId="
                + lineup.getLineupId());

        Intent intent = MediaDevicesIntents.createLineupChangedIntent(this, device, lineup);
        if (intent == null) {
            mLog.w("There is no ACTION_LINEUP_CHANGED for " + device.getPackageName());
            return;
        }
        startService(intent);
!!!14215564.java!!!	putStepExtras(inout intent : Intent) : void
        int stepIndex = getIntent().getIntExtra(SetupConstants.EXTRA_STEP_INDEX, -1);
        int totalSteps = getIntent().getIntExtra(SetupConstants.EXTRA_TOTAL_STEPS_COUNT, -1);
        intent.putExtra(SetupConstants.EXTRA_STEP_INDEX, stepIndex);
        intent.putExtra(SetupConstants.EXTRA_TOTAL_STEPS_COUNT, totalSteps);
        mLog.d("adding step extras to intent: stepIndex=" + stepIndex + ", totalSteps="
                + totalSteps);
