class ControllerBase
!!!12279436.java!!!	ControllerBase(inout context : DeviceControllerContext, inout settings : MediaDeviceSettings, in deviceId : String)
        super(context, settings, deviceId);
        mContext = context.getApplicationContext();
        mHandler = context.getHandler();
!!!12279564.java!!!	isChannelProvider() : boolean
        return false;
!!!12279820.java!!!	tuneToChannel(inout channel : ChannelNumber) : void
        if (channel == null) {
            return;
        }
        sendChannelCommand(channel.getMajor(), channel.getMinor());
!!!12279948.java!!!	performAction(inout event : ActionEvent) : void
        // notify refreshing No Signal Timer
        if (Wrapper.getWrapperInstance().getNoSignalTimer() != 0 && mContext != null) {
            Intent intent = new Intent(NoSignalTimerService.ACTION_REFRESH);
            mContext.sendBroadcast(intent);
        }

        // Common key response for all device including Tuner and external inputs
        if (event.getState() == State.DOWN) {
            if (Action.TOP_MENU.equals(event.getAction())
                    || Action.REWIND.equals(event.getAction())
                    || Action.DOWN.equals(event.getAction())) {
                // To enter Main Menu
                WidgetManager.createSingleTopActivity(TvIntents.ACTION_SHOW_MENU, null, mContext);

            } else if (Action.PAUSE.equals(event.getAction())
                    || Action.UP.equals(event.getAction())) {
                WidgetManager.inputSwitch(mContext);

            } else if (Action.FAST_FORWARD.equals(event.getAction())) {
                WidgetManager.showFactoryMenu(mContext);

            } else if (Action.GENERIC.equals(event.getAction())) {
                if (SCAN_CODE_SHORTCUT == event.getExtra()) {
                    WidgetManager.showShortcutMenu(mContext);
                }

            } else if (Action.LEFT.equals(event.getAction())) {
                WidgetManager.showShortcutMenu(mContext);

            }
        }
!!!12280076.java!!!	onRelease() : void
        Log.d(TAG, "*************** onRelease");
        super.onRelease();

        // On Release Set this to Non TV input
        gCurrentSource = TvSource.TV_SourceStream.value();
        isDeviceReleased = true;
        Wrapper.getWrapperInstance().pauseCC();
        WidgetManager.exitFromApp(mContext);
!!!12280204.java!!!	onNewClientState(inout state : ClientState) : void
        Log.d(TAG, "*************** onNewState: State = " + state.toString());
        super.onNewClientState(state);

        gCurrentClientState = state.toString();

        if (!isFullScreen()) {
            Wrapper.getWrapperInstance().pauseCC();
        }

        // dismiss No signal messages when LiveTV is covered or PIP
        WidgetManager.dismissEventAlert(mContext);
!!!12280332.java!!!	isFullScreen() : boolean
        Log.d(TAG, "isFullScreen gCurrentClientState=" + gCurrentClientState);
        if (gCurrentClientState != null) {
            boolean visible = gCurrentClientState.contains(ClientState.Feature.VISIBLE.toString());
            boolean pinned = gCurrentClientState.contains(ClientState.Feature.PINNED.toString());
            return visible && !pinned;
        }
        return true;// default is full screen
!!!12280460.java!!!	goTo(inout tvUri : Uri) : boolean

        try {
            Log.d(TAG, "goTo uri=" + tvUri);
            updateCurrentSourceType(tvUri);

            if (isDeviceReleased == true) {
                WidgetManager.exitFromApp(mContext);
                isDeviceReleased = false;
                Log.d(TAG, "goTo() isDeviceReleased is true, clear all OSD");
            }
        } catch (Exception e) {
            Log.d(TAG, "Exception in goTo : " + e);
        }

        return super.goTo(tvUri);
!!!12280588.java!!!	getCurrentControllerSource() : int
        return gCurrentSource;
!!!12280716.java!!!	updateCurrentSourceType(inout uri : Uri) : void

        final String deviceId = uri.getQueryParameter("deviceId");
        int oldSrc = gCurrentSource;
        TvSource source = (TvSource) PairingDevice.DeviceIdSourceMap.get(deviceId);

        if (source != null) {
            gCurrentSource = source.value();
        } else if (!TextUtils.equals(uri.toString(), "tv://passthrough")
                || gCurrentSource == TvSource.TV_SourceInvalid.value()) {
            int currSrc = TvFramework.getInstance().getLiveTvInstance().getCurrentSource();
            gCurrentSource = Wrapper.getWrapperInstance().pruneSourceId(currSrc);
        }

        // notify source switched
        final FrameworkEventListener mEventListener = FrameworkEventListener
              .getFrameworkEventListenerInstance();
        if (oldSrc != gCurrentSource) {
            mEventListener.onSourceSwitched(gCurrentSource);
        }

        Log.d(TAG, "updateCurrentSourceType uri=" + uri
                + " source=" + gCurrentSource);
