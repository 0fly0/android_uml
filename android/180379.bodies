class DoubleBuffer
!!!668827.java!!!	allocate(in capacity : int) : DoubleBuffer
        if (capacity < 0) {
            throw new IllegalArgumentException("capacity < 0: " + capacity);
        }
        return new DoubleArrayBuffer(new double[capacity]);
!!!668955.java!!!	wrap(inout array : double) : DoubleBuffer
        return wrap(array, 0, array.length);
!!!669083.java!!!	wrap(inout array : double, in start : int, in doubleCount : int) : DoubleBuffer
        Arrays.checkOffsetAndCount(array.length, start, doubleCount);
        DoubleBuffer buf = new DoubleArrayBuffer(array);
        buf.position = start;
        buf.limit = start + doubleCount;
        return buf;
!!!669211.java!!!	DoubleBuffer(in capacity : int)
        super(3, capacity, null);
!!!669339.java!!!	array() : double
        return protectedArray();
!!!669467.java!!!	arrayOffset() : int
        return protectedArrayOffset();
!!!669851.java!!!	compareTo(inout otherBuffer : DoubleBuffer) : int
        int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining()
                : otherBuffer.remaining();
        int thisPos = position;
        int otherPos = otherBuffer.position;
        double thisDouble, otherDouble;
        while (compareRemaining > 0) {
            thisDouble = get(thisPos);
            otherDouble = otherBuffer.get(otherPos);
            // checks for double and NaN inequality
            if ((thisDouble != otherDouble)
                    && ((thisDouble == thisDouble) || (otherDouble == otherDouble))) {
                return thisDouble < otherDouble ? -1 : 1;
            }
            thisPos++;
            otherPos++;
            compareRemaining--;
        }
        return remaining() - otherBuffer.remaining();
!!!670107.java!!!	equals(inout other : Object) : boolean
        if (!(other instanceof DoubleBuffer)) {
            return false;
        }
        DoubleBuffer otherBuffer = (DoubleBuffer) other;

        if (remaining() != otherBuffer.remaining()) {
            return false;
        }

        int myPosition = position;
        int otherPosition = otherBuffer.position;
        boolean equalSoFar = true;
        while (equalSoFar && (myPosition < limit)) {
            double a = get(myPosition++);
            double b = otherBuffer.get(otherPosition++);
            equalSoFar = a == b || (a != a && b != b);
        }

        return equalSoFar;
!!!670363.java!!!	get(inout dst : double) : DoubleBuffer
        return get(dst, 0, dst.length);
!!!670491.java!!!	get(inout dst : double, in dstOffset : int, in doubleCount : int) : DoubleBuffer
        Arrays.checkOffsetAndCount(dst.length, dstOffset, doubleCount);
        if (doubleCount > remaining()) {
            throw new BufferUnderflowException();
        }
        for (int i = dstOffset; i < dstOffset + doubleCount; ++i) {
            dst[i] = get();
        }
        return this;
!!!670747.java!!!	hasArray() : boolean
        return protectedHasArray();
!!!670875.java!!!	hashCode() : int
        int myPosition = position;
        int hash = 0;
        long l;
        while (myPosition < limit) {
            l = Double.doubleToLongBits(get(myPosition++));
            hash = hash + ((int) l) ^ ((int) (l >> 32));
        }
        return hash;
!!!671771.java!!!	put(inout src : double) : DoubleBuffer
        return put(src, 0, src.length);
!!!671899.java!!!	put(inout src : double, in srcOffset : int, in doubleCount : int) : DoubleBuffer
        Arrays.checkOffsetAndCount(src.length, srcOffset, doubleCount);
        if (doubleCount > remaining()) {
            throw new BufferOverflowException();
        }
        for (int i = srcOffset; i < srcOffset + doubleCount; ++i) {
            put(src[i]);
        }
        return this;
!!!672027.java!!!	put(inout src : DoubleBuffer) : DoubleBuffer
        if (isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        if (src == this) {
            throw new IllegalArgumentException("src == this");
        }
        if (src.remaining() > remaining()) {
            throw new BufferOverflowException();
        }
        double[] doubles = new double[src.remaining()];
        src.get(doubles);
        put(doubles);
        return this;
