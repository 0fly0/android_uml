class PlatformEventListener
!!!12459404.java!!!	PlatformEventListener()

!!!12459532.java!!!	getPlatformEventListenerInstance() : PlatformEventListener

        if (mPlatformEventListener == null) {
            mPlatformEventListener = new PlatformEventListener();
            mPlatformEventListener.mHandler = USDTVMessageQueue.getMsgQueueHandler();
            mPlatformEventListener.mAVSettingsObserver = new AVSettingsObserver();
        }
        return mPlatformEventListener;
!!!12459660.java!!!	registerListener(inout binder : IBinder, in appName : String) : void
        if (binder != null) {
            mService = IUSDTVService.Stub.asInterface(binder);
        }
        if (mService != null) {
            String defaultAppName = "USDTVClientApp" + String.valueOf(Process.myPid());
            if (TextUtils.isEmpty(appName)) {
                if (TextUtils.equals(clientName, DEFAULT_CLIENT_NAME))
                    appName = defaultAppName;
                else
                    appName = clientName;
            }
            clientName = appName;

            mService.usdtvUnRegisterAppListener(defaultAppName);
            if (!TextUtils.equals(clientName, defaultAppName)) {
                mService.usdtvUnRegisterAppListener(clientName);
            }

            Log.d(TAG, "registerApplListener client name:" + clientName);
            mService.usdtvRegisterAppListener(clientName, this);
        }

        if (mAVSettingsObserver != null) {
            mAVObserverHandle = mAVSettingsObserver.registerHandlerObserver(
                    mObserverPrefix, this);
        }
!!!12459788.java!!!	unregisterListener(inout binder : IBinder) : void
        if (binder != null) {
            mService = IUSDTVService.Stub.asInterface(binder);
        }
        if (mService != null) {
            Log.d(TAG, "unregisterApplListener client name:" + clientName);
            mService.usdtvUnRegisterAppListener(clientName);
        }

        if (mAVSettingsObserver != null) {
            mAVSettingsObserver.unRegisterHandlerObserver(mAVObserverHandle);
        }
!!!12459916.java!!!	handleEvent(in event : int) : void
        Log.d(TAG, "USDTV Service handleEvent event=" + event + " msgCount=" + msgCount);
        mHandler.post(new Runnable() {
            @Override
            public void run() {

                int eventVal = event;

                if (event >= Events.MAX_RF_EVENT.ordinal()) {
                    Log.e(TAG, "event id overflow: new event is " + event +
                            ", max acceptable event is " + (Events.MAX_RF_EVENT.ordinal() - 1));
                    return;
                }
                Events platformEvent = Events.values()[eventVal];
                if (mFrameworkEventListener != null)
                    mFrameworkEventListener.onUSDTVEvent(platformEvent);
            }
        });
        msgCount++;

!!!12460044.java!!!	onEvent(inout observer_ref : AVSettingsObserver, in arg : int, in obj : Parcel) : void
        Log.d(TAG, "onAVEvent event=" + arg);
        Parcelable detailInfo = null;
        if (obj != null) {
            Log.d(TAG, "parcel size=" + obj.dataSize());
            if (arg == TvAvsettingEvent.TV_AVIN_CONNECT_STATUS.value()) {
                AvInConnectStatus connectStatus = new AvInConnectStatus(obj);
                if (connectStatus != null) {
                    Log.d(TAG, "onAVEvent TV_AVIN_CONNECT_STATUS source="
                                    + connectStatus.getSourceId() + " connect="
                                    + connectStatus.getConnectStatus());
                }
                detailInfo = connectStatus;
            } else if (arg == TvAvsettingEvent.TV_AVIN_LOCK_STATUS.value()) {
                AvInLockStatus lockStatus = new AvInLockStatus(obj);
                if (lockStatus != null) {
                    Log.d(TAG, "onAVEvent TV_AVIN_LOCK_STATUS source="
                                    + lockStatus.getSourceId() + " lock="
                                    + lockStatus.getLockStatus());
                }
                detailInfo = lockStatus;
            } else if (arg == TvAvsettingEvent.TV_VIDEO_INFO_UPDATE.value()) {
                VideoInfoUpdate videoInfo = new VideoInfoUpdate(obj);
                if (videoInfo != null) {
                    Log.d(TAG, "onAVEvent TV_VIDEO_INFO_UPDATE source="
                                    + videoInfo.getSourceId() + " width="
                                    + videoInfo.getActiveWidth() + " height="
                                    + videoInfo.getActiveHeight() + " interlaced="
                                    + videoInfo.getIsInterlaced() + " framerate="
                                    + videoInfo.getFrameRate() + " aspectw="
                                    + videoInfo.getAspectWidth() + " aspecth="
                                    + videoInfo.getAspectHeight() + " 3Dformat="
                                    + videoInfo.get3DFormat());
                }
                detailInfo = videoInfo;
            } else if (arg == TvAvsettingEvent.TV_AUDIO_INFO_UPDATE.value()) {
                AudioInfoUpdate audioInfo = new AudioInfoUpdate(obj);
                if (audioInfo != null) {
                    Log.d(TAG, "onAVEvent TV_AUDIO_INFO_UPDATE source="
                                    + audioInfo.getSourceId() + " decoderformat="
                                    + audioInfo.getDecoderFormat() + " streamformat="
                                    + audioInfo.getStreamFormat() + " samplerate="
                                    + audioInfo.getSampleRate() + " channel="
                                    + audioInfo.getChannels() + " prichannelmode="
                                    + audioInfo.getPriChannelMode() + " lfemode="
                                    + audioInfo.getLfeMode() + " bitdepth="
                                    + audioInfo.getBitDepth());
                }
                detailInfo = audioInfo;
            } else if (arg == TvAvsettingEvent.TV_HEADPHONE_PLUGIN.value()) {
                HeadphonePluginStatus headphoneStatus = new HeadphonePluginStatus(obj);
                if (headphoneStatus != null) {
                    Log.d(TAG, "onAVEvent TV_HEADPHONE_PLUGIN headphonePlugin="
                            + headphoneStatus.getPluginStatus());
                }
                detailInfo = headphoneStatus;
            } else if (arg == TvAvsettingEvent.TV_AVIN_INPUT_LOCK.value()) {
                AvInInputLock inputLock = new AvInInputLock(obj);
                if (inputLock != null) {
                    Log.d(TAG, "onAVEvent TV_AVIN_INPUT_LOCK source="
                                    + inputLock.getSourceId() + " lock="
                                    + inputLock.getLockStatus());
                }
                detailInfo = inputLock;
            } else if (arg == SourceControl.SOURCE_EXT_BIND_CHANNEL) {
                SourceBindChannel srcBindChannel = new SourceBindChannel(obj);
                if (srcBindChannel != null) {
                    Log.d(TAG, "onAVEvent SOURCE_EXT_BIND_CHANNEL source="
                            + srcBindChannel.getSourceId() + " channel="
                            + srcBindChannel.getVideoChannel());
                }
                detailInfo = srcBindChannel;
            }
        }

        if (detailInfo == null)
            return;

        final Parcelable detailInfo2 = detailInfo;
        Runnable runnable = mRunnableArray.get(arg);
        if (runnable != null) {
            mHandler.removeCallbacks(runnable);
        }
        runnable = new Runnable() {
            @Override
            public void run() {
                if (mFrameworkEventListener != null) {
                    mFrameworkEventListener.onAVSettingsEvent(arg, detailInfo2);
                }
            }
        };
        mRunnableArray.put(arg, runnable);

        // add a delay to avoid handling repeated events sent from platform
        mHandler.postDelayed(runnable, 300);
!!!12460172.java!!!	setListener(inout listener : IFrameworkEventListener) : void
        mFrameworkEventListener = listener;
