class DefaultItemProvider
!!!13462796.java!!!	DefaultItemProvider(inout context : Context)
        mContext = context;
!!!13462924.java!!!	loadDefaultQuickLists(in db : SQLiteDatabase) : void
        loadDefaultQuicklists(new Callback() {
            int currentQuickListId = -1;
            int index = -1;

            @Override
            public void onQuickListIdFound(int quicklistId) {
                currentQuickListId = quicklistId;
                index = -1;
            }

            @Override
            public void onShortcutInfoFound(ShortcutInfo shortcutInfo) {
                ContentValues values = new ContentValues();
                shortcutInfo.setContentValues(values);
                long id = db.insert(LauncherProvider.TABLE_SHORTCUTS,
                        ShortcutColumns.TITLE, values);
                writeQuickListItem(db, currentQuickListId, ++index,
                        ItemLinkColumns.TYPE_SHORTCUT, ShortcutInfo.createLauncherId(id), null);
            }

            @Override
            public void onAppInfoFound(ComponentName componentName,
                    ComponentName fallbackComponentName) {
                String fallbackLauncherId;
                if (fallbackComponentName == null) {
                    fallbackLauncherId = null;
                } else {
                    fallbackLauncherId = ApplicationInfo.getLauncherId(fallbackComponentName);
                }
                writeQuickListItem(db, currentQuickListId, ++index,
                        ItemLinkColumns.TYPE_APPLICATION, ApplicationInfo.getLauncherId(
                                componentName), fallbackLauncherId);
            }

            @Override
            public void onError(Throwable e) {}
        });
!!!13463052.java!!!	loadDefaultShortcuts(in db : SQLiteDatabase) : void
        loadDefaultShortcuts(new Callback() {

            @Override
            public void onShortcutInfoFound(ShortcutInfo shortcutInfo) {
                ContentValues values = new ContentValues();
                shortcutInfo.setContentValues(values);
                db.insert(LauncherProvider.TABLE_SHORTCUTS, ShortcutColumns.TITLE, values);
            }

            @Override
            public void onAppInfoFound(ComponentName componentName,
                    ComponentName fallbackComponentName) {}

            @Override
            public void onQuickListIdFound(int quicklistId) {}

            @Override
            public void onError(Throwable e) {}
        });
!!!13463180.java!!!	getAllDefaultShortcuts(inout includeQuicklists : boolean) : ShortcutInfo
        final ArrayList<ShortcutInfo> returnList = new ArrayList<ShortcutInfo>();
        Callback callback = new Callback() {

            @Override
            public void onShortcutInfoFound(ShortcutInfo shortcutInfo) {
                returnList.add(shortcutInfo);
            }

            @Override
            public void onAppInfoFound(ComponentName componentName,
                    ComponentName fallbackComponentName) {}

            @Override
            public void onError(Throwable e) {}

            @Override
            public void onQuickListIdFound(int quicklistId) {}
        };
        if (includeQuicklists) {
            loadDefaultQuicklists(callback);
        }
        loadDefaultShortcuts(callback);
        return returnList;
!!!13463308.java!!!	loadDefaultQuicklists(inout callback : Callback) : void
        try {
            XmlResourceParser parser = mContext.getResources().getXml(R.xml.default_quicklists);
            AttributeSet attrs = Xml.asAttributeSet(parser);
            int type;
            while ((type = parser.next()) != XmlPullParser.END_DOCUMENT) {
                if (type == XmlPullParser.START_TAG) {
                    String tagName = parser.getName();
                    if (TAG_QUICKLIST.equals(tagName)) {
                        TypedArray a = mContext.obtainStyledAttributes(attrs,
                                R.styleable.QuickList);
                        callback.onQuickListIdFound(a.getInteger(R.styleable.QuickList_quickListId,
                                -1));
                        a.recycle();
                    } else if (TAG_URL.equals(tagName)) {
                        ShortcutInfo info = readUrl(attrs);
                        if (info != null) {
                            callback.onShortcutInfoFound(info);
                        }
                    } else if (TAG_APPLICATION.equals(tagName)) {
                        ComponentName componentName = readApplication(attrs);
                        ComponentName fallbackComponentName = readFallbackApplication(attrs);
                        callback.onAppInfoFound(componentName, fallbackComponentName);
                    }
                }
            }
        } catch (XmlPullParserException e) {
            Log.d(LOG_TAG, "Could not read default quicklists.", e);
            callback.onError(e);
        } catch (IOException e) {
            Log.d(LOG_TAG, "Could not read default quicklists.", e);
            callback.onError(e);
        }
!!!13463436.java!!!	loadDefaultShortcuts(inout callback : Callback) : void
        try {
            XmlResourceParser parser = mContext.getResources().getXml(R.xml.default_shortcuts);
            AttributeSet attrs = Xml.asAttributeSet(parser);
            int type;
            while ((type = parser.next()) != XmlPullParser.END_DOCUMENT) {
                if (type == XmlPullParser.START_TAG) {
                    String tagName = parser.getName();
                    if (TAG_URL.equals(tagName)) {
                        ShortcutInfo info = readUrl(attrs);
                        if (info != null) {
                            callback.onShortcutInfoFound(info);
                        }
                    }
                }
            }
        } catch (XmlPullParserException e) {
            Log.d(LOG_TAG, "Could not read default shortcuts.", e);
        } catch (IOException e) {
            Log.d(LOG_TAG, "Could not read default shortcuts.", e);
        }
!!!13463564.java!!!	readUrl(inout attrs : AttributeSet) : ShortcutInfo
        TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.Shortcut);
        Intent intent = new Intent(Intent.ACTION_CREATE_SHORTCUT);
        intent.putExtra(Intent.EXTRA_SHORTCUT_NAME, a.getString(R.styleable.Shortcut_title));
        int resourceId = a.getResourceId(R.styleable.Shortcut_icon, -1);
        if (resourceId != -1) {
            intent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,
                    ShortcutIconResource.fromContext(mContext, resourceId));
        }
        try {
            intent.putExtra(Intent.EXTRA_SHORTCUT_INTENT, Intent.parseUri(
                    a.getString(R.styleable.Shortcut_uri), 0));
        } catch (URISyntaxException e) {
            Log.d(LOG_TAG, "Improper URI.", e);
        }
        a.recycle();
        return ShortcutInfo.fromIntent(intent);
!!!13463692.java!!!	readApplication(inout attrs : AttributeSet) : ComponentName
        TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.Shortcut);
        ComponentName name = ComponentName.unflattenFromString(
                a.getString(R.styleable.Shortcut_component));
        a.recycle();
        return name;
!!!13463820.java!!!	readFallbackApplication(inout attrs : AttributeSet) : ComponentName
        TypedArray a = mContext.obtainStyledAttributes(attrs, R.styleable.Shortcut);
        if (!a.hasValue(R.styleable.Shortcut_fallbackComponent)) {
            a.recycle();
            return null;
        }
        ComponentName name = ComponentName.unflattenFromString(
                a.getString(R.styleable.Shortcut_fallbackComponent));
        a.recycle();
        return name;
!!!13463948.java!!!	writeQuickListItem(inout db : SQLiteDatabase, in quickListId : int, in index : int, in itemType : int, in itemId : String, in fallbackItemId : String) : void
        ContentValues values = new ContentValues();
        values.put(QuickListContentsColumns.QUICKLIST_ID, quickListId);
        values.put(QuickListContentsColumns.QUICKLIST_INDEX, index);
        values.put(QuickListContentsColumns.ITEM_TYPE, itemType);
        values.put(QuickListContentsColumns.ITEM_ID, itemId);
        if (fallbackItemId != null) {
            values.put(QuickListContentsColumns.FALLBACK_ITEM_ID, fallbackItemId);
        }
        db.insert(LauncherProvider.TABLE_QUICKLIST_CONTENTS, QuickListContentsColumns.QUICKLIST_ID,
                values);
