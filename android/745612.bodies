class CursorWindow
!!!3277196.java!!!	CursorWindow(in name : String)
        mStartPos = 0;
        mName = name != null && name.length() != 0 ? name : "<unnamed>";
        mWindowPtr = nativeCreate(mName, sCursorWindowSize);
        if (mWindowPtr == 0) {
            throw new CursorWindowAllocationException("Cursor window allocation of " +
                    (sCursorWindowSize / 1024) + " kb failed. " + printStats());
        }
        mCloseGuard.open("close");
        recordNewWindow(Binder.getCallingPid(), mWindowPtr);
!!!3277324.java!!!	CursorWindow(inout localWindow : boolean)
        this((String)null);
!!!3277452.java!!!	CursorWindow(inout source : Parcel)
        mStartPos = source.readInt();
        mWindowPtr = nativeCreateFromParcel(source);
        if (mWindowPtr == 0) {
            throw new CursorWindowAllocationException("Cursor window could not be "
                    + "created from binder.");
        }
        mName = nativeGetName(mWindowPtr);
        mCloseGuard.open("close");
!!!3277580.java!!!	finalize() : void
        try {
            if (mCloseGuard != null) {
                mCloseGuard.warnIfOpen();
            }
            dispose();
        } finally {
            super.finalize();
        }
!!!3277708.java!!!	dispose() : void
        if (mCloseGuard != null) {
            mCloseGuard.close();
        }
        if (mWindowPtr != 0) {
            recordClosingOfWindow(mWindowPtr);
            nativeDispose(mWindowPtr);
            mWindowPtr = 0;
        }
!!!3277836.java!!!	getName() : String
        return mName;
!!!3277964.java!!!	clear() : void
        acquireReference();
        try {
            mStartPos = 0;
            nativeClear(mWindowPtr);
        } finally {
            releaseReference();
        }
!!!3278092.java!!!	getStartPosition() : int
        return mStartPos;
!!!3278220.java!!!	setStartPosition(in pos : int) : void
        mStartPos = pos;
!!!3278348.java!!!	getNumRows() : int
        acquireReference();
        try {
            return nativeGetNumRows(mWindowPtr);
        } finally {
            releaseReference();
        }
!!!3278476.java!!!	setNumColumns(in columnNum : int) : boolean
        acquireReference();
        try {
            return nativeSetNumColumns(mWindowPtr, columnNum);
        } finally {
            releaseReference();
        }
!!!3278604.java!!!	allocRow() : boolean
        acquireReference();
        try {
            return nativeAllocRow(mWindowPtr);
        } finally {
            releaseReference();
        }
!!!3278732.java!!!	freeLastRow() : void
        acquireReference();
        try {
            nativeFreeLastRow(mWindowPtr);
        } finally {
            releaseReference();
        }
!!!3278860.java!!!	isNull(in row : int, in column : int) : boolean
        return getType(row, column) == Cursor.FIELD_TYPE_NULL;
!!!3278988.java!!!	isBlob(in row : int, in column : int) : boolean
        int type = getType(row, column);
        return type == Cursor.FIELD_TYPE_BLOB || type == Cursor.FIELD_TYPE_NULL;
!!!3279116.java!!!	isLong(in row : int, in column : int) : boolean
        return getType(row, column) == Cursor.FIELD_TYPE_INTEGER;
!!!3279244.java!!!	isFloat(in row : int, in column : int) : boolean
        return getType(row, column) == Cursor.FIELD_TYPE_FLOAT;
!!!3279372.java!!!	isString(in row : int, in column : int) : boolean
        int type = getType(row, column);
        return type == Cursor.FIELD_TYPE_STRING || type == Cursor.FIELD_TYPE_NULL;
!!!3279500.java!!!	getType(in row : int, in column : int) : int
        acquireReference();
        try {
            return nativeGetType(mWindowPtr, row - mStartPos, column);
        } finally {
            releaseReference();
        }
!!!3279628.java!!!	getBlob(in row : int, in column : int) : byte
        acquireReference();
        try {
            return nativeGetBlob(mWindowPtr, row - mStartPos, column);
        } finally {
            releaseReference();
        }
!!!3279756.java!!!	getString(in row : int, in column : int) : String
        acquireReference();
        try {
            return nativeGetString(mWindowPtr, row - mStartPos, column);
        } finally {
            releaseReference();
        }
!!!3279884.java!!!	copyStringToBuffer(in row : int, in column : int, inout buffer : CharArrayBuffer) : void
        if (buffer == null) {
            throw new IllegalArgumentException("CharArrayBuffer should not be null");
        }
        acquireReference();
        try {
            nativeCopyStringToBuffer(mWindowPtr, row - mStartPos, column, buffer);
        } finally {
            releaseReference();
        }
!!!3280012.java!!!	getLong(in row : int, in column : int) : long
        acquireReference();
        try {
            return nativeGetLong(mWindowPtr, row - mStartPos, column);
        } finally {
            releaseReference();
        }
!!!3280140.java!!!	getDouble(in row : int, in column : int) : double
        acquireReference();
        try {
            return nativeGetDouble(mWindowPtr, row - mStartPos, column);
        } finally {
            releaseReference();
        }
!!!3280268.java!!!	getShort(in row : int, in column : int) : short
        return (short) getLong(row, column);
!!!3280396.java!!!	getInt(in row : int, in column : int) : int
        return (int) getLong(row, column);
!!!3280524.java!!!	getFloat(in row : int, in column : int) : float
        return (float) getDouble(row, column);
!!!3280652.java!!!	putBlob(inout value : byte, in row : int, in column : int) : boolean
        acquireReference();
        try {
            return nativePutBlob(mWindowPtr, value, row - mStartPos, column);
        } finally {
            releaseReference();
        }
!!!3280780.java!!!	putString(in value : String, in row : int, in column : int) : boolean
        acquireReference();
        try {
            return nativePutString(mWindowPtr, value, row - mStartPos, column);
        } finally {
            releaseReference();
        }
!!!3280908.java!!!	putLong(in value : long, in row : int, in column : int) : boolean
        acquireReference();
        try {
            return nativePutLong(mWindowPtr, value, row - mStartPos, column);
        } finally {
            releaseReference();
        }
!!!3281036.java!!!	putDouble(in value : double, in row : int, in column : int) : boolean
        acquireReference();
        try {
            return nativePutDouble(mWindowPtr, value, row - mStartPos, column);
        } finally {
            releaseReference();
        }
!!!3281164.java!!!	putNull(in row : int, in column : int) : boolean
        acquireReference();
        try {
            return nativePutNull(mWindowPtr, row - mStartPos, column);
        } finally {
            releaseReference();
        }
!!!3281292.java!!!	newFromParcel(inout p : Parcel) : CursorWindow
        return CREATOR.createFromParcel(p);
!!!3281420.java!!!	describeContents() : int
        return 0;
!!!3281548.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        acquireReference();
        try {
            dest.writeInt(mStartPos);
            nativeWriteToParcel(mWindowPtr, dest);
        } finally {
            releaseReference();
        }

        if ((flags & Parcelable.PARCELABLE_WRITE_RETURN_VALUE) != 0) {
            releaseReference();
        }
!!!3281676.java!!!	onAllReferencesReleased() : void
        dispose();
!!!3281804.java!!!	recordNewWindow(in pid : int, in window : int) : void
        synchronized (sWindowToPidMap) {
            sWindowToPidMap.put(window, pid);
            if (Log.isLoggable(STATS_TAG, Log.VERBOSE)) {
                Log.i(STATS_TAG, "Created a new Cursor. " + printStats());
            }
        }
!!!3281932.java!!!	recordClosingOfWindow(in window : int) : void
        synchronized (sWindowToPidMap) {
            if (sWindowToPidMap.size() == 0) {
                // this means we are not in the ContentProvider.
                return;
            }
            sWindowToPidMap.delete(window);
        }
!!!3282060.java!!!	printStats() : String
        StringBuilder buff = new StringBuilder();
        int myPid = Process.myPid();
        int total = 0;
        SparseIntArray pidCounts = new SparseIntArray();
        synchronized (sWindowToPidMap) {
            int size = sWindowToPidMap.size();
            if (size == 0) {
                // this means we are not in the ContentProvider.
                return "";
            }
            for (int indx = 0; indx < size; indx++) {
                int pid = sWindowToPidMap.valueAt(indx);
                int value = pidCounts.get(pid);
                pidCounts.put(pid, ++value);
            }
        }
        int numPids = pidCounts.size();
        for (int i = 0; i < numPids;i++) {
            buff.append(" (# cursors opened by ");
            int pid = pidCounts.keyAt(i);
            if (pid == myPid) {
                buff.append("this proc=");
            } else {
                buff.append("pid " + pid + "=");
            }
            int num = pidCounts.get(pid);
            buff.append(num + ")");
            total += num;
        }
        // limit the returned string size to 1000
        String s = (buff.length() > 980) ? buff.substring(0, 980) : buff.toString();
        return "# Open Cursors=" + total + s;
!!!3282188.java!!!	toString() : String
        return getName() + " {" + Integer.toHexString(mWindowPtr) + "}";
