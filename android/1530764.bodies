class BridgeContext
!!!9495052.java!!!	BridgeContext(inout projectKey : Object, inout metrics : DisplayMetrics, inout renderResources : RenderResources, inout projectCallback : IProjectCallback, inout config : Configuration, in targetSdkVersion : int)
        mProjectKey = projectKey;
        mMetrics = metrics;
        mProjectCallback = projectCallback;

        mRenderResources = renderResources;
        mConfig = config;

        mApplicationInfo = new ApplicationInfo();
        mApplicationInfo.targetSdkVersion = targetSdkVersion;

        mWindowManager = new WindowManagerImpl(mMetrics);
!!!9495180.java!!!	initResources() : void
        AssetManager assetManager = AssetManager.getSystem();

        mSystemResources = BridgeResources.initSystem(
                this,
                assetManager,
                mMetrics,
                mConfig,
                mProjectCallback);
        mTheme = mSystemResources.newTheme();
!!!9495308.java!!!	disposeResources() : void
        BridgeResources.disposeSystem();
!!!9495436.java!!!	setBridgeInflater(inout inflater : BridgeInflater) : void
        mBridgeInflater = inflater;
!!!9495564.java!!!	addViewKey(inout view : View, inout viewKey : Object) : void
        mViewKeyMap.put(view, viewKey);
!!!9495692.java!!!	getViewKey(inout view : View) : Object
        return mViewKeyMap.get(view);
!!!9495820.java!!!	getProjectKey() : Object
        return mProjectKey;
!!!9495948.java!!!	getMetrics() : DisplayMetrics
        return mMetrics;
!!!9496076.java!!!	getProjectCallback() : IProjectCallback
        return mProjectCallback;
!!!9496204.java!!!	getRenderResources() : RenderResources
        return mRenderResources;
!!!9496332.java!!!	getDefaultPropMap(inout key : Object) : Map<String, String>
        return mDefaultPropMaps.get(key);
!!!9496460.java!!!	getConfiguration() : Configuration
        return mConfig;
!!!9496588.java!!!	pushParser(inout parser : BridgeXmlBlockParser) : void
        if (ParserFactory.LOG_PARSER) {
            System.out.println("PUSH " + parser.getParser().toString());
        }
        mParserStack.push(parser);
!!!9496716.java!!!	popParser() : void
        BridgeXmlBlockParser parser = mParserStack.pop();
        if (ParserFactory.LOG_PARSER) {
            System.out.println("POPD " + parser.getParser().toString());
        }
!!!9496844.java!!!	getCurrentParser() : BridgeXmlBlockParser
        return mParserStack.peek();
!!!9496972.java!!!	getPreviousParser() : BridgeXmlBlockParser
        if (mParserStack.size() < 2) {
            return null;
        }
        return mParserStack.get(mParserStack.size() - 2);
!!!9497100.java!!!	resolveThemeAttribute(in resid : int, inout outValue : TypedValue, inout resolveRefs : boolean) : boolean
        Pair<ResourceType, String> resourceInfo = Bridge.resolveResourceId(resid);
        boolean isFrameworkRes = true;
        if (resourceInfo == null) {
            resourceInfo = mProjectCallback.resolveResourceId(resid);
            isFrameworkRes = false;
        }

        if (resourceInfo == null) {
            return false;
        }

        ResourceValue value = mRenderResources.findItemInTheme(resourceInfo.getSecond(),
                isFrameworkRes);
        if (resolveRefs) {
            value = mRenderResources.resolveResValue(value);
        }

        // check if this is a style resource
        if (value instanceof StyleResourceValue) {
            // get the id that will represent this style.
            outValue.resourceId = getDynamicIdByStyle((StyleResourceValue)value);
            return true;
        }


        int a;
        // if this is a framework value.
        if (value.isFramework()) {
            // look for idName in the android R classes.
            // use 0 a default res value as it's not a valid id value.
            a = getFrameworkResourceValue(value.getResourceType(), value.getName(), 0 /*defValue*/);
        } else {
            // look for idName in the project R class.
            // use 0 a default res value as it's not a valid id value.
            a = getProjectResourceValue(value.getResourceType(), value.getName(), 0 /*defValue*/);
        }

        if (a != 0) {
            outValue.resourceId = a;
            return true;
        }

        return false;
!!!9497228.java!!!	resolveId(in id : int) : ResourceReference
        // first get the String related to this id in the framework
        Pair<ResourceType, String> resourceInfo = Bridge.resolveResourceId(id);

        if (resourceInfo != null) {
            return new ResourceReference(resourceInfo.getSecond(), true);
        }

        // didn't find a match in the framework? look in the project.
        if (mProjectCallback != null) {
            resourceInfo = mProjectCallback.resolveResourceId(id);

            if (resourceInfo != null) {
                return new ResourceReference(resourceInfo.getSecond(), false);
            }
        }

        return null;
!!!9497356.java!!!	inflateView(inout resource : ResourceReference, inout parent : ViewGroup, inout attachToRoot : boolean, inout skipCallbackParser : boolean) : View
        boolean isPlatformLayout = resource.isFramework();

        if (isPlatformLayout == false && skipCallbackParser == false) {
            // check if the project callback can provide us with a custom parser.
            ILayoutPullParser parser = getParser(resource);

            if (parser != null) {
                BridgeXmlBlockParser blockParser = new BridgeXmlBlockParser(parser,
                        this, resource.isFramework());
                try {
                    pushParser(blockParser);
                    return Pair.of(
                            mBridgeInflater.inflate(blockParser, parent, attachToRoot),
                            true);
                } finally {
                    popParser();
                }
            }
        }

        ResourceValue resValue;
        if (resource instanceof ResourceValue) {
            resValue = (ResourceValue) resource;
        } else {
            if (isPlatformLayout) {
                resValue = mRenderResources.getFrameworkResource(ResourceType.LAYOUT,
                        resource.getName());
            } else {
                resValue = mRenderResources.getProjectResource(ResourceType.LAYOUT,
                        resource.getName());
            }
        }

        if (resValue != null) {

            File xml = new File(resValue.getValue());
            if (xml.isFile()) {
                // we need to create a pull parser around the layout XML file, and then
                // give that to our XmlBlockParser
                try {
                    XmlPullParser parser = ParserFactory.create(xml);

                    // set the resource ref to have correct view cookies
                    mBridgeInflater.setResourceReference(resource);

                    BridgeXmlBlockParser blockParser = new BridgeXmlBlockParser(parser,
                            this, resource.isFramework());
                    try {
                        pushParser(blockParser);
                        return Pair.of(
                                mBridgeInflater.inflate(blockParser, parent, attachToRoot),
                                false);
                    } finally {
                        popParser();
                    }
                } catch (XmlPullParserException e) {
                    Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                            "Failed to configure parser for " + xml, e, null /*data*/);
                    // we'll return null below.
                } catch (FileNotFoundException e) {
                    // this shouldn't happen since we check above.
                } finally {
                    mBridgeInflater.setResourceReference(null);
                }
            } else {
                Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                        String.format("File %s is missing!", xml), null);
            }
        } else {
            Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                    String.format("Layout %s%s does not exist.", isPlatformLayout ? "android:" : "",
                            resource.getName()), null);
        }

        return Pair.of(null, false);
!!!9497484.java!!!	getParser(inout resource : ResourceReference) : ILayoutPullParser
        ILayoutPullParser parser;
        if (resource instanceof ResourceValue) {
            parser = mProjectCallback.getParser((ResourceValue) resource);
        } else {
            parser = mProjectCallback.getParser(resource.getName());
        }
        return parser;
!!!9497612.java!!!	getResources() : Resources
        return mSystemResources;
!!!9497740.java!!!	getTheme() : Theme
        return mTheme;
!!!9497868.java!!!	getClassLoader() : ClassLoader
        return this.getClass().getClassLoader();
!!!9497996.java!!!	getSystemService(in service : String) : Object
        if (LAYOUT_INFLATER_SERVICE.equals(service)) {
            return mBridgeInflater;
        }

        if (TEXT_SERVICES_MANAGER_SERVICE.equals(service)) {
            // we need to return a valid service to avoid NPE
            return TextServicesManager.getInstance();
        }

        if (WINDOW_SERVICE.equals(service)) {
            return mWindowManager;
        }

        // needed by SearchView
        if (INPUT_METHOD_SERVICE.equals(service)) {
            return null;
        }

        if (POWER_SERVICE.equals(service)) {
            return new PowerManager(this, new BridgePowerManager(), new Handler());
        }

        throw new UnsupportedOperationException("Unsupported Service: " + service);
!!!9498124.java!!!	obtainStyledAttributes(inout attrs : int) : TypedArray
        return createStyleBasedTypedArray(mRenderResources.getCurrentTheme(), attrs);
!!!9498252.java!!!	obtainStyledAttributes(in resid : int, inout attrs : int) : TypedArray
        // get the StyleResourceValue based on the resId;
        StyleResourceValue style = getStyleByDynamicId(resid);

        if (style == null) {
            throw new Resources.NotFoundException();
        }

        if (mTypedArrayCache == null) {
            mTypedArrayCache = new HashMap<int[], Map<Integer,TypedArray>>();

            Map<Integer, TypedArray> map = new HashMap<Integer, TypedArray>();
            mTypedArrayCache.put(attrs, map);

            BridgeTypedArray ta = createStyleBasedTypedArray(style, attrs);
            map.put(resid, ta);

            return ta;
        }

        // get the 2nd map
        Map<Integer, TypedArray> map = mTypedArrayCache.get(attrs);
        if (map == null) {
            map = new HashMap<Integer, TypedArray>();
            mTypedArrayCache.put(attrs, map);
        }

        // get the array from the 2nd map
        TypedArray ta = map.get(resid);

        if (ta == null) {
            ta = createStyleBasedTypedArray(style, attrs);
            map.put(resid, ta);
        }

        return ta;
!!!9498380.java!!!	obtainStyledAttributes(inout set : AttributeSet, inout attrs : int) : TypedArray
        return obtainStyledAttributes(set, attrs, 0, 0);
!!!9498508.java!!!	obtainStyledAttributes(inout set : AttributeSet, inout attrs : int, in defStyleAttr : int, in defStyleRes : int) : TypedArray

        Map<String, String> defaultPropMap = null;
        boolean isPlatformFile = true;

        // Hint: for XmlPullParser, attach source //DEVICE_SRC/dalvik/libcore/xml/src/java
        if (set instanceof BridgeXmlBlockParser) {
            BridgeXmlBlockParser parser = null;
            parser = (BridgeXmlBlockParser)set;

            isPlatformFile = parser.isPlatformFile();

            Object key = parser.getViewCookie();
            if (key != null) {
                defaultPropMap = mDefaultPropMaps.get(key);
                if (defaultPropMap == null) {
                    defaultPropMap = new HashMap<String, String>();
                    mDefaultPropMaps.put(key, defaultPropMap);
                }
            }

        } else if (set instanceof BridgeLayoutParamsMapAttributes) {
            // this is only for temp layout params generated dynamically, so this is never
            // platform content.
            isPlatformFile = false;
        } else if (set != null) { // null parser is ok
            // really this should not be happening since its instantiated in Bridge
            Bridge.getLog().error(LayoutLog.TAG_BROKEN,
                    "Parser is not a BridgeXmlBlockParser!", null /*data*/);
            return null;
        }

        List<Pair<String, Boolean>> attributeList = searchAttrs(attrs);

        BridgeTypedArray ta = ((BridgeResources) mSystemResources).newTypeArray(attrs.length,
                isPlatformFile);

        // look for a custom style.
        String customStyle = null;
        if (set != null) {
            customStyle = set.getAttributeValue(null /* namespace*/, "style");
        }

        StyleResourceValue customStyleValues = null;
        if (customStyle != null) {
            ResourceValue item = mRenderResources.findResValue(customStyle,
                    false /*forceFrameworkOnly*/);

            // resolve it in case it links to something else
            item = mRenderResources.resolveResValue(item);

            if (item instanceof StyleResourceValue) {
                customStyleValues = (StyleResourceValue)item;
            }
        }

        // resolve the defStyleAttr value into a IStyleResourceValue
        StyleResourceValue defStyleValues = null;

        if (defStyleAttr != 0) {
            // get the name from the int.
            Pair<String, Boolean> defStyleAttribute = searchAttr(defStyleAttr);

            if (defaultPropMap != null) {
                String defStyleName = defStyleAttribute.getFirst();
                if (defStyleAttribute.getSecond()) {
                    defStyleName = "android:" + defStyleName;
                }
                defaultPropMap.put("style", defStyleName);
            }

            // look for the style in the current theme, and its parent:
            ResourceValue item = mRenderResources.findItemInTheme(defStyleAttribute.getFirst(),
                    defStyleAttribute.getSecond());

            if (item != null) {
                // item is a reference to a style entry. Search for it.
                item = mRenderResources.findResValue(item.getValue(),
                        false /*forceFrameworkOnly*/);

                if (item instanceof StyleResourceValue) {
                    defStyleValues = (StyleResourceValue)item;
                }
            } else {
                Bridge.getLog().error(LayoutLog.TAG_RESOURCES_RESOLVE_THEME_ATTR,
                        String.format(
                                "Failed to find style '%s' in current theme",
                                defStyleAttribute.getFirst()),
                        null /*data*/);
            }
        } else if (defStyleRes != 0) {
            boolean isFrameworkRes = true;
            Pair<ResourceType, String> value = Bridge.resolveResourceId(defStyleRes);
            if (value == null) {
                value = mProjectCallback.resolveResourceId(defStyleRes);
                isFrameworkRes = false;
            }

            if (value != null) {
                if (value.getFirst() == ResourceType.STYLE) {
                    // look for the style in the current theme, and its parent:
                    ResourceValue item = mRenderResources.findItemInTheme(value.getSecond(),
                            isFrameworkRes);
                    if (item != null) {
                        if (item instanceof StyleResourceValue) {
                            if (defaultPropMap != null) {
                                defaultPropMap.put("style", item.getName());
                            }

                            defStyleValues = (StyleResourceValue)item;
                        }
                    } else {
                        Bridge.getLog().error(null,
                                String.format(
                                        "Style with id 0x%x (resolved to '%s') does not exist.",
                                        defStyleRes, value.getSecond()),
                                null /*data*/);
                    }
                } else {
                    Bridge.getLog().error(null,
                            String.format(
                                    "Resouce id 0x%x is not of type STYLE (instead %s)",
                                    defStyleRes, value.getFirst().toString()),
                            null /*data*/);
                }
            } else {
                Bridge.getLog().error(null,
                        String.format(
                                "Failed to find style with id 0x%x in current theme",
                                defStyleRes),
                        null /*data*/);
            }
        }

        String appNamespace = mProjectCallback.getNamespace();

        if (attributeList != null) {
            for (int index = 0 ; index < attributeList.size() ; index++) {
                Pair<String, Boolean> attribute = attributeList.get(index);

                if (attribute == null) {
                    continue;
                }

                String attrName = attribute.getFirst();
                boolean frameworkAttr = attribute.getSecond().booleanValue();
                String value = null;
                if (set != null) {
                    value = set.getAttributeValue(
                            frameworkAttr ? BridgeConstants.NS_RESOURCES : appNamespace,
                                    attrName);

                    // if this is an app attribute, and the first get fails, try with the
                    // new res-auto namespace as well
                    if (frameworkAttr == false && value == null) {
                        value = set.getAttributeValue(BridgeConstants.NS_APP_RES_AUTO, attrName);
                    }
                }

                // if there's no direct value for this attribute in the XML, we look for default
                // values in the widget defStyle, and then in the theme.
                if (value == null) {
                    ResourceValue resValue = null;

                    // look for the value in the custom style first (and its parent if needed)
                    if (customStyleValues != null) {
                        resValue = mRenderResources.findItemInStyle(customStyleValues,
                                attrName, frameworkAttr);
                    }

                    // then look for the value in the default Style (and its parent if needed)
                    if (resValue == null && defStyleValues != null) {
                        resValue = mRenderResources.findItemInStyle(defStyleValues,
                                attrName, frameworkAttr);
                    }

                    // if the item is not present in the defStyle, we look in the main theme (and
                    // its parent themes)
                    if (resValue == null) {
                        resValue = mRenderResources.findItemInTheme(attrName, frameworkAttr);
                    }

                    // if we found a value, we make sure this doesn't reference another value.
                    // So we resolve it.
                    if (resValue != null) {
                        // put the first default value, before the resolution.
                        if (defaultPropMap != null) {
                            defaultPropMap.put(attrName, resValue.getValue());
                        }

                        resValue = mRenderResources.resolveResValue(resValue);
                    }

                    ta.bridgeSetValue(index, attrName, frameworkAttr, resValue);
                } else {
                    // there is a value in the XML, but we need to resolve it in case it's
                    // referencing another resource or a theme value.
                    ta.bridgeSetValue(index, attrName, frameworkAttr,
                            mRenderResources.resolveValue(null, attrName, value, isPlatformFile));
                }
            }
        }

        ta.sealArray();

        return ta;
!!!9498636.java!!!	getMainLooper() : Looper
        return Looper.myLooper();
!!!9498764.java!!!	createStyleBasedTypedArray(inout style : StyleResourceValue, inout attrs : int) : BridgeTypedArray

        List<Pair<String, Boolean>> attributes = searchAttrs(attrs);

        BridgeTypedArray ta = ((BridgeResources) mSystemResources).newTypeArray(attrs.length,
                false);

        // for each attribute, get its name so that we can search it in the style
        for (int i = 0 ; i < attrs.length ; i++) {
            Pair<String, Boolean> attribute = attributes.get(i);

            if (attribute != null) {
                // look for the value in the given style
                ResourceValue resValue = mRenderResources.findItemInStyle(style,
                        attribute.getFirst(), attribute.getSecond());

                if (resValue != null) {
                    // resolve it to make sure there are no references left.
                    ta.bridgeSetValue(i, attribute.getFirst(), attribute.getSecond(),
                            mRenderResources.resolveResValue(resValue));
                }
            }
        }

        ta.sealArray();

        return ta;
!!!9498892.java!!!	searchAttrs(inout attrs : int) : List<Pair<String, Boolean>>
        List<Pair<String, Boolean>> results = new ArrayList<Pair<String, Boolean>>(attrs.length);

        // for each attribute, get its name so that we can search it in the style
        for (int i = 0 ; i < attrs.length ; i++) {
            Pair<ResourceType, String> resolvedResource = Bridge.resolveResourceId(attrs[i]);
            boolean isFramework = false;
            if (resolvedResource != null) {
                isFramework = true;
            } else {
                resolvedResource = mProjectCallback.resolveResourceId(attrs[i]);
            }

            if (resolvedResource != null) {
                results.add(Pair.of(resolvedResource.getSecond(), isFramework));
            } else {
                results.add(null);
            }
        }

        return results;
!!!9499020.java!!!	searchAttr(in attr : int) : Pair<String, Boolean>
        Pair<ResourceType, String> info = Bridge.resolveResourceId(attr);
        if (info != null) {
            return Pair.of(info.getSecond(), Boolean.TRUE);
        }

        info = mProjectCallback.resolveResourceId(attr);
        if (info != null) {
            return Pair.of(info.getSecond(), Boolean.FALSE);
        }

        return null;
!!!9499148.java!!!	getDynamicIdByStyle(inout resValue : StyleResourceValue) : int
        if (mDynamicIdToStyleMap == null) {
            // create the maps.
            mDynamicIdToStyleMap = new HashMap<Integer, StyleResourceValue>();
            mStyleToDynamicIdMap = new HashMap<StyleResourceValue, Integer>();
        }

        // look for an existing id
        Integer id = mStyleToDynamicIdMap.get(resValue);

        if (id == null) {
            // generate a new id
            id = Integer.valueOf(++mDynamicIdGenerator);

            // and add it to the maps.
            mDynamicIdToStyleMap.put(id, resValue);
            mStyleToDynamicIdMap.put(resValue, id);
        }

        return id;
!!!9499276.java!!!	getStyleByDynamicId(in i : int) : StyleResourceValue
        if (mDynamicIdToStyleMap != null) {
            return mDynamicIdToStyleMap.get(i);
        }

        return null;
!!!9499404.java!!!	getFrameworkResourceValue(inout resType : ResourceType, in resName : String, in defValue : int) : int
        Integer value = Bridge.getResourceId(resType, resName);
        if (value != null) {
            return value.intValue();
        }

        return defValue;
!!!9499532.java!!!	getProjectResourceValue(inout resType : ResourceType, in resName : String, in defValue : int) : int
        if (mProjectCallback != null) {
            Integer value = mProjectCallback.getResourceId(resType, resName);
            if (value != null) {
                return value.intValue();
            }
        }

        return defValue;
!!!9499660.java!!!	bindService(inout arg0 : Intent, inout arg1 : ServiceConnection, in arg2 : int) : boolean
        // pass
        return false;
!!!9499788.java!!!	checkCallingOrSelfPermission(in arg0 : String) : int
        // pass
        return 0;
!!!9499916.java!!!	checkCallingOrSelfUriPermission(inout arg0 : Uri, in arg1 : int) : int
        // pass
        return 0;
!!!9500044.java!!!	checkCallingPermission(in arg0 : String) : int
        // pass
        return 0;
!!!9500172.java!!!	checkCallingUriPermission(inout arg0 : Uri, in arg1 : int) : int
        // pass
        return 0;
!!!9500300.java!!!	checkPermission(in arg0 : String, in arg1 : int, in arg2 : int) : int
        // pass
        return 0;
!!!9500428.java!!!	checkUriPermission(inout arg0 : Uri, in arg1 : int, in arg2 : int, in arg3 : int) : int
        // pass
        return 0;
!!!9500556.java!!!	checkUriPermission(inout arg0 : Uri, in arg1 : String, in arg2 : String, in arg3 : int, in arg4 : int, in arg5 : int) : int
        // pass
        return 0;
!!!9500684.java!!!	clearWallpaper() : void
        // pass

!!!9500812.java!!!	createPackageContext(in arg0 : String, in arg1 : int) : Context
        // pass
        return null;
!!!9500940.java!!!	createPackageContextAsUser(in arg0 : String, in arg1 : int, inout user : UserHandle) : Context
        // pass
        return null;
!!!9501068.java!!!	createConfigurationContext(inout overrideConfiguration : Configuration) : Context
        // pass
        return null;
!!!9501196.java!!!	createDisplayContext(inout display : Display) : Context
        // pass
        return null;
!!!9501324.java!!!	databaseList() : String
        // pass
        return null;
!!!9501452.java!!!	deleteDatabase(in arg0 : String) : boolean
        // pass
        return false;
!!!9501580.java!!!	deleteFile(in arg0 : String) : boolean
        // pass
        return false;
!!!9501708.java!!!	enforceCallingOrSelfPermission(in arg0 : String, in arg1 : String) : void
        // pass

!!!9501836.java!!!	enforceCallingOrSelfUriPermission(inout arg0 : Uri, in arg1 : int, in arg2 : String) : void
        // pass

!!!9501964.java!!!	enforceCallingPermission(in arg0 : String, in arg1 : String) : void
        // pass

!!!9502092.java!!!	enforceCallingUriPermission(inout arg0 : Uri, in arg1 : int, in arg2 : String) : void
        // pass

!!!9502220.java!!!	enforcePermission(in arg0 : String, in arg1 : int, in arg2 : int, in arg3 : String) : void
        // pass

!!!9502348.java!!!	enforceUriPermission(inout arg0 : Uri, in arg1 : int, in arg2 : int, in arg3 : int, in arg4 : String) : void
        // pass

!!!9502476.java!!!	enforceUriPermission(inout arg0 : Uri, in arg1 : String, in arg2 : String, in arg3 : int, in arg4 : int, in arg5 : int, in arg6 : String) : void
        // pass

!!!9502604.java!!!	fileList() : String
        // pass
        return null;
!!!9502732.java!!!	getAssets() : AssetManager
        // pass
        return null;
!!!9502860.java!!!	getCacheDir() : File
        // pass
        return null;
!!!9502988.java!!!	getExternalCacheDir() : File
        // pass
        return null;
!!!9503116.java!!!	getContentResolver() : ContentResolver
        if (mContentResolver == null) {
            mContentResolver = new BridgeContentResolver(this);
        }
        return mContentResolver;
!!!9503244.java!!!	getDatabasePath(in arg0 : String) : File
        // pass
        return null;
!!!9503372.java!!!	getDir(in arg0 : String, in arg1 : int) : File
        // pass
        return null;
!!!9503500.java!!!	getFileStreamPath(in arg0 : String) : File
        // pass
        return null;
!!!9503628.java!!!	getFilesDir() : File
        // pass
        return null;
!!!9503756.java!!!	getExternalFilesDir(in type : String) : File
        // pass
        return null;
!!!9503884.java!!!	getPackageCodePath() : String
        // pass
        return null;
!!!9504012.java!!!	getPackageManager() : PackageManager
        // pass
        return null;
!!!9504140.java!!!	getPackageName() : String
        // pass
        return null;
!!!9504268.java!!!	getApplicationInfo() : ApplicationInfo
        return mApplicationInfo;
!!!9504396.java!!!	getPackageResourcePath() : String
        // pass
        return null;
!!!9504524.java!!!	getSharedPrefsFile(in name : String) : File
        // pass
        return null;
!!!9504652.java!!!	getSharedPreferences(in arg0 : String, in arg1 : int) : SharedPreferences
        // pass
        return null;
!!!9504780.java!!!	getWallpaper() : Drawable
        // pass
        return null;
!!!9504908.java!!!	getWallpaperDesiredMinimumWidth() : int
        return -1;
!!!9505036.java!!!	getWallpaperDesiredMinimumHeight() : int
        return -1;
!!!9505164.java!!!	grantUriPermission(in arg0 : String, inout arg1 : Uri, in arg2 : int) : void
        // pass

!!!9505292.java!!!	openFileInput(in arg0 : String) : FileInputStream
        // pass
        return null;
!!!9505420.java!!!	openFileOutput(in arg0 : String, in arg1 : int) : FileOutputStream
        // pass
        return null;
!!!9505548.java!!!	openOrCreateDatabase(in arg0 : String, in arg1 : int, inout arg2 : CursorFactory) : SQLiteDatabase
        // pass
        return null;
!!!9505676.java!!!	openOrCreateDatabase(in arg0 : String, in arg1 : int, inout arg2 : CursorFactory, inout arg3 : DatabaseErrorHandler) : SQLiteDatabase
        // pass
        return null;
!!!9505804.java!!!	peekWallpaper() : Drawable
        // pass
        return null;
!!!9505932.java!!!	registerReceiver(inout arg0 : BroadcastReceiver, inout arg1 : IntentFilter) : Intent
        // pass
        return null;
!!!9506060.java!!!	registerReceiver(inout arg0 : BroadcastReceiver, inout arg1 : IntentFilter, in arg2 : String, inout arg3 : Handler) : Intent
        // pass
        return null;
!!!9506188.java!!!	registerReceiverAsUser(inout arg0 : BroadcastReceiver, inout arg0p5 : UserHandle, inout arg1 : IntentFilter, in arg2 : String, inout arg3 : Handler) : Intent
        // pass
        return null;
!!!9506316.java!!!	removeStickyBroadcast(inout arg0 : Intent) : void
        // pass

!!!9506444.java!!!	revokeUriPermission(inout arg0 : Uri, in arg1 : int) : void
        // pass

!!!9506572.java!!!	sendBroadcast(inout arg0 : Intent) : void
        // pass

!!!9506700.java!!!	sendBroadcast(inout arg0 : Intent, in arg1 : String) : void
        // pass

!!!9506828.java!!!	sendOrderedBroadcast(inout arg0 : Intent, in arg1 : String) : void
        // pass

!!!9506956.java!!!	sendOrderedBroadcast(inout arg0 : Intent, in arg1 : String, inout arg2 : BroadcastReceiver, inout arg3 : Handler, in arg4 : int, in arg5 : String, inout arg6 : Bundle) : void
        // pass

!!!9507084.java!!!	sendBroadcastAsUser(inout intent : Intent, inout user : UserHandle) : void
        // pass
!!!9507212.java!!!	sendBroadcastAsUser(inout intent : Intent, inout user : UserHandle, in receiverPermission : String) : void
        // pass
!!!9507340.java!!!	sendOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, in receiverPermission : String, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, in initialData : String, inout initialExtras : Bundle) : void
        // pass
!!!9507468.java!!!	sendStickyBroadcast(inout arg0 : Intent) : void
        // pass

!!!9507596.java!!!	sendStickyOrderedBroadcast(inout intent : Intent, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, in initialData : String, inout initialExtras : Bundle) : void
        // pass
!!!9507724.java!!!	sendStickyBroadcastAsUser(inout intent : Intent, inout user : UserHandle) : void
        // pass
!!!9507852.java!!!	sendStickyOrderedBroadcastAsUser(inout intent : Intent, inout user : UserHandle, inout resultReceiver : BroadcastReceiver, inout scheduler : Handler, in initialCode : int, in initialData : String, inout initialExtras : Bundle) : void
        // pass
!!!9507980.java!!!	removeStickyBroadcastAsUser(inout intent : Intent, inout user : UserHandle) : void
        // pass
!!!9508108.java!!!	setTheme(in arg0 : int) : void
        // pass

!!!9508236.java!!!	setWallpaper(inout arg0 : Bitmap) : void
        // pass

!!!9508364.java!!!	setWallpaper(inout arg0 : InputStream) : void
        // pass

!!!9508492.java!!!	startActivity(inout arg0 : Intent) : void
        // pass
!!!9508620.java!!!	startActivity(inout arg0 : Intent, inout arg1 : Bundle) : void
        // pass
!!!9508748.java!!!	startIntentSender(inout intent : IntentSender, inout fillInIntent : Intent, in flagsMask : int, in flagsValues : int, in extraFlags : int) : void
        // pass
!!!9508876.java!!!	startIntentSender(inout intent : IntentSender, inout fillInIntent : Intent, in flagsMask : int, in flagsValues : int, in extraFlags : int, inout options : Bundle) : void
        // pass
!!!9509004.java!!!	startInstrumentation(inout arg0 : ComponentName, in arg1 : String, inout arg2 : Bundle) : boolean
        // pass
        return false;
!!!9509132.java!!!	startService(inout arg0 : Intent) : ComponentName
        // pass
        return null;
!!!9509260.java!!!	stopService(inout arg0 : Intent) : boolean
        // pass
        return false;
!!!9509388.java!!!	startServiceAsUser(inout arg0 : Intent, inout arg1 : UserHandle) : ComponentName
        // pass
        return null;
!!!9509516.java!!!	stopServiceAsUser(inout arg0 : Intent, inout arg1 : UserHandle) : boolean
        // pass
        return false;
!!!9509644.java!!!	unbindService(inout arg0 : ServiceConnection) : void
        // pass

!!!9509772.java!!!	unregisterReceiver(inout arg0 : BroadcastReceiver) : void
        // pass

!!!9509900.java!!!	getApplicationContext() : Context
        return this;
!!!9510028.java!!!	startActivities(inout arg0 : Intent) : void
        // pass

!!!9510156.java!!!	startActivities(inout arg0 : Intent, inout arg1 : Bundle) : void
        // pass

!!!9510284.java!!!	isRestricted() : boolean
        return false;
!!!9510412.java!!!	getObbDir() : File
        Bridge.getLog().error(LayoutLog.TAG_UNSUPPORTED, "OBB not supported", null);
        return null;
!!!9510540.java!!!	getCompatibilityInfo(in displayId : int) : CompatibilityInfoHolder
        // pass
        return null;
