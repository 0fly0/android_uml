class MergeDeviceChannelListTask
!!!13247628.java!!!	MergeDeviceChannelListTask(inout context : Context, in deviceId : String)
        super(context, deviceId);
!!!13247756.java!!!	doInBackground(inout  : Channel...deviceChannels) : Void
        mDeviceChannels = new HashSet<Channel>();
        Collections.addAll(mDeviceChannels, deviceChannels);

        ContentResolver resolver = getContext().getContentResolver();

        List<Channel> currentChannels = new ArrayList<Channel>();

        // Query the existing channel list in the STREAMS table.
        Cursor cursor = resolver.query(Streams.getStreamsUri(), Streams.STREAMS_PROJECTION,
                StreamsColumns.DEVICE_ID + " = ?", new String[] { getDeviceId() },
                null);
        while (cursor.moveToNext()) {
            Channel channel = StreamUtils.buildChannelFromCursor(cursor, false);
            currentChannels.add(channel);
        }
        cursor.close();

        Iterator<Channel> iter = currentChannels.iterator();
        Map<String, String> vendorQueryParams = new HashMap<String, String>();

        while (iter.hasNext()) {
            final Channel currentChannel = iter.next();
            final Channel deviceChannel = findDeviceChannelFor(currentChannel);
            if (DEBUG) Log.d(LOG_TAG, "current channel: " + currentChannel);
            if (DEBUG) Log.d(LOG_TAG, "device channel: " + deviceChannel);
            if (deviceChannel == null) {
                // There is no device channel corresponding to this lineup
                // channel. So delete it.
                if (DEBUG) Log.d(LOG_TAG, "not found, so deleting " + currentChannel);
                resolver.delete(Streams.getStreamUri(currentChannel.getId()), null, null);
            } else {
                // Update the DB.
                if (DEBUG) Log.d(LOG_TAG, "found, so updating " + currentChannel);
                ContentValues values = new ContentValues();
                values.put(StreamsColumns.SOURCE, deviceChannel.getSource());
                values.put(StreamsColumns.IS_DISABLED, !deviceChannel.isEnabled());
                values.put(StreamsColumns.DATA_SOURCE, deviceChannel.getDataSource());

                // Migrate any vendor-specific query parameters from the device channel to
                // the URI from the lineup channel. This non-destructively modifies the URI
                // without removing any existing query parameters.
                Uri uri = Uri.parse(currentChannel.getUri());
                if (TvUriUtils.extractVendorQueryParameters(Uri.parse(deviceChannel.getUri()),
                                vendorQueryParams)) {
                    Uri updatedUri = TvUriUtils.addVendorQueryParameters(uri, vendorQueryParams);
                    if (updatedUri != null) {
                        uri = updatedUri;
                    }
                }
                vendorQueryParams.clear();

                values.put(StreamsColumns.URI, uri.toString());
                resolver.update(Streams.getStreamUri(currentChannel.getId()), values, null, null);

                onUpdate(currentChannel, deviceChannel, uri);
            }
        }

        if (!mDeviceChannels.isEmpty()) {
            // There were some device channels that were not matched up to anything
            // in the lineup. Bulk-insert these.
            for (Channel deviceChannel : mDeviceChannels) {
                if (DEBUG) Log.d(LOG_TAG, "inserting: " + deviceChannel);
                addToInsertBatch(deviceChannel);
            }

            flushInsertBatch();
        }

        return null;
!!!13247884.java!!!	findDeviceChannelFor(in lineupChannel : Channel) : Channel
        Iterator<Channel> iter = mDeviceChannels.iterator();
        while (iter.hasNext()) {
            final Channel deviceChannel = iter.next();
            if (isSameChannel(lineupChannel, deviceChannel)) {
                iter.remove();
                return deviceChannel;
            }
        }
        return null;
!!!13248140.java!!!	onUpdate(in lineupChannel : Channel, in deviceChannel : Channel, in updatedLineupUri : Uri) : void
        // no-op by default
