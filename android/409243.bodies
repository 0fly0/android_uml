class GenericExceptionsTest
!!!2769051.java!!!	testGenericExceptionsOfMethodsWithTypeParameters() : void
        Method method = Thrower.class.getMethod("parameterizedMethod");
        assertEquals(Arrays.<Type>asList(IOException.class),
                Arrays.asList(method.getGenericExceptionTypes()));
!!!2769179.java!!!	testGenericExceptionsOfMethodsWithGenericParameters() : void
        Method method = Thrower.class.getMethod("genericParameters", List.class);
        assertEquals(Arrays.<Type>asList(IOException.class),
                Arrays.asList(method.getGenericExceptionTypes()));
!!!2769307.java!!!	testGenericExceptionsOfConstructorsWithTypeParameters() : void
        Constructor constructor = Thrower.class.getConstructor();
        assertEquals(Arrays.<Type>asList(IOException.class),
                Arrays.asList(constructor.getGenericExceptionTypes()));
!!!2769435.java!!!	testGenericExceptionsOfConstructorsWithGenericParameters() : void
        Constructor constructor = Thrower.class.getConstructor(List.class);
        assertEquals(Arrays.<Type>asList(IOException.class),
                Arrays.asList(constructor.getGenericExceptionTypes()));
!!!2769563.java!!!	testConstructorThrowingTypeVariable() : void
        Constructor constructor = ThrowerT.class.getConstructor();
        TypeVariable typeVariable = getOnlyValue(constructor.getGenericExceptionTypes(),
                TypeVariable.class);
        assertEquals("T", typeVariable.getName());
        assertEquals(Arrays.<Type>asList(Throwable.class), Arrays.asList(typeVariable.getBounds()));
!!!2769691.java!!!	testMethodThrowingTypeVariable() : void
        Method method = ThrowerT.class.getMethod("throwsTypeVariable");
        TypeVariable typeVariable = getOnlyValue(method.getGenericExceptionTypes(),
                TypeVariable.class);
        assertEquals("T", typeVariable.getName());
        assertEquals(Arrays.<Type>asList(Throwable.class), Arrays.asList(typeVariable.getBounds()));
!!!2769819.java!!!	testThrowingMethodTypeParameter() : void
        Method method = ThrowerT.class.getMethod("throwsMethodTypeParameter");
        TypeVariable typeVariable = getOnlyValue(method.getGenericExceptionTypes(),
                TypeVariable.class);
        assertEquals("X", typeVariable.getName());
        assertEquals(Arrays.<Type>asList(Exception.class), Arrays.asList(typeVariable.getBounds()));
!!!2769947.java!!!	testThrowingMethodThrowsEverything() : void
        Method method = ThrowerT.class.getMethod("throwsEverything");
        Type[] exceptions = method.getGenericExceptionTypes();
        TypeVariable t = (TypeVariable) exceptions[0];
        assertEquals(3, exceptions.length);
        assertEquals("T", t.getName());
        assertEquals(Arrays.<Type>asList(Throwable.class), Arrays.asList(t.getBounds()));
        assertEquals(Exception.class, exceptions[1]);
        TypeVariable x = (TypeVariable) exceptions[2];
        assertEquals("X", x.getName());
        assertEquals(Arrays.<Type>asList(Exception.class), Arrays.asList(x.getBounds()));
!!!2770075.java!!!	getOnlyValue(inout array : Object, inout expectedType : Class) : T
        assertEquals("Expected a " + expectedType.getName() + " but was " + Arrays.toString(array),
                1, array.length);
        assertTrue("Expected a " + expectedType.getName() + " but was " + array[0],
                expectedType.isInstance(array[0]));
        return expectedType.cast(array[0]);
