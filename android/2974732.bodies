class IrDatabase
!!!12083340.java!!!	IrDatabase(inout context : Context, inout DTMaping : AbstractIrDeviceTypeMapping)
        mContext = context;
        mDTMap = DTMaping;
!!!12083468.java!!!	isDemoDatabase() : boolean
        String version = QSNativeLib.QSgetLocalDBVersionString();
        Log.d(LOG_TAG, "Version is " + version);
        if (version != null && version.equalsIgnoreCase(QSNativeLib.MRVL_DEMO_VERSION)) {
            return true;
        }

        return false;
!!!12083596.java!!!	checkQueryMode() : int
        // Get NTP time for reset.
        long ntpClient = 0;
        if (client.requestTime(NTP_SERVER, WAIT_MS)) {
            ntpClient = client.getNtpTime();
            Log.d(LOG_TAG, "ntp time = " + ntpClient);
        } else {
            Log.i(LOG_TAG, "fail to request ntp client");
            return QSNativeLib.QSqueryModeGet();
        }

        String ntpTime = IRBCommand.IRB_GetNTPTime();
        if (ntpTime == null || ntpTime.isEmpty()) {
            // No time saved.
            Log.d(LOG_TAG, "no NTP time saved, reset to Normal!");
            QSNativeLib.QSqueryModeReset(QSNativeLib.QS_query_reset_normal);
            IRBCommand.IRB_SetNTPTime(Long.toString(ntpClient));
        } else {
            Log.d(LOG_TAG, "got NTP time: " + ntpTime);
            long ntpSaved = Long.parseLong(ntpTime);
            long timeInterval = ntpClient - ntpSaved;
            if (timeInterval >= TIMER_UEILIMIT_MS) {
                Log.d(LOG_TAG, "QSqueryModeReset to Normal! Time interval: " + timeInterval);
                QSNativeLib.QSqueryModeReset(QSNativeLib.QS_query_reset_normal);
                IRBCommand.IRB_SetNTPTime(Long.toString(ntpClient));
            } else {
                Log.d(LOG_TAG, "can not reset since interval is shorter than 30 days.");
            }
        }

        return QSNativeLib.QSqueryModeGet();
!!!12083724.java!!!	getDeviceTypes() : IrDeviceType
        List<IrDeviceType> deviceTypes = new ArrayList<IrDeviceType>();

        // Query full list of device types
        int devTypesTotal = QSNativeLib.QSretrieveDeviceTypes();
        Log.d(LOG_TAG, "total device types: " + devTypesTotal);

        if (devTypesTotal != mDTMap.getCount()) {
            Log.e(LOG_TAG, "UEI device types' naming changed?");
        }

        int id = 0;
        for (int i = 0; i < mDTMap.getCount(); i++) {
            deviceTypes.add(new IrDeviceType((id++) + "", mDTMap.getValueById(i)));
        }
        return deviceTypes;
!!!12083852.java!!!	getManufacturers(inout deviceType : IrDeviceType, in queryString : String) : IrDeviceManufacturer
        if (deviceType == null) {
            Log.e(LOG_TAG, "deviceType is null");
            return null;
        }
        Log.d(LOG_TAG, "query brand with prefix <" + queryString + "> by type "
             + mDTMap.getKeyByValue(deviceType.getName()));

        List<IrDeviceManufacturer> manufacturers = new ArrayList<IrDeviceManufacturer>();
        int count = QSNativeLib.QSretrieveBrands(mDTMap.getKeyByValue(deviceType.getName()),
                                                queryString == null ?
                                                QSNativeLib.SPACE_CHARACTER : queryString);
        int id = 0;
        for (int j = 0; j < count; j++) {
            String brandName = QSNativeLib.QSgetBrandName(j == 0 ? 0 : -1);
            Log.d(LOG_TAG, "get one manufacturer " + brandName);
            manufacturers.add(new IrDeviceManufacturer((id++) + "", brandName));
        }
        return manufacturers;
!!!12083980.java!!!	queryModels(inout deviceType : IrDeviceType, inout manufacturer : IrDeviceManufacturer, in queryString : String) : IrDeviceModel
        if (deviceType == null || manufacturer == null) {
            Log.e(LOG_TAG, "deviceType or manufacturer is null");
            return null;
        }
        Log.d(LOG_TAG, "retrieve models by device type " +
              mDTMap.getKeyByValue(deviceType.getName()));

        List<IrDeviceModel> models = new ArrayList<IrDeviceModel>();
        int matchedCount = QSNativeLib.QSretrieveBrands(mDTMap.getKeyByValue(deviceType.getName()),
                                                       manufacturer.getName());
        // Select the first one, native lib required
        String firstBrand = QSNativeLib.QSgetBrandName(QSNativeLib.FIRST_INDEX);
        if (matchedCount < 1 || firstBrand == null ||
            !firstBrand.equalsIgnoreCase(manufacturer.getName())) {
            Log.e(LOG_TAG, "cannot select brand: " + manufacturer.getName() +
                  ", matchedCount: " + matchedCount);
            return models;
        }

        // Do prefix-search here since no full-search API provided by native
        int modelCount = QSNativeLib.QSretrieveModels(QSNativeLib.FIRST_INDEX,
                                                     queryString == null ?
                                                     QSNativeLib.SPACE_CHARACTER : queryString);
        int innerId = 0;
        for (int i = 0; i < modelCount; i++) {
            String modelName = QSNativeLib.QSgetModelName(i == 0 ? 0 : -1);
            Log.d(LOG_TAG, "==> queryModels " + modelName);
            models.add(new IrDeviceModel((innerId++) + "", modelName));
        }
        return models;
!!!12084108.java!!!	queryCommandSetsbyModel(inout deviceType : IrDeviceType, inout manufacturer : IrDeviceManufacturer, inout model : IrDeviceModel) : IrCommandSet
        if (deviceType == null || manufacturer == null || model == null)  {
            Log.e(LOG_TAG, "deviceType, manufacturer or model is null");
            return null;
        }

        List<IrCommandSet> commandSets = new ArrayList<IrCommandSet>();
        Log.d(LOG_TAG, "get commandSet by model: " + model.getId()+ ", " + model.getName());
        int total = QSNativeLib.QSretrieveCodesets(Integer.parseInt(model.getId()));
        int id = 0;
        for (int i = 0; i < total; i++) {
            String commandSetName = QSNativeLib.QSgetCodesetName(i == 0 ? 0 : -1);
            commandSets.add(new IrCommandSet((id++) + "", commandSetName));
        }
        return commandSets;
!!!12084236.java!!!	queryCommandSets(inout deviceType : IrDeviceType, inout manufacturer : IrDeviceManufacturer) : IrCommandSet
        if (deviceType == null || manufacturer == null) {
            Log.e(LOG_TAG, "deviceType or manufacturer is null");
            return null;
        }

        List<IrCommandSet> commandSets = new ArrayList<IrCommandSet>();
        Log.d(LOG_TAG, "retrieve all commandSet with brand name " + manufacturer.getName());
        int matchedCount = QSNativeLib.QSretrieveBrands(
                           mDTMap.getKeyByValue(deviceType.getName()), manufacturer.getName());
        String firstBrand = QSNativeLib.QSgetBrandName(QSNativeLib.FIRST_INDEX);
        if (matchedCount < 1 || firstBrand == null ||
            !firstBrand.equalsIgnoreCase(manufacturer.getName())) {
            Log.e(LOG_TAG, "queryCommandSets: Cannot select brand: " + manufacturer.getName()
                 + ", matchedCount: " + matchedCount + ", firstBrand: " + firstBrand);
            return commandSets;
        }
        int total = QSNativeLib.QSretrieveCodesetsByBrand(0 /* no filter */);
        int id = 0;
        for (int i = 0; i < total; i++) {
            String commandSetName = QSNativeLib.QSgetCodesetName(i == 0 ? 0 : -1);
            commandSets.add(new IrCommandSet((id++) + "", commandSetName));
        }
        return commandSets;
