class MenuFragment
!!!12365836.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        super.onCreateView(inflater, container, savedInstanceState);
        mData = getData();
        mMenuView = inflater.inflate(getResourceId(), container, false);
        mListView = (ListView) mMenuView.findViewById(android.R.id.list);
        mListView.setSelection(0);
        mListView.setScrollbarFadingEnabled(false);
        mListView.setOnItemSelectedListener(onListItemSelectedListener);
        mListView.setOnKeyListener(onKeyListener);
        mListView.setOnFocusChangeListener(onFocusChangeListener);
        if (mData != null) {
            MenuItemAdapter adapter = new MenuItemAdapter(getActivity(), mData,
                    getItemResourceId(),
                    getAdatperKeyArray(), getAdatperIdArray());
            adapter.setViewBinder(mViewBinder);
            setListAdapter(adapter);
        }
        return mMenuView;
!!!12365964.java!!!	onResume() : void
        super.onResume();
        startTimeOut();
!!!12366092.java!!!	onPause() : void
        super.onPause();
        stopTimeOut();
!!!12366220.java!!!	onListItemKey(in view : View, in keyCode : int, in event : KeyEvent) : boolean
        refreshTimeOut();
        return false;
!!!12366348.java!!!	onListItemClick(inout l : ListView, inout v : View, in position : int, in id : long) : void
        super.onListItemClick(l, v, position, id);
        if (mData != null) {
            // setMenuTip(mData.get(position).get(KEY_SUMMARY).toString());
        }
!!!12367244.java!!!	updateValidData(inout map : Map<String, Object>) : boolean
        return true;
!!!12367500.java!!!	getMenuData() : Map<String, Object>
        return mMenuData;
!!!12367628.java!!!	getData() : List<Map<String, Object>>
        if (mMenuItemData == null) {
            if (getDataXmlId() != 0) {
                XmlResourceParser parser = getActivity().getResources().getXml(getDataXmlId());
                try {
                    mMenuItemData = parseXml(getActivity(), parser);
                } catch (Exception e) {
                    Log.w(TAG, "Could not instantiate the data.", e);
                }
            }
        }
        return mMenuItemData;
!!!12367756.java!!!	parseXml(inout context : Context, inout parser : XmlPullParser) : List<Map<String, Object>>
        List<Map<String, Object>> returnList = new ArrayList<Map<String, Object>>();
        Map<String, Object> map = null;
        AttributeSet attrs = Xml.asAttributeSet(parser);
        int type;
        while ((type = parser.next()) != XmlPullParser.END_DOCUMENT) {
            if (type == XmlPullParser.START_TAG) {
                String tagName = parser.getName();
                if (TAG_MENU.equals(tagName)) {
                    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.Menu);
                    map = new HashMap<String, Object>();
                    map.put(KEY_MENU_TITLE, a.getString(R.styleable.Menu_menuTitle));

                    final int timeout = a.getInteger(R.styleable.Menu_menuTimeOut,
                            DEFAULT_MENU_TIME_OUT);
                    map.put(KEY_MENU_TIMEOUT, timeout);
                    setTimeOut(timeout);

                    mMenuData = map;
                    Log.v(TAG, "parseXml menu map: " + mMenuData);
                    a.recycle();
                } else if (TAG_ITEM.equals(tagName)) {
                    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.MenuItem);
                    map = new HashMap<String, Object>();
                    putToMap(map, KEY_DYNAMIC, a.getBoolean(R.styleable.MenuItem_dynamic, false));
                    putToMap(map, KEY_ICON,
                            a.getResourceId(R.styleable.MenuItem_icon,
                                    R.drawable.settings_picture));
                    Integer itemType = a.getInteger(R.styleable.MenuItem_itemType, 0);
                    putToMap(map, KEY_ITEM_TYPE, itemType);
                    putToMap(map, KEY_SUMMARY, a.getString(R.styleable.MenuItem_summary));
                    putToMap(map, KEY_TITLE, a.getString(R.styleable.MenuItem_title));
                    switch (itemType) {
                        case ITEM_TYPE_NORMAL: {
                            putToMap(map, KEY_CURR_VALUE, 0);
                        }
                            break;
                        case ITEM_TYPE_PROGRESS: {
                            putToMap(map, KEY_CURR_VALUE, 0);
                            putToMap(map, KEY_PROGRESS_MAX,
                                    a.getInteger(R.styleable.MenuItem_progressMax, 100));
                            putToMap(map, KEY_PROGRESS_MIN,
                                    a.getInteger(R.styleable.MenuItem_progressMin, 0));
                            putToMap(map, KEY_PROGRESS_STEP, a.getInteger(
                                    R.styleable.MenuItem_progressStep,
                                    getResources().getInteger(R.integer.Increment_Progress_By)));
                            putToMap(map, KEY_NOTIFY_CHANGE,
                                    a.getBoolean(R.styleable.MenuItem_notifyChange, false));
                            putToMap(map, KEY_SINGLEBAR,
                                    a.getBoolean(R.styleable.MenuItem_singleBar, false));
                        }
                            break;
                        case ITEM_TYPE_LIST: {
                            putToMap(map, KEY_CURR_VALUE, 0);
                            putToMap(map, KEY_LIST_COUNT,
                                    a.getInteger(R.styleable.MenuItem_listCount, 100));
                            putToMap(map, KEY_LIST_NAMES,
                                    a.getTextArray(R.styleable.MenuItem_listNames));
                            putToMap(
                                    map,
                                    KEY_LIST_VALUES,
                                    getResources().getIntArray(
                                            a.getResourceId(R.styleable.MenuItem_listValues,
                                                    R.array.defaultValueList_8)));
                            putToMap(map, KEY_NOTIFY_CHANGE,
                                    a.getBoolean(R.styleable.MenuItem_notifyChange, false));
                            putToMap(map, KEY_SINGLEBAR,
                                    a.getBoolean(R.styleable.MenuItem_singleBar, false));
                        }
                            break;
                        default: {
                        }
                    }
                    putToMap(map, KEY_API, a.getString(R.styleable.MenuItem_API));
                    putToMap(map, KEY_ASYNC_API,
                            a.getBoolean(R.styleable.MenuItem_asyncAPI, false));

                    /*
                     * In many cases, list item need to be modified further than
                     * setting text or image, so we can use this MASK-VAL pair
                     * to bind to the item view itself and set it in
                     * setListItemValue. For example, set adapter's
                     * "from: array as {...,KEY_ITEM_MASK}, "to" array as
                     * {...,R.id.itemlayout}, then if textRepresentation in
                     * setListItemValue is VAL_ITEM_MASK+position, the view is
                     * the list item view.
                     */
                    putToMap(map, KEY_ITEM_MASK, VAL_ITEM_MASK + returnList.size());
                    putToMap(map, KEY_TARGET_CLASS, a.getString(R.styleable.MenuItem_targetClass));

                    if (updateValidData(map)) {
                        returnList.add(map);
                    }

                    a.recycle();
                }
            }
        }
        Log.v(TAG, "parseXml menu item list: " + returnList);
        return returnList;
!!!12367884.java!!!	putToMap(inout map : Map<String, Object>, in key : String, inout value : Object) : void
        if (map != null && !TextUtils.isEmpty(key) && value != null) {
            try {
                map.put(key, value);
            } catch (Exception e) {
                Log.w(TAG, "putToMap " + e);
            }
        }
!!!12368012.java!!!	setTimeOut(in time : int) : void
        TVBaseDialog activity = (TVBaseDialog) getActivity();
        if (activity != null) {
            activity.setTimeOut(time);
        }
!!!12368140.java!!!	getTimeOut() : int
        TVBaseDialog activity = (TVBaseDialog) getActivity();
        if (activity != null) {
            return activity.getTimeOut();
        } else {
            return 0;
        }
!!!12368268.java!!!	refreshTimeOut() : void
        TVBaseDialog activity = (TVBaseDialog) getActivity();
        if (activity != null) {
            activity.refreshTimeOut();
        }
!!!12368396.java!!!	startTimeOut() : void
        final TVBaseDialog activity = (TVBaseDialog) getActivity();
        if (activity != null) {
            activity.startTimeOut();
        }
!!!12368524.java!!!	stopTimeOut() : void
        TVBaseDialog activity = (TVBaseDialog) getActivity();
        if (activity != null) {
            activity.stopTimeOut();
        }
