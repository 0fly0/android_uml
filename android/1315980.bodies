class KeyguardWidgetFrame
!!!7811340.java!!!	KeyguardWidgetFrame(inout context : Context)
        this(context, null, 0);
!!!7811468.java!!!	KeyguardWidgetFrame(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!7811596.java!!!	KeyguardWidgetFrame(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        mLongPressHelper = new CheckLongPressHelper(this);

        Resources res = context.getResources();
        // TODO: this padding should really correspond to the padding embedded in the background
        // drawable (ie. outlines).
        float density = res.getDisplayMetrics().density;
        int padding = (int) (res.getDisplayMetrics().density * 8);
        setPadding(padding, padding, padding, padding);

        mFrameStrokeAdjustment = 2 + (int) (2 * density);

        // This will be overriden on phones based on the current security mode, however on tablets
        // we need to specify a height.
        mSmallWidgetHeight =
                res.getDimensionPixelSize(com.android.internal.R.dimen.kg_small_widget_height);
        mBackgroundDrawable = res.getDrawable(R.drawable.kg_widget_bg_padded);
        mGradientColor = res.getColor(com.android.internal.R.color.kg_widget_pager_gradient);
        mGradientPaint.setXfermode(sAddBlendMode);
!!!7811724.java!!!	onDetachedFromWindow() : void
        super.onDetachedFromWindow();
        cancelLongPress();
        KeyguardUpdateMonitor.getInstance(mContext).removeCallback(mUpdateMonitorCallbacks);

!!!7811852.java!!!	onAttachedToWindow() : void
        super.onAttachedToWindow();
        KeyguardUpdateMonitor.getInstance(mContext).registerCallback(mUpdateMonitorCallbacks);
!!!7811980.java!!!	setIsHoveringOverDeleteDropTarget(inout isHovering : boolean) : void
        if (ENABLE_HOVER_OVER_DELETE_DROP_TARGET_OVERLAY) {
            if (mIsHoveringOverDeleteDropTarget != isHovering) {
                mIsHoveringOverDeleteDropTarget = isHovering;
                invalidate();
            }
        }
!!!7812108.java!!!	onInterceptTouchEvent(inout ev : MotionEvent) : boolean
        // Watch for longpress events at this level to make sure
        // users can always pick up this widget
        switch (ev.getAction()) {
            case MotionEvent.ACTION_DOWN:
                mLongPressHelper.postCheckForLongPress(ev);
                break;
            case MotionEvent.ACTION_MOVE:
                mLongPressHelper.onMove(ev);
                break;
            case MotionEvent.ACTION_POINTER_DOWN:
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_CANCEL:
                mLongPressHelper.cancelLongPress();
                break;
        }

        // Otherwise continue letting touch events fall through to children
        return false;
!!!7812236.java!!!	onTouchEvent(inout ev : MotionEvent) : boolean
        // Watch for longpress events at this level to make sure
        // users can always pick up this widget
        switch (ev.getAction()) {
            case MotionEvent.ACTION_MOVE:
                mLongPressHelper.onMove(ev);
                break;
            case MotionEvent.ACTION_POINTER_DOWN:
            case MotionEvent.ACTION_UP:
            case MotionEvent.ACTION_CANCEL:
                mLongPressHelper.cancelLongPress();
                break;
        }

        // We return true here to ensure that we will get cancel / up signal
        // even if none of our children have requested touch.
        return true;
!!!7812364.java!!!	requestDisallowInterceptTouchEvent(inout disallowIntercept : boolean) : void
        super.requestDisallowInterceptTouchEvent(disallowIntercept);
        cancelLongPress();
!!!7812492.java!!!	cancelLongPress() : void
        super.cancelLongPress();
        mLongPressHelper.cancelLongPress();
!!!7812620.java!!!	drawGradientOverlay(inout c : Canvas) : void
        mGradientPaint.setShader(mForegroundGradient);
        mGradientPaint.setAlpha(mForegroundAlpha);
        c.drawRect(mForegroundRect, mGradientPaint);
!!!7812748.java!!!	drawHoveringOverDeleteOverlay(inout c : Canvas) : void
        if (mIsHoveringOverDeleteDropTarget) {
            c.drawColor(HOVER_OVER_DELETE_DROP_TARGET_OVERLAY_COLOR);
        }
!!!7812876.java!!!	drawBg(inout canvas : Canvas) : void
        if (mBackgroundAlpha > 0.0f) {
            Drawable bg = mBackgroundDrawable;

            bg.setAlpha((int) (mBackgroundAlpha * mBackgroundAlphaMultiplier * 255));
            bg.setBounds(mBackgroundRect);
            bg.draw(canvas);
        }
!!!7813004.java!!!	dispatchDraw(inout canvas : Canvas) : void
        if (ENABLE_HOVER_OVER_DELETE_DROP_TARGET_OVERLAY) {
            canvas.save();
        }
        drawBg(canvas);
        super.dispatchDraw(canvas);
        drawGradientOverlay(canvas);
        if (ENABLE_HOVER_OVER_DELETE_DROP_TARGET_OVERLAY) {
            drawHoveringOverDeleteOverlay(canvas);
            canvas.restore();
        }
!!!7813132.java!!!	enableHardwareLayersForContent() : void
        View widget = getContent();
        if (widget != null) {
            widget.setLayerType(LAYER_TYPE_HARDWARE, null);
        }
!!!7813260.java!!!	disableHardwareLayersForContent() : void
        View widget = getContent();
        if (widget != null) {
            widget.setLayerType(LAYER_TYPE_NONE, null);
        }
!!!7813388.java!!!	enableHardwareLayers() : void
        setLayerType(LAYER_TYPE_HARDWARE, null);
!!!7813516.java!!!	disableHardwareLayers() : void
        setLayerType(LAYER_TYPE_NONE, null);
!!!7813644.java!!!	getContent() : View
        return getChildAt(0);
!!!7813772.java!!!	getContentAppWidgetId() : int
        View content = getContent();
        if (content instanceof AppWidgetHostView) {
            return ((AppWidgetHostView) content).getAppWidgetId();
        } else if (content instanceof KeyguardStatusView) {
            return ((KeyguardStatusView) content).getAppWidgetId();
        } else {
            return AppWidgetManager.INVALID_APPWIDGET_ID;
        }
!!!7813900.java!!!	getBackgroundAlpha() : float
        return mBackgroundAlpha;
!!!7814028.java!!!	setBackgroundAlphaMultiplier(in multiplier : float) : void
        if (Float.compare(mBackgroundAlphaMultiplier, multiplier) != 0) {
            mBackgroundAlphaMultiplier = multiplier;
            invalidate();
        }
!!!7814156.java!!!	getBackgroundAlphaMultiplier() : float
        return mBackgroundAlphaMultiplier;
!!!7814284.java!!!	setBackgroundAlpha(in alpha : float) : void
        if (Float.compare(mBackgroundAlpha, alpha) != 0) {
            mBackgroundAlpha = alpha;
            invalidate();
        }
!!!7814412.java!!!	getContentAlpha() : float
        return mContentAlpha;
!!!7814540.java!!!	setContentAlpha(in alpha : float) : void
        mContentAlpha = alpha;
        View content = getContent();
        if (content != null) {
            content.setAlpha(alpha);
        }
!!!7814668.java!!!	setWidgetHeight(in height : int) : void
        boolean needLayout = false;
        View widget = getContent();
        if (widget != null) {
            LayoutParams lp = (LayoutParams) widget.getLayoutParams();
            if (lp.height != height) {
                needLayout = true;
                lp.height = height;
            }
        }
        if (needLayout) {
            requestLayout();
        }
!!!7814796.java!!!	setMaxChallengeTop(in top : int) : void
        boolean dirty = mMaxChallengeTop != top;
        mMaxChallengeTop = top;
        mSmallWidgetHeight = top - getPaddingTop();
        mSmallFrameHeight = top + getPaddingBottom();
        if (dirty && mIsSmall) {
            setWidgetHeight(mSmallWidgetHeight);
            setFrameHeight(mSmallFrameHeight);
        } else if (dirty && mWidgetLockedSmall) {
            setWidgetHeight(mSmallWidgetHeight);
        }
!!!7814924.java!!!	isSmall() : boolean
        return mIsSmall;
!!!7815052.java!!!	adjustFrame(in challengeTop : int) : void
        int frameHeight = challengeTop + getPaddingBottom();
        setFrameHeight(frameHeight);
!!!7815180.java!!!	shrinkWidget(inout alsoShrinkFrame : boolean) : void
        mIsSmall = true;
        setWidgetHeight(mSmallWidgetHeight);

        if (alsoShrinkFrame) {
            setFrameHeight(mSmallFrameHeight);
        }
!!!7815308.java!!!	getSmallFrameHeight() : int
        return mSmallFrameHeight;
!!!7815436.java!!!	shrinkWidget() : void
        shrinkWidget(true);
!!!7815564.java!!!	setWidgetLockedSmall(inout locked : boolean) : void
        if (locked) {
            setWidgetHeight(mSmallWidgetHeight);
        }
        mWidgetLockedSmall = locked;
!!!7815692.java!!!	resetSize() : void
        mIsSmall = false;
        if (!mWidgetLockedSmall) {
            setWidgetHeight(LayoutParams.MATCH_PARENT);
        }
        setFrameHeight(getMeasuredHeight());
!!!7815820.java!!!	setFrameHeight(in height : int) : void
        mFrameHeight = height;
        mBackgroundRect.set(0, 0, getMeasuredWidth(), Math.min(mFrameHeight, getMeasuredHeight()));
        mForegroundRect.set(mFrameStrokeAdjustment, mFrameStrokeAdjustment,getMeasuredWidth() -
                mFrameStrokeAdjustment, Math.min(getMeasuredHeight(), mFrameHeight) -
                mFrameStrokeAdjustment);
        updateGradient();
        invalidate();
!!!7815948.java!!!	hideFrame(inout caller : Object) : void
        fadeFrame(caller, false, 0f, KeyguardWidgetPager.CHILDREN_OUTLINE_FADE_OUT_DURATION);
!!!7816076.java!!!	showFrame(inout caller : Object) : void
        fadeFrame(caller, true, OUTLINE_ALPHA_MULTIPLIER,
                KeyguardWidgetPager.CHILDREN_OUTLINE_FADE_IN_DURATION);
!!!7816204.java!!!	fadeFrame(inout caller : Object, inout takeControl : boolean, in alpha : float, in duration : int) : void
        if (takeControl) {
            mBgAlphaController = caller;
        }

        if (mBgAlphaController != caller && mBgAlphaController != null) {
            return;
        }

        if (mFrameFade != null) {
            mFrameFade.cancel();
            mFrameFade = null;
        }
        PropertyValuesHolder bgAlpha = PropertyValuesHolder.ofFloat("backgroundAlpha", alpha);
        mFrameFade = ObjectAnimator.ofPropertyValuesHolder(this, bgAlpha);
        mFrameFade.setDuration(duration);
        mFrameFade.start();
!!!7816332.java!!!	updateGradient() : void
        float x0 = mLeftToRight ? 0 : mForegroundRect.width();
        float x1 = mLeftToRight ? mForegroundRect.width(): 0;
        mLeftToRightGradient = new LinearGradient(x0, 0f, x1, 0f,
                mGradientColor, 0, Shader.TileMode.CLAMP);
        mRightToLeftGradient = new LinearGradient(x1, 0f, x0, 0f,
                mGradientColor, 0, Shader.TileMode.CLAMP);
!!!7816460.java!!!	onSizeChanged(in w : int, in h : int, in oldw : int, in oldh : int) : void
        super.onSizeChanged(w, h, oldw, oldh);

        if (!mIsSmall) {
            mFrameHeight = h;
        }

        // mFrameStrokeAdjustment is a cludge to prevent the overlay from drawing outside the
        // rounded rect background.
        mForegroundRect.set(mFrameStrokeAdjustment, mFrameStrokeAdjustment,
                w - mFrameStrokeAdjustment, Math.min(h, mFrameHeight) - mFrameStrokeAdjustment);

        mBackgroundRect.set(0, 0, getMeasuredWidth(), Math.min(h, mFrameHeight));
        updateGradient();
        invalidate();
!!!7816588.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        performAppWidgetSizeCallbacksIfNecessary();
!!!7816716.java!!!	performAppWidgetSizeCallbacksIfNecessary() : void
        View content = getContent();
        if (!(content instanceof AppWidgetHostView)) return;

        if (!KeyguardUpdateMonitor.getInstance(mContext).hasBootCompleted()) {
            mPerformAppWidgetSizeUpdateOnBootComplete = true;
            return;
        }

        // TODO: there's no reason to force the AppWidgetHostView to catch duplicate size calls.
        // We can do that even more cheaply here. It's not an issue right now since we're in the
        // system process and hence no binder calls.
        AppWidgetHostView awhv = (AppWidgetHostView) content;
        float density = getResources().getDisplayMetrics().density;

        int width = (int) (content.getMeasuredWidth() / density);
        int height = (int) (content.getMeasuredHeight() / density);
        awhv.updateAppWidgetSize(null, width, height, width, height, true);
!!!7816844.java!!!	setOverScrollAmount(in r : float, inout left : boolean) : void
        if (Float.compare(mOverScrollAmount, r) != 0) {
            mOverScrollAmount = r;
            mForegroundGradient = left ? mLeftToRightGradient : mRightToLeftGradient;
            mForegroundAlpha = (int) Math.round((0.5f * r * 255));

            // We bump up the alpha of the outline to hide the fact that the overlay is drawing
            // over the rounded part of the frame.
            float bgAlpha = Math.min(OUTLINE_ALPHA_MULTIPLIER + r * (1 - OUTLINE_ALPHA_MULTIPLIER),
                    1f);
            setBackgroundAlpha(bgAlpha);
            invalidate();
        }
!!!7816972.java!!!	onActive(inout isActive : boolean) : void
        // hook for subclasses
!!!7817100.java!!!	onUserInteraction(inout event : MotionEvent) : boolean
        // hook for subclasses
        return false;
!!!7817228.java!!!	onBouncerShowing(inout showing : boolean) : void
        // hook for subclasses
!!!7817356.java!!!	setWorkerHandler(inout workerHandler : Handler) : void
        mWorkerHandler = workerHandler;
!!!7817484.java!!!	getWorkerHandler() : Handler
        return mWorkerHandler;
