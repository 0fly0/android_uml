class RsBenchRS
!!!9246604.java!!!	init(inout rs : RenderScriptGL, inout res : Resources, in width : int, in height : int, in loops : int) : void
        mRS = rs;
        mRes = res;
        mWidth = width;
        mHeight = height;
        mMode = 0;
        mLoops = loops;
        mCurrentLoop = 0;
        mBenchmarkDimX = 1280;
        mBenchmarkDimY = 720;
        initRS();
!!!9246732.java!!!	createZeroTerminatedAlloc(inout rs : RenderScript, in str : String, in usage : int) : Allocation
        byte[] allocArray = null;
        try {
            allocArray = str.getBytes("UTF-8");
            byte[] allocArrayZero = new byte[allocArray.length + 1];
            System.arraycopy(allocArray, 0, allocArrayZero, 0, allocArray.length);
            allocArrayZero[allocArrayZero.length - 1] = '\0';
            Allocation alloc = Allocation.createSized(rs, Element.U8(rs),
                                                      allocArrayZero.length, usage);
            alloc.copyFrom(allocArrayZero);
            return alloc;
        }
        catch (Exception e) {
            throw new RSRuntimeException("Could not convert string to utf-8.");
        }

!!!9246860.java!!!	appendTests(inout testSet : RsBenchBaseTest) : void
        ScriptField_TestScripts_s.Item[] newTests = testSet.getTests();
        if (mIndividualTests != null) {
            ScriptField_TestScripts_s.Item[] combined;
            combined = new ScriptField_TestScripts_s.Item[newTests.length + mIndividualTests.length];
            System.arraycopy(mIndividualTests, 0, combined, 0, mIndividualTests.length);
            System.arraycopy(newTests, 0, combined, mIndividualTests.length, newTests.length);
            mIndividualTests = combined;
        } else {
            mIndividualTests = newTests;
        }

        String[] newNames = testSet.getTestNames();
        if (mTestNames != null) {
            String[] combinedNames;
            combinedNames = new String[newNames.length + mTestNames.length];
            System.arraycopy(mTestNames, 0, combinedNames, 0, mTestNames.length);
            System.arraycopy(newNames, 0, combinedNames, mTestNames.length, newNames.length);
            mTestNames = combinedNames;
        } else {
            mTestNames = newNames;
        }
!!!9246988.java!!!	createTestAllocation() : void
        int numTests = mIndividualTests.length;
        mLocalTestResults = new float[numTests];
        ScriptField_TestScripts_s allTests;
        allTests = new ScriptField_TestScripts_s(mRS, numTests);
        for (int i = 0; i < numTests; i ++) {
            allTests.set(mIndividualTests[i], i, false);
        }
        allTests.copyAll();
        mScript.bind_gTestScripts(allTests);
!!!9247116.java!!!	saveTestResults() : void
        String state = Environment.getExternalStorageState();
        if (!Environment.MEDIA_MOUNTED.equals(state)) {
            Log.v(TAG, "sdcard is read only");
            return;
        }
        File sdCard = Environment.getExternalStorageDirectory();
        if (!sdCard.canWrite()) {
            Log.v(TAG, "ssdcard is read only");
            return;
        }

        File resultFile = new File(sdCard, "rsbench_result" + mCurrentLoop + ".csv");
        resultFile.setWritable(true, false);

        try {
            BufferedWriter results = new BufferedWriter(new FileWriter(resultFile));
            for (int i = 0; i < mLocalTestResults.length; i ++) {
                results.write(mTestNames[i] + ", " + mLocalTestResults[i] + ",\n");
            }
            results.close();
            Log.v(TAG, "Saved results in: " + resultFile.getAbsolutePath());
        } catch (IOException e) {
            Log.v(TAG, "Unable to write result file " + e.getMessage());
        }
!!!9247244.java!!!	testIsFinished() : boolean
        synchronized(this) {
            while (true) {
                if (stopTest) {
                    return true;
                } else {
                    try {
                        this.wait(60*1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }
!!!9247372.java!!!	initProgramFragment() : void

        ProgramFragmentFixedFunction.Builder texBuilder = new ProgramFragmentFixedFunction.Builder(mRS);
        texBuilder.setTexture(ProgramFragmentFixedFunction.Builder.EnvMode.REPLACE,
                              ProgramFragmentFixedFunction.Builder.Format.RGBA, 0);
        mProgFragmentTexture = texBuilder.create();
        mProgFragmentTexture.bindSampler(Sampler.CLAMP_LINEAR(mRS), 0);

        ProgramFragmentFixedFunction.Builder colBuilder = new ProgramFragmentFixedFunction.Builder(mRS);
        colBuilder.setVaryingColor(false);
        mProgFragmentColor = colBuilder.create();

        mScript.set_gProgFragmentTexture(mProgFragmentTexture);
!!!9247500.java!!!	initProgramVertex() : void
        ProgramVertexFixedFunction.Builder pvb = new ProgramVertexFixedFunction.Builder(mRS);
        mProgVertex = pvb.create();

        mPVA = new ProgramVertexFixedFunction.Constants(mRS);
        ((ProgramVertexFixedFunction)mProgVertex).bindConstants(mPVA);
        Matrix4f proj = new Matrix4f();
        proj.loadOrthoWindow(mBenchmarkDimX, mBenchmarkDimY);
        mPVA.setProjection(proj);

        mScript.set_gProgVertex(mProgVertex);
!!!9247628.java!!!	strlen(inout array : byte) : int
        int count = 0;
        while(count < array.length && array[count] != 0) {
            count ++;
        }
        return count;
!!!9247756.java!!!	setDebugMode(in num : int) : void
        mScript.invoke_setDebugMode(num);
!!!9247884.java!!!	setBenchmarkMode(in benchNum : int) : void
        mScript.invoke_setBenchmarkMode(benchNum);
!!!9248012.java!!!	pause(inout pause : boolean) : void
        mScript.set_gPauseRendering(pause);
!!!9248140.java!!!	initRS() : void

        mScript = new ScriptC_rsbench(mRS, mRes, R.raw.rsbench);
        mRS.bindRootScript(mScript);

        mRS.setMessageHandler(mRsMessage);

        mScript.set_gMaxLoops(mLoops);

        initProgramVertex();
        initProgramFragment();
        mScript.set_gFontSerif(Font.create(mRS, mRes, "serif", Font.Style.NORMAL, 8));

        Type.Builder b = new Type.Builder(mRS, Element.RGBA_8888(mRS));
        b.setX(mBenchmarkDimX).setY(mBenchmarkDimY);
        Allocation offscreen = Allocation.createTyped(mRS,
                                                      b.create(),
                                                      Allocation.USAGE_GRAPHICS_TEXTURE |
                                                      Allocation.USAGE_GRAPHICS_RENDER_TARGET);
        mScript.set_gRenderBufferColor(offscreen);

        b = new Type.Builder(mRS,
                             Element.createPixel(mRS, DataType.UNSIGNED_16,
                             DataKind.PIXEL_DEPTH));
        b.setX(mBenchmarkDimX).setY(mBenchmarkDimY);
        offscreen = Allocation.createTyped(mRS,
                                           b.create(),
                                           Allocation.USAGE_GRAPHICS_RENDER_TARGET);
        mScript.set_gRenderBufferDepth(offscreen);
        mScript.set_gLinearClamp(Sampler.CLAMP_LINEAR(mRS));

        RsBenchBaseTest test = new TextTest();
        if (test.init(mRS, mRes)) {
            appendTests(test);
        }
        test = new FillTest();
        if (test.init(mRS, mRes)) {
            appendTests(test);
        }
        test = new MeshTest();
        if (test.init(mRS, mRes)) {
            appendTests(test);
        }
        test = new TorusTest();
        if (test.init(mRS, mRes)) {
            appendTests(test);
        }
        test = new UiTest();
        if (test.init(mRS, mRes)) {
            appendTests(test);
        }
        createTestAllocation();

        mScript.set_gLoadComplete(true);
