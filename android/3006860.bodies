class Wrapper
!!!12337548.java!!!	getWrapperInstance() : Wrapper
        if (mWrapperInstance == null) {
            synchronized (Wrapper.class) {
                if (mWrapperInstance == null) {
                    mWrapperInstance = new Wrapper();
                    mWrapperInstance.mTvFramework = TvFramework.getInstance();
                    mWrapperInstance.mTvFramework.isCCInit(); // init CC as early as
                                                              // possible
                }
            }
        }
        return mWrapperInstance;
!!!12337676.java!!!	getContext() : Context
        return mContext;
!!!12337804.java!!!	setContext(inout context : Context) : void
        if (mContext == null) {
            mContext = context;
            mCecManager = new CecManager(context);
            // Initialize mCecProxy here, since he needs context.
            // if(mWrapperInstance.mCecProxy == null) {
            // Log.d(TAG,"mCecProxy is  null");
            // setCecProxy( CecFactory.getCecProxyInstance(mContext),mContext);
            // }
        }
!!!12337932.java!!!	getCecManager() : CecManager
        return mCecManager;
!!!12338060.java!!!	getCurrentSource() : int
        int inputSrcId = TvFramework.getInstance().getLiveTvInstance().getCurrentSource();
        return inputSrcId;
!!!12338188.java!!!	getCurrentSourceType() : int
        int inputSrcId = TvFramework.getInstance().getLiveTvInstance().getCurrentSource();
        return TvFramework.getInstance().getLiveTvInstance().getSourceType(inputSrcId);
!!!12338316.java!!!	getCurrentDeviceId() : String
        final int currSrc = getCurrentSource();
        String deviceId = "";
        for (Map.Entry<String, Object> entry : PairingDevice.DeviceIdSourceMap.entrySet()) {
            if (((TvSource) entry.getValue()).value() == currSrc) {
                deviceId = entry.getKey();
                break;
            }
        }
        if (deviceId == null || deviceId.length() == 0) {
            deviceId = PairingDevice.TUNER_DEVICE_ID;
        }
        return deviceId;
!!!12338444.java!!!	pruneSourceId(in sourceId : int) : int
        if (sourceId == TvSource.TV_SourceAtv.value()) {
            return TvSource.TV_SourceDtv.value();
        } else {
            return sourceId;
        }
!!!12338572.java!!!	getAudioChannelNum(inout isTuner : boolean, inout isDigitalChannel : boolean) : int
        if (isTuner) {
            int nRet = 0;
            AtscSourceTypes source;
            source = isDigitalChannel ?
                    AtscSourceTypes.SOURCE_TYPE_DTV:AtscSourceTypes.SOURCE_TYPE_ATV;
            nRet = mTvFramework.getAudioInstance().getTvServiceAudioProperty(source,
                    AtscAudioProperties.AUDIO_PROP_AUDIO_CHANNEL);
            Log.d(TAG, "getAudioChannelNum: "+nRet);
            return nRet;
        } else {
            int audio_channel = 0;
            AudioInfoUpdate audioInfo = TvFramework.getInstance().getAudioInfo(
                    Utils.getTvRemoteService());
            if (audioInfo != null) {
                audio_channel = audioInfo.getChannels();
            }
            return audio_channel;
        }
!!!12338700.java!!!	getSubwooferChannelNum(inout isTuner : boolean, inout isDigitalChannel : boolean) : int
        if (isTuner) {
            int nRet = 0;
            AtscSourceTypes source;
            source = isDigitalChannel ?
                    AtscSourceTypes.SOURCE_TYPE_DTV:AtscSourceTypes.SOURCE_TYPE_ATV;
            nRet = mTvFramework.getAudioInstance().getTvServiceAudioProperty(source,
                    AtscAudioProperties.AUDIO_PROP_LFE_CHANNEL);
            Log.d(TAG, "getSubwooferChannelNum: "+nRet);
            return nRet;
        } else {
            int audio_lfechannel = 0;
            AudioInfoUpdate audioInfo = TvFramework.getInstance().getAudioInfo(
                    Utils.getTvRemoteService());
            if (audioInfo != null) {
                if (audioInfo.getLfeMode() == TvAudioLFEMode.TV_AUDIO_LFE_OFF.value()) {
                    audio_lfechannel = 0;
                } else if (audioInfo.getLfeMode() == TvAudioLFEMode.TV_AUDIO_LFE_ON.value()) {
                    audio_lfechannel = 1;
                }
            }
            return audio_lfechannel;
        }
!!!12338828.java!!!	getDualMono(inout isTuner : boolean, inout isDigitalChannel : boolean) : boolean
        if (isTuner) {
            int nRet = 0;
            AtscSourceTypes source;
            source = isDigitalChannel ?
                    AtscSourceTypes.SOURCE_TYPE_DTV:AtscSourceTypes.SOURCE_TYPE_ATV;
            nRet = mTvFramework.getAudioInstance().getTvServiceAudioProperty(source,
                    AtscAudioProperties.AUDIO_PROP_DUAL_MONO);
            Log.d(TAG, "getDualMono: "+nRet);
            return nRet==1;
        } else {
            boolean dualmono = false;
            AudioInfoUpdate audioInfo = TvFramework.getInstance().getAudioInfo(
                    Utils.getTvRemoteService());
            if (audioInfo != null
                    && audioInfo.getLfeMode() == TvAudioLFEMode.TV_AUDIO_LFE_DUAL.value()) {
                dualmono = true;
            }
            return dualmono;
        }
!!!12338956.java!!!	getAudioStreamFormat(inout isTuner : boolean, inout isDigitalChannel : boolean) : int
        if (isTuner) {
            int nRet = 0;
            int liveTvAudio = 0;
            AtscSourceTypes source;
            source = isDigitalChannel ?
                    AtscSourceTypes.SOURCE_TYPE_DTV:AtscSourceTypes.SOURCE_TYPE_ATV;
            liveTvAudio = mTvFramework.getAudioInstance().getTvServiceAudioProperty(source,
                    AtscAudioProperties.AUDIO_PROP_FORMAT);
            Log.d(TAG, "getAudioStreamFormat: " + liveTvAudio);

            if (AtscAudioFormat.AUDIO_FORMAT_AC3.ordinal() == liveTvAudio) {
                nRet = TvAudioFormat.TV_AUDIO_FORMAT_DD_AC3.value();
            } else if (AtscAudioFormat.AUDIO_FORMAT_DCV.ordinal() == liveTvAudio) {
                nRet = TvAudioFormat.TV_AUDIO_FORMAT_DD_DCV.value();
            } else if (AtscAudioFormat.AUDIO_FORMAT_DDP.ordinal() == liveTvAudio) {
                nRet = TvAudioFormat.TV_AUDIO_FORMAT_DD_PLUS.value();
            } else if (AtscAudioFormat.AUDIO_FORMAT_DTS.ordinal() == liveTvAudio) {
                nRet = TvAudioFormat.TV_AUDIO_FORMAT_DTS.value();
            } else if (AtscAudioFormat.AUDIO_FORMAT_PCM.ordinal() == liveTvAudio) {
                nRet = TvAudioFormat.TV_AUDIO_FORMAT_RAW_PCM.value();
            }

            return nRet;
        } else {
            int audio_stream_format = 0;
            AudioInfoUpdate audioInfo = TvFramework.getInstance().getAudioInfo(
                    Utils.getTvRemoteService());
            if (audioInfo != null) {
                audio_stream_format = audioInfo.getStreamFormat();
            }
            return audio_stream_format;
        }
!!!12339084.java!!!	getTunerMode() : int
        InputSourceType inputSourceType = mTvFramework.getTunerInstance().getTunerMode(mContext);
        if (inputSourceType == InputSourceType.ATSC_INPUT) {
            return 0;
        } else {
            return 1;
        }
!!!12339212.java!!!	setTunerMode(in val : int) : void
        InputSourceType inputSourceType = InputSourceType.ATSC_INPUT;
        if (val == 1) {
            inputSourceType = InputSourceType.CABLE_INPUT;
        }
        // Setting the Closed caption to Off to avoid residue on the screen
        pauseCC();
        mTvFramework.getTunerInstance().setTunerMode(inputSourceType, mContext);

        updateChanneListToGTVDb(2000);
!!!12339340.java!!!	updateChanneListToGTVDb(in delay : int) : void
        if (mChannelListShellRunnable != null) {
            cancelNonUiRunnable(mChannelListShellRunnable);
        }
        // database update takes time
        mChannelListShellRunnable = runInNonUiNewThread(mUpdateChannelListRunnable, delay);
!!!12339468.java!!!	getChannelSurfingMode() : int
        return mTvDatabase.getIntValue(mContext, "channelSurfingMode", 1);
!!!12339596.java!!!	isSameChannel(inout ch1 : ChannelDetails, inout ch2 : ChannelDetails) : boolean
        if (ch1 != null && ch2 != null) {
            boolean sameName = !TextUtils.isEmpty(ch1.getChannelName())
                    && ch1.getChannelName().equals(ch2.getChannelName());
            boolean sameNumber = (ch1.getMajorNo() == ch2.getMajorNo()
                    && ch1.getMinorNo() == ch2.getMinorNo());
            boolean sameServiceId = (ch1.getServiceId() != null && ch2.getServiceId() != null
                    && ch1.getServiceId().getServiceRec() == ch2.getServiceId().getServiceRec());
            if ((sameName || sameNumber) && sameServiceId)
                return true;
        }
        return false;
!!!12339724.java!!!	isSameChannel(inout ch1 : ChannelDetails, inout ch2 : Channel) : boolean
        if (ch1 != null && ch2 != null) {
            boolean sameName = !TextUtils.isEmpty(ch1.getChannelName())
                    && ch1.getChannelName().equals(ch2.getName());
            boolean sameNumber = (ch1.getMajorNo() == ch2.getChannelNumber().getMajor()
                    && ch1.getMinorNo() == ch2.getChannelNumber().getMinor());
            if (sameName || sameNumber)
                return true;
        }
        return false;

!!!12339852.java!!!	allowChannelUpDown() : boolean
        List<Channel> channels = getEnabledChannels();
        int size = (channels != null) ? channels.size() : 0;
        if (size > 1) {
            return true;
        } else if (size == 1) {
            ChannelDetails currChannelDetails = mTvFramework.getLiveTvInstance()
                    .getCurrentChannelDetail();
            Channel ch = channels.get(0);
            // If the current channel is the only enabled channel, don't allow ch up/dn
            if (isSameChannel(currChannelDetails, ch))
                return false;
            else
                return true;
        }

        return false;
!!!12339980.java!!!	doChannelOperation(in context : Context, in type : int) : void
        Log.d(TAG, "doChannelOperation type= " + type);
        boolean channelSurfingMode =
                (Wrapper.getWrapperInstance().getChannelSurfingMode() != 0);
        if (!channelSurfingMode || !mHandler.hasMessages(CHANNEL_UPDOWN_MESSAGEID)) {
            // To Remove lock screen
            PCUtility.removeChannelLockScreen(context);

            if (channelSurfingMode)
                mHandler.sendMessageDelayed(mHandler.obtainMessage(CHANNEL_UPDOWN_MESSAGEID),
                        CHANNEL_UPDOWN_INTERVAL);

            mHandler.post(new Runnable() {
                @Override
                public void run() {
                    switch (type) {
                        case CHANNEL_UP_TYPE:
                            TvFramework.getInstance().getLiveTvInstance().channelUp();
                            break;
                        case CHANNEL_DOWN_TYPE:
                            TvFramework.getInstance().getLiveTvInstance().channelDown();
                            break;
                        case CHANNEL_RECALL_TYPE:
                            TvFramework.getInstance().getLiveTvInstance().recallLastChannel();
                            break;
                    }
                }
            });

        }
!!!12340108.java!!!	doChannelUp(in context : Context) : void
        Log.d(TAG, "doChannelUp() ");
        doChannelOperation(context, CHANNEL_UP_TYPE);
!!!12340236.java!!!	doChannelDown(in context : Context) : void
        Log.d(TAG, "doChannelDown() ");
        doChannelOperation(context, CHANNEL_DOWN_TYPE);
!!!12340364.java!!!	doChannelRecall(in context : Context) : void
        Log.d(TAG, "doChannelRecall() ");
        doChannelOperation(context, CHANNEL_RECALL_TYPE);
!!!12340492.java!!!	updateChannelSkipStatus(in uri : String, inout enabled : boolean) : void
        ChannelStreamInfo streamInfo = new ChannelStreamInfo(PairingDevice.TUNER_DEVICE_ID,
                Uri.parse(uri));
        LiveTv gLive = TvFramework.getInstance().getLiveTvInstance();
        Log.d(TAG, "updateChannelSkipStatus uri=" + uri);
        USDTVServiceData serviceData = gLive.getServiceDetailsById(streamInfo.getServiceId());
        if (serviceData != null) {
            int serviceFlag = serviceData.getServiceFlag();
            if (enabled) {
                serviceFlag = serviceFlag & ~ServiceModificationFlags.Skip_Flag;
            } else {
                serviceFlag = serviceFlag | ServiceModificationFlags.Skip_Flag;
            }
            if (serviceFlag != serviceData.getServiceFlag()) {
                Log.d(TAG, "updateChannelSkipStatus uri=" + uri
                        + " enabled=" + enabled + " serviceFlag=" + serviceFlag);
                gLive.modifyService(streamInfo.getServiceId(), serviceFlag);
            }
        }
!!!12340620.java!!!	setInChannelScan(inout scan : boolean) : void
        mInChannelScan = scan;
!!!12340748.java!!!	getInChannelScan() : boolean
        return mInChannelScan;
!!!12341644.java!!!	startLoadChannels() : void
        new MyLoadChannelListTask(mContext, PairingDevice.TUNER_DEVICE_ID).execute();
!!!12341772.java!!!	getEnabledChannels() : Channel
        if (mEnabledChannels == null) {
            startLoadChannels();
        }
        return mEnabledChannels;
!!!12341900.java!!!	pauseCC() : void
        Log.d(TAG, "pauseCC");
        // CC Off is performed only if CC Init is done
        // This is to avoid unnecessary platform calls, when CC is not in use
        if (mTvFramework.isCCInit() && getCCStatus()) {
            mTvFramework.getCaptionInstance().setCCStatus(false);
        }
!!!12342028.java!!!	resumeCC() : void
        Log.d(TAG, "resumeCC");
        // CC ON is performed only if CC Init is done
        // This is to avoid unnecessary platform calls, when CC is not in use
        if (mTvFramework.isCCInit() && getCCStatus()) {
            mTvFramework.getCaptionInstance().setCCStatus(true);
        }
!!!12342156.java!!!	getClosedCaptions() : int
        // int closedCaptions = 0;
        /*
         * if (mPrefs != null) { ClosedCaptions =
         * mPrefs.getInt("ClosedCaptions", 0); }
         */

        CCDisplayMode mode = mTvFramework.getCaptionInstance().getCCMode();
        // Log.d(TAG,"getCloseCaption mode ="+ mode);
        return mode.ordinal();
!!!12342284.java!!!	getCCStatus() : boolean
        int cc = getClosedCaptions();
        boolean ccOn = false;
        if (cc == CCDisplayMode.CC_DISPLAY_ON.ordinal())
            ccOn = true;
        else if (cc == CCDisplayMode.CC_DISPLAY_ON_WHEN_MUTE.ordinal()) {
            boolean mute = Utils.isSystemMute(mContext);
            ccOn = mute;
        }
        return ccOn;
!!!12342412.java!!!	updateCCStatusByMute(inout bMute : boolean) : void
        Log.i(TAG, "UpdateCCMuteStatus mute =" + bMute);
        Caption cc = TvFramework.getInstance().getCaptionInstance();
        if ((cc != null) && (cc.getCCMode() == CCDisplayMode.CC_DISPLAY_ON_WHEN_MUTE))
        {
            cc.setCCStatus(bMute);
        }
!!!12342540.java!!!	getHdmiCec() : int
        int enabled = 0;
        if (mCecManager != null) {
            enabled = mCecManager.isCECEnabled() == true ? 1 : 0;
        }
        return enabled;
!!!12342668.java!!!	setHdmiCec(in state : int) : void
        long updateMillis = SystemClock.uptimeMillis();
        if ((updateMillis - CecSettingMillis) >= 1000) {
            if (mCecManager != null) {
                if (state == 1) {
                    Log.d(TAG, "setHdmiCec call enableCEC");
                    mCecManager.enableCEC();
                    if (getTvAutoPowerOn() == 1) {
                        // Notify SM to recover TvAutoPowerOn setting
                        mCecManager.enableTVAutoPowerOn();
                    }
                } else {
                    Log.d(TAG, "setHdmiCec call disableCEC");
                    mCecManager.disableCEC();
                    // Notify SM to disable TvAutoPowerOn setting
                    mCecManager.disableTVAutoPowerOn();
                }
            }
            CecSettingMillis = updateMillis;
        } else {
            Log.w(TAG, "Operation is too quick, ignore it.");
        }
!!!12342796.java!!!	getDeviceAutoPowerOff() : int
        int enabled = 0;
        if (mCecManager != null) {
            enabled = mCecManager.isDeviceAutoPowerOffEnabled() == true ? 1 : 0;
        }
        else {
            Log.d(TAG, "getDeviceAutoPowerOff mCecPrefs is null.");
        }
        return enabled;
!!!12342924.java!!!	setDeviceAutoPowerOff(in state : int) : void
        if (mCecManager != null) {
            if (state == 1) {
                Log.d(TAG, "setDeviceAutoPowerOff enableDeviceAutoPowerOff");
                mCecManager.enableDeviceAutoPowerOff();
            } else if (state == 0) {
                Log.d(TAG, "setDeviceAutoPowerOff disableDeviceAutoPowerOff");
                mCecManager.disableDeviceAutoPowerOff();
            }
        }
!!!12343052.java!!!	getTvAutoPowerOn() : int
        int enabled = 0;
        if (mCecManager != null) {
            enabled = mCecManager.isTVAutoPowerOnEnabled() == true ? 1 : 0;
        }
        return enabled;
!!!12343180.java!!!	setTvAutoPowerOn(in state : int) : void
        if (mCecManager != null) {
            if (state == 1) {
                Log.d(TAG, "setTvAutoPowerOn call enableTVAutoPowerOn");
                mCecManager.enableTVAutoPowerOn();
            } else {
                Log.d(TAG, "setTvAutoPowerOn call disableTVAutoPowerOn");
                mCecManager.disableTVAutoPowerOn();
            }
        }
!!!12343308.java!!!	getSystemAudioControl() : int
        int enabled = 0;
        if (mCecManager != null) {
            Log.d(TAG, "getSystemAudioControl call isSACEnabled");
            enabled = ((mCecManager.isSystemAudioModeEnabled() == true) ? 1 : 0);
        }
        return enabled;
!!!12343436.java!!!	setSystemAudioControl(in state : int) : void
        long updateMillis = SystemClock.uptimeMillis();

        if ((mCecManager != null) && (updateMillis - sacSettingMillis) >= 1500) {
            if (state == 1) {
                Log.d(TAG, "setSystemAudioControl call enableSystemAudioMode");
                mCecManager.enableSystemAudioMode();
            } else {
                Log.d(TAG, "setSystemAudioControl call disableSystemAudioMode");
                mCecManager.disableSystemAudioMode();
            }
            sacSettingMillis = updateMillis;
        } else {
            Log.w(TAG, "Operation is too quick, ignore it.");
        }
!!!12343564.java!!!	setTvSpeakerMute(in mute : int) : void
        mTvFramework.getAudioInstance().setAudioProperty(getCurrentSource(),
                TvAudioProperty.TV_AUDIO_CecMute, mute);
!!!12343692.java!!!	setAutoPowerOff(in value : int) : void
        if (mTvDatabase.getIntValue(mContext, "autoPowerOff", 0) != value) {
            mTvDatabase.setIntValue(mContext, "autoPowerOff", value);
        }

        //int fourhour = 4 * 60;
        //Utils.startAutoPowerOffTimer(mContext, (value != 0) ? fourhour * Utils.ONE_MINUTE : 0);
!!!12343820.java!!!	getAutoPowerOff() : int
        return mTvDatabase.getIntValue(mContext, "autoPowerOff", 0);
!!!12343948.java!!!	setNoSignalTimer(in value : int) : void
        if (mTvDatabase.getIntValue(mContext, "noSignalTimer", 0) != value) {
            mTvDatabase.setIntValue(mContext, "noSignalTimer", value);
        }

        Utils.startNoSignalTimer(mContext, value * Utils.ONE_MINUTE);
!!!12344076.java!!!	getNoSignalTimer() : int
        return mTvDatabase.getIntValue(mContext, "noSignalTimer", 0);
!!!12344204.java!!!	allowRatingOrCaption() : boolean
        boolean ret = false;
        int srcType = getCurrentSourceType();
        if (srcType == TvSourceType.TV_SOURCE_TypeAtv.value()
                || srcType == TvSourceType.TV_SOURCE_TypeDtv.value()
                || srcType == TvSourceType.TV_SOURCE_TypeCvbs.value()) {
            ret = true;
        } else if (srcType == TvSourceType.TV_SOURCE_TypeComponent.value()) {
            /* for Component input, only SD(480i) is supported Rating or CC */
            VideoInfoUpdate videoInfo = TvFramework.getInstance().getVideoInfo(
                    Utils.getTvRemoteService());
            if (videoInfo != null && videoInfo.getActiveHeight() <= 480
                    && videoInfo.getIsInterlaced() == 1) {
                ret = true;
            }
        }
        return ret;
!!!12344332.java!!!	isDigitalChannel() : boolean
        if (isTunerInput()) {
            LiveTv liveTv = TvFramework.getInstance().getLiveTvInstance();
            USDTVServiceData currentChannel = liveTv.getCurrentService();
            if (currentChannel != null
                    && currentChannel.getServiceType()
                        == ChannelType.DIGITAL_TELEVISION.ordinal()) {
                return true;
            }
        }
        return false;
!!!12344460.java!!!	isTunerInput() : boolean
        int currSrc = getCurrentSource();
        if (currSrc == TvSource.TV_SourceAtv.value()
                || currSrc == TvSource.TV_SourceDtv.value()) {
            return true;
        } else {
            return false;
        }
!!!12344588.java!!!	isAnalogVideoInput() : boolean
        int srcType = getCurrentSourceType();
        if (srcType == TvSourceType.TV_SOURCE_TypeComponent.value()
                || srcType == TvSourceType.TV_SOURCE_TypeCvbs.value()
                || srcType == TvSourceType.TV_SOURCE_TypeHdmi.value()
                || srcType == TvSourceType.TV_SOURCE_TypeVga.value()) {
            return true;
        } else {
            return false;
        }
!!!12344716.java!!!	isAnalogVideoInput(in srcId : int) : boolean
        int srcType = TvFramework.getInstance().getLiveTvInstance().getSourceType(srcId);
        if (srcType == TvSourceType.TV_SOURCE_TypeComponent.value()
                || srcType == TvSourceType.TV_SOURCE_TypeCvbs.value()
                || srcType == TvSourceType.TV_SOURCE_TypeHdmi.value()
                || srcType == TvSourceType.TV_SOURCE_TypeVga.value()) {
            return true;
        } else {
            return false;
        }
!!!12344844.java!!!	isStreamInput() : boolean
        int srcType = getCurrentSourceType();
        if (srcType == TvSourceType.TV_SOURCE_TypeStream.value()) {
            return true;
        } else {
            return false;
        }
!!!12344972.java!!!	getSourceConnectStatus(in sourceId : int) : int
       return mTvFramework.getPictureInstance().getVideoProperty(sourceId,
               TvPictureProperty.TV_PICTURE_ConnectStatus);
!!!12345100.java!!!	getSourceLockStatus(in sourceId : int) : int
       return mTvFramework.getPictureInstance().getVideoProperty(sourceId,
               TvPictureProperty.TV_PICTURE_LockStatus);
!!!12345228.java!!!	runInNonUiThread(inout runnable : Runnable, in delay : int) : void
        Handler handler = USDTVMessageQueue.getMsgQueueHandler();
        handler.removeCallbacks(runnable);
        if (delay != 0)
            handler.postDelayed(runnable, delay);
        else
            handler.post(runnable);
!!!12345356.java!!!	runInNonUiNewThread(in runnable : Runnable, in delay : int) : Runnable
        Runnable shellRunnable = new Runnable() {
            @Override
            public void run() {
                new Thread(runnable).start();
            }
        };
        runInNonUiThread(shellRunnable, delay);
        return shellRunnable;
!!!12345484.java!!!	cancelNonUiRunnable(inout runnable : Runnable) : void
        Handler handler = USDTVMessageQueue.getMsgQueueHandler();
        handler.removeCallbacks(runnable);
!!!12345612.java!!!	isEASEnabled() : boolean
        // @TODO
        return false;
!!!12345740.java!!!	getInputDetect() : int
        return mTvDatabase.getIntValue(mContext, KEY_INPUT_DETECT, 0);
!!!12345868.java!!!	getAgingMode() : int
        int agingMode[] = new int[1];
        FactorySettingJNIWrapper.getInstance().GetSysControl(SystemProperty
                .MV_FS_CTRL_VIDEO_AGING_MODE.ordinal(), agingMode);
        Log.d(TAG, "getAgingModeagingMode=" + agingMode[0]);
        return agingMode[0];

!!!12345996.java!!!	checkResolutionNotificationArray() : void
        if (mResolutionNotification == null) {
            mResolutionNotification = new boolean[TvSource.values().length];

            // modify this default list for customization
            mResolutionNotification[TvSource.TV_SourceAtv.value()] = true;
            mResolutionNotification[TvSource.TV_SourceDtv.value()] = true;
            mResolutionNotification[TvSource.TV_SourceTv.value()] = true;
            mResolutionNotification[TvSource.TV_SourceHdmi0.value()] = false;
            mResolutionNotification[TvSource.TV_SourceHdmi1.value()] = false;
            mResolutionNotification[TvSource.TV_SourceHdmi2.value()] = false;
            mResolutionNotification[TvSource.TV_SourceHdmi3.value()] = false;
            mResolutionNotification[TvSource.TV_SourceCvbs0.value()] = true;
            mResolutionNotification[TvSource.TV_SourceCvbs1.value()] = true;
            mResolutionNotification[TvSource.TV_SourceComponent.value()] = false;
            mResolutionNotification[TvSource.TV_SourceVga.value()] = true;
        }
!!!12346124.java!!!	setResolutionNotification(in sourceId : int, inout enable : boolean) : void
        checkResolutionNotificationArray();
        mResolutionNotification[sourceId] = enable;
!!!12346252.java!!!	getResolutionNotification(in sourceId : int) : boolean
        checkResolutionNotificationArray();
        return mResolutionNotification[sourceId];
