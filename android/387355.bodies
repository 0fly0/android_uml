class OldByteArrayInputStreamTest
!!!2643355.java!!!	test_Constructor$B() : void
        // Test for method java.io.ByteArrayInputStream(byte [])

        java.io.InputStream bis = new java.io.ByteArrayInputStream(fileString
                .getBytes());

        try {
            assertTrue("Unable to create ByteArrayInputStream",
                    bis.available() == fileString.length());
        } catch (Exception e) {
            System.out.println("Exception during Constructor test");
        }
!!!2643483.java!!!	test_Constructor$BII() : void
        // Test for method java.io.ByteArrayInputStream(byte [], int, int)

        byte[] zz = fileString.getBytes();
        java.io.InputStream bis = new java.io.ByteArrayInputStream(zz, 0, 100);

        try {
            assertEquals("Unable to create ByteArrayInputStream",
                    100, bis.available());
        } catch (Exception e) {
            fail("Exception during Constructor test");
        }

        // Regression test for Harmony-2405
        new SubByteArrayInputStream(new byte[] { 1, 2 }, 444, 13);
        assertEquals(444, SubByteArrayInputStream.pos);
        assertEquals(444, SubByteArrayInputStream.mark);
        assertEquals(2, SubByteArrayInputStream.count);
!!!2643739.java!!!	test_available() : void
        // Test for method int java.io.ByteArrayInputStream.available()
        try {
            assertTrue("Returned incorrect number of available bytes", is
                    .available() == fileString.length());
        } catch (Exception e) {
            fail("Exception during available test");
        }
!!!2643867.java!!!	test_close() : void
        is.read();
        try {
            is.close();
        } catch (java.io.IOException e) {
            fail("Test 1: Failed to close the input stream.");
        }
        try {
            is.read();
        } catch (Exception e) {
            fail("Test 2: Should be able to read from closed stream.");
        }
!!!2643995.java!!!	test_markI() : void
        // Test for method void java.io.ByteArrayInputStream.mark(int)
        byte[] buf1 = new byte[100];
        byte[] buf2 = new byte[100];
        try {
            is.skip(3000);
            is.mark(1000);
            is.read(buf1, 0, buf1.length);
            is.reset();
            is.read(buf2, 0, buf2.length);
            is.reset();
            assertTrue("Failed to mark correct position", new String(buf1, 0,
                    buf1.length).equals(new String(buf2, 0, buf2.length)));

        } catch (Exception e) {
            fail("Exception during mark test");
        }

!!!2644123.java!!!	test_markSupported() : void
        // Test for method boolean java.io.ByteArrayInputStream.markSupported()
        assertTrue("markSupported returned incorrect value", is.markSupported());
!!!2644251.java!!!	test_read() : void
        // Test for method int java.io.ByteArrayInputStream.read()
        try {

            int c = is.read();
            is.reset();
            assertTrue("read returned incorrect char", c == fileString
                    .charAt(0));
        } catch (Exception e) {
            fail("Exception during read test");
        }
!!!2644379.java!!!	test_read$BII() : void
        byte[] buf1 = new byte[20];
        is.skip(50);
        is.mark(100);
        is.read(buf1, 0, buf1.length);
        assertTrue("Test 1: Failed to read correct data.",
                new String(buf1, 0, buf1.length).equals(
                        fileString.substring(50, 70)));

        // Illegal argument checks.
        try {
            is.read(null, 1, 0);
            fail("Test 2: NullPointerException expected.");
        } catch (NullPointerException e) {
            // Expected.
        }

        try {
            is.read(buf1 , -1, 1);
            fail("Test 3: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            is.read(buf1 , 1, -1);
            fail("Test 4: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            is.read(buf1, 1, buf1.length);
            fail("Test 5: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }
!!!2644507.java!!!	test_reset() : void
        // Test for method void java.io.ByteArrayInputStream.reset()
        byte[] buf1 = new byte[10];
        byte[] buf2 = new byte[10];
        try {
            is.mark(200);
            is.read(buf1, 0, 10);
            is.reset();
            is.read(buf2, 0, 10);
            is.reset();
            assertTrue("Reset failed", new String(buf1, 0, buf1.length)
                    .equals(new String(buf2, 0, buf2.length)));
        } catch (Exception e) {
            fail("Exception during reset test : " + e.getMessage());
        }
!!!2644635.java!!!	test_skipJ() : void
        // Test for method long java.io.ByteArrayInputStream.skip(long)
        byte[] buf1 = new byte[10];
        try {
            is.skip(100);
            is.read(buf1, 0, buf1.length);
            assertTrue("Failed to skip to correct position", new String(buf1,
                    0, buf1.length).equals(fileString.substring(100, 110)));
        } catch (Exception e) {
            fail("Exception during skip test : " + e.getMessage());
        }
!!!2644763.java!!!	setUp() : void
        is = new ByteArrayInputStream(fileString.getBytes());

!!!2644891.java!!!	tearDown() : void
        try {
            is.close();
        } catch (Exception e) {
        }
