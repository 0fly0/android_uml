class AudioHardwareGeneric
!!!10056076.cpp!!!	AudioHardwareGeneric()
    mFd = ::open(kAudioDeviceName, O_RDWR);
!!!10056204.cpp!!!	~AudioHardwareGeneric()
    if (mFd >= 0) ::close(mFd);
    closeOutputStream((AudioStreamOut *)mOutput);
    closeInputStream((AudioStreamIn *)mInput);
!!!10056332.cpp!!!	initCheck() : status_t
    if (mFd >= 0) {
        if (::access(kAudioDeviceName, O_RDWR) == NO_ERROR)
            return NO_ERROR;
    }
    return NO_INIT;
!!!10056460.cpp!!!	setVoiceVolume(in v : float) : status_t
    // Implement: set voice volume
    return NO_ERROR;
!!!10056588.cpp!!!	setMasterVolume(in v : float) : status_t
    // Implement: set master volume
    // return error - software mixer will handle it
    return INVALID_OPERATION;
!!!10056716.cpp!!!	setMicMute(in state : bool) : status_t
    mMicMute = state;
    return NO_ERROR;
!!!10056844.cpp!!!	getMicMute(inout state : bool) : status_t
    *state = mMicMute;
    return NO_ERROR;
!!!10056972.cpp!!!	openOutputStream(in devices : uint32_t, inout format : int = 0, inout channels : uint32_t = 0, inout sampleRate : uint32_t = 0, inout status : status_t = 0) : AudioStreamOut
    AutoMutex lock(mLock);

    // only one output stream allowed
    if (mOutput) {
        if (status) {
            *status = INVALID_OPERATION;
        }
        return 0;
    }

    // create new output stream
    AudioStreamOutGeneric* out = new AudioStreamOutGeneric();
    status_t lStatus = out->set(this, mFd, devices, format, channels, sampleRate);
    if (status) {
        *status = lStatus;
    }
    if (lStatus == NO_ERROR) {
        mOutput = out;
    } else {
        delete out;
    }
    return mOutput;
!!!10057100.cpp!!!	closeOutputStream(inout out : AudioStreamOut) : void
    if (mOutput && out == mOutput) {
        delete mOutput;
        mOutput = 0;
    }
!!!10057228.cpp!!!	openInputStream(in devices : uint32_t, inout format : int, inout channels : uint32_t, inout sampleRate : uint32_t, inout status : status_t, in acoustics : audio_in_acoustics) : AudioStreamIn
    // check for valid input source
    if (!AudioSystem::isInputDevice((AudioSystem::audio_devices)devices)) {
        return 0;
    }

    AutoMutex lock(mLock);

    // only one input stream allowed
    if (mInput) {
        if (status) {
            *status = INVALID_OPERATION;
        }
        return 0;
    }

    // create new output stream
    AudioStreamInGeneric* in = new AudioStreamInGeneric();
    status_t lStatus = in->set(this, mFd, devices, format, channels, sampleRate, acoustics);
    if (status) {
        *status = lStatus;
    }
    if (lStatus == NO_ERROR) {
        mInput = in;
    } else {
        delete in;
    }
    return mInput;
!!!10057356.cpp!!!	closeInputStream(inout in : AudioStreamIn) : void
    if (mInput && in == mInput) {
        delete mInput;
        mInput = 0;
    }
!!!10057740.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    dumpInternals(fd, args);
    if (mInput) {
        mInput->dump(fd, args);
    }
    if (mOutput) {
        mOutput->dump(fd, args);
    }
    return NO_ERROR;
!!!10057868.cpp!!!	dumpInternals(in fd : int, in args : Vector<String16>) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;
    result.append("AudioHardwareGeneric::dumpInternals\n");
    snprintf(buffer, SIZE, "\tmFd: %d mMicMute: %s\n",  mFd, mMicMute? "true": "false");
    result.append(buffer);
    ::write(fd, result.string(), result.size());
    return NO_ERROR;
