class WhitelistDictionary
!!!12869900.java!!!	WhitelistDictionary(in context : Context, in locale : Locale)
        super(context, Suggest.DIC_WHITELIST);
        // TODO: Move whitelist dictionary into main dictionary.
        final RunInLocale<Void> job = new RunInLocale<Void>() {
            @Override
            protected Void job(Resources res) {
                initWordlist(res.getStringArray(R.array.wordlist_whitelist));
                return null;
            }
        };
        job.runInLocale(context.getResources(), locale);
!!!12870028.java!!!	initWordlist(inout wordlist : String) : void
        mWhitelistWords.clear();
        final int N = wordlist.length;
        if (N % 3 != 0) {
            if (DBG) {
                Log.d(TAG, "The number of the whitelist is invalid.");
            }
            return;
        }
        try {
            for (int i = 0; i < N; i += 3) {
                final int score = Integer.valueOf(wordlist[i]);
                final String before = wordlist[i + 1];
                final String after = wordlist[i + 2];
                if (before != null && after != null) {
                    mWhitelistWords.put(
                            before.toLowerCase(), new Pair<Integer, String>(score, after));
                    addWord(after, null /* shortcut */, score);
                }
            }
        } catch (NumberFormatException e) {
            if (DBG) {
                Log.d(TAG, "The score of the word is invalid.");
            }
        }
!!!12870156.java!!!	getWhitelistedWord(in before : String) : String
        if (before == null) return null;
        final String lowerCaseBefore = before.toLowerCase();
        if(mWhitelistWords.containsKey(lowerCaseBefore)) {
            if (DBG) {
                Log.d(TAG, "--- found whitelistedWord: " + lowerCaseBefore);
            }
            return mWhitelistWords.get(lowerCaseBefore).second;
        }
        return null;
!!!12870284.java!!!	shouldForciblyAutoCorrectFrom(inout word : CharSequence) : boolean
        if (TextUtils.isEmpty(word)) return false;
        final String correction = getWhitelistedWord(word.toString());
        if (TextUtils.isEmpty(correction)) return false;
        return !correction.equals(word);
