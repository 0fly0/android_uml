class Form22t
!!!14960396.java!!!	Form22t()
        // This space intentionally left blank.
!!!14960524.java!!!	insnArgString(inout insn : DalvInsn) : String
        RegisterSpecList regs = insn.getRegisters();
        return regs.get(0).regString() + ", " + regs.get(1).regString() +
            ", " + branchString(insn);
!!!14960652.java!!!	insnCommentString(inout insn : DalvInsn, inout noteIndices : boolean) : String
        return branchComment(insn);
!!!14960780.java!!!	codeSize() : int
        return 2;
!!!14960908.java!!!	isCompatible(inout insn : DalvInsn) : boolean
        RegisterSpecList regs = insn.getRegisters();

        if (!((insn instanceof TargetInsn) &&
              (regs.size() == 2) &&
              unsignedFitsInNibble(regs.get(0).getReg()) &&
              unsignedFitsInNibble(regs.get(1).getReg()))) {
            return false;
        }

        TargetInsn ti = (TargetInsn) insn;
        return ti.hasTargetOffset() ? branchFits(ti) : true;
!!!14961036.java!!!	compatibleRegs(inout insn : DalvInsn) : BitSet
        RegisterSpecList regs = insn.getRegisters();
        BitSet bits = new BitSet(2);

        bits.set(0, unsignedFitsInNibble(regs.get(0).getReg()));
        bits.set(1, unsignedFitsInNibble(regs.get(1).getReg()));
        return bits;
!!!14961164.java!!!	branchFits(inout insn : TargetInsn) : boolean
        int offset = insn.getTargetOffset();

        // Note: A zero offset would fit, but it is prohibited by the spec.
        return (offset != 0) && signedFitsInShort(offset);
!!!14961292.java!!!	writeTo(inout out : AnnotatedOutput, inout insn : DalvInsn) : void
        RegisterSpecList regs = insn.getRegisters();
        int offset = ((TargetInsn) insn).getTargetOffset();

        write(out,
              opcodeUnit(insn,
                         makeByte(regs.get(0).getReg(), regs.get(1).getReg())),
              (short) offset);
