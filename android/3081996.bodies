class UserHistoryForgettingCurveUtils
!!!12861708.java!!!	UserHistoryForgettingCurveUtils()
        // This utility class is not publicly instantiable.
!!!12863116.java!!!	fcToElapsedTime(in fc : byte) : int
        return fc & 0x0F;
!!!12863244.java!!!	fcToCount(in fc : byte) : int
        return (fc >> 4) & 0x03;
!!!12863372.java!!!	fcToLevel(in fc : byte) : int
        return (fc >> 6) & 0x03;
!!!12863500.java!!!	calcFreq(in elapsedTime : int, in count : int, in level : int) : int
        if (level <= 0) {
            // Reserved words, just return -1
            return -1;
        }
        if (count == COUNT_MAX) {
            // Temporary promote because it's frequently typed recently
            ++level;
        }
        final int et = Math.min(FC_FREQ_MAX, Math.max(0, elapsedTime));
        final int l = Math.min(FC_LEVEL_MAX, Math.max(0, level));
        return MathUtils.SCORE_TABLE[l - 1][et];
!!!12863628.java!!!	calcFc(in elapsedTime : int, in count : int, in level : int) : byte
        final int et = Math.min(FC_FREQ_MAX, Math.max(0, elapsedTime));
        final int c = Math.min(COUNT_MAX, Math.max(0, count));
        final int l = Math.min(FC_LEVEL_MAX, Math.max(0, level));
        return (byte)(et | (c << 4) | (l << 6));
!!!12863756.java!!!	fcToFreq(in fc : byte) : int
        final int elapsedTime = fcToElapsedTime(fc);
        final int count = fcToCount(fc);
        final int level = fcToLevel(fc);
        return calcFreq(elapsedTime, count, level);
!!!12863884.java!!!	pushElapsedTime(in fc : byte) : byte
        int elapsedTime = fcToElapsedTime(fc);
        int count = fcToCount(fc);
        int level = fcToLevel(fc);
        if (elapsedTime >= ELAPSED_TIME_MAX) {
            // Downgrade level
            elapsedTime = 0;
            count = COUNT_MAX;
            --level;
        } else {
            ++elapsedTime;
        }
        return calcFc(elapsedTime, count, level);
!!!12864012.java!!!	pushCount(in fc : byte, inout isValid : boolean) : byte
        final int elapsedTime = fcToElapsedTime(fc);
        int count = fcToCount(fc);
        int level = fcToLevel(fc);
        if ((elapsedTime == 0 && count >= COUNT_MAX) || (isValid && level == 0)) {
            // Upgrade level
            ++level;
            count = 0;
            if (DEBUG) {
                Log.d(TAG, "Upgrade level.");
            }
        } else {
            ++count;
        }
        return calcFc(0, count, level);
!!!12864140.java!!!	needsToSave(in fc : byte, inout isValid : boolean, inout addLevel0Bigram : boolean) : boolean
        int level = fcToLevel(fc);
        if (level == 0) {
            if (isValid || !addLevel0Bigram) {
                return false;
            }
        }
        final int elapsedTime = fcToElapsedTime(fc);
        return (elapsedTime < ELAPSED_TIME_MAX - 1 || level > 0);
