class Headers
!!!3730316.java!!!	Headers()
        transferEncoding = NO_TRANSFER_ENCODING;
        contentLength = NO_CONTENT_LENGTH;
        connectionType = NO_CONN_TYPE;
!!!3730444.java!!!	parseHeader(inout buffer : CharArrayBuffer) : void
        int pos = CharArrayBuffers.setLowercaseIndexOf(buffer, ':');
        if (pos == -1) {
            return;
        }
        String name = buffer.substringTrimmed(0, pos);
        if (name.length() == 0) {
            return;
        }
        pos++;

        String val = buffer.substringTrimmed(pos, buffer.length());
        if (HttpLog.LOGV) {
            HttpLog.v("hdr " + buffer.length() + " " + buffer);
        }

        switch (name.hashCode()) {
        case HASH_TRANSFER_ENCODING:
            if (name.equals(TRANSFER_ENCODING)) {
                mHeaders[IDX_TRANSFER_ENCODING] = val;
                HeaderElement[] encodings = BasicHeaderValueParser.DEFAULT
                        .parseElements(buffer, new ParserCursor(pos,
                                buffer.length()));
                // The chunked encoding must be the last one applied RFC2616,
                // 14.41
                int len = encodings.length;
                if (HTTP.IDENTITY_CODING.equalsIgnoreCase(val)) {
                    transferEncoding = ContentLengthStrategy.IDENTITY;
                } else if ((len > 0)
                        && (HTTP.CHUNK_CODING
                                .equalsIgnoreCase(encodings[len - 1].getName()))) {
                    transferEncoding = ContentLengthStrategy.CHUNKED;
                } else {
                    transferEncoding = ContentLengthStrategy.IDENTITY;
                }
            }
            break;
        case HASH_CONTENT_LEN:
            if (name.equals(CONTENT_LEN)) {
                mHeaders[IDX_CONTENT_LEN] = val;
                try {
                    contentLength = Long.parseLong(val);
                } catch (NumberFormatException e) {
                    if (false) {
                        Log.v(LOGTAG, "Headers.headers(): error parsing"
                                + " content length: " + buffer.toString());
                    }
                }
            }
            break;
        case HASH_CONTENT_TYPE:
            if (name.equals(CONTENT_TYPE)) {
                mHeaders[IDX_CONTENT_TYPE] = val;
            }
            break;
        case HASH_CONTENT_ENCODING:
            if (name.equals(CONTENT_ENCODING)) {
                mHeaders[IDX_CONTENT_ENCODING] = val;
            }
            break;
        case HASH_CONN_DIRECTIVE:
            if (name.equals(CONN_DIRECTIVE)) {
                mHeaders[IDX_CONN_DIRECTIVE] = val;
                setConnectionType(buffer, pos);
            }
            break;
        case HASH_LOCATION:
            if (name.equals(LOCATION)) {
                mHeaders[IDX_LOCATION] = val;
            }
            break;
        case HASH_PROXY_CONNECTION:
            if (name.equals(PROXY_CONNECTION)) {
                mHeaders[IDX_PROXY_CONNECTION] = val;
                setConnectionType(buffer, pos);
            }
            break;
        case HASH_WWW_AUTHENTICATE:
            if (name.equals(WWW_AUTHENTICATE)) {
                mHeaders[IDX_WWW_AUTHENTICATE] = val;
            }
            break;
        case HASH_PROXY_AUTHENTICATE:
            if (name.equals(PROXY_AUTHENTICATE)) {
                mHeaders[IDX_PROXY_AUTHENTICATE] = val;
            }
            break;
        case HASH_CONTENT_DISPOSITION:
            if (name.equals(CONTENT_DISPOSITION)) {
                mHeaders[IDX_CONTENT_DISPOSITION] = val;
            }
            break;
        case HASH_ACCEPT_RANGES:
            if (name.equals(ACCEPT_RANGES)) {
                mHeaders[IDX_ACCEPT_RANGES] = val;
            }
            break;
        case HASH_EXPIRES:
            if (name.equals(EXPIRES)) {
                mHeaders[IDX_EXPIRES] = val;
            }
            break;
        case HASH_CACHE_CONTROL:
            if (name.equals(CACHE_CONTROL)) {
                // In case where we receive more than one header, create a ',' separated list.
                // This should be ok, according to RFC 2616 chapter 4.2
                if (mHeaders[IDX_CACHE_CONTROL] != null &&
                    mHeaders[IDX_CACHE_CONTROL].length() > 0) {
                    mHeaders[IDX_CACHE_CONTROL] += (',' + val);
                } else {
                    mHeaders[IDX_CACHE_CONTROL] = val;
                }
            }
            break;
        case HASH_LAST_MODIFIED:
            if (name.equals(LAST_MODIFIED)) {
                mHeaders[IDX_LAST_MODIFIED] = val;
            }
            break;
        case HASH_ETAG:
            if (name.equals(ETAG)) {
                mHeaders[IDX_ETAG] = val;
            }
            break;
        case HASH_SET_COOKIE:
            if (name.equals(SET_COOKIE)) {
                mHeaders[IDX_SET_COOKIE] = val;
                cookies.add(val);
            }
            break;
        case HASH_PRAGMA:
            if (name.equals(PRAGMA)) {
                mHeaders[IDX_PRAGMA] = val;
            }
            break;
        case HASH_REFRESH:
            if (name.equals(REFRESH)) {
                mHeaders[IDX_REFRESH] = val;
            }
            break;
        case HASH_X_PERMITTED_CROSS_DOMAIN_POLICIES:
            if (name.equals(X_PERMITTED_CROSS_DOMAIN_POLICIES)) {
                mHeaders[IDX_X_PERMITTED_CROSS_DOMAIN_POLICIES] = val;
            }
            break;
        default:
            mExtraHeaderNames.add(name);
            mExtraHeaderValues.add(val);
        }
!!!3730572.java!!!	getTransferEncoding() : long
        return transferEncoding;
!!!3730700.java!!!	getContentLength() : long
        return contentLength;
!!!3730828.java!!!	getConnectionType() : int
        return connectionType;
!!!3730956.java!!!	getContentType() : String
        return mHeaders[IDX_CONTENT_TYPE];
!!!3731084.java!!!	getContentEncoding() : String
        return mHeaders[IDX_CONTENT_ENCODING];
!!!3731212.java!!!	getLocation() : String
        return mHeaders[IDX_LOCATION];
!!!3731340.java!!!	getWwwAuthenticate() : String
        return mHeaders[IDX_WWW_AUTHENTICATE];
!!!3731468.java!!!	getProxyAuthenticate() : String
        return mHeaders[IDX_PROXY_AUTHENTICATE];
!!!3731596.java!!!	getContentDisposition() : String
        return mHeaders[IDX_CONTENT_DISPOSITION];
!!!3731724.java!!!	getAcceptRanges() : String
        return mHeaders[IDX_ACCEPT_RANGES];
!!!3731852.java!!!	getExpires() : String
        return mHeaders[IDX_EXPIRES];
!!!3731980.java!!!	getCacheControl() : String
        return mHeaders[IDX_CACHE_CONTROL];
!!!3732108.java!!!	getLastModified() : String
        return mHeaders[IDX_LAST_MODIFIED];
!!!3732236.java!!!	getEtag() : String
        return mHeaders[IDX_ETAG];
!!!3732364.java!!!	getSetCookie() : ArrayList<String>
        return this.cookies;
!!!3732492.java!!!	getPragma() : String
        return mHeaders[IDX_PRAGMA];
!!!3732620.java!!!	getRefresh() : String
        return mHeaders[IDX_REFRESH];
!!!3732748.java!!!	getXPermittedCrossDomainPolicies() : String
        return mHeaders[IDX_X_PERMITTED_CROSS_DOMAIN_POLICIES];
!!!3732876.java!!!	setContentLength(in value : long) : void
        this.contentLength = value;
!!!3733004.java!!!	setContentType(in value : String) : void
        mHeaders[IDX_CONTENT_TYPE] = value;
!!!3733132.java!!!	setContentEncoding(in value : String) : void
        mHeaders[IDX_CONTENT_ENCODING] = value;
!!!3733260.java!!!	setLocation(in value : String) : void
        mHeaders[IDX_LOCATION] = value;
!!!3733388.java!!!	setWwwAuthenticate(in value : String) : void
        mHeaders[IDX_WWW_AUTHENTICATE] = value;
!!!3733516.java!!!	setProxyAuthenticate(in value : String) : void
        mHeaders[IDX_PROXY_AUTHENTICATE] = value;
!!!3733644.java!!!	setContentDisposition(in value : String) : void
        mHeaders[IDX_CONTENT_DISPOSITION] = value;
!!!3733772.java!!!	setAcceptRanges(in value : String) : void
        mHeaders[IDX_ACCEPT_RANGES] = value;
!!!3733900.java!!!	setExpires(in value : String) : void
        mHeaders[IDX_EXPIRES] = value;
!!!3734028.java!!!	setCacheControl(in value : String) : void
        mHeaders[IDX_CACHE_CONTROL] = value;
!!!3734156.java!!!	setLastModified(in value : String) : void
        mHeaders[IDX_LAST_MODIFIED] = value;
!!!3734284.java!!!	setEtag(in value : String) : void
        mHeaders[IDX_ETAG] = value;
!!!3734412.java!!!	setXPermittedCrossDomainPolicies(in value : String) : void
        mHeaders[IDX_X_PERMITTED_CROSS_DOMAIN_POLICIES] = value;
!!!3734668.java!!!	getHeaders(inout hcb : HeaderCallback) : void
        for (int i = 0; i < HEADER_COUNT; i++) {
            String h = mHeaders[i];
            if (h != null) {
                hcb.header(sHeaderNames[i], h);
            }
        }
        int extraLen = mExtraHeaderNames.size();
        for (int i = 0; i < extraLen; i++) {
            if (false) {
                HttpLog.v("Headers.getHeaders() extra: " + i + " " +
                          mExtraHeaderNames.get(i) + " " + mExtraHeaderValues.get(i));
            }
            hcb.header(mExtraHeaderNames.get(i),
                       mExtraHeaderValues.get(i));
        }

!!!3734796.java!!!	setConnectionType(inout buffer : CharArrayBuffer, in pos : int) : void
        if (CharArrayBuffers.containsIgnoreCaseTrimmed(
                buffer, pos, HTTP.CONN_CLOSE)) {
            connectionType = CONN_CLOSE;
        } else if (CharArrayBuffers.containsIgnoreCaseTrimmed(
                buffer, pos, HTTP.CONN_KEEP_ALIVE)) {
            connectionType = CONN_KEEP_ALIVE;
        }
