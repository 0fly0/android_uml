class NumericShaper
!!!128027.java!!!	NumericShaper(in ranges : int, in defaultContext : int, inout isContextual : boolean)
        this.fRanges = ranges;
        this.fDefaultContextIndex = getIndexFromRange(defaultContext);
        this.fContextual = isContextual;

        if (!fContextual){
            fSingleRangeIndex = getIndexFromRange(ranges);
        }
!!!128155.java!!!	getIndexFromRange(in range : int) : int
        if (range == 0) {
            throw rangeException(range);
        }

        int index = 0;
        while (index < MAX_INDEX){
            if (range == (1 << index)){
                return index;
            }
            index++;
        }

        throw rangeException(range);
!!!128283.java!!!	getRangeFromIndex(in index : int) : int
        if (index < 0 || index >= MAX_INDEX){
            throw rangeException(index);
        }

        return 1 << index;
!!!128411.java!!!	rangeException(in value : int) : IllegalArgumentException
        throw new IllegalArgumentException("Illegal range argument value: " + value);
!!!128539.java!!!	hashCode() : int
        int result = 17;
        result = 31 * result + fRanges;
        result = 31 * result + fDefaultContextIndex;
        result = 31 * result + (fContextual ? 1 : 0);
        return result;
!!!128667.java!!!	equals(inout obj : Object) : boolean
        if (obj == null) {
            return false;
        }

        if (obj == this) {
            return true;
        }

        try {
            NumericShaper ns = (NumericShaper)obj;
            return (fRanges == ns.fRanges &&
                    fDefaultContextIndex == ns.fDefaultContextIndex &&
                    fContextual == ns.fContextual);
        } catch (ClassCastException e){
        }

        return false;
!!!128795.java!!!	toString() : String
        /* !! There is no description in the documentation what this method must
         * return. Thus format of toString method is based on 1.5 release
         * behavior and can be obtained using next test sample:
         *
         * // Simple shapers toString format
         * System.out.println(NumericShaper.getShaper(NumericShaper.EASTERN_ARABIC));
         *
         * // Context shapers with default context toString format
         * System.out.println(NumericShaper.getContextualShaper(
         *      NumericShaper.ARABIC | NumericShaper.TAMIL));
         *
         * // Context shapers with context
         * System.out.println(NumericShaper.getContextualShaper(
         *      NumericShaper.ARABIC | NumericShaper.TAMIL,
         *      NumericShaper.EASTERN_ARABIC));
         */
        StringBuilder sb = new StringBuilder(super.toString());

        sb.append("[contextual:");
        sb.append(fContextual);

        if (fContextual){
            sb.append(", context:");
            sb.append(contexts[fDefaultContextIndex]);
        }

        sb.append(", range(s): ");
        if (fContextual) {
            int index = 0;
            boolean isFirst = true;
            while (index < MAX_INDEX){
                if ((fRanges & (1 << index)) != 0){
                    if (isFirst){
                        isFirst = false;
                    } else {
                        sb.append(", ");
                    }
                    sb.append(contexts[index]);
                }
                index++;
            }
        } else {
            sb.append(contexts[fSingleRangeIndex]);
        }
        sb.append("]");

        return sb.toString();
!!!128923.java!!!	getContextualShaper(in ranges : int, in defaultContext : int) : NumericShaper
        ranges &= ALL_RANGES;
        defaultContext &= ALL_RANGES;
        return new NumericShaper(ranges, defaultContext, true);
!!!129051.java!!!	getContextualShaper(in ranges : int) : NumericShaper
        ranges &= ALL_RANGES;
        return new NumericShaper(ranges, EUROPEAN, true);
!!!129179.java!!!	getRanges() : int
        return fRanges;
!!!129307.java!!!	getShaper(in singleRange : int) : NumericShaper
        singleRange &= ALL_RANGES;
        return new NumericShaper(singleRange, EUROPEAN, false);
!!!129435.java!!!	isContextual() : boolean
        return fContextual;
!!!129563.java!!!	shape(inout text : char, in start : int, in count : int, in context : int) : void
        if (isContextual()){
            contextualShape(text, start, count, getIndexFromRange(context));
        } else {
            nonContextualShape(text, start, count);
        }
!!!129691.java!!!	shape(inout text : char, in start : int, in count : int) : void
        if (isContextual()){
            contextualShape(text, start, count, fDefaultContextIndex);
        } else {
            nonContextualShape(text, start, count);
        }
!!!129819.java!!!	contextualShape(inout text : char, in start : int, in count : int, in contextIndex : int) : void
        char maxDigit = (char)0x0039;
        char minDigit = (char)0x0030;

        int currIndex;
        if (((1 << contextIndex) & fRanges) == 0 ){
            currIndex = INDEX_EUROPEAN;
        } else {
            currIndex = contextIndex;
        }

        for (int ind = start; ind < start + count; ind++){
            if (minDigit <= text[ind] && text[ind] <= maxDigit){
                if (currIndex != INDEX_ETHIOPIC || text[ind] != '0'){
                    text[ind] = (char)(digitsLowRanges[currIndex] + text[ind]);
                }
            } else {
                if(isCharStrong(text[ind])){
                    int index = getCharIndex(text[ind]);
                    if (currIndex != index){
                        if (((1 << index) & fRanges) != 0){
                            currIndex = index;
                        } else {
                            currIndex = INDEX_EUROPEAN;
                        }
                    }
                }
            }
        }

!!!129947.java!!!	nonContextualShape(inout text : char, in start : int, in count : int) : void
        char maxDigit = (char)0x0039;
        char minDigit = (char)((fRanges == ETHIOPIC) ? 0x0031 : 0x0030);
        for (int ind = start; ind < start + count; ind++){
            if (minDigit <= text[ind] && text[ind] <= maxDigit){
                    text[ind] = (char)(digitsLowRanges[fSingleRangeIndex] + text[ind]);
            }
        }

!!!130075.java!!!	getCharIndex(in ch : char) : int
        int index = INDEX_EUROPEAN;
        for (int i=0; i < MAX_INDEX; i++){
            int j = i * 2;
            if (scriptsRanges[j] <= ch && ch <= scriptsRanges[j+1]){
                return i;
            }
        }

        return index;
!!!130203.java!!!	isCharStrong(in chr : int) : boolean
        return (STRONG_TEXT_FLAGS[chr >> 5] & (1 << (chr % 32))) != 0;
!!!130331.java!!!	updateRangesFields() : void
        fRanges = (mask & ~(1 << 31));
        fContextual = ((mask &(1 << 31)) != 0);
        if (fContextual){
            fRanges = (mask & ~(1 << 31));
            fDefaultContextIndex = key;
        } else {
            fRanges = mask;
            fSingleRangeIndex = key;
        }
!!!130459.java!!!	updateKeyMaskFields() : void
        mask = fRanges;
        if (fContextual){
            mask |= (1 << 31);
            key = fDefaultContextIndex;
        } else{
            key = fSingleRangeIndex;
        }
!!!130587.java!!!	writeObject(inout out : ObjectOutputStream) : void
        updateKeyMaskFields();
        out.defaultWriteObject();
!!!130715.java!!!	readObject(inout in : ObjectInputStream) : void
        in.defaultReadObject();
        updateRangesFields();
