class ChannelLocksActivity
!!!12580748.java!!!	onCreate(in savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        Log.d(TAG, "onCreate()");

        mRes = getResources();

        int serviceFlag = 0;
        boolean lock = false;

        final List<ChannelDetails> channelInfo = gLive.getChannelList();
        if (channelInfo == null || channelInfo.isEmpty()) {
            Log.e(TAG, "No channel List available");
            new ToastCreator(getApplicationContext(),
                    mRes.getString(R.string.NoChannelListAvailable),
                    R.drawable.info).showToast();
            // WidgetManager.exitFromApp(getApplicationContext());
        }
        int size = 0;
        if (channelInfo != null) {
            size = channelInfo.size();
        }
        ChannelDetails chDetails = null;
        ChannelDetails currentChannel = gLive.getCurrentChannelDetail();
        serviceList = new LinkedList<ChannelListElement>();
        for (int i = 0; i < size; i++) {
            Log.d(TAG, " Index of loop***** " + i);
            chDetails = channelInfo.get(i);

            serviceFlag = chDetails.getServiceFlag();
            if ((serviceFlag & ServiceModificationFlags.Lock_Flag)
                == ServiceModificationFlags.Lock_Flag) {
                lock = true;
            } else {
                lock = false;
            }
            ChannelListElement listElement = new ChannelEnumClass().new ChannelListElement(
                    chDetails);
            listElement.setChannelLockStatus(lock);
            serviceList.add(listElement);
            if (Wrapper.getWrapperInstance().isSameChannel(currentChannel, chDetails)) {
                mFocusPosition = i;
            }
        }
        setContentView(R.layout.customedtable);
        setTimeOut(Utils.ONE_MINUTE * 2);

        if (size > 0) {

            mListView = (ListView) findViewById(R.id.channel_list);
            mDeviceAdapter = new DeviceListAdapter(this);
            mListView.setAdapter(mDeviceAdapter);
            mListView.setSelection(mFocusPosition);
            mListView.setOnItemSelectedListener(new OnItemSelectedListener() {

                @Override
                public void onItemSelected(AdapterView<?> arg0, View arg1,
                        int arg2, long arg3) {
                    mSelectedId = mListView.getSelectedItemPosition();

                    if (mRunnable != null) {
                        mHandler.removeCallbacks(mRunnable);
                    }
                    mRunnable = new Runnable() {
                        @Override
                        public void run() {
                            switchChannel(mSelectedId);
                        }
                    };
                    mHandler.postDelayed(mRunnable, 1000);
                }

                @Override
                public void onNothingSelected(AdapterView<?> arg0) {
                    // TODO Auto-generated method stub
                }
            });
        }

!!!12580876.java!!!	onKeyUp(in keyCode : int, in event : KeyEvent) : boolean

        Log.d(TAG, "onKeyUp() " + keyCode);
        if (keyCode == KeyEvent.KEYCODE_PROG_RED
                || keyCode == KeyEvent.KEYCODE_DPAD_CENTER
                || keyCode == KeyEvent.KEYCODE_ENTER) {
            updateLockStatusToPlatform(mSelectedId);
            mDeviceAdapter.notifyDataSetChanged();
            return super.onKeyUp(keyCode, event);

        } else {
            return super.onKeyUp(keyCode, event);
        }
!!!12581004.java!!!	checkChannelLockState(in channelId : int) : boolean

        Log.d(TAG, "checkChannelLockState()");

        int serviceFlag = -1;
        ChannelListElement selectedItem = serviceList.get(channelId);
        serviceFlag = selectedItem.getServiceFlag();

        if ((serviceFlag & ServiceModificationFlags.Lock_Flag)
                == ServiceModificationFlags.Lock_Flag) {
            return true;
        }
        return false;
!!!12581132.java!!!	updateLockStatusToPlatform(in channelId : int) : void

        Log.d(TAG, "updateLockStatusToPlatform()");
        ChannelListElement selectedItem = serviceList.get(channelId);
        // USDTVServiceData selectedServiceData = null;

        /* Instance of UserSettings to set channel lock flag */
        int serviceFlag = selectedItem.getServiceFlag();

        /*
         * Toggle the lock flag
         */
        serviceFlag = serviceFlag ^ ServiceModificationFlags.Lock_Flag;

        TvFramework.getInstance().getLiveTvInstance()
                .modifyService(selectedItem.getServiceId(), serviceFlag);

        /*
         * After setting Channel_lock flag status to platform,get
         * USDTVServiceData for updating lock_status in UI
         */

        // Update service flag status.
        selectedItem.setServiceFlag(serviceFlag);
        selectedItem.setChannelLockStatus(!selectedItem.getChannelLockStatus());
!!!12581260.java!!!	switchChannel(in channelId : int) : void

        Log.d(TAG, "switchChannel " + channelId);
        try {
            ChannelDetails currentChannel = gLive.getCurrentChannelDetail();
            ChannelListElement selectedItem = serviceList.get(channelId);
            int majorNumber = selectedItem.getMajorNo();
            int minorNumber = selectedItem.getMinorNo();
            USDTVServiceId serviceId = selectedItem.getServiceId();
            if (!Wrapper.getWrapperInstance().isSameChannel(currentChannel, selectedItem)) {
                Wrapper.getWrapperInstance().pauseCC();
                gLive.channelChange(true, majorNumber, minorNumber, serviceId);
            }
        } catch (NumberFormatException e) {
            ProgramaticException.displayException(getApplicationContext(), TAG, e);
        }
!!!12581388.java!!!	onDestroy() : void

        Log.d(TAG, "onDestroy()");

        super.onDestroy();
