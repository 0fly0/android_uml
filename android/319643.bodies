class ChunkedInputStream
!!!2072731.java!!!	ChunkedInputStream(inout is : InputStream, inout cacheRequest : CacheRequest, inout httpEngine : HttpEngine)
        super(is, httpEngine, cacheRequest);
!!!2072859.java!!!	read(inout buffer : byte, in offset : int, in count : int) : int
        Arrays.checkOffsetAndCount(buffer.length, offset, count);
        checkNotClosed();

        if (!hasMoreChunks) {
            return -1;
        }
        if (bytesRemainingInChunk == 0 || bytesRemainingInChunk == NO_CHUNK_YET) {
            readChunkSize();
            if (!hasMoreChunks) {
                return -1;
            }
        }
        int read = in.read(buffer, offset, Math.min(count, bytesRemainingInChunk));
        if (read == -1) {
            unexpectedEndOfInput(); // the server didn't supply the promised chunk length
            throw new IOException("unexpected end of stream");
        }
        bytesRemainingInChunk -= read;
        cacheWrite(buffer, offset, read);

        /*
         * If we're at the end of a chunk and the next chunk size is readable,
         * read it! Reading the last chunk causes the underlying connection to
         * be recycled and we want to do that as early as possible. Otherwise
         * self-delimiting streams like gzip will never be recycled.
         * http://code.google.com/p/android/issues/detail?id=7059
         */
        if (bytesRemainingInChunk == 0 && in.available() >= MIN_LAST_CHUNK_LENGTH) {
            readChunkSize();
        }

        return read;
!!!2072987.java!!!	readChunkSize() : void
        // read the suffix of the previous chunk
        if (bytesRemainingInChunk != NO_CHUNK_YET) {
            Streams.readAsciiLine(in);
        }
        String chunkSizeString = Streams.readAsciiLine(in);
        int index = chunkSizeString.indexOf(";");
        if (index != -1) {
            chunkSizeString = chunkSizeString.substring(0, index);
        }
        try {
            bytesRemainingInChunk = Integer.parseInt(chunkSizeString.trim(), 16);
        } catch (NumberFormatException e) {
            throw new IOException("Expected a hex chunk size, but was " + chunkSizeString);
        }
        if (bytesRemainingInChunk == 0) {
            hasMoreChunks = false;
            httpEngine.readTrailers();
            endOfInput(true);
        }
!!!2073115.java!!!	available() : int
        checkNotClosed();
        if (!hasMoreChunks || bytesRemainingInChunk == NO_CHUNK_YET) {
            return 0;
        }
        return Math.min(in.available(), bytesRemainingInChunk);
!!!2073243.java!!!	close() : void
        if (closed) {
            return;
        }

        closed = true;
        if (hasMoreChunks) {
            unexpectedEndOfInput();
        }
