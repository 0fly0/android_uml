class WFDSinkServiceReceiver
!!!12146444.java!!!	WFDSinkServiceReceiver(inout manager : WifiP2pManager, inout channel : Channel, inout statemachine : WFDSinkStateMachine, inout service : WFDSinkService)
		this.manager = manager;
		this.statemachine = statemachine;
		this.service = service;
		this.channel = channel;
!!!12146572.java!!!	allowAutoStreaming(inout context : Context) : boolean
		boolean ret = true;
		if(!WFDDeviceCapability.autoStreaming)
			ret = false;

		Log.i(TAG,"allowAutoStreaming ret "+ret);
		return ret;
!!!12146700.java!!!	wfdfilter(inout intent : Intent) : boolean

		WifiP2pInfo info = (WifiP2pInfo)intent.getParcelableExtra(WifiP2pManager.EXTRA_WIFI_P2P_INFO);
		if(!info.groupFormed){
			Log.d(TAG, "group not formed");
			return false;
		}

		WifiP2pWfdInfo wfdInfo = (WifiP2pWfdInfo)intent.getParcelableExtra(WifiP2pManager.EXTRA_WFD_INFO);
		if(wfdInfo == null){
			Log.d(TAG, "no wfdInfo");
			return false;
		}

		if(wfdInfo.getDeviceType() != WifiP2pWfdInfo.WFD_SOURCE){
			Log.d(TAG, "source not detected");
			return false;
		}

		if (info.clientAddress.getHostAddress().equals("::1")) {
			Log.d(TAG, "Ignore connection info : invalid p2p client address");
			return false;
		}
		if (info.groupOwnerAddress == null) {
			Log.d(TAG, "Ignore connection info : invalid p2p group owner address");
			return false;
		}

		mRtspPort = wfdInfo.getControlPort();
		Log.d(TAG,"wfdfilter mRtspPort: " + mRtspPort);

		if (info.isGroupOwner)
			mServerAddr = info.clientAddress.getHostAddress();
		else
			mServerAddr = info.groupOwnerAddress.getHostAddress();

		Log.i(TAG, "wfdfilter mServerAddr:"+ mServerAddr);
		return true;
!!!12146828.java!!!	onReceive(inout context : Context, inout intent : Intent) : void
		String action = intent.getAction();

		if (WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION.equals(action)) {
			// p2p is enabled/disabled.
			int state = intent.getIntExtra(WifiP2pManager.EXTRA_WIFI_STATE, -1);
			if (state == WifiP2pManager.WIFI_P2P_STATE_ENABLED) {
				service.setWifiP2pEnabled(true);
			} else {
				service.setWifiP2pEnabled(false);
			}
			Log.d(TAG, "P2P state changed - " + state);

		} else if (WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION.equals(action)) {
			NetworkInfo networkInfo = (NetworkInfo) intent.getParcelableExtra(WifiP2pManager.EXTRA_NETWORK_INFO);
			Log.i(TAG, "receive WIFI_P2P_CONNECTION_CHANGED_ACTION conntected:"+ networkInfo.isConnected());
			if (networkInfo.isConnected()) {
				if(wfdfilter(intent)){
					service.setServerInfo(mRtspPort, mServerAddr);
					statemachine.sendMessage(WFDSinkStateMachine.P2P_CONNECTION_ESTABLISHED);
					statemachine.sendMessage(WFDSinkStateMachine.START_RTSP_CLIENT);
				}
			}else{
				statemachine.sendMessage(WFDSinkStateMachine.P2P_CONNECTION_DESTROYED);
			}

		} else if (WFDSinkService.WIFI_DISPLAY_SINK_WPS_MESSAGE.equals(action)) {
			mRtspPort = intent.getIntExtra("peerRTSPPort", 7236);
			service.removeStickyBroadcast(intent);
			Log.d(TAG, "Received RTSP port: " + mRtspPort);
		}
