class InflaterOutputStream
!!!1777563.java!!!	InflaterOutputStream(inout out : OutputStream)
        this(out, new Inflater());
!!!1777691.java!!!	InflaterOutputStream(inout out : OutputStream, inout inf : Inflater)
        this(out, inf, DEFAULT_BUFFER_SIZE);
!!!1777819.java!!!	InflaterOutputStream(inout out : OutputStream, inout inf : Inflater, in bufferSize : int)
        super(out);
        if (out == null) {
            throw new NullPointerException("out == null");
        } else if (inf == null) {
            throw new NullPointerException("inf == null");
        }
        if (bufferSize <= 0) {
            throw new IllegalArgumentException("bufferSize <= 0: " + bufferSize);
        }
        this.inf = inf;
        this.buf = new byte[bufferSize];
!!!1777947.java!!!	close() : void
        if (!closed) {
            finish();
            inf.end();
            out.close();
            closed = true;
        }
!!!1778075.java!!!	flush() : void
        finish();
        out.flush();
!!!1778203.java!!!	finish() : void
        checkClosed();
        write();
!!!1778331.java!!!	write(in b : int) : void
        write(new byte[] { (byte) b }, 0, 1);
!!!1778459.java!!!	write(inout bytes : byte, in offset : int, in byteCount : int) : void
        checkClosed();
        Arrays.checkOffsetAndCount(bytes.length, offset, byteCount);
        inf.setInput(bytes, offset, byteCount);
        write();
!!!1778587.java!!!	write() : void
        try {
            int inflated;
            while ((inflated = inf.inflate(buf)) > 0) {
                out.write(buf, 0, inflated);
            }
        } catch (DataFormatException e) {
            throw new ZipException();
        }
!!!1778715.java!!!	checkClosed() : void
        if (closed) {
            throw new IOException();
        }
