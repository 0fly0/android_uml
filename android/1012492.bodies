class MenuPopupHelper
!!!5608844.java!!!	MenuPopupHelper(inout context : Context, inout menu : MenuBuilder)
        this(context, menu, null, false);
!!!5608972.java!!!	MenuPopupHelper(inout context : Context, inout menu : MenuBuilder, inout anchorView : View)
        this(context, menu, anchorView, false);
!!!5609100.java!!!	MenuPopupHelper(inout context : Context, inout menu : MenuBuilder, inout anchorView : View, inout overflowOnly : boolean)
        mContext = context;
        mInflater = LayoutInflater.from(context);
        mMenu = menu;
        mOverflowOnly = overflowOnly;

        final Resources res = context.getResources();
        mPopupMaxWidth = Math.max(res.getDisplayMetrics().widthPixels / 2,
                res.getDimensionPixelSize(com.android.internal.R.dimen.config_prefDialogWidth));

        mAnchorView = anchorView;

        menu.addMenuPresenter(this);
!!!5609228.java!!!	setAnchorView(inout anchor : View) : void
        mAnchorView = anchor;
!!!5609356.java!!!	setForceShowIcon(inout forceShow : boolean) : void
        mForceShowIcon = forceShow;
!!!5609484.java!!!	show() : void
        if (!tryShow()) {
            throw new IllegalStateException("MenuPopupHelper cannot be used without an anchor");
        }
!!!5609612.java!!!	tryShow() : boolean
        mPopup = new ListPopupWindow(mContext, null, com.android.internal.R.attr.popupMenuStyle);
        mPopup.setOnDismissListener(this);
        mPopup.setOnItemClickListener(this);

        mAdapter = new MenuAdapter(mMenu);
        mPopup.setAdapter(mAdapter);
        mPopup.setModal(true);

        View anchor = mAnchorView;
        if (anchor != null) {
            final boolean addGlobalListener = mTreeObserver == null;
            mTreeObserver = anchor.getViewTreeObserver(); // Refresh to latest
            if (addGlobalListener) mTreeObserver.addOnGlobalLayoutListener(this);
            anchor.addOnAttachStateChangeListener(this);
            mPopup.setAnchorView(anchor);
        } else {
            return false;
        }

        mPopup.setContentWidth(Math.min(measureContentWidth(mAdapter), mPopupMaxWidth));
        mPopup.setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);
        mPopup.show();
        mPopup.getListView().setOnKeyListener(this);
        return true;
!!!5609740.java!!!	dismiss() : void
        if (isShowing()) {
            mPopup.dismiss();
        }
!!!5609868.java!!!	onDismiss() : void
        mPopup = null;
        mMenu.close();
        if (mTreeObserver != null) {
            if (!mTreeObserver.isAlive()) mTreeObserver = mAnchorView.getViewTreeObserver();
            mTreeObserver.removeGlobalOnLayoutListener(this);
            mTreeObserver = null;
        }
        mAnchorView.removeOnAttachStateChangeListener(this);
!!!5609996.java!!!	isShowing() : boolean
        return mPopup != null && mPopup.isShowing();
!!!5610124.java!!!	onItemClick(inout parent : AdapterView, inout view : View, in position : int, in id : long) : void
        MenuAdapter adapter = mAdapter;
        adapter.mAdapterMenu.performItemAction(adapter.getItem(position), 0);
!!!5610252.java!!!	onKey(inout v : View, in keyCode : int, inout event : KeyEvent) : boolean
        if (event.getAction() == KeyEvent.ACTION_UP && keyCode == KeyEvent.KEYCODE_MENU) {
            dismiss();
            return true;
        }
        return false;
!!!5610380.java!!!	measureContentWidth(inout adapter : ListAdapter) : int
        // Menus don't tend to be long, so this is more sane than it looks.
        int width = 0;
        View itemView = null;
        int itemType = 0;
        final int widthMeasureSpec =
            MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);
        final int heightMeasureSpec =
            MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);
        final int count = adapter.getCount();
        for (int i = 0; i < count; i++) {
            final int positionType = adapter.getItemViewType(i);
            if (positionType != itemType) {
                itemType = positionType;
                itemView = null;
            }
            if (mMeasureParent == null) {
                mMeasureParent = new FrameLayout(mContext);
            }
            itemView = adapter.getView(i, itemView, mMeasureParent);
            itemView.measure(widthMeasureSpec, heightMeasureSpec);
            width = Math.max(width, itemView.getMeasuredWidth());
        }
        return width;
!!!5610508.java!!!	onGlobalLayout() : void
        if (isShowing()) {
            final View anchor = mAnchorView;
            if (anchor == null || !anchor.isShown()) {
                dismiss();
            } else if (isShowing()) {
                // Recompute window size and position
                mPopup.show();
            }
        }
!!!5610764.java!!!	onViewDetachedFromWindow(inout v : View) : void
        if (mTreeObserver != null) {
            if (!mTreeObserver.isAlive()) mTreeObserver = v.getViewTreeObserver();
            mTreeObserver.removeGlobalOnLayoutListener(this);
        }
        v.removeOnAttachStateChangeListener(this);
!!!5610892.java!!!	initForMenu(inout context : Context, inout menu : MenuBuilder) : void
        // Don't need to do anything; we added as a presenter in the constructor.
!!!5611020.java!!!	getMenuView(inout root : ViewGroup) : MenuView
        throw new UnsupportedOperationException("MenuPopupHelpers manage their own views");
!!!5611148.java!!!	updateMenuView(inout cleared : boolean) : void
        if (mAdapter != null) mAdapter.notifyDataSetChanged();
!!!5611276.java!!!	setCallback(inout cb : Callback) : void
        mPresenterCallback = cb;
!!!5611404.java!!!	onSubMenuSelected(inout subMenu : SubMenuBuilder) : boolean
        if (subMenu.hasVisibleItems()) {
            MenuPopupHelper subPopup = new MenuPopupHelper(mContext, subMenu, mAnchorView, false);
            subPopup.setCallback(mPresenterCallback);

            boolean preserveIconSpacing = false;
            final int count = subMenu.size();
            for (int i = 0; i < count; i++) {
                MenuItem childItem = subMenu.getItem(i);
                if (childItem.isVisible() && childItem.getIcon() != null) {
                    preserveIconSpacing = true;
                    break;
                }
            }
            subPopup.setForceShowIcon(preserveIconSpacing);

            if (subPopup.tryShow()) {
                if (mPresenterCallback != null) {
                    mPresenterCallback.onOpenSubMenu(subMenu);
                }
                return true;
            }
        }
        return false;
!!!5611532.java!!!	onCloseMenu(inout menu : MenuBuilder, inout allMenusAreClosing : boolean) : void
        // Only care about the (sub)menu we're presenting.
        if (menu != mMenu) return;

        dismiss();
        if (mPresenterCallback != null) {
            mPresenterCallback.onCloseMenu(menu, allMenusAreClosing);
        }
!!!5611660.java!!!	flagActionItems() : boolean
        return false;
!!!5611788.java!!!	expandItemActionView(inout menu : MenuBuilder, inout item : MenuItemImpl) : boolean
        return false;
!!!5611916.java!!!	collapseItemActionView(inout menu : MenuBuilder, inout item : MenuItemImpl) : boolean
        return false;
!!!5612044.java!!!	getId() : int
        return 0;
!!!5612172.java!!!	onSaveInstanceState() : Parcelable
        return null;
