class Format
!!!1103771.java!!!	clone() : Object
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!1103899.java!!!	format(inout object : Object) : String
        return format(object, new StringBuffer(), new FieldPosition(0))
                .toString();
!!!1104155.java!!!	formatToCharacterIterator(inout object : Object) : AttributedCharacterIterator
        return new AttributedString(format(object)).getIterator();
!!!1104283.java!!!	parseObject(inout string : String) : Object
        ParsePosition position = new ParsePosition(0);
        Object result = parseObject(string, position);
        if (position.getIndex() == 0) {
            throw new ParseException("Parse failure", position.getErrorIndex());
        }
        return result;
!!!1104539.java!!!	upTo(inout string : String, inout position : ParsePosition, inout buffer : StringBuffer, in stop : char) : boolean
        int index = position.getIndex(), length = string.length();
        boolean lastQuote = false, quote = false;
        while (index < length) {
            char ch = string.charAt(index++);
            if (ch == '\'') {
                if (lastQuote) {
                    buffer.append('\'');
                }
                quote = !quote;
                lastQuote = true;
            } else if (ch == stop && !quote) {
                position.setIndex(index);
                return true;
            } else {
                lastQuote = false;
                buffer.append(ch);
            }
        }
        position.setIndex(index);
        return false;
!!!1104667.java!!!	upToWithQuotes(inout string : String, inout position : ParsePosition, inout buffer : StringBuffer, in stop : char, in start : char) : boolean
        int index = position.getIndex(), length = string.length(), count = 1;
        boolean quote = false;
        while (index < length) {
            char ch = string.charAt(index++);
            if (ch == '\'') {
                quote = !quote;
            }
            if (!quote) {
                if (ch == stop) {
                    count--;
                }
                if (count == 0) {
                    position.setIndex(index);
                    return true;
                }
                if (ch == start) {
                    count++;
                }
            }
            buffer.append(ch);
        }
        throw new IllegalArgumentException("Unmatched braces in the pattern");
