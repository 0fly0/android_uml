class VeAudioOutput
!!!470924.cpp!!!	VeAudioOutput()
    mTrack = 0;
    mStreamType = AUDIO_STREAM_MUSIC;
    mLeftVolume = 1.0;
    mRightVolume = 1.0;
    mLatency = 0;
    mMsecsPerFrame = 0;
    mNumFramesWritten = 0;
    setMinBufferCount();
!!!471052.cpp!!!	~VeAudioOutput()
    close();
!!!471436.cpp!!!	bufferSize() : ssize_t

    if (mTrack == 0) return NO_INIT;
    return mTrack->frameCount() * frameSize();
!!!471564.cpp!!!	frameCount() : ssize_t

    if (mTrack == 0) return NO_INIT;
    return mTrack->frameCount();
!!!471692.cpp!!!	channelCount() : ssize_t
    if (mTrack == 0) return NO_INIT;
    return mTrack->channelCount();
!!!471820.cpp!!!	frameSize() : ssize_t
    if (mTrack == 0) return NO_INIT;
    return mTrack->frameSize();
!!!471948.cpp!!!	latency() : uint32_t
    return mLatency;
!!!472076.cpp!!!	msecsPerFrame() : float
    return mMsecsPerFrame;
!!!472204.cpp!!!	getPosition(inout position : uint32_t) : status_t

    if (mTrack == 0) return NO_INIT;
    return mTrack->getPosition(position);
!!!472332.cpp!!!	getFramesWritten(inout written : uint32_t) : status_t

    if (mTrack == 0) return NO_INIT;
    *written = mNumFramesWritten;
    return OK;
!!!472460.cpp!!!	getSessionId() : int

    return mSessionId;
!!!472588.cpp!!!	open(in sampleRate : uint32_t, in channelCount : int, in channelMask : audio_channel_mask_t, in format : audio_format_t, in bufferCount : int, in cb : AudioCallback, inout cookie : void, in flags : audio_output_flags_t) : status_t

    mCallback = cb;
    mCallbackCookie = cookie;

    // Check argument "bufferCount" against the mininum buffer count
    if (bufferCount < mMinBufferCount) {
        ALOGV("bufferCount (%d) is too small and increased to %d",
            bufferCount, mMinBufferCount);
        bufferCount = mMinBufferCount;

    }
    ALOGV("open(%u, %d, %d, %d)", sampleRate, channelCount, format, bufferCount);
    if (mTrack) close();
    int afSampleRate;
    int afFrameCount;
    int frameCount;

    if (AudioSystem::getOutputFrameCount(&afFrameCount, mStreamType) !=
     NO_ERROR) {
        return NO_INIT;
    }
    if (AudioSystem::getOutputSamplingRate(&afSampleRate, mStreamType) !=
     NO_ERROR) {
        return NO_INIT;
    }

    frameCount = (sampleRate*afFrameCount*bufferCount)/afSampleRate;

    if (channelMask == CHANNEL_MASK_USE_CHANNEL_ORDER) {
        switch(channelCount) {
          case 1:
            channelMask = AUDIO_CHANNEL_OUT_MONO;
            break;
          case 2:
            channelMask = AUDIO_CHANNEL_OUT_STEREO;
            break;
          default:
            return NO_INIT;
        }
    }

    AudioTrack *t;
    if (mCallback != NULL) {
        t = new AudioTrack(
                mStreamType,
                sampleRate,
                format,
                channelMask,
                frameCount,
                flags,
                CallbackWrapper,
                this);
    } else {
        t = new AudioTrack(
                mStreamType,
                sampleRate,
                format,
                channelMask,
                frameCount,
                flags);
    }

    if ((t == 0) || (t->initCheck() != NO_ERROR)) {
        ALOGE("Unable to create audio track");
        delete t;
        return NO_INIT;
    }

    ALOGV("setVolume");
    t->setVolume(mLeftVolume, mRightVolume);
    mMsecsPerFrame = 1.e3 / (float) sampleRate;
    mLatency = t->latency();
    mTrack = t;
    return NO_ERROR;
!!!472716.cpp!!!	start() : void

    ALOGV("start");
    if (mTrack) {
        mTrack->setVolume(mLeftVolume, mRightVolume);
        mTrack->start();
        mTrack->getPosition(&mNumFramesWritten);
    }
!!!472844.cpp!!!	write(in buffer : void, in size : size_t) : ssize_t

    LOG_FATAL_IF(mCallback != NULL, "Don't call write if supplying a callback.");

    //ALOGV("write(%p, %u)", buffer, size);
    if (mTrack) {
        snoopWrite(buffer, size);
        ssize_t ret = mTrack->write(buffer, size);
        mNumFramesWritten += ret / 4; // assume 16 bit stereo
        return ret;
    }
    return NO_INIT;
!!!472972.cpp!!!	stop() : void

    ALOGV("stop");
    if (mTrack) mTrack->stop();
!!!473100.cpp!!!	flush() : void

    ALOGV("flush");
    if (mTrack) mTrack->flush();
!!!473228.cpp!!!	pause() : void

    ALOGV("VeAudioOutput::pause");
    if (mTrack) mTrack->pause();
!!!473356.cpp!!!	close() : void

    ALOGV("close");
    delete mTrack;
    mTrack = 0;
!!!473612.cpp!!!	setVolume(in left : float, in right : float) : void

    ALOGV("setVolume(%f, %f)", left, right);
    mLeftVolume = left;
    mRightVolume = right;
    if (mTrack) {
        mTrack->setVolume(left, right);
    }
!!!473740.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;

    result.append(" VeAudioOutput\n");
    snprintf(buffer, SIZE-1, "  stream type(%d), left - right volume(%f, %f)\n",
            mStreamType, mLeftVolume, mRightVolume);
    result.append(buffer);
    snprintf(buffer, SIZE-1, "  msec per frame(%f), latency (%d)\n",
            mMsecsPerFrame, mLatency);
    result.append(buffer);
    ::write(fd, result.string(), result.size());
    if (mTrack != 0) {
        mTrack->dump(fd, args);
    }
    return NO_ERROR;
!!!473868.cpp!!!	isOnEmulator() : bool

    setMinBufferCount();
    return mIsOnEmulator;
!!!473996.cpp!!!	getMinBufferCount() : int

    setMinBufferCount();
    return mMinBufferCount;
!!!474124.cpp!!!	setMinBufferCount() : void

    mIsOnEmulator = false;
    mMinBufferCount = 4;
!!!474252.cpp!!!	CallbackWrapper(in event : int, inout cookie : void, inout info : void) : void
    //ALOGV("VeAudioOutput::callbackwrapper");
    if (event != AudioTrack::EVENT_MORE_DATA) {
        return;
    }

    VeAudioOutput *me = (VeAudioOutput *)cookie;
    AudioTrack::Buffer *buffer = (AudioTrack::Buffer *)info;

    size_t actualSize = (*me->mCallback)(
            me, buffer->raw, buffer->size, me->mCallbackCookie);

    buffer->size = actualSize;

    if (actualSize > 0) {
        me->snoopWrite(buffer->raw, actualSize);
    }
!!!474380.cpp!!!	snoopWrite(in buffer : void, in size : size_t) : void
    // Visualization buffers not supported
    return;

