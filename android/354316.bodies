class MPEG2TSExtractor
!!!636812.cpp!!!	MPEG2TSExtractor(in source : sp<DataSource>)
    init();
!!!636940.cpp!!!	countTracks() : size_t
    return mSourceImpls.size();
!!!637068.cpp!!!	getTrack(in index : size_t) : sp<MediaSource>
    if (index >= mSourceImpls.size()) {
        return NULL;
    }

    bool seekable = true;
    if (mSourceImpls.size() > 1) {
        CHECK_EQ(mSourceImpls.size(), 2u);

        sp<MetaData> meta = mSourceImpls.editItemAt(index)->getFormat();
        const char *mime;
        CHECK(meta->findCString(kKeyMIMEType, &mime));

        if (!strncasecmp("audio/", mime, 6)) {
            seekable = false;
        }
    }

    return new MPEG2TSSource(this, mSourceImpls.editItemAt(index), seekable);
!!!637196.cpp!!!	getTrackMetaData(in index : size_t, in flags : uint32_t) : sp<MetaData>
    return index < mSourceImpls.size()
        ? mSourceImpls.editItemAt(index)->getFormat() : NULL;
!!!637324.cpp!!!	getMetaData() : sp<MetaData>
    sp<MetaData> meta = new MetaData;
    meta->setCString(kKeyMIMEType, MEDIA_MIMETYPE_CONTAINER_MPEG2TS);

    return meta;
!!!637452.cpp!!!	flags() : uint32_t
    Mutex::Autolock autoLock(mLock);

    uint32_t flags = CAN_PAUSE;

    if (mLiveSession != NULL && mLiveSession->isSeekable()) {
        flags |= CAN_SEEK_FORWARD | CAN_SEEK_BACKWARD | CAN_SEEK;
    }

    return flags;
!!!637580.cpp!!!	setLiveSession(in liveSession : sp<LiveSession>) : void
    Mutex::Autolock autoLock(mLock);

    mLiveSession = liveSession;
!!!637708.cpp!!!	seekTo(in seekTimeUs : int64_t) : void
    Mutex::Autolock autoLock(mLock);

    if (mLiveSession == NULL) {
        return;
    }

    mLiveSession->seekTo(seekTimeUs);
!!!637836.cpp!!!	init() : void
    bool haveAudio = false;
    bool haveVideo = false;
    int numPacketsParsed = 0;

    while (feedMore() == OK) {
        ATSParser::SourceType type;
        if (haveAudio && haveVideo) {
            break;
        }
        if (!haveVideo) {
            sp<AnotherPacketSource> impl =
                (AnotherPacketSource *)mParser->getSource(
                        ATSParser::VIDEO).get();

            if (impl != NULL) {
                haveVideo = true;
                mSourceImpls.push(impl);
            }
        }

        if (!haveAudio) {
            sp<AnotherPacketSource> impl =
                (AnotherPacketSource *)mParser->getSource(
                        ATSParser::AUDIO).get();

            if (impl != NULL) {
                haveAudio = true;
                mSourceImpls.push(impl);
            }
        }

        if (++numPacketsParsed > 10000) {
            break;
        }
    }

    ALOGI("haveAudio=%d, haveVideo=%d", haveAudio, haveVideo);
!!!637964.cpp!!!	feedMore() : status_t
    Mutex::Autolock autoLock(mLock);

    uint8_t packet[kTSPacketSize];
    ssize_t n = mDataSource->readAt(mOffset, packet, kTSPacketSize);

    if (n < (ssize_t)kTSPacketSize) {
        return (n < 0) ? (status_t)n : ERROR_END_OF_STREAM;
    }

    mOffset += n;
    return mParser->feedTSPacket(packet, kTSPacketSize);
