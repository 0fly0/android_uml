class OldLineNumberReaderTest
!!!2668059.java!!!	test_markI() : void
        lnr = new LineNumberReader(new StringReader(text));
        String line;
        lnr.skip(80);
        lnr.mark(100);
        line = lnr.readLine();
        lnr.reset();
        assertTrue("Test 1: Failed to return to marked position.",
                line.equals(lnr.readLine()));

        lnr.close();
        try {
            lnr.mark(42);
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }

        // The spec does not say the mark has to be invalidated
!!!2668187.java!!!	test_read() : void
        lnr = new LineNumberReader(new StringReader(text));

        int c = lnr.read();
        assertEquals("Test 1: Read returned incorrect character;",
                '0', c);
        lnr.read();
        assertEquals("Test 2: Read failed to increase the line number;",
                1, lnr.getLineNumber());

        lnr.close();
        try {
            lnr.read();
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2668315.java!!!	test_read$CII() : void
        lnr = new LineNumberReader(new StringReader(text));
        char[] c = new char[100];
        lnr.read(c, 0, 4);
        assertTrue("Test 1: Read returned incorrect characters.", "0\n1\n"
                .equals(new String(c, 0, 4)));
        assertEquals("Test 2: Read failed to inc lineNumber",
                2, lnr.getLineNumber());

        lnr.close();
        try {
            lnr.read(c, 0, 4);
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2668443.java!!!	test_read$CII_Exception() : void
        lnr = new LineNumberReader(new StringReader(text));
        char[] c = new char[10];

        try {
            lnr.read(c, -1, 1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            lnr.read(c, 0, -1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            lnr.read(c, 10, 1);
            fail("IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }
!!!2668571.java!!!	test_readLine() : void
        lnr = new LineNumberReader(new StringReader(text));
        assertEquals("Returned incorrect line number", 0, lnr.getLineNumber());
        String line = null;
        lnr.readLine();
        line = lnr.readLine();
        assertEquals("Test 1: Returned incorrect string;", "1", line);
        assertTrue("Test 2: Returned incorrect line number:" + lnr.getLineNumber(),
                lnr.getLineNumber() == 2);

        lnr.close();
        try {
            lnr.readLine();
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2668699.java!!!	test_reset() : void
        lnr = new LineNumberReader(new StringReader(text));
        assertEquals("Test 1: Returned incorrect line number;",
                0, lnr.getLineNumber());
        String line = null;
        lnr.mark(100);
        lnr.readLine();
        lnr.reset();
        line = lnr.readLine();
        assertEquals("Test 2: Failed to reset reader", "0", line);

        lnr.mark(100);
        lnr.close();
        try {
            lnr.reset();
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2668827.java!!!	test_skipJ() : void
        lnr = new LineNumberReader(new StringReader(text));
        char[] c = new char[100];
        long skipped = lnr.skip(80);
        assertEquals("Test 1: Incorrect number of characters skipped;",
                80, skipped);
        lnr.read(c, 0, 100);
        assertTrue("Test 2: Failed to skip to correct position.",
                text.substring(80, 180).equals(new String(c, 0, c.length)));

        try {
            lnr.skip(-1);
            fail("Test 3: IllegalArgumentException expected.");
        } catch (IllegalArgumentException e) {
            // Expected.
        }

        lnr.close();
        try {
            lnr.skip(1);
            fail("Test 4: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
