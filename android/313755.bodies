class BlockGuardOs
!!!2021275.java!!!	BlockGuardOs(inout os : Os)
        super(os);
!!!2021403.java!!!	tagSocket(inout fd : FileDescriptor) : FileDescriptor
        try {
            SocketTagger.get().tag(fd);
            return fd;
        } catch (SocketException e) {
            throw new ErrnoException("socket", EINVAL, e);
        }
!!!2021531.java!!!	untagSocket(inout fd : FileDescriptor) : void
        try {
            SocketTagger.get().untag(fd);
        } catch (SocketException e) {
            throw new ErrnoException("socket", EINVAL, e);
        }
!!!2021659.java!!!	accept(inout fd : FileDescriptor, inout peerAddress : InetSocketAddress) : FileDescriptor
        BlockGuard.getThreadPolicy().onNetwork();
        return tagSocket(os.accept(fd, peerAddress));
!!!2021787.java!!!	close(inout fd : FileDescriptor) : void
        try {
            if (S_ISSOCK(Libcore.os.fstat(fd).st_mode)) {
                if (isLingerSocket(fd)) {
                    // If the fd is a socket with SO_LINGER set, we might block indefinitely.
                    // We allow non-linger sockets so that apps can close their network
                    // connections in methods like onDestroy which will run on the UI thread.
                    BlockGuard.getThreadPolicy().onNetwork();
                }
                untagSocket(fd);
            }
        } catch (ErrnoException ignored) {
            // We're called via Socket.close (which doesn't ask for us to be called), so we
            // must not throw here, because Socket.close must not throw if asked to close an
            // already-closed socket. Also, the passed-in FileDescriptor isn't necessarily
            // a socket at all.
        }
        os.close(fd);
!!!2021915.java!!!	isLingerSocket(inout fd : FileDescriptor) : boolean
        StructLinger linger = Libcore.os.getsockoptLinger(fd, SOL_SOCKET, SO_LINGER);
        return linger.isOn() && linger.l_linger > 0;
!!!2022043.java!!!	connect(inout fd : FileDescriptor, inout address : InetAddress, in port : int) : void
        BlockGuard.getThreadPolicy().onNetwork();
        os.connect(fd, address, port);
!!!2022171.java!!!	fdatasync(inout fd : FileDescriptor) : void
        BlockGuard.getThreadPolicy().onWriteToDisk();
        os.fdatasync(fd);
!!!2022299.java!!!	fsync(inout fd : FileDescriptor) : void
        BlockGuard.getThreadPolicy().onWriteToDisk();
        os.fsync(fd);
!!!2022427.java!!!	ftruncate(inout fd : FileDescriptor, in length : long) : void
        BlockGuard.getThreadPolicy().onWriteToDisk();
        os.ftruncate(fd, length);
!!!2022555.java!!!	open(inout path : String, in flags : int, in mode : int) : FileDescriptor
        BlockGuard.getThreadPolicy().onReadFromDisk();
        if ((mode & O_ACCMODE) != O_RDONLY) {
            BlockGuard.getThreadPolicy().onWriteToDisk();
        }
        return os.open(path, flags, mode);
!!!2022683.java!!!	poll(inout fds : StructPollfd, in timeoutMs : int) : int
        // Greater than 0 is a timeout in milliseconds and -1 means "block forever",
        // but 0 means "poll and return immediately", which shouldn't be subject to BlockGuard.
        if (timeoutMs != 0) {
            BlockGuard.getThreadPolicy().onNetwork();
        }
        return os.poll(fds, timeoutMs);
!!!2022811.java!!!	pread(inout fd : FileDescriptor, inout buffer : ByteBuffer, in offset : long) : int
        BlockGuard.getThreadPolicy().onReadFromDisk();
        return os.pread(fd, buffer, offset);
!!!2022939.java!!!	pread(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int, in offset : long) : int
        BlockGuard.getThreadPolicy().onReadFromDisk();
        return os.pread(fd, bytes, byteOffset, byteCount, offset);
!!!2023067.java!!!	pwrite(inout fd : FileDescriptor, inout buffer : ByteBuffer, in offset : long) : int
        BlockGuard.getThreadPolicy().onWriteToDisk();
        return os.pwrite(fd, buffer, offset);
!!!2023195.java!!!	pwrite(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int, in offset : long) : int
        BlockGuard.getThreadPolicy().onWriteToDisk();
        return os.pwrite(fd, bytes, byteOffset, byteCount, offset);
!!!2023323.java!!!	read(inout fd : FileDescriptor, inout buffer : ByteBuffer) : int
        BlockGuard.getThreadPolicy().onReadFromDisk();
        return os.read(fd, buffer);
!!!2023451.java!!!	read(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int) : int
        BlockGuard.getThreadPolicy().onReadFromDisk();
        return os.read(fd, bytes, byteOffset, byteCount);
!!!2023579.java!!!	readv(inout fd : FileDescriptor, inout buffers : Object, inout offsets : int, inout byteCounts : int) : int
        BlockGuard.getThreadPolicy().onReadFromDisk();
        return os.readv(fd, buffers, offsets, byteCounts);
!!!2023707.java!!!	recvfrom(inout fd : FileDescriptor, inout buffer : ByteBuffer, in flags : int, inout srcAddress : InetSocketAddress) : int
        BlockGuard.getThreadPolicy().onNetwork();
        return os.recvfrom(fd, buffer, flags, srcAddress);
!!!2023835.java!!!	recvfrom(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int, in flags : int, inout srcAddress : InetSocketAddress) : int
        BlockGuard.getThreadPolicy().onNetwork();
        return os.recvfrom(fd, bytes, byteOffset, byteCount, flags, srcAddress);
!!!2023963.java!!!	sendto(inout fd : FileDescriptor, inout buffer : ByteBuffer, in flags : int, inout inetAddress : InetAddress, in port : int) : int
        BlockGuard.getThreadPolicy().onNetwork();
        return os.sendto(fd, buffer, flags, inetAddress, port);
!!!2024091.java!!!	sendto(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int, in flags : int, inout inetAddress : InetAddress, in port : int) : int
        // We permit datagrams without hostname lookups.
        if (inetAddress != null) {
            BlockGuard.getThreadPolicy().onNetwork();
        }
        return os.sendto(fd, bytes, byteOffset, byteCount, flags, inetAddress, port);
!!!2024219.java!!!	socket(in domain : int, in type : int, in protocol : int) : FileDescriptor
        return tagSocket(os.socket(domain, type, protocol));
!!!2024347.java!!!	socketpair(in domain : int, in type : int, in protocol : int, inout fd1 : FileDescriptor, inout fd2 : FileDescriptor) : void
        os.socketpair(domain, type, protocol, fd1, fd2);
        tagSocket(fd1);
        tagSocket(fd2);
!!!2024475.java!!!	write(inout fd : FileDescriptor, inout buffer : ByteBuffer) : int
        BlockGuard.getThreadPolicy().onWriteToDisk();
        return os.write(fd, buffer);
!!!2024603.java!!!	write(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int) : int
        BlockGuard.getThreadPolicy().onWriteToDisk();
        return os.write(fd, bytes, byteOffset, byteCount);
!!!2024731.java!!!	writev(inout fd : FileDescriptor, inout buffers : Object, inout offsets : int, inout byteCounts : int) : int
        BlockGuard.getThreadPolicy().onWriteToDisk();
        return os.writev(fd, buffers, offsets, byteCounts);
