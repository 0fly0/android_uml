class CecServiceHub
!!!12053260.java!!!	CecServiceHub(inout context : Context, inout determineInterface : CecSrvImplDetermine)
        mContext = context;
        if (DEBUG) {
            Log.d(TAG, "determineInterface:" + determineInterface);
        }

        if (null != determineInterface) {
            mCecSrvImpl = determineInterface.determineCecSrvImpl();
            mCecDeviceType = determineInterface.currentCecRoleType();
        }

        if (DEBUG) {
            Log.d(TAG, "The cec device type is " + mCecDeviceType + " mCecSrvImpl:" + mCecSrvImpl);
        }
!!!12053388.java!!!	getCecDeviceType() : int
        return mCecDeviceType;
!!!12053516.java!!!	isCecDeviceTypeValid(in devType : int) : boolean
        return (devType > HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_INVALID)
                && (devType < HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_NUM);
!!!12053644.java!!!	getCecService() : IBinder
        if (null == sCecSrvImplBinder && null != mCecSrvImpl && mCecSrvImpl.isEnabled()) {
            String cecSrvClsName = mCecSrvImpl.getImplClsName();
            if (null == cecSrvClsName) {
                Log.e(TAG, "FATAL ERROR! mCecSrvImpl.getImplClsName() return null");
                return null;
            }
            final Constructor constructor;
            try {
                Class cecSrvCls = Class.forName(cecSrvClsName);
                constructor = cecSrvCls.getDeclaredConstructor(
                    new Class[] { android.content.Context.class });
                sCecSrvImplBinder = (IBinder)constructor.newInstance(
                    new Object[] { mContext });
                Log.i(TAG, "Instantiated a CecService object in"
                    + " CecServiceHub(clsName:" + cecSrvClsName + ")");
            }
            catch (ClassNotFoundException ex) {
                ex.printStackTrace();
                return null;
            }
            catch (InstantiationException ex) {
                ex.printStackTrace();
                return null;
            }
            catch (IllegalAccessException ex) {
                ex.printStackTrace();
                return null;
            }
            catch (NoSuchMethodException ex) {
                ex.printStackTrace();
                return null;
            }
            catch (InvocationTargetException ex) {
                ex.printStackTrace();
                return null;
            }
        }
        return sCecSrvImplBinder;
!!!12053772.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        if (mContext.checkCallingOrSelfPermission(android.Manifest.permission.DUMP)
                != PackageManager.PERMISSION_GRANTED) {
            pw.println("Permission Denial: can't dump telephony.registry from from pid="
                    + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid());
            return;
        }
        pw.println("last known state:");
        pw.println("mCecDeviceType=" + mCecDeviceType);
