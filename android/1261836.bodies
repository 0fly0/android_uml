class VideoEditorHelper
!!!7178252.java!!!	VideoEditorHelper()

!!!7178380.java!!!	createVideoEditor(in projectPath : String) : VideoEditor
        VideoEditor mVideoEditor = null;
        try {
            mVideoEditor = VideoEditorFactory.create(projectPath);
            assertNotNull("VideoEditor", mVideoEditor);
        } catch (Exception e) {
            fail("Unable to create Video Editor");
        }
        return mVideoEditor;
!!!7178508.java!!!	destroyVideoEditor(inout videoEditor : VideoEditor) : void
        // Release VideoEditor
        if (videoEditor != null) {
            try {
                videoEditor.release();
            } catch (Exception e) {
                fail("Unable to destory Video Editor");
            }
        }
!!!7178636.java!!!	checkRange(in expected : long, in actual : long, in rangePercent : long) : boolean
        long range = 0;
        range = (100 * actual) / expected;

        Log.i("checkRange", "Range = " + range);
        if ((range > (100 - rangePercent)) && (range < (100 + rangePercent))) {
            return true;
        } else {
            return false;
        }
!!!7178764.java!!!	getBitmap(in file : String, in width : int, in height : int) : Bitmap
        assertNotNull("Bitmap File is Null", file);
        FileInputStream inputStream = null;
        Bitmap overlayBmp = null;
        if (!new File(file).exists())
            throw new IOException("File not Found " + file);
        try {
            final BitmapFactory.Options dbo = new BitmapFactory.Options();
            dbo.inJustDecodeBounds = true;
            dbo.outWidth = width;
            dbo.outHeight = height;
            File flPtr = new File(file);
            inputStream = new FileInputStream(flPtr);
            final Bitmap srcBitmap = BitmapFactory.decodeStream(inputStream);
            overlayBmp = Bitmap.createBitmap(srcBitmap);
            assertNotNull("Bitmap 1", srcBitmap);
            assertNotNull("Bitmap 2", overlayBmp);
            inputStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return overlayBmp;
!!!7178892.java!!!	createMediaItem(inout videoEditor : VideoEditor, in MediaId : String, in filename : String, in renderingMode : int) : MediaVideoItem
        MediaVideoItem mvi = null;
        try {
            mvi = new MediaVideoItem(videoEditor, MediaId, filename,
                renderingMode);
            assertNotNull("Can not create an object of MediaVideoItem", mvi);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException
                ("Can not create an object of Media Video Item with file name = "
                    + filename + " Issue = " + e.toString());
        } catch (IOException e) {
            assertTrue
                ("Can not create an object of Media Video Item with file name = "
                    + filename + " Issue = " + e.toString(), false);
        }
        return mvi;
!!!7179020.java!!!	createMediaItem(inout videoEditor : VideoEditor, in MediaId : String, in filename : String, in duration : long, in renderingMode : int) : MediaImageItem
        MediaImageItem mii = null;
        try {
            mii = new MediaImageItem(videoEditor, MediaId, filename, duration,
                renderingMode);
            assertNotNull("Can not create an object of MediaImageItem", mii);

        } catch (IllegalArgumentException e) {
            assertTrue("Can not create an object of Media Image with file name = "
                + filename + " Issue = " + e.toString(), false);
        } catch (IOException e) {
            assertTrue("Can not create an object of Media Image with file name = "
                + filename + " Issue = " + e.toString(), false);
        }
        return mii;
!!!7179148.java!!!	createEffectItem(inout mediaItem : MediaItem, in effectId : String, in startTime : long, in duration : long, in effectType : int, in colorType : int) : EffectColor
        EffectColor effectonMVI = null;
        effectonMVI = new EffectColor(mediaItem, effectId, startTime,
            duration, effectType, colorType);
        return effectonMVI;
!!!7179276.java!!!	createTCrossFade(in transitionId : String, inout afterMediaItem : MediaItem, inout beforeMediaItem : MediaItem, in durationMs : long, in behavior : int) : TransitionCrossfade
        Log.i("TransitionCrossfade Details === ", "Transid ID = " + transitionId +
            " Duration= " + durationMs + " Behaviour " + behavior);

        TransitionCrossfade transitionCF = null;
            transitionCF = new TransitionCrossfade(transitionId, afterMediaItem,
                beforeMediaItem, durationMs, behavior);
        return transitionCF;
!!!7179404.java!!!	createTFadeBlack(in transitionId : String, inout afterMediaItem : MediaItem, inout beforeMediaItem : MediaItem, in durationMs : long, in behavior : int) : TransitionFadeBlack
        TransitionFadeBlack transitionFB = null;

        transitionFB = new TransitionFadeBlack(transitionId, afterMediaItem,
            beforeMediaItem, durationMs, behavior);
        return transitionFB;
!!!7179532.java!!!	createTSliding(in transitionId : String, inout afterMediaItem : MediaItem, inout beforeMediaItem : MediaItem, in durationMs : long, in behavior : int, in direction : int) : TransitionSliding
        TransitionSliding transSlide = null;
            transSlide = new TransitionSliding(transitionId, afterMediaItem,
                beforeMediaItem, durationMs, behavior, direction);
        return transSlide;
!!!7179660.java!!!	createTAlpha(in transitionId : String, inout afterMediaItem : MediaItem, inout beforeMediaItem : MediaItem, in durationMs : long, in behavior : int, in maskFilename : String, in blendingPercent : int, inout invert : boolean) : TransitionAlpha
        TransitionAlpha transA = null;
            transA = new TransitionAlpha(transitionId, afterMediaItem,
                beforeMediaItem, durationMs, behavior, maskFilename,
                blendingPercent, invert);
        return transA;
!!!7179788.java!!!	createOverlay(inout mediaItem : MediaItem, in overlayId : String, inout bitmap : Bitmap, in startTimeMs : long, in durationMs : long) : OverlayFrame
        OverlayFrame overLayFrame = null;
        overLayFrame = new OverlayFrame(mediaItem, overlayId, bitmap,
                startTimeMs, durationMs);
        return overLayFrame;
!!!7179916.java!!!	createAudio(inout videoEditor : VideoEditor, in audioTrackId : String, in filename : String) : AudioTrack
        AudioTrack audio = null;
        try {
            audio = new AudioTrack(videoEditor, audioTrackId, filename);
            assertNotNull("Cant not create an object of an  AudioTrack " +
                audioTrackId, audio);
        } catch (IllegalArgumentException e) {
            assertTrue("Can not create object of an AudioTrack " +
                audioTrackId + " Issue = " + e.toString(), false);
        } catch (IOException e) {
            assertTrue("Can not create object of an AudioTrack " +
                audioTrackId + " Issue = " + e.toString(), false);
        }
        return audio;
!!!7180044.java!!!	validateExport(inout videoEditor : VideoEditor, in fileName : String, in export_height : int, in startTime : int, in endTime : long, in vCodec : int, in aCodec : int) : void
        File tempFile = new File(fileName);
        assertEquals("Exported FileName", tempFile.exists(), true);
        final MediaVideoItem mvi = createMediaItem(videoEditor, "m1", fileName,
            MediaItem.RENDERING_MODE_BLACK_BORDER);

        Log.i(TAG, "VideoCodec for file = " + fileName +
            "\tExpected Video Codec = " + vCodec + "\tActual Video Codec = " +
            mvi.getVideoType());
        assertEquals("Export: Video Codec Mismatch for file = " + fileName +
            "\t<expected> " + vCodec + "\t<actual> " + mvi.getVideoType(),
            vCodec, mvi.getVideoType());

        Log.i(TAG, "Height for file = " + fileName + "\tExpected Height = " +
            export_height + "\tActual VideoHeight = " + mvi.getHeight());
        assertEquals("Export height Mismatch for file " + fileName +
            "\t<expected> " + export_height + "\t<actual> " + mvi.getHeight(),
             export_height, mvi.getHeight());
        if (startTime == 0) {
            if (endTime != 0) {
                Log.i(TAG, "TimeLine Expected = " + (startTime + endTime) +
                    "\t VideoTime= " + mvi.getTimelineDuration());
                assertTrue("Timeline Duration Mismatch for file " + fileName +
                    "<expected> " + (startTime + endTime) + "\t<actual> " +
                    mvi.getTimelineDuration(), checkRange((startTime +
                        endTime), mvi.getTimelineDuration(), 10));
            }
        } else {
            Log.i(TAG, "TimeLine Expected = " + (endTime - startTime) +
                "\t VideoTime= " + mvi.getTimelineDuration());
            assertTrue("Timeline Duration Mismatch for file " + fileName +
                "<expected> " + (endTime - startTime) + "\t<actual> " +
                mvi.getTimelineDuration(), checkRange((endTime -
                    startTime), (int)mvi.getTimelineDuration(), 10));
        }
!!!7180172.java!!!	validateExport(inout videoEditor : VideoEditor, in fileName : String, in export_height : int, in startTime : int, in endTime : int, in vCodec : int, in aCodec : int) : void
        File tempFile = new File(fileName);
        assertEquals("Exported FileName", tempFile.exists(), true);
        final MediaVideoItem mvi = createMediaItem(videoEditor, "m1", fileName,
            MediaItem.RENDERING_MODE_BLACK_BORDER);
        Log.i(TAG, "VideoCodec for file = " + fileName +
            "\tExpected Video Codec = " + vCodec + "\tActual Video Codec = " +
            mvi.getVideoType());
        assertEquals("Export: Video Codec Mismatch for file = " + fileName +
            "\t<expected> " + vCodec + "\t<actual> " + mvi.getVideoType(),
            vCodec, mvi.getVideoType());

        Log.i(TAG, "AudioCodec for file = " + fileName +
            "\tExpected Audio Codec = " + aCodec + "\tActual Audio Codec = " +
            mvi.getAudioType());
        assertEquals("Export: Audio Codec Mismatch for file = " + fileName +
            "\t<expected> " + aCodec + "\t<actual> " + mvi.getAudioType(),
            aCodec, mvi.getAudioType());

        Log.i(TAG, "Height for file = " + fileName + "\tExpected Height = " +
            export_height + "\tActual VideoHeight = " + mvi.getHeight());
        assertEquals("Export: height Mismatch for file " + fileName +
            "\t<expected> " + export_height + "\t<actual> " + mvi.getHeight(),
            export_height, mvi.getHeight());
        if (startTime == 0) {
            if (endTime != 0) {
                Log.i(TAG, "TimeLine Expected = " + (startTime + endTime) +
                    "\t VideoTime= " + mvi.getTimelineDuration());
                assertTrue("Export :Timeline Duration Mismatch for file " +
                    fileName + "<expected> " + (startTime + endTime) +
                    "\t<actual> " + mvi.getTimelineDuration(),
                    checkRange((startTime + endTime), mvi.getTimelineDuration(), 10));
            }
        } else {
            Log.i(TAG, "TimeLine Expected = " + (endTime-startTime) +
                "\t VideoTime= " + mvi.getTimelineDuration());
            assertTrue("Timeline Duration Mismatch for file " + fileName +
                "<expected> " + (endTime - startTime) + "\t<actual> " +
                mvi.getTimelineDuration(), checkRange((endTime -
                    startTime), mvi.getTimelineDuration(), 10));
        }
!!!7180300.java!!!	checkDeleteExistingFile(in filename : String) : void
        Log.i(TAG, ">>>>>>>>>>>>>>>>>>checkDeleteExistingFile  = " + filename);
        if (filename != null) {
            File temp = new File(filename);
            if (temp != null && temp.exists()) {
                temp.delete();
            }
        }
!!!7180428.java!!!	createRandomFile(in location : String) : String
        Random randomGenerator = new Random();
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmssS");
        Date date = new Date();
        final String filePath = location + dateFormat.format(date) +
            randomGenerator.nextInt(10);
        Log.i(TAG, ">>>>>>>>>>>>>>>>createRandomFile  Location= " + location +
            "\t FilePath = " + filePath);
        return filePath;
!!!7180556.java!!!	deleteProject(inout directory : File) : boolean
        Log.i(TAG, ">>>>>>>>>>>>>>>>>>>>>>>>deleteProject  directory= " +
            directory.toString());
        if (directory.isDirectory()) {
            String[] filesInDirecory = directory.list();
            for (int i = 0; i < filesInDirecory.length; i++) {
                boolean success = deleteProject(new File(directory,
                    filesInDirecory[i]));
                if (!success) {
                    return false;
                }
            }
        }
        return directory.delete();
!!!7180684.java!!!	checkProgressCBValues(inout data : int) : boolean
        boolean retFlag = false;
        for (int i = 0; i < 100; i++) {
            if (data[i] == 100) {
                retFlag = true;
                break;
            } else {
                retFlag = false;
            }
        }
        return retFlag;
