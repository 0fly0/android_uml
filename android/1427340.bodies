class TouchUtils
!!!8898444.java!!!	dragQuarterScreenDown(inout test : ActivityInstrumentationTestCase) : void
        dragQuarterScreenDown(test, test.getActivity());
!!!8898572.java!!!	dragQuarterScreenDown(inout test : InstrumentationTestCase, inout activity : Activity) : void
        Display display = activity.getWindowManager().getDefaultDisplay();
        final Point size = new Point();
        display.getSize(size);
        
        final float x = size.x / 2.0f;
        final float fromY = size.y * 0.5f;
        final float toY = size.y * 0.75f;
      
        drag(test, x, x, fromY, toY, 4);
!!!8898700.java!!!	dragQuarterScreenUp(inout test : ActivityInstrumentationTestCase) : void
        dragQuarterScreenUp(test, test.getActivity());
!!!8898828.java!!!	dragQuarterScreenUp(inout test : InstrumentationTestCase, inout activity : Activity) : void
        Display display = activity.getWindowManager().getDefaultDisplay();
        final Point size = new Point();
        display.getSize(size);
        
        final float x = size.x / 2.0f;
        final float fromY = size.y * 0.5f;
        final float toY = size.y * 0.25f;
      
        drag(test, x, x, fromY, toY, 4);
!!!8898956.java!!!	scrollToBottom(inout test : ActivityInstrumentationTestCase, inout v : ViewGroup) : void
        scrollToBottom(test, test.getActivity(), v);
!!!8899084.java!!!	scrollToBottom(inout test : InstrumentationTestCase, inout activity : Activity, inout v : ViewGroup) : void
        View firstChild;
        int firstId = Integer.MIN_VALUE;
        int firstTop = Integer.MIN_VALUE; 
        int prevId;
        int prevTop; 
        do {
            prevId = firstId;
            prevTop = firstTop;
            TouchUtils.dragQuarterScreenUp(test, activity);
            firstChild = v.getChildAt(0);
            firstId = firstChild.getId();
            firstTop = firstChild.getTop(); 
        } while ((prevId != firstId) || (prevTop != firstTop));
!!!8899212.java!!!	scrollToTop(inout test : ActivityInstrumentationTestCase, inout v : ViewGroup) : void
        scrollToTop(test, test.getActivity(), v);
!!!8899340.java!!!	scrollToTop(inout test : InstrumentationTestCase, inout activity : Activity, inout v : ViewGroup) : void
        View firstChild;
        int firstId = Integer.MIN_VALUE;
        int firstTop = Integer.MIN_VALUE; 
        int prevId;
        int prevTop; 
        do {
            prevId = firstId;
            prevTop = firstTop;
            TouchUtils.dragQuarterScreenDown(test, activity);
            firstChild = v.getChildAt(0);
            firstId = firstChild.getId();
            firstTop = firstChild.getTop(); 
        } while ((prevId != firstId) || (prevTop != firstTop));
!!!8899468.java!!!	dragViewToBottom(inout test : ActivityInstrumentationTestCase, inout v : View) : void
        dragViewToBottom(test, test.getActivity(), v, 4);
!!!8899596.java!!!	dragViewToBottom(inout test : InstrumentationTestCase, inout activity : Activity, inout v : View) : void
        dragViewToBottom(test, activity, v, 4);
!!!8899724.java!!!	dragViewToBottom(inout test : ActivityInstrumentationTestCase, inout v : View, in stepCount : int) : void
        dragViewToBottom(test, test.getActivity(), v, stepCount);
!!!8899852.java!!!	dragViewToBottom(inout test : InstrumentationTestCase, inout activity : Activity, inout v : View, in stepCount : int) : void
        int screenHeight = activity.getWindowManager().getDefaultDisplay().getHeight();

        int[] xy = new int[2];
        v.getLocationOnScreen(xy);
        
        final int viewWidth = v.getWidth();
        final int viewHeight = v.getHeight();
        
        final float x = xy[0] + (viewWidth / 2.0f);
        float fromY = xy[1] + (viewHeight / 2.0f);
        float toY = screenHeight - 1;
        
        drag(test, x, x, fromY, toY, stepCount);
!!!8899980.java!!!	tapView(inout test : InstrumentationTestCase, inout v : View) : void
        int[] xy = new int[2];
        v.getLocationOnScreen(xy);
        
        final int viewWidth = v.getWidth();
        final int viewHeight = v.getHeight();
        
        final float x = xy[0] + (viewWidth / 2.0f);
        float y = xy[1] + (viewHeight / 2.0f);
        
        Instrumentation inst = test.getInstrumentation();

        long downTime = SystemClock.uptimeMillis();
        long eventTime = SystemClock.uptimeMillis();
        
        MotionEvent event = MotionEvent.obtain(downTime, eventTime,
                MotionEvent.ACTION_DOWN, x, y, 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();

        eventTime = SystemClock.uptimeMillis();
        final int touchSlop = ViewConfiguration.get(v.getContext()).getScaledTouchSlop();
        event = MotionEvent.obtain(downTime, eventTime, MotionEvent.ACTION_MOVE,
                x + (touchSlop / 2.0f), y + (touchSlop / 2.0f), 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();

        eventTime = SystemClock.uptimeMillis();
        event = MotionEvent.obtain(downTime, eventTime, MotionEvent.ACTION_UP, x, y, 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();
!!!8900108.java!!!	touchAndCancelView(inout test : InstrumentationTestCase, inout v : View) : void
        int[] xy = new int[2];
        v.getLocationOnScreen(xy);

        final int viewWidth = v.getWidth();
        final int viewHeight = v.getHeight();

        final float x = xy[0] + (viewWidth / 2.0f);
        float y = xy[1] + (viewHeight / 2.0f);

        Instrumentation inst = test.getInstrumentation();

        long downTime = SystemClock.uptimeMillis();
        long eventTime = SystemClock.uptimeMillis();

        MotionEvent event = MotionEvent.obtain(downTime, eventTime,
                MotionEvent.ACTION_DOWN, x, y, 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();

        eventTime = SystemClock.uptimeMillis();
        final int touchSlop = ViewConfiguration.get(v.getContext()).getScaledTouchSlop();
        event = MotionEvent.obtain(downTime, eventTime, MotionEvent.ACTION_CANCEL,
                x + (touchSlop / 2.0f), y + (touchSlop / 2.0f), 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();

!!!8900236.java!!!	clickView(inout test : InstrumentationTestCase, inout v : View) : void
        int[] xy = new int[2];
        v.getLocationOnScreen(xy);
        
        final int viewWidth = v.getWidth();
        final int viewHeight = v.getHeight();
        
        final float x = xy[0] + (viewWidth / 2.0f);
        float y = xy[1] + (viewHeight / 2.0f);
        
        Instrumentation inst = test.getInstrumentation();

        long downTime = SystemClock.uptimeMillis();
        long eventTime = SystemClock.uptimeMillis();
        
        MotionEvent event = MotionEvent.obtain(downTime, eventTime,
                MotionEvent.ACTION_DOWN, x, y, 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();
        

        eventTime = SystemClock.uptimeMillis();
        final int touchSlop = ViewConfiguration.get(v.getContext()).getScaledTouchSlop();
        event = MotionEvent.obtain(downTime, eventTime, MotionEvent.ACTION_MOVE,
                x + (touchSlop / 2.0f), y + (touchSlop / 2.0f), 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();

        eventTime = SystemClock.uptimeMillis();
        event = MotionEvent.obtain(downTime, eventTime, MotionEvent.ACTION_UP, x, y, 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();
        
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
!!!8900364.java!!!	longClickView(inout test : ActivityInstrumentationTestCase, inout v : View) : void
        longClickView((InstrumentationTestCase) test, v);
!!!8900492.java!!!	longClickView(inout test : InstrumentationTestCase, inout v : View) : void
        int[] xy = new int[2];
        v.getLocationOnScreen(xy);
        
        final int viewWidth = v.getWidth();
        final int viewHeight = v.getHeight();
        
        final float x = xy[0] + (viewWidth / 2.0f);
        float y = xy[1] + (viewHeight / 2.0f);
        
        Instrumentation inst = test.getInstrumentation();

        long downTime = SystemClock.uptimeMillis();
        long eventTime = SystemClock.uptimeMillis();

        MotionEvent event = MotionEvent.obtain(downTime, eventTime,
                MotionEvent.ACTION_DOWN, x, y, 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();

        eventTime = SystemClock.uptimeMillis();
        final int touchSlop = ViewConfiguration.get(v.getContext()).getScaledTouchSlop();
        event = MotionEvent.obtain(downTime, eventTime, MotionEvent.ACTION_MOVE,
                x + touchSlop / 2, y + touchSlop / 2, 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();
        
        try {
            Thread.sleep((long)(ViewConfiguration.getLongPressTimeout() * 1.5f));
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        eventTime = SystemClock.uptimeMillis();
        event = MotionEvent.obtain(downTime, eventTime, MotionEvent.ACTION_UP, x, y, 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();
!!!8900620.java!!!	dragViewToTop(inout test : ActivityInstrumentationTestCase, inout v : View) : void
        dragViewToTop((InstrumentationTestCase) test, v, 4);
!!!8900748.java!!!	dragViewToTop(inout test : ActivityInstrumentationTestCase, inout v : View, in stepCount : int) : void
        dragViewToTop((InstrumentationTestCase) test, v, stepCount);
!!!8900876.java!!!	dragViewToTop(inout test : InstrumentationTestCase, inout v : View) : void
        dragViewToTop(test, v, 4);
!!!8901004.java!!!	dragViewToTop(inout test : InstrumentationTestCase, inout v : View, in stepCount : int) : void
        int[] xy = new int[2];
        v.getLocationOnScreen(xy);
        
        final int viewWidth = v.getWidth();
        final int viewHeight = v.getHeight();
        
        final float x = xy[0] + (viewWidth / 2.0f);
        float fromY = xy[1] + (viewHeight / 2.0f);
        float toY = 0;
        
        drag(test, x, x, fromY, toY, stepCount);
!!!8901132.java!!!	getStartLocation(inout v : View, in gravity : int, inout xy : int) : void
        v.getLocationOnScreen(xy);

        final int viewWidth = v.getWidth();
        final int viewHeight = v.getHeight();
        
        switch (gravity & Gravity.VERTICAL_GRAVITY_MASK) {
        case Gravity.TOP:
            break;
        case Gravity.CENTER_VERTICAL:
            xy[1] += viewHeight / 2;
            break;
        case Gravity.BOTTOM:
            xy[1] += viewHeight - 1;
            break;
        default:
            // Same as top -- do nothing
        }
        
        switch (gravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
        case Gravity.LEFT:
            break;
        case Gravity.CENTER_HORIZONTAL:
            xy[0] += viewWidth / 2;
            break;
        case Gravity.RIGHT:
            xy[0] += viewWidth - 1;
            break;
        default:
            // Same as left -- do nothing
        }
!!!8901260.java!!!	dragViewBy(inout test : ActivityInstrumentationTestCase, inout v : View, in gravity : int, in deltaX : int, in deltaY : int) : int
        return dragViewBy((InstrumentationTestCase) test, v, gravity, deltaX, deltaY);
!!!8901388.java!!!	dragViewBy(inout test : InstrumentationTestCase, inout v : View, in gravity : int, in deltaX : int, in deltaY : int) : int
        int[] xy = new int[2];
        
        getStartLocation(v, gravity, xy);

        final int fromX = xy[0];
        final int fromY = xy[1];
        
        int distance = (int) Math.sqrt(deltaX * deltaX + deltaY * deltaY);

        drag(test, fromX, fromX + deltaX, fromY, fromY + deltaY, distance);

        return distance;
!!!8901516.java!!!	dragViewTo(inout test : ActivityInstrumentationTestCase, inout v : View, in gravity : int, in toX : int, in toY : int) : int
        return dragViewTo((InstrumentationTestCase) test, v, gravity, toX, toY);
!!!8901644.java!!!	dragViewTo(inout test : InstrumentationTestCase, inout v : View, in gravity : int, in toX : int, in toY : int) : int
        int[] xy = new int[2];

        getStartLocation(v, gravity, xy);
        
        final int fromX = xy[0];
        final int fromY = xy[1];
        
        int deltaX = fromX - toX;
        int deltaY = fromY - toY;
        
        int distance = (int)Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        drag(test, fromX, toX, fromY, toY, distance);
        
        return distance;
!!!8901772.java!!!	dragViewToX(inout test : ActivityInstrumentationTestCase, inout v : View, in gravity : int, in toX : int) : int
        return dragViewToX((InstrumentationTestCase) test, v, gravity, toX);
!!!8901900.java!!!	dragViewToX(inout test : InstrumentationTestCase, inout v : View, in gravity : int, in toX : int) : int
        int[] xy = new int[2];

        getStartLocation(v, gravity, xy);
        
        final int fromX = xy[0];
        final int fromY = xy[1];
        
        int deltaX = fromX - toX;

        drag(test, fromX, toX, fromY, fromY, deltaX);
        
        return deltaX;
!!!8902028.java!!!	dragViewToY(inout test : ActivityInstrumentationTestCase, inout v : View, in gravity : int, in toY : int) : int
        return dragViewToY((InstrumentationTestCase) test, v, gravity, toY);
!!!8902156.java!!!	dragViewToY(inout test : InstrumentationTestCase, inout v : View, in gravity : int, in toY : int) : int
        int[] xy = new int[2];

        getStartLocation(v, gravity, xy);
       
        final int fromX = xy[0];
        final int fromY = xy[1];
        
        int deltaY = fromY - toY;

        drag(test, fromX, fromX, fromY, toY, deltaY);
        
        return deltaY;
!!!8902284.java!!!	drag(inout test : ActivityInstrumentationTestCase, in fromX : float, in toX : float, in fromY : float, in toY : float, in stepCount : int) : void
        drag((InstrumentationTestCase) test, fromX, toX, fromY, toY, stepCount);
!!!8902412.java!!!	drag(inout test : InstrumentationTestCase, in fromX : float, in toX : float, in fromY : float, in toY : float, in stepCount : int) : void
        Instrumentation inst = test.getInstrumentation();

        long downTime = SystemClock.uptimeMillis();
        long eventTime = SystemClock.uptimeMillis();

        float y = fromY;
        float x = fromX;
        
        float yStep = (toY - fromY) / stepCount;
        float xStep = (toX - fromX) / stepCount;

        MotionEvent event = MotionEvent.obtain(downTime, eventTime,
                MotionEvent.ACTION_DOWN, x, y, 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();

        for (int i = 0; i < stepCount; ++i) {
            y += yStep;
            x += xStep;
            eventTime = SystemClock.uptimeMillis();
            event = MotionEvent.obtain(downTime, eventTime, MotionEvent.ACTION_MOVE, x, y, 0);
            inst.sendPointerSync(event);
            inst.waitForIdleSync();
        }

        eventTime = SystemClock.uptimeMillis();
        event = MotionEvent.obtain(downTime, eventTime, MotionEvent.ACTION_UP, x, y, 0);
        inst.sendPointerSync(event);
        inst.waitForIdleSync();
