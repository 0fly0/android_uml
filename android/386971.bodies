class OldBufferedOutputStreamTest
!!!2639259.java!!!	test_ConstructorLjava_io_OutputStream() : void
        try {
            baos = new java.io.ByteArrayOutputStream();
            os = new java.io.BufferedOutputStream(baos);
            os.write(fileString.getBytes(), 0, 500);
        } catch (java.io.IOException e) {
            fail("Constructor test failed");
        }

!!!2639387.java!!!	test_ConstructorLjava_io_OutputStreamI() : void
        baos = new java.io.ByteArrayOutputStream();

        try {
            os = new java.io.BufferedOutputStream(baos, -1);
            fail("Test 1: IllegalArgumentException expected.");
        } catch (IllegalArgumentException e) {
            // Expected.
        }
        try {
            os = new java.io.BufferedOutputStream(baos, 1024);
            os.write(fileString.getBytes(), 0, 500);
        } catch (java.io.IOException e) {
            fail("Test 2: Unexpected IOException.");
        }
!!!2639515.java!!!	test_flush() : void
        baos = new ByteArrayOutputStream();
        os = new java.io.BufferedOutputStream(baos, 600);
        os.write(fileString.getBytes(), 0, 500);
        os.flush();
        assertEquals("Test 1: Bytes not written after flush;",
                500, ((ByteArrayOutputStream) baos).size());
        os.close();

        sos = new Support_OutputStream(true);
        os = new BufferedOutputStream(sos, 10);
        try {
            os.flush();
            fail("Test 2: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
        // To avoid exception during tearDown().
        sos.setThrowsException(false);
!!!2639643.java!!!	test_write$BII() : void
        os = new java.io.BufferedOutputStream(
                baos = new java.io.ByteArrayOutputStream(),512);
        os.write(fileString.getBytes(), 0, 500);
        bais = new java.io.ByteArrayInputStream(baos.toByteArray());
        assertEquals("Test 1: Bytes written, not buffered;",
                0, bais.available());
        os.flush();
        bais = new java.io.ByteArrayInputStream(baos.toByteArray());
        assertEquals("Test 2: Bytes not written after flush;",
                500, bais.available());
        os.write(fileString.getBytes(), 500, 513);
        bais = new java.io.ByteArrayInputStream(baos.toByteArray());
        assertTrue("Test 3: Bytes not written when buffer full.",
                bais.available() >= 1000);
        byte[] wbytes = new byte[1013];
        bais.read(wbytes, 0, 1013);
        assertTrue("Test 4: Incorrect bytes written or read.",
                fileString.substring(0, 1013).equals(
                        new String(wbytes, 0, wbytes.length)));
        os.close();

        sos = new Support_OutputStream(true);
        os = new BufferedOutputStream(sos, 10);
        try {
            os.write(fileString.getBytes(), 0, 500);
            fail("Test 5: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
        // To avoid exception during tearDown().
        sos.setThrowsException(false);
!!!2639771.java!!!	test_write$BII_Exception() : void
        OutputStream bos = new BufferedOutputStream(new ByteArrayOutputStream());
        byte[] nullByteArray = null;
        byte[] byteArray = new byte[10];

        try {
            bos.write(nullByteArray, 0, 1);
            fail("Test 1: NullPointerException expected.");
        } catch (NullPointerException e) {
            // Expected.
        }

        try {
            bos.write(byteArray, -1, 1);
            fail("Test 2: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            bos.write(byteArray, 0, -1);
            fail("Test 3: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }

        try {
            bos.write(byteArray, 1, 10);
            fail("Test 4: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected
        }
!!!2639899.java!!!	test_writeI() : void
        baos = new java.io.ByteArrayOutputStream();
        os = new java.io.BufferedOutputStream(baos);
        os.write('t');
        bais = new java.io.ByteArrayInputStream(baos.toByteArray());
        assertEquals("Test 1: Byte written, not buffered;",
                0, bais.available());
        os.flush();
        bais = new java.io.ByteArrayInputStream(baos.toByteArray());
        assertEquals("Test 2: Byte not written after flush;",
                1, bais.available());
        byte[] wbytes = new byte[1];
        bais.read(wbytes, 0, 1);
        assertEquals("Test 3: Incorrect byte written or read;",
                't', wbytes[0]);
        os.close();

        sos = new Support_OutputStream(true);
        os = new BufferedOutputStream(sos, 1);
        os.write('t');
        try {
            // Exception is only thrown when the buffer is flushed.
            os.write('e');
            fail("Test 4: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
        // To avoid exception during tearDown().
        sos.setThrowsException(false);
!!!2640027.java!!!	tearDown() : void
        try {
            if (bais != null)
                bais.close();
            if (os != null)
                os.close();
            if (baos != null)
                baos.close();
        } catch (Exception e) {
            System.out.println("Exception during tearDown" + e.toString());
        }
