class MonthDisplayHelper
!!!4382732.java!!!	MonthDisplayHelper(in year : int, in month : int, in weekStartDay : int)

        if (weekStartDay < Calendar.SUNDAY || weekStartDay > Calendar.SATURDAY) {
            throw new IllegalArgumentException();
        }
        mWeekStartDay = weekStartDay;

        mCalendar = Calendar.getInstance();
        mCalendar.set(Calendar.YEAR, year);
        mCalendar.set(Calendar.MONTH, month);
        mCalendar.set(Calendar.DAY_OF_MONTH, 1);
        mCalendar.set(Calendar.HOUR_OF_DAY, 0);
        mCalendar.set(Calendar.MINUTE, 0);
        mCalendar.set(Calendar.SECOND, 0);
        mCalendar.getTimeInMillis();

        recalculate();
!!!4382860.java!!!	MonthDisplayHelper(in year : int, in month : int)
        this(year, month, Calendar.SUNDAY);
!!!4382988.java!!!	getYear() : int
        return mCalendar.get(Calendar.YEAR);
!!!4383116.java!!!	getMonth() : int
        return mCalendar.get(Calendar.MONTH);
!!!4383244.java!!!	getWeekStartDay() : int
        return mWeekStartDay;
!!!4383372.java!!!	getFirstDayOfMonth() : int
        return mCalendar.get(Calendar.DAY_OF_WEEK);
!!!4383500.java!!!	getNumberOfDaysInMonth() : int
        return mNumDaysInMonth;
!!!4383628.java!!!	getOffset() : int
        return mOffset;
!!!4383756.java!!!	getDigitsForRow(in row : int) : int
        if (row < 0 || row > 5) {
            throw new IllegalArgumentException("row " + row
                    + " out of range (0-5)");
        }

        int [] result = new int[7];
        for (int column = 0; column < 7; column++) {
            result[column] = getDayAt(row, column);
        }

        return result;
!!!4383884.java!!!	getDayAt(in row : int, in column : int) : int

        if (row == 0 && column < mOffset) {
            return mNumDaysInPrevMonth + column - mOffset + 1;
        }

        int day = 7 * row + column - mOffset + 1;

        return (day > mNumDaysInMonth) ?
                day - mNumDaysInMonth : day;
!!!4384012.java!!!	getRowOf(in day : int) : int
        return (day + mOffset - 1) / 7;
!!!4384140.java!!!	getColumnOf(in day : int) : int
        return (day + mOffset - 1) % 7;
!!!4384268.java!!!	previousMonth() : void
        mCalendar.add(Calendar.MONTH, -1);
        recalculate();
!!!4384396.java!!!	nextMonth() : void
        mCalendar.add(Calendar.MONTH, 1);
        recalculate();
!!!4384524.java!!!	isWithinCurrentMonth(in row : int, in column : int) : boolean

        if (row < 0 || column < 0 || row > 5 || column > 6) {
            return false;
        }

        if (row == 0 && column < mOffset) {
            return false;
        }

        int day = 7 * row + column - mOffset + 1;
        if (day > mNumDaysInMonth) {
            return false;
        }
        return true;
!!!4384652.java!!!	recalculate() : void

        mNumDaysInMonth = mCalendar.getActualMaximum(Calendar.DAY_OF_MONTH);

        mCalendar.add(Calendar.MONTH, -1);
        mNumDaysInPrevMonth = mCalendar.getActualMaximum(Calendar.DAY_OF_MONTH);
        mCalendar.add(Calendar.MONTH, 1);

        int firstDayOfMonth = getFirstDayOfMonth();
        int offset = firstDayOfMonth - mWeekStartDay;
        if (offset < 0) {
            offset += 7;
        }
        mOffset = offset;
