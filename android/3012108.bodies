class PCUtility
!!!12297356.java!!!	PCUtility()

!!!12297484.java!!!	getPCUtilityInstance() : PCUtility
        if (mPCUtility == null) {
            mPCUtility = new PCUtility();
        }
        return mPCUtility;
!!!12297612.java!!!	showCustomToast(in appContext : Context, in message : String, in duration : int) : ToastCreator
        // add view to toast to make it customised
        final ToastCreator toastCreator = new ToastCreator(appContext, message, R.drawable.info);
        toastCreator.setToastDuration(duration);
        toastCreator.showToast();
        return toastCreator;
!!!12297740.java!!!	getDelay() : void
        try {
            Thread.sleep(DELAY_TIME);
        } catch (InterruptedException e) {
            Log.e("PCUtility", "Thread is Interrupted");
        }

!!!12297868.java!!!	playCurrentSource(in context : Context, in checkChannelStateOnly : boolean, in isBannerHotKey : boolean) : void

        Log.d(TAG, "PCUtility.playCurrentSource()");

        int controllerSrc = ControllerBase.getCurrentControllerSource();
        int currSrc = Wrapper.getWrapperInstance().pruneSourceId(
                Wrapper.getWrapperInstance().getCurrentSource());
        if (currSrc == controllerSrc) {
            showLockScreen(context, checkChannelStateOnly);
        }

!!!12297996.java!!!	showLockScreen(in context : Context, in checkChannelStateOnly : boolean) : void

        Log.d(TAG, "showLockScreen()");

        int status = ErrorCodes.INVALID;
        if( Wrapper.getWrapperInstance().isTunerInput()) {
            status = isChannelLocked(context, checkChannelStateOnly);
        } else {
            // force to show lock screen in baseband inputs
            status = ErrorCodes.USDTV_CHANNEL_LOCKED;
        }

        // If current service is block then only show ChannelLockScreen
        if (status == ErrorCodes.USDTV_CHANNEL_LOCKED
                && (WidgetManager.isTopActivity(context, WidgetManager.TV_PLAYER_ACTIVITY_NAME)
                || WidgetManager.isTopActivity(context, WidgetManager.CHANNEL_BANNER_ACTIVITY_NAME))
           ) {
            Bundle bundle = new Bundle();
            bundle.putString(PinActivity.PIN_TITLE,
                    context.getResources().getString(R.string.unlock_string));
            bundle.putString(PinActivity.PIN_MODE, PinActivity.PIN_MODE_CHANNEL_LOCK_SCREEN);
            WidgetManager.createSingleTopActivity(TvIntents.ACTION_SHOW_PINACTIVITY, bundle,
                    context);
        }

!!!12298124.java!!!	isChannelLocked(in context : Context, in checkChannelStateOnly : boolean) : int

        Log.d(TAG, "isChannelLocked()");

        final LiveTv mLiveTv = TvFramework.getInstance().getLiveTvInstance();
        int status = -1;
        status = mLiveTv.playCurrentSource(checkChannelStateOnly);
        Log.i(TAG, "=======================================================");
        Log.i(TAG, "Status Returned By Platform " + ErrorCodes.getErrorString(status));
        Log.i(TAG, "=======================================================");
        return status;
!!!12298252.java!!!	removeChannelLockScreen(in context : Context) : void

        Log.d(TAG, "removeChannelLockScreen()");

        // Below condition is commented as App state is not giving correct
        // result in some use case
        /*
         * if ((USDTVAppState.getCurrentState() &
         * USDTVAppState.CHANNEL_LOCK_EVENT) ==
         * USDTVAppState.CHANNEL_LOCK_EVENT) {
         */
        final Intent releaseIntent = new Intent(PinActivity.ACTION_CLOSE_LOCK_SCREEN);
        context.sendBroadcast(releaseIntent);
        /* } */
