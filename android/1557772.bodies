class MemoryUsage
!!!9621260.java!!!	MemoryUsage(in line : String)
        String[] parsed = line.split(",");

        nativeSharedPages = Integer.parseInt(parsed[1]);
        javaSharedPages = Integer.parseInt(parsed[2]);
        otherSharedPages = Integer.parseInt(parsed[3]);
        nativePrivatePages = Integer.parseInt(parsed[4]);
        javaPrivatePages = Integer.parseInt(parsed[5]);
        otherPrivatePages = Integer.parseInt(parsed[6]);
        allocCount = Integer.parseInt(parsed[7]);
        allocSize = Integer.parseInt(parsed[8]);
        freedCount = Integer.parseInt(parsed[9]);
        freedSize = Integer.parseInt(parsed[10]);
        nativeHeapSize = Long.parseLong(parsed[11]);
!!!9621388.java!!!	MemoryUsage()
        nativeSharedPages = -1;
        javaSharedPages = -1;
        otherSharedPages = -1;
        nativePrivatePages = -1;
        javaPrivatePages = -1;
        otherPrivatePages = -1;

        allocCount = -1;
        allocSize = -1;
        freedCount = -1;
        freedSize = -1;
        nativeHeapSize = -1;
!!!9621516.java!!!	MemoryUsage(in nativeSharedPages : int, in javaSharedPages : int, in otherSharedPages : int, in nativePrivatePages : int, in javaPrivatePages : int, in otherPrivatePages : int, in allocCount : int, in allocSize : int, in freedCount : int, in freedSize : int, in nativeHeapSize : long)
        this.nativeSharedPages = nativeSharedPages;
        this.javaSharedPages = javaSharedPages;
        this.otherSharedPages = otherSharedPages;
        this.nativePrivatePages = nativePrivatePages;
        this.javaPrivatePages = javaPrivatePages;
        this.otherPrivatePages = otherPrivatePages;
        this.allocCount = allocCount;
        this.allocSize = allocSize;
        this.freedCount = freedCount;
        this.freedSize = freedSize;
        this.nativeHeapSize = nativeHeapSize;
!!!9621644.java!!!	subtract(inout baseline : MemoryUsage) : MemoryUsage
        return new MemoryUsage(
                nativeSharedPages - baseline.nativeSharedPages,
                javaSharedPages - baseline.javaSharedPages,
                otherSharedPages - baseline.otherSharedPages,
                nativePrivatePages - baseline.nativePrivatePages,
                javaPrivatePages - baseline.javaPrivatePages,
                otherPrivatePages - baseline.otherPrivatePages,
                allocCount - baseline.allocCount,
                allocSize - baseline.allocSize,
                freedCount - baseline.freedCount,
                freedSize - baseline.freedSize,
                nativeHeapSize - baseline.nativeHeapSize);
!!!9621772.java!!!	javaHeapSize() : int
        return allocSize - freedSize;
!!!9621900.java!!!	totalHeap() : int
        return javaHeapSize() + (int) nativeHeapSize;
!!!9622028.java!!!	javaPagesInK() : int
        return javaSharedPages + javaPrivatePages;
!!!9622156.java!!!	nativePagesInK() : int
        return nativeSharedPages + nativePrivatePages;
!!!9622284.java!!!	otherPagesInK() : int
        return otherSharedPages + otherPrivatePages;
!!!9622412.java!!!	totalPages() : int
        return javaSharedPages + javaPrivatePages + nativeSharedPages +
                nativePrivatePages + otherSharedPages + otherPrivatePages;
!!!9622540.java!!!	isAvailable() : boolean
        return nativeSharedPages != -1;
!!!9622668.java!!!	baseline() : MemoryUsage
        return forClass(null);
!!!9622796.java!!!	forClass(in className : String) : MemoryUsage
        MeasureWithTimeout measurer = new MeasureWithTimeout(className);

        new Thread(measurer).start();

        synchronized (measurer) {
            if (measurer.memoryUsage == null) {
                // Wait up to 10s.
                try {
                    measurer.wait(30000);
                } catch (InterruptedException e) {
                    System.err.println("Interrupted waiting for measurement.");
                    e.printStackTrace();
                    return NOT_AVAILABLE;
                }

                // If it's still null.
                if (measurer.memoryUsage == null) {
                    System.err.println("Timed out while measuring "
                            + className + ".");
                    return NOT_AVAILABLE;
                }
            }

            System.err.println("Got memory usage for " + className + ".");
            return measurer.memoryUsage;
        }
!!!9623308.java!!!	copy(inout in : InputStream, inout out : OutputStream) : void
        byte[] buffer = new byte[1024];
        int read;
        try {
            while ((read = in.read(buffer)) > -1) {
                out.write(buffer, 0, read);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
!!!9623436.java!!!	main(inout args : String) : void
        Root root = Root.fromFile(args[0]);
        root.baseline = baseline();
        for (LoadedClass loadedClass : root.loadedClasses.values()) {
            if (loadedClass.systemClass) {
                loadedClass.measureMemoryUsage();
            }
        }
        root.toFile(args[0]);
