class KeyboardLayoutPickerFragment
!!!14067340.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);

        mInputDeviceDescriptor = getActivity().getIntent().getStringExtra(
                EXTRA_INPUT_DEVICE_DESCRIPTOR);
        if (mInputDeviceDescriptor == null) {
            getActivity().finish();
        }

        mIm = (InputManager)getSystemService(Context.INPUT_SERVICE);
        mKeyboardLayouts = mIm.getKeyboardLayouts();
        Arrays.sort(mKeyboardLayouts);
        setPreferenceScreen(createPreferenceHierarchy());
!!!14067468.java!!!	onResume() : void
        super.onResume();

        mIm.registerInputDeviceListener(this, null);

        InputDevice inputDevice = mIm.getInputDeviceByDescriptor(mInputDeviceDescriptor);
        if (inputDevice == null) {
            getActivity().finish();
            return;
        }
        mInputDeviceId = inputDevice.getId();

        updateCheckedState();
!!!14067596.java!!!	onPause() : void
        mIm.unregisterInputDeviceListener(this);
        mInputDeviceId = -1;

        super.onPause();
!!!14067724.java!!!	onPreferenceTreeClick(inout preferenceScreen : PreferenceScreen, inout preference : Preference) : boolean
        if (preference instanceof CheckBoxPreference) {
            CheckBoxPreference checkboxPref = (CheckBoxPreference)preference;
            KeyboardLayout layout = mPreferenceMap.get(checkboxPref);
            if (layout != null) {
                boolean checked = checkboxPref.isChecked();
                if (checked) {
                    mIm.addKeyboardLayoutForInputDevice(mInputDeviceDescriptor,
                            layout.getDescriptor());
                } else {
                    mIm.removeKeyboardLayoutForInputDevice(mInputDeviceDescriptor,
                            layout.getDescriptor());
                }
                return true;
            }
        }
        return super.onPreferenceTreeClick(preferenceScreen, preference);
!!!14067980.java!!!	onInputDeviceChanged(in deviceId : int) : void
        if (mInputDeviceId >= 0 && deviceId == mInputDeviceId) {
            updateCheckedState();
        }
!!!14068108.java!!!	onInputDeviceRemoved(in deviceId : int) : void
        if (mInputDeviceId >= 0 && deviceId == mInputDeviceId) {
            getActivity().finish();
        }
!!!14068236.java!!!	createPreferenceHierarchy() : PreferenceScreen
        PreferenceScreen root = getPreferenceManager().createPreferenceScreen(getActivity());
        Context context = getActivity();

        for (KeyboardLayout layout : mKeyboardLayouts) {
            CheckBoxPreference pref = new CheckBoxPreference(context);
            pref.setTitle(layout.getLabel());
            pref.setSummary(layout.getCollection());
            root.addPreference(pref);
            mPreferenceMap.put(pref, layout);
        }
        return root;
!!!14068364.java!!!	updateCheckedState() : void
        String[] enabledKeyboardLayouts = mIm.getKeyboardLayoutsForInputDevice(
                mInputDeviceDescriptor);
        Arrays.sort(enabledKeyboardLayouts);

        for (Map.Entry<CheckBoxPreference, KeyboardLayout> entry : mPreferenceMap.entrySet()) {
            entry.getKey().setChecked(Arrays.binarySearch(enabledKeyboardLayouts,
                    entry.getValue().getDescriptor()) >= 0);
        }
