format 74
"dom" // framework::base::opengl::java::javax::xml::transform::dom
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/javax/xml/transform/dom/"
  java_package "javax.xml.transform.dom"
  classview 135579 "dom"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 306971 "DOMLocator"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Indicates the position of a node in a source DOM, intended
primarily for error reporting.  To use a DOMLocator, the receiver of an
error must downcast the {@link javax.xml.transform.SourceLocator}
object returned by an exception. A {@link javax.xml.transform.Transformer}
may use this object for purposes other than error reporting, for instance,
to indicate the source node that originated a result node."
      classrelation 544667 // <generalisation>
	relation 544667 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 544667 // <generalisation>
	  b parent class_ref 306075 // SourceLocator
      end

      operation 1926043 "getOriginatingNode"
	public return_type class_ref 284059 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the node where the event occurred.

@return The node that is the location for the event."
      end
    end

    class 307099 "DOMResult"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Acts as a holder for a transformation result tree in the form of a Document Object Model (DOM) tree.</p>

<p>If no output DOM source is set, the transformation will create a Document node as the holder for the result of the transformation,
which may be retrieved with {@link #getNode()}.</p>

@author <a href=\"Jeff.Suttor@Sun.com\">Jeff Suttor</a>
@version $Revision: 569995 $, $Date: 2007-08-26 21:31:06 -0700 (Sun, 26 Aug 2007) $"
      classrelation 544795 // <realization>
	relation 544795 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 544795 // <realization>
	  b parent class_ref 305819 // Result
      end

      classrelation 544923 // FEATURE (<unidirectional association>)
	relation 544923 --->
	  a role_name "FEATURE" init_value " \"http://javax.xml.transform.dom.DOMResult/feature\"" class_relation const_relation public
	    comment " <p>If {@link javax.xml.transform.TransformerFactory#getFeature}
returns <code>true</code> when passed this value as an argument,
the <code>Transformer</code> supports <code>Result</code> output of this type.</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 544923 // FEATURE (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1926171 "DOMResult"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Zero-argument default constructor.</p>

<p><code>node</code>,
<code>siblingNode</code> and
<code>systemId</code>
will be set to <code>null</code>.</p>"
      end

      operation 1926299 "DOMResult"
	public explicit_return_type ""
	nparams 1
	  param inout name "node" type class_ref 284059 // Node
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Use a DOM node to create a new output target.</p>

<p>In practice, the node should be
a {@link org.w3c.dom.Document} node,
a {@link org.w3c.dom.DocumentFragment} node, or
a {@link org.w3c.dom.Element} node.
In other words, a node that accepts children.</p>

<p><code>siblingNode</code> and
<code>systemId</code>
will be set to <code>null</code>.</p>

@param node The DOM node that will contain the result tree."
      end

      operation 1926427 "DOMResult"
	public explicit_return_type ""
	nparams 2
	  param inout name "node" type class_ref 284059 // Node
	  param inout name "systemId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Use a DOM node to create a new output target with the specified System ID.<p>

<p>In practice, the node should be
a {@link org.w3c.dom.Document} node,
a {@link org.w3c.dom.DocumentFragment} node, or
a {@link org.w3c.dom.Element} node.
In other words, a node that accepts children.</p>

<p><code>siblingNode</code> will be set to <code>null</code>.</p>

@param node The DOM node that will contain the result tree.
@param systemId The system identifier which may be used in association with this node."
      end

      operation 1926555 "DOMResult"
	public explicit_return_type ""
	nparams 2
	  param inout name "node" type class_ref 284059 // Node
	  param inout name "nextSibling" type class_ref 284059 // Node
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before.</p>

<p>In practice, <code>node</code> and <code>nextSibling</code> should be
a {@link org.w3c.dom.Document} node,
a {@link org.w3c.dom.DocumentFragment} node, or
a {@link org.w3c.dom.Element} node.
In other words, a node that accepts children.</p>

<p>Use <code>nextSibling</code> to specify the child node
where the result nodes should be inserted before.
If <code>nextSibling</code> is not a sibling of <code>node</code>,
then an <code>IllegalArgumentException</code> is thrown.
If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>,
then an <code>IllegalArgumentException</code> is thrown.
If <code>nextSibling</code> is <code>null</code>,
then the behavior is the same as calling {@link #DOMResult(Node node)},
i.e. append the result nodes as the last child of the specified <code>node</code>.</p>

<p><code>systemId</code> will be set to <code>null</code>.</p>

@param node The DOM node that will contain the result tree.
@param nextSibling The child node where the result nodes should be inserted before.

@throws IllegalArgumentException If <code>nextSibling</code> is not a sibling of <code>node</code>.
@throws IllegalArgumentException If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>.

@since 1.5"
      end

      operation 1926683 "DOMResult"
	public explicit_return_type ""
	nparams 3
	  param inout name "node" type class_ref 284059 // Node
	  param inout name "nextSibling" type class_ref 284059 // Node
	  param inout name "systemId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Use a DOM node to create a new output target specifying the child node where the result nodes should be inserted before and
the specified System ID.</p>

<p>In practice, <code>node</code> and <code>nextSibling</code> should be
a {@link org.w3c.dom.Document} node,
a {@link org.w3c.dom.DocumentFragment} node, or a
{@link org.w3c.dom.Element} node.
In other words, a node that accepts children.</p>

<p>Use <code>nextSibling</code> to specify the child node
where the result nodes should be inserted before.
If <code>nextSibling</code> is not a sibling of <code>node</code>,
then an <code>IllegalArgumentException</code> is thrown.
If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>,
then an <code>IllegalArgumentException</code> is thrown.
If <code>nextSibling</code> is <code>null</code>,
then the behavior is the same as calling {@link #DOMResult(Node node, String systemId)},
i.e. append the result nodes as the last child of the specified node and use the specified System ID.</p>

@param node The DOM node that will contain the result tree.
@param nextSibling The child node where the result nodes should be inserted before.
@param systemId The system identifier which may be used in association with this node.

@throws IllegalArgumentException If <code>nextSibling</code> is not a sibling of <code>node</code>.
@throws IllegalArgumentException If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>.

@since 1.5"
      end

      operation 1926811 "setNode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 284059 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Set the node that will contain the result DOM tree.<p>

<p>In practice, the node should be
a {@link org.w3c.dom.Document} node,
a {@link org.w3c.dom.DocumentFragment} node, or
a {@link org.w3c.dom.Element} node.
In other words, a node that accepts children.</p>

<p>An <code>IllegalStateException</code> is thrown if <code>nextSibling</code> is not <code>null</code> and
<code>node</code> is not a parent of <code>nextSibling</code>.
An <code>IllegalStateException</code> is thrown if <code>node</code> is <code>null</code> and
<code>nextSibling</code> is not <code>null</code>.</p>

@param node The node to which the transformation will be appended.

@throws IllegalStateException If <code>nextSibling</code> is not <code>null</code> and
  <code>nextSibling</code> is not a child of <code>node</code>.
@throws IllegalStateException If <code>node</code> is <code>null</code> and
  <code>nextSibling</code> is not <code>null</code>."
      end

      operation 1926939 "getNode"
	public return_type class_ref 284059 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the node that will contain the result DOM tree.</p>

<p>If no node was set via
{@link #DOMResult(Node node)},
{@link #DOMResult(Node node, String systeId)},
{@link #DOMResult(Node node, Node nextSibling)},
{@link #DOMResult(Node node, Node nextSibling, String systemId)} or
{@link #setNode(Node node)},
then the node will be set by the transformation, and may be obtained from this method once the transformation is complete.
Calling this method before the transformation will return <code>null</code>.</p>

@return The node to which the transformation will be appended."
      end

      operation 1927067 "setNextSibling"
	public explicit_return_type "void"
	nparams 1
	  param inout name "nextSibling" type class_ref 284059 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Set the child node before which the result nodes will be inserted.</p>

<p>Use <code>nextSibling</code> to specify the child node
before which the result nodes should be inserted.
If <code>nextSibling</code> is not a descendant of <code>node</code>,
then an <code>IllegalArgumentException</code> is thrown.
If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>,
then an <code>IllegalStateException</code> is thrown.
If <code>nextSibling</code> is <code>null</code>,
then the behavior is the same as calling {@link #DOMResult(Node node)},
i.e. append the result nodes as the last child of the specified <code>node</code>.</p>

@param nextSibling The child node before which the result nodes will be inserted.

@throws IllegalArgumentException If <code>nextSibling</code> is not a descendant of <code>node</code>.
@throws IllegalStateException If <code>node</code> is <code>null</code> and <code>nextSibling</code> is not <code>null</code>.

@since 1.5"
      end

      operation 1927195 "getNextSibling"
	public return_type class_ref 284059 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the child node before which the result nodes will be inserted.</p>

<p>If no node was set via
{@link #DOMResult(Node node, Node nextSibling)},
{@link #DOMResult(Node node, Node nextSibling, String systemId)} or
{@link #setNextSibling(Node nextSibling)},
then <code>null</code> will be returned.</p>

@return The child node before which the result nodes will be inserted.

@since 1.5"
      end

      operation 1927323 "setSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "systemId" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Set the systemId that may be used in association with the node.</p>

@param systemId The system identifier as a URI string."
      end

      operation 1927451 "getSystemId"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Get the System Identifier.</p>

<p>If no System ID was set via
{@link #DOMResult(Node node, String systemId)},
{@link #DOMResult(Node node, Node nextSibling, String systemId)} or
{@link #setSystemId(String systemId)},
then <code>null</code> will be returned.</p>

@return The system identifier."
      end

      classrelation 545051 // node (<unidirectional association>)
	relation 545051 --->
	  a role_name "node" init_value " null" private
	    comment "////////////////////////////////////////////////////////////////////
 Internal state.
////////////////////////////////////////////////////////////////////

<p>The node to which the transformation will be appended.</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 545051 // node (<unidirectional association>)
	  b parent class_ref 284059 // Node
      end

      classrelation 545179 // nextSibling (<unidirectional association>)
	relation 545179 --->
	  a role_name "nextSibling" init_value " null" private
	    comment "
<p>The child node before which the result nodes will be inserted.</p>

@since 1.5

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 545179 // nextSibling (<unidirectional association>)
	  b parent class_ref 284059 // Node
      end

      classrelation 545307 // systemId (<unidirectional association>)
	relation 545307 --->
	  a role_name "systemId" init_value " null" private
	    comment "
<p>The System ID that may be used in association with the node.</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 545307 // systemId (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end
    end

    class 307227 "DOMSource"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<p>Acts as a holder for a transformation Source tree in the
form of a Document Object Model (DOM) tree.</p>

<p>Note that XSLT requires namespace support. Attempting to transform a DOM
that was not contructed with a namespace-aware parser may result in errors.
Parsers can be made namespace aware by calling
{@link javax.xml.parsers.DocumentBuilderFactory#setNamespaceAware(boolean awareness)}.</p>

@author <a href=\"Jeff.Suttor@Sun.com\">Jeff Suttor</a>
@version $Revision: 446598 $, $Date: 2006-09-15 05:55:40 -0700 (Fri, 15 Sep 2006) $
@see <a href=\"http://www.w3.org/TR/DOM-Level-2\">Document Object Model (DOM) Level 2 Specification</a>"
      classrelation 545435 // <realization>
	relation 545435 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 545435 // <realization>
	  b parent class_ref 305947 // Source
      end

      classrelation 545563 // node (<unidirectional association>)
	relation 545563 --->
	  a role_name "node" private
	    comment "
<p><code>Node</code> to serve as DOM source.</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 545563 // node (<unidirectional association>)
	  b parent class_ref 284059 // Node
      end

      classrelation 545691 // systemID (<unidirectional association>)
	relation 545691 --->
	  a role_name "systemID" private
	    comment "
<p>The base ID (URL or system ID) from where URLs
will be resolved.</p>

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 545691 // systemID (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      classrelation 545819 // FEATURE (<unidirectional association>)
	relation 545819 --->
	  a role_name "FEATURE" init_value "
        \"http://javax.xml.transform.dom.DOMSource/feature\"" class_relation const_relation public
	    comment " If {@link javax.xml.transform.TransformerFactory#getFeature}
returns true when passed this value as an argument,
the Transformer supports Source input of this type.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 545819 // FEATURE (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      operation 1927579 "DOMSource"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "<p>Zero-argument default constructor.  If this constructor is used, and
no DOM source is set using {@link #setNode(Node node)} , then the
<code>Transformer</code> will
create an empty source {@link org.w3c.dom.Document} using
{@link javax.xml.parsers.DocumentBuilder#newDocument()}.</p>

@see javax.xml.transform.Transformer#transform(Source xmlSource, Result outputTarget)"
      end

      operation 1927707 "DOMSource"
	public explicit_return_type ""
	nparams 1
	  param inout name "n" type class_ref 284059 // Node
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new input source with a DOM node.  The operation
will be applied to the subtree rooted at this node.  In XSLT,
a \"/\" pattern still means the root of the tree (not the subtree),
and the evaluation of global variables and parameters is done
from the root node also.

@param n The DOM node that will contain the Source tree."
      end

      operation 1927835 "DOMSource"
	public explicit_return_type ""
	nparams 2
	  param inout name "node" type class_ref 284059 // Node
	  param inout name "systemID" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Create a new input source with a DOM node, and with the
system ID also passed in as the base URI.

@param node The DOM node that will contain the Source tree.
@param systemID Specifies the base URI associated with node."
      end

      operation 1927963 "setNode"
	public explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 284059 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the node that will represents a Source DOM tree.

@param node The node that is to be transformed."
      end

      operation 1928091 "getNode"
	public return_type class_ref 284059 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the node that represents a Source DOM tree.

@return The node that is to be transformed."
      end

      operation 1928219 "setSystemId"
	public explicit_return_type "void"
	nparams 1
	  param inout name "systemID" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Set the base ID (URL or system ID) from where URLs
will be resolved.

@param systemID Base URL for this DOM tree."
      end

      operation 1928347 "getSystemId"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Get the base ID (URL or system ID) from where URLs
will be resolved.

@return Base URL for this DOM tree."
      end
    end
  end

  deploymentview 134427 "dom"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 260763 "DOMLocator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.SourceLocator;
import org.w3c.dom.Node;
${definition}"
      associated_classes
	class_ref 306971 // DOMLocator
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: DOMLocator.java 446598 2006-09-15 12:55:40Z jeremias $"
    end

    artifact 260891 "DOMResult"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.Result;
import org.w3c.dom.Node;
${definition}"
      associated_classes
	class_ref 307099 // DOMResult
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: DOMResult.java 569995 2007-08-27 04:31:06Z mrglavas $"
    end

    artifact 261019 "DOMSource"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import javax.xml.transform.Source;
import org.w3c.dom.Node;
${definition}"
      associated_classes
	class_ref 307227 // DOMSource
      end
      comment "Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 $Id: DOMSource.java 446598 2006-09-15 12:55:40Z jeremias $"
    end
  end
end
