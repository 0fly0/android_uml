class OldFloatTest
!!!2725787.java!!!	test_ConstructorLjava_lang_String() : void
        try {
            new Float("900.89ff");
            fail("NumberFormatException is not thrown.");
        } catch(NumberFormatException nfe) {
           //expected
        }
!!!2725915.java!!!	test_ConstructorD() : void
        Float f = new Float(Double.MAX_VALUE);
        assertTrue("Created incorrect float", f.floatValue() == Float.POSITIVE_INFINITY);
!!!2726043.java!!!	test_parseFloatLExceptions() : void
        String [] incorrectStrings = {"", ";", "99999999EE999999", "99999l",
                 "0x1.f.ffffep127"};
        for(int i = 0; i < incorrectStrings.length; i++) {
            try {
                Float.parseFloat(incorrectStrings[i]);
                fail("NumberFormatException is not thrown for string: "
                        + incorrectStrings[i]);
            } catch(NumberFormatException nfe) {
                //expected
            }
        }
!!!2726171.java!!!	test_floatToIntBitsF() : void
        assertEquals(0x7f800000, Float.floatToIntBits(Float.POSITIVE_INFINITY));
        assertEquals(0xff800000, Float.floatToIntBits(Float.NEGATIVE_INFINITY));
        assertEquals(0x7fc00000, Float.floatToIntBits(Float.NaN));
!!!2726299.java!!!	test_floatToRawIntBitsF() : void
        assertEquals(0x7f800000, Float.floatToRawIntBits(Float.POSITIVE_INFINITY));
        assertEquals(0xff800000, Float.floatToRawIntBits(Float.NEGATIVE_INFINITY));
        assertEquals(0x7fc00000, Float.floatToRawIntBits(Float.NaN));
!!!2726427.java!!!	test_hashCode() : void
        assertTrue(new Float(Float.MAX_VALUE).hashCode() != new Float(Float.MIN_VALUE).hashCode());
!!!2726555.java!!!	test_intBitsToFloatI() : void
        assertEquals(Float.POSITIVE_INFINITY, Float.intBitsToFloat(0x7f800000));
        assertEquals(Float.NEGATIVE_INFINITY, Float.intBitsToFloat(0xff800000));

        assertEquals(Float.NaN, Float.intBitsToFloat(0x7f800001));
        assertEquals(Float.NaN, Float.intBitsToFloat(0x7fffffff));
        assertEquals(Float.NaN, Float.intBitsToFloat(0xff800001));
        assertEquals(Float.NaN, Float.intBitsToFloat(0xffffffff));
!!!2726683.java!!!	test_intValue() : void
        assertEquals(Integer.MAX_VALUE, new Float(Float.MAX_VALUE).intValue());
        assertEquals(0, new Float(Float.MIN_VALUE).intValue());
!!!2726811.java!!!	test_isNaNF() : void
        assertFalse(Float.isNaN(12.09f));
        assertFalse(Float.isNaN(Float.MAX_VALUE));
        assertFalse(Float.isNaN(Float.MIN_VALUE));
!!!2726939.java!!!	test_longValue() : void
        assertEquals(Long.MAX_VALUE, new Float(Float.MAX_VALUE).longValue());
        assertEquals(0, new Float(Float.MIN_VALUE).longValue());
