class ScheduledThreadPoolExecutor
!!!1604763.java!!!	now() : long
        return System.nanoTime();
!!!1606043.java!!!	canRunInCurrentRunState(inout periodic : boolean) : boolean
        return isRunningOrShutdown(periodic ?
                                   continueExistingPeriodicTasksAfterShutdown :
                                   executeExistingDelayedTasksAfterShutdown);
!!!1606171.java!!!	delayedExecute(inout task : RunnableScheduledFuture) : void
        if (isShutdown())
            reject(task);
        else {
            super.getQueue().add(task);
            if (isShutdown() &&
                !canRunInCurrentRunState(task.isPeriodic()) &&
                remove(task))
                task.cancel(false);
            else
                ensurePrestart();
        }
!!!1606299.java!!!	reExecutePeriodic(inout task : RunnableScheduledFuture) : void
        if (canRunInCurrentRunState(true)) {
            super.getQueue().add(task);
            if (!canRunInCurrentRunState(true) && remove(task))
                task.cancel(false);
            else
                ensurePrestart();
        }
!!!1606427.java!!!	onShutdown() : void
        BlockingQueue<Runnable> q = super.getQueue();
        boolean keepDelayed =
            getExecuteExistingDelayedTasksAfterShutdownPolicy();
        boolean keepPeriodic =
            getContinueExistingPeriodicTasksAfterShutdownPolicy();
        if (!keepDelayed && !keepPeriodic) {
            for (Object e : q.toArray())
                if (e instanceof RunnableScheduledFuture<?>)
                    ((RunnableScheduledFuture<?>) e).cancel(false);
            q.clear();
        }
        else {
            // Traverse snapshot to avoid iterator exceptions
            for (Object e : q.toArray()) {
                if (e instanceof RunnableScheduledFuture) {
                    RunnableScheduledFuture<?> t =
                        (RunnableScheduledFuture<?>)e;
                    if ((t.isPeriodic() ? !keepPeriodic : !keepDelayed) ||
                        t.isCancelled()) { // also remove if already cancelled
                        if (q.remove(t))
                            t.cancel(false);
                    }
                }
            }
        }
        tryTerminate();
!!!1606555.java!!!	decorateTask(inout runnable : Runnable, inout task : RunnableScheduledFuture) : RunnableScheduledFuture
        return task;
!!!1606683.java!!!	decorateTask(inout callable : Callable, inout task : RunnableScheduledFuture) : RunnableScheduledFuture
        return task;
!!!1606811.java!!!	ScheduledThreadPoolExecutor(in corePoolSize : int)
        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,
              new DelayedWorkQueue());
!!!1606939.java!!!	ScheduledThreadPoolExecutor(in corePoolSize : int, inout threadFactory : ThreadFactory)
        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,
              new DelayedWorkQueue(), threadFactory);
!!!1607067.java!!!	ScheduledThreadPoolExecutor(in corePoolSize : int, inout handler : RejectedExecutionHandler)
        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,
              new DelayedWorkQueue(), handler);
!!!1607195.java!!!	ScheduledThreadPoolExecutor(in corePoolSize : int, inout threadFactory : ThreadFactory, inout handler : RejectedExecutionHandler)
        super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,
              new DelayedWorkQueue(), threadFactory, handler);
!!!1607323.java!!!	triggerTime(in delay : long, inout unit : TimeUnit) : long
        return triggerTime(unit.toNanos((delay < 0) ? 0 : delay));
!!!1607451.java!!!	triggerTime(in delay : long) : long
        return now() +
            ((delay < (Long.MAX_VALUE >> 1)) ? delay : overflowFree(delay));
!!!1607579.java!!!	overflowFree(in delay : long) : long
        Delayed head = (Delayed) super.getQueue().peek();
        if (head != null) {
            long headDelay = head.getDelay(NANOSECONDS);
            if (headDelay < 0 && (delay - headDelay < 0))
                delay = Long.MAX_VALUE + headDelay;
        }
        return delay;
!!!1607707.java!!!	schedule(inout command : Runnable, in delay : long, inout unit : TimeUnit) : ScheduledFuture
        if (command == null || unit == null)
            throw new NullPointerException();
        RunnableScheduledFuture<?> t = decorateTask(command,
            new ScheduledFutureTask<Void>(command, null,
                                          triggerTime(delay, unit)));
        delayedExecute(t);
        return t;
!!!1607835.java!!!	schedule(inout callable : Callable, in delay : long, inout unit : TimeUnit) : ScheduledFuture
        if (callable == null || unit == null)
            throw new NullPointerException();
        RunnableScheduledFuture<V> t = decorateTask(callable,
            new ScheduledFutureTask<V>(callable,
                                       triggerTime(delay, unit)));
        delayedExecute(t);
        return t;
!!!1607963.java!!!	scheduleAtFixedRate(inout command : Runnable, in initialDelay : long, in period : long, inout unit : TimeUnit) : ScheduledFuture
        if (command == null || unit == null)
            throw new NullPointerException();
        if (period <= 0)
            throw new IllegalArgumentException();
        ScheduledFutureTask<Void> sft =
            new ScheduledFutureTask<Void>(command,
                                          null,
                                          triggerTime(initialDelay, unit),
                                          unit.toNanos(period));
        RunnableScheduledFuture<Void> t = decorateTask(command, sft);
        sft.outerTask = t;
        delayedExecute(t);
        return t;
!!!1608091.java!!!	scheduleWithFixedDelay(inout command : Runnable, in initialDelay : long, in delay : long, inout unit : TimeUnit) : ScheduledFuture
        if (command == null || unit == null)
            throw new NullPointerException();
        if (delay <= 0)
            throw new IllegalArgumentException();
        ScheduledFutureTask<Void> sft =
            new ScheduledFutureTask<Void>(command,
                                          null,
                                          triggerTime(initialDelay, unit),
                                          unit.toNanos(-delay));
        RunnableScheduledFuture<Void> t = decorateTask(command, sft);
        sft.outerTask = t;
        delayedExecute(t);
        return t;
!!!1608219.java!!!	execute(inout command : Runnable) : void
        schedule(command, 0, NANOSECONDS);
!!!1608347.java!!!	submit(inout task : Runnable) : Future
        return schedule(task, 0, NANOSECONDS);
!!!1608475.java!!!	submit(inout task : Runnable, inout result : T) : Future
        return schedule(Executors.callable(task, result), 0, NANOSECONDS);
!!!1608603.java!!!	submit(inout task : Callable) : Future
        return schedule(task, 0, NANOSECONDS);
!!!1608731.java!!!	setContinueExistingPeriodicTasksAfterShutdownPolicy(inout value : boolean) : void
        continueExistingPeriodicTasksAfterShutdown = value;
        if (!value && isShutdown())
            onShutdown();
!!!1608859.java!!!	getContinueExistingPeriodicTasksAfterShutdownPolicy() : boolean
        return continueExistingPeriodicTasksAfterShutdown;
!!!1608987.java!!!	setExecuteExistingDelayedTasksAfterShutdownPolicy(inout value : boolean) : void
        executeExistingDelayedTasksAfterShutdown = value;
        if (!value && isShutdown())
            onShutdown();
!!!1609115.java!!!	getExecuteExistingDelayedTasksAfterShutdownPolicy() : boolean
        return executeExistingDelayedTasksAfterShutdown;
!!!1609243.java!!!	setRemoveOnCancelPolicy(inout value : boolean) : void
        removeOnCancel = value;
!!!1609371.java!!!	getRemoveOnCancelPolicy() : boolean
        return removeOnCancel;
!!!1609499.java!!!	shutdown() : void
        super.shutdown();
!!!1609627.java!!!	shutdownNow() : List
        return super.shutdownNow();
!!!1609755.java!!!	getQueue() : BlockingQueue
        return super.getQueue();
