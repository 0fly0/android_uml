class HttpAuthHeader
!!!3734924.java!!!	HttpAuthHeader(in header : String)
        if (header != null) {
            parseHeader(header);
        }
!!!3735052.java!!!	isProxy() : boolean
        return mIsProxy;
!!!3735180.java!!!	setProxy() : void
        mIsProxy = true;
!!!3735308.java!!!	getUsername() : String
        return mUsername;
!!!3735436.java!!!	setUsername(in username : String) : void
        mUsername = username;
!!!3735564.java!!!	getPassword() : String
        return mPassword;
!!!3735692.java!!!	setPassword(in password : String) : void
        mPassword = password;
!!!3735820.java!!!	isBasic() : boolean
        return mScheme == BASIC;
!!!3735948.java!!!	isDigest() : boolean
        return mScheme == DIGEST;
!!!3736076.java!!!	getScheme() : int
        return mScheme;
!!!3736204.java!!!	getStale() : boolean
        return mStale;
!!!3736332.java!!!	getRealm() : String
        return mRealm;
!!!3736460.java!!!	getNonce() : String
        return mNonce;
!!!3736588.java!!!	getOpaque() : String
        return mOpaque;
!!!3736716.java!!!	getQop() : String
        return mQop;
!!!3736844.java!!!	getAlgorithm() : String
        return mAlgorithm;
!!!3736972.java!!!	isSupportedScheme() : boolean
        // it is a good idea to enforce non-null realms!
        if (mRealm != null) {
            if (mScheme == BASIC) {
                return true;
            } else {
                if (mScheme == DIGEST) {
                    return
                        mAlgorithm.equals("md5") &&
                        (mQop == null || mQop.equals("auth"));
                }
            }
        }

        return false;
!!!3737100.java!!!	parseHeader(in header : String) : void
        if (HttpLog.LOGV) {
            HttpLog.v("HttpAuthHeader.parseHeader(): header: " + header);
        }

        if (header != null) {
            String parameters = parseScheme(header);
            if (parameters != null) {
                // if we have a supported scheme
                if (mScheme != UNKNOWN) {
                    parseParameters(parameters);
                }
            }
        }
!!!3737228.java!!!	parseScheme(in header : String) : String
        if (header != null) {
            int i = header.indexOf(' ');
            if (i >= 0) {
                String scheme = header.substring(0, i).trim();
                if (scheme.equalsIgnoreCase(DIGEST_TOKEN)) {
                    mScheme = DIGEST;

                    // md5 is the default algorithm!!!
                    mAlgorithm = "md5";
                } else {
                    if (scheme.equalsIgnoreCase(BASIC_TOKEN)) {
                        mScheme = BASIC;
                    }
                }

                return header.substring(i + 1);
            }
        }

        return null;
!!!3737356.java!!!	parseParameters(in parameters : String) : void
        if (HttpLog.LOGV) {
            HttpLog.v("HttpAuthHeader.parseParameters():" +
                      " parameters: " + parameters);
        }

        if (parameters != null) {
            int i;
            do {
                i = parameters.indexOf(',');
                if (i < 0) {
                    // have only one parameter
                    parseParameter(parameters);
                } else {
                    parseParameter(parameters.substring(0, i));
                    parameters = parameters.substring(i + 1);
                }
            } while (i >= 0);
        }
!!!3737484.java!!!	parseParameter(in parameter : String) : void
        if (parameter != null) {
            // here, we are looking for the 1st occurence of '=' only!!!
            int i = parameter.indexOf('=');
            if (i >= 0) {
                String token = parameter.substring(0, i).trim();
                String value =
                    trimDoubleQuotesIfAny(parameter.substring(i + 1).trim());

                if (HttpLog.LOGV) {
                    HttpLog.v("HttpAuthHeader.parseParameter():" +
                              " token: " + token +
                              " value: " + value);
                }

                if (token.equalsIgnoreCase(REALM_TOKEN)) {
                    mRealm = value;
                } else {
                    if (mScheme == DIGEST) {
                        parseParameter(token, value);
                    }
                }
            }
        }
!!!3737612.java!!!	parseParameter(in token : String, in value : String) : void
        if (token != null && value != null) {
            if (token.equalsIgnoreCase(NONCE_TOKEN)) {
                mNonce = value;
                return;
            }

            if (token.equalsIgnoreCase(STALE_TOKEN)) {
                parseStale(value);
                return;
            }

            if (token.equalsIgnoreCase(OPAQUE_TOKEN)) {
                mOpaque = value;
                return;
            }

            if (token.equalsIgnoreCase(QOP_TOKEN)) {
                mQop = value.toLowerCase();
                return;
            }

            if (token.equalsIgnoreCase(ALGORITHM_TOKEN)) {
                mAlgorithm = value.toLowerCase();
                return;
            }
        }
!!!3737740.java!!!	parseStale(in value : String) : void
        if (value != null) {
            if (value.equalsIgnoreCase("true")) {
                mStale = true;
            }
        }
!!!3737868.java!!!	trimDoubleQuotesIfAny(in value : String) : String
        if (value != null) {
            int len = value.length();
            if (len > 2 &&
                value.charAt(0) == '\"' && value.charAt(len - 1) == '\"') {
                return value.substring(1, len - 1);
            }
        }

        return value;
