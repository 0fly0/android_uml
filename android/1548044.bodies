class ICU_Delegate
!!!9564556.java!!!	toLowerCase(in s : String, in localeName : String) : String
        return s.toLowerCase();
!!!9564684.java!!!	toUpperCase(in s : String, in localeName : String) : String
        return s.toUpperCase();
!!!9564812.java!!!	getIcuVersion() : String
        return "unknown_layoutlib";
!!!9564940.java!!!	getUnicodeVersion() : String
        return "5.2";
!!!9565068.java!!!	getAvailableBreakIteratorLocalesNative() : String
        return new String[0];
!!!9565196.java!!!	getAvailableCalendarLocalesNative() : String
        return new String[0];
!!!9565324.java!!!	getAvailableCollatorLocalesNative() : String
        return new String[0];
!!!9565452.java!!!	getAvailableDateFormatLocalesNative() : String
        return new String[0];
!!!9565580.java!!!	getAvailableLocalesNative() : String
        return new String[0];
!!!9565708.java!!!	getAvailableNumberFormatLocalesNative() : String
        return new String[0];
!!!9565836.java!!!	getAvailableCurrencyCodes() : String
        return new String[0];
!!!9565964.java!!!	getCurrencyCode(in locale : String) : String
        return "";
!!!9566092.java!!!	getCurrencyDisplayName(in locale : String, in currencyCode : String) : String
        return "";
!!!9566220.java!!!	getCurrencyFractionDigits(in currencyCode : String) : int
        return 0;
!!!9566348.java!!!	getCurrencySymbol(in locale : String, in currencyCode : String) : String
        return "";
!!!9566476.java!!!	getDisplayCountryNative(in countryCode : String, in locale : String) : String
        return "";
!!!9566604.java!!!	getDisplayLanguageNative(in languageCode : String, in locale : String) : String
        return "";
!!!9566732.java!!!	getDisplayVariantNative(in variantCode : String, in locale : String) : String
        return "";
!!!9566860.java!!!	getISO3CountryNative(in locale : String) : String
        return "";
!!!9566988.java!!!	getISO3LanguageNative(in locale : String) : String
        return "";
!!!9567116.java!!!	addLikelySubtags(in locale : String) : String
        return "";
!!!9567244.java!!!	getScript(in locale : String) : String
        return "";
!!!9567372.java!!!	getISOLanguagesNative() : String
        return Locale.getISOLanguages();
!!!9567500.java!!!	getISOCountriesNative() : String
        return Locale.getISOCountries();
!!!9567628.java!!!	initLocaleDataImpl(in locale : String, inout result : LocaleData) : boolean

        // Used by Calendar.
        result.firstDayOfWeek = Integer.valueOf(1);
        result.minimalDaysInFirstWeek = Integer.valueOf(1);

        // Used by DateFormatSymbols.
        result.amPm = new String[] { "AM", "PM" };
        result.eras = new String[] { "BC", "AD" };

        result.longMonthNames = new String[] { "January", "February", "March", "April", "May",
                "June", "July", "August", "September", "October", "November", "December" };
        result.shortMonthNames = new String[] { "Jan", "Feb", "Mar", "Apr", "May",
                "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
        result.longStandAloneMonthNames = result.longMonthNames;
        result.shortStandAloneMonthNames = result.shortMonthNames;

        result.longWeekdayNames = new String[] {
                "Monday" ,"Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
        result.shortWeekdayNames = new String[] {
                "Mon" ,"Tue", "Wed", "Thu", "Fri", "Sat", "Sun" };
        result.longStandAloneWeekdayNames = result.longWeekdayNames;
        result.shortStandAloneWeekdayNames = result.shortWeekdayNames;

        result.fullTimeFormat = "";
        result.longTimeFormat = "";
        result.mediumTimeFormat = "";
        result.shortTimeFormat = "";

        result.fullDateFormat = "";
        result.longDateFormat = "";
        result.mediumDateFormat = "";
        result.shortDateFormat = "";

        // Used by DecimalFormatSymbols.
        result.zeroDigit = '0';
        result.decimalSeparator = '.';
        result.groupingSeparator = ',';
        result.patternSeparator = ' ';
        result.percent = '%';
        result.perMill = '\u2030';
        result.monetarySeparator = ' ';
        result.minusSign = '-';
        result.exponentSeparator = "e";
        result.infinity = "\u221E";
        result.NaN = "NaN";
        // Also used by Currency.
        result.currencySymbol = "$";
        result.internationalCurrencySymbol = "USD";

        // Used by DecimalFormat and NumberFormat.
        result.numberPattern = "%f";
        result.integerPattern = "%d";
        result.currencyPattern = "%s";
        result.percentPattern = "%f";

        return true;
