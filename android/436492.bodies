class ShapeCache
!!!1124108.cpp!!!	ShapeCache(in name : char, in propertyName : char, in defaultSize : float)
    char property[PROPERTY_VALUE_MAX];
    if (property_get(propertyName, property, NULL) > 0) {
        INIT_LOGD("  Setting %s cache size to %sMB", name, property);
        setMaxSize(MB(atof(property)));
    } else {
        INIT_LOGD("  Using default %s cache size of %.2fMB", name, defaultSize);
    }

    size_t len = strlen(name);
    mName = new char[len + 1];
    strcpy(mName, name);
    mName[len] = '\0';

    init();
!!!1124236.cpp!!!	~ShapeCache()
    mCache.clear();
    delete[] mName;
!!!1124364.cpp!!!	operator ()(inout path : Entry, inout texture : PathTexture) : void
    removeTexture(texture);
!!!1124492.cpp!!!	clear() : void
    mCache.clear();
!!!1124620.cpp!!!	setMaxSize(in maxSize : uint32_t) : void
    mMaxSize = maxSize;
    while (mSize > mMaxSize) {
        mCache.removeOldest();
    }
!!!1124748.cpp!!!	getMaxSize() : uint32_t
    return mMaxSize;
!!!1124876.cpp!!!	getSize() : uint32_t
    return mSize;
!!!1125004.cpp!!!	addTexture(in entry : Entry, in path : SkPath, in paint : SkPaint) : PathTexture

    float left, top, offset;
    uint32_t width, height;
    computePathBounds(path, paint, left, top, offset, width, height);

    if (!checkTextureSize(width, height)) return NULL;

    purgeCache(width, height);

    SkBitmap bitmap;
    initBitmap(bitmap, width, height);

    SkPaint pathPaint(*paint);
    initPaint(pathPaint);

    SkCanvas canvas(bitmap);
    canvas.translate(-left + offset, -top + offset);
    canvas.drawPath(*path, pathPaint);

    PathTexture* texture = createTexture(left, top, offset, width, height, path->getGenerationID());
    addTexture(entry, &bitmap, texture);

    return texture;
!!!1125260.cpp!!!	addTexture(in entry : Entry, inout bitmap : SkBitmap, inout texture : PathTexture) : void
    generateTexture(*bitmap, texture);

    uint32_t size = texture->width * texture->height;
    if (size < mMaxSize) {
        mSize += size;
        SHAPE_LOGD("ShapeCache::get: create %s: name, size, mSize = %d, %d, %d",
                mName, texture->id, size, mSize);
        if (mDebugEnabled) {
            ALOGD("Shape %s created, size = %d", mName, size);
        }
        mCache.put(entry, texture);
    } else {
        texture->cleanup = true;
    }
!!!1125388.cpp!!!	purgeCache(in width : uint32_t, in height : uint32_t) : void
    const uint32_t size = width * height;
    // Don't even try to cache a bitmap that's bigger than the cache
    if (size < mMaxSize) {
        while (mSize + size > mMaxSize) {
            mCache.removeOldest();
        }
    }
!!!1125516.cpp!!!	initBitmap(inout bitmap : SkBitmap, in width : uint32_t, in height : uint32_t) : void
    bitmap.setConfig(SkBitmap::kA8_Config, width, height);
    bitmap.allocPixels();
    bitmap.eraseColor(0);
!!!1125644.cpp!!!	initPaint(inout paint : SkPaint) : void
    // Make sure the paint is opaque, color, alpha, filter, etc.
    // will be applied later when compositing the alpha8 texture
    paint.setColor(0xff000000);
    paint.setAlpha(255);
    paint.setColorFilter(NULL);
    paint.setMaskFilter(NULL);
    paint.setShader(NULL);
    SkXfermode* mode = SkXfermode::Create(SkXfermode::kSrc_Mode);
    SkSafeUnref(paint.setXfermode(mode));
!!!1125772.cpp!!!	checkTextureSize(in width : uint32_t, in height : uint32_t) : bool
    if (width > mMaxTextureSize || height > mMaxTextureSize) {
        ALOGW("Shape %s too large to be rendered into a texture (%dx%d, max=%dx%d)",
                mName, width, height, mMaxTextureSize, mMaxTextureSize);
        return false;
    }
    return true;
!!!1126028.cpp!!!	removeTexture(inout texture : PathTexture) : void
    if (texture) {
        const uint32_t size = texture->width * texture->height;
        mSize -= size;

        SHAPE_LOGD("ShapeCache::callback: delete %s: name, size, mSize = %d, %d, %d",
                mName, texture->id, size, mSize);
        if (mDebugEnabled) {
            ALOGD("Shape %s deleted, size = %d", mName, size);
        }

        glDeleteTextures(1, &texture->id);
        delete texture;
    }
!!!1126156.cpp!!!	generateTexture(inout bitmap : SkBitmap, inout texture : Texture) : void
    SkAutoLockPixels alp(bitmap);
    if (!bitmap.readyToDraw()) {
        ALOGE("Cannot generate texture from bitmap");
        return;
    }

    glGenTextures(1, &texture->id);

    glBindTexture(GL_TEXTURE_2D, texture->id);
    // Textures are Alpha8
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);

    texture->blend = true;
    glTexImage2D(GL_TEXTURE_2D, 0, GL_ALPHA, texture->width, texture->height, 0,
            GL_ALPHA, GL_UNSIGNED_BYTE, bitmap.getPixels());

    texture->setFilter(GL_LINEAR);
    texture->setWrap(GL_CLAMP_TO_EDGE);
!!!1126284.cpp!!!	init() : void
    mCache.setOnEntryRemovedListener(this);

    GLint maxTextureSize;
    glGetIntegerv(GL_MAX_TEXTURE_SIZE, &maxTextureSize);
    mMaxTextureSize = maxTextureSize;

    mDebugEnabled = readDebugLevel() & kDebugCaches;
