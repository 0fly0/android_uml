class LocationSetupActivity
!!!14183308.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);

        setupLocationEditText();
!!!14183436.java!!!	getLayoutResource() : int
        return R.layout.location_setup;
!!!14183564.java!!!	onStart() : void
        super.onStart();
        findViewById(R.id.zip_code).requestFocus();
!!!14183692.java!!!	onSaveActivity() : void
        parseAndStoreLocation();
!!!14183820.java!!!	getSummaryOnFinish() : String
        return getLocationFromAddress(mDeterminedAddress);
!!!14183948.java!!!	getExplanationResourceId() : int
        return R.string.location_explanation;
!!!14184076.java!!!	getSkipWarningResourceId() : int
        return R.string.location_skip_warning;
!!!14184204.java!!!	skipStep() : void
        if (TextUtils.isEmpty(getZipCode())) {
            super.skipStep();
        } else {
            super.onSkip();
        }
!!!14184332.java!!!	parseAndStoreLocation() : void
        EditText locationEditText = (EditText) findViewById(R.id.zip_code);
        saveLocationInPreference(locationEditText.getText().toString());
        if (mDeterminedAddress != null) {
            updateLocation(mDeterminedAddress);
        }
!!!14184460.java!!!	getZipCode() : String
        return Settings.Secure.getString(this.getContentResolver(),
                TvSettings.Secure.LOCATION_LINEUP_LOOKUP);
!!!14184588.java!!!	updateLocation(inout address : Address) : void
        updateLocationByLatLong(address.getLatitude(), address.getLongitude());
!!!14184716.java!!!	updateLocationByLatLong(in latitude : double, in longitude : double) : void
        Intent updateLocationIntent = new Intent(UPDATE_STATIC_LOCATION_INTENT);
        Bundle extras = new Bundle();
        extras.putDouble(KEY_LATITUDE, latitude);
        extras.putDouble(KEY_LONGITUDE, longitude);
        updateLocationIntent.putExtras(extras);
        startService(updateLocationIntent);
!!!14184844.java!!!	saveLocationInPreference(in location : String) : void
        TimeZone timeZone = null;
        if (location != null && location.length() == US_ZIP_CODE_LENGTH &&
                mDeterminedAddress != null) {
            location = cleanLocationInput(location);
            Settings.Secure.putString(this.getContentResolver(),
                TvSettings.Secure.LOCATION_LINEUP_LOOKUP, location);
            timeZone = ZipCodeToTimeZone.getTimeZoneFromZipCode(this,
                Integer.parseInt(location));
        }
        if (timeZone == null) {
            timeZone = TimeZone.getDefault();
        }
        AlarmManager alarm = (AlarmManager) getSystemService(
                Context.ALARM_SERVICE);
        alarm.setTimeZone(timeZone.getID());
!!!14184972.java!!!	cleanLocationInput(in location : String) : String
        return location.trim();
!!!14185100.java!!!	setupLocationEditText() : void
        EditText locationEditText = (EditText) findViewById(R.id.zip_code);
        locationEditText.addTextChangedListener(new TextWatcher() {
            public void afterTextChanged(Editable s) {
                updateStatusBasedOnInput(s, false);
            }

            public void beforeTextChanged(CharSequence s, int start, int count,
                    int after) {
                // do nothing
            }

            public void onTextChanged(CharSequence s, int start, int before,
                    int count) {
                // do nothing
            }
        });

        locationEditText.setOnFocusChangeListener(
                new View.OnFocusChangeListener() {
            public void onFocusChange(View v, boolean hasFocus) {
                if (!hasFocus) {
                    EditText locationEditText = (EditText) v;
                    updateStatusBasedOnInput(
                            locationEditText.getEditableText(), true);
                }
            }
        });

        locationEditText.setOnKeyListener(new View.OnKeyListener() {
            public boolean onKey(View v, int keyCode, KeyEvent event) {
                if (KeyEvent.KEYCODE_ENTER == keyCode) {
                    Button nextButton = (Button) findViewById(R.id.next_button);
                    nextButton.requestFocus();
                    if (nextButton.isEnabled()) {
                        nextButton.setEnabled(false);
                        nextButton.performClick();
                    }
                    return true;
                }
                return false;
            }
        });
        String zipCode = getZipCode();
        if (zipCode != null) {
            locationEditText.setText(getZipCode());
        }
        updateStatusBasedOnInput(locationEditText.getText(), false);
!!!14185228.java!!!	updateStatusBasedOnInput(inout s : Editable, inout showError : boolean) : void
        String zipCode = s.toString();
        boolean locationValid = zipCode.length() == US_ZIP_CODE_LENGTH;
        EditText locationEditText = (EditText) findViewById(R.id.zip_code);
        if (showError) {
            locationEditText.setError(locationValid ? null :
                    getString(R.string.not_a_zip_code));
        }

        if (locationValid) {
            if (mLastZipCodeChecked == null ||
                    !mLastZipCodeChecked.equals(zipCode)) {
                LookUpZipCodeAsyncTask task = new LookUpZipCodeAsyncTask();
                task.execute(zipCode);
            }
        } else {
            mLastZipCodeChecked = null;
            TextView determinedLocation = (TextView) findViewById(
                    R.id.determined_location);
            determinedLocation.setText(null);
        }
!!!14185356.java!!!	getLocationFromAddress(inout address : Address) : String
        if (address != null) {
            StringBuilder locationBuilder = new StringBuilder();
            if (address.getLocality() != null) {
                locationBuilder.append(address.getLocality());
                locationBuilder.append(", ");
            }
            locationBuilder.append(address.getAdminArea());
            return locationBuilder.toString();
        } else {
            return null;
        }
