class DrmManagerClientImpl
!!!136972.cpp!!!	create(inout pUniqueId : int, in isNative : bool) : DrmManagerClientImpl
    *pUniqueId = getDrmManagerService()->addUniqueId(isNative);

    return new DrmManagerClientImpl();
!!!137100.cpp!!!	remove(in uniqueId : int) : void
    getDrmManagerService()->removeUniqueId(uniqueId);
!!!137356.cpp!!!	addClient(in uniqueId : int) : void
    getDrmManagerService()->addClient(uniqueId);
!!!137484.cpp!!!	removeClient(in uniqueId : int) : void
    getDrmManagerService()->removeClient(uniqueId);
!!!137612.cpp!!!	setOnInfoListener(in uniqueId : int, in infoListener : sp<DrmManagerClient::OnInfoListener>) : status_t
    Mutex::Autolock _l(mLock);
    mOnInfoListener = infoListener;
    return getDrmManagerService()->setDrmServiceListener(uniqueId,
            (NULL != infoListener.get()) ? this : NULL);
!!!137740.cpp!!!	getConstraints(in uniqueId : int, in path : String8, in action : int) : DrmConstraints
    DrmConstraints *drmConstraints = NULL;
    if ((NULL != path) && (EMPTY_STRING != *path)) {
        drmConstraints =
            getDrmManagerService()->getConstraints(uniqueId, path, action);
    }
    return drmConstraints;
!!!137868.cpp!!!	getMetadata(in uniqueId : int, in path : String8) : DrmMetadata
    DrmMetadata *drmMetadata = NULL;
    if ((NULL != path) && (EMPTY_STRING != *path)) {
        drmMetadata = getDrmManagerService()->getMetadata(uniqueId, path);
    }
    return drmMetadata;
!!!137996.cpp!!!	canHandle(in uniqueId : int, in path : String8, in mimeType : String8) : bool
    bool retCode = false;
    if ((EMPTY_STRING != path) || (EMPTY_STRING != mimeType)) {
        retCode = getDrmManagerService()->canHandle(uniqueId, path, mimeType);
    }
    return retCode;
!!!138124.cpp!!!	processDrmInfo(in uniqueId : int, in drmInfo : DrmInfo) : DrmInfoStatus
    DrmInfoStatus *drmInfoStatus = NULL;
    if (NULL != drmInfo) {
        drmInfoStatus = getDrmManagerService()->processDrmInfo(uniqueId, drmInfo);
    }
    return drmInfoStatus;
!!!138252.cpp!!!	acquireDrmInfo(in uniqueId : int, in drmInfoRequest : DrmInfoRequest) : DrmInfo
    DrmInfo* drmInfo = NULL;
    if (NULL != drmInfoRequest) {
        drmInfo = getDrmManagerService()->acquireDrmInfo(uniqueId, drmInfoRequest);
    }
    return drmInfo;
!!!138380.cpp!!!	saveRights(in uniqueId : int, in drmRights : DrmRights, in rightsPath : String8, in contentPath : String8) : status_t
    return getDrmManagerService()->saveRights(
                uniqueId, drmRights, rightsPath, contentPath);
!!!138508.cpp!!!	getOriginalMimeType(in uniqueId : int, in path : String8, in fd : int) : String8
    String8 mimeType = EMPTY_STRING;
    if (EMPTY_STRING != path) {
        mimeType = getDrmManagerService()->getOriginalMimeType(uniqueId, path, fd);
    }
    return mimeType;
!!!138636.cpp!!!	getDrmObjectType(in uniqueId : int, in path : String8, in mimeType : String8) : int
    int drmOjectType = DrmObjectType::UNKNOWN;
    if ((EMPTY_STRING != path) || (EMPTY_STRING != mimeType)) {
         drmOjectType =
             getDrmManagerService()->getDrmObjectType(uniqueId, path, mimeType);
    }
    return drmOjectType;
!!!138764.cpp!!!	checkRightsStatus(in uniqueId : int, in path : String8, in action : int) : int
    int rightsStatus = RightsStatus::RIGHTS_INVALID;
    if (EMPTY_STRING != path) {
        rightsStatus =
            getDrmManagerService()->checkRightsStatus(uniqueId, path, action);
    }
    return rightsStatus;
!!!138892.cpp!!!	consumeRights(in uniqueId : int, inout decryptHandle : sp<DecryptHandle>, in action : int, in reserve : bool) : status_t
    status_t status = DRM_ERROR_UNKNOWN;
    if (NULL != decryptHandle.get()) {
        status = getDrmManagerService()->consumeRights(
                uniqueId, decryptHandle.get(), action, reserve);
    }
    return status;
!!!139020.cpp!!!	setPlaybackStatus(in uniqueId : int, inout decryptHandle : sp<DecryptHandle>, in playbackStatus : int, in position : int64_t) : status_t
    status_t status = DRM_ERROR_UNKNOWN;
    if (NULL != decryptHandle.get()) {
        status = getDrmManagerService()->setPlaybackStatus(
                uniqueId, decryptHandle.get(), playbackStatus, position);
    }
    return status;
!!!139148.cpp!!!	validateAction(in uniqueId : int, in path : String8, in action : int, in description : ActionDescription) : bool
    bool retCode = false;
    if (EMPTY_STRING != path) {
        retCode = getDrmManagerService()->validateAction(
                uniqueId, path, action, description);
    }
    return retCode;
!!!139276.cpp!!!	removeRights(in uniqueId : int, in path : String8) : status_t
    status_t status = DRM_ERROR_UNKNOWN;
    if (EMPTY_STRING != path) {
        status = getDrmManagerService()->removeRights(uniqueId, path);
    }
    return status;
!!!139404.cpp!!!	removeAllRights(in uniqueId : int) : status_t
    return getDrmManagerService()->removeAllRights(uniqueId);
!!!139532.cpp!!!	openConvertSession(in uniqueId : int, in mimeType : String8) : int
    int retCode = INVALID_VALUE;
    if (EMPTY_STRING != mimeType) {
        retCode = getDrmManagerService()->openConvertSession(uniqueId, mimeType);
    }
    return retCode;
!!!139660.cpp!!!	convertData(in uniqueId : int, in convertId : int, in inputData : DrmBuffer) : DrmConvertedStatus
    DrmConvertedStatus* drmConvertedStatus = NULL;
    if (NULL != inputData) {
         drmConvertedStatus =
             getDrmManagerService()->convertData(uniqueId, convertId, inputData);
    }
    return drmConvertedStatus;
!!!139788.cpp!!!	closeConvertSession(in uniqueId : int, in convertId : int) : DrmConvertedStatus
    return getDrmManagerService()->closeConvertSession(uniqueId, convertId);
!!!139916.cpp!!!	getAllSupportInfo(in uniqueId : int, inout length : int, inout drmSupportInfoArray : DrmSupportInfo) : status_t
    status_t status = DRM_ERROR_UNKNOWN;
    if ((NULL != drmSupportInfoArray) && (NULL != length)) {
        status = getDrmManagerService()->getAllSupportInfo(
                uniqueId, length, drmSupportInfoArray);
    }
    return status;
!!!140044.cpp!!!	openDecryptSession(in uniqueId : int, in fd : int, in offset : off64_t, in length : off64_t, in mime : char) : sp<DecryptHandle>

    return getDrmManagerService()->openDecryptSession(
                uniqueId, fd, offset, length, mime);
!!!140172.cpp!!!	openDecryptSession(in uniqueId : int, in uri : char, in mime : char) : sp<DecryptHandle>

    DecryptHandle* handle = NULL;
    if (NULL != uri) {
        handle = getDrmManagerService()->openDecryptSession(uniqueId, uri, mime);
    }
    return handle;
!!!140300.cpp!!!	openDecryptSession(in uniqueId : int, in buf : DrmBuffer, in mimeType : String8) : sp<DecryptHandle>
    return getDrmManagerService()->openDecryptSession(uniqueId, buf, mimeType);
!!!140428.cpp!!!	closeDecryptSession(in uniqueId : int, inout decryptHandle : sp<DecryptHandle>) : status_t
    status_t status = DRM_ERROR_UNKNOWN;
    if (NULL != decryptHandle.get()) {
        status = getDrmManagerService()->closeDecryptSession(
                uniqueId, decryptHandle.get());
    }
    return status;
!!!140556.cpp!!!	initializeDecryptUnit(in uniqueId : int, inout decryptHandle : sp<DecryptHandle>, in decryptUnitId : int, in headerInfo : DrmBuffer) : status_t
    status_t status = DRM_ERROR_UNKNOWN;
    if ((NULL != decryptHandle.get()) && (NULL != headerInfo)) {
        status = getDrmManagerService()->initializeDecryptUnit(
                uniqueId, decryptHandle.get(), decryptUnitId, headerInfo);
    }
    return status;
!!!140684.cpp!!!	decrypt(in uniqueId : int, inout decryptHandle : sp<DecryptHandle>, in decryptUnitId : int, in encBuffer : DrmBuffer, inout decBuffer : DrmBuffer, inout IV : DrmBuffer) : status_t
    status_t status = DRM_ERROR_UNKNOWN;
    if ((NULL != decryptHandle.get()) && (NULL != encBuffer)
        && (NULL != decBuffer) && (NULL != *decBuffer)) {
        status = getDrmManagerService()->decrypt(
                uniqueId, decryptHandle.get(), decryptUnitId,
                encBuffer, decBuffer, IV);
    }
    return status;
!!!140812.cpp!!!	finalizeDecryptUnit(in uniqueId : int, inout decryptHandle : sp<DecryptHandle>, in decryptUnitId : int) : status_t
    status_t status = DRM_ERROR_UNKNOWN;
    if (NULL != decryptHandle.get()) {
        status = getDrmManagerService()->finalizeDecryptUnit(
                    uniqueId, decryptHandle.get(), decryptUnitId);
    }
    return status;
!!!140940.cpp!!!	pread(in uniqueId : int, inout decryptHandle : sp<DecryptHandle>, inout buffer : void, in numBytes : ssize_t, in offset : off64_t) : ssize_t
    ssize_t retCode = INVALID_VALUE;
    if ((NULL != decryptHandle.get()) && (NULL != buffer) && (0 < numBytes)) {
        retCode = getDrmManagerService()->pread(
                uniqueId, decryptHandle.get(), buffer, numBytes, offset);
    }
    return retCode;
!!!141068.cpp!!!	notify(in event : DrmInfoEvent) : status_t
    if (NULL != mOnInfoListener.get()) {
        Mutex::Autolock _l(mLock);
        sp<DrmManagerClient::OnInfoListener> listener = mOnInfoListener;
        listener->onInfo(event);
    }
    return DRM_NO_ERROR;
!!!141196.cpp!!!	installDrmEngine(in uniqueId : int, in drmEngineFile : String8) : status_t
    status_t status = DRM_ERROR_UNKNOWN;
    if (EMPTY_STRING != drmEngineFile) {
        status = getDrmManagerService()->installDrmEngine(uniqueId, drmEngineFile);
    }
    return status;
!!!141708.cpp!!!	getDrmManagerService() : sp<IDrmManagerService>
    Mutex::Autolock lock(sMutex);
    if (NULL == sDrmManagerService.get()) {
        sp<IServiceManager> sm = defaultServiceManager();
        sp<IBinder> binder;
        do {
            binder = sm->getService(String16("drm.drmManager"));
            if (binder != 0) {
                break;
            }
            ALOGW("DrmManagerService not published, waiting...");
            struct timespec reqt;
            reqt.tv_sec  = 0;
            reqt.tv_nsec = 500000000; //0.5 sec
            nanosleep(&reqt, NULL);
        } while (true);
        if (NULL == sDeathNotifier.get()) {
            sDeathNotifier = new DeathNotifier();
        }
        binder->linkToDeath(sDeathNotifier);
        sDrmManagerService = interface_cast<IDrmManagerService>(binder);
    }
    return sDrmManagerService;
