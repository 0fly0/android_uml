class SynthHandler
!!!4174092.java!!!	SynthHandler(inout looper : Looper)
            super(looper);
!!!4174220.java!!!	getCurrentSpeechItem() : SpeechItem
            return mCurrentSpeechItem;
!!!4174348.java!!!	setCurrentSpeechItem(inout speechItem : SpeechItem) : SpeechItem
            SpeechItem old = mCurrentSpeechItem;
            mCurrentSpeechItem = speechItem;
            return old;
!!!4174476.java!!!	maybeRemoveCurrentSpeechItem(inout callerIdentity : Object) : SpeechItem
            if (mCurrentSpeechItem != null &&
                    mCurrentSpeechItem.getCallerIdentity() == callerIdentity) {
                SpeechItem current = mCurrentSpeechItem;
                mCurrentSpeechItem = null;
                return current;
            }

            return null;
!!!4174604.java!!!	isSpeaking() : boolean
            return getCurrentSpeechItem() != null;
!!!4174732.java!!!	quit() : void
            // Don't process any more speech items
            getLooper().quit();
            // Stop the current speech item
            SpeechItem current = setCurrentSpeechItem(null);
            if (current != null) {
                current.stop();
            }

            // The AudioPlaybackHandler will be destroyed by the caller.
!!!4174860.java!!!	enqueueSpeechItem(in queueMode : int, in speechItem : SpeechItem) : int
            if (!speechItem.isValid()) {
                speechItem.dispatchOnError();
                return TextToSpeech.ERROR;
            }

            if (queueMode == TextToSpeech.QUEUE_FLUSH) {
                stopForApp(speechItem.getCallerIdentity());
            } else if (queueMode == TextToSpeech.QUEUE_DESTROY) {
                stopAll();
            }
            Runnable runnable = new Runnable() {
                @Override
                public void run() {
                    setCurrentSpeechItem(speechItem);
                    speechItem.play();
                    setCurrentSpeechItem(null);
                }
            };
            Message msg = Message.obtain(this, runnable);
            // The obj is used to remove all callbacks from the given app in
            // stopForApp(String).
            //
            // Note that this string is interned, so the == comparison works.
            msg.obj = speechItem.getCallerIdentity();
            if (sendMessage(msg)) {
                return TextToSpeech.SUCCESS;
            } else {
                Log.w(TAG, "SynthThread has quit");
                speechItem.dispatchOnError();
                return TextToSpeech.ERROR;
            }
!!!4174988.java!!!	stopForApp(inout callerIdentity : Object) : int
            if (callerIdentity == null) {
                return TextToSpeech.ERROR;
            }

            removeCallbacksAndMessages(callerIdentity);
            // This stops writing data to the file / or publishing
            // items to the audio playback handler.
            //
            // Note that the current speech item must be removed only if it
            // belongs to the callingApp, else the item will be "orphaned" and
            // not stopped correctly if a stop request comes along for the item
            // from the app it belongs to.
            SpeechItem current = maybeRemoveCurrentSpeechItem(callerIdentity);
            if (current != null) {
                current.stop();
            }

            // Remove any enqueued audio too.
            mAudioPlaybackHandler.stopForApp(callerIdentity);

            return TextToSpeech.SUCCESS;
!!!4175116.java!!!	stopAll() : int
            // Stop the current speech item unconditionally.
            SpeechItem current = setCurrentSpeechItem(null);
            if (current != null) {
                current.stop();
            }
            // Remove all other items from the queue.
            removeCallbacksAndMessages(null);
            // Remove all pending playback as well.
            mAudioPlaybackHandler.stop();

            return TextToSpeech.SUCCESS;
