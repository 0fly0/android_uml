class Camera
!!!182412.cpp!!!	create(in camera : sp<ICamera>) : sp<Camera>
     ALOGV("create");
     if (camera == 0) {
         ALOGE("camera remote is a NULL pointer");
         return 0;
     }

    sp<Camera> c = new Camera();
    if (camera->connect(c) == NO_ERROR) {
        c->mStatus = NO_ERROR;
        c->mCamera = camera;
        camera->asBinder()->linkToDeath(c);
        return c;
    }
    return 0;
!!!182540.cpp!!!	getNumberOfCameras() : int32_t
    const sp<ICameraService>& cs = getCameraService();
    if (cs == 0) return 0;
    return cs->getNumberOfCameras();
!!!182668.cpp!!!	getCameraInfo(in cameraId : int, inout cameraInfo : CameraInfo) : status_t
    const sp<ICameraService>& cs = getCameraService();
    if (cs == 0) return UNKNOWN_ERROR;
    return cs->getCameraInfo(cameraId, cameraInfo);
!!!182796.cpp!!!	connect(in cameraId : int) : sp<Camera>
    ALOGV("connect");
    sp<Camera> c = new Camera();
    const sp<ICameraService>& cs = getCameraService();
    if (cs != 0) {
        c->mCamera = cs->connect(c, cameraId);
    }
    if (c->mCamera != 0) {
        c->mCamera->asBinder()->linkToDeath(c);
        c->mStatus = NO_ERROR;
    } else {
        c.clear();
    }
    return c;
!!!182924.cpp!!!	~Camera()
    // We don't need to call disconnect() here because if the CameraService
    // thinks we are the owner of the hardware, it will hold a (strong)
    // reference to us, and we can't possibly be here. We also don't want to
    // call disconnect() here if we are in the same process as mediaserver,
    // because we may be invoked by CameraService::Client::connect() and will
    // deadlock if we call any method of ICamera here.
!!!183052.cpp!!!	init() : void
    mStatus = UNKNOWN_ERROR;
!!!183180.cpp!!!	reconnect() : status_t
    ALOGV("reconnect");
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    return c->connect(this);
!!!183308.cpp!!!	disconnect() : void
    ALOGV("disconnect");
    if (mCamera != 0) {
        mCamera->disconnect();
        mCamera->asBinder()->unlinkToDeath(this);
        mCamera = 0;
    }
!!!183436.cpp!!!	lock() : status_t
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    return c->lock();
!!!183564.cpp!!!	unlock() : status_t
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    return c->unlock();
!!!183820.cpp!!!	setPreviewDisplay(in surface : sp<Surface>) : status_t
    ALOGV("setPreviewDisplay(%p)", surface.get());
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    if (surface != 0) {
        return c->setPreviewDisplay(surface);
    } else {
        ALOGD("app passed NULL surface");
        return c->setPreviewDisplay(0);
    }
!!!183948.cpp!!!	setPreviewTexture(in surfaceTexture : sp<ISurfaceTexture>) : status_t
    ALOGV("setPreviewTexture(%p)", surfaceTexture.get());
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    if (surfaceTexture != 0) {
        return c->setPreviewTexture(surfaceTexture);
    } else {
        ALOGD("app passed NULL surface");
        return c->setPreviewTexture(0);
    }
!!!184076.cpp!!!	startPreview() : status_t
    ALOGV("startPreview");
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    return c->startPreview();
!!!184204.cpp!!!	stopPreview() : void
    ALOGV("stopPreview");
    sp <ICamera> c = mCamera;
    if (c == 0) return;
    c->stopPreview();
!!!184332.cpp!!!	previewEnabled() : bool
    ALOGV("previewEnabled");
    sp <ICamera> c = mCamera;
    if (c == 0) return false;
    return c->previewEnabled();
!!!184460.cpp!!!	startRecording() : status_t
    ALOGV("startRecording");
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    return c->startRecording();
!!!184588.cpp!!!	stopRecording() : void
    ALOGV("stopRecording");
    {
        Mutex::Autolock _l(mLock);
        mRecordingProxyListener.clear();
    }
    sp <ICamera> c = mCamera;
    if (c == 0) return;
    c->stopRecording();
!!!184716.cpp!!!	recordingEnabled() : bool
    ALOGV("recordingEnabled");
    sp <ICamera> c = mCamera;
    if (c == 0) return false;
    return c->recordingEnabled();
!!!184844.cpp!!!	releaseRecordingFrame(in mem : sp<IMemory>) : void
    ALOGV("releaseRecordingFrame");
    sp <ICamera> c = mCamera;
    if (c == 0) return;
    c->releaseRecordingFrame(mem);
!!!184972.cpp!!!	autoFocus() : status_t
    ALOGV("autoFocus");
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    return c->autoFocus();
!!!185100.cpp!!!	cancelAutoFocus() : status_t
    ALOGV("cancelAutoFocus");
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    return c->cancelAutoFocus();
!!!185228.cpp!!!	takePicture(in msgType : int) : status_t
    ALOGV("takePicture: 0x%x", msgType);
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    return c->takePicture(msgType);
!!!185356.cpp!!!	setParameters(in params : String8) : status_t
    ALOGV("setParameters");
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    return c->setParameters(params);
!!!185484.cpp!!!	getParameters() : String8
    ALOGV("getParameters");
    String8 params;
    sp <ICamera> c = mCamera;
    if (c != 0) params = mCamera->getParameters();
    return params;
!!!185612.cpp!!!	sendCommand(in cmd : int32_t, in arg1 : int32_t, in arg2 : int32_t) : status_t
    ALOGV("sendCommand");
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    return c->sendCommand(cmd, arg1, arg2);
!!!185740.cpp!!!	storeMetaDataInBuffers(in enabled : bool) : status_t
    ALOGV("storeMetaDataInBuffers: %s",
            enabled? "true": "false");
    sp <ICamera> c = mCamera;
    if (c == 0) return NO_INIT;
    return c->storeMetaDataInBuffers(enabled);
!!!185868.cpp!!!	setListener(in listener : sp<CameraListener>) : void
    Mutex::Autolock _l(mLock);
    mListener = listener;
!!!185996.cpp!!!	setRecordingProxyListener(in listener : sp<ICameraRecordingProxyListener>) : void
    Mutex::Autolock _l(mLock);
    mRecordingProxyListener = listener;
!!!186124.cpp!!!	setPreviewCallbackFlags(in flag : int) : void
    ALOGV("setPreviewCallbackFlags");
    sp <ICamera> c = mCamera;
    if (c == 0) return;
    mCamera->setPreviewCallbackFlag(flag);
!!!186252.cpp!!!	getRecordingProxy() : sp<ICameraRecordingProxy>
    ALOGV("getProxy");
    return new RecordingProxy(this);
!!!186380.cpp!!!	notifyCallback(in msgType : int32_t, in ext1 : int32_t, in ext2 : int32_t) : void
    sp<CameraListener> listener;
    {
        Mutex::Autolock _l(mLock);
        listener = mListener;
    }
    if (listener != NULL) {
        listener->notify(msgType, ext1, ext2);
    }
!!!186508.cpp!!!	dataCallback(in msgType : int32_t, in dataPtr : sp<IMemory>, inout metadata : camera_frame_metadata_t) : void
    sp<CameraListener> listener;
    {
        Mutex::Autolock _l(mLock);
        listener = mListener;
    }
    if (listener != NULL) {
        listener->postData(msgType, dataPtr, metadata);
    }
!!!186636.cpp!!!	dataCallbackTimestamp(in timestamp : nsecs_t, in msgType : int32_t, in dataPtr : sp<IMemory>) : void
    // If recording proxy listener is registered, forward the frame and return.
    // The other listener (mListener) is ignored because the receiver needs to
    // call releaseRecordingFrame.
    sp<ICameraRecordingProxyListener> proxylistener;
    {
        Mutex::Autolock _l(mLock);
        proxylistener = mRecordingProxyListener;
    }
    if (proxylistener != NULL) {
        proxylistener->dataCallbackTimestamp(timestamp, msgType, dataPtr);
        return;
    }

    sp<CameraListener> listener;
    {
        Mutex::Autolock _l(mLock);
        listener = mListener;
    }
    if (listener != NULL) {
        listener->postDataTimestamp(timestamp, msgType, dataPtr);
    } else {
        ALOGW("No listener was set. Drop a recording frame.");
        releaseRecordingFrame(dataPtr);
    }
!!!186764.cpp!!!	remote() : sp<ICamera>
    return mCamera;
!!!187404.cpp!!!	Camera()
    init();
!!!187788.cpp!!!	binderDied(in who : wp<IBinder>) : void
    ALOGW("ICamera died");
    notifyCallback(CAMERA_MSG_ERROR, CAMERA_ERROR_SERVER_DIED, 0);
!!!188172.cpp!!!	getCameraService() : sp<ICameraService>
    Mutex::Autolock _l(mLock);
    if (mCameraService.get() == 0) {
        sp<IServiceManager> sm = defaultServiceManager();
        sp<IBinder> binder;
        do {
            binder = sm->getService(String16("media.camera"));
            if (binder != 0)
                break;
            ALOGW("CameraService not published, waiting...");
            usleep(500000); // 0.5 s
        } while(true);
        if (mDeathNotifier == NULL) {
            mDeathNotifier = new DeathNotifier();
        }
        binder->linkToDeath(mDeathNotifier);
        mCameraService = interface_cast<ICameraService>(binder);
    }
    ALOGE_IF(mCameraService==0, "no CameraService!?");
    return mCameraService;
