format 74
"traversal" // _unknown::org::w3c::dom::traversal
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/org/w3c/dom/traversal/"
  java_package "org.w3c.dom.traversal"
  classview 139035 "traversal"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 376091 "NodeFilter"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Filters are objects that know how to \"filter out\" nodes. If a
<code>NodeIterator</code> or <code>TreeWalker</code> is given a
<code>NodeFilter</code>, it applies the filter before it returns the next
node. If the filter says to accept the node, the traversal logic returns
it; otherwise, traversal looks for the next node and pretends that the
node that was rejected was not there.
<p>The DOM does not provide any filters. <code>NodeFilter</code> is just an
interface that users can implement to provide their own filters.
<p><code>NodeFilters</code> do not need to know how to traverse from node
to node, nor do they need to know anything about the data structure that
is being traversed. This makes it very easy to write filters, since the
only thing they have to know how to do is evaluate a single node. One
filter may be used with a number of different kinds of traversals,
encouraging code reuse.
<p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
@since DOM Level 2

@hide"
      attribute 661403 "FILTER_ACCEPT"
	class_attribute const_attribute public explicit_type "short"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Constants returned by acceptNode

Accept the node. Navigation methods defined for
<code>NodeIterator</code> or <code>TreeWalker</code> will return this
node.
"
      end

      attribute 661531 "FILTER_REJECT"
	class_attribute const_attribute public explicit_type "short"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Reject the node. Navigation methods defined for
<code>NodeIterator</code> or <code>TreeWalker</code> will not return
this node. For <code>TreeWalker</code>, the children of this node
will also be rejected. <code>NodeIterators</code> treat this as a
synonym for <code>FILTER_SKIP</code>.
"
      end

      attribute 661659 "FILTER_SKIP"
	class_attribute const_attribute public explicit_type "short"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Skip this single node. Navigation methods defined for
<code>NodeIterator</code> or <code>TreeWalker</code> will not return
this node. For both <code>NodeIterator</code> and
<code>TreeWalker</code>, the children of this node will still be
considered.
"
      end

      attribute 661787 "SHOW_ALL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xFFFFFFFF"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Constants for whatToShow

Show all <code>Nodes</code>.
"
      end

      attribute 661915 "SHOW_ELEMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000001"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>Element</code> nodes.
"
      end

      attribute 662043 "SHOW_ATTRIBUTE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000002"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>Attr</code> nodes. This is meaningful only when creating an
<code>NodeIterator</code> or <code>TreeWalker</code> with an
attribute node as its <code>root</code>; in this case, it means that
the attribute node will appear in the first position of the iteration
or traversal. Since attributes are never children of other nodes,
they do not appear when traversing over the document tree.
"
      end

      attribute 662171 "SHOW_TEXT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000004"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>Text</code> nodes.
"
      end

      attribute 662299 "SHOW_CDATA_SECTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000008"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>CDATASection</code> nodes.
"
      end

      attribute 662427 "SHOW_ENTITY_REFERENCE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000010"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>EntityReference</code> nodes.
"
      end

      attribute 662555 "SHOW_ENTITY"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000020"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>Entity</code> nodes. This is meaningful only when creating
an <code>NodeIterator</code> or <code>TreeWalker</code> with an
<code>Entity</code> node as its <code>root</code>; in this case, it
means that the <code>Entity</code> node will appear in the first
position of the traversal. Since entities are not part of the
document tree, they do not appear when traversing over the document
tree.
"
      end

      attribute 662683 "SHOW_PROCESSING_INSTRUCTION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000040"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>ProcessingInstruction</code> nodes.
"
      end

      attribute 662811 "SHOW_COMMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000080"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>Comment</code> nodes.
"
      end

      attribute 662939 "SHOW_DOCUMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>Document</code> nodes.
"
      end

      attribute 663067 "SHOW_DOCUMENT_TYPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000200"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>DocumentType</code> nodes.
"
      end

      attribute 663195 "SHOW_DOCUMENT_FRAGMENT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000400"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>DocumentFragment</code> nodes.
"
      end

      attribute 663323 "SHOW_NOTATION"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x00000800"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Show <code>Notation</code> nodes. This is meaningful only when creating
an <code>NodeIterator</code> or <code>TreeWalker</code> with a
<code>Notation</code> node as its <code>root</code>; in this case, it
means that the <code>Notation</code> node will appear in the first
position of the traversal. Since notations are not part of the
document tree, they do not appear when traversing over the document
tree.
"
      end

      operation 2540443 "acceptNode"
	public explicit_return_type "short"
	nparams 1
	  param inout name "n" type class_ref 284059 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test whether a specified node is visible in the logical view of a
<code>TreeWalker</code> or <code>NodeIterator</code>. This function
will be called by the implementation of <code>TreeWalker</code> and
<code>NodeIterator</code>; it is not normally called directly from
user code. (Though you could do so if you wanted to use the same
filter to guide your own application logic.)
@param n The node to check to see if it passes the filter or not.
@return A constant to determine whether the node is accepted,
  rejected, or skipped, as defined above."
      end
    end

    class 376219 "NodeIterator"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "<code>NodeIterators</code> are used to step through a set of nodes, e.g.
the set of nodes in a <code>NodeList</code>, the document subtree
governed by a particular <code>Node</code>, the results of a query, or
any other set of nodes. The set of nodes to be iterated is determined by
the implementation of the <code>NodeIterator</code>. DOM Level 2
specifies a single <code>NodeIterator</code> implementation for
document-order traversal of a document subtree. Instances of these
<code>NodeIterators</code> are created by calling
<code>DocumentTraversal</code><code>.createNodeIterator()</code>.
<p>See also the <a href='http://www.w3.org/TR/2000/REC-DOM-Level-2-Traversal-Range-20001113'>Document Object Model (DOM) Level 2 Traversal and Range Specification</a>.
@since DOM Level 2

@hide"
      operation 2540699 "getRoot"
	public return_type class_ref 284059 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The root node of the <code>NodeIterator</code>, as specified when it
was created."
      end

      operation 2540827 "getWhatToShow"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This attribute determines which node types are presented via the
<code>NodeIterator</code>. The available set of constants is defined
in the <code>NodeFilter</code> interface.  Nodes not accepted by
<code>whatToShow</code> will be skipped, but their children may still
be considered. Note that this skip takes precedence over the filter,
if any."
      end

      operation 2540955 "getFilter"
	public return_type class_ref 376091 // NodeFilter
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The <code>NodeFilter</code> used to screen nodes."
      end

      operation 2541083 "getExpandEntityReferences"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The value of this flag determines whether the children of entity
reference nodes are visible to the <code>NodeIterator</code>. If
false, these children  and their descendants will be rejected. Note
that this rejection takes precedence over <code>whatToShow</code> and
the filter. Also note that this is currently the only situation where
<code>NodeIterators</code> may reject a complete subtree rather than
skipping individual nodes.
<br>
<br> To produce a view of the document that has entity references
expanded and does not expose the entity reference node itself, use
the <code>whatToShow</code> flags to hide the entity reference node
and set <code>expandEntityReferences</code> to true when creating the
<code>NodeIterator</code>. To produce a view of the document that has
entity reference nodes but no entity expansion, use the
<code>whatToShow</code> flags to show the entity reference node and
set <code>expandEntityReferences</code> to false."
      end

      operation 2541211 "nextNode"
	public return_type class_ref 284059 // Node
	nparams 0
	nexceptions 1
	  exception class_ref 344987 // DOMException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the next node in the set and advances the position of the
<code>NodeIterator</code> in the set. After a
<code>NodeIterator</code> is created, the first call to
<code>nextNode()</code> returns the first node in the set.
@return The next <code>Node</code> in the set being iterated over, or
  <code>null</code> if there are no more members in that set.
@exception DOMException
  INVALID_STATE_ERR: Raised if this method is called after the
  <code>detach</code> method was invoked."
      end

      operation 2541339 "previousNode"
	public return_type class_ref 284059 // Node
	nparams 0
	nexceptions 1
	  exception class_ref 344987 // DOMException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the previous node in the set and moves the position of the
<code>NodeIterator</code> backwards in the set.
@return The previous <code>Node</code> in the set being iterated over,
  or <code>null</code> if there are no more members in that set.
@exception DOMException
  INVALID_STATE_ERR: Raised if this method is called after the
  <code>detach</code> method was invoked."
      end

      operation 2541467 "detach"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Detaches the <code>NodeIterator</code> from the set which it iterated
over, releasing any computational resources and placing the
<code>NodeIterator</code> in the INVALID state. After
<code>detach</code> has been invoked, calls to <code>nextNode</code>
or <code>previousNode</code> will raise the exception
INVALID_STATE_ERR."
      end
    end
  end

  deploymentview 138907 "traversal"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 318619 "NodeFilter"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import org.w3c.dom.Node;
${definition}"
      associated_classes
	class_ref 376091 // NodeFilter
      end
      comment "Copyright (c) 2000 World Wide Web Consortium,
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University). All
Rights Reserved. This program is distributed under the W3C's Software
Intellectual Property License. This program is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
See W3C License http://www.w3.org/Consortium/Legal/ for more details."
    end

    artifact 318875 "NodeIterator"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;
${definition}"
      associated_classes
	class_ref 376219 // NodeIterator
      end
      comment "Copyright (c) 2000 World Wide Web Consortium,
(Massachusetts Institute of Technology, Institut National de
Recherche en Informatique et en Automatique, Keio University). All
Rights Reserved. This program is distributed under the W3C's Software
Intellectual Property License. This program is distributed in the
hope that it will be useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE.
See W3C License http://www.w3.org/Consortium/Legal/ for more details."
    end
  end
end
