class DecimalFormatSymbols
!!!1130779.java!!!	DecimalFormatSymbols()
        this(Locale.getDefault());
!!!1130907.java!!!	DecimalFormatSymbols(inout locale : Locale)
        LocaleData localeData = LocaleData.get(locale);
        this.zeroDigit = localeData.zeroDigit;
        this.digit = '#';
        this.decimalSeparator = localeData.decimalSeparator;
        this.groupingSeparator = localeData.groupingSeparator;
        this.patternSeparator = localeData.patternSeparator;
        this.percent = localeData.percent;
        this.perMill = localeData.perMill;
        this.monetarySeparator = localeData.monetarySeparator;
        this.minusSign = localeData.minusSign;
        this.infinity = localeData.infinity;
        this.NaN = localeData.NaN;
        this.exponentSeparator = localeData.exponentSeparator;
        this.locale = locale;
        try {
            currency = Currency.getInstance(locale);
            currencySymbol = currency.getSymbol(locale);
            intlCurrencySymbol = currency.getCurrencyCode();
        } catch (IllegalArgumentException e) {
            currency = Currency.getInstance("XXX");
            currencySymbol = localeData.currencySymbol;
            intlCurrencySymbol = localeData.internationalCurrencySymbol;
        }
!!!1131035.java!!!	getInstance() : DecimalFormatSymbols
        return getInstance(Locale.getDefault());
!!!1131163.java!!!	getInstance(inout locale : Locale) : DecimalFormatSymbols
        if (locale == null) {
            throw new NullPointerException("locale == null");
        }
        return new DecimalFormatSymbols(locale);
!!!1131291.java!!!	getAvailableLocales() : Locale
        return ICU.getAvailableDecimalFormatSymbolsLocales();
!!!1131419.java!!!	clone() : Object
        try {
            return super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!1131547.java!!!	equals(inout object : Object) : boolean
        if (this == object) {
            return true;
        }
        if (!(object instanceof DecimalFormatSymbols)) {
            return false;
        }
        DecimalFormatSymbols obj = (DecimalFormatSymbols) object;
        return currency.equals(obj.currency) &&
                currencySymbol.equals(obj.currencySymbol) &&
                decimalSeparator == obj.decimalSeparator &&
                digit == obj.digit &&
                exponentSeparator.equals(obj.exponentSeparator) &&
                groupingSeparator == obj.groupingSeparator &&
                infinity.equals(obj.infinity) &&
                intlCurrencySymbol.equals(obj.intlCurrencySymbol) &&
                minusSign == obj.minusSign &&
                monetarySeparator == obj.monetarySeparator &&
                NaN.equals(obj.NaN) &&
                patternSeparator == obj.patternSeparator &&
                perMill == obj.perMill &&
                percent == obj.percent &&
                zeroDigit == obj.zeroDigit;
!!!1131675.java!!!	toString() : String
        return getClass().getName() +
                "[currency=" + currency +
                ",currencySymbol=" + currencySymbol +
                ",decimalSeparator=" + decimalSeparator +
                ",digit=" + digit +
                ",exponentSeparator=" + exponentSeparator +
                ",groupingSeparator=" + groupingSeparator +
                ",infinity=" + infinity +
                ",intlCurrencySymbol=" + intlCurrencySymbol +
                ",minusSign=" + minusSign +
                ",monetarySeparator=" + monetarySeparator +
                ",NaN=" + NaN +
                ",patternSeparator=" + patternSeparator +
                ",perMill=" + perMill +
                ",percent=" + percent +
                ",zeroDigit=" + zeroDigit +
                "]";
!!!1131803.java!!!	getCurrency() : Currency
        return currency;
!!!1131931.java!!!	getInternationalCurrencySymbol() : String
        return intlCurrencySymbol;
!!!1132059.java!!!	getCurrencySymbol() : String
        return currencySymbol;
!!!1132187.java!!!	getDecimalSeparator() : char
        return decimalSeparator;
!!!1132315.java!!!	getDigit() : char
        return digit;
!!!1132443.java!!!	getGroupingSeparator() : char
        return groupingSeparator;
!!!1132571.java!!!	getInfinity() : String
        return infinity;
!!!1132699.java!!!	getMinusSign() : char
        return minusSign;
!!!1132827.java!!!	getMonetaryDecimalSeparator() : char
        return monetarySeparator;
!!!1132955.java!!!	getNaN() : String
        return NaN;
!!!1133083.java!!!	getPatternSeparator() : char
        return patternSeparator;
!!!1133211.java!!!	getPercent() : char
        return percent;
!!!1133339.java!!!	getPerMill() : char
        return perMill;
!!!1133467.java!!!	getZeroDigit() : char
        return zeroDigit;
!!!1133595.java!!!	getExponentSeparator() : String
        return exponentSeparator;
!!!1133723.java!!!	hashCode() : int
        int result = 17;
        result = 31*result + zeroDigit;
        result = 31*result + digit;
        result = 31*result + decimalSeparator;
        result = 31*result + groupingSeparator;
        result = 31*result + patternSeparator;
        result = 31*result + percent;
        result = 31*result + perMill;
        result = 31*result + monetarySeparator;
        result = 31*result + minusSign;
        result = 31*result + exponentSeparator.hashCode();
        result = 31*result + infinity.hashCode();
        result = 31*result + NaN.hashCode();
        result = 31*result + currencySymbol.hashCode();
        result = 31*result + intlCurrencySymbol.hashCode();
        return result;
!!!1133851.java!!!	setCurrency(inout currency : Currency) : void
        if (currency == null) {
            throw new NullPointerException("currency == null");
        }
        if (currency == this.currency) {
            return;
        }
        this.currency = currency;
        intlCurrencySymbol = currency.getCurrencyCode();
        currencySymbol = currency.getSymbol(locale);
!!!1133979.java!!!	setInternationalCurrencySymbol(inout value : String) : void
        if (value == null) {
            currency = null;
            intlCurrencySymbol = null;
            return;
        }

        if (value.equals(intlCurrencySymbol)) {
            return;
        }

        try {
            currency = Currency.getInstance(value);
            currencySymbol = currency.getSymbol(locale);
        } catch (IllegalArgumentException e) {
            currency = null;
        }
        intlCurrencySymbol = value;
!!!1134107.java!!!	setCurrencySymbol(inout value : String) : void
        this.currencySymbol = value;
!!!1134235.java!!!	setDecimalSeparator(in value : char) : void
        this.decimalSeparator = value;
!!!1134363.java!!!	setDigit(in value : char) : void
        this.digit = value;
!!!1134491.java!!!	setGroupingSeparator(in value : char) : void
        this.groupingSeparator = value;
!!!1134619.java!!!	setInfinity(inout value : String) : void
        this.infinity = value;
!!!1134747.java!!!	setMinusSign(in value : char) : void
        this.minusSign = value;
!!!1134875.java!!!	setMonetaryDecimalSeparator(in value : char) : void
        this.monetarySeparator = value;
!!!1135003.java!!!	setNaN(inout value : String) : void
        this.NaN = value;
!!!1135131.java!!!	setPatternSeparator(in value : char) : void
        this.patternSeparator = value;
!!!1135259.java!!!	setPercent(in value : char) : void
        this.percent = value;
!!!1135387.java!!!	setPerMill(in value : char) : void
        this.perMill = value;
!!!1135515.java!!!	setZeroDigit(in value : char) : void
        this.zeroDigit = value;
!!!1135643.java!!!	setExponentSeparator(inout value : String) : void
        if (value == null) {
            throw new NullPointerException("value == null");
        }
        this.exponentSeparator = value;
!!!1135771.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        ObjectOutputStream.PutField fields = stream.putFields();
        fields.put("currencySymbol", currencySymbol);
        fields.put("decimalSeparator", getDecimalSeparator());
        fields.put("digit", getDigit());
        fields.put("exponential", exponentSeparator.charAt(0));
        fields.put("exponentialSeparator", exponentSeparator);
        fields.put("groupingSeparator", getGroupingSeparator());
        fields.put("infinity", infinity);
        fields.put("intlCurrencySymbol", intlCurrencySymbol);
        fields.put("minusSign", getMinusSign());
        fields.put("monetarySeparator", getMonetaryDecimalSeparator());
        fields.put("NaN", NaN);
        fields.put("patternSeparator", getPatternSeparator());
        fields.put("percent", getPercent());
        fields.put("perMill", getPerMill());
        fields.put("serialVersionOnStream", 3);
        fields.put("zeroDigit", getZeroDigit());
        fields.put("locale", locale);
        stream.writeFields();
!!!1135899.java!!!	readObject(inout stream : ObjectInputStream) : void
        ObjectInputStream.GetField fields = stream.readFields();
        final int serialVersionOnStream = fields.get("serialVersionOnStream", 0);
        currencySymbol = (String) fields.get("currencySymbol", "");
        setDecimalSeparator(fields.get("decimalSeparator", '.'));
        setDigit(fields.get("digit", '#'));
        setGroupingSeparator(fields.get("groupingSeparator", ','));
        infinity = (String) fields.get("infinity", "");
        intlCurrencySymbol = (String) fields.get("intlCurrencySymbol", "");
        setMinusSign(fields.get("minusSign", '-'));
        NaN = (String) fields.get("NaN", "");
        setPatternSeparator(fields.get("patternSeparator", ';'));
        setPercent(fields.get("percent", '%'));
        setPerMill(fields.get("perMill", '\u2030'));
        setZeroDigit(fields.get("zeroDigit", '0'));
        locale = (Locale) fields.get("locale", null);
        if (serialVersionOnStream == 0) {
            setMonetaryDecimalSeparator(getDecimalSeparator());
        } else {
            setMonetaryDecimalSeparator(fields.get("monetarySeparator", '.'));
        }

        if (serialVersionOnStream == 0) {
            // Prior to Java 1.1.6, the exponent separator wasn't configurable.
            exponentSeparator = "E";
        } else if (serialVersionOnStream < 3) {
            // In Javas 1.1.6 and 1.4, there was a character field "exponential".
            setExponentSeparator(String.valueOf(fields.get("exponential", 'E')));
        } else {
            // In Java 6, there's a new "exponentialSeparator" field.
            setExponentSeparator((String) fields.get("exponentialSeparator", "E"));
        }

        try {
            currency = Currency.getInstance(intlCurrencySymbol);
        } catch (IllegalArgumentException e) {
            currency = null;
        }
