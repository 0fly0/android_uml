class ReceivingRunnable
!!!13108236.java!!!	run() : void
      byte[] buffer = new byte[1500];
      DatagramPacket packet = new DatagramPacket(buffer, buffer.length);
      DatagramSocket socket = null;

      while (listening) {
        try {
            // The internal |length| value is used as both an input and an
            // output: it is set to the received length on first use, clamping
            // subsequent receives.  Re-set the internal buffer on each
            // iteration to avoid this.  (Could also simply call setLength(), or
            // create a new DatagramPacket)
            packet.setData(buffer, 0, buffer.length);
            
            socket = sender.getSocket();

            // This API sucks! The method blocks until datagram us received,
            // if nothing is received and the socket is closed, an IO-Exception
            // is thrown.
            socket.receive(packet);
            byte[] data = packet.getData();
            ByteArrayInputStream stream = new ByteArrayInputStream(
                    data, 0, packet.getLength());
            SsdpRequest request = new SsdpRequest();
            HttpParser.parseRequest(stream, request,
                    Charset.forName("US-ASCII"),
                    false /* don't expect method and uri */);
            request.setSocketAddress(packet.getAddress(), packet.getPort());
            notifyListeners(request);
        } catch (SocketException ex) {
            // socket exceptions can be ignored if we're stopping
            // or if the underlying socket has been closed.

            if (listening) {
                if (socket.isClosed()) {
                    // exit this thread, as a new thread will be created
                    // when initialize() is invoked
                    listening = false;
                } else {
                    // hmmm, unexpected exception.  Show it ...
                    ex.printStackTrace();
                }
            }
        } catch (Exception e) {
          // Last-ditch recourse before we crash the system.  In particular,
          // catch illegal HTTP headers in HttpParser#parseRequest, which appear
          // as a java.lang.IllegalStateException
          e.printStackTrace();
        }
      }
      stopped = true;
