class TvCecFeatureTest
!!!12079372.java!!!	setUp() : void
        super.setUp();
        //let the CecManager to be prepared
        try {
            Thread.sleep(5000);
        }
        catch (InterruptedException e) {

        }
        mCECDeviceType = mCecManager.getCurrentCecDeviceType();
        assertEquals(HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV, mCECDeviceType);
        IBinder cecServiceBinder = mCecManager.getCecServiceImpl();
        mITvCecService = ITvCecService.Stub.asInterface(cecServiceBinder);
        assertTrue(null != mITvCecService);
        assertTrue(mITvCecService.isOfType(mCECDeviceType));
        ensureCecEnabled();

        /* construct a fake callback object */
        mCallback = new CecCallbacksBN() {
            public void onHDMIScanStarted() {
                bHDMIScanStarted = true;
                Log.i(TAG, "HDMIScanStarted!");
            }

            public void onHDMIScanStopped() {
                bHDMIScanStopped = true;
                Log.i(TAG, "HDMIScanStopped!");
            }

            public void onHDMIScanCompleted() {
                bHDMIScanCompleted = true;
                Log.i(TAG, "HDMIScanCompleted!");
            }

            public void onHDMICECEnabled() {
                bHDMICECEnabled = true;
                Log.i(TAG, "HDMICECEnabled!");
            }

            public void onHDMICECDisabled() {
                bHDMICECDisabled = true;
                Log.i(TAG, "HDMICECDisabled!");
            }

            @Override
            public void onHDMICECDeviceUpdated(int eventID, List<CECDevInfo> cecDevList) {
                Log.i(TAG, "onHDMICECDeviceUpdated()!");
            }
        };

        if (null == mCallback) {
            Log.e(TAG, "ICecServiceCallbacksInterface object cannot be instantiated!");
            return;
        }

        if (null == mITvCecService ||
                (mCECDeviceType == HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_INVALID)) {
            Log.e(TAG, " **************** Test Prepare failed! **************** ");
            return;
        }
        mITvCecService.registerCecCallBack(mCallback);
        mITvCecService.enableCEC(false);

        //if previous condition valid then change our system locale to en_US
        //so as to be prepared for MenuLanguageFeature test
        Locale newLocale = Locale.US;
        IActivityManager am = ActivityManagerNative.getDefault();
        try {
            Configuration curConfig = am.getConfiguration();
            if (newLocale.equals(curConfig.locale)) {
                return;
            }
            curConfig.locale = newLocale;
            curConfig.userSetLocale = true;
            am.updateConfiguration(curConfig);
        } catch (Exception exp) {
            exp.printStackTrace();
            Log.e(TAG, " Exception raised when update the current locale to en_US");
        }
!!!12079500.java!!!	tearDown() : void
        if ((null != mCallback) && (null != mITvCecService)) {
            mITvCecService.unregisterCecCallBack(mCallback);
            if (mITvCecService.isCECEnabled()) {
                mITvCecService.disableCEC();
            }
            mCallback = null;
            mITvCecService = null;
        }
        super.tearDown();
!!!12079628.java!!!	testPreconditions() : void
        assertNotNull(mITvCecService);
        assertNotNull(mCallback);

        assertTrue("HDMI CEC hasn't been enabled!",
                bHDMICECEnabled);

        assertTrue("HDMI CEC device type hasn't been determined!",
                (HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_INVALID != mCECDeviceType));
        assertTrue("Current language must be english, please set it to english before testing!",
                (Locale.getDefault().equals(Locale.US)));

        /* TODO:ensure the LIVE TV is off */

!!!12079756.java!!!	testCecRoutingChangeFeature() : void
        try {
            assertTrue("The common RoutingChange Feature should be supported!",
                    mITvCecService.sendRoutingChange(0, 1));
        }
        catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "Exception raised when testCecRoutingChangeFeature()!");
        }
!!!12079884.java!!!	testCecMenuLanguageFeature() : void
        String oldLocale = Locale.getDefault().getLanguage();
        Log.i(TAG, "Change menu language to zh_CN failed!");
        try {
            mITvCecService.broadcastNewMenuLanguage("zh_CN");
        }
        catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "Exception raised when broadcastNewMenuLanguage(zh_CN)!");
        }
        try {
            Thread.sleep(1000);
        }
        catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "Exception raised when Thread request a sleeping!");
        }
        assertTrue("The cec Menu Language Feature test failed!",
                        Locale.getDefault().equals(new Locale("zh", "cn")));
!!!12080012.java!!!	ensureCecEnabled() : void
        try {
            if (null != mITvCecService && !mITvCecService.isCECEnabled()) {
                if (mITvCecService.enableCEC(false)) {
                    Log.e(TAG, "Enable CEC feature failed!");
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
            Log.e(TAG, "Exception raised when enable CEC feature!");
        }
