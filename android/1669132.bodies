class GetHostByAddrHandler
!!!9973132.cpp!!!	~GetHostByAddrHandler()
    free(mAddress);
!!!9973260.cpp!!!	threadStart(inout obj : void) : void
    GetHostByAddrHandler* handler = reinterpret_cast<GetHostByAddrHandler*>(obj);
    handler->run();
    delete handler;
    pthread_exit(NULL);
    return NULL;
!!!9973388.cpp!!!	start() : void
    pthread_t thread;
    pthread_create(&thread, NULL,
                   DnsProxyListener::GetHostByAddrHandler::threadStart, this);
!!!9973516.cpp!!!	run() : void
    if (DBG) {
        ALOGD("DnsProxyListener::GetHostByAddrHandler::run\n");
    }

    struct hostent* hp;

    // NOTE gethostbyaddr should take a void* but bionic thinks it should be char*
    hp = gethostbyaddr((char*)mAddress, mAddressLen, mAddressFamily);

    if (DBG) {
        ALOGD("GetHostByAddrHandler::run gethostbyaddr errno: %s hp->h_name = %s, name_len = %d\n",
                hp ? "success" : strerror(errno),
                (hp && hp->h_name) ? hp->h_name: "null",
                (hp && hp->h_name) ? strlen(hp->h_name)+ 1 : 0);
    }

    bool failed = true;
    if (hp) {
        failed = mClient->sendBinaryMsg(ResponseCode::DnsProxyQueryResult,
                                        hp->h_name ? hp->h_name : "",
                                        hp->h_name ? strlen(hp->h_name)+ 1 : 0);
    } else {
        uint32_t error = h_errno;
        failed = mClient->sendBinaryMsg(ResponseCode::DnsProxyOperationFailed,
                                        &error, sizeof(error));
    }

    if (failed) {
        ALOGW("GetHostByAddrHandler: Error writing DNS result to client\n");
    }
    mClient->decRef();
