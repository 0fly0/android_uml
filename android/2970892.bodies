class DmpCecService
!!!12057484.java!!!	DmpCecService(inout context : Context)
        mContext = context;
        // register receiver listening for OTP to avoid conflict with IRBlaster
        IntentFilter intentFilter = new IntentFilter(ACTION_ENABLE_ONETOUCPLAY);
        intentFilter.addAction(ACTION_DISABLE_ONETOUCPLAY);
        mContext.registerReceiver(mReceiver, intentFilter);
        mActivityMgr = (ActivityManager)context.getSystemService(Activity.ACTIVITY_SERVICE);
        initNative(this);
!!!12057612.java!!!	isOfType(in devTypeId : int) : boolean
        return (mDevTypeId == devTypeId);
!!!12057740.java!!!	enableCEC(inout enable : boolean) : boolean
        boolean result = true;
        if (!bIsCecEnabled) {
            mExitMonitor = false;
            new Thread(new TVPlayerMonitor()).start();
            if (result = (0 == enableCECHdmiNative(1))) {
                mContext.sendBroadcast(
                    new Intent(HdmiCecUtils.CEC_ENABLED_ACTION));
                bIsCecEnabled = true;
            } else {
                Log.e(TAG, "enableCECHdmiNative(1) failed!");
            }
        }
        return result;
!!!12057868.java!!!	disableCEC() : boolean
        boolean result = true;
        if (bIsCecEnabled) {
            mExitMonitor = true;
            if (result = (0 == enableCECHdmiNative(0))) {
                mContext.sendBroadcast(
                    new Intent(HdmiCecUtils.CEC_DISABLED_ACTION));
                bIsCecEnabled = false;
            } else {
                Log.e(TAG, "enableCECHdmiNative(0) failed!");
            }
        }
        return result;
!!!12057996.java!!!	isCECEnabled() : boolean
        if (DEBUG) {
            Log.d(TAG, "isCECEnabled() return " + bIsCecEnabled);
        }
        return bIsCecEnabled;
!!!12058124.java!!!	enableDeviceAutoPowerOff() : boolean
        return (0 == enableAutoPowerOffNative(1));
!!!12058252.java!!!	disableDeviceAutoPowerOff() : boolean
        return (0 == enableAutoPowerOffNative(0));
!!!12058380.java!!!	setPowerStatus(in powerMode : int) : boolean
        boolean result = (0 == setPowerStateNative(powerMode));
        if (DEBUG) {
            Log.d(TAG, "setPowerStatus() return " + result);
        }
        return result;
!!!12058508.java!!!	sendRoutingChange() : boolean
        // TODO: may be there's multiple HDMI inputs, refine this
        boolean result = (0 == sendRoutingChangeNative(0, 1));
        if (DEBUG) {
            Log.d(TAG, "sendRoutingChange() return " + result);
        }
        return result;
!!!12058636.java!!!	setActiveSource() : boolean
        boolean result = (0 == setActiveSourceNative());
        if (DEBUG) {
            Log.d(TAG, "setActiveSource() return " + result);
        }
        return result;
!!!12058764.java!!!	sendUcPressed(in destAddr : int, in ucCode : int) : boolean
        return (0 == sendUcPressedNative(destAddr, ucCode));
!!!12058892.java!!!	sendUcReleased(in destAddr : int) : boolean
        return (0 == sendUcReleasedNative(destAddr));
!!!12059020.java!!!	getLogicalAddressByPort(in portId : int) : int
        return getLogiAddrByPortNative(portId);
!!!12059148.java!!!	getSupportedCECFeatureSet() : List<String>
        List<String> cecFeatureList = new ArrayList<String>();
        cecFeatureList.add("OTP");
        cecFeatureList.add("MENU_CONTROL");
        cecFeatureList.add("SYSTEM_INFORMATION");
        cecFeatureList.add("ROUTINE_CONTROL");
        cecFeatureList.add("REMOTE_CONTROL_PASS_THROUGH");
        return cecFeatureList;
!!!12059276.java!!!	nativeEventHandler(in event : int, in devAddress : int, in opCode : int, in evtParam : int, in usrParam : int, in usrParam2 : int, in datalength : int) : void
        switch(event) {
        case CecServiceHub.CEC_STOP_BEING_ACTIVE:
        case CecServiceHub.CEC_START_BEING_ACTIVE:
        case CecServiceHub.CEC_SET_STREAM_PATH:
            handleEventWithIntParam(event, 0, 0, usrParam);
            break;
        case CecServiceHub.CEC_MUTE_ON_TV_SPEAKER :
            handleEventWithIntParam(event, devAddress, opCode, 0);
            break;
        case CecServiceHub.CEC_MUTE_OFF_TV_SPEAKER :
            handleEventWithIntParam(event, devAddress, opCode, 0);
            break;
        case CecServiceHub.CEC_DISCOVERY_STARTED :
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_DISCOVERY_IN_PROGRESS :
            break;
        case CecServiceHub.CEC_DISCOVERY_STOPPED :
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_OSD_DISPLAY_MODE :
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_POWER_STATUS :
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_ACTIVE_INPUT :
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_IMAGE_VIEW_ON :
            //TODO
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_TEXT_VIEW_ON :
            //TODO
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_INACTIVE_INPUT :
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_REMOTE_DECK_STATUS :
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_REMOTE_TUNER_STATUS :
            break;
        case CecServiceHub.CEC_CHANGE_CHANNEL :
            break;
        case CecServiceHub.CEC_CHANNEL_UP :
            break;
        case CecServiceHub.CEC_CHANNEL_DOWN :
            break;
        case CecServiceHub.CEC_VENDOR_COMMAND :
            int vendor_ID;
            vendor_ID = 0x080046; //SONY_VENDOR_ID
            handleEventWithVendorCmdParam(event, devAddress, opCode, 0,
                vendor_ID, usrParam, usrParam2, datalength);
            break;
        case CecServiceHub.CEC_DEVICE_MENU_ON :
            handleEventWithIntParam(event, devAddress, opCode,  0);
            break;
        case CecServiceHub.CEC_DEVICE_MENU_OFF :
            handleEventWithIntParam(event, devAddress, opCode, 0);
            break;
        case CecServiceHub.CEC_USER_KEY :
            handleEventWithIntParam(event, devAddress, opCode, evtParam);
            break;
        case CecServiceHub.CEC_AUDIO_STATUS_UPDATE :
            //TODO
            //handleEventWithIntBoolParam(event, devAddress, opCode, evtParam,
            //usrParam);
            break;
        case CecServiceHub.CEC_CHANGE_AUDIO_RATE :
            //handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_SET_MENU_LANG:
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_STANDBY:
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        case CecServiceHub.CEC_DISC_INSERTION:
            handleEventWithIntParam(event, devAddress, opCode, usrParam);
            break;
        default:
            break;
        }
        return;
!!!12059404.java!!!	handleEventWithIntParam(in event : int, in devAddress : int, in opCode : int, in eventParam : int) : void
        if (DEBUG) {
            Log.d(TAG,"handleEventWithIntParam() with event:" + event +
                " devAddress:" + devAddress + " opCode:" + opCode + " eventParam"
                + eventParam);
        }

        switch(event) {
            case CecServiceHub.CEC_USER_KEY:
                InputManager inputMgr = InputManager.getInstance();
                if (DEBUG) {
                    Log.d(TAG, "CEC_USER_KEY keycode: " + opCode + " eventType: "
                        + eventParam);
                }
                KeyEvent keyup,keydown;
                int keycode = opCode;
                int flags = 0;
                long now = SystemClock.uptimeMillis();
                keyup = new KeyEvent(now, now, KeyEvent.ACTION_UP, keycode, 0, 0);
                keydown = new KeyEvent(now, now, KeyEvent.ACTION_DOWN, keycode, 0, 0);
                switch (eventParam) {
                    case 0://key up/release
                        try {
                            inputMgr.injectInputEvent(keyup,
                                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
                        }catch(Exception exp){
                            exp.printStackTrace();
                        }
                        break;
                    case 1://key down/press
                        try {
                            inputMgr.injectInputEvent(keydown,
                                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
                        } catch(Exception exp) {
                            exp.printStackTrace();
                        }
                        break;
                    case 2://combo key press and release
                        try {
                            inputMgr.injectInputEvent(keydown,
                                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
                            inputMgr.injectInputEvent(keyup,
                                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
                        } catch (Exception exp) {
                            exp.printStackTrace();
                        }
                        break;
                    case 3://key down long press (implement the press and hold
                           //operation in HDMI_CEC spec CEC 13.13.3)
                        if (DEBUG) {
                            Log.d(TAG, "inject the longpress keyevent(keycode:"
                                + keycode +")");
                        }

                        try {
                            inputMgr.injectInputEvent(KeyEvent.changeFlags(keydown,
                                KeyEvent.FLAG_LONG_PRESS),
                                InputManager.INJECT_INPUT_EVENT_MODE_ASYNC);
                        } catch(Exception exp) {
                            exp.printStackTrace();
                        }
                        break;
                }
                break;

            case CecServiceHub.CEC_DEVICE_MENU_ON:
                {
                    Intent broadcastIntent = new Intent(
                        HdmiCecUtils.ACTION_REQUEST_MENU_ON);
                    if (DEBUG) {
                        Log.d(TAG, "Dump Intent which handle CEC_DEVICE_MENU_ON"
                                + "  broadcast Intent " + broadcastIntent);
                    }
                    mContext.sendBroadcast(broadcastIntent);
                }
                break;

            case CecServiceHub.CEC_DEVICE_MENU_OFF:
                {
                    Intent broadcastIntent = new Intent(
                        HdmiCecUtils.ACTION_REQUEST_MENU_OFF);
                    if (DEBUG) {
                        Log.d(TAG, "Dump Intent which handle CEC_DEVICE_MENU_OFF"
                                + "  broadcast Intent " + broadcastIntent);
                    }
                    mContext.sendBroadcast(broadcastIntent);
                }
                break;

            case CecServiceHub.CEC_STOP_BEING_ACTIVE:
                break;

            case CecServiceHub.CEC_SET_STREAM_PATH:
                if (DEBUG) {
                    Log.d(TAG, "CEC_SET_STREAM_PATH");
                }
                {
                    if (!mOTPEnabled) {
                        Log.i(TAG, "OTP disabled, skip actually set stream path");
                        break;
                    }
                    // Send a broadcast indicating the device plugged in port "eventParam" becomes
                    // the new active source, ourself(current device) should play a role of
                    // "CEC Switch" to pass through the image content of that device
                    Intent broadcastIntent = new Intent(
                        HdmiCecUtils.ACTION_SET_STREAM_PATH);
                    broadcastIntent.putExtra(HdmiCecUtils.EXTRA_HDMI_PORT, eventParam);
                    if (DEBUG) {
                        Log.d(TAG, "Dump Intent which handle CEC_SET_STREAM_PATH"
                                + "  broadcast Intent " + broadcastIntent
                                + " EXTRA_HDMI_PORT_NO:"
                                +  eventParam);
                    }
                    mContext.sendBroadcast(broadcastIntent);
                }
                break;

            case CecServiceHub.CEC_START_BEING_ACTIVE:
                if (DEBUG) {
                    Log.d(TAG, "CEC_START_BEING_ACTIVE");
                }
                {
                    // Send a broadcast indicating ourself(the current device) become an active
                    // source, normally with a extra port "0" which represents ourself
                    Intent broadcastIntent = new Intent(HdmiCecUtils.ACTION_HDMI_CEC_ACTIVE_SOURCE);
                    broadcastIntent.putExtra(HdmiCecUtils.EXTRA_HDMI_PORT, eventParam);
                    if (DEBUG) {
                        Log.d(TAG, "Dump Intent of ACTION_HDMI_CEC_ACTIVE_SOURCE"
                                + "  broadcast Intent " + broadcastIntent
                                + " EXTRA_HDMI_PORT_NO:"
                                +  eventParam);
                    }
                    mContext.sendBroadcast(broadcastIntent);
                }
                break;

            case CecServiceHub.CEC_SET_MENU_LANG:
                if (DEBUG) {
                    Log.d(TAG, "Case CEC_MENU_LANGUGAGE");
                    Log.d(TAG, "Requesting menu language: " + eventParam);
                }
                String languageSelection = null;
                String countrySelection = null;
                switch(eventParam) {
                    case CecServiceHub.MENU_LANGUAGE_ENGLISH:
                        languageSelection = "en";
                        countrySelection = "US";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_FRENCH:
                        languageSelection = "fr";
                        countrySelection = "FR";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_SPANISH:
                        languageSelection = "es";
                        countrySelection = "US";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_ITALIAN:
                        languageSelection = "it";
                        countrySelection = "IT";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_GERMAN:
                        languageSelection = "de";
                        countrySelection = "DE";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_DUTCH:
                        languageSelection = "nl";
                        countrySelection = "NL";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_PORTUGUESE:
                        languageSelection = "pt";
                        countrySelection = "PT";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_CHINESE:
                        languageSelection = "zh";
                        countrySelection = "CN";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_JAPANESE:
                        languageSelection = "ja";
                        countrySelection = "JP";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_TRADITIONAL_CHINESE:
                        languageSelection = "zh";
                        countrySelection = "TW";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_BULGARIAN:
                        languageSelection = "bg";
                        countrySelection = "BG";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_CATALAN:
                        languageSelection = "ca";
                        countrySelection = "ES";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_CROATIAN:
                        languageSelection = "hr";
                        countrySelection = "HR";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_CZECH:
                        languageSelection = "cs";
                        countrySelection = "CZ";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_DANISH:
                        languageSelection = "da";
                        countrySelection = "DK";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_FINNISH:
                        languageSelection = "fi";
                        countrySelection = "FI";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_GREEK:
                        languageSelection = "el";
                        countrySelection = "GR";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_HUNGARIAN:
                        languageSelection = "hu";
                        countrySelection = "HU";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_LATVIAN:
                        languageSelection = "lv";
                        countrySelection = "LV";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_LITHUANIAN:
                        languageSelection = "lt";
                        countrySelection = "LT";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_NORWEGIAN:
                        languageSelection = "nb";
                        countrySelection = "NO";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_POLISH:
                        languageSelection = "pl";
                        countrySelection = "PL";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_ROMANIAN:
                        languageSelection = "ro";
                        countrySelection = "RO";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_RUSSIAN:
                        languageSelection = "ru";
                        countrySelection = "RU";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_SLOVAK:
                        languageSelection = "sk";
                        countrySelection = "SK";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_SLOVENIAN:
                        languageSelection = "sl";
                        countrySelection = "SI";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_SWEDISH:
                        languageSelection = "sv";
                        countrySelection = "SE";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_TURKISH:
                        languageSelection = "tr";
                        countrySelection = "TR";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_UKRAINIAN:
                        languageSelection = "uk";
                        countrySelection = "UA";
                        break;
                    case CecServiceHub.MENU_LANGUAGE_VIETNAMESE:
                        languageSelection = "vi";
                        countrySelection = "VN";
                        break;
                    default:
                        Log.e(TAG, "special language (" + eventParam + ") ignored!");
                        break;
                }

                if (DEBUG) {
                    Log.d(TAG, "Will set menu language to: " +
                        languageSelection + "_" + countrySelection);
                }

                if (null != languageSelection) {
                    Locale newLocale = new Locale(languageSelection,
                        countrySelection);
                    if (!targetLocaleSupported(newLocale)) {
                        break;
                    }
                    IActivityManager am = ActivityManagerNative.getDefault();
                    try {
                        Configuration config_am = am.getConfiguration();
                        config_am.locale = newLocale;
                        config_am.userSetLocale = true;
                        am.updateConfiguration(config_am);
                    } catch (Exception exp) {
                        exp.printStackTrace();
                    }
                }
                break;

            case CecServiceHub.CEC_STANDBY:
                if (DEBUG) {
                    Log.d(TAG, "Case CEC_STANDBY");
                }
                // send a broadcast with NEED_CONFIRM_EXTRA "false" means standby while "true"
                // means power off
                // The following code is for platform that shipping Appkiller Service
                /*
                   Intent intent = new Intent(HdmiCecUtils.ACTION_HDMI_CEC_NORMAL_POWER_OFF);
                   intent.putExtra(HdmiCecUtils.NEED_CONFIRM_EXTRA, false);
                   mContext.sendBroadcast(intent);
                */
                shutdown();

                break;

            case CecServiceHub.CEC_DISC_INSERTION:
                if (DEBUG) {
                    Log.d(TAG, "Case CEC_DISC_INSERTION");
                }
                {
                    // Send a broadcast indicating a disc is inserted, normally this intent
                    // request other component to launch a player app preparing to render the
                    // content of disc
                    Intent discIntent = new Intent(HdmiCecUtils.ACTION_HDMI_CEC_DISC_INSERTED);
                    if (DEBUG) {
                        Log.d(TAG, "ACTION_HDMI_CEC_DISC_INSERTED"  + discIntent);
                    }
                    mContext.sendBroadcast(discIntent);
                }
                break;

            default:
                Log.e(TAG, "special event(" + event + ") ignored!");
                break;
        }
!!!12059532.java!!!	targetLocaleSupported(in target : Locale) : boolean
        boolean supported = false;
        final Resources resources = mContext.getResources();
        final String[] locales = Resources.getSystem().getAssets().getLocales();
        Arrays.sort(locales);
        for (String locale : locales) {
            Log.d(TAG, "locale " + locale);
            if (target.toString().equals(locale)
                || target.getCountry().equals(locale)
                || target.getLanguage().equals(locale)) {
                supported = true;
                break;
            }
        }
        Log.d(TAG, "The target locale(" + target + ")" + " is " + supported);
        return supported;
!!!12059660.java!!!	handleEventWithVendorCmdParam(in event : int, in devAddress : int, in opCode : int, in type : int, in vendorId : int, in data : int, in data2 : int, in dataLen : int) : void
        if (DEBUG) {
            Log.d(TAG, "@@@@@@@@@@@@@@@@@@@@@@@ handleEventWithVendorCmdParam "
                + "@@@@@@@@@@@@@@@@@@@@@@ ");
            Log.d(TAG, "************ EVENT --- " + event);
            Log.d(TAG, "************ DEV ADDRESS --- " + devAddress);
            Log.d(TAG, "************ OPCODE --- " + opCode);
            Log.d(TAG, "************ TYPE --- " + type);
            Log.d(TAG, "************ VENDOR ID --- " + vendorId);
            Log.d(TAG, "************ DATA --- " + data);
            Log.d(TAG, "************ DATA2 --- " + data2);
            Log.d(TAG, "************ DATA LEN --- " + dataLen);
        }
        // vendor specific cmd handling should be added here
!!!12059788.java!!!	handleEventWithIntBoolParam(in event : int, in devAddress : int, in opCode : int, in volume : int, inout bMute : boolean) : void
        Log.i(TAG, "@@@@@@@@@@@@@@@@@@@@@@@ handleEventWithIntBoolParam " +
            "@@@@@@@@@@@@@@@@@@@@@@ ");
!!!12059916.java!!!	handleEventWithIntCharParam(in event : int, in devAddress : int, in opCode : int, in mode : int, in keyCode : char) : void
        Log.i(TAG, "@@@@@@@@@@@@@@@@@@@@@@@ handleEventWithIntCharParam " +
            "@@@@@@@@@@@@@@@@@@@@@@ ");
!!!12060044.java!!!	handleEventWithChnInfoParam(in event : int, in devAddress : int, in opCode : int, in type : int, inout bRecording : boolean, in eventParam1 : int, in eventParam2 : int, in eventParam3 : int, in eventParam4 : int) : void
        if (DEBUG) {
            Log.d(TAG, "@@@@@@@@@@@@@@@@@@@@@@@ handleEventWithChnInfoParam " +
                "@@@@@@@@@@@@@@@@@@@@@@ ");
        }
!!!12060172.java!!!	isForegroundApp(in pkgName : String, in clsName : String) : boolean
        if (pkgName == null || clsName == null || mActivityMgr == null) {
            return false;
        }
        if (DEBUG && DEBUG_MONITOR) {
            Log.d(TAG, "isForegroundApp() pkg:" + pkgName);
            Log.d(TAG, "isForegroundApp() clsName:" + clsName);
        }

        List<RunningTaskInfo> tasks = mActivityMgr.getRunningTasks(1);
        if (tasks.size() == 0) {
            return false;
        }

        boolean isForeground = pkgName.equals(tasks.get(0).baseActivity.getPackageName())
          && clsName.equals(tasks.get(0).baseActivity.getClassName());
        if (DEBUG && DEBUG_MONITOR) {
            Log.d(TAG, "Current foreground app:" + tasks.get(0).baseActivity);
            Log.d(TAG, "isForeground:" + isForeground);
        }
        return isForeground;
!!!12060300.java!!!	isTVPlayerForegroundBool() : boolean
        if (TVPlayer_PKG == null) {
            TVPlayer_PKG = mContext.getResources().getString(R.string.tvplayer_pkg);
        }
        if (TVPlayer_CLS == null) {
            TVPlayer_CLS = mContext.getResources().getString(R.string.tvplayer_cls);
        }

        if (DEBUG && DEBUG_MONITOR) {
            Log.d(TAG, "TVPlayer_PKG:" + TVPlayer_PKG);
            Log.d(TAG, "TVPlayer_CLS:" + TVPlayer_CLS);
        }
        mTvPlayerForground = isForegroundApp(TVPlayer_PKG, TVPlayer_CLS);
        return mTvPlayerForground;
!!!12060428.java!!!	isTVPlayerForeground() : int
        return isTVPlayerForegroundBool() ? 1 : 0;
!!!12060556.java!!!	shutdown() : void
        if (DEBUG) {
            Log.d(TAG, "shutdown() in");
        }

        Thread thr = new Thread("ShutdownThread") {
            @Override
            public void run() {
                IPowerManager pm = IPowerManager.Stub.asInterface(
                        ServiceManager.getService(Context.POWER_SERVICE));
                try {
                    pm.shutdown(false, true);
                    if (DEBUG) {
                        Log.d(TAG, "shutdown() invoke shutdown in IPowerManager success");
                    }
                } catch (RemoteException e) {
                    if (DEBUG) {
                        Log.d(TAG, "shutdown() invoke shutdown in IPowerManager failed");
                    }
                    e.printStackTrace();
                }
            }
        };
        thr.start();
        setPowerStatus(HdmiCecUtils.PowerStatus.POWER_MODE_OFF);
        if (DEBUG) {
            Log.d(TAG, "shutdown() out");
        }
!!!12060812.java!!!	finalize() : void
        if (mContext != null) {
            mContext.unregisterReceiver(mReceiver);
            mReceiver = null;
        }
        if (DEBUG_RES_CLEANUP) {
            Log.d(TAG, "Inside finalize() of class DmpCecService");
        }
        nativeFinalize();
        if (DEBUG_RES_CLEANUP) {
            Log.d(TAG, "nativeFinalize() of class DmpCecService is called");
        }
