class BasicMediaDeviceSettings
!!!13213708.java!!!	BasicMediaDeviceSettings(in context : Context)
        mPreferences = PreferenceManager.getDefaultSharedPreferences(context);
        mPackageName = context.getPackageName();
!!!13213836.java!!!	getPairedDeviceIds() : List<String>
        return new ArrayList<String>(mPreferences.getStringSet(
                PAIRED_KEY, new HashSet<String>()));
!!!13213964.java!!!	setDevicePaired(in deviceId : String, in paired : boolean) : void
        final Set<String> pairedDevices = mPreferences.getStringSet(PAIRED_KEY,
                new HashSet<String>());
        if (paired) {
            pairedDevices.add(deviceId);
        } else {
            pairedDevices.remove(deviceId);
        }

        final SharedPreferences.Editor editor = mPreferences.edit();
        editor.putStringSet(PAIRED_KEY, pairedDevices);
        editor.apply();

        if (!paired) {
            // If unpaired, remove all the device's settings.
            removeAll(deviceId);
        }
!!!13214092.java!!!	isDevicePaired(in deviceId : String) : boolean
        return getPairedDeviceIds().contains(deviceId);
!!!13214220.java!!!	getString(in deviceId : String, in key : String, in defaultValue : String) : String
        final String prefKey = getPreferenceKey(deviceId, key);
        return mPreferences.getString(prefKey, defaultValue);
!!!13214348.java!!!	setString(in deviceId : String, in key : String, in value : String) : void
        final String prefKey = getPreferenceKey(deviceId, key);
        final SharedPreferences.Editor editor = mPreferences.edit();
        editor.putString(prefKey, value);
        editor.apply();
!!!13214476.java!!!	getLong(in deviceId : String, in key : String, in defaultValue : long) : long
        final String prefKey = getPreferenceKey(deviceId, key);
        return mPreferences.getLong(prefKey, defaultValue);
!!!13214604.java!!!	setLong(in deviceId : String, in key : String, in value : long) : void
        final String prefKey = getPreferenceKey(deviceId, key);
        final SharedPreferences.Editor editor = mPreferences.edit();
        editor.putLong(prefKey, value);
        editor.apply();
!!!13214732.java!!!	getBoolean(in deviceId : String, in key : String, inout defaultValue : boolean) : boolean
        final String prefKey = getPreferenceKey(deviceId, key);
        return mPreferences.getBoolean(prefKey, defaultValue);
!!!13214860.java!!!	setBoolean(in deviceId : String, in key : String, inout value : boolean) : void
        final String prefKey = getPreferenceKey(deviceId, key);
        final SharedPreferences.Editor editor = mPreferences.edit();
        editor.putBoolean(prefKey, value);
        editor.apply();
!!!13214988.java!!!	removeAll(in deviceId : String) : void
        final String prefKey = getPreferenceKey(deviceId, null);
        final Set<String> keys = mPreferences.getAll().keySet();

        final SharedPreferences.Editor editor = mPreferences.edit();

        for (String key : keys) {
            if (key.startsWith(prefKey)) {
                editor.remove(key);
            }
        }

        editor.apply();
!!!13215116.java!!!	getPreferenceKey(in deviceId : String, in key : String) : String
        StringBuilder sb = new StringBuilder(INITIAL_STRING_BUFFER_SIZE)
                .append(SETTINGS_KEY_PREFIX)
                .append(deviceId)
                .append('/');

        if (key != null) {
            sb.append(key);
        }

        return sb.toString();
!!!13215244.java!!!	generateUniqueDeviceId(in tag : String) : String
        String prefix = new StringBuilder(INITIAL_STRING_BUFFER_SIZE)
                .append(mPackageName)
                .append('.')
                .append(tag)
                .append('_')
                .toString();
        int prefixLength = prefix.length();

        int maxNum = -1;
        final List<String> ids = getPairedDeviceIds();
        for (String id : ids) {
            if (id.startsWith(prefix)) {
                int num = Integer.parseInt(id.substring(prefixLength));
                if (num > maxNum) maxNum = num;
            }
        }

        return prefix + (++maxNum);
