class ProtocolHandler
!!!13413516.java!!!	ProtocolHandler(inout context : Context, inout deviceSocket : Socket, inout inputBridge : InputBridge)
        mContext = context;
        mDeviceSocket = deviceSocket;
        mInputBridge = inputBridge;

        try {
            requestReceiver = new RequestReceiverImpl(mContext, mInputBridge);
            mSender = AnymoteFactory.getServerAdapter(
                    requestReceiver,
                    mDeviceSocket.getInputStream(),
                    mDeviceSocket.getOutputStream(),
                    createErrorListener());
            Log.d(LOG_TAG, "new ProtocolHandler created: " + deviceSocket);
        } catch (IOException e) {
            Log.d(LOG_TAG, "cannot get streams to client socket", e);
        }
!!!13413644.java!!!	teardown() : void
        if (mDeviceSocket != null) {
            Log.d(LOG_TAG, "ProtocolHandler teardown: " + mDeviceSocket);
            try {
                mDeviceSocket.close();
            } catch (IOException e) {
                Log.d(LOG_TAG, "Failed to close Device socket", e);
            }
            mDeviceSocket = null;
        }
        mSender = null;

        EventLogger.logDisconnected();
!!!13413772.java!!!	createErrorListener() : ErrorListener
        return new ErrorListener() {
            @Override
            public void onIoError(String message, Throwable exception) {
                Log.d(LOG_TAG, "IoError: " + message, exception);
                teardown();
            }
        };
!!!13413900.java!!!	verifyCertificate(inout trust : Certificate) : boolean
        if (mDeviceSocket instanceof SSLSocket) {
            SSLSocket socket = (SSLSocket) mDeviceSocket;
            try {
                Certificate[] certificates = socket.getSession().getPeerCertificates();
                for (Certificate cert : certificates) {
                    try {
                        cert.verify(trust.getPublicKey());
                        return true;
                    } catch (NoSuchAlgorithmException e) {
                    } catch (CertificateException e) {
                    } catch (InvalidKeyException e) {
                    } catch (NoSuchProviderException e) {
                    } catch (SignatureException e) {
                    }
                }
            } catch (SSLPeerUnverifiedException e) {
                return false;
            }
        }
        return true;
!!!13414028.java!!!	onRequireSoftKeyboard(in inputType : int, in imeAction : int, in hint : String) : void
      if (mSender != null) {
        mSender.sendSoftInputRequired(inputType, imeAction, hint);
      }
!!!13414156.java!!!	onDismissSoftKeyboard() : void
      if (mSender != null) {
        mSender.sendSoftInputDismiss();
      }
!!!13414284.java!!!	onSoftInputContent(in newContent : String, in selectStart : int, in selectEnd : int) : void
      if (mSender != null) {
        mSender.sendSoftInputContent(newContent, selectStart, selectEnd);
      }
!!!13414412.java!!!	onSoftInputUpdate(in newContent : String, in changePosition : int, in replaced : int, in inserted : int, in selectStart : int, in selectEnd : int) : void
      if (mSender != null) {
        mSender.sendSoftInputUpdate(newContent, changePosition, replaced, inserted,
            selectStart, selectEnd);
      }
!!!13414540.java!!!	setRemoteInputListener(inout listener : SoftInputListener) : void
      requestReceiver.setRemoteInputListener(listener);
!!!13414668.java!!!	isOrigin(inout source : Object) : boolean
      return requestReceiver == source;
