class DevicePolicyManager
!!!2956044.java!!!	DevicePolicyManager(inout context : Context, inout handler : Handler)
        mContext = context;
        mService = IDevicePolicyManager.Stub.asInterface(
                ServiceManager.getService(Context.DEVICE_POLICY_SERVICE));
!!!2956172.java!!!	create(inout context : Context, inout handler : Handler) : DevicePolicyManager
        DevicePolicyManager me = new DevicePolicyManager(context, handler);
        return me.mService != null ? me : null;
!!!2956300.java!!!	isAdminActive(inout who : ComponentName) : boolean
        if (mService != null) {
            try {
                return mService.isAdminActive(who, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return false;
!!!2956428.java!!!	getActiveAdmins() : ComponentName
        if (mService != null) {
            try {
                return mService.getActiveAdmins(UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return null;
!!!2956556.java!!!	packageHasActiveAdmins(in packageName : String) : boolean
        if (mService != null) {
            try {
                return mService.packageHasActiveAdmins(packageName, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return false;
!!!2956684.java!!!	removeActiveAdmin(inout who : ComponentName) : void
        if (mService != null) {
            try {
                mService.removeActiveAdmin(who, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2956812.java!!!	hasGrantedPolicy(inout admin : ComponentName, in usesPolicy : int) : boolean
        if (mService != null) {
            try {
                return mService.hasGrantedPolicy(admin, usesPolicy, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return false;
!!!2956940.java!!!	setPasswordQuality(inout admin : ComponentName, in quality : int) : void
        if (mService != null) {
            try {
                mService.setPasswordQuality(admin, quality, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2957068.java!!!	getPasswordQuality(inout admin : ComponentName) : int
        return getPasswordQuality(admin, UserHandle.myUserId());
!!!2957196.java!!!	getPasswordQuality(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordQuality(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return PASSWORD_QUALITY_UNSPECIFIED;
!!!2957324.java!!!	setPasswordMinimumLength(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumLength(admin, length, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2957452.java!!!	getPasswordMinimumLength(inout admin : ComponentName) : int
        return getPasswordMinimumLength(admin, UserHandle.myUserId());
!!!2957580.java!!!	getPasswordMinimumLength(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumLength(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2957708.java!!!	setPasswordMinimumUpperCase(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumUpperCase(admin, length, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2957836.java!!!	getPasswordMinimumUpperCase(inout admin : ComponentName) : int
        return getPasswordMinimumUpperCase(admin, UserHandle.myUserId());
!!!2957964.java!!!	getPasswordMinimumUpperCase(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumUpperCase(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2958092.java!!!	setPasswordMinimumLowerCase(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumLowerCase(admin, length, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2958220.java!!!	getPasswordMinimumLowerCase(inout admin : ComponentName) : int
        return getPasswordMinimumLowerCase(admin, UserHandle.myUserId());
!!!2958348.java!!!	getPasswordMinimumLowerCase(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumLowerCase(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2958476.java!!!	setPasswordMinimumLetters(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumLetters(admin, length, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2958604.java!!!	getPasswordMinimumLetters(inout admin : ComponentName) : int
        return getPasswordMinimumLetters(admin, UserHandle.myUserId());
!!!2958732.java!!!	getPasswordMinimumLetters(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumLetters(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2958860.java!!!	setPasswordMinimumNumeric(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumNumeric(admin, length, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2958988.java!!!	getPasswordMinimumNumeric(inout admin : ComponentName) : int
        return getPasswordMinimumNumeric(admin, UserHandle.myUserId());
!!!2959116.java!!!	getPasswordMinimumNumeric(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumNumeric(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2959244.java!!!	setPasswordMinimumSymbols(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumSymbols(admin, length, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2959372.java!!!	getPasswordMinimumSymbols(inout admin : ComponentName) : int
        return getPasswordMinimumSymbols(admin, UserHandle.myUserId());
!!!2959500.java!!!	getPasswordMinimumSymbols(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumSymbols(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2959628.java!!!	setPasswordMinimumNonLetter(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordMinimumNonLetter(admin, length, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2959756.java!!!	getPasswordMinimumNonLetter(inout admin : ComponentName) : int
        return getPasswordMinimumNonLetter(admin, UserHandle.myUserId());
!!!2959884.java!!!	getPasswordMinimumNonLetter(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordMinimumNonLetter(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2960012.java!!!	setPasswordHistoryLength(inout admin : ComponentName, in length : int) : void
        if (mService != null) {
            try {
                mService.setPasswordHistoryLength(admin, length, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2960140.java!!!	setPasswordExpirationTimeout(inout admin : ComponentName, in timeout : long) : void
        if (mService != null) {
            try {
                mService.setPasswordExpirationTimeout(admin, timeout, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2960268.java!!!	getPasswordExpirationTimeout(inout admin : ComponentName) : long
        if (mService != null) {
            try {
                return mService.getPasswordExpirationTimeout(admin, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2960396.java!!!	getPasswordExpiration(inout admin : ComponentName) : long
        if (mService != null) {
            try {
                return mService.getPasswordExpiration(admin, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2960524.java!!!	getPasswordHistoryLength(inout admin : ComponentName) : int
        return getPasswordHistoryLength(admin, UserHandle.myUserId());
!!!2960652.java!!!	getPasswordHistoryLength(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getPasswordHistoryLength(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2960780.java!!!	getPasswordMaximumLength(in quality : int) : int
        // Kind-of arbitrary.
        return 16;
!!!2960908.java!!!	isActivePasswordSufficient() : boolean
        if (mService != null) {
            try {
                return mService.isActivePasswordSufficient(UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return false;
!!!2961036.java!!!	getCurrentFailedPasswordAttempts() : int
        if (mService != null) {
            try {
                return mService.getCurrentFailedPasswordAttempts(UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return -1;
!!!2961164.java!!!	setMaximumFailedPasswordsForWipe(inout admin : ComponentName, in num : int) : void
        if (mService != null) {
            try {
                mService.setMaximumFailedPasswordsForWipe(admin, num, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2961292.java!!!	getMaximumFailedPasswordsForWipe(inout admin : ComponentName) : int
        return getMaximumFailedPasswordsForWipe(admin, UserHandle.myUserId());
!!!2961420.java!!!	getMaximumFailedPasswordsForWipe(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getMaximumFailedPasswordsForWipe(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2961548.java!!!	resetPassword(in password : String, in flags : int) : boolean
        if (mService != null) {
            try {
                return mService.resetPassword(password, flags, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return false;
!!!2961676.java!!!	setMaximumTimeToLock(inout admin : ComponentName, in timeMs : long) : void
        if (mService != null) {
            try {
                mService.setMaximumTimeToLock(admin, timeMs, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2961804.java!!!	getMaximumTimeToLock(inout admin : ComponentName) : long
        return getMaximumTimeToLock(admin, UserHandle.myUserId());
!!!2961932.java!!!	getMaximumTimeToLock(inout admin : ComponentName, in userHandle : int) : long
        if (mService != null) {
            try {
                return mService.getMaximumTimeToLock(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return 0;
!!!2962060.java!!!	lockNow() : void
        if (mService != null) {
            try {
                mService.lockNow();
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2962188.java!!!	wipeData(in flags : int) : void
        if (mService != null) {
            try {
                mService.wipeData(flags, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2962316.java!!!	setGlobalProxy(inout admin : ComponentName, inout proxySpec : Proxy, inout exclusionList : List<String>) : ComponentName
        if (proxySpec == null) {
            throw new NullPointerException();
        }
        if (mService != null) {
            try {
                String hostSpec;
                String exclSpec;
                if (proxySpec.equals(Proxy.NO_PROXY)) {
                    hostSpec = null;
                    exclSpec = null;
                } else {
                    if (!proxySpec.type().equals(Proxy.Type.HTTP)) {
                        throw new IllegalArgumentException();
                    }
                    InetSocketAddress sa = (InetSocketAddress)proxySpec.address();
                    String hostName = sa.getHostName();
                    int port = sa.getPort();
                    StringBuilder hostBuilder = new StringBuilder();
                    hostSpec = hostBuilder.append(hostName)
                        .append(":").append(Integer.toString(port)).toString();
                    if (exclusionList == null) {
                        exclSpec = "";
                    } else {
                        StringBuilder listBuilder = new StringBuilder();
                        boolean firstDomain = true;
                        for (String exclDomain : exclusionList) {
                            if (!firstDomain) {
                                listBuilder = listBuilder.append(",");
                            } else {
                                firstDomain = false;
                            }
                            listBuilder = listBuilder.append(exclDomain.trim());
                        }
                        exclSpec = listBuilder.toString();
                    }
                    android.net.Proxy.validate(hostName, Integer.toString(port), exclSpec);
                }
                return mService.setGlobalProxy(admin, hostSpec, exclSpec, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return null;
!!!2962444.java!!!	getGlobalProxyAdmin() : ComponentName
        if (mService != null) {
            try {
                return mService.getGlobalProxyAdmin(UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return null;
!!!2962572.java!!!	setStorageEncryption(inout admin : ComponentName, inout encrypt : boolean) : int
        if (mService != null) {
            try {
                return mService.setStorageEncryption(admin, encrypt, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return ENCRYPTION_STATUS_UNSUPPORTED;
!!!2962700.java!!!	getStorageEncryption(inout admin : ComponentName) : boolean
        if (mService != null) {
            try {
                return mService.getStorageEncryption(admin, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return false;
!!!2962828.java!!!	getStorageEncryptionStatus() : int
        return getStorageEncryptionStatus(UserHandle.myUserId());
!!!2962956.java!!!	getStorageEncryptionStatus(in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getStorageEncryptionStatus(userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return ENCRYPTION_STATUS_UNSUPPORTED;
!!!2963084.java!!!	setCameraDisabled(inout admin : ComponentName, inout disabled : boolean) : void
        if (mService != null) {
            try {
                mService.setCameraDisabled(admin, disabled, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2963212.java!!!	getCameraDisabled(inout admin : ComponentName) : boolean
        return getCameraDisabled(admin, UserHandle.myUserId());
!!!2963340.java!!!	getCameraDisabled(inout admin : ComponentName, in userHandle : int) : boolean
        if (mService != null) {
            try {
                return mService.getCameraDisabled(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return false;
!!!2963468.java!!!	setKeyguardDisabledFeatures(inout admin : ComponentName, in which : int) : void
        if (mService != null) {
            try {
                mService.setKeyguardDisabledFeatures(admin, which, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2963596.java!!!	getKeyguardDisabledFeatures(inout admin : ComponentName) : int
        return getKeyguardDisabledFeatures(admin, UserHandle.myUserId());
!!!2963724.java!!!	getKeyguardDisabledFeatures(inout admin : ComponentName, in userHandle : int) : int
        if (mService != null) {
            try {
                return mService.getKeyguardDisabledFeatures(admin, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
        return KEYGUARD_DISABLE_FEATURES_NONE;
!!!2963852.java!!!	setActiveAdmin(inout policyReceiver : ComponentName, inout refreshing : boolean) : void
        if (mService != null) {
            try {
                mService.setActiveAdmin(policyReceiver, refreshing, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2963980.java!!!	getAdminInfo(inout cn : ComponentName) : DeviceAdminInfo
        ActivityInfo ai;
        try {
            ai = mContext.getPackageManager().getReceiverInfo(cn,
                    PackageManager.GET_META_DATA);
        } catch (PackageManager.NameNotFoundException e) {
            Log.w(TAG, "Unable to retrieve device policy " + cn, e);
            return null;
        }

        ResolveInfo ri = new ResolveInfo();
        ri.activityInfo = ai;

        try {
            return new DeviceAdminInfo(mContext, ri);
        } catch (XmlPullParserException e) {
            Log.w(TAG, "Unable to parse device policy " + cn, e);
            return null;
        } catch (IOException e) {
            Log.w(TAG, "Unable to parse device policy " + cn, e);
            return null;
        }
!!!2964108.java!!!	getRemoveWarning(inout admin : ComponentName, inout result : RemoteCallback) : void
        if (mService != null) {
            try {
                mService.getRemoveWarning(admin, result, UserHandle.myUserId());
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2964236.java!!!	setActivePasswordState(in quality : int, in length : int, in letters : int, in uppercase : int, in lowercase : int, in numbers : int, in symbols : int, in nonletter : int, in userHandle : int) : void
        if (mService != null) {
            try {
                mService.setActivePasswordState(quality, length, letters, uppercase, lowercase,
                        numbers, symbols, nonletter, userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2964364.java!!!	reportFailedPasswordAttempt(in userHandle : int) : void
        if (mService != null) {
            try {
                mService.reportFailedPasswordAttempt(userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
!!!2964492.java!!!	reportSuccessfulPasswordAttempt(in userHandle : int) : void
        if (mService != null) {
            try {
                mService.reportSuccessfulPasswordAttempt(userHandle);
            } catch (RemoteException e) {
                Log.w(TAG, "Failed talking with device policy service", e);
            }
        }
