class BaseDumper
!!!14887948.java!!!	BaseDumper(inout bytes : byte, inout out : PrintStream, inout filePath : String, inout args : Args)
        this.bytes = bytes;
        this.rawBytes = args.rawBytes;
        this.out = out;
        this.width = (args.width <= 0) ? 79 : args.width;
        this.filePath = filePath;
        this.strictParse = args.strictParse;
        this.indent = 0;
        this.separator = rawBytes ? "|" : "";
        this.at = 0;
        this.args = args;

        int hexCols = (((width - 5) / 15) + 1) & ~1;
        if (hexCols < 6) {
            hexCols = 6;
        } else if (hexCols > 10) {
            hexCols = 10;
        }
        this.hexCols = hexCols;
!!!14888076.java!!!	computeParamWidth(inout meth : ConcreteMethod, inout isStatic : boolean) : int
        return meth.getEffectiveDescriptor().getParameterTypes().
            getWordCount();
!!!14888204.java!!!	changeIndent(in indentDelta : int) : void
        indent += indentDelta;

        separator = rawBytes ? "|" : "";
        for (int i = 0; i < indent; i++) {
            separator += "  ";
        }
!!!14888332.java!!!	parsed(inout bytes : ByteArray, in offset : int, in len : int, inout human : String) : void
        offset = bytes.underlyingOffset(offset, getBytes());

        boolean rawBytes = getRawBytes();

        if (offset < at) {
            println("<dump skipped backwards to " + Hex.u4(offset) + ">");
            at = offset;
        } else if (offset > at) {
            String hex = rawBytes ? hexDump(at, offset - at) : "";
            print(twoColumns(hex, "<skipped to " + Hex.u4(offset) + ">"));
            at = offset;
        }

        String hex = rawBytes ? hexDump(offset, len) : "";
        print(twoColumns(hex, human));
        at += len;
!!!14888460.java!!!	startParsingMember(inout bytes : ByteArray, in offset : int, inout name : String, inout descriptor : String) : void
        // This space intentionally left blank.
!!!14888588.java!!!	endParsingMember(inout bytes : ByteArray, in offset : int, inout name : String, inout descriptor : String, inout member : Member) : void
        // This space intentionally left blank.
!!!14888716.java!!!	getAt() : int
        return at;
!!!14888844.java!!!	setAt(inout arr : ByteArray, in offset : int) : void
        at = arr.underlyingOffset(offset, bytes);
!!!14888972.java!!!	getBytes() : byte
        return bytes;
!!!14889100.java!!!	getFilePath() : String
        return filePath;
!!!14889228.java!!!	getStrictParse() : boolean
        return strictParse;
!!!14889356.java!!!	print(inout s : String) : void
        out.print(s);
!!!14889484.java!!!	println(inout s : String) : void
        out.println(s);
!!!14889612.java!!!	getRawBytes() : boolean
        return rawBytes;
!!!14889740.java!!!	getWidth1() : int
        if (rawBytes) {
            return 5 + (hexCols * 2) + (hexCols / 2);
        }

        return 0;
!!!14889868.java!!!	getWidth2() : int
        int w1 = rawBytes ? (getWidth1() + 1) : 0;
        return width - w1 - (indent * 2);
!!!14889996.java!!!	hexDump(in offset : int, in len : int) : String
        return Hex.dump(bytes, offset, len, offset, hexCols, 4);
!!!14890124.java!!!	twoColumns(inout s1 : String, inout s2 : String) : String
        int w1 = getWidth1();
        int w2 = getWidth2();

        try {
            if (w1 == 0) {
                int len2 = s2.length();
                StringWriter sw = new StringWriter(len2 * 2);
                IndentingWriter iw = new IndentingWriter(sw, w2, separator);

                iw.write(s2);
                if ((len2 == 0) || (s2.charAt(len2 - 1) != '\n')) {
                    iw.write('\n');
                }
                iw.flush();

                return sw.toString();
            } else {
                return TwoColumnOutput.toString(s1, w1, separator, s2, w2);
            }
        } catch (IOException ex) {
            throw new RuntimeException(ex);
        }
