class Posix
!!!2057499.java!!!	pread(inout fd : FileDescriptor, inout buffer : ByteBuffer, in offset : long) : int
        if (buffer.isDirect()) {
            return preadBytes(fd, buffer, buffer.position(), buffer.remaining(), offset);
        } else {
            return preadBytes(fd, NioUtils.unsafeArray(buffer), NioUtils.unsafeArrayOffset(buffer) + buffer.position(), buffer.remaining(), offset);
        }
!!!2057627.java!!!	pread(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int, in offset : long) : int
        // This indirection isn't strictly necessary, but ensures that our public interface is type safe.
        return preadBytes(fd, bytes, byteOffset, byteCount, offset);
!!!2057883.java!!!	pwrite(inout fd : FileDescriptor, inout buffer : ByteBuffer, in offset : long) : int
        if (buffer.isDirect()) {
            return pwriteBytes(fd, buffer, buffer.position(), buffer.remaining(), offset);
        } else {
            return pwriteBytes(fd, NioUtils.unsafeArray(buffer), NioUtils.unsafeArrayOffset(buffer) + buffer.position(), buffer.remaining(), offset);
        }
!!!2058011.java!!!	pwrite(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int, in offset : long) : int
        // This indirection isn't strictly necessary, but ensures that our public interface is type safe.
        return pwriteBytes(fd, bytes, byteOffset, byteCount, offset);
!!!2058267.java!!!	read(inout fd : FileDescriptor, inout buffer : ByteBuffer) : int
        if (buffer.isDirect()) {
            return readBytes(fd, buffer, buffer.position(), buffer.remaining());
        } else {
            return readBytes(fd, NioUtils.unsafeArray(buffer), NioUtils.unsafeArrayOffset(buffer) + buffer.position(), buffer.remaining());
        }
!!!2058395.java!!!	read(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int) : int
        // This indirection isn't strictly necessary, but ensures that our public interface is type safe.
        return readBytes(fd, bytes, byteOffset, byteCount);
!!!2058779.java!!!	recvfrom(inout fd : FileDescriptor, inout buffer : ByteBuffer, in flags : int, inout srcAddress : InetSocketAddress) : int
        if (buffer.isDirect()) {
            return recvfromBytes(fd, buffer, buffer.position(), buffer.remaining(), flags, srcAddress);
        } else {
            return recvfromBytes(fd, NioUtils.unsafeArray(buffer), NioUtils.unsafeArrayOffset(buffer) + buffer.position(), buffer.remaining(), flags, srcAddress);
        }
!!!2058907.java!!!	recvfrom(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int, in flags : int, inout srcAddress : InetSocketAddress) : int
        // This indirection isn't strictly necessary, but ensures that our public interface is type safe.
        return recvfromBytes(fd, bytes, byteOffset, byteCount, flags, srcAddress);
!!!2059547.java!!!	sendto(inout fd : FileDescriptor, inout buffer : ByteBuffer, in flags : int, inout inetAddress : InetAddress, in port : int) : int
        if (buffer.isDirect()) {
            return sendtoBytes(fd, buffer, buffer.position(), buffer.remaining(), flags, inetAddress, port);
        } else {
            return sendtoBytes(fd, NioUtils.unsafeArray(buffer), NioUtils.unsafeArrayOffset(buffer) + buffer.position(), buffer.remaining(), flags, inetAddress, port);
        }
!!!2059675.java!!!	sendto(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int, in flags : int, inout inetAddress : InetAddress, in port : int) : int
        // This indirection isn't strictly necessary, but ensures that our public interface is type safe.
        return sendtoBytes(fd, bytes, byteOffset, byteCount, flags, inetAddress, port);
!!!2063003.java!!!	umask(in mask : int) : int
        if ((mask & 0777) != mask) {
            throw new IllegalArgumentException("Invalid umask: " + mask);
        }
        return umaskImpl(mask);
!!!2063643.java!!!	write(inout fd : FileDescriptor, inout buffer : ByteBuffer) : int
        if (buffer.isDirect()) {
            return writeBytes(fd, buffer, buffer.position(), buffer.remaining());
        } else {
            return writeBytes(fd, NioUtils.unsafeArray(buffer), NioUtils.unsafeArrayOffset(buffer) + buffer.position(), buffer.remaining());
        }
!!!2063771.java!!!	write(inout fd : FileDescriptor, inout bytes : byte, in byteOffset : int, in byteCount : int) : int
        // This indirection isn't strictly necessary, but ensures that our public interface is type safe.
        return writeBytes(fd, bytes, byteOffset, byteCount);
