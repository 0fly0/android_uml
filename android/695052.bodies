class Canvas
!!!4474764.java!!!	Canvas()
        // 0 means no native bitmap
        mNativeCanvas = initRaster(0);
        mFinalizer = new CanvasFinalizer(mNativeCanvas);
!!!4474892.java!!!	Canvas(inout bitmap : Bitmap)
        if (!bitmap.isMutable()) {
            throw new IllegalStateException("Immutable bitmap passed to Canvas constructor");
        }
        throwIfRecycled(bitmap);
        mNativeCanvas = initRaster(bitmap.ni());
        mFinalizer = new CanvasFinalizer(mNativeCanvas);
        mBitmap = bitmap;
        mDensity = bitmap.mDensity;
!!!4475020.java!!!	Canvas(in nativeCanvas : int)
        if (nativeCanvas == 0) {
            throw new IllegalStateException();
        }
        mNativeCanvas = nativeCanvas;
        mFinalizer = new CanvasFinalizer(nativeCanvas);
        mDensity = Bitmap.getDefaultDensity();
!!!4475148.java!!!	getGL() : GL
        return null;
!!!4475276.java!!!	isHardwareAccelerated() : boolean
        return false;
!!!4475404.java!!!	setBitmap(inout bitmap : Bitmap) : void
        if (isHardwareAccelerated()) {
            throw new RuntimeException("Can't set a bitmap device on a GL canvas");
        }

        int pointer = 0;
        if (bitmap != null) {
            if (!bitmap.isMutable()) {
                throw new IllegalStateException();
            }
            throwIfRecycled(bitmap);
            mDensity = bitmap.mDensity;
            pointer = bitmap.ni();
        }

        native_setBitmap(mNativeCanvas, pointer);
        mBitmap = bitmap;
!!!4476044.java!!!	getDensity() : int
        return mDensity;
!!!4476172.java!!!	setDensity(in density : int) : void
        if (mBitmap != null) {
            mBitmap.setDensity(density);
        }
        mDensity = density;
!!!4476300.java!!!	setScreenDensity(in density : int) : void
        mScreenDensity = density;
!!!4476428.java!!!	getMaximumBitmapWidth() : int
        return MAXMIMUM_BITMAP_SIZE;
!!!4476556.java!!!	getMaximumBitmapHeight() : int
        return MAXMIMUM_BITMAP_SIZE;
!!!4476940.java!!!	saveLayer(inout bounds : RectF, inout paint : Paint, in saveFlags : int) : int
        return native_saveLayer(mNativeCanvas, bounds,
                                paint != null ? paint.mNativePaint : 0,
                                saveFlags);
!!!4477068.java!!!	saveLayer(in left : float, in top : float, in right : float, in bottom : float, inout paint : Paint, in saveFlags : int) : int
        return native_saveLayer(mNativeCanvas, left, top, right, bottom,
                                paint != null ? paint.mNativePaint : 0,
                                saveFlags);
!!!4477196.java!!!	saveLayerAlpha(inout bounds : RectF, in alpha : int, in saveFlags : int) : int
        alpha = Math.min(255, Math.max(0, alpha));
        return native_saveLayerAlpha(mNativeCanvas, bounds, alpha, saveFlags);
!!!4477324.java!!!	saveLayerAlpha(in left : float, in top : float, in right : float, in bottom : float, in alpha : int, in saveFlags : int) : int
        return native_saveLayerAlpha(mNativeCanvas, left, top, right, bottom,
                                     alpha, saveFlags);
!!!4478092.java!!!	scale(in sx : float, in sy : float, in px : float, in py : float) : void
        translate(px, py);
        scale(sx, sy);
        translate(-px, -py);
!!!4478348.java!!!	rotate(in degrees : float, in px : float, in py : float) : void
        translate(px, py);
        rotate(degrees);
        translate(-px, -py);
!!!4478604.java!!!	concat(inout matrix : Matrix) : void
        native_concat(mNativeCanvas, matrix.native_instance);
!!!4478732.java!!!	setMatrix(inout matrix : Matrix) : void
        native_setMatrix(mNativeCanvas,
                         matrix == null ? 0 : matrix.native_instance);
!!!4478860.java!!!	getMatrix(inout ctm : Matrix) : void
        native_getCTM(mNativeCanvas, ctm.native_instance);
!!!4478988.java!!!	getMatrix() : Matrix
        Matrix m = new Matrix();
        //noinspection deprecation
        getMatrix(m);
        return m;
!!!4479116.java!!!	clipRect(inout rect : RectF, inout op : Op) : boolean
        return native_clipRect(mNativeCanvas, rect.left, rect.top, rect.right, rect.bottom,
                op.nativeInt);
!!!4479244.java!!!	clipRect(inout rect : Rect, inout op : Op) : boolean
        return native_clipRect(mNativeCanvas, rect.left, rect.top, rect.right, rect.bottom,
                op.nativeInt);
!!!4479628.java!!!	clipRect(in left : float, in top : float, in right : float, in bottom : float, inout op : Op) : boolean
        return native_clipRect(mNativeCanvas, left, top, right, bottom, op.nativeInt);
!!!4480012.java!!!	clipPath(inout path : Path, inout op : Op) : boolean
        return native_clipPath(mNativeCanvas, path.ni(), op.nativeInt);
!!!4480140.java!!!	clipPath(inout path : Path) : boolean
        return clipPath(path, Region.Op.INTERSECT);
!!!4480268.java!!!	clipRegion(inout region : Region, inout op : Op) : boolean
        return native_clipRegion(mNativeCanvas, region.ni(), op.nativeInt);
!!!4480396.java!!!	clipRegion(inout region : Region) : boolean
        return clipRegion(region, Region.Op.INTERSECT);
!!!4480524.java!!!	getDrawFilter() : DrawFilter
        return mDrawFilter;
!!!4480652.java!!!	setDrawFilter(inout filter : DrawFilter) : void
        int nativeFilter = 0;
        if (filter != null) {
            nativeFilter = filter.mNativeInt;
        }
        mDrawFilter = filter;
        nativeSetDrawFilter(mNativeCanvas, nativeFilter);
!!!4480908.java!!!	quickReject(inout rect : RectF, inout type : EdgeType) : boolean
        return native_quickReject(mNativeCanvas, rect, type.nativeInt);
!!!4481036.java!!!	quickReject(inout path : Path, inout type : EdgeType) : boolean
        return native_quickReject(mNativeCanvas, path.ni(), type.nativeInt);
!!!4481164.java!!!	quickReject(in left : float, in top : float, in right : float, in bottom : float, inout type : EdgeType) : boolean
        return native_quickReject(mNativeCanvas, left, top, right, bottom,
                                  type.nativeInt);
!!!4481292.java!!!	getClipBounds(inout bounds : Rect) : boolean
        return native_getClipBounds(mNativeCanvas, bounds);
!!!4481420.java!!!	getClipBounds() : Rect
        Rect r = new Rect();
        getClipBounds(r);
        return r;
!!!4481548.java!!!	drawRGB(in r : int, in g : int, in b : int) : void
        native_drawRGB(mNativeCanvas, r, g, b);
!!!4481676.java!!!	drawARGB(in a : int, in r : int, in g : int, in b : int) : void
        native_drawARGB(mNativeCanvas, a, r, g, b);
!!!4481804.java!!!	drawColor(in color : int) : void
        native_drawColor(mNativeCanvas, color);
!!!4481932.java!!!	drawColor(in color : int, inout mode : Mode) : void
        native_drawColor(mNativeCanvas, color, mode.nativeInt);
!!!4482060.java!!!	drawPaint(inout paint : Paint) : void
        native_drawPaint(mNativeCanvas, paint.mNativePaint);
!!!4482316.java!!!	drawPoints(inout pts : float, inout paint : Paint) : void
        drawPoints(pts, 0, pts.length, paint);
!!!4482572.java!!!	drawLine(in startX : float, in startY : float, in stopX : float, in stopY : float, inout paint : Paint) : void
        native_drawLine(mNativeCanvas, startX, startY, stopX, stopY, paint.mNativePaint);
!!!4482828.java!!!	drawLines(inout pts : float, inout paint : Paint) : void
        drawLines(pts, 0, pts.length, paint);
!!!4482956.java!!!	drawRect(inout rect : RectF, inout paint : Paint) : void
        native_drawRect(mNativeCanvas, rect, paint.mNativePaint);
!!!4483084.java!!!	drawRect(inout r : Rect, inout paint : Paint) : void
        drawRect(r.left, r.top, r.right, r.bottom, paint);
!!!4483212.java!!!	drawRect(in left : float, in top : float, in right : float, in bottom : float, inout paint : Paint) : void
        native_drawRect(mNativeCanvas, left, top, right, bottom, paint.mNativePaint);
!!!4483340.java!!!	drawOval(inout oval : RectF, inout paint : Paint) : void
        if (oval == null) {
            throw new NullPointerException();
        }
        native_drawOval(mNativeCanvas, oval, paint.mNativePaint);
!!!4483468.java!!!	drawCircle(in cx : float, in cy : float, in radius : float, inout paint : Paint) : void
        native_drawCircle(mNativeCanvas, cx, cy, radius, paint.mNativePaint);
!!!4483596.java!!!	drawArc(inout oval : RectF, in startAngle : float, in sweepAngle : float, inout useCenter : boolean, inout paint : Paint) : void
        if (oval == null) {
            throw new NullPointerException();
        }
        native_drawArc(mNativeCanvas, oval, startAngle, sweepAngle,
                       useCenter, paint.mNativePaint);
!!!4483724.java!!!	drawRoundRect(inout rect : RectF, in rx : float, in ry : float, inout paint : Paint) : void
        if (rect == null) {
            throw new NullPointerException();
        }
        native_drawRoundRect(mNativeCanvas, rect, rx, ry,
                             paint.mNativePaint);
!!!4483852.java!!!	drawPath(inout path : Path, inout paint : Paint) : void
        native_drawPath(mNativeCanvas, path.ni(), paint.mNativePaint);
!!!4483980.java!!!	throwIfRecycled(inout bitmap : Bitmap) : void
        if (bitmap.isRecycled()) {
            throw new RuntimeException("Canvas: trying to use a recycled bitmap " + bitmap);
        }
!!!4484236.java!!!	drawBitmap(inout bitmap : Bitmap, in left : float, in top : float, inout paint : Paint) : void
        throwIfRecycled(bitmap);
        native_drawBitmap(mNativeCanvas, bitmap.ni(), left, top,
                paint != null ? paint.mNativePaint : 0, mDensity, mScreenDensity, bitmap.mDensity);
!!!4484364.java!!!	drawBitmap(inout bitmap : Bitmap, inout src : Rect, inout dst : RectF, inout paint : Paint) : void
        if (dst == null) {
            throw new NullPointerException();
        }
        throwIfRecycled(bitmap);
        native_drawBitmap(mNativeCanvas, bitmap.ni(), src, dst,
                          paint != null ? paint.mNativePaint : 0, mScreenDensity, bitmap.mDensity);
!!!4484492.java!!!	drawBitmap(inout bitmap : Bitmap, inout src : Rect, inout dst : Rect, inout paint : Paint) : void
        if (dst == null) {
            throw new NullPointerException();
        }
        throwIfRecycled(bitmap);
        native_drawBitmap(mNativeCanvas, bitmap.ni(), src, dst,
                          paint != null ? paint.mNativePaint : 0, mScreenDensity, bitmap.mDensity);
!!!4484620.java!!!	drawBitmap(inout colors : int, in offset : int, in stride : int, in x : float, in y : float, in width : int, in height : int, inout hasAlpha : boolean, inout paint : Paint) : void
        // check for valid input
        if (width < 0) {
            throw new IllegalArgumentException("width must be >= 0");
        }
        if (height < 0) {
            throw new IllegalArgumentException("height must be >= 0");
        }
        if (Math.abs(stride) < width) {
            throw new IllegalArgumentException("abs(stride) must be >= width");
        }
        int lastScanline = offset + (height - 1) * stride;
        int length = colors.length;
        if (offset < 0 || (offset + width > length) || lastScanline < 0
                || (lastScanline + width > length)) {
            throw new ArrayIndexOutOfBoundsException();
        }
        // quick escape if there's nothing to draw
        if (width == 0 || height == 0) {
            return;
        }
        // punch down to native for the actual draw
        native_drawBitmap(mNativeCanvas, colors, offset, stride, x, y, width, height, hasAlpha,
                paint != null ? paint.mNativePaint : 0);
!!!4484748.java!!!	drawBitmap(inout colors : int, in offset : int, in stride : int, in x : int, in y : int, in width : int, in height : int, inout hasAlpha : boolean, inout paint : Paint) : void
        // call through to the common float version
        drawBitmap(colors, offset, stride, (float)x, (float)y, width, height,
                   hasAlpha, paint);
!!!4484876.java!!!	drawBitmap(inout bitmap : Bitmap, inout matrix : Matrix, inout paint : Paint) : void
        nativeDrawBitmapMatrix(mNativeCanvas, bitmap.ni(), matrix.ni(),
                paint != null ? paint.mNativePaint : 0);
!!!4485004.java!!!	checkRange(in length : int, in offset : int, in count : int) : void
        if ((offset | count) < 0 || offset + count > length) {
            throw new ArrayIndexOutOfBoundsException();
        }
!!!4485132.java!!!	drawBitmapMesh(inout bitmap : Bitmap, in meshWidth : int, in meshHeight : int, inout verts : float, in vertOffset : int, inout colors : int, in colorOffset : int, inout paint : Paint) : void
        if ((meshWidth | meshHeight | vertOffset | colorOffset) < 0) {
            throw new ArrayIndexOutOfBoundsException();
        }
        if (meshWidth == 0 || meshHeight == 0) {
            return;
        }
        int count = (meshWidth + 1) * (meshHeight + 1);
        // we mul by 2 since we need two floats per vertex
        checkRange(verts.length, vertOffset, count * 2);
        if (colors != null) {
            // no mul by 2, since we need only 1 color per vertex
            checkRange(colors.length, colorOffset, count);
        }
        nativeDrawBitmapMesh(mNativeCanvas, bitmap.ni(), meshWidth, meshHeight,
                             verts, vertOffset, colors, colorOffset,
                             paint != null ? paint.mNativePaint : 0);
!!!4485388.java!!!	drawVertices(inout mode : VertexMode, in vertexCount : int, inout verts : float, in vertOffset : int, inout texs : float, in texOffset : int, inout colors : int, in colorOffset : int, inout indices : short, in indexOffset : int, in indexCount : int, inout paint : Paint) : void
        checkRange(verts.length, vertOffset, vertexCount);
        if (texs != null) {
            checkRange(texs.length, texOffset, vertexCount);
        }
        if (colors != null) {
            checkRange(colors.length, colorOffset, vertexCount / 2);
        }
        if (indices != null) {
            checkRange(indices.length, indexOffset, indexCount);
        }
        nativeDrawVertices(mNativeCanvas, mode.nativeInt, vertexCount, verts,
                           vertOffset, texs, texOffset, colors, colorOffset,
                          indices, indexOffset, indexCount, paint.mNativePaint);
!!!4485516.java!!!	drawText(inout text : char, in index : int, in count : int, in x : float, in y : float, inout paint : Paint) : void
        if ((index | count | (index + count) |
            (text.length - index - count)) < 0) {
            throw new IndexOutOfBoundsException();
        }
        native_drawText(mNativeCanvas, text, index, count, x, y, paint.mBidiFlags,
                paint.mNativePaint);
!!!4485644.java!!!	drawText(in text : String, in x : float, in y : float, inout paint : Paint) : void
        native_drawText(mNativeCanvas, text, 0, text.length(), x, y, paint.mBidiFlags,
                paint.mNativePaint);
!!!4485772.java!!!	drawText(in text : String, in start : int, in end : int, in x : float, in y : float, inout paint : Paint) : void
        if ((start | end | (end - start) | (text.length() - end)) < 0) {
            throw new IndexOutOfBoundsException();
        }
        native_drawText(mNativeCanvas, text, start, end, x, y, paint.mBidiFlags,
                paint.mNativePaint);
!!!4485900.java!!!	drawText(inout text : CharSequence, in start : int, in end : int, in x : float, in y : float, inout paint : Paint) : void
        if (text instanceof String || text instanceof SpannedString ||
            text instanceof SpannableString) {
            native_drawText(mNativeCanvas, text.toString(), start, end, x, y,
                            paint.mBidiFlags, paint.mNativePaint);
        } else if (text instanceof GraphicsOperations) {
            ((GraphicsOperations) text).drawText(this, start, end, x, y,
                                                     paint);
        } else {
            char[] buf = TemporaryBuffer.obtain(end - start);
            TextUtils.getChars(text, start, end, buf, 0);
            native_drawText(mNativeCanvas, buf, 0, end - start, x, y,
                    paint.mBidiFlags, paint.mNativePaint);
            TemporaryBuffer.recycle(buf);
        }
!!!4486028.java!!!	drawTextRun(inout text : char, in index : int, in count : int, in contextIndex : int, in contextCount : int, in x : float, in y : float, in dir : int, inout paint : Paint) : void

        if (text == null) {
            throw new NullPointerException("text is null");
        }
        if (paint == null) {
            throw new NullPointerException("paint is null");
        }
        if ((index | count | text.length - index - count) < 0) {
            throw new IndexOutOfBoundsException();
        }
        if (dir != DIRECTION_LTR && dir != DIRECTION_RTL) {
            throw new IllegalArgumentException("unknown dir: " + dir);
        }

        native_drawTextRun(mNativeCanvas, text, index, count,
                contextIndex, contextCount, x, y, dir, paint.mNativePaint);
!!!4486156.java!!!	drawTextRun(inout text : CharSequence, in start : int, in end : int, in contextStart : int, in contextEnd : int, in x : float, in y : float, in dir : int, inout paint : Paint) : void

        if (text == null) {
            throw new NullPointerException("text is null");
        }
        if (paint == null) {
            throw new NullPointerException("paint is null");
        }
        if ((start | end | end - start | text.length() - end) < 0) {
            throw new IndexOutOfBoundsException();
        }

        int flags = dir == 0 ? 0 : 1;

        if (text instanceof String || text instanceof SpannedString ||
                text instanceof SpannableString) {
            native_drawTextRun(mNativeCanvas, text.toString(), start, end,
                    contextStart, contextEnd, x, y, flags, paint.mNativePaint);
        } else if (text instanceof GraphicsOperations) {
            ((GraphicsOperations) text).drawTextRun(this, start, end,
                    contextStart, contextEnd, x, y, flags, paint);
        } else {
            int contextLen = contextEnd - contextStart;
            int len = end - start;
            char[] buf = TemporaryBuffer.obtain(contextLen);
            TextUtils.getChars(text, contextStart, contextEnd, buf, 0);
            native_drawTextRun(mNativeCanvas, buf, start - contextStart, len,
                    0, contextLen, x, y, flags, paint.mNativePaint);
            TemporaryBuffer.recycle(buf);
        }
!!!4486284.java!!!	drawPosText(inout text : char, in index : int, in count : int, inout pos : float, inout paint : Paint) : void
        if (index < 0 || index + count > text.length || count*2 > pos.length) {
            throw new IndexOutOfBoundsException();
        }
        native_drawPosText(mNativeCanvas, text, index, count, pos,
                           paint.mNativePaint);
!!!4486412.java!!!	drawPosText(in text : String, inout pos : float, inout paint : Paint) : void
        if (text.length()*2 > pos.length) {
            throw new ArrayIndexOutOfBoundsException();
        }
        native_drawPosText(mNativeCanvas, text, pos, paint.mNativePaint);
!!!4486540.java!!!	drawTextOnPath(inout text : char, in index : int, in count : int, inout path : Path, in hOffset : float, in vOffset : float, inout paint : Paint) : void
        if (index < 0 || index + count > text.length) {
            throw new ArrayIndexOutOfBoundsException();
        }
        native_drawTextOnPath(mNativeCanvas, text, index, count,
                              path.ni(), hOffset, vOffset,
                              paint.mBidiFlags, paint.mNativePaint);
!!!4486668.java!!!	drawTextOnPath(in text : String, inout path : Path, in hOffset : float, in vOffset : float, inout paint : Paint) : void
        if (text.length() > 0) {
            native_drawTextOnPath(mNativeCanvas, text, path.ni(), hOffset, vOffset,
                    paint.mBidiFlags, paint.mNativePaint);
        }
!!!4486796.java!!!	drawPicture(inout picture : Picture) : void
        picture.endRecording();
        native_drawPicture(mNativeCanvas, picture.ni());
!!!4486924.java!!!	drawPicture(inout picture : Picture, inout dst : RectF) : void
        save();
        translate(dst.left, dst.top);
        if (picture.getWidth() > 0 && picture.getHeight() > 0) {
            scale(dst.width() / picture.getWidth(), dst.height() / picture.getHeight());
        }
        drawPicture(picture);
        restore();
!!!4487052.java!!!	drawPicture(inout picture : Picture, inout dst : Rect) : void
        save();
        translate(dst.left, dst.top);
        if (picture.getWidth() > 0 && picture.getHeight() > 0) {
            scale((float) dst.width() / picture.getWidth(),
                    (float) dst.height() / picture.getHeight());
        }
        drawPicture(picture);
        restore();
