class BoringLayout
!!!4216588.java!!!	make(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Alignment, in spacingmult : float, in spacingadd : float, inout metrics : Metrics, inout includepad : boolean) : BoringLayout
        return new BoringLayout(source, paint, outerwidth, align,
                                spacingmult, spacingadd, metrics,
                                includepad);
!!!4216716.java!!!	make(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Alignment, in spacingmult : float, in spacingadd : float, inout metrics : Metrics, inout includepad : boolean, inout ellipsize : TruncateAt, in ellipsizedWidth : int) : BoringLayout
        return new BoringLayout(source, paint, outerwidth, align,
                                spacingmult, spacingadd, metrics,
                                includepad, ellipsize, ellipsizedWidth);
!!!4216844.java!!!	replaceOrMake(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Alignment, in spacingmult : float, in spacingadd : float, inout metrics : Metrics, inout includepad : boolean) : BoringLayout
        replaceWith(source, paint, outerwidth, align, spacingmult,
                    spacingadd);

        mEllipsizedWidth = outerwidth;
        mEllipsizedStart = 0;
        mEllipsizedCount = 0;

        init(source, paint, outerwidth, align, spacingmult, spacingadd,
             metrics, includepad, true);
        return this;
!!!4216972.java!!!	replaceOrMake(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Alignment, in spacingmult : float, in spacingadd : float, inout metrics : Metrics, inout includepad : boolean, inout ellipsize : TruncateAt, in ellipsizedWidth : int) : BoringLayout
        boolean trust;

        if (ellipsize == null || ellipsize == TextUtils.TruncateAt.MARQUEE) {
            replaceWith(source, paint, outerwidth, align, spacingmult,
                        spacingadd);

            mEllipsizedWidth = outerwidth;
            mEllipsizedStart = 0;
            mEllipsizedCount = 0;
            trust = true;
        } else {
            replaceWith(TextUtils.ellipsize(source, paint, ellipsizedWidth,
                                           ellipsize, true, this),
                        paint, outerwidth, align, spacingmult,
                        spacingadd);

            mEllipsizedWidth = ellipsizedWidth;
            trust = false;
        }

        init(getText(), paint, outerwidth, align, spacingmult, spacingadd,
             metrics, includepad, trust);
        return this;
!!!4217100.java!!!	BoringLayout(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Alignment, in spacingmult : float, in spacingadd : float, inout metrics : Metrics, inout includepad : boolean)
        super(source, paint, outerwidth, align, spacingmult, spacingadd);

        mEllipsizedWidth = outerwidth;
        mEllipsizedStart = 0;
        mEllipsizedCount = 0;

        init(source, paint, outerwidth, align, spacingmult, spacingadd,
             metrics, includepad, true);
!!!4217228.java!!!	BoringLayout(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Alignment, in spacingmult : float, in spacingadd : float, inout metrics : Metrics, inout includepad : boolean, inout ellipsize : TruncateAt, in ellipsizedWidth : int)
        /*
         * It is silly to have to call super() and then replaceWith(),
         * but we can't use "this" for the callback until the call to
         * super() finishes.
         */
        super(source, paint, outerwidth, align, spacingmult, spacingadd);

        boolean trust;

        if (ellipsize == null || ellipsize == TextUtils.TruncateAt.MARQUEE) {
            mEllipsizedWidth = outerwidth;
            mEllipsizedStart = 0;
            mEllipsizedCount = 0;
            trust = true;
        } else {
            replaceWith(TextUtils.ellipsize(source, paint, ellipsizedWidth,
                                           ellipsize, true, this),
                        paint, outerwidth, align, spacingmult,
                        spacingadd);


            mEllipsizedWidth = ellipsizedWidth;
            trust = false;
        }

        init(getText(), paint, outerwidth, align, spacingmult, spacingadd,
             metrics, includepad, trust);
!!!4217356.java!!!	init(inout source : CharSequence, inout paint : TextPaint, in outerwidth : int, inout align : Alignment, in spacingmult : float, in spacingadd : float, inout metrics : Metrics, inout includepad : boolean, inout trustWidth : boolean) : void
        int spacing;

        if (source instanceof String && align == Layout.Alignment.ALIGN_NORMAL) {
            mDirect = source.toString();
        } else {
            mDirect = null;
        }

        mPaint = paint;

        if (includepad) {
            spacing = metrics.bottom - metrics.top;
        } else {
            spacing = metrics.descent - metrics.ascent;
        }

        if (spacingmult != 1 || spacingadd != 0) {
            spacing = (int)(spacing * spacingmult + spacingadd + 0.5f);
        }

        mBottom = spacing;

        if (includepad) {
            mDesc = spacing + metrics.top;
        } else {
            mDesc = spacing + metrics.ascent;
        }

        if (trustWidth) {
            mMax = metrics.width;
        } else {
            /*
             * If we have ellipsized, we have to actually calculate the
             * width because the width that was passed in was for the
             * full text, not the ellipsized form.
             */
            TextLine line = TextLine.obtain();
            line.set(paint, source, 0, source.length(), Layout.DIR_LEFT_TO_RIGHT,
                    Layout.DIRS_ALL_LEFT_TO_RIGHT, false, null);
            mMax = (int) FloatMath.ceil(line.metrics(null));
            TextLine.recycle(line);
        }

        if (includepad) {
            mTopPadding = metrics.top - metrics.ascent;
            mBottomPadding = metrics.bottom - metrics.descent;
        }
!!!4217484.java!!!	isBoring(inout text : CharSequence, inout paint : TextPaint) : Metrics
        return isBoring(text, paint, TextDirectionHeuristics.FIRSTSTRONG_LTR, null);
!!!4217612.java!!!	isBoring(inout text : CharSequence, inout paint : TextPaint, inout textDir : TextDirectionHeuristic) : Metrics
        return isBoring(text, paint, textDir, null);
!!!4217740.java!!!	isBoring(inout text : CharSequence, inout paint : TextPaint, inout metrics : Metrics) : Metrics
        return isBoring(text, paint, TextDirectionHeuristics.FIRSTSTRONG_LTR, metrics);
!!!4217868.java!!!	isBoring(inout text : CharSequence, inout paint : TextPaint, inout textDir : TextDirectionHeuristic, inout metrics : Metrics) : Metrics
        char[] temp = TextUtils.obtain(500);
        int length = text.length();
        boolean boring = true;

        outer:
        for (int i = 0; i < length; i += 500) {
            int j = i + 500;

            if (j > length)
                j = length;

            TextUtils.getChars(text, i, j, temp, 0);

            int n = j - i;

            for (int a = 0; a < n; a++) {
                char c = temp[a];

                if (c == '\n' || c == '\t' || c >= FIRST_RIGHT_TO_LEFT) {
                    boring = false;
                    break outer;
                }
            }

            if (textDir != null && textDir.isRtl(temp, 0, n)) {
               boring = false;
               break outer;
            }
        }

        TextUtils.recycle(temp);

        if (boring && text instanceof Spanned) {
            Spanned sp = (Spanned) text;
            Object[] styles = sp.getSpans(0, length, ParagraphStyle.class);
            if (styles.length > 0) {
                boring = false;
            }
        }

        if (boring) {
            Metrics fm = metrics;
            if (fm == null) {
                fm = new Metrics();
            }

            TextLine line = TextLine.obtain();
            line.set(paint, text, 0, length, Layout.DIR_LEFT_TO_RIGHT,
                    Layout.DIRS_ALL_LEFT_TO_RIGHT, false, null);
            fm.width = (int) FloatMath.ceil(line.metrics(fm));
            TextLine.recycle(line);

            return fm;
        } else {
            return null;
        }
!!!4217996.java!!!	getHeight() : int
        return mBottom;
!!!4218124.java!!!	getLineCount() : int
        return 1;
!!!4218252.java!!!	getLineTop(in line : int) : int
        if (line == 0)
            return 0;
        else
            return mBottom;
!!!4218380.java!!!	getLineDescent(in line : int) : int
        return mDesc;
!!!4218508.java!!!	getLineStart(in line : int) : int
        if (line == 0)
            return 0;
        else
            return getText().length();
!!!4218636.java!!!	getParagraphDirection(in line : int) : int
        return DIR_LEFT_TO_RIGHT;
!!!4218764.java!!!	getLineContainsTab(in line : int) : boolean
        return false;
!!!4218892.java!!!	getLineMax(in line : int) : float
        return mMax;
!!!4219020.java!!!	getLineDirections(in line : int) : Directions
        return Layout.DIRS_ALL_LEFT_TO_RIGHT;
!!!4219148.java!!!	getTopPadding() : int
        return mTopPadding;
!!!4219276.java!!!	getBottomPadding() : int
        return mBottomPadding;
!!!4219404.java!!!	getEllipsisCount(in line : int) : int
        return mEllipsizedCount;
!!!4219532.java!!!	getEllipsisStart(in line : int) : int
        return mEllipsizedStart;
!!!4219660.java!!!	getEllipsizedWidth() : int
        return mEllipsizedWidth;
!!!4219788.java!!!	draw(inout c : Canvas, inout highlight : Path, inout highlightpaint : Paint, in cursorOffset : int) : void
        if (mDirect != null && highlight == null) {
            c.drawText(mDirect, 0, mBottom - mDesc, mPaint);
        } else {
            super.draw(c, highlight, highlightpaint, cursorOffset);
        }
!!!4219916.java!!!	ellipsized(in start : int, in end : int) : void
        mEllipsizedStart = start;
        mEllipsizedCount = end - start;
