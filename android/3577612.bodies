class BinaryHprofWriter
!!!15461004.java!!!	write(inout data : HprofData, inout outputStream : OutputStream) : void
        new BinaryHprofWriter(data, outputStream).write();
!!!15461132.java!!!	BinaryHprofWriter(inout data : HprofData, inout outputStream : OutputStream)
        this.data = data;
        this.out = new DataOutputStream(outputStream);
!!!15461260.java!!!	write() : void
        try {
            writeHeader(data.getStartMillis());

            writeControlSettings(data.getFlags(), data.getDepth());

            for (HprofData.ThreadEvent event : data.getThreadHistory()) {
                writeThreadEvent(event);
            }

            Set<HprofData.Sample> samples = data.getSamples();
            int total = 0;
            for (HprofData.Sample sample : samples) {
                total += sample.count;
                writeStackTrace(sample.stackTrace);
            }
            writeCpuSamples(total, samples);

        } finally {
            out.flush();
        }
!!!15461388.java!!!	writeHeader(in dumpTimeInMilliseconds : long) : void
        out.writeBytes(BinaryHprof.MAGIC + "1.0.2");
        out.writeByte(0); // null terminated string
        out.writeInt(BinaryHprof.ID_SIZE);
        out.writeLong(dumpTimeInMilliseconds);
!!!15461516.java!!!	writeControlSettings(in flags : int, in depth : int) : void
        if (depth > Short.MAX_VALUE) {
            throw new IllegalArgumentException("depth too large for binary hprof: "
                                               + depth + " > " + Short.MAX_VALUE);
        }
        writeRecordHeader(BinaryHprof.Tag.CONTROL_SETTINGS,
                          0,
                          BinaryHprof.Tag.CONTROL_SETTINGS.maximumSize);
        out.writeInt(flags);
        out.writeShort((short) depth);
!!!15461644.java!!!	writeThreadEvent(inout e : ThreadEvent) : void
        switch (e.type) {
            case START:
                writeStartThread(e);
                return;
            case END:
                writeStopThread(e);
                return;
        }
        throw new IllegalStateException(e.type.toString());
!!!15461772.java!!!	writeStartThread(inout e : ThreadEvent) : void
        int threadNameId = writeString(e.threadName);
        int groupNameId = writeString(e.groupName);
        int parentGroupNameId = writeString(e.parentGroupName);
        writeRecordHeader(BinaryHprof.Tag.START_THREAD,
                          0,
                          BinaryHprof.Tag.START_THREAD.maximumSize);
        out.writeInt(e.threadId);
        writeId(e.objectId);
        out.writeInt(0); // stack trace where thread was started unavailable
        writeId(threadNameId);
        writeId(groupNameId);
        writeId(parentGroupNameId);
!!!15461900.java!!!	writeStopThread(inout e : ThreadEvent) : void
        writeRecordHeader(BinaryHprof.Tag.END_THREAD,
                          0,
                          BinaryHprof.Tag.END_THREAD.maximumSize);
        out.writeInt(e.threadId);
!!!15462028.java!!!	writeRecordHeader(inout hprofTag : Tag, in timeDeltaInMicroseconds : int, in recordLength : int) : void
        String error = hprofTag.checkSize(recordLength);
        if (error != null) {
            throw new AssertionError(error);
        }
        out.writeByte(hprofTag.tag);
        out.writeInt(timeDeltaInMicroseconds);
        out.writeInt(recordLength);
!!!15462156.java!!!	writeId(in id : int) : void
        out.writeInt(id);
!!!15462284.java!!!	writeString(in string : String) : int
        if (string == null) {
            return 0;
        }
        Integer identifier = stringToId.get(string);
        if (identifier != null) {
            return identifier;
        }

        int id = nextStringId++;
        stringToId.put(string, id);

        byte[] bytes = string.getBytes("UTF-8");
        writeRecordHeader(BinaryHprof.Tag.STRING_IN_UTF8,
                          0,
                          BinaryHprof.ID_SIZE + bytes.length);
        out.writeInt(id);
        out.write(bytes, 0, bytes.length);

        return id;
!!!15462412.java!!!	writeCpuSamples(in totalSamples : int, inout samples : Set<HprofData.Sample>) : void
        int samplesCount = samples.size();
        if (samplesCount == 0) {
            return;
        }
        writeRecordHeader(BinaryHprof.Tag.CPU_SAMPLES, 0, 4 + 4 + (samplesCount * (4 + 4)));
        out.writeInt(totalSamples);
        out.writeInt(samplesCount);
        for (HprofData.Sample sample : samples) {
            out.writeInt(sample.count);
            out.writeInt(sample.stackTrace.stackTraceId);
        }
!!!15462540.java!!!	writeStackTrace(inout stackTrace : StackTrace) : void
        int frames = stackTrace.stackFrames.length;
        int[] stackFrameIds = new int[frames];
        for (int i = 0; i < frames; i++) {
            stackFrameIds[i] = writeStackFrame(stackTrace.stackFrames[i]);
        }
        writeRecordHeader(BinaryHprof.Tag.STACK_TRACE,
                          0,
                          4 + 4 + 4 + (frames * BinaryHprof.ID_SIZE));
        out.writeInt(stackTrace.stackTraceId);
        out.writeInt(stackTrace.threadId);
        out.writeInt(frames);
        for (int stackFrameId : stackFrameIds) {
            writeId(stackFrameId);
        }
!!!15462668.java!!!	writeLoadClass(in className : String) : int
        Integer identifier = classNameToId.get(className);
        if (identifier != null) {
            return identifier;
        }
        int id = nextClassId++;
        classNameToId.put(className, id);

        int classNameId = writeString(className);
        writeRecordHeader(BinaryHprof.Tag.LOAD_CLASS,
                          0,
                          BinaryHprof.Tag.LOAD_CLASS.maximumSize);
        out.writeInt(id);
        writeId(0); // class object ID
        out.writeInt(0); // stack trace where class was loaded is unavailable
        writeId(classNameId);

        return id;
!!!15462796.java!!!	writeStackFrame(inout stackFrame : StackTraceElement) : int
        Integer identifier = stackFrameToId.get(stackFrame);
        if (identifier != null) {
            return identifier;
        }

        int id = nextStackFrameId++;
        stackFrameToId.put(stackFrame, id);

        int classId = writeLoadClass(stackFrame.getClassName());
        int methodNameId = writeString(stackFrame.getMethodName());
        int sourceId = writeString(stackFrame.getFileName());
        writeRecordHeader(BinaryHprof.Tag.STACK_FRAME,
                          0,
                          BinaryHprof.Tag.STACK_FRAME.maximumSize);
        writeId(id);
        writeId(methodNameId);
        writeId(0); // method signature is unavailable from StackTraceElement
        writeId(sourceId);
        out.writeInt(classId);
        out.writeInt(stackFrame.getLineNumber());

        return id;
