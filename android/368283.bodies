class OpenSSLSignature
!!!2450203.java!!!	OpenSSLSignature(inout algorithm : String, inout engineType : EngineType)
        super(algorithm);

        // We don't support MD2
        if ("RSA-MD2".equals(algorithm)) {
            throw new NoSuchAlgorithmException(algorithm);
        }

        this.engineType = engineType;
        this.evpAlgorithm = algorithm;
!!!2450331.java!!!	engineUpdate(in input : byte) : void
        singleByte[0] = input;
        engineUpdate(singleByte, 0, 1);
!!!2450459.java!!!	engineUpdate(inout input : byte, in offset : int, in len : int) : void
        if (state == SIGN) {
            if (ctx == 0) {
                try {
                    ctx = NativeCrypto.EVP_SignInit(evpAlgorithm);
                } catch (Exception ex) {
                    throw new RuntimeException(ex);
                }
            }

            NativeCrypto.EVP_SignUpdate(ctx, input, offset, len);
        } else {
            if (ctx == 0) {
                try {
                    ctx = NativeCrypto.EVP_VerifyInit(evpAlgorithm);
                } catch (Exception ex) {
                    throw new RuntimeException(ex);
                }
            }

            NativeCrypto.EVP_VerifyUpdate(ctx, input, offset, len);
        }
!!!2450587.java!!!	engineGetParameter(inout param : String) : Object
        return null;
!!!2450715.java!!!	checkEngineType(inout pkey : OpenSSLKey) : void
        final int pkeyType = NativeCrypto.EVP_PKEY_type(pkey.getPkeyContext());

        switch (engineType) {
            case RSA:
                if (pkeyType != NativeCrypto.EVP_PKEY_RSA) {
                    throw new InvalidKeyException("Signature not initialized as RSA");
                }
                break;
            case DSA:
                if (pkeyType != NativeCrypto.EVP_PKEY_DSA) {
                    throw new InvalidKeyException("Signature not initialized as DSA");
                }
                break;
            case EC:
                if (pkeyType != NativeCrypto.EVP_PKEY_EC) {
                    throw new InvalidKeyException("Signature not initialized as EC");
                }
                break;
            default:
                throw new InvalidKeyException("Need DSA or RSA or EC private key");
        }
!!!2450843.java!!!	engineInitSign(inout privateKey : PrivateKey) : void
        destroyContextIfExists();

        if (privateKey instanceof OpenSSLKeyHolder) {
            OpenSSLKey pkey = ((OpenSSLKeyHolder) privateKey).getOpenSSLKey();
            checkEngineType(pkey);
            key = pkey;
        } else if (privateKey instanceof RSAPrivateCrtKey) {
            if (engineType != EngineType.RSA) {
                throw new InvalidKeyException("Signature not initialized as RSA");
            }

            RSAPrivateCrtKey rsaPrivateKey = (RSAPrivateCrtKey) privateKey;
            key = OpenSSLRSAPrivateCrtKey.getInstance(rsaPrivateKey);
        } else if (privateKey instanceof RSAPrivateKey) {
            if (engineType != EngineType.RSA) {
                throw new InvalidKeyException("Signature not initialized as RSA");
            }

            RSAPrivateKey rsaPrivateKey = (RSAPrivateKey) privateKey;
            key = OpenSSLRSAPrivateKey.getInstance(rsaPrivateKey);
        } else if (privateKey instanceof DSAPrivateKey) {
            if (engineType != EngineType.DSA) {
                throw new InvalidKeyException("Signature not initialized as DSA");
            }

            DSAPrivateKey dsaPrivateKey = (DSAPrivateKey) privateKey;
            key = OpenSSLDSAPrivateKey.getInstance(dsaPrivateKey);
        } else if (privateKey instanceof ECPrivateKey) {
            if (engineType != EngineType.EC) {
                throw new InvalidKeyException("Signature not initialized as EC");
            }

            ECPrivateKey ecPrivateKey = (ECPrivateKey) privateKey;
            key = OpenSSLECPrivateKey.getInstance(ecPrivateKey);
        } else {
            throw new InvalidKeyException("Need DSA or RSA or EC private key");
        }
!!!2450971.java!!!	engineInitVerify(inout publicKey : PublicKey) : void
        // If we had an existing context, destroy it first.
        destroyContextIfExists();

        if (publicKey instanceof OpenSSLKeyHolder) {
            OpenSSLKey pkey = ((OpenSSLKeyHolder) publicKey).getOpenSSLKey();
            checkEngineType(pkey);
            key = pkey;
        } else if (publicKey instanceof RSAPublicKey) {
            if (engineType != EngineType.RSA) {
                throw new InvalidKeyException("Signature not initialized as RSA");
            }

            RSAPublicKey rsaPublicKey = (RSAPublicKey) publicKey;
            key = OpenSSLRSAPublicKey.getInstance(rsaPublicKey);
        } else if (publicKey instanceof DSAPublicKey) {
            if (engineType != EngineType.DSA) {
                throw new InvalidKeyException("Signature not initialized as DSA");
            }

            DSAPublicKey dsaPublicKey = (DSAPublicKey) publicKey;
            key = OpenSSLDSAPublicKey.getInstance(dsaPublicKey);
        } else if (publicKey instanceof ECPublicKey) {
            if (engineType != EngineType.EC) {
                throw new InvalidKeyException("Signature not initialized as EC");
            }

            ECPublicKey ecPublicKey = (ECPublicKey) publicKey;
            key = OpenSSLECPublicKey.getInstance(ecPublicKey);
        } else {
            throw new InvalidKeyException("Need DSA or RSA or EC public key");
        }
!!!2451227.java!!!	engineSign() : byte
        if (key == null) {
            // This can't actually happen, but you never know...
            throw new SignatureException("Need DSA or RSA or EC private key");
        }

        try {
            byte[] buffer = new byte[NativeCrypto.EVP_PKEY_size(key.getPkeyContext())];
            int bytesWritten = NativeCrypto.EVP_SignFinal(ctx, buffer, 0, key.getPkeyContext());

            byte[] signature = new byte[bytesWritten];
            System.arraycopy(buffer, 0, signature, 0, bytesWritten);

            return signature;
        } catch (Exception ex) {
            throw new SignatureException(ex);
        } finally {
            /*
             * Java expects the digest context to be reset completely after sign
             * calls.
             */
            destroyContextIfExists();
        }
!!!2451355.java!!!	engineVerify(inout sigBytes : byte) : boolean
        if (key == null) {
            // This can't actually happen, but you never know...
            throw new SignatureException("Need DSA or RSA public key");
        }

        try {
            int result = NativeCrypto.EVP_VerifyFinal(ctx, sigBytes, 0, sigBytes.length,
                    key.getPkeyContext());
            return result == 1;
        } catch (Exception ex) {
            return false;
        } finally {
            /*
             * Java expects the digest context to be reset completely after
             * verify calls.
             */
            destroyContextIfExists();
        }
!!!2451483.java!!!	destroyContextIfExists() : void
        if (ctx != 0) {
            NativeCrypto.EVP_MD_CTX_destroy(ctx);
            ctx = 0;
        }
!!!2451611.java!!!	finalize() : void
        try {
            if (ctx != 0) {
                NativeCrypto.EVP_MD_CTX_destroy(ctx);
            }
        } finally {
            super.finalize();
        }
