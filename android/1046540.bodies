class BitmapDrawable
!!!6454412.java!!!	BitmapDrawable()
        mBitmapState = new BitmapState((Bitmap) null);
!!!6454540.java!!!	BitmapDrawable(inout res : Resources)
        mBitmapState = new BitmapState((Bitmap) null);
        mBitmapState.mTargetDensity = mTargetDensity;
!!!6454668.java!!!	BitmapDrawable(inout bitmap : Bitmap)
        this(new BitmapState(bitmap), null);
!!!6454796.java!!!	BitmapDrawable(inout res : Resources, inout bitmap : Bitmap)
        this(new BitmapState(bitmap), res);
        mBitmapState.mTargetDensity = mTargetDensity;
!!!6454924.java!!!	BitmapDrawable(in filepath : String)
        this(new BitmapState(BitmapFactory.decodeFile(filepath)), null);
        if (mBitmap == null) {
            android.util.Log.w("BitmapDrawable", "BitmapDrawable cannot decode " + filepath);
        }
!!!6455052.java!!!	BitmapDrawable(inout res : Resources, in filepath : String)
        this(new BitmapState(BitmapFactory.decodeFile(filepath)), null);
        mBitmapState.mTargetDensity = mTargetDensity;
        if (mBitmap == null) {
            android.util.Log.w("BitmapDrawable", "BitmapDrawable cannot decode " + filepath);
        }
!!!6455180.java!!!	BitmapDrawable(inout is : java.io.InputStream)
        this(new BitmapState(BitmapFactory.decodeStream(is)), null);
        if (mBitmap == null) {
            android.util.Log.w("BitmapDrawable", "BitmapDrawable cannot decode " + is);
        }
!!!6455308.java!!!	BitmapDrawable(inout res : Resources, inout is : java.io.InputStream)
        this(new BitmapState(BitmapFactory.decodeStream(is)), null);
        mBitmapState.mTargetDensity = mTargetDensity;
        if (mBitmap == null) {
            android.util.Log.w("BitmapDrawable", "BitmapDrawable cannot decode " + is);
        }
!!!6455436.java!!!	getPaint() : Paint
        return mBitmapState.mPaint;
!!!6455564.java!!!	getBitmap() : Bitmap
        return mBitmap;
!!!6455692.java!!!	computeBitmapSize() : void
        mBitmapWidth = mBitmap.getScaledWidth(mTargetDensity);
        mBitmapHeight = mBitmap.getScaledHeight(mTargetDensity);
!!!6455820.java!!!	setBitmap(inout bitmap : Bitmap) : void
        if (bitmap != mBitmap) {
            mBitmap = bitmap;
            if (bitmap != null) {
                computeBitmapSize();
            } else {
                mBitmapWidth = mBitmapHeight = -1;
            }
            invalidateSelf();
        }
!!!6455948.java!!!	setTargetDensity(inout canvas : Canvas) : void
        setTargetDensity(canvas.getDensity());
!!!6456076.java!!!	setTargetDensity(inout metrics : DisplayMetrics) : void
        setTargetDensity(metrics.densityDpi);
!!!6456204.java!!!	setTargetDensity(in density : int) : void
        if (mTargetDensity != density) {
            mTargetDensity = density == 0 ? DisplayMetrics.DENSITY_DEFAULT : density;
            if (mBitmap != null) {
                computeBitmapSize();
            }
            invalidateSelf();
        }
!!!6456332.java!!!	getGravity() : int
        return mBitmapState.mGravity;
!!!6456460.java!!!	setGravity(in gravity : int) : void
        if (mBitmapState.mGravity != gravity) {
            mBitmapState.mGravity = gravity;
            mApplyGravity = true;
            invalidateSelf();
        }
!!!6456588.java!!!	setAntiAlias(inout aa : boolean) : void
        mBitmapState.mPaint.setAntiAlias(aa);
        invalidateSelf();
!!!6456716.java!!!	setFilterBitmap(inout filter : boolean) : void
        mBitmapState.mPaint.setFilterBitmap(filter);
        invalidateSelf();
!!!6456844.java!!!	setDither(inout dither : boolean) : void
        mBitmapState.mPaint.setDither(dither);
        invalidateSelf();
!!!6456972.java!!!	getTileModeX() : TileMode
        return mBitmapState.mTileModeX;
!!!6457100.java!!!	getTileModeY() : TileMode
        return mBitmapState.mTileModeY;
!!!6457228.java!!!	setTileModeX(inout mode : TileMode) : void
        setTileModeXY(mode, mBitmapState.mTileModeY);
!!!6457356.java!!!	setTileModeY(inout mode : TileMode) : void
        setTileModeXY(mBitmapState.mTileModeX, mode);
!!!6457484.java!!!	setTileModeXY(inout xmode : TileMode, inout ymode : TileMode) : void
        final BitmapState state = mBitmapState;
        if (state.mTileModeX != xmode || state.mTileModeY != ymode) {
            state.mTileModeX = xmode;
            state.mTileModeY = ymode;
            state.mRebuildShader = true;
            invalidateSelf();
        }
!!!6457612.java!!!	getChangingConfigurations() : int
        return super.getChangingConfigurations() | mBitmapState.mChangingConfigurations;
!!!6457740.java!!!	onBoundsChange(inout bounds : Rect) : void
        super.onBoundsChange(bounds);
        mApplyGravity = true;
!!!6457868.java!!!	draw(inout canvas : Canvas) : void
        Bitmap bitmap = mBitmap;
        if (bitmap != null) {
            final BitmapState state = mBitmapState;
            if (state.mRebuildShader) {
                Shader.TileMode tmx = state.mTileModeX;
                Shader.TileMode tmy = state.mTileModeY;

                if (tmx == null && tmy == null) {
                    state.mPaint.setShader(null);
                } else {
                    state.mPaint.setShader(new BitmapShader(bitmap,
                            tmx == null ? Shader.TileMode.CLAMP : tmx,
                            tmy == null ? Shader.TileMode.CLAMP : tmy));
                }
                state.mRebuildShader = false;
                copyBounds(mDstRect);
            }

            Shader shader = state.mPaint.getShader();
            if (shader == null) {
                if (mApplyGravity) {
                    final int layoutDirection = getLayoutDirection();
                    Gravity.apply(state.mGravity, mBitmapWidth, mBitmapHeight,
                            getBounds(), mDstRect, layoutDirection);
                    mApplyGravity = false;
                }
                canvas.drawBitmap(bitmap, null, mDstRect, state.mPaint);
            } else {
                if (mApplyGravity) {
                    copyBounds(mDstRect);
                    mApplyGravity = false;
                }
                canvas.drawRect(mDstRect, state.mPaint);
            }
        }
!!!6457996.java!!!	setAlpha(in alpha : int) : void
        int oldAlpha = mBitmapState.mPaint.getAlpha();
        if (alpha != oldAlpha) {
            mBitmapState.mPaint.setAlpha(alpha);
            invalidateSelf();
        }
!!!6458124.java!!!	setColorFilter(inout cf : ColorFilter) : void
        mBitmapState.mPaint.setColorFilter(cf);
        invalidateSelf();
!!!6458252.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            mBitmapState = new BitmapState(mBitmapState);
            mMutated = true;
        }
        return this;
!!!6458380.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : void
        super.inflate(r, parser, attrs);

        TypedArray a = r.obtainAttributes(attrs, com.android.internal.R.styleable.BitmapDrawable);

        final int id = a.getResourceId(com.android.internal.R.styleable.BitmapDrawable_src, 0);
        if (id == 0) {
            throw new XmlPullParserException(parser.getPositionDescription() +
                    ": <bitmap> requires a valid src attribute");
        }
        final Bitmap bitmap = BitmapFactory.decodeResource(r, id);
        if (bitmap == null) {
            throw new XmlPullParserException(parser.getPositionDescription() +
                    ": <bitmap> requires a valid src attribute");
        }
        mBitmapState.mBitmap = bitmap;
        setBitmap(bitmap);
        setTargetDensity(r.getDisplayMetrics());

        final Paint paint = mBitmapState.mPaint;
        paint.setAntiAlias(a.getBoolean(com.android.internal.R.styleable.BitmapDrawable_antialias,
                paint.isAntiAlias()));
        paint.setFilterBitmap(a.getBoolean(com.android.internal.R.styleable.BitmapDrawable_filter,
                paint.isFilterBitmap()));
        paint.setDither(a.getBoolean(com.android.internal.R.styleable.BitmapDrawable_dither,
                paint.isDither()));
        setGravity(a.getInt(com.android.internal.R.styleable.BitmapDrawable_gravity, Gravity.FILL));
        int tileMode = a.getInt(com.android.internal.R.styleable.BitmapDrawable_tileMode, -1);
        if (tileMode != -1) {
            switch (tileMode) {
                case 0:
                    setTileModeXY(Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);
                    break;
                case 1:
                    setTileModeXY(Shader.TileMode.REPEAT, Shader.TileMode.REPEAT);
                    break;
                case 2:
                    setTileModeXY(Shader.TileMode.MIRROR, Shader.TileMode.MIRROR);
                    break;
            }
        }

        a.recycle();
!!!6458508.java!!!	getIntrinsicWidth() : int
        return mBitmapWidth;
!!!6458636.java!!!	getIntrinsicHeight() : int
        return mBitmapHeight;
!!!6458764.java!!!	getOpacity() : int
        if (mBitmapState.mGravity != Gravity.FILL) {
            return PixelFormat.TRANSLUCENT;
        }
        Bitmap bm = mBitmap;
        return (bm == null || bm.hasAlpha() || mBitmapState.mPaint.getAlpha() < 255) ?
                PixelFormat.TRANSLUCENT : PixelFormat.OPAQUE;
!!!6458892.java!!!	getConstantState() : ConstantState
        mBitmapState.mChangingConfigurations = getChangingConfigurations();
        return mBitmapState;
!!!6459660.java!!!	BitmapDrawable(inout state : BitmapState, inout res : Resources)
        mBitmapState = state;
        if (res != null) {
            mTargetDensity = res.getDisplayMetrics().densityDpi;
        } else {
            mTargetDensity = state.mTargetDensity;
        }
        setBitmap(state != null ? state.mBitmap : null);
