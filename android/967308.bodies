class AccessibilityInjector
!!!4782860.java!!!	AccessibilityInjector(inout webViewClassic : WebViewClassic)
        mWebViewClassic = webViewClassic;
        mWebView = webViewClassic.getWebView();
        mContext = webViewClassic.getContext();
        mAccessibilityManager = AccessibilityManager.getInstance(mContext);
!!!4782988.java!!!	toggleAccessibilityFeedback(inout enabled : boolean) : void
        if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {
            return;
        }

        toggleAndroidVox(enabled);

        if (!enabled && (mTextToSpeech != null)) {
            mTextToSpeech.stop();
        }
!!!4783116.java!!!	addAccessibilityApisIfNecessary() : void
        if (!isAccessibilityEnabled() || !isJavaScriptEnabled()) {
            return;
        }

        addTtsApis();
        addCallbackApis();
!!!4783244.java!!!	removeAccessibilityApisIfNecessary() : void
        removeTtsApis();
        removeCallbackApis();
!!!4783372.java!!!	destroy() : void
        if (mTextToSpeech != null) {
            mTextToSpeech.shutdown();
            mTextToSpeech = null;
        }

        if (mCallback != null) {
            mCallback = null;
        }
!!!4783500.java!!!	toggleAndroidVox(inout state : boolean) : void
        if (!mAccessibilityScriptInjected) {
            return;
        }

        final String code = String.format(TOGGLE_CVOX_TEMPLATE, state);
        mWebView.loadUrl(code);
!!!4783628.java!!!	onInitializeAccessibilityNodeInfo(inout info : AccessibilityNodeInfo) : void
        info.setMovementGranularities(AccessibilityNodeInfo.MOVEMENT_GRANULARITY_CHARACTER
                | AccessibilityNodeInfo.MOVEMENT_GRANULARITY_WORD
                | AccessibilityNodeInfo.MOVEMENT_GRANULARITY_LINE
                | AccessibilityNodeInfo.MOVEMENT_GRANULARITY_PARAGRAPH
                | AccessibilityNodeInfo.MOVEMENT_GRANULARITY_PAGE);
        info.addAction(AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY);
        info.addAction(AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY);
        info.addAction(AccessibilityNodeInfo.ACTION_NEXT_HTML_ELEMENT);
        info.addAction(AccessibilityNodeInfo.ACTION_PREVIOUS_HTML_ELEMENT);
        info.addAction(AccessibilityNodeInfo.ACTION_CLICK);
        info.setClickable(true);
!!!4783756.java!!!	supportsAccessibilityAction(in action : int) : boolean
        switch (action) {
            case AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY:
            case AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY:
            case AccessibilityNodeInfo.ACTION_NEXT_HTML_ELEMENT:
            case AccessibilityNodeInfo.ACTION_PREVIOUS_HTML_ELEMENT:
            case AccessibilityNodeInfo.ACTION_CLICK:
                return true;
            default:
                return false;
        }
!!!4783884.java!!!	performAccessibilityAction(in action : int, inout arguments : Bundle) : boolean
        if (!isAccessibilityEnabled()) {
            mAccessibilityScriptInjected = false;
            toggleFallbackAccessibilityInjector(false);
            return false;
        }

        if (mAccessibilityScriptInjected) {
            return sendActionToAndroidVox(action, arguments);
        }

        if (mAccessibilityInjectorFallback != null) {
            return mAccessibilityInjectorFallback.performAccessibilityAction(action, arguments);
        }

        return false;
!!!4784012.java!!!	handleKeyEventIfNecessary(inout event : KeyEvent) : boolean
        if (!isAccessibilityEnabled()) {
            mAccessibilityScriptInjected = false;
            toggleFallbackAccessibilityInjector(false);
            return false;
        }

        if (mAccessibilityScriptInjected) {
            // if an accessibility script is injected we delegate to it the key
            // handling. this script is a screen reader which is a fully fledged
            // solution for blind users to navigate in and interact with web
            // pages.
            if (event.getAction() == KeyEvent.ACTION_UP) {
                mWebViewClassic.sendBatchableInputMessage(EventHub.KEY_UP, 0, 0, event);
            } else if (event.getAction() == KeyEvent.ACTION_DOWN) {
                mWebViewClassic.sendBatchableInputMessage(EventHub.KEY_DOWN, 0, 0, event);
            } else {
                return false;
            }

            return true;
        }

        if (mAccessibilityInjectorFallback != null) {
            // if an accessibility injector is present (no JavaScript enabled or
            // the site opts out injecting our JavaScript screen reader) we let
            // it decide whether to act on and consume the event.
            return mAccessibilityInjectorFallback.onKeyEvent(event);
        }

        return false;
!!!4784140.java!!!	handleSelectionChangedIfNecessary(in selectionString : String) : void
        if (mAccessibilityInjectorFallback != null) {
            mAccessibilityInjectorFallback.onSelectionStringChange(selectionString);
        }
!!!4784268.java!!!	onPageStarted(in url : String) : void
        mAccessibilityScriptInjected = false;
        if (DEBUG) {
            Log.w(TAG, "[" + mWebView.hashCode() + "] Started loading new page");
        }
        addAccessibilityApisIfNecessary();
!!!4784396.java!!!	onPageFinished(in url : String) : void
        if (!isAccessibilityEnabled()) {
            toggleFallbackAccessibilityInjector(false);
            return;
        }

        toggleFallbackAccessibilityInjector(true);

        if (shouldInjectJavaScript(url)) {
            // If we're supposed to use the JS screen reader, request a
            // callback to confirm that CallbackHandler is working.
            if (DEBUG) {
                Log.d(TAG, "[" + mWebView.hashCode() + "] Request callback ");
            }

            mCallback.requestCallback(mWebView, mInjectScriptRunnable);
        }
!!!4784524.java!!!	injectJavaScript() : void
        toggleFallbackAccessibilityInjector(false);

        if (!mAccessibilityScriptInjected) {
            mAccessibilityScriptInjected = true;
            final String injectionUrl = getScreenReaderInjectionUrl();
            mWebView.loadUrl(injectionUrl);
            if (DEBUG) {
                Log.d(TAG, "[" + mWebView.hashCode() + "] Loading screen reader into WebView");
            }
        } else {
            if (DEBUG) {
                Log.w(TAG, "[" + mWebView.hashCode() + "] Attempted to inject screen reader twice");
            }
        }
!!!4784652.java!!!	updateJavaScriptEnabled(inout enabled : boolean) : void
        if (enabled) {
            addAccessibilityApisIfNecessary();
        } else {
            removeAccessibilityApisIfNecessary();
        }

        // We have to reload the page after adding or removing APIs.
        mWebView.reload();
!!!4784780.java!!!	toggleFallbackAccessibilityInjector(inout enabled : boolean) : void
        if (enabled && (mAccessibilityInjectorFallback == null)) {
            mAccessibilityInjectorFallback = new AccessibilityInjectorFallback(mWebViewClassic);
        } else {
            mAccessibilityInjectorFallback = null;
        }
!!!4784908.java!!!	shouldInjectJavaScript(in url : String) : boolean
        // Respect the WebView's JavaScript setting.
        if (!isJavaScriptEnabled()) {
            return false;
        }

        // Allow the page to opt out of Accessibility script injection.
        if (getAxsUrlParameterValue(url) == ACCESSIBILITY_SCRIPT_INJECTION_OPTED_OUT) {
            return false;
        }

        // The user must explicitly enable Accessibility script injection.
        if (!isScriptInjectionEnabled()) {
            return false;
        }

        return true;
!!!4785036.java!!!	isScriptInjectionEnabled() : boolean
        final int injectionSetting = Settings.Secure.getInt(
                mContext.getContentResolver(), Settings.Secure.ACCESSIBILITY_SCRIPT_INJECTION, 0);
        return (injectionSetting == 1);
!!!4785164.java!!!	addTtsApis() : void
        if (mTextToSpeech == null) {
            mTextToSpeech = new TextToSpeechWrapper(mContext);
        }

        mWebView.addJavascriptInterface(mTextToSpeech, ALIAS_TTS_JS_INTERFACE);
!!!4785292.java!!!	removeTtsApis() : void
        if (mTextToSpeech != null) {
            mTextToSpeech.stop();
            mTextToSpeech.shutdown();
            mTextToSpeech = null;
        }

        mWebView.removeJavascriptInterface(ALIAS_TTS_JS_INTERFACE);
!!!4785420.java!!!	addCallbackApis() : void
        if (mCallback == null) {
            mCallback = new CallbackHandler(ALIAS_TRAVERSAL_JS_INTERFACE);
        }

        mWebView.addJavascriptInterface(mCallback, ALIAS_TRAVERSAL_JS_INTERFACE);
!!!4785548.java!!!	removeCallbackApis() : void
        if (mCallback != null) {
            mCallback = null;
        }

        mWebView.removeJavascriptInterface(ALIAS_TRAVERSAL_JS_INTERFACE);
!!!4785676.java!!!	getAxsUrlParameterValue(in url : String) : int
        if (url == null) {
            return ACCESSIBILITY_SCRIPT_INJECTION_UNDEFINED;
        }

        try {
            final List<NameValuePair> params = URLEncodedUtils.parse(new URI(url), null);

            for (NameValuePair param : params) {
                if ("axs".equals(param.getName())) {
                    return verifyInjectionValue(param.getValue());
                }
            }
        } catch (URISyntaxException e) {
            // Do nothing.
        } catch (IllegalArgumentException e) {
            // Catch badly-formed URLs.
        }

        return ACCESSIBILITY_SCRIPT_INJECTION_UNDEFINED;
!!!4785804.java!!!	verifyInjectionValue(in value : String) : int
        try {
            final int parsed = Integer.parseInt(value);

            switch (parsed) {
                case ACCESSIBILITY_SCRIPT_INJECTION_OPTED_OUT:
                    return ACCESSIBILITY_SCRIPT_INJECTION_OPTED_OUT;
                case ACCESSIBILITY_SCRIPT_INJECTION_PROVIDED:
                    return ACCESSIBILITY_SCRIPT_INJECTION_PROVIDED;
            }
        } catch (NumberFormatException e) {
            // Do nothing.
        }

        return ACCESSIBILITY_SCRIPT_INJECTION_UNDEFINED;
!!!4785932.java!!!	getScreenReaderInjectionUrl() : String
        final String screenReaderUrl = Settings.Secure.getString(
                mContext.getContentResolver(), Settings.Secure.ACCESSIBILITY_SCREEN_READER_URL);
        return String.format(ACCESSIBILITY_SCREEN_READER_JAVASCRIPT_TEMPLATE, screenReaderUrl);
!!!4786060.java!!!	isJavaScriptEnabled() : boolean
        final WebSettings settings = mWebView.getSettings();
        if (settings == null) {
            return false;
        }

        return settings.getJavaScriptEnabled();
!!!4786188.java!!!	isAccessibilityEnabled() : boolean
        return mAccessibilityManager.isEnabled();
!!!4786316.java!!!	sendActionToAndroidVox(in action : int, inout arguments : Bundle) : boolean
        if (mAccessibilityJSONObject == null) {
            mAccessibilityJSONObject = new JSONObject();
        } else {
            // Remove all keys from the object.
            final Iterator<?> keys = mAccessibilityJSONObject.keys();
            while (keys.hasNext()) {
                keys.next();
                keys.remove();
            }
        }

        try {
            mAccessibilityJSONObject.accumulate("action", action);

            switch (action) {
                case AccessibilityNodeInfo.ACTION_NEXT_AT_MOVEMENT_GRANULARITY:
                case AccessibilityNodeInfo.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY:
                    if (arguments != null) {
                        final int granularity = arguments.getInt(
                                AccessibilityNodeInfo.ACTION_ARGUMENT_MOVEMENT_GRANULARITY_INT);
                        mAccessibilityJSONObject.accumulate("granularity", granularity);
                    }
                    break;
                case AccessibilityNodeInfo.ACTION_NEXT_HTML_ELEMENT:
                case AccessibilityNodeInfo.ACTION_PREVIOUS_HTML_ELEMENT:
                    if (arguments != null) {
                        final String element = arguments.getString(
                                AccessibilityNodeInfo.ACTION_ARGUMENT_HTML_ELEMENT_STRING);
                        mAccessibilityJSONObject.accumulate("element", element);
                    }
                    break;
            }
        } catch (JSONException e) {
            return false;
        }

        final String jsonString = mAccessibilityJSONObject.toString();
        final String jsCode = String.format(ACCESSIBILITY_ANDROIDVOX_TEMPLATE, jsonString);
        return mCallback.performAction(mWebView, jsCode);
