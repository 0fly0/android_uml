class ManagerService
!!!9075212.java!!!	onCreate() : void
        super.onCreate();

        mSummarizer = new Summarizer(RESULTS_ROOT_DIR_PATH, getApplicationContext());
!!!9075340.java!!!	onStartCommand(inout intent : Intent, in flags : int, in startId : int) : int
        mAllTestsRelativePath = intent.getStringExtra("path");
        assert mAllTestsRelativePath != null;
        return START_STICKY;
!!!9075468.java!!!	onBind(inout intent : Intent) : IBinder
        return mMessenger.getBinder();
!!!9075596.java!!!	onActualResultsObtained(inout bundle : Bundle) : void
        mInternalMessagesHandler.removeMessages(MSG_CRASH_TIMEOUT_EXPIRED);
        ensureNextTestSetup(bundle.getString("nextTest"), bundle.getInt("testIndex") + 1);

        AbstractResult results =
                AbstractResult.TestType.valueOf(bundle.getString("type")).createResult(bundle);

        Log.i(LOG_TAG, "onActualResultObtained: " + results.getRelativePath());
        handleResults(results);
!!!9075724.java!!!	ensureNextTestSetup(in nextTest : String, in index : int) : void
        if (nextTest == null) {
            Log.w(LOG_TAG, "ensureNextTestSetup(): nextTest=null");
            return;
        }

        mCurrentlyRunningTest = nextTest;
        mCurrentlyRunningTestIndex = index;
        mInternalMessagesHandler.sendEmptyMessageDelayed(MSG_CRASH_TIMEOUT_EXPIRED, CRASH_TIMEOUT_MS);
!!!9075852.java!!!	onTestCrashed() : void
        handleResults(new CrashedDummyResult(mCurrentlyRunningTest));

        Log.w(LOG_TAG, "onTestCrashed(): " + mCurrentlyRunningTest +
                " (" + mCurrentlyRunningTestIndex + ")");

        Intent intent = new Intent(this, TestsListActivity.class);
        intent.setAction(Intent.ACTION_REBOOT);
        /** This flag is needed because we send the intent from the service */
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.putExtra("crashedTestIndex", mCurrentlyRunningTestIndex);
        startActivity(intent);
!!!9075980.java!!!	handleResults(inout results : AbstractResult) : void
        String relativePath = results.getRelativePath();
        results.setExpectedTextResult(getExpectedTextResult(relativePath));
        results.setExpectedTextResultPath(getExpectedTextResultPath(relativePath));
        results.setExpectedImageResult(getExpectedImageResult(relativePath));
        results.setExpectedImageResultPath(getExpectedImageResultPath(relativePath));

        dumpActualTextResult(results);
        dumpActualImageResult(results);

        mSummarizer.appendTest(results);
!!!9076108.java!!!	dumpActualTextResult(inout result : AbstractResult) : void
        String testPath = result.getRelativePath();
        String actualTextResult = result.getActualTextResult();
        if (actualTextResult == null) {
            return;
        }

        String resultPath = FileFilter.setPathEnding(testPath, "-actual." + TEXT_RESULT_EXTENSION);
        FsUtils.writeDataToStorage(new File(RESULTS_ROOT_DIR_PATH, resultPath),
                actualTextResult.getBytes(), false);
!!!9076236.java!!!	dumpActualImageResult(inout result : AbstractResult) : void
        String testPath = result.getRelativePath();
        byte[] actualImageResult = result.getActualImageResult();
        if (actualImageResult == null) {
            return;
        }

        String resultPath = FileFilter.setPathEnding(testPath,
                "-actual." + IMAGE_RESULT_EXTENSION);
        FsUtils.writeDataToStorage(new File(RESULTS_ROOT_DIR_PATH, resultPath),
                actualImageResult, false);
!!!9076364.java!!!	getExpectedTextResult(in relativePath : String) : String
        byte[] result = getExpectedResult(relativePath, TEXT_RESULT_EXTENSION);
        if (result != null) {
            return new String(result);
        }
        return null;
!!!9076492.java!!!	getExpectedImageResult(in relativePath : String) : byte
        return getExpectedResult(relativePath, IMAGE_RESULT_EXTENSION);
!!!9076620.java!!!	getExpectedResult(in relativePath : String, in extension : String) : byte
        String originalRelativePath =
                FileFilter.setPathEnding(relativePath, "-expected." + extension);
        mLastExpectedResultPathRequested = originalRelativePath;

        byte[] bytes = null;
        List<String> locations = EXPECTED_RESULT_LOCATION_RELATIVE_DIR_PREFIXES;

        int size = EXPECTED_RESULT_LOCATION_RELATIVE_DIR_PREFIXES.size();
        for (int i = 0; bytes == null && i < size; i++) {
            relativePath = locations.get(i) + originalRelativePath;
            bytes = FsUtils.readDataFromUrl(FileFilter.getUrl(relativePath, false));
        }

        mLastExpectedResultPathFetched = bytes == null ? null : relativePath;
        return bytes;
!!!9076748.java!!!	getExpectedTextResultPath(in relativePath : String) : String
        return getExpectedResultPath(relativePath, TEXT_RESULT_EXTENSION);
!!!9076876.java!!!	getExpectedImageResultPath(in relativePath : String) : String
        return getExpectedResultPath(relativePath, IMAGE_RESULT_EXTENSION);
!!!9077004.java!!!	getExpectedResultPath(in relativePath : String, in extension : String) : String
        String originalRelativePath =
            FileFilter.setPathEnding(relativePath, "-expected." + extension);
        if (!originalRelativePath.equals(mLastExpectedResultPathRequested)) {
            getExpectedResult(relativePath, extension);
        }

        return mLastExpectedResultPathFetched;
