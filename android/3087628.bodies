class LogFileManager
!!!12829580.java!!!	init(in ims : InputMethodService) : void
            mIms = ims;
!!!12829708.java!!!	createLogFile() : void
            createLogFile(DEFAULT_FILENAME);
!!!12829836.java!!!	createLogFile(in prefs : SharedPreferences) : void
            final String filename =
                    prefs.getString(RESEARCH_LOG_FILENAME_KEY, DEFAULT_FILENAME);
            createLogFile(filename);
!!!12829964.java!!!	createLogFile(in filename : String) : void
            if (mIms == null) {
                final String msg = "InputMethodService is not configured.  Logging is off.";
                Log.w(TAG, msg);
                throw new IOException(msg);
            }
            final File filesDir = mIms.getFilesDir();
            if (filesDir == null || !filesDir.exists()) {
                final String msg = "Storage directory does not exist.  Logging is off.";
                Log.w(TAG, msg);
                throw new IOException(msg);
            }
            close();
            final File file = new File(filesDir, filename);
            mFile = file;
            boolean append = true;
            if (file.exists() && file.lastModified() + LOGFILE_PURGE_INTERVAL <
                    System.currentTimeMillis()) {
                append = false;
            }
            mPrintWriter = new PrintWriter(new BufferedWriter(new FileWriter(file, append)), true);
!!!12830092.java!!!	append(in s : String) : boolean
            PrintWriter printWriter = mPrintWriter;
            if (printWriter == null || !mFile.exists()) {
                if (DEBUG) {
                    Log.w(TAG, "PrintWriter is null... attempting to create default log file");
                }
                try {
                    createLogFile();
                    printWriter = mPrintWriter;
                } catch (IOException e) {
                    Log.w(TAG, "Failed to create log file.  Not logging.");
                    return false;
                }
            }
            printWriter.print(s);
            printWriter.flush();
            return !printWriter.checkError();
!!!12830220.java!!!	reset() : void
            if (mPrintWriter != null) {
                mPrintWriter.close();
                mPrintWriter = null;
                if (DEBUG) {
                    Log.d(TAG, "logfile closed");
                }
            }
            if (mFile != null) {
                mFile.delete();
                if (DEBUG) {
                    Log.d(TAG, "logfile deleted");
                }
                mFile = null;
            }
!!!12830348.java!!!	close() : void
            if (mPrintWriter != null) {
                mPrintWriter.close();
                mPrintWriter = null;
                mFile = null;
                if (DEBUG) {
                    Log.d(TAG, "logfile closed");
                }
            }
!!!12830476.java!!!	flush() : void
            if (mPrintWriter != null) {
                mPrintWriter.flush();
            }
!!!12830604.java!!!	getContents() : String
            final File file = mFile;
            if (file == null) {
                return "";
            }
            if (mPrintWriter != null) {
                mPrintWriter.flush();
            }
            FileInputStream stream = null;
            FileChannel fileChannel = null;
            String s = "";
            try {
                stream = new FileInputStream(file);
                fileChannel = stream.getChannel();
                final ByteBuffer byteBuffer = ByteBuffer.allocate((int) file.length());
                fileChannel.read(byteBuffer);
                byteBuffer.rewind();
                CharBuffer charBuffer = Charset.defaultCharset().decode(byteBuffer);
                s = charBuffer.toString();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                try {
                    if (fileChannel != null) {
                        fileChannel.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    try {
                        if (stream != null) {
                            stream.close();
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
            return s;
