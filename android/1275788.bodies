class PrivateOutputStream
!!!7300236.java!!!	PrivateOutputStream(inout p : BaseStream, in maxSize : int)
        mParent = p;
        mArray = new ByteArrayOutputStream();
        mMaxPacketSize = maxSize;
        mOpen = true;
!!!7300364.java!!!	size() : int
        return mArray.size();
!!!7300492.java!!!	write(in b : int) : void
        ensureOpen();
        mParent.ensureNotDone();
        mArray.write(b);
        if (mArray.size() == mMaxPacketSize) {
            mParent.continueOperation(true, false);
        }
!!!7300620.java!!!	write(inout buffer : byte) : void
        write(buffer, 0, buffer.length);
!!!7300748.java!!!	write(inout buffer : byte, in offset : int, in count : int) : void
        int offset1 = offset;
        int remainLength = count;

        if (buffer == null) {
            throw new IOException("buffer is null");
        }
        if ((offset | count) < 0 || count > buffer.length - offset) {
            throw new IndexOutOfBoundsException("index outof bound");
        }

        ensureOpen();
        mParent.ensureNotDone();
        while ((mArray.size() + remainLength) >= mMaxPacketSize) {
            int bufferLeft = mMaxPacketSize - mArray.size();
            mArray.write(buffer, offset1, bufferLeft);
            offset1 += bufferLeft;
            remainLength -= bufferLeft;
            mParent.continueOperation(true, false);
        }
        if (remainLength > 0) {
            mArray.write(buffer, offset1, remainLength);
        }
!!!7300876.java!!!	readBytes(in size : int) : byte
        if (mArray.size() > 0) {
            byte[] temp = mArray.toByteArray();
            mArray.reset();
            byte[] result = new byte[size];
            System.arraycopy(temp, 0, result, 0, size);
            if (temp.length != size) {
                mArray.write(temp, size, temp.length - size);
            }
            return result;
        } else {
            return null;
        }
!!!7301004.java!!!	ensureOpen() : void
        mParent.ensureOpen();
        if (!mOpen) {
            throw new IOException("Output stream is closed");
        }
!!!7301132.java!!!	close() : void
        mOpen = false;
        mParent.streamClosed(false);
!!!7301260.java!!!	isClosed() : boolean
        return !mOpen;
