class DoubleArrayBuffer
!!!723867.java!!!	DoubleArrayBuffer(inout array : double)
    this(array.length, array, 0, false);
!!!723995.java!!!	DoubleArrayBuffer(in capacity : int, inout backingArray : double, in arrayOffset : int, inout isReadOnly : boolean)
    super(capacity);
    this.backingArray = backingArray;
    this.arrayOffset = arrayOffset;
    this.isReadOnly = isReadOnly;
!!!724123.java!!!	copy(inout other : DoubleArrayBuffer, in markOfOther : int, inout isReadOnly : boolean) : DoubleArrayBuffer
    DoubleArrayBuffer buf = new DoubleArrayBuffer(other.capacity(), other.backingArray, other.arrayOffset, isReadOnly);
    buf.limit = other.limit;
    buf.position = other.position();
    buf.mark = markOfOther;
    return buf;
!!!724251.java!!!	asReadOnlyBuffer() : DoubleBuffer
    return copy(this, mark, true);
!!!724379.java!!!	compact() : DoubleBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    System.arraycopy(backingArray, position + arrayOffset, backingArray, arrayOffset, remaining());
    position = limit - position;
    limit = capacity;
    mark = UNSET_MARK;
    return this;
!!!724507.java!!!	duplicate() : DoubleBuffer
    return copy(this, mark, isReadOnly);
!!!724635.java!!!	slice() : DoubleBuffer
    return new DoubleArrayBuffer(remaining(), backingArray, arrayOffset + position, isReadOnly);
!!!724763.java!!!	isReadOnly() : boolean
    return isReadOnly;
!!!724891.java!!!	protectedArray() : double
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    return backingArray;
!!!725019.java!!!	protectedArrayOffset() : int
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    return arrayOffset;
!!!725147.java!!!	protectedHasArray() : boolean
    if (isReadOnly) {
      return false;
    }
    return true;
!!!725275.java!!!	get() : double
    if (position == limit) {
      throw new BufferUnderflowException();
    }
    return backingArray[arrayOffset + position++];
!!!725403.java!!!	get(in index : int) : double
    checkIndex(index);
    return backingArray[arrayOffset + index];
!!!725531.java!!!	get(inout dst : double, in dstOffset : int, in doubleCount : int) : DoubleBuffer
    if (doubleCount > remaining()) {
      throw new BufferUnderflowException();
    }
    System.arraycopy(backingArray, arrayOffset + position, dst, dstOffset, doubleCount);
    position += doubleCount;
    return this;
!!!725659.java!!!	isDirect() : boolean
    return false;
!!!725787.java!!!	order() : ByteOrder
    return ByteOrder.nativeOrder();
!!!725915.java!!!	put(in c : double) : DoubleBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    if (position == limit) {
      throw new BufferOverflowException();
    }
    backingArray[arrayOffset + position++] = c;
    return this;
!!!726043.java!!!	put(in index : int, in c : double) : DoubleBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index);
    backingArray[arrayOffset + index] = c;
    return this;
!!!726171.java!!!	put(inout src : double, in srcOffset : int, in doubleCount : int) : DoubleBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    if (doubleCount > remaining()) {
      throw new BufferOverflowException();
    }
    System.arraycopy(src, srcOffset, backingArray, arrayOffset + position, doubleCount);
    position += doubleCount;
    return this;
