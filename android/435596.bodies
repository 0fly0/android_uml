class Snapshot
!!!1135756.cpp!!!	Snapshot()

    transform = &mTransformRoot;
    clipRect = &mClipRectRoot;
    region = NULL;
    clipRegion = NULL;
!!!1135884.cpp!!!	Snapshot(in s : sp<Snapshot>, in saveFlags : int)

    clipRegion = NULL;

    if (saveFlags & SkCanvas::kMatrix_SaveFlag) {
        mTransformRoot.load(*s->transform);
        transform = &mTransformRoot;
    } else {
        transform = s->transform;
    }

    if (saveFlags & SkCanvas::kClip_SaveFlag) {
        mClipRectRoot.set(*s->clipRect);
        clipRect = &mClipRectRoot;
#if STENCIL_BUFFER_SIZE
        if (s->clipRegion) {
            mClipRegionRoot.op(*s->clipRegion, SkRegion::kUnion_Op);
            clipRegion = &mClipRegionRoot;
        }
#endif
    } else {
        clipRect = s->clipRect;
#if STENCIL_BUFFER_SIZE
        clipRegion = s->clipRegion;
#endif
    }

    if (s->flags & Snapshot::kFlagFboTarget) {
        flags |= Snapshot::kFlagFboTarget;
        region = s->region;
    } else {
        region = NULL;
    }
!!!1136012.cpp!!!	clip(in left : float, in top : float, in right : float, in bottom : float, in op : SkRegion::Op = SkRegion::kIntersect_Op) : bool
    Rect r(left, top, right, bottom);
    transform->mapRect(r);
    return clipTransformed(r, op);
!!!1136140.cpp!!!	clipTransformed(in r : Rect, in op : SkRegion::Op = SkRegion::kIntersect_Op) : bool
    bool clipped = false;

    switch (op) {
        case SkRegion::kIntersect_Op: {
            if (CC_UNLIKELY(clipRegion)) {
                clipped = clipRegionOp(r.left, r.top, r.right, r.bottom, SkRegion::kIntersect_Op);
            } else {
                clipped = clipRect->intersect(r);
                if (!clipped) {
                    clipRect->setEmpty();
                    clipped = true;
                }
            }
            break;
        }
        case SkRegion::kUnion_Op: {
            if (CC_UNLIKELY(clipRegion)) {
                clipped = clipRegionOp(r.left, r.top, r.right, r.bottom, SkRegion::kUnion_Op);
            } else {
                clipped = clipRect->unionWith(r);
            }
            break;
        }
        case SkRegion::kReplace_Op: {
            setClip(r.left, r.top, r.right, r.bottom);
            clipped = true;
            break;
        }
        default: {
            ensureClipRegion();
            clipped = clipRegionOp(r.left, r.top, r.right, r.bottom, op);
            break;
        }
    }

    if (clipped) {
        flags |= Snapshot::kFlagClipSet;
    }

    return clipped;
!!!1136268.cpp!!!	setClip(in left : float, in top : float, in right : float, in bottom : float) : void
    clipRect->set(left, top, right, bottom);
#if STENCIL_BUFFER_SIZE
    if (clipRegion) {
        clipRegion->setEmpty();
        clipRegion = NULL;
    }
#endif
    flags |= Snapshot::kFlagClipSet;
!!!1136396.cpp!!!	getLocalClip() : Rect
    mat4 inverse;
    inverse.loadInverse(*transform);

    mLocalClip.set(*clipRect);
    inverse.mapRect(mLocalClip);

    return mLocalClip;
!!!1136524.cpp!!!	resetClip(in left : float, in top : float, in right : float, in bottom : float) : void
    clipRect = &mClipRectRoot;
    setClip(left, top, right, bottom);
!!!1136652.cpp!!!	resetTransform(in x : float, in y : float, in z : float) : void
    transform = &mTransformRoot;
    transform->loadTranslate(x, y, z);
!!!1136780.cpp!!!	isIgnored() : bool
    return invisible || empty;
!!!1136908.cpp!!!	hasPerspectiveTransform() : bool
    return transform->isPerspective();
!!!1137036.cpp!!!	ensureClipRegion() : void
#if STENCIL_BUFFER_SIZE
    if (!clipRegion) {
        clipRegion = &mClipRegionRoot;
        clipRegion->setRect(clipRect->left, clipRect->top, clipRect->right, clipRect->bottom);
    }
#endif
!!!1137164.cpp!!!	copyClipRectFromRegion() : void
#if STENCIL_BUFFER_SIZE
    if (!clipRegion->isEmpty()) {
        const SkIRect& bounds = clipRegion->getBounds();
        clipRect->set(bounds.fLeft, bounds.fTop, bounds.fRight, bounds.fBottom);

        if (clipRegion->isRect()) {
            clipRegion->setEmpty();
            clipRegion = NULL;
        }
    } else {
        clipRect->setEmpty();
        clipRegion = NULL;
    }
#endif
!!!1137292.cpp!!!	clipRegionOp(in left : float, in top : float, in right : float, in bottom : float, in op : SkRegion::Op) : bool
#if STENCIL_BUFFER_SIZE
    SkIRect tmp;
    tmp.set(left, top, right, bottom);
    clipRegion->op(tmp, op);
    copyClipRectFromRegion();
    return true;
#else
    return false;
#endif
