class MoreKeysKeyboardBuilderFixedOrderTests
!!!12981004.java!!!	setUp() : void
        super.setUp();
!!!12981132.java!!!	createParams(in numKeys : int, in columnNum : int, in coordXInParnet : int) : MoreKeysKeyboardParams
        final MoreKeysKeyboardParams params = new MoreKeysKeyboardParams();
        params.setParameters(numKeys, columnNum, WIDTH, HEIGHT, coordXInParnet, KEYBOARD_WIDTH,
                /* isFixedOrderColumn */true, /* dividerWidth */0);
        return params;
!!!12981260.java!!!	testLayoutError() : void
        MoreKeysKeyboardParams params = null;
        try {
            final int fixColumns = KEYBOARD_WIDTH / WIDTH;
            params = createParams(10, fixColumns + 1, HEIGHT);
            fail("Should throw IllegalArgumentException");
        } catch (IllegalArgumentException e) {
            // Too small keyboard to hold more keys keyboard.
        }
        assertNull("Too small keyboard to hold more keys keyboard", params);
!!!12981388.java!!!	testLayout1KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_M0);
        assertEquals("1 key fix 5 M0 columns", 1, params.mNumColumns);
        assertEquals("1 key fix 5 M0 rows", 1, params.mNumRows);
        assertEquals("1 key fix 5 M0 left", 0, params.mLeftKeys);
        assertEquals("1 key fix 5 M0 right", 1, params.mRightKeys);
        assertEquals("1 key fix 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key fix 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key fix 5 M0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12981516.java!!!	testLayout1KeyFix5L0() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_L0);
        assertEquals("1 key fix 5 L0 columns", 1, params.mNumColumns);
        assertEquals("1 key fix 5 L0 rows", 1, params.mNumRows);
        assertEquals("1 key fix 5 L0 left", 0, params.mLeftKeys);
        assertEquals("1 key fix 5 L0 right", 1, params.mRightKeys);
        assertEquals("1 key fix 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key fix 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key fix 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12981644.java!!!	testLayout1KeyFix5L1() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_L1);
        assertEquals("1 key fix 5 L1 columns", 1, params.mNumColumns);
        assertEquals("1 key fix 5 L1 rows", 1, params.mNumRows);
        assertEquals("1 key fix 5 L1 left", 0, params.mLeftKeys);
        assertEquals("1 key fix 5 L1 right", 1, params.mRightKeys);
        assertEquals("1 key fix 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key fix 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key fix 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12981772.java!!!	testLayout1KeyFix5L2() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_L2);
        assertEquals("1 key fix 5 L2 columns", 1, params.mNumColumns);
        assertEquals("1 key fix 5 L2 rows", 1, params.mNumRows);
        assertEquals("1 key fix 5 L2 left", 0, params.mLeftKeys);
        assertEquals("1 key fix 5 L2 right", 1, params.mRightKeys);
        assertEquals("1 key fix 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key fix 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key fix 5 L2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12981900.java!!!	testLayout1KeyFix5R0() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_R0);
        assertEquals("1 key fix 5 R0 columns", 1, params.mNumColumns);
        assertEquals("1 key fix 5 R0 rows", 1, params.mNumRows);
        assertEquals("1 key fix 5 R0 left", 0, params.mLeftKeys);
        assertEquals("1 key fix 5 R0 right", 1, params.mRightKeys);
        assertEquals("1 key fix 5 R0 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key fix 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key fix 5 R0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12982028.java!!!	testLayout1KeyFix5R1() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_R1);
        assertEquals("1 key fix 5 R1 columns", 1, params.mNumColumns);
        assertEquals("1 key fix 5 R1 rows", 1, params.mNumRows);
        assertEquals("1 key fix 5 R1 left", 0, params.mLeftKeys);
        assertEquals("1 key fix 5 R1 right", 1, params.mRightKeys);
        assertEquals("1 key fix 5 R1 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key fix 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key fix 5 R1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12982156.java!!!	testLayout1KeyFix5R2() : void
        MoreKeysKeyboardParams params = createParams(1, 5, XPOS_R2);
        assertEquals("1 key fix 5 R2 columns", 1, params.mNumColumns);
        assertEquals("1 key fix 5 R2 rows", 1, params.mNumRows);
        assertEquals("1 key fix 5 R2 left", 0, params.mLeftKeys);
        assertEquals("1 key fix 5 R2 right", 1, params.mRightKeys);
        assertEquals("1 key fix 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("1 key fix 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("1 key fix 5 R2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12982284.java!!!	testLayout2KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_M0);
        assertEquals("2 key fix 5 M0 columns", 2, params.mNumColumns);
        assertEquals("2 key fix 5 M0 rows", 1, params.mNumRows);
        assertEquals("2 key fix 5 M0 left", 0, params.mLeftKeys);
        assertEquals("2 key fix 5 M0 right", 2, params.mRightKeys);
        assertEquals("2 key fix 5 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key fix 5 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("2 key fix 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key fix 5 M0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12982412.java!!!	testLayout2KeyFix5L0() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_L0);
        assertEquals("2 key fix 5 L0 columns", 2, params.mNumColumns);
        assertEquals("2 key fix 5 L0 rows", 1, params.mNumRows);
        assertEquals("2 key fix 5 L0 left", 0, params.mLeftKeys);
        assertEquals("2 key fix 5 L0 right", 2, params.mRightKeys);
        assertEquals("2 key fix 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key fix 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("2 key fix 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key fix 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12982540.java!!!	testLayout2KeyFix5L1() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_L1);
        assertEquals("2 key fix 5 L1 columns", 2, params.mNumColumns);
        assertEquals("2 key fix 5 L1 rows", 1, params.mNumRows);
        assertEquals("2 key fix 5 L1 left", 0, params.mLeftKeys);
        assertEquals("2 key fix 5 L1 right", 2, params.mRightKeys);
        assertEquals("2 key fix 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key fix 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("2 key fix 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key fix 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12982668.java!!!	testLayout2KeyFix5L2() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_L2);
        assertEquals("2 key fix 5 L2 columns", 2, params.mNumColumns);
        assertEquals("2 key fix 5 L2 rows", 1, params.mNumRows);
        assertEquals("2 key fix 5 L2 left", 0, params.mLeftKeys);
        assertEquals("2 key fix 5 L2 right", 2, params.mRightKeys);
        assertEquals("2 key fix 5 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key fix 5 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("2 key fix 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key fix 5 L2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12982796.java!!!	testLayout2KeyFix5R0() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_R0);
        assertEquals("2 key fix 5 R0 columns", 2, params.mNumColumns);
        assertEquals("2 key fix 5 R0 rows", 1, params.mNumRows);
        assertEquals("2 key fix 5 R0 left", 1, params.mLeftKeys);
        assertEquals("2 key fix 5 R0 right", 1, params.mRightKeys);
        assertEquals("2 key fix 5 R0 [1]", -1, params.getColumnPos(0));
        assertEquals("2 key fix 5 R0 <2>", 0, params.getColumnPos(1));
        assertEquals("2 key fix 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key fix 5 R0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12982924.java!!!	testLayout2KeyFix5R1() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_R1);
        assertEquals("2 key fix 5 R1 columns", 2, params.mNumColumns);
        assertEquals("2 key fix 5 R1 rows", 1, params.mNumRows);
        assertEquals("2 key fix 5 R1 left", 1, params.mLeftKeys);
        assertEquals("2 key fix 5 R1 right", 1, params.mRightKeys);
        assertEquals("2 key fix 5 R1 [1]", -1, params.getColumnPos(0));
        assertEquals("2 key fix 5 R1 <2>", 0, params.getColumnPos(1));
        assertEquals("2 key fix 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key fix 5 R1 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12983052.java!!!	testLayout2KeyFix5R2() : void
        MoreKeysKeyboardParams params = createParams(2, 5, XPOS_R2);
        assertEquals("2 key fix 5 R2 columns", 2, params.mNumColumns);
        assertEquals("2 key fix 5 R2 rows", 1, params.mNumRows);
        assertEquals("2 key fix 5 R2 left", 0, params.mLeftKeys);
        assertEquals("2 key fix 5 R2 right", 2, params.mRightKeys);
        assertEquals("2 key fix 5 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("2 key fix 5 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("2 key fix 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("2 key fix 5 R2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12983180.java!!!	testLayout3KeyFix2M0() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_M0);
        assertEquals("3 key fix 2 M0 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 M0 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 M0 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 2 M0 right", 2, params.mRightKeys);
        assertEquals("3 key fix 2 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 2 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 2 M0 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 M0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12983308.java!!!	testLayout3KeyFix2L0() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_L0);
        assertEquals("3 key fix 2 L0 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 L0 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 L0 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 2 L0 right", 2, params.mRightKeys);
        assertEquals("3 key fix 2 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 2 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 2 L0 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12983436.java!!!	testLayout3KeyFix2L1() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_L1);
        assertEquals("3 key fix 2 L1 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 L1 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 L1 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 2 L1 right", 2, params.mRightKeys);
        assertEquals("3 key fix 2 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 2 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 2 L1 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12983564.java!!!	testLayout3KeyFix2L2() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_L2);
        assertEquals("3 key fix 2 L2 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 L2 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 L2 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 2 L2 right", 2, params.mRightKeys);
        assertEquals("3 key fix 2 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 2 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 2 L2 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 L2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12983692.java!!!	testLayout3KeyFix2R0() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_R0);
        assertEquals("3 key fix 2 R0 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 R0 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 R0 left", 1, params.mLeftKeys);
        assertEquals("3 key fix 2 R0 right", 1, params.mRightKeys);
        assertEquals("3 key fix 2 R0 [1]", -1, params.getColumnPos(0));
        assertEquals("3 key fix 2 R0 <2>", 0, params.getColumnPos(1));
        assertEquals("3 key fix 2 R0 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 R0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12983820.java!!!	testLayout3KeyFix2R1() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_R1);
        assertEquals("3 key fix 2 R1 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 R1 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 R1 left", 1, params.mLeftKeys);
        assertEquals("3 key fix 2 R1 right", 1, params.mRightKeys);
        assertEquals("3 key fix 2 R1 [1]", -1, params.getColumnPos(0));
        assertEquals("3 key fix 2 R1 <2>", 0, params.getColumnPos(1));
        assertEquals("3 key fix 2 R1 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 R1 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12983948.java!!!	testLayout3KeyFix2R2() : void
        MoreKeysKeyboardParams params = createParams(3, 2, XPOS_R2);
        assertEquals("3 key fix 2 R2 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 R2 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 R2 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 2 R2 right", 2, params.mRightKeys);
        assertEquals("3 key fix 2 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 2 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 2 R2 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 R2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12984076.java!!!	testLayout4KeyFix2M0() : void
        MoreKeysKeyboardParams params = createParams(4, 2, XPOS_M0);
        assertEquals("3 key fix 2 M0 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 M0 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 M0 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 2 M0 right", 2, params.mRightKeys);
        assertEquals("3 key fix 2 M0 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 2 M0 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 2 M0 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 M0 [4]", 1, params.getColumnPos(3));
        assertEquals("3 key fix 2 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 M0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12984204.java!!!	testLayout4KeyFix2L0() : void
        MoreKeysKeyboardParams params = createParams(4, 2, XPOS_L0);
        assertEquals("3 key fix 2 L0 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 L0 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 L0 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 2 L0 right", 2, params.mRightKeys);
        assertEquals("3 key fix 2 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 2 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 2 L0 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 L0 [4]", 1, params.getColumnPos(3));
        assertEquals("3 key fix 2 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12984332.java!!!	testLayout4KeyFix2L1() : void
        MoreKeysKeyboardParams params = createParams(4, 2, XPOS_L1);
        assertEquals("3 key fix 2 L1 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 L1 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 L1 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 2 L1 right", 2, params.mRightKeys);
        assertEquals("3 key fix 2 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 2 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 2 L1 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 L1 [4]", 1, params.getColumnPos(3));
        assertEquals("3 key fix 2 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12984460.java!!!	testLayout4KeyFix2L2() : void
        MoreKeysKeyboardParams params = createParams(4, 2, XPOS_L2);
        assertEquals("3 key fix 2 L2 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 L2 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 L2 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 2 L2 right", 2, params.mRightKeys);
        assertEquals("3 key fix 2 L2 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 2 L2 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 2 L2 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 L2 [4]", 1, params.getColumnPos(3));
        assertEquals("3 key fix 2 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 L2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12984588.java!!!	testLayout4KeyFix2R0() : void
        MoreKeysKeyboardParams params = createParams(4, 2, XPOS_R0);
        assertEquals("3 key fix 2 R0 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 R0 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 R0 left", 1, params.mLeftKeys);
        assertEquals("3 key fix 2 R0 right", 1, params.mRightKeys);
        assertEquals("3 key fix 2 R0 [1]", -1, params.getColumnPos(0));
        assertEquals("3 key fix 2 R0 <2>", 0, params.getColumnPos(1));
        assertEquals("3 key fix 2 R0 [3]", -1, params.getColumnPos(2));
        assertEquals("3 key fix 2 R0 [4]", 0, params.getColumnPos(3));
        assertEquals("3 key fix 2 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 R0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12984716.java!!!	testLayout4KeyFix2R1() : void
        MoreKeysKeyboardParams params = createParams(4, 2, XPOS_R1);
        assertEquals("3 key fix 2 R1 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 R1 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 R1 left", 1, params.mLeftKeys);
        assertEquals("3 key fix 2 R1 right", 1, params.mRightKeys);
        assertEquals("3 key fix 2 R1 [1]", -1, params.getColumnPos(0));
        assertEquals("3 key fix 2 R1 <2>", 0, params.getColumnPos(1));
        assertEquals("3 key fix 2 R1 [3]", -1, params.getColumnPos(2));
        assertEquals("3 key fix 2 R1 [4]", 0, params.getColumnPos(3));
        assertEquals("3 key fix 2 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 R1 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12984844.java!!!	testLayout4KeyFix2R2() : void
        MoreKeysKeyboardParams params = createParams(4, 2, XPOS_R2);
        assertEquals("3 key fix 2 R2 columns", 2, params.mNumColumns);
        assertEquals("3 key fix 2 R2 rows", 2, params.mNumRows);
        assertEquals("3 key fix 2 R2 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 2 R2 right", 2, params.mRightKeys);
        assertEquals("3 key fix 2 R2 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 2 R2 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 2 R2 [3]", 0, params.getColumnPos(2));
        assertEquals("3 key fix 2 R2 [4]", 1, params.getColumnPos(3));
        assertEquals("3 key fix 2 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 2 R2 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12984972.java!!!	testLayout3KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_M0);
        assertEquals("3 key fix 5 columns", 3, params.mNumColumns);
        assertEquals("3 key fix 5 rows", 1, params.mNumRows);
        assertEquals("3 key fix 5 left", 1, params.mLeftKeys);
        assertEquals("3 key fix 5 right", 2, params.mRightKeys);
        assertEquals("3 key fix 5 [1]", -1, params.getColumnPos(0));
        assertEquals("3 key fix 5 <2>", 0, params.getColumnPos(1));
        assertEquals("3 key fix 5 [3]", 1, params.getColumnPos(2));
        assertEquals("3 key fix 5 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 5 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12985100.java!!!	testLayout3KeyFix5L0() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_L0);
        assertEquals("3 key fix 5 L0 columns", 3, params.mNumColumns);
        assertEquals("3 key fix 5 L0 rows", 1, params.mNumRows);
        assertEquals("3 key fix 5 L0 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 5 L0 right", 3, params.mRightKeys);
        assertEquals("3 key fix 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("3 key fix 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12985228.java!!!	testLayout3KeyFix5L1() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_L1);
        assertEquals("3 key fix 5 L1 columns", 3, params.mNumColumns);
        assertEquals("3 key fix 5 L1 rows", 1, params.mNumRows);
        assertEquals("3 key fix 5 L1 left", 0, params.mLeftKeys);
        assertEquals("3 key fix 5 L1 right", 3, params.mRightKeys);
        assertEquals("3 key fix 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("3 key fix 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("3 key fix 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("3 key fix 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12985356.java!!!	testLayout3KeyFix5L2() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_L2);
        assertEquals("3 key fix 5 L2 columns", 3, params.mNumColumns);
        assertEquals("3 key fix 5 L2 rows", 1, params.mNumRows);
        assertEquals("3 key fix 5 L2 left", 1, params.mLeftKeys);
        assertEquals("3 key fix 5 L2 right", 2, params.mRightKeys);
        assertEquals("3 key fix 5 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("3 key fix 5 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("3 key fix 5 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("3 key fix 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12985484.java!!!	testLayout3KeyFix5R0() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_R0);
        assertEquals("3 key fix 5 R0 columns", 3, params.mNumColumns);
        assertEquals("3 key fix 5 R0 rows", 1, params.mNumRows);
        assertEquals("3 key fix 5 R0 left", 2, params.mLeftKeys);
        assertEquals("3 key fix 5 R0 right", 1, params.mRightKeys);
        assertEquals("3 key fix 5 R0 [1]", -2, params.getColumnPos(0));
        assertEquals("3 key fix 5 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("3 key fix 5 R0 <3>", 0, params.getColumnPos(2));
        assertEquals("3 key fix 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 5 R0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12985612.java!!!	testLayout3KeyFix5R1() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_R1);
        assertEquals("3 key fix 5 R1 columns", 3, params.mNumColumns);
        assertEquals("3 key fix 5 R1 rows", 1, params.mNumRows);
        assertEquals("3 key fix 5 R1 left", 2, params.mLeftKeys);
        assertEquals("3 key fix 5 R1 right", 1, params.mRightKeys);
        assertEquals("3 key fix 5 R1 [1]", -2, params.getColumnPos(0));
        assertEquals("3 key fix 5 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("3 key fix 5 R1 <3>", 0, params.getColumnPos(2));
        assertEquals("3 key fix 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 5 R1 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12985740.java!!!	testLayout3KeyFix5R2() : void
        MoreKeysKeyboardParams params = createParams(3, 5, XPOS_R2);
        assertEquals("3 key fix 5 R2 columns", 3, params.mNumColumns);
        assertEquals("3 key fix 5 R2 rows", 1, params.mNumRows);
        assertEquals("3 key fix 5 R2 left", 1, params.mLeftKeys);
        assertEquals("3 key fix 5 R2 right", 2, params.mRightKeys);
        assertEquals("3 key fix 5 R2 [1]", -1, params.getColumnPos(0));
        assertEquals("3 key fix 5 R2 <2>", 0, params.getColumnPos(1));
        assertEquals("3 key fix 5 R2 [3]", 1, params.getColumnPos(2));
        assertEquals("3 key fix 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("3 key fix 5 R2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12985868.java!!!	testLayout4KeyFix3M0() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_M0);
        assertEquals("4 key fix 3 M0 columns", 3, params.mNumColumns);
        assertEquals("4 key fix 3 M0 rows", 2, params.mNumRows);
        assertEquals("4 key fix 3 M0 left", 1, params.mLeftKeys);
        assertEquals("4 key fix 3 M0 right", 2, params.mRightKeys);
        assertEquals("4 key fix 3 M0 [1]", -1, params.getColumnPos(0));
        assertEquals("4 key fix 3 M0 <2>", 0, params.getColumnPos(1));
        assertEquals("4 key fix 3 M0 [3]", 1, params.getColumnPos(2));
        assertEquals("4 key fix 3 M0 [4]", 0, params.getColumnPos(3));
        assertEquals("4 key fix 3 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 3 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12985996.java!!!	testLayout4KeyFix3L0() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_L0);
        assertEquals("4 key fix 3 L0 columns", 3, params.mNumColumns);
        assertEquals("4 key fix 3 L0 rows", 2, params.mNumRows);
        assertEquals("4 key fix 3 L0 left", 0, params.mLeftKeys);
        assertEquals("4 key fix 3 L0 right", 3, params.mRightKeys);
        assertEquals("4 key fix 3 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key fix 3 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key fix 3 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("4 key fix 3 L0 [4]", 0, params.getColumnPos(3));
        assertEquals("4 key fix 3 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 3 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12986124.java!!!	testLayout4KeyFix3L1() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_L1);
        assertEquals("4 key fix 3 L1 columns", 3, params.mNumColumns);
        assertEquals("4 key fix 3 L1 rows", 2, params.mNumRows);
        assertEquals("4 key fix 3 L1 left", 0, params.mLeftKeys);
        assertEquals("4 key fix 3 L1 right", 3, params.mRightKeys);
        assertEquals("4 key fix 3 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key fix 3 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key fix 3 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("4 key fix 3 L1 [4]", 0, params.getColumnPos(3));
        assertEquals("4 key fix 3 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 3 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12986252.java!!!	testLayout4KeyFix3L2() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_L2);
        assertEquals("4 key fix 3 L2 columns", 3, params.mNumColumns);
        assertEquals("4 key fix 3 L2 rows", 2, params.mNumRows);
        assertEquals("4 key fix 3 L2 left", 1, params.mLeftKeys);
        assertEquals("4 key fix 3 L2 right", 2, params.mRightKeys);
        assertEquals("4 key fix 3 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("4 key fix 3 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("4 key fix 3 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("4 key fix 3 L2 [4]", 0, params.getColumnPos(3));
        assertEquals("4 key fix 3 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 3 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12986380.java!!!	testLayout4KeyFix3R0() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_R0);
        assertEquals("4 key fix 3 R0 columns", 3, params.mNumColumns);
        assertEquals("4 key fix 3 R0 rows", 2, params.mNumRows);
        assertEquals("4 key fix 3 R0 left", 2, params.mLeftKeys);
        assertEquals("4 key fix 3 R0 right", 1, params.mRightKeys);
        assertEquals("4 key fix 3 R0 [1]", -2, params.getColumnPos(0));
        assertEquals("4 key fix 3 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("4 key fix 3 R0 <3>", 0, params.getColumnPos(2));
        assertEquals("4 key fix 3 R0 [4]", 0, params.getColumnPos(3));
        assertEquals("4 key fix 3 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 3 R0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12986508.java!!!	testLayout4KeyFix3R1() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_R1);
        assertEquals("4 key fix 3 R1 columns", 3, params.mNumColumns);
        assertEquals("4 key fix 3 R1 rows", 2, params.mNumRows);
        assertEquals("4 key fix 3 R1 left", 2, params.mLeftKeys);
        assertEquals("4 key fix 3 R1 right", 1, params.mRightKeys);
        assertEquals("4 key fix 3 R1 [1]", -2, params.getColumnPos(0));
        assertEquals("4 key fix 3 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("4 key fix 3 R1 <3>", 0, params.getColumnPos(2));
        assertEquals("4 key fix 3 R1 [4]", 0, params.getColumnPos(3));
        assertEquals("4 key fix 3 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 3 R1 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12986636.java!!!	testLayout4KeyFix3R2() : void
        MoreKeysKeyboardParams params = createParams(4, 3, XPOS_R2);
        assertEquals("4 key fix 3 R2 columns", 3, params.mNumColumns);
        assertEquals("4 key fix 3 R2 rows", 2, params.mNumRows);
        assertEquals("4 key fix 3 R2 left", 1, params.mLeftKeys);
        assertEquals("4 key fix 3 R2 right", 2, params.mRightKeys);
        assertEquals("4 key fix 3 R2 [1]", -1, params.getColumnPos(0));
        assertEquals("4 key fix 3 R2 <2>", 0, params.getColumnPos(1));
        assertEquals("4 key fix 3 R2 [3]", 1, params.getColumnPos(2));
        assertEquals("4 key fix 3 R2 [4]", 0, params.getColumnPos(3));
        assertEquals("4 key fix 3 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 3 R2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12986764.java!!!	testLayout5KeyFix3M0() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_M0);
        assertEquals("5 key fix 3 M0 columns", 3, params.mNumColumns);
        assertEquals("5 key fix 3 M0 rows", 2, params.mNumRows);
        assertEquals("5 key fix 3 M0 left", 1, params.mLeftKeys);
        assertEquals("5 key fix 3 M0 right", 2, params.mRightKeys);
        assertEquals("5 key fix 3 M0 [1]", -1, params.getColumnPos(0));
        assertEquals("5 key fix 3 M0 <2>", 0, params.getColumnPos(1));
        assertEquals("5 key fix 3 M0 [3]", 1, params.getColumnPos(2));
        assertEquals("5 key fix 3 M0 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key fix 3 M0 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key fix 3 M0 adjust", -1, params.mTopRowAdjustment);
        assertEquals("5 key fix 3 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12986892.java!!!	testLayout5KeyFix3L0() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_L0);
        assertEquals("5 key fix 3 L0 columns", 3, params.mNumColumns);
        assertEquals("5 key fix 3 L0 rows", 2, params.mNumRows);
        assertEquals("5 key fix 3 L0 left", 0, params.mLeftKeys);
        assertEquals("5 key fix 3 L0 right", 3, params.mRightKeys);
        assertEquals("5 key fix 3 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key fix 3 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key fix 3 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key fix 3 L0 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key fix 3 L0 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key fix 3 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 3 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12987020.java!!!	testLayout5KeyFix3L1() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_L1);
        assertEquals("5 key fix 3 L1 columns", 3, params.mNumColumns);
        assertEquals("5 key fix 3 L1 rows", 2, params.mNumRows);
        assertEquals("5 key fix 3 L1 left", 0, params.mLeftKeys);
        assertEquals("5 key fix 3 L1 right", 3, params.mRightKeys);
        assertEquals("5 key fix 3 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key fix 3 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key fix 3 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key fix 3 L1 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key fix 3 L1 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key fix 3 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 3 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12987148.java!!!	testLayout5KeyFix3L2() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_L2);
        assertEquals("5 key fix 3 L2 columns", 3, params.mNumColumns);
        assertEquals("5 key fix 3 L2 rows", 2, params.mNumRows);
        assertEquals("5 key fix 3 L2 left", 1, params.mLeftKeys);
        assertEquals("5 key fix 3 L2 right", 2, params.mRightKeys);
        assertEquals("5 key fix 3 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("5 key fix 3 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("5 key fix 3 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("5 key fix 3 L2 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key fix 3 L2 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key fix 3 L2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("5 key fix 3 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12987276.java!!!	testLayout5KeyFix3R0() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_R0);
        assertEquals("5 key fix 3 R0 columns", 3, params.mNumColumns);
        assertEquals("5 key fix 3 R0 rows", 2, params.mNumRows);
        assertEquals("5 key fix 3 R0 left", 2, params.mLeftKeys);
        assertEquals("5 key fix 3 R0 right", 1, params.mRightKeys);
        assertEquals("5 key fix 3 R0 [1]", -2, params.getColumnPos(0));
        assertEquals("5 key fix 3 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("5 key fix 3 R0 <3>", 0, params.getColumnPos(2));
        assertEquals("5 key fix 3 R0 [4]", -1, params.getColumnPos(3));
        assertEquals("5 key fix 3 R0 [5]", 0, params.getColumnPos(4));
        assertEquals("5 key fix 3 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 3 R0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12987404.java!!!	testLayout5KeyFix3R1() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_R1);
        assertEquals("5 key fix 3 R1 columns", 3, params.mNumColumns);
        assertEquals("5 key fix 3 R1 rows", 2, params.mNumRows);
        assertEquals("5 key fix 3 R1 left", 2, params.mLeftKeys);
        assertEquals("5 key fix 3 R1 right", 1, params.mRightKeys);
        assertEquals("5 key fix 3 R1 [1]", -2, params.getColumnPos(0));
        assertEquals("5 key fix 3 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("5 key fix 3 R1 <3>", 0, params.getColumnPos(2));
        assertEquals("5 key fix 3 R1 [4]", -1, params.getColumnPos(3));
        assertEquals("5 key fix 3 R1 [5]", 0, params.getColumnPos(4));
        assertEquals("5 key fix 3 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 3 R1 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12987532.java!!!	testLayout5KeyFix3R2() : void
        MoreKeysKeyboardParams params = createParams(5, 3, XPOS_R2);
        assertEquals("5 key fix 3 R2 columns", 3, params.mNumColumns);
        assertEquals("5 key fix 3 R2 rows", 2, params.mNumRows);
        assertEquals("5 key fix 3 R2 left", 1, params.mLeftKeys);
        assertEquals("5 key fix 3 R2 right", 2, params.mRightKeys);
        assertEquals("5 key fix 3 R2 [1]", -1, params.getColumnPos(0));
        assertEquals("5 key fix 3 R2 <2>", 0, params.getColumnPos(1));
        assertEquals("5 key fix 3 R2 [3]", 1, params.getColumnPos(2));
        assertEquals("5 key fix 3 R2 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key fix 3 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key fix 3 R2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("5 key fix 3 R2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12987660.java!!!	testLayout6KeyFix3M0() : void
        MoreKeysKeyboardParams params = createParams(6, 3, XPOS_M0);
        assertEquals("6 key fix 3 M0 columns", 3, params.mNumColumns);
        assertEquals("6 key fix 3 M0 rows", 2, params.mNumRows);
        assertEquals("6 key fix 3 M0 left", 1, params.mLeftKeys);
        assertEquals("6 key fix 3 M0 right", 2, params.mRightKeys);
        assertEquals("6 key fix 3 M0 [1]", -1, params.getColumnPos(0));
        assertEquals("6 key fix 3 M0 <2>", 0, params.getColumnPos(1));
        assertEquals("6 key fix 3 M0 [3]", 1, params.getColumnPos(2));
        assertEquals("6 key fix 3 M0 [4]", -1, params.getColumnPos(3));
        assertEquals("6 key fix 3 M0 [5]", 0, params.getColumnPos(4));
        assertEquals("6 key fix 3 M0 [6]", 1, params.getColumnPos(5));
        assertEquals("6 key fix 3 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 3 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12987788.java!!!	testLayout6KeyFix3L0() : void
        MoreKeysKeyboardParams params = createParams(6, 3, XPOS_L0);
        assertEquals("6 key fix 3 L0 columns", 3, params.mNumColumns);
        assertEquals("6 key fix 3 L0 rows", 2, params.mNumRows);
        assertEquals("6 key fix 3 L0 left", 0, params.mLeftKeys);
        assertEquals("6 key fix 3 L0 right", 3, params.mRightKeys);
        assertEquals("6 key fix 3 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key fix 3 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key fix 3 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("6 key fix 3 L0 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key fix 3 L0 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key fix 3 L0 [6]", 2, params.getColumnPos(5));
        assertEquals("6 key fix 3 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 3 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12987916.java!!!	testLayout6KeyFix3L1() : void
        MoreKeysKeyboardParams params = createParams(6, 3, XPOS_L1);
        assertEquals("6 key fix 3 L1 columns", 3, params.mNumColumns);
        assertEquals("6 key fix 3 L1 rows", 2, params.mNumRows);
        assertEquals("6 key fix 3 L1 left", 0, params.mLeftKeys);
        assertEquals("6 key fix 3 L1 right", 3, params.mRightKeys);
        assertEquals("6 key fix 3 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key fix 3 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key fix 3 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("6 key fix 3 L1 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key fix 3 L1 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key fix 3 L1 [6]", 2, params.getColumnPos(5));
        assertEquals("6 key fix 3 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 3 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12988044.java!!!	testLayout6KeyFix3L2() : void
        MoreKeysKeyboardParams params = createParams(6, 3, XPOS_L2);
        assertEquals("6 key fix 3 L2 columns", 3, params.mNumColumns);
        assertEquals("6 key fix 3 L2 rows", 2, params.mNumRows);
        assertEquals("6 key fix 3 L2 left", 1, params.mLeftKeys);
        assertEquals("6 key fix 3 L2 right", 2, params.mRightKeys);
        assertEquals("6 key fix 3 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("6 key fix 3 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("6 key fix 3 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("6 key fix 3 L2 [4]", -1, params.getColumnPos(3));
        assertEquals("6 key fix 3 L2 [5]", 0, params.getColumnPos(4));
        assertEquals("6 key fix 3 L2 [6]", 1, params.getColumnPos(5));
        assertEquals("6 key fix 3 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 3 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12988172.java!!!	testLayout6KeyFix3R0() : void
        MoreKeysKeyboardParams params = createParams(6, 3, XPOS_R0);
        assertEquals("6 key fix 3 R0 columns", 3, params.mNumColumns);
        assertEquals("6 key fix 3 R0 rows", 2, params.mNumRows);
        assertEquals("6 key fix 3 R0 left", 2, params.mLeftKeys);
        assertEquals("6 key fix 3 R0 right", 1, params.mRightKeys);
        assertEquals("6 key fix 3 R0 [1]", -2, params.getColumnPos(0));
        assertEquals("6 key fix 3 R0 [2]", -1, params.getColumnPos(1));
        assertEquals("6 key fix 3 R0 <3>", 0, params.getColumnPos(2));
        assertEquals("6 key fix 3 R0 [4]", -2, params.getColumnPos(3));
        assertEquals("6 key fix 3 R0 [5]", -1, params.getColumnPos(4));
        assertEquals("6 key fix 3 R0 [6]", 0, params.getColumnPos(5));
        assertEquals("6 key fix 3 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 3 R0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12988300.java!!!	testLayout6KeyFix3R1() : void
        MoreKeysKeyboardParams params = createParams(6, 3, XPOS_R1);
        assertEquals("6 key fix 3 R1 columns", 3, params.mNumColumns);
        assertEquals("6 key fix 3 R1 rows", 2, params.mNumRows);
        assertEquals("6 key fix 3 R1 left", 2, params.mLeftKeys);
        assertEquals("6 key fix 3 R1 right", 1, params.mRightKeys);
        assertEquals("6 key fix 3 R1 [1]", -2, params.getColumnPos(0));
        assertEquals("6 key fix 3 R1 [2]", -1, params.getColumnPos(1));
        assertEquals("6 key fix 3 R1 <3>", 0, params.getColumnPos(2));
        assertEquals("6 key fix 3 R1 [4]", -2, params.getColumnPos(3));
        assertEquals("6 key fix 3 R1 [5]", -1, params.getColumnPos(4));
        assertEquals("6 key fix 3 R1 [6]", 0, params.getColumnPos(5));
        assertEquals("6 key fix 3 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 3 R1 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12988428.java!!!	testLayout6KeyFix3R2() : void
        MoreKeysKeyboardParams params = createParams(6, 3, XPOS_R2);
        assertEquals("6 key fix 3 R2 columns", 3, params.mNumColumns);
        assertEquals("6 key fix 3 R2 rows", 2, params.mNumRows);
        assertEquals("6 key fix 3 R2 left", 1, params.mLeftKeys);
        assertEquals("6 key fix 3 R2 right", 2, params.mRightKeys);
        assertEquals("6 key fix 3 R2 [1]", -1, params.getColumnPos(0));
        assertEquals("6 key fix 3 R2 <2>", 0, params.getColumnPos(1));
        assertEquals("6 key fix 3 R2 [1]", 1, params.getColumnPos(2));
        assertEquals("6 key fix 3 R2 [4]", -1, params.getColumnPos(3));
        assertEquals("6 key fix 3 R2 [5]", 0, params.getColumnPos(4));
        assertEquals("6 key fix 3 R2 [6]", 1, params.getColumnPos(5));
        assertEquals("6 key fix 3 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 3 R2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12988556.java!!!	testLayout4KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_M0);
        assertEquals("4 key fix 5 columns", 4, params.mNumColumns);
        assertEquals("4 key fix 5 rows", 1, params.mNumRows);
        assertEquals("4 key fix 5 left", 1, params.mLeftKeys);
        assertEquals("4 key fix 5 right", 3, params.mRightKeys);
        assertEquals("4 key fix 5 <1>", -1, params.getColumnPos(0));
        assertEquals("4 key fix 5 [2]", 0, params.getColumnPos(1));
        assertEquals("4 key fix 5 [3]", 1, params.getColumnPos(2));
        assertEquals("4 key fix 5 [4]", 2, params.getColumnPos(3));
        assertEquals("4 key fix 5 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 5 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12988684.java!!!	testLayout4KeyFix5L0() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_L0);
        assertEquals("4 key fix 5 L0 columns", 4, params.mNumColumns);
        assertEquals("4 key fix 5 L0 rows", 1, params.mNumRows);
        assertEquals("4 key fix 5 L0 left", 0, params.mLeftKeys);
        assertEquals("4 key fix 5 L0 right", 4, params.mRightKeys);
        assertEquals("4 key fix 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key fix 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key fix 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("4 key fix 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("4 key fix 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12988812.java!!!	testLayout4KeyFix5L1() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_L1);
        assertEquals("4 key fix 5 L1 columns", 4, params.mNumColumns);
        assertEquals("4 key fix 5 L1 rows", 1, params.mNumRows);
        assertEquals("4 key fix 5 L1 left", 0, params.mLeftKeys);
        assertEquals("4 key fix 5 L1 right", 4, params.mRightKeys);
        assertEquals("4 key fix 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("4 key fix 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("4 key fix 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("4 key fix 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("4 key fix 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12988940.java!!!	testLayout4KeyFix5L2() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_L2);
        assertEquals("4 key fix 5 L2 columns", 4, params.mNumColumns);
        assertEquals("4 key fix 5 L2 rows", 1, params.mNumRows);
        assertEquals("4 key fix 5 L2 left", 1, params.mLeftKeys);
        assertEquals("4 key fix 5 L2 right", 3, params.mRightKeys);
        assertEquals("4 key fix 5 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("4 key fix 5 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("4 key fix 5 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("4 key fix 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("4 key fix 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12989068.java!!!	testLayout4KeyFix5R0() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_R0);
        assertEquals("4 key fix 5 R0 columns", 4, params.mNumColumns);
        assertEquals("4 key fix 5 R0 rows", 1, params.mNumRows);
        assertEquals("4 key fix 5 R0 left", 3, params.mLeftKeys);
        assertEquals("4 key fix 5 R0 right", 1, params.mRightKeys);
        assertEquals("4 key fix 5 R0 [1]", -3, params.getColumnPos(0));
        assertEquals("4 key fix 5 R0 [2]", -2, params.getColumnPos(1));
        assertEquals("4 key fix 5 R0 [3]", -1, params.getColumnPos(2));
        assertEquals("4 key fix 5 R0 <4>", 0, params.getColumnPos(3));
        assertEquals("4 key fix 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 5 R0 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12989196.java!!!	testLayout4KeyFix5R1() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_R1);
        assertEquals("4 key fix 5 R1 columns", 4, params.mNumColumns);
        assertEquals("4 key fix 5 R1 rows", 1, params.mNumRows);
        assertEquals("4 key fix 5 R1 left", 3, params.mLeftKeys);
        assertEquals("4 key fix 5 R1 right", 1, params.mRightKeys);
        assertEquals("4 key fix 5 R1 [1]", -3, params.getColumnPos(0));
        assertEquals("4 key fix 5 R1 [2]", -2, params.getColumnPos(1));
        assertEquals("4 key fix 5 R1 [3]", -1, params.getColumnPos(2));
        assertEquals("4 key fix 5 R1 <4>", 0, params.getColumnPos(3));
        assertEquals("4 key fix 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 5 R1 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12989324.java!!!	testLayout4KeyFix5R2() : void
        MoreKeysKeyboardParams params = createParams(4, 5, XPOS_R2);
        assertEquals("4 key fix 5 R2 columns", 4, params.mNumColumns);
        assertEquals("4 key fix 5 R2 rows", 1, params.mNumRows);
        assertEquals("4 key fix 5 R2 left", 2, params.mLeftKeys);
        assertEquals("4 key fix 5 R2 right", 2, params.mRightKeys);
        assertEquals("4 key fix 5 R2 [1]", -2, params.getColumnPos(0));
        assertEquals("4 key fix 5 R2 [2]", -1, params.getColumnPos(1));
        assertEquals("4 key fix 5 R2 <3>", 0, params.getColumnPos(2));
        assertEquals("4 key fix 5 R2 [4]", 1, params.getColumnPos(3));
        assertEquals("4 key fix 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("4 key fix 5 R2 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12989452.java!!!	testLayout5KeyFix4M0() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_M0);
        assertEquals("5 key fix 4 M0 columns", 4, params.mNumColumns);
        assertEquals("5 key fix 4 M0 rows", 2, params.mNumRows);
        assertEquals("5 key fix 4 M0 left", 1, params.mLeftKeys);
        assertEquals("5 key fix 4 M0 right", 3, params.mRightKeys);
        assertEquals("5 key fix 4 M0 [1]", -1, params.getColumnPos(0));
        assertEquals("5 key fix 4 M0 <2>", 0, params.getColumnPos(1));
        assertEquals("5 key fix 4 M0 [3]", 1, params.getColumnPos(2));
        assertEquals("5 key fix 4 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("5 key fix 4 M0 [5]", 0, params.getColumnPos(4));
        assertEquals("5 key fix 4 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 4 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12989580.java!!!	testLayout5KeyFix4L0() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_L0);
        assertEquals("5 key fix 4 L0 columns", 4, params.mNumColumns);
        assertEquals("5 key fix 4 L0 rows", 2, params.mNumRows);
        assertEquals("5 key fix 4 L0 left", 0, params.mLeftKeys);
        assertEquals("5 key fix 4 L0 right", 4, params.mRightKeys);
        assertEquals("5 key fix 4 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key fix 4 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key fix 4 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key fix 4 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("5 key fix 4 L0 [5]", 0, params.getColumnPos(4));
        assertEquals("5 key fix 4 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 4 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12989708.java!!!	testLayout5KeyFix4L1() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_L1);
        assertEquals("5 key fix 4 L1 columns", 4, params.mNumColumns);
        assertEquals("5 key fix 4 L1 rows", 2, params.mNumRows);
        assertEquals("5 key fix 4 L1 left", 0, params.mLeftKeys);
        assertEquals("5 key fix 4 L1 right", 4, params.mRightKeys);
        assertEquals("5 key fix 4 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key fix 4 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key fix 4 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key fix 4 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("5 key fix 4 L1 [5]", 0, params.getColumnPos(4));
        assertEquals("5 key fix 4 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 4 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12989836.java!!!	testLayout5KeyFix4L2() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_L2);
        assertEquals("5 key fix 4 L2 columns", 4, params.mNumColumns);
        assertEquals("5 key fix 4 L2 rows", 2, params.mNumRows);
        assertEquals("5 key fix 4 L2 left", 1, params.mLeftKeys);
        assertEquals("5 key fix 4 L2 right", 3, params.mRightKeys);
        assertEquals("5 key fix 4 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("5 key fix 4 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("5 key fix 4 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("5 key fix 4 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("5 key fix 4 L2 [5]", 0, params.getColumnPos(4));
        assertEquals("5 key fix 4 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 4 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12989964.java!!!	testLayout5KeyFix4R0() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_R0);
        assertEquals("5 key fix 4 R0 columns", 4, params.mNumColumns);
        assertEquals("5 key fix 4 R0 rows", 2, params.mNumRows);
        assertEquals("5 key fix 4 R0 left", 3, params.mLeftKeys);
        assertEquals("5 key fix 4 R0 right", 1, params.mRightKeys);
        assertEquals("5 key fix 4 R0 [1]", -3, params.getColumnPos(0));
        assertEquals("5 key fix 4 R0 [2]", -2, params.getColumnPos(1));
        assertEquals("5 key fix 4 R0 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key fix 4 R0 <4>", 0, params.getColumnPos(3));
        assertEquals("5 key fix 4 R0 [5]", 0, params.getColumnPos(4));
        assertEquals("5 key fix 4 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 4 R0 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12990092.java!!!	testLayout5KeyFix4R1() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_R1);
        assertEquals("5 key fix 4 R1 columns", 4, params.mNumColumns);
        assertEquals("5 key fix 4 R1 rows", 2, params.mNumRows);
        assertEquals("5 key fix 4 R1 left", 3, params.mLeftKeys);
        assertEquals("5 key fix 4 R1 right", 1, params.mRightKeys);
        assertEquals("5 key fix 4 R1 [1]", -3, params.getColumnPos(0));
        assertEquals("5 key fix 4 R1 [2]", -2, params.getColumnPos(1));
        assertEquals("5 key fix 4 R1 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key fix 4 R1 [4]", 0, params.getColumnPos(3));
        assertEquals("5 key fix 4 R1 [5]", 0, params.getColumnPos(4));
        assertEquals("5 key fix 4 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 4 R1 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12990220.java!!!	testLayout5KeyFix4R2() : void
        MoreKeysKeyboardParams params = createParams(5, 4, XPOS_R2);
        assertEquals("5 key fix 4 R2 columns", 4, params.mNumColumns);
        assertEquals("5 key fix 4 R2 rows", 2, params.mNumRows);
        assertEquals("5 key fix 4 R2 left", 2, params.mLeftKeys);
        assertEquals("5 key fix 4 R2 right", 2, params.mRightKeys);
        assertEquals("5 key fix 4 R2 [1]", -2, params.getColumnPos(0));
        assertEquals("5 key fix 4 R2 [2]", -1, params.getColumnPos(1));
        assertEquals("5 key fix 4 R2 <3>", 0, params.getColumnPos(2));
        assertEquals("5 key fix 4 R2 [4]", 1, params.getColumnPos(3));
        assertEquals("5 key fix 4 R2 [5]", 0, params.getColumnPos(4));
        assertEquals("5 key fix 4 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 4 R2 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12990348.java!!!	testLayout6KeyFix4M0() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_M0);
        assertEquals("6 key fix 4 M0 columns", 4, params.mNumColumns);
        assertEquals("6 key fix 4 M0 rows", 2, params.mNumRows);
        assertEquals("6 key fix 4 M0 left", 1, params.mLeftKeys);
        assertEquals("6 key fix 4 M0 right", 3, params.mRightKeys);
        assertEquals("6 key fix 4 M0 [1]", -1, params.getColumnPos(0));
        assertEquals("6 key fix 4 M0 <2>", 0, params.getColumnPos(1));
        assertEquals("6 key fix 4 M0 [3]", 1, params.getColumnPos(2));
        assertEquals("6 key fix 4 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("6 key fix 4 M0 [5]", 0, params.getColumnPos(4));
        assertEquals("6 key fix 4 M0 [6]", 1, params.getColumnPos(5));
        assertEquals("6 key fix 4 M0 adjust", -1, params.mTopRowAdjustment);
        assertEquals("6 key fix 4 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12990476.java!!!	testLayout6KeyFix4L0() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_L0);
        assertEquals("6 key fix 4 L0 columns", 4, params.mNumColumns);
        assertEquals("6 key fix 4 L0 rows", 2, params.mNumRows);
        assertEquals("6 key fix 4 L0 left", 0, params.mLeftKeys);
        assertEquals("6 key fix 4 L0 right", 4, params.mRightKeys);
        assertEquals("6 key fix 4 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key fix 4 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key fix 4 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("6 key fix 4 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("6 key fix 4 L0 [5]", 0, params.getColumnPos(4));
        assertEquals("6 key fix 4 L0 [6]", 1, params.getColumnPos(5));
        assertEquals("6 key fix 4 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 4 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12990604.java!!!	testLayout6KeyFix4L1() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_L1);
        assertEquals("6 key fix 4 L1 columns", 4, params.mNumColumns);
        assertEquals("6 key fix 4 L1 rows", 2, params.mNumRows);
        assertEquals("6 key fix 4 L1 left", 0, params.mLeftKeys);
        assertEquals("6 key fix 4 L1 right", 4, params.mRightKeys);
        assertEquals("6 key fix 4 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key fix 4 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key fix 4 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("6 key fix 4 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("6 key fix 4 L1 [5]", 0, params.getColumnPos(4));
        assertEquals("6 key fix 4 L1 [6]", 1, params.getColumnPos(5));
        assertEquals("6 key fix 4 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 4 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12990732.java!!!	testLayout6KeyFix4L2() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_L2);
        assertEquals("6 key fix 4 L2 columns", 4, params.mNumColumns);
        assertEquals("6 key fix 4 L2 rows", 2, params.mNumRows);
        assertEquals("6 key fix 4 L2 left", 1, params.mLeftKeys);
        assertEquals("6 key fix 4 L2 right", 3, params.mRightKeys);
        assertEquals("6 key fix 4 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("6 key fix 4 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("6 key fix 4 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("6 key fix 4 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("6 key fix 4 L2 [5]", 0, params.getColumnPos(4));
        assertEquals("6 key fix 4 L2 [6]", 1, params.getColumnPos(5));
        assertEquals("6 key fix 4 L2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("6 key fix 4 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12990860.java!!!	testLayout6KeyFix4R0() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_R0);
        assertEquals("6 key fix 4 R0 columns", 4, params.mNumColumns);
        assertEquals("6 key fix 4 R0 rows", 2, params.mNumRows);
        assertEquals("6 key fix 4 R0 left", 3, params.mLeftKeys);
        assertEquals("6 key fix 4 R0 right", 1, params.mRightKeys);
        assertEquals("6 key fix 4 R0 [1]", -3, params.getColumnPos(0));
        assertEquals("6 key fix 4 R0 [2]", -2, params.getColumnPos(1));
        assertEquals("6 key fix 4 R0 [3]", -1, params.getColumnPos(2));
        assertEquals("6 key fix 4 R0 <4>", 0, params.getColumnPos(3));
        assertEquals("6 key fix 4 R0 [5]", -1, params.getColumnPos(4));
        assertEquals("6 key fix 4 R0 [6]", 0, params.getColumnPos(5));
        assertEquals("6 key fix 4 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 4 R0 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12990988.java!!!	testLayout6KeyFix4R1() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_R1);
        assertEquals("6 key fix 4 R1 columns", 4, params.mNumColumns);
        assertEquals("6 key fix 4 R1 rows", 2, params.mNumRows);
        assertEquals("6 key fix 4 R1 left", 3, params.mLeftKeys);
        assertEquals("6 key fix 4 R1 right", 1, params.mRightKeys);
        assertEquals("6 key fix 4 R1 [1]", -3, params.getColumnPos(0));
        assertEquals("6 key fix 4 R1 [2]", -2, params.getColumnPos(1));
        assertEquals("6 key fix 4 R1 [3]", -1, params.getColumnPos(2));
        assertEquals("6 key fix 4 R1 [4]", 0, params.getColumnPos(3));
        assertEquals("6 key fix 4 R1 [5]", -1, params.getColumnPos(4));
        assertEquals("6 key fix 4 R1 [6]", 0, params.getColumnPos(5));
        assertEquals("6 key fix 4 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 4 R1 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12991116.java!!!	testLayout6KeyFix4R2() : void
        MoreKeysKeyboardParams params = createParams(6, 4, XPOS_R2);
        assertEquals("6 key fix 4 R2 columns", 4, params.mNumColumns);
        assertEquals("6 key fix 4 R2 rows", 2, params.mNumRows);
        assertEquals("6 key fix 4 R2 left", 2, params.mLeftKeys);
        assertEquals("6 key fix 4 R2 right", 2, params.mRightKeys);
        assertEquals("6 key fix 4 R2 [1]", -2, params.getColumnPos(0));
        assertEquals("6 key fix 4 R2 [2]", -1, params.getColumnPos(1));
        assertEquals("6 key fix 4 R2 <3>", 0, params.getColumnPos(2));
        assertEquals("6 key fix 4 R2 [4]", 1, params.getColumnPos(3));
        assertEquals("6 key fix 4 R2 [5]", 0, params.getColumnPos(4));
        assertEquals("6 key fix 4 R2 [6]", 1, params.getColumnPos(5));
        assertEquals("6 key fix 4 R2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("6 key fix 4 R2 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12991244.java!!!	testLayout7KeyFix4M0() : void
        MoreKeysKeyboardParams params = createParams(7, 4, XPOS_M0);
        assertEquals("7 key fix 4 M0 columns", 4, params.mNumColumns);
        assertEquals("7 key fix 4 M0 rows", 2, params.mNumRows);
        assertEquals("7 key fix 4 M0 left", 1, params.mLeftKeys);
        assertEquals("7 key fix 4 M0 right", 3, params.mRightKeys);
        assertEquals("7 key fix 4 M0 [1]", -1, params.getColumnPos(0));
        assertEquals("7 key fix 4 M0 <2>", 0, params.getColumnPos(1));
        assertEquals("7 key fix 4 M0 [3]", 1, params.getColumnPos(2));
        assertEquals("7 key fix 4 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("7 key fix 4 M0 [5]", -1, params.getColumnPos(4));
        assertEquals("7 key fix 4 M0 [6]", 0, params.getColumnPos(5));
        assertEquals("7 key fix 4 M0 [7]", 1, params.getColumnPos(6));
        assertEquals("7 key fix 4 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 4 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12991372.java!!!	testLayout7KeyFix4L0() : void
        MoreKeysKeyboardParams params = createParams(7, 4, XPOS_L0);
        assertEquals("7 key fix 4 L0 columns", 4, params.mNumColumns);
        assertEquals("7 key fix 4 L0 rows", 2, params.mNumRows);
        assertEquals("7 key fix 4 L0 left", 0, params.mLeftKeys);
        assertEquals("7 key fix 4 L0 right", 4, params.mRightKeys);
        assertEquals("7 key fix 4 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key fix 4 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key fix 4 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key fix 4 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("7 key fix 4 L0 [5]", 0, params.getColumnPos(4));
        assertEquals("7 key fix 4 L0 [6]", 1, params.getColumnPos(5));
        assertEquals("7 key fix 4 L0 [7]", 2, params.getColumnPos(6));
        assertEquals("7 key fix 4 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 4 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12991500.java!!!	testLayout7KeyFix4L1() : void
        MoreKeysKeyboardParams params = createParams(7, 4, XPOS_L1);
        assertEquals("7 key fix 4 L1 columns", 4, params.mNumColumns);
        assertEquals("7 key fix 4 L1 rows", 2, params.mNumRows);
        assertEquals("7 key fix 4 L1 left", 0, params.mLeftKeys);
        assertEquals("7 key fix 4 L1 right", 4, params.mRightKeys);
        assertEquals("7 key fix 4 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key fix 4 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key fix 4 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key fix 4 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("7 key fix 4 L1 [5]", 0, params.getColumnPos(4));
        assertEquals("7 key fix 4 L1 [6]", 1, params.getColumnPos(5));
        assertEquals("7 key fix 4 l1 [7]", 2, params.getColumnPos(6));
        assertEquals("7 key fix 4 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 4 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12991628.java!!!	testLayout7KeyFix4L2() : void
        MoreKeysKeyboardParams params = createParams(7, 4, XPOS_L2);
        assertEquals("7 key fix 4 L2 columns", 4, params.mNumColumns);
        assertEquals("7 key fix 4 L2 rows", 2, params.mNumRows);
        assertEquals("7 key fix 4 L2 left", 1, params.mLeftKeys);
        assertEquals("7 key fix 4 L2 right", 3, params.mRightKeys);
        assertEquals("7 key fix 4 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("7 key fix 4 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("7 key fix 4 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("7 key fix 4 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("7 key fix 4 L2 [5]", -1, params.getColumnPos(4));
        assertEquals("7 key fix 4 L2 [6]", 0, params.getColumnPos(5));
        assertEquals("7 key fix 4 L2 [7]", 1, params.getColumnPos(6));
        assertEquals("7 key fix 4 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 4 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12991756.java!!!	testLayout7KeyFix4R0() : void
        MoreKeysKeyboardParams params = createParams(7, 4, XPOS_R0);
        assertEquals("7 key fix 4 R0 columns", 4, params.mNumColumns);
        assertEquals("7 key fix 4 R0 rows", 2, params.mNumRows);
        assertEquals("7 key fix 4 R0 left", 3, params.mLeftKeys);
        assertEquals("7 key fix 4 R0 right", 1, params.mRightKeys);
        assertEquals("7 key fix 4 R0 [1]", -3, params.getColumnPos(0));
        assertEquals("7 key fix 4 R0 [2]", -2, params.getColumnPos(1));
        assertEquals("7 key fix 4 R0 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key fix 4 R0 <4>", 0, params.getColumnPos(3));
        assertEquals("7 key fix 4 R0 [5]", -2, params.getColumnPos(4));
        assertEquals("7 key fix 4 R0 [6]", -1, params.getColumnPos(5));
        assertEquals("7 key fix 4 R0 [7]", 0, params.getColumnPos(6));
        assertEquals("7 key fix 4 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 4 R0 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12991884.java!!!	testLayout7KeyFix4R1() : void
        MoreKeysKeyboardParams params = createParams(7, 4, XPOS_R1);
        assertEquals("7 key fix 4 R1 columns", 4, params.mNumColumns);
        assertEquals("7 key fix 4 R1 rows", 2, params.mNumRows);
        assertEquals("7 key fix 4 R1 left", 3, params.mLeftKeys);
        assertEquals("7 key fix 4 R1 right", 1, params.mRightKeys);
        assertEquals("7 key fix 4 R1 [1]", -3, params.getColumnPos(0));
        assertEquals("7 key fix 4 R1 [2]", -2, params.getColumnPos(1));
        assertEquals("7 key fix 4 R1 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key fix 4 R1 <4>", 0, params.getColumnPos(3));
        assertEquals("7 key fix 4 R1 [5]", -2, params.getColumnPos(4));
        assertEquals("7 key fix 4 R1 [6]", -1, params.getColumnPos(5));
        assertEquals("7 key fix 4 R1 [7]", 0, params.getColumnPos(6));
        assertEquals("7 key fix 4 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 4 R1 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12992012.java!!!	testLayout7KeyFix4R2() : void
        MoreKeysKeyboardParams params = createParams(7, 4, XPOS_R2);
        assertEquals("7 key fix 4 R2 columns", 4, params.mNumColumns);
        assertEquals("7 key fix 4 R2 rows", 2, params.mNumRows);
        assertEquals("7 key fix 4 R2 left", 2, params.mLeftKeys);
        assertEquals("7 key fix 4 R2 right", 2, params.mRightKeys);
        assertEquals("7 key fix 4 R2 [1]", -2, params.getColumnPos(0));
        assertEquals("7 key fix 4 R2 [2]", -1, params.getColumnPos(1));
        assertEquals("7 key fix 4 R2 <3>", 0, params.getColumnPos(2));
        assertEquals("7 key fix 4 R2 [4]", 1, params.getColumnPos(3));
        assertEquals("7 key fix 4 R2 [5]", -1, params.getColumnPos(4));
        assertEquals("7 key fix 4 R2 [6]", 0, params.getColumnPos(5));
        assertEquals("7 key fix 4 R2 [7]", 1, params.getColumnPos(6));
        assertEquals("7 key fix 4 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 4 R2 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12992140.java!!!	testLayout8KeyFix4M0() : void
        MoreKeysKeyboardParams params = createParams(8, 4, XPOS_M0);
        assertEquals("8 key fix 4 M0 columns", 4, params.mNumColumns);
        assertEquals("8 key fix 4 M0 rows", 2, params.mNumRows);
        assertEquals("8 key fix 4 M0 left", 1, params.mLeftKeys);
        assertEquals("8 key fix 4 M0 right", 3, params.mRightKeys);
        assertEquals("8 key fix 4 M0 [1]", -1, params.getColumnPos(0));
        assertEquals("8 key fix 4 M0 <2>", 0, params.getColumnPos(1));
        assertEquals("8 key fix 4 M0 [3]", 1, params.getColumnPos(2));
        assertEquals("8 key fix 4 M0 [4]", 2, params.getColumnPos(3));
        assertEquals("8 key fix 4 M0 [5]", -1, params.getColumnPos(4));
        assertEquals("8 key fix 4 M0 [6]", 0, params.getColumnPos(5));
        assertEquals("8 key fix 4 M0 [7]", 1, params.getColumnPos(6));
        assertEquals("8 key fix 4 M0 [8]", 2, params.getColumnPos(7));
        assertEquals("8 key fix 4 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 4 M0 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12992268.java!!!	testLayout8KeyFix4L0() : void
        MoreKeysKeyboardParams params = createParams(8, 4, XPOS_L0);
        assertEquals("8 key fix 4 L0 columns", 4, params.mNumColumns);
        assertEquals("8 key fix 4 L0 rows", 2, params.mNumRows);
        assertEquals("8 key fix 4 L0 left", 0, params.mLeftKeys);
        assertEquals("8 key fix 4 L0 right", 4, params.mRightKeys);
        assertEquals("8 key fix 4 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("8 key fix 4 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("8 key fix 4 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("8 key fix 4 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("8 key fix 4 L0 [5]", 0, params.getColumnPos(4));
        assertEquals("8 key fix 4 L0 [6]", 1, params.getColumnPos(5));
        assertEquals("8 key fix 4 L0 [7]", 2, params.getColumnPos(6));
        assertEquals("8 key fix 4 L0 [8]", 3, params.getColumnPos(7));
        assertEquals("8 key fix 4 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 4 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12992396.java!!!	testLayout8KeyFix4L1() : void
        MoreKeysKeyboardParams params = createParams(8, 4, XPOS_L1);
        assertEquals("8 key fix 4 L1 columns", 4, params.mNumColumns);
        assertEquals("8 key fix 4 L1 rows", 2, params.mNumRows);
        assertEquals("8 key fix 4 L1 left", 0, params.mLeftKeys);
        assertEquals("8 key fix 4 L1 right", 4, params.mRightKeys);
        assertEquals("8 key fix 4 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("8 key fix 4 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("8 key fix 4 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("8 key fix 4 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("8 key fix 4 L1 [5]", 0, params.getColumnPos(4));
        assertEquals("8 key fix 4 L1 [6]", 1, params.getColumnPos(5));
        assertEquals("8 key fix 4 L1 [7]", 2, params.getColumnPos(6));
        assertEquals("8 key fix 4 L1 [8]", 3, params.getColumnPos(7));
        assertEquals("8 key fix 4 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 4 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12992524.java!!!	testLayout8KeyFix4L2() : void
        MoreKeysKeyboardParams params = createParams(8, 4, XPOS_L2);
        assertEquals("8 key fix 4 L2 columns", 4, params.mNumColumns);
        assertEquals("8 key fix 4 L2 rows", 2, params.mNumRows);
        assertEquals("8 key fix 4 L2 left", 1, params.mLeftKeys);
        assertEquals("8 key fix 4 L2 right", 3, params.mRightKeys);
        assertEquals("8 key fix 4 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("8 key fix 4 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("8 key fix 4 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("8 key fix 4 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("8 key fix 4 L2 [5]", -1, params.getColumnPos(4));
        assertEquals("8 key fix 4 L2 [6]", 0, params.getColumnPos(5));
        assertEquals("8 key fix 4 L2 [7]", 1, params.getColumnPos(6));
        assertEquals("8 key fix 4 L2 [8]", 2, params.getColumnPos(7));
        assertEquals("8 key fix 4 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 4 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12992652.java!!!	testLayout8KeyFix4R0() : void
        MoreKeysKeyboardParams params = createParams(8, 4, XPOS_R0);
        assertEquals("8 key fix 4 R0 columns", 4, params.mNumColumns);
        assertEquals("8 key fix 4 R0 rows", 2, params.mNumRows);
        assertEquals("8 key fix 4 R0 left", 3, params.mLeftKeys);
        assertEquals("8 key fix 4 R0 right", 1, params.mRightKeys);
        assertEquals("8 key fix 4 R0 [1]", -3, params.getColumnPos(0));
        assertEquals("8 key fix 4 R0 [2]", -2, params.getColumnPos(1));
        assertEquals("8 key fix 4 R0 [3]", -1, params.getColumnPos(2));
        assertEquals("8 key fix 4 R0 <4>", 0, params.getColumnPos(3));
        assertEquals("8 key fix 4 R0 [5]", -3, params.getColumnPos(4));
        assertEquals("8 key fix 4 R0 [6]", -2, params.getColumnPos(5));
        assertEquals("8 key fix 4 R0 [7]", -1, params.getColumnPos(6));
        assertEquals("8 key fix 4 R0 [8]", 0, params.getColumnPos(7));
        assertEquals("8 key fix 4 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 4 R0 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12992780.java!!!	testLayout8KeyFix4R1() : void
        MoreKeysKeyboardParams params = createParams(8, 4, XPOS_R1);
        assertEquals("8 key fix 4 R1 columns", 4, params.mNumColumns);
        assertEquals("8 key fix 4 R1 rows", 2, params.mNumRows);
        assertEquals("8 key fix 4 R1 left", 3, params.mLeftKeys);
        assertEquals("8 key fix 4 R1 right", 1, params.mRightKeys);
        assertEquals("8 key fix 4 R1 [1]", -3, params.getColumnPos(0));
        assertEquals("8 key fix 4 R1 [2]", -2, params.getColumnPos(1));
        assertEquals("8 key fix 4 R1 [3]", -1, params.getColumnPos(2));
        assertEquals("8 key fix 4 R1 <4>", 0, params.getColumnPos(3));
        assertEquals("8 key fix 4 R1 [5]", -3, params.getColumnPos(4));
        assertEquals("8 key fix 4 R1 [6]", -2, params.getColumnPos(5));
        assertEquals("8 key fix 4 R1 [7]", -1, params.getColumnPos(6));
        assertEquals("8 key fix 4 R1 [8]", 0, params.getColumnPos(7));
        assertEquals("8 key fix 4 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 4 R1 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12992908.java!!!	testLayout8KeyFix4R2() : void
        MoreKeysKeyboardParams params = createParams(8, 4, XPOS_R2);
        assertEquals("8 key fix 4 R2 columns", 4, params.mNumColumns);
        assertEquals("8 key fix 4 R2 rows", 2, params.mNumRows);
        assertEquals("8 key fix 4 R2 left", 2, params.mLeftKeys);
        assertEquals("8 key fix 4 R2 right", 2, params.mRightKeys);
        assertEquals("8 key fix 4 R2 [1]", -2, params.getColumnPos(0));
        assertEquals("8 key fix 4 R2 [2]", -1, params.getColumnPos(1));
        assertEquals("8 key fix 4 R2 <3>", 0, params.getColumnPos(2));
        assertEquals("8 key fix 4 R2 [4]", 1, params.getColumnPos(3));
        assertEquals("8 key fix 4 R2 [5]", -2, params.getColumnPos(4));
        assertEquals("8 key fix 4 R2 [6]", -1, params.getColumnPos(5));
        assertEquals("8 key fix 4 R2 [7]", 0, params.getColumnPos(6));
        assertEquals("8 key fix 4 R2 [8]", 1, params.getColumnPos(7));
        assertEquals("8 key fix 4 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 4 R2 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12993036.java!!!	testLayout5KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_M0);
        assertEquals("5 key fix 5 columns", 5, params.mNumColumns);
        assertEquals("5 key fix 5 rows", 1, params.mNumRows);
        assertEquals("5 key fix 5 left", 2, params.mLeftKeys);
        assertEquals("5 key fix 5 right", 3, params.mRightKeys);
        assertEquals("5 key fix 5 [1]", -2, params.getColumnPos(0));
        assertEquals("5 key fix 5 [2]", -1, params.getColumnPos(1));
        assertEquals("5 key fix 5 <3>", 0, params.getColumnPos(2));
        assertEquals("5 key fix 5 [4]", 1, params.getColumnPos(3));
        assertEquals("5 key fix 5 [5]", 2, params.getColumnPos(4));
        assertEquals("5 key fix 5 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 5 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12993164.java!!!	testLayout5KeyFix5L0() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_L0);
        assertEquals("5 key fix 5 L0 columns", 5, params.mNumColumns);
        assertEquals("5 key fix 5 L0 rows", 1, params.mNumRows);
        assertEquals("5 key fix 5 L0 left", 0, params.mLeftKeys);
        assertEquals("5 key fix 5 L0 right", 5, params.mRightKeys);
        assertEquals("5 key fix 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key fix 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key fix 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key fix 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("5 key fix 5 L0 [5]", 4, params.getColumnPos(4));
        assertEquals("5 key fix 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12993292.java!!!	testLayout5KeyFix5L1() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_L1);
        assertEquals("5 key fix 5 L1 columns", 5, params.mNumColumns);
        assertEquals("5 key fix 5 L1 rows", 1, params.mNumRows);
        assertEquals("5 key fix 5 L1 left", 0, params.mLeftKeys);
        assertEquals("5 key fix 5 L1 right", 5, params.mRightKeys);
        assertEquals("5 key fix 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("5 key fix 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("5 key fix 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("5 key fix 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("5 key fix 5 L1 [5]", 4, params.getColumnPos(4));
        assertEquals("5 key fix 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12993420.java!!!	testLayout5KeyFix5L2() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_L2);
        assertEquals("5 key fix 5 L2 columns", 5, params.mNumColumns);
        assertEquals("5 key fix 5 L2 rows", 1, params.mNumRows);
        assertEquals("5 key fix 5 L2 left", 1, params.mLeftKeys);
        assertEquals("5 key fix 5 L2 right", 4, params.mRightKeys);
        assertEquals("5 key fix 5 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("5 key fix 5 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("5 key fix 5 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("5 key fix 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("5 key fix 5 L2 [5]", 3, params.getColumnPos(4));
        assertEquals("5 key fix 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12993548.java!!!	testLayout5KeyFix5R0() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_R0);
        assertEquals("5 key fix 5 R0 columns", 5, params.mNumColumns);
        assertEquals("5 key fix 5 R0 rows", 1, params.mNumRows);
        assertEquals("5 key fix 5 R0 left", 4, params.mLeftKeys);
        assertEquals("5 key fix 5 R0 right", 1, params.mRightKeys);
        assertEquals("5 key fix 5 R0 [1]", -4, params.getColumnPos(0));
        assertEquals("5 key fix 5 R0 [2]", -3, params.getColumnPos(1));
        assertEquals("5 key fix 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("5 key fix 5 R0 [4]", -1, params.getColumnPos(3));
        assertEquals("5 key fix 5 R0 <5>", 0, params.getColumnPos(4));
        assertEquals("5 key fix 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 5 R0 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12993676.java!!!	testLayout5KeyFix5R1() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_R1);
        assertEquals("5 key fix 5 R1 columns", 5, params.mNumColumns);
        assertEquals("5 key fix 5 R1 rows", 1, params.mNumRows);
        assertEquals("5 key fix 5 R1 left", 4, params.mLeftKeys);
        assertEquals("5 key fix 5 R1 right", 1, params.mRightKeys);
        assertEquals("5 key fix 5 R1 [1]", -4, params.getColumnPos(0));
        assertEquals("5 key fix 5 R1 [2]", -3, params.getColumnPos(1));
        assertEquals("5 key fix 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("5 key fix 5 R1 [4]", -1, params.getColumnPos(3));
        assertEquals("5 key fix 5 R1 <5>", 0, params.getColumnPos(4));
        assertEquals("5 key fix 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 5 R1 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12993804.java!!!	testLayout5KeyFix5R2() : void
        MoreKeysKeyboardParams params = createParams(5, 5, XPOS_R2);
        assertEquals("5 key fix 5 R2 columns", 5, params.mNumColumns);
        assertEquals("5 key fix 5 R2 rows", 1, params.mNumRows);
        assertEquals("5 key fix 5 R2 left", 3, params.mLeftKeys);
        assertEquals("5 key fix 5 R2 right", 2, params.mRightKeys);
        assertEquals("5 key fix 5 R2 [1]", -3, params.getColumnPos(0));
        assertEquals("5 key fix 5 R2 [2]", -2, params.getColumnPos(1));
        assertEquals("5 key fix 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("5 key fix 5 R2 <4>", 0, params.getColumnPos(3));
        assertEquals("5 key fix 5 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("5 key fix 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("5 key fix 5 R2 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12993932.java!!!	testLayout6KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_M0);
        assertEquals("6 key fix 5 columns", 5, params.mNumColumns);
        assertEquals("6 key fix 5 rows", 2, params.mNumRows);
        assertEquals("6 key fix 5 left", 2, params.mLeftKeys);
        assertEquals("6 key fix 5 right", 3, params.mRightKeys);
        assertEquals("6 key fix 5 [1]", -2, params.getColumnPos(0));
        assertEquals("6 key fix 5 [2]", -1, params.getColumnPos(1));
        assertEquals("6 key fix 5 <3>", 0, params.getColumnPos(2));
        assertEquals("6 key fix 5 [4]", 1, params.getColumnPos(3));
        assertEquals("6 key fix 5 [5]", 2, params.getColumnPos(4));
        assertEquals("6 key fix 5 [6]", 0, params.getColumnPos(5));
        assertEquals("6 key fix 5 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 5 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12994060.java!!!	testLayout6KeyFix5L0() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_L0);
        assertEquals("6 key fix 5 L0 columns", 5, params.mNumColumns);
        assertEquals("6 key fix 5 L0 rows", 2, params.mNumRows);
        assertEquals("6 key fix 5 L0 left", 0, params.mLeftKeys);
        assertEquals("6 key fix 5 L0 right", 5, params.mRightKeys);
        assertEquals("6 key fix 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key fix 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key fix 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("6 key fix 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("6 key fix 5 L0 [5]", 4, params.getColumnPos(4));
        assertEquals("6 key fix 5 L0 [6]", 0, params.getColumnPos(5));
        assertEquals("6 key fix 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12994188.java!!!	testLayout6KeyFix5L1() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_L1);
        assertEquals("6 key fix 5 L1 columns", 5, params.mNumColumns);
        assertEquals("6 key fix 5 L1 rows", 2, params.mNumRows);
        assertEquals("6 key fix 5 L1 left", 0, params.mLeftKeys);
        assertEquals("6 key fix 5 L1 right", 5, params.mRightKeys);
        assertEquals("6 key fix 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("6 key fix 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("6 key fix 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("6 key fix 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("6 key fix 5 L1 [5]", 4, params.getColumnPos(4));
        assertEquals("6 key fix 5 L1 [6]", 0, params.getColumnPos(5));
        assertEquals("6 key fix 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12994316.java!!!	testLayout6KeyFix5L2() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_L2);
        assertEquals("6 key fix 5 L2 columns", 5, params.mNumColumns);
        assertEquals("6 key fix 5 L2 rows", 2, params.mNumRows);
        assertEquals("6 key fix 5 L2 left", 1, params.mLeftKeys);
        assertEquals("6 key fix 5 L2 right", 4, params.mRightKeys);
        assertEquals("6 key fix 5 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("6 key fix 5 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("6 key fix 5 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("6 key fix 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("6 key fix 5 L2 [5]", 3, params.getColumnPos(4));
        assertEquals("6 key fix 5 L2 [6]", 0, params.getColumnPos(5));
        assertEquals("6 key fix 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12994444.java!!!	testLayout6KeyFix5R0() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_R0);
        assertEquals("6 key fix 5 R0 columns", 5, params.mNumColumns);
        assertEquals("6 key fix 5 R0 rows", 2, params.mNumRows);
        assertEquals("6 key fix 5 R0 left", 4, params.mLeftKeys);
        assertEquals("6 key fix 5 R0 right", 1, params.mRightKeys);
        assertEquals("6 key fix 5 R0 [1]", -4, params.getColumnPos(0));
        assertEquals("6 key fix 5 R0 [2]", -3, params.getColumnPos(1));
        assertEquals("6 key fix 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("6 key fix 5 R0 [4]", -1, params.getColumnPos(3));
        assertEquals("6 key fix 5 R0 <5>", 0, params.getColumnPos(4));
        assertEquals("6 key fix 5 R0 [6]", 0, params.getColumnPos(5));
        assertEquals("6 key fix 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 5 R0 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12994572.java!!!	testLayout6KeyFix5R1() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_R1);
        assertEquals("6 key fix 5 R1 columns", 5, params.mNumColumns);
        assertEquals("6 key fix 5 R1 rows", 2, params.mNumRows);
        assertEquals("6 key fix 5 R1 left", 4, params.mLeftKeys);
        assertEquals("6 key fix 5 R1 right", 1, params.mRightKeys);
        assertEquals("6 key fix 5 R1 [1]", -4, params.getColumnPos(0));
        assertEquals("6 key fix 5 R1 [2]", -3, params.getColumnPos(1));
        assertEquals("6 key fix 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("6 key fix 5 R1 [4]", -1, params.getColumnPos(3));
        assertEquals("6 key fix 5 R1 <5>", 0, params.getColumnPos(4));
        assertEquals("6 key fix 5 R1 [6]", 0, params.getColumnPos(5));
        assertEquals("6 key fix 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 5 R1 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12994700.java!!!	testLayout6KeyFix5R2() : void
        MoreKeysKeyboardParams params = createParams(6, 5, XPOS_R2);
        assertEquals("6 key fix 5 R2 columns", 5, params.mNumColumns);
        assertEquals("6 key fix 5 R2 rows", 2, params.mNumRows);
        assertEquals("6 key fix 5 R2 left", 3, params.mLeftKeys);
        assertEquals("6 key fix 5 R2 right", 2, params.mRightKeys);
        assertEquals("6 key fix 5 R2 [1]", -3, params.getColumnPos(0));
        assertEquals("6 key fix 5 R2 [2]", -2, params.getColumnPos(1));
        assertEquals("6 key fix 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("6 key fix 5 R2 <4>", 0, params.getColumnPos(3));
        assertEquals("6 key fix 5 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("6 key fix 5 R2 [6]", 0, params.getColumnPos(5));
        assertEquals("6 key fix 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("6 key fix 5 R2 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12994828.java!!!	testLayout7KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_M0);
        assertEquals("7 key fix 5 columns", 5, params.mNumColumns);
        assertEquals("7 key fix 5 rows", 2, params.mNumRows);
        assertEquals("7 key fix 5 left", 2, params.mLeftKeys);
        assertEquals("7 key fix 5 right", 3, params.mRightKeys);
        assertEquals("7 key fix 5 [1]", -2, params.getColumnPos(0));
        assertEquals("7 key fix 5 [2]", -1, params.getColumnPos(1));
        assertEquals("7 key fix 5 <3>", 0, params.getColumnPos(2));
        assertEquals("7 key fix 5 [4]", 1, params.getColumnPos(3));
        assertEquals("7 key fix 5 [5]", 2, params.getColumnPos(4));
        assertEquals("7 key fix 5 [6]", 0, params.getColumnPos(5));
        assertEquals("7 key fix 5 [7]", 1, params.getColumnPos(6));
        assertEquals("7 key fix 5 adjust", -1, params.mTopRowAdjustment);
        assertEquals("7 key fix 5 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12994956.java!!!	testLayout7KeyFix5L0() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_L0);
        assertEquals("7 key fix 5 L0 columns", 5, params.mNumColumns);
        assertEquals("7 key fix 5 L0 rows", 2, params.mNumRows);
        assertEquals("7 key fix 5 L0 left", 0, params.mLeftKeys);
        assertEquals("7 key fix 5 L0 right", 5, params.mRightKeys);
        assertEquals("7 key fix 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key fix 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key fix 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key fix 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("7 key fix 5 L0 [5]", 4, params.getColumnPos(4));
        assertEquals("7 key fix 5 L0 [6]", 0, params.getColumnPos(5));
        assertEquals("7 key fix 5 L0 [7]", 1, params.getColumnPos(6));
        assertEquals("7 key fix 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12995084.java!!!	testLayout7KeyFix5L1() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_L1);
        assertEquals("7 key fix 5 L1 columns", 5, params.mNumColumns);
        assertEquals("7 key fix 5 L1 rows", 2, params.mNumRows);
        assertEquals("7 key fix 5 L1 left", 0, params.mLeftKeys);
        assertEquals("7 key fix 5 L1 right", 5, params.mRightKeys);
        assertEquals("7 key fix 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key fix 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key fix 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key fix 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("7 key fix 5 L1 [5]", 4, params.getColumnPos(4));
        assertEquals("7 key fix 5 L1 [6]", 0, params.getColumnPos(5));
        assertEquals("7 key fix 5 L1 [7]", 1, params.getColumnPos(6));
        assertEquals("7 key fix 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12995212.java!!!	testLayout7KeyFix5L2() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_L2);
        assertEquals("7 key fix 5 L2 columns", 5, params.mNumColumns);
        assertEquals("7 key fix 5 L2 rows", 2, params.mNumRows);
        assertEquals("7 key fix 5 L2 left", 1, params.mLeftKeys);
        assertEquals("7 key fix 5 L2 right", 4, params.mRightKeys);
        assertEquals("7 key fix 5 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("7 key fix 5 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("7 key fix 5 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("7 key fix 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("7 key fix 5 L2 [5]", 3, params.getColumnPos(4));
        assertEquals("7 key fix 5 L2 [6]", 0, params.getColumnPos(5));
        assertEquals("7 key fix 5 L2 [7]", 1, params.getColumnPos(6));
        assertEquals("7 key fix 5 L2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("7 key fix 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12995340.java!!!	testLayout7KeyFix5R0() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_R0);
        assertEquals("7 key fix 5 R0 columns", 5, params.mNumColumns);
        assertEquals("7 key fix 5 R0 rows", 2, params.mNumRows);
        assertEquals("7 key fix 5 R0 left", 4, params.mLeftKeys);
        assertEquals("7 key fix 5 R0 right", 1, params.mRightKeys);
        assertEquals("7 key fix 5 R0 [1]", -4, params.getColumnPos(0));
        assertEquals("7 key fix 5 R0 [2]", -3, params.getColumnPos(1));
        assertEquals("7 key fix 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("7 key fix 5 R0 [4]", -1, params.getColumnPos(3));
        assertEquals("7 key fix 5 R0 <5>", 0, params.getColumnPos(4));
        assertEquals("7 key fix 5 R0 [6]", -1, params.getColumnPos(5));
        assertEquals("7 key fix 5 R0 [7]", 0, params.getColumnPos(6));
        assertEquals("7 key fix 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 5 R0 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12995468.java!!!	testLayout7KeyFix5R1() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_R1);
        assertEquals("7 key fix 5 R1 columns", 5, params.mNumColumns);
        assertEquals("7 key fix 5 R1 rows", 2, params.mNumRows);
        assertEquals("7 key fix 5 R1 left", 4, params.mLeftKeys);
        assertEquals("7 key fix 5 R1 right", 1, params.mRightKeys);
        assertEquals("7 key fix 5 R1 [1]", -4, params.getColumnPos(0));
        assertEquals("7 key fix 5 R1 [2]", -3, params.getColumnPos(1));
        assertEquals("7 key fix 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("7 key fix 5 R1 [4]", -1, params.getColumnPos(3));
        assertEquals("7 key fix 5 R1 <5>", 0, params.getColumnPos(4));
        assertEquals("7 key fix 5 R1 [6]", -1, params.getColumnPos(5));
        assertEquals("7 key fix 5 R1 [7]", 0, params.getColumnPos(6));
        assertEquals("7 key fix 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 5 R1 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12995596.java!!!	testLayout7KeyFix5R2() : void
        MoreKeysKeyboardParams params = createParams(7, 5, XPOS_R2);
        assertEquals("7 key fix 5 R2 columns",5, params.mNumColumns);
        assertEquals("7 key fix 5 R2 rows", 2, params.mNumRows);
        assertEquals("7 key fix 5 R2 left", 3, params.mLeftKeys);
        assertEquals("7 key fix 5 R2 right", 2, params.mRightKeys);
        assertEquals("7 key fix 5 R2 [1]", -3, params.getColumnPos(0));
        assertEquals("7 key fix 5 R2 [2]", -2, params.getColumnPos(1));
        assertEquals("7 key fix 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key fix 5 R2 <4>", 0, params.getColumnPos(3));
        assertEquals("7 key fix 5 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("7 key fix 5 R2 [6]", 0, params.getColumnPos(5));
        assertEquals("7 key fix 5 R2 [7]", 1, params.getColumnPos(6));
        assertEquals("7 key fix 5 R2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("7 key fix 5 R2 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12995724.java!!!	testLayout8KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_M0);
        assertEquals("8 key fix 5 M0 columns", 5, params.mNumColumns);
        assertEquals("8 key fix 5 M0 rows", 2, params.mNumRows);
        assertEquals("8 key fix 5 M0 left", 2, params.mLeftKeys);
        assertEquals("8 key fix 5 M0 right", 3, params.mRightKeys);
        assertEquals("8 key fix 5 M0 [1]", -2, params.getColumnPos(0));
        assertEquals("8 key fix 5 M0 [2]", -1, params.getColumnPos(1));
        assertEquals("8 key fix 5 M0 <3>", 0, params.getColumnPos(2));
        assertEquals("8 key fix 5 M0 [4]", 1, params.getColumnPos(3));
        assertEquals("8 key fix 5 M0 [5]", 2, params.getColumnPos(4));
        assertEquals("8 key fix 5 M0 [6]", -1, params.getColumnPos(5));
        assertEquals("8 key fix 5 M0 [7]", 0, params.getColumnPos(6));
        assertEquals("8 key fix 5 M0 [8]", 1, params.getColumnPos(7));
        assertEquals("8 key fix 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12995852.java!!!	testLayout8KeyFix5L0() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_L0);
        assertEquals("8 key fix 5 L0 columns", 5, params.mNumColumns);
        assertEquals("8 key fix 5 L0 rows", 2, params.mNumRows);
        assertEquals("8 key fix 5 L0 left", 0, params.mLeftKeys);
        assertEquals("8 key fix 5 L0 right", 5, params.mRightKeys);
        assertEquals("8 key fix 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("8 key fix 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("8 key fix 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("8 key fix 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("8 key fix 5 L0 [5]", 4, params.getColumnPos(4));
        assertEquals("8 key fix 5 L0 [6]", 0, params.getColumnPos(5));
        assertEquals("8 key fix 5 L0 [7]", 1, params.getColumnPos(6));
        assertEquals("8 key fix 5 L0 [8]", 2, params.getColumnPos(7));
        assertEquals("8 key fix 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12995980.java!!!	testLayout8KeyFix5L1() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_L1);
        assertEquals("8 key fix 5 L1 columns", 5, params.mNumColumns);
        assertEquals("8 key fix 5 L1 rows", 2, params.mNumRows);
        assertEquals("8 key fix 5 L1 left", 0, params.mLeftKeys);
        assertEquals("8 key fix 5 L1 right", 5, params.mRightKeys);
        assertEquals("8 key fix 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("8 key fix 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("8 key fix 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("8 key fix 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("8 key fix 5 L1 [5]", 4, params.getColumnPos(4));
        assertEquals("8 key fix 5 L1 [6]", 0, params.getColumnPos(5));
        assertEquals("8 key fix 5 L1 [7]", 1, params.getColumnPos(6));
        assertEquals("8 key fix 5 L1 [8]", 2, params.getColumnPos(7));
        assertEquals("8 key fix 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12996108.java!!!	testLayout8KeyFix5L2() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_L2);
        assertEquals("8 key fix 5 L2 columns", 5, params.mNumColumns);
        assertEquals("8 key fix 5 L2 rows", 2, params.mNumRows);
        assertEquals("8 key fix 5 L2 left", 1, params.mLeftKeys);
        assertEquals("8 key fix 5 L2 right", 4, params.mRightKeys);
        assertEquals("8 key fix 5 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("8 key fix 5 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("8 key fix 5 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("8 key fix 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("8 key fix 5 L2 [5]", 3, params.getColumnPos(4));
        assertEquals("8 key fix 5 L2 [6]", -1, params.getColumnPos(5));
        assertEquals("8 key fix 5 L2 [7]", 0, params.getColumnPos(6));
        assertEquals("8 key fix 5 L2 [8]", 1, params.getColumnPos(7));
        assertEquals("8 key fix 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12996236.java!!!	testLayout8KeyFix5R0() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_R0);
        assertEquals("8 key fix 5 R0 columns", 5, params.mNumColumns);
        assertEquals("8 key fix 5 R0 rows", 2, params.mNumRows);
        assertEquals("8 key fix 5 R0 left", 4, params.mLeftKeys);
        assertEquals("8 key fix 5 R0 right", 1, params.mRightKeys);
        assertEquals("8 key fix 5 R0 [1]", -4, params.getColumnPos(0));
        assertEquals("8 key fix 5 R0 [2]", -3, params.getColumnPos(1));
        assertEquals("8 key fix 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("8 key fix 5 R0 [4]", -1, params.getColumnPos(3));
        assertEquals("8 key fix 5 R0 <5>", 0, params.getColumnPos(4));
        assertEquals("8 key fix 5 R0 [6]", -2, params.getColumnPos(5));
        assertEquals("8 key fix 5 R0 [7]", -1, params.getColumnPos(6));
        assertEquals("8 key fix 5 R0 [8]", 0, params.getColumnPos(7));
        assertEquals("8 key fix 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 5 R0 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12996364.java!!!	testLayout8KeyFix5R1() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_R1);
        assertEquals("8 key fix 5 R1 columns", 5, params.mNumColumns);
        assertEquals("8 key fix 5 R1 rows", 2, params.mNumRows);
        assertEquals("8 key fix 5 R1 left", 4, params.mLeftKeys);
        assertEquals("8 key fix 5 R1 right", 1, params.mRightKeys);
        assertEquals("8 key fix 5 R1 [1]", -4, params.getColumnPos(0));
        assertEquals("8 key fix 5 R1 [2]", -3, params.getColumnPos(1));
        assertEquals("8 key fix 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("8 key fix 5 R1 [4]", -1, params.getColumnPos(3));
        assertEquals("8 key fix 5 R1 <5>", 0, params.getColumnPos(4));
        assertEquals("8 key fix 5 R1 [6]", -2, params.getColumnPos(5));
        assertEquals("8 key fix 5 R1 [7]", -1, params.getColumnPos(6));
        assertEquals("8 key fix 5 R1 [8]", 0, params.getColumnPos(7));
        assertEquals("8 key fix 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 5 R1 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12996492.java!!!	testLayout8KeyFix5R2() : void
        MoreKeysKeyboardParams params = createParams(8, 5, XPOS_R2);
        assertEquals("8 key fix 5 R2 columns", 5, params.mNumColumns);
        assertEquals("8 key fix 5 R2 rows", 2, params.mNumRows);
        assertEquals("8 key fix 5 R2 left", 3, params.mLeftKeys);
        assertEquals("8 key fix 5 R2 right", 2, params.mRightKeys);
        assertEquals("8 key fix 5 R2 [1]", -3, params.getColumnPos(0));
        assertEquals("8 key fix 5 R2 [2]", -2, params.getColumnPos(1));
        assertEquals("8 key fix 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("8 key fix 5 R2 <4>", 0, params.getColumnPos(3));
        assertEquals("8 key fix 5 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("8 key fix 5 R2 [6]", -1, params.getColumnPos(5));
        assertEquals("8 key fix 5 R2 [7]", 0, params.getColumnPos(6));
        assertEquals("8 key fix 5 R2 [8]", 1, params.getColumnPos(7));
        assertEquals("8 key fix 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("8 key fix 5 R2 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12996620.java!!!	testLayout9KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_M0);
        assertEquals("9 key fix 5 M0 columns", 5, params.mNumColumns);
        assertEquals("9 key fix 5 M0 rows", 2, params.mNumRows);
        assertEquals("9 key fix 5 M0 left", 2, params.mLeftKeys);
        assertEquals("9 key fix 5 M0 right", 3, params.mRightKeys);
        assertEquals("9 key fix 5 M0 [1]", -2, params.getColumnPos(0));
        assertEquals("9 key fix 5 M0 [2]", -1, params.getColumnPos(1));
        assertEquals("9 key fix 5 M0 <3>", 0, params.getColumnPos(2));
        assertEquals("9 key fix 5 M0 [4]", 1, params.getColumnPos(3));
        assertEquals("9 key fix 5 M0 [5]", 2, params.getColumnPos(4));
        assertEquals("9 key fix 5 M0 [6]", -1, params.getColumnPos(5));
        assertEquals("9 key fix 5 M0 [7]", 0, params.getColumnPos(6));
        assertEquals("9 key fix 5 M0 [8]", 1, params.getColumnPos(7));
        assertEquals("9 key fix 5 M0 [9]", 2, params.getColumnPos(8));
        assertEquals("9 key fix 5 M0 adjust", -1, params.mTopRowAdjustment);
        assertEquals("9 key fix 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12996748.java!!!	testLayout9KeyFix5L0() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_L0);
        assertEquals("9 key fix 5 L0 columns", 5, params.mNumColumns);
        assertEquals("9 key fix 5 L0 rows", 2, params.mNumRows);
        assertEquals("9 key fix 5 L0 left", 0, params.mLeftKeys);
        assertEquals("9 key fix 5 L0 right", 5, params.mRightKeys);
        assertEquals("9 key fix 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("9 key fix 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("9 key fix 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("9 key fix 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("9 key fix 5 L0 [5]", 4, params.getColumnPos(4));
        assertEquals("9 key fix 5 L0 [6]", 0, params.getColumnPos(5));
        assertEquals("9 key fix 5 L0 [7]", 1, params.getColumnPos(6));
        assertEquals("9 key fix 5 L0 [8]", 2, params.getColumnPos(7));
        assertEquals("9 key fix 5 L0 [9]", 3, params.getColumnPos(8));
        assertEquals("9 key fix 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("9 key fix 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12996876.java!!!	testLayout9KeyFix5L1() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_L1);
        assertEquals("9 key fix 5 L1 columns", 5, params.mNumColumns);
        assertEquals("9 key fix 5 L1 rows", 2, params.mNumRows);
        assertEquals("9 key fix 5 L1 left", 0, params.mLeftKeys);
        assertEquals("9 key fix 5 L1 right", 5, params.mRightKeys);
        assertEquals("9 key fix 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("9 key fix 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("9 key fix 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("9 key fix 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("9 key fix 5 L1 [5]", 4, params.getColumnPos(4));
        assertEquals("9 key fix 5 L1 [6]", 0, params.getColumnPos(5));
        assertEquals("9 key fix 5 L1 [7]", 1, params.getColumnPos(6));
        assertEquals("9 key fix 5 L1 [8]", 2, params.getColumnPos(7));
        assertEquals("9 key fix 5 L1 [9]", 3, params.getColumnPos(8));
        assertEquals("9 key fix 5 L1 adjust",0, params.mTopRowAdjustment);
        assertEquals("9 key fix 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12997004.java!!!	testLayout9KeyFix5L2() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_L2);
        assertEquals("9 key fix 5 L2 columns", 5, params.mNumColumns);
        assertEquals("9 key fix 5 L2 rows", 2, params.mNumRows);
        assertEquals("9 key fix 5 L2 left", 1, params.mLeftKeys);
        assertEquals("9 key fix 5 L2 right", 4, params.mRightKeys);
        assertEquals("9 key fix 5 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("9 key fix 5 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("9 key fix 5 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("9 key fix 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("9 key fix 5 L2 [5]", 3, params.getColumnPos(4));
        assertEquals("9 key fix 5 L2 [6]", 0, params.getColumnPos(5));
        assertEquals("9 key fix 5 L2 [7]", 1, params.getColumnPos(6));
        assertEquals("9 key fix 5 L2 [8]", 2, params.getColumnPos(7));
        assertEquals("9 key fix 5 L2 [9]", 3, params.getColumnPos(8));
        assertEquals("9 key fix 5 L2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("9 key fix 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12997132.java!!!	testLayout9KeyFix5R0() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_R0);
        assertEquals("9 key fix 5 R0 columns", 5, params.mNumColumns);
        assertEquals("9 key fix 5 R0 rows", 2, params.mNumRows);
        assertEquals("9 key fix 5 R0 left", 4, params.mLeftKeys);
        assertEquals("9 key fix 5 R0 right", 1, params.mRightKeys);
        assertEquals("9 key fix 5 R0 [1]", -4, params.getColumnPos(0));
        assertEquals("9 key fix 5 R0 [2]", -3, params.getColumnPos(1));
        assertEquals("9 key fix 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("9 key fix 5 R0 [4]", -1, params.getColumnPos(3));
        assertEquals("9 key fix 5 R0 <5>", 0, params.getColumnPos(4));
        assertEquals("9 key fix 5 R0 [6]", -3, params.getColumnPos(5));
        assertEquals("9 key fix 5 R0 [7]", -2, params.getColumnPos(6));
        assertEquals("9 key fix 5 R0 [8]", -1, params.getColumnPos(7));
        assertEquals("9 key fix 5 R0 [9]", 0, params.getColumnPos(8));
        assertEquals("9 key fix 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("9 key fix 5 R0 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12997260.java!!!	testLayout9KeyFix5R1() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_R1);
        assertEquals("9 key fix 5 R1 columns", 5, params.mNumColumns);
        assertEquals("9 key fix 5 R1 rows", 2, params.mNumRows);
        assertEquals("9 key fix 5 R1 left", 4, params.mLeftKeys);
        assertEquals("9 key fix 5 R1 right", 1, params.mRightKeys);
        assertEquals("9 key fix 5 R1 [1]", -4, params.getColumnPos(0));
        assertEquals("9 key fix 5 R1 [2]", -3, params.getColumnPos(1));
        assertEquals("9 key fix 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("9 key fix 5 R1 [4]", -1, params.getColumnPos(3));
        assertEquals("9 key fix 5 R1 <5>", 0, params.getColumnPos(4));
        assertEquals("9 key fix 5 R1 [6]", -3, params.getColumnPos(5));
        assertEquals("9 key fix 5 R1 [7]", -2, params.getColumnPos(6));
        assertEquals("9 key fix 5 R1 [8]", -1, params.getColumnPos(7));
        assertEquals("9 key fix 5 R1 [9]", 0, params.getColumnPos(8));
        assertEquals("9 key fix 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("9 key fix 5 R1 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12997388.java!!!	testLayout9KeyFix5R2() : void
        MoreKeysKeyboardParams params = createParams(9, 5, XPOS_R2);
        assertEquals("9 key fix 5 R2 columns", 5, params.mNumColumns);
        assertEquals("9 key fix 5 R2 rows", 2, params.mNumRows);
        assertEquals("9 key fix 5 R2 left", 3, params.mLeftKeys);
        assertEquals("9 key fix 5 R2 right", 2, params.mRightKeys);
        assertEquals("9 key fix 5 R2 [1]", -3, params.getColumnPos(0));
        assertEquals("9 key fix 5 R2 [2]", -2, params.getColumnPos(1));
        assertEquals("9 key fix 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("9 key fix 5 R2 <4>", 0, params.getColumnPos(3));
        assertEquals("9 key fix 5 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("9 key fix 5 R2 [6]", -2, params.getColumnPos(5));
        assertEquals("9 key fix 5 R2 [7]", -1, params.getColumnPos(6));
        assertEquals("9 key fix 5 R2 [8]", 0, params.getColumnPos(7));
        assertEquals("9 key fix 5 R2 [9]", 1, params.getColumnPos(8));
        assertEquals("9 key fix 5 R2 adjust", -1, params.mTopRowAdjustment);
        assertEquals("9 key fix 5 R2 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12997516.java!!!	testLayout10KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_M0);
        assertEquals("10 key fix 5 M0 columns", 5, params.mNumColumns);
        assertEquals("10 key fix 5 M0 rows", 2, params.mNumRows);
        assertEquals("10 key fix 5 M0 left", 2, params.mLeftKeys);
        assertEquals("10 key fix 5 M0 right", 3, params.mRightKeys);
        assertEquals("10 key fix 5 M0 [1]", -2, params.getColumnPos(0));
        assertEquals("10 key fix 5 M0 [2]", -1, params.getColumnPos(1));
        assertEquals("10 key fix 5 M0 <3>", 0, params.getColumnPos(2));
        assertEquals("10 key fix 5 M0 [4]", 1, params.getColumnPos(3));
        assertEquals("10 key fix 5 M0 [5]", 2, params.getColumnPos(4));
        assertEquals("10 key fix 5 M0 [6]", -2, params.getColumnPos(5));
        assertEquals("10 key fix 5 M0 [7]", -1, params.getColumnPos(6));
        assertEquals("10 key fix 5 M0 [8]", 0, params.getColumnPos(7));
        assertEquals("10 key fix 5 M0 [9]", 1, params.getColumnPos(8));
        assertEquals("10 key fix 5 M0 [A]", 2, params.getColumnPos(9));
        assertEquals("10 key fix 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key fix 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12997644.java!!!	testLayout10KeyFix5L0() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_L0);
        assertEquals("10 key fix 5 L0 columns", 5, params.mNumColumns);
        assertEquals("10 key fix 5 L0 rows", 2, params.mNumRows);
        assertEquals("10 key fix 5 L0 left", 0, params.mLeftKeys);
        assertEquals("10 key fix 5 L0 right", 5, params.mRightKeys);
        assertEquals("10 key fix 5 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("10 key fix 5 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("10 key fix 5 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("10 key fix 5 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("10 key fix 5 L0 [5]", 4, params.getColumnPos(4));
        assertEquals("10 key fix 5 L0 [6]", 0, params.getColumnPos(5));
        assertEquals("10 key fix 5 L0 [7]", 1, params.getColumnPos(6));
        assertEquals("10 key fix 5 L0 [8]", 2, params.getColumnPos(7));
        assertEquals("10 key fix 5 L0 [9]", 3, params.getColumnPos(8));
        assertEquals("10 key fix 5 L0 [A]", 4, params.getColumnPos(9));
        assertEquals("10 key fix 5 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key fix 5 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12997772.java!!!	testLayout10KeyFix5L1() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_L1);
        assertEquals("10 key fix 5 L1 columns", 5, params.mNumColumns);
        assertEquals("10 key fix 5 L1 rows", 2, params.mNumRows);
        assertEquals("10 key fix 5 L1 left", 0, params.mLeftKeys);
        assertEquals("10 key fix 5 L1 right", 5, params.mRightKeys);
        assertEquals("10 key fix 5 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("10 key fix 5 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("10 key fix 5 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("10 key fix 5 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("10 key fix 5 L1 [5]", 4, params.getColumnPos(4));
        assertEquals("10 key fix 5 L1 [6]", 0, params.getColumnPos(5));
        assertEquals("10 key fix 5 L1 [7]", 1, params.getColumnPos(6));
        assertEquals("10 key fix 5 L1 [8]", 2, params.getColumnPos(7));
        assertEquals("10 key fix 5 L1 [9]", 3, params.getColumnPos(8));
        assertEquals("10 key fix 5 L1 [A]", 4, params.getColumnPos(9));
        assertEquals("10 key fix 5 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key fix 5 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12997900.java!!!	testLayout10KeyFix5L2() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_L2);
        assertEquals("10 key fix 5 L2 columns", 5, params.mNumColumns);
        assertEquals("10 key fix 5 L2 rows", 2, params.mNumRows);
        assertEquals("10 key fix 5 L2 left", 1, params.mLeftKeys);
        assertEquals("10 key fix 5 L2 right", 4, params.mRightKeys);
        assertEquals("10 key fix 5 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("10 key fix 5 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("10 key fix 5 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("10 key fix 5 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("10 key fix 5 L2 [5]", 3, params.getColumnPos(4));
        assertEquals("10 key fix 5 L2 [6]", -1, params.getColumnPos(5));
        assertEquals("10 key fix 5 L2 [7]", 0, params.getColumnPos(6));
        assertEquals("10 key fix 5 L2 [8]", 1, params.getColumnPos(7));
        assertEquals("10 key fix 5 L2 [9]", 2, params.getColumnPos(8));
        assertEquals("10 key fix 5 L2 [A]", 3, params.getColumnPos(9));
        assertEquals("10 key fix 5 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key fix 5 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12998028.java!!!	testLayout10KeyFix5R0() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_R0);
        assertEquals("10 key fix 5 R0 columns", 5, params.mNumColumns);
        assertEquals("10 key fix 5 R0 rows", 2, params.mNumRows);
        assertEquals("10 key fix 5 R0 left", 4, params.mLeftKeys);
        assertEquals("10 key fix 5 R0 right", 1, params.mRightKeys);
        assertEquals("10 key fix 5 R0 [1]", -4, params.getColumnPos(0));
        assertEquals("10 key fix 5 R0 [2]", -3, params.getColumnPos(1));
        assertEquals("10 key fix 5 R0 [3]", -2, params.getColumnPos(2));
        assertEquals("10 key fix 5 R0 [4]", -1, params.getColumnPos(3));
        assertEquals("10 key fix 5 R0 <5>", 0, params.getColumnPos(4));
        assertEquals("10 key fix 5 R0 [6]", -4, params.getColumnPos(5));
        assertEquals("10 key fix 5 R0 [7]", -3, params.getColumnPos(6));
        assertEquals("10 key fix 5 R0 [8]", -2, params.getColumnPos(7));
        assertEquals("10 key fix 5 R0 [9]", -1, params.getColumnPos(8));
        assertEquals("10 key fix 5 R0 [A]", 0, params.getColumnPos(9));
        assertEquals("10 key fix 5 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key fix 5 R0 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12998156.java!!!	testLayout10KeyFix5R1() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_R1);
        assertEquals("10 key fix 5 R1 columns", 5, params.mNumColumns);
        assertEquals("10 key fix 5 R1 rows", 2, params.mNumRows);
        assertEquals("10 key fix 5 R1 left", 4, params.mLeftKeys);
        assertEquals("10 key fix 5 R1 right", 1, params.mRightKeys);
        assertEquals("10 key fix 5 R1 [1]", -4, params.getColumnPos(0));
        assertEquals("10 key fix 5 R1 [2]", -3, params.getColumnPos(1));
        assertEquals("10 key fix 5 R1 [3]", -2, params.getColumnPos(2));
        assertEquals("10 key fix 5 R1 [4]", -1, params.getColumnPos(3));
        assertEquals("10 key fix 5 R1 <5>", 0, params.getColumnPos(4));
        assertEquals("10 key fix 5 R1 [6]", -4, params.getColumnPos(5));
        assertEquals("10 key fix 5 R1 [7]", -3, params.getColumnPos(6));
        assertEquals("10 key fix 5 R1 [8]", -2, params.getColumnPos(7));
        assertEquals("10 key fix 5 R1 [9]", -1, params.getColumnPos(8));
        assertEquals("10 key fix 5 R1 [A]", 0, params.getColumnPos(9));
        assertEquals("10 key fix 5 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key fix 5 R1 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12998284.java!!!	testLayout10KeyFix5R2() : void
        MoreKeysKeyboardParams params = createParams(10, 5, XPOS_R2);
        assertEquals("10 key fix 5 R2 columns", 5, params.mNumColumns);
        assertEquals("10 key fix 5 R2 rows", 2, params.mNumRows);
        assertEquals("10 key fix 5 R2 left", 3, params.mLeftKeys);
        assertEquals("10 key fix 5 R2 right", 2, params.mRightKeys);
        assertEquals("10 key fix 5 R2 [1]", -3, params.getColumnPos(0));
        assertEquals("10 key fix 5 R2 [2]", -2, params.getColumnPos(1));
        assertEquals("10 key fix 5 R2 [3]", -1, params.getColumnPos(2));
        assertEquals("10 key fix 5 R2 <4>", 0, params.getColumnPos(3));
        assertEquals("10 key fix 5 R2 [5]", 1, params.getColumnPos(4));
        assertEquals("10 key fix 5 R2 [6]", -3, params.getColumnPos(5));
        assertEquals("10 key fix 5 R2 [7]", -2, params.getColumnPos(6));
        assertEquals("10 key fix 5 R2 [8]", -1, params.getColumnPos(7));
        assertEquals("10 key fix 5 R2 [9]", 0, params.getColumnPos(8));
        assertEquals("10 key fix 5 R2 [A]", 1, params.getColumnPos(9));
        assertEquals("10 key fix 5 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("10 key fix 5 R2 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12998412.java!!!	testLayout11KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(11, 5, XPOS_M0);
        assertEquals("11 key fix 5 M0 columns", 5, params.mNumColumns);
        assertEquals("11 key fix 5 M0 rows", 3, params.mNumRows);
        assertEquals("11 key fix 5 M0 left", 2, params.mLeftKeys);
        assertEquals("11 key fix 5 M0 right", 3, params.mRightKeys);
        assertEquals("11 key fix 5 M0 [1]", -2, params.getColumnPos(0));
        assertEquals("11 key fix 5 M0 [2]", -1, params.getColumnPos(1));
        assertEquals("11 key fix 5 M0 <3>", 0, params.getColumnPos(2));
        assertEquals("11 key fix 5 M0 [4]", 1, params.getColumnPos(3));
        assertEquals("11 key fix 5 M0 [5]", 2, params.getColumnPos(4));
        assertEquals("11 key fix 5 M0 [6]", -2, params.getColumnPos(5));
        assertEquals("11 key fix 5 M0 [7]", -1, params.getColumnPos(6));
        assertEquals("11 key fix 5 M0 [8]", 0, params.getColumnPos(7));
        assertEquals("11 key fix 5 M0 [9]", 1, params.getColumnPos(8));
        assertEquals("11 key fix 5 M0 [A]", 2, params.getColumnPos(9));
        assertEquals("11 key fix 5 M0 [B]", 0, params.getColumnPos(10));
        assertEquals("11 key fix 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("11 key fix 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12998540.java!!!	testLayout12KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(12, 5, XPOS_M0);
        assertEquals("12 key fix 5 M0 columns", 5, params.mNumColumns);
        assertEquals("12 key fix 5 M0 rows", 3, params.mNumRows);
        assertEquals("12 key fix 5 M0 left", 2, params.mLeftKeys);
        assertEquals("12 key fix 5 M0 right", 3, params.mRightKeys);
        assertEquals("12 key fix 5 M0 [1]", -2, params.getColumnPos(0));
        assertEquals("12 key fix 5 M0 [2]", -1, params.getColumnPos(1));
        assertEquals("12 key fix 5 M0 <3>", 0, params.getColumnPos(2));
        assertEquals("12 key fix 5 M0 [4]", 1, params.getColumnPos(3));
        assertEquals("12 key fix 5 M0 [5]", 2, params.getColumnPos(4));
        assertEquals("12 key fix 5 M0 [6]", -2, params.getColumnPos(5));
        assertEquals("12 key fix 5 M0 [7]", -1, params.getColumnPos(6));
        assertEquals("12 key fix 5 M0 [8]", 0, params.getColumnPos(7));
        assertEquals("12 key fix 5 M0 [9]", 1, params.getColumnPos(8));
        assertEquals("12 key fix 5 M0 [A]", 2, params.getColumnPos(9));
        assertEquals("12 key fix 5 M0 [B]", 0, params.getColumnPos(10));
        assertEquals("12 key fix 5 M0 [C]", 1, params.getColumnPos(11));
        assertEquals("12 key fix 5 M0 adjust", -1, params.mTopRowAdjustment);
        assertEquals("12 key fix 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12998668.java!!!	testLayout13KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(13, 5, XPOS_M0);
        assertEquals("13 key fix 5 M0 columns", 5, params.mNumColumns);
        assertEquals("13 key fix 5 M0 rows", 3, params.mNumRows);
        assertEquals("13 key fix 5 M0 left", 2, params.mLeftKeys);
        assertEquals("13 key fix 5 M0 right", 3, params.mRightKeys);
        assertEquals("13 key fix 5 M0 [1]", -2, params.getColumnPos(0));
        assertEquals("13 key fix 5 M0 [2]", -1, params.getColumnPos(1));
        assertEquals("13 key fix 5 M0 <3>", 0, params.getColumnPos(2));
        assertEquals("13 key fix 5 M0 [4]", 1, params.getColumnPos(3));
        assertEquals("13 key fix 5 M0 [5]", 2, params.getColumnPos(4));
        assertEquals("13 key fix 5 M0 [6]", -2, params.getColumnPos(5));
        assertEquals("13 key fix 5 M0 [7]", -1, params.getColumnPos(6));
        assertEquals("13 key fix 5 M0 [8]", 0, params.getColumnPos(7));
        assertEquals("13 key fix 5 M0 [9]", 1, params.getColumnPos(8));
        assertEquals("13 key fix 5 M0 [A]", 2, params.getColumnPos(9));
        assertEquals("13 key fix 5 M0 [B]", -1, params.getColumnPos(10));
        assertEquals("13 key fix 5 M0 [C]", 0, params.getColumnPos(11));
        assertEquals("13 key fix 5 M0 [D]", 1, params.getColumnPos(12));
        assertEquals("13 key fix 5 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("13 key fix 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12998796.java!!!	testLayout14KeyFix5M0() : void
        MoreKeysKeyboardParams params = createParams(14, 5, XPOS_M0);
        assertEquals("14 key fix 5 M0 columns", 5, params.mNumColumns);
        assertEquals("14 key fix 5 M0 rows", 3, params.mNumRows);
        assertEquals("14 key fix 5 M0 left", 2, params.mLeftKeys);
        assertEquals("14 key fix 5 M0 right", 3, params.mRightKeys);
        assertEquals("14 key fix 5 M0 [1]", -2, params.getColumnPos(0));
        assertEquals("14 key fix 5 M0 [2]", -1, params.getColumnPos(1));
        assertEquals("14 key fix 5 M0 <3>", 0, params.getColumnPos(2));
        assertEquals("14 key fix 5 M0 [4]", 1, params.getColumnPos(3));
        assertEquals("14 key fix 5 M0 [5]", 2, params.getColumnPos(4));
        assertEquals("14 key fix 5 M0 [6]", -2, params.getColumnPos(5));
        assertEquals("14 key fix 5 M0 [7]", -1, params.getColumnPos(6));
        assertEquals("14 key fix 5 M0 [8]", 0, params.getColumnPos(7));
        assertEquals("14 key fix 5 M0 [9]", 1, params.getColumnPos(8));
        assertEquals("14 key fix 5 M0 [A]", 2, params.getColumnPos(9));
        assertEquals("14 key fix 5 M0 [B]", -1, params.getColumnPos(10));
        assertEquals("14 key fix 5 M0 [C]", 0, params.getColumnPos(11));
        assertEquals("14 key fix 5 M0 [D]", 1, params.getColumnPos(12));
        assertEquals("14 key fix 5 M0 [E]", 2, params.getColumnPos(13));
        assertEquals("14 key fix 5 M0 adjust", -1, params.mTopRowAdjustment);
        assertEquals("14 key fix 5 M0 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12998924.java!!!	testLayout7KeyFix7L0() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_L0);
        assertEquals("7 key fix 7 L0 columns", 7, params.mNumColumns);
        assertEquals("7 key fix 7 L0 rows", 1, params.mNumRows);
        assertEquals("7 key fix 7 L0 left", 0, params.mLeftKeys);
        assertEquals("7 key fix 7 L0 right", 7, params.mRightKeys);
        assertEquals("7 key fix 7 L0 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key fix 7 L0 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key fix 7 L0 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key fix 7 L0 [4]", 3, params.getColumnPos(3));
        assertEquals("7 key fix 7 L0 [5]", 4, params.getColumnPos(4));
        assertEquals("7 key fix 7 L0 [6]", 5, params.getColumnPos(5));
        assertEquals("7 key fix 7 L0 [7]", 6, params.getColumnPos(6));
        assertEquals("7 key fix 7 L0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 7 L0 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12999052.java!!!	testLayout7KeyFix7L1() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_L1);
        assertEquals("7 key fix 7 L1 columns", 7, params.mNumColumns);
        assertEquals("7 key fix 7 L1 rows", 1, params.mNumRows);
        assertEquals("7 key fix 7 L1 left", 0, params.mLeftKeys);
        assertEquals("7 key fix 7 L1 right", 7, params.mRightKeys);
        assertEquals("7 key fix 7 L1 <1>", 0, params.getColumnPos(0));
        assertEquals("7 key fix 7 L1 [2]", 1, params.getColumnPos(1));
        assertEquals("7 key fix 7 L1 [3]", 2, params.getColumnPos(2));
        assertEquals("7 key fix 7 L1 [4]", 3, params.getColumnPos(3));
        assertEquals("7 key fix 7 L1 [5]", 4, params.getColumnPos(4));
        assertEquals("7 key fix 7 L1 [6]", 5, params.getColumnPos(5));
        assertEquals("7 key fix 7 L1 [7]", 6, params.getColumnPos(6));
        assertEquals("7 key fix 7 L1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 7 L1 default", WIDTH * 0, params.getDefaultKeyCoordX());
!!!12999180.java!!!	testLayout7KeyFix7L2() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_L2);
        assertEquals("7 key fix 7 L2 columns", 7, params.mNumColumns);
        assertEquals("7 key fix 7 L2 rows", 1, params.mNumRows);
        assertEquals("7 key fix 7 L2 left", 1, params.mLeftKeys);
        assertEquals("7 key fix 7 L2 right", 6, params.mRightKeys);
        assertEquals("7 key fix 7 L2 [1]", -1, params.getColumnPos(0));
        assertEquals("7 key fix 7 L2 <2>", 0, params.getColumnPos(1));
        assertEquals("7 key fix 7 L2 [3]", 1, params.getColumnPos(2));
        assertEquals("7 key fix 7 L2 [4]", 2, params.getColumnPos(3));
        assertEquals("7 key fix 7 L2 [5]", 3, params.getColumnPos(4));
        assertEquals("7 key fix 7 L2 [6]", 4, params.getColumnPos(5));
        assertEquals("7 key fix 7 L2 [7]", 5, params.getColumnPos(6));
        assertEquals("7 key fix 7 L2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 7 L2 default", WIDTH * 1, params.getDefaultKeyCoordX());
!!!12999308.java!!!	testLayout7KeyFix7L3() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_L3);
        assertEquals("7 key fix 7 L3 columns", 7, params.mNumColumns);
        assertEquals("7 key fix 7 L3 rows", 1, params.mNumRows);
        assertEquals("7 key fix 7 L3 left", 2, params.mLeftKeys);
        assertEquals("7 key fix 7 L3 right", 5, params.mRightKeys);
        assertEquals("7 key fix 7 L3 [1]", -2, params.getColumnPos(0));
        assertEquals("7 key fix 7 L3 [2]", -1, params.getColumnPos(1));
        assertEquals("7 key fix 7 L3 <3>", 0, params.getColumnPos(2));
        assertEquals("7 key fix 7 L3 [4]", 1, params.getColumnPos(3));
        assertEquals("7 key fix 7 L3 [5]", 2, params.getColumnPos(4));
        assertEquals("7 key fix 7 L3 [6]", 3, params.getColumnPos(5));
        assertEquals("7 key fix 7 L3 [7]", 4, params.getColumnPos(6));
        assertEquals("7 key fix 7 L3 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 7 L3 default", WIDTH * 2, params.getDefaultKeyCoordX());
!!!12999436.java!!!	testLayout7KeyFix7M0() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_M0);
        assertEquals("7 key fix 7 M0 columns", 7, params.mNumColumns);
        assertEquals("7 key fix 7 M0 rows", 1, params.mNumRows);
        assertEquals("7 key fix 7 M0 left", 3, params.mLeftKeys);
        assertEquals("7 key fix 7 M0 right", 4, params.mRightKeys);
        assertEquals("7 key fix 7 M0 [1]", -3, params.getColumnPos(0));
        assertEquals("7 key fix 7 M0 [2]", -2, params.getColumnPos(1));
        assertEquals("7 key fix 7 M0 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key fix 7 M0 <4>", 0, params.getColumnPos(3));
        assertEquals("7 key fix 7 M0 [5]", 1, params.getColumnPos(4));
        assertEquals("7 key fix 7 M0 [6]", 2, params.getColumnPos(5));
        assertEquals("7 key fix 7 M0 [7]", 3, params.getColumnPos(6));
        assertEquals("7 key fix 7 M0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 7 M0 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12999564.java!!!	testLayout7KeyFix7M1() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_M1);
        assertEquals("7 key fix 7 M1 columns", 7, params.mNumColumns);
        assertEquals("7 key fix 7 M1 rows", 1, params.mNumRows);
        assertEquals("7 key fix 7 M1 left", 3, params.mLeftKeys);
        assertEquals("7 key fix 7 M1 right", 4, params.mRightKeys);
        assertEquals("7 key fix 7 M1 [1]", -3, params.getColumnPos(0));
        assertEquals("7 key fix 7 M1 [2]", -2, params.getColumnPos(1));
        assertEquals("7 key fix 7 M1 [3]", -1, params.getColumnPos(2));
        assertEquals("7 key fix 7 M1 <4>", 0, params.getColumnPos(3));
        assertEquals("7 key fix 7 M1 [5]", 1, params.getColumnPos(4));
        assertEquals("7 key fix 7 M1 [6]", 2, params.getColumnPos(5));
        assertEquals("7 key fix 7 M1 [7]", 3, params.getColumnPos(6));
        assertEquals("7 key fix 7 M1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 7 M1 default", WIDTH * 3, params.getDefaultKeyCoordX());
!!!12999692.java!!!	testLayout7KeyFix7R3() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_R3);
        assertEquals("7 key fix 7 R3 columns", 7, params.mNumColumns);
        assertEquals("7 key fix 7 R3 rows", 1, params.mNumRows);
        assertEquals("7 key fix 7 R3 left", 4, params.mLeftKeys);
        assertEquals("7 key fix 7 R3 right", 3, params.mRightKeys);
        assertEquals("7 key fix 7 R3 [1]", -4, params.getColumnPos(0));
        assertEquals("7 key fix 7 R3 [2]", -3, params.getColumnPos(1));
        assertEquals("7 key fix 7 R3 [3]", -2, params.getColumnPos(2));
        assertEquals("7 key fix 7 R3 [4]", -1, params.getColumnPos(3));
        assertEquals("7 key fix 7 R3 <5>", 0, params.getColumnPos(4));
        assertEquals("7 key fix 7 R3 [6]", 1, params.getColumnPos(5));
        assertEquals("7 key fix 7 R3 [7]", 2, params.getColumnPos(6));
        assertEquals("7 key fix 7 R3 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 7 R3 default", WIDTH * 4, params.getDefaultKeyCoordX());
!!!12999820.java!!!	testLayout7KeyFix7R2() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_R2);
        assertEquals("7 key fix 7 R2 columns", 7, params.mNumColumns);
        assertEquals("7 key fix 7 R2 rows", 1, params.mNumRows);
        assertEquals("7 key fix 7 R2 left", 5, params.mLeftKeys);
        assertEquals("7 key fix 7 R2 right", 2, params.mRightKeys);
        assertEquals("7 key fix 7 R2 [1]", -5, params.getColumnPos(0));
        assertEquals("7 key fix 7 R2 [2]", -4, params.getColumnPos(1));
        assertEquals("7 key fix 7 R2 [3]", -3, params.getColumnPos(2));
        assertEquals("7 key fix 7 R2 [4]", -2, params.getColumnPos(3));
        assertEquals("7 key fix 7 R2 [5]", -1, params.getColumnPos(4));
        assertEquals("7 key fix 7 R2 <6>", 0, params.getColumnPos(5));
        assertEquals("7 key fix 7 R2 [7]", 1, params.getColumnPos(6));
        assertEquals("7 key fix 7 R2 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 7 R2 default", WIDTH * 5, params.getDefaultKeyCoordX());
!!!12999948.java!!!	testLayout7KeyFix7R1() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_R1);
        assertEquals("7 key fix 7 R1 columns", 7, params.mNumColumns);
        assertEquals("7 key fix 7 R1 rows", 1, params.mNumRows);
        assertEquals("7 key fix 7 R1 left", 6, params.mLeftKeys);
        assertEquals("7 key fix 7 R1 right", 1, params.mRightKeys);
        assertEquals("7 key fix 7 R1 [1]", -6, params.getColumnPos(0));
        assertEquals("7 key fix 7 R1 [2]", -5, params.getColumnPos(1));
        assertEquals("7 key fix 7 R1 [3]", -4, params.getColumnPos(2));
        assertEquals("7 key fix 7 R1 [4]", -3, params.getColumnPos(3));
        assertEquals("7 key fix 7 R1 [5]", -2, params.getColumnPos(4));
        assertEquals("7 key fix 7 R1 [6]", -1, params.getColumnPos(5));
        assertEquals("7 key fix 7 R1 <7>", 0, params.getColumnPos(6));
        assertEquals("7 key fix 7 R1 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 7 R1 default", WIDTH * 6, params.getDefaultKeyCoordX());
!!!13000076.java!!!	testLayout7KeyFix7R0() : void
        MoreKeysKeyboardParams params = createParams(7, 7, XPOS_R0);
        assertEquals("7 key fix 7 R0 columns", 7, params.mNumColumns);
        assertEquals("7 key fix 7 R0 rows", 1, params.mNumRows);
        assertEquals("7 key fix 7 R0 left", 6, params.mLeftKeys);
        assertEquals("7 key fix 7 R0 right", 1, params.mRightKeys);
        assertEquals("7 key fix 7 R0 [1]", -6, params.getColumnPos(0));
        assertEquals("7 key fix 7 R0 [2]", -5, params.getColumnPos(1));
        assertEquals("7 key fix 7 R0 [3]", -4, params.getColumnPos(2));
        assertEquals("7 key fix 7 R0 [4]", -3, params.getColumnPos(3));
        assertEquals("7 key fix 7 R0 [5]", -2, params.getColumnPos(4));
        assertEquals("7 key fix 7 R0 [6]", -1, params.getColumnPos(5));
        assertEquals("7 key fix 7 R0 <7>", 0, params.getColumnPos(6));
        assertEquals("7 key fix 7 R0 adjust", 0, params.mTopRowAdjustment);
        assertEquals("7 key fix 7 R0 default", WIDTH * 6, params.getDefaultKeyCoordX());
