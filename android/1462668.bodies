class TestRunner
!!!9096844.java!!!	getForegroundName() : String
            return mForegroundOp.getName();
!!!9096972.java!!!	getBackgroundName() : String
            return mBackgroundOp.getName();
!!!9097100.java!!!	getName() : String
            String fgName = mForegroundOp.getName();
            String bgName = mBackgroundOp.getName();
            StringBuilder res = new StringBuilder();
            if (fgName != null) {
                res.append(fgName);
                res.append("Fg");
            }
            if (bgName != null) {
                res.append(bgName);
                res.append("Bg");
            }
            return res.toString();
!!!9097228.java!!!	getForegroundLongName() : String
            return mForegroundOp.getLongName();
!!!9097356.java!!!	getBackgroundLongName() : String
            return mBackgroundOp.getLongName();
!!!9097484.java!!!	run(inout handler : Handler, inout args : TestArgs, inout doneCallback : Runnable) : void
            mHandler = handler;
            mMaxRunTime = args.maxTime;
            mMaxOps = args.maxOps;
            if (args.combOp >= 0) {
                mForegroundOp = mOpPairs[args.combOp];
                mBackgroundOp = mOpPairs[args.combOp+1];
            } else {
                mForegroundOp = mAvailOps[args.fgOp];
                mBackgroundOp = mAvailOps[args.bgOp];
            }
            mDoneCallback = doneCallback;
            mBackgroundThread = new RunnerThread("background", new Runnable() {
                @Override public void run() {
                    boolean running;
                    int ops = 0;
                    do {
                        running = mBackgroundOp.onRun();
                        ops++;
                    } while (evalRepeat(running, true) && running);
                    mBackgroundEndTime = SystemClock.uptimeMillis();
                    mBackgroundOps = ops * mBackgroundOp.getOpsPerRun();
                    threadFinished(false);
                }
            }, Process.THREAD_PRIORITY_BACKGROUND);
            mForegroundThread = new RunnerThread("background", new Runnable() {
                @Override public void run() {
                    boolean running;
                    int ops = 0;
                    do {
                        running = mForegroundOp.onRun();
                        ops++;
                    } while (evalRepeat(true, running) && running);
                    mForegroundEndTime = SystemClock.uptimeMillis();
                    mForegroundOps = ops * mForegroundOp.getOpsPerRun();
                    threadFinished(true);
                }
            }, Process.THREAD_PRIORITY_FOREGROUND);

            mForegroundOp.onInit(TestService.this, true);
            mBackgroundOp.onInit(TestService.this, false);

            synchronized (this) {
                mStartTime = SystemClock.uptimeMillis();
                mBackgroundRunning = true;
                mForegroundRunning = true;
            }

            mBackgroundThread.start();
            mForegroundThread.start();
!!!9097612.java!!!	getForegroundTime() : long
            return mForegroundEndTime-mStartTime;
!!!9097740.java!!!	getForegroundOps() : long
            return mForegroundOps;
!!!9097868.java!!!	getBackgroundTime() : long
            return mBackgroundEndTime-mStartTime;
!!!9097996.java!!!	getBackgroundOps() : long
            return mBackgroundOps;
!!!9098124.java!!!	evalRepeat(inout bgRunning : boolean, inout fgRunning : boolean) : boolean
            synchronized (this) {
                if (!bgRunning) {
                    mBackgroundRunning = false;
                }
                if (!fgRunning) {
                    mForegroundRunning = false;
                }
                if (!mBackgroundRunning && !mForegroundRunning) {
                    return false;
                }
                if (mMaxOps > 0) {
                    // iteration-limited case
                    if (mForegroundOps >= mMaxOps) {
                        return false;
                    }
                    mForegroundOps++;
                } else {
                    // time-limited case
                    long now = SystemClock.uptimeMillis();
                    if (now > (mStartTime+mMaxRunTime)) {
                        return false;
                    }
                }
                return true;
            }
!!!9098252.java!!!	threadFinished(inout foreground : boolean) : void
            synchronized (this) {
                if (foreground) {
                    mForegroundRunning = false;
                } else {
                    mBackgroundRunning = false;
                }
                if (!mBackgroundRunning && !mForegroundRunning) {
                    mHandler.post(new Runnable() {
                        @Override public void run() {
                            mForegroundOp.onTerm(TestService.this);
                            mBackgroundOp.onTerm(TestService.this);
                            if (mDoneCallback != null) {
                                mDoneCallback.run();
                            }
                        }
                    });
                }
            }
