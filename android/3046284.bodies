class TVBaseDialog
!!!12563084.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        mContext = getApplicationContext();
        mReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(final Context context, final Intent intent) {
                if (intent.getAction().equals(TvIntents.INTENT_ACTION_CLOSE_APP)) {
                    Log.d(TAG, "receive intent " + TvIntents.INTENT_ACTION_CLOSE_APP);
                    finishSelf();
                }
            }
        };
        final IntentFilter filter = new IntentFilter();
        filter.addAction(TvIntents.INTENT_ACTION_CLOSE_APP);
        registerReceiver(mReceiver, filter);
!!!12563212.java!!!	finishSelf() : void
        finish();
!!!12563340.java!!!	onResume() : void
        super.onResume();
        startTimeOut();
!!!12563468.java!!!	onPause() : void
        super.onPause();
        stopTimeOut();
!!!12563596.java!!!	onDestroy() : void
        super.onDestroy();
        cancelReceiver();
!!!12563724.java!!!	cancelReceiver() : void
        if (mReceiver != null) {
            unregisterReceiver(mReceiver);
            mReceiver = null;
        }
!!!12563852.java!!!	setTimeOut(in value : int) : void
        mTimeOutValue = value;
!!!12563980.java!!!	getTimeOut() : int
        return mTimeOutValue;
!!!12564108.java!!!	setTimeOutRunnable(inout r : Runnable) : void
        stopTimeOut();
        mTimeOutRunnable = r;
!!!12564236.java!!!	getTimeOutRunnable() : Runnable
        return mTimeOutRunnable;
!!!12564364.java!!!	startTimeOut() : void
        isTimeOutStarted = true;
        refreshTimeOut();
!!!12564492.java!!!	stopTimeOut() : void
        isTimeOutStarted = false;
        if (getTimeOutRunnable() != null) {
            mTimeOutHandler.removeCallbacks(getTimeOutRunnable());
        }
!!!12564620.java!!!	refreshTimeOut() : void
        if (isTimeOutStarted && getTimeOutRunnable() != null && getTimeOut() != 0) {

            // Remove any pending posts of Runnable that are in the message
            // queue.
            mTimeOutHandler.removeCallbacks(getTimeOutRunnable());

            /*
             * Causes the Runnable to be added to the message queue, to be run
             * after the specified amount of time elapses. The runnable will be
             * run on the thread to which this handler is attached.
             */
            mTimeOutHandler.postDelayed(getTimeOutRunnable(), getTimeOut());
        }
!!!12564748.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        refreshTimeOut();
        return super.dispatchKeyEvent(event);
!!!12564876.java!!!	onPreparePanel(in featureId : int, inout view : View, inout menu : Menu) : boolean
        // fix bug 1572 In the settings,press twice menu ,the focus is disappear
        return false;
!!!12565004.java!!!	onKeyDown(in keyCode : int, in event : KeyEvent) : boolean

        Log.d(TAG, "onKeyDown() KeyCode : " + keyCode);
        Log.d(TAG, "onKeyDown() KeyCode : " + event);

        if (event.getScanCode() == EXIT_KEY) {
            WidgetManager.exitFromApp(mContext);
        }

        if (Wrapper.getWrapperInstance().isTunerInput()) {
            /*
             * If EAS event has not occurred, flag is set to true and Key
             * handling is normal.If EAS event has occurred, flag is set to
             * false and none of the keys are handled.
             */
            if (!Wrapper.getWrapperInstance().isEASEnabled()) {

                switch (keyCode) {
                    case KeyEvent.KEYCODE_MEDIA_NEXT:
                    case KeyEvent.KEYCODE_CHANNEL_UP:
                        sendSwitchChannelIntent(mContext, TvIntents.SWITCH_TYPE_UP);
                        break;
                    case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
                    case KeyEvent.KEYCODE_CHANNEL_DOWN:
                        sendSwitchChannelIntent(mContext, TvIntents.SWITCH_TYPE_DOWN);
                        break;
                }
            }
        }

        return super.onKeyDown(keyCode, event);
!!!12565132.java!!!	sendSwitchChannelIntent(inout context : Context, in type : int) : void
        if (context != null) {
            Intent intent = new Intent(TvIntents.ACTION_SWITCH_CHANNEL);
            intent.putExtra(TvIntents.EXTRA_SWITCH_TYPE, type);
            context.sendBroadcast(intent);
        }
