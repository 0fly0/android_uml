class Part
!!!3696012.java!!!	Part(in encoded : String, in decoded : String)
            super(encoded, decoded);
!!!3696140.java!!!	isEmpty() : boolean
            return false;
!!!3696268.java!!!	getEncoded() : String
            @SuppressWarnings("StringEquality")
            boolean hasEncoded = encoded != NOT_CACHED;
            return hasEncoded ? encoded : (encoded = encode(decoded));
!!!3696396.java!!!	readFrom(inout parcel : Parcel) : Part
            int representation = parcel.readInt();
            switch (representation) {
                case Representation.BOTH:
                    return from(parcel.readString(), parcel.readString());
                case Representation.ENCODED:
                    return fromEncoded(parcel.readString());
                case Representation.DECODED:
                    return fromDecoded(parcel.readString());
                default:
                    throw new IllegalArgumentException("Unknown representation: "
                            + representation);
            }
!!!3696524.java!!!	nonNull(inout part : Part) : Part
            return part == null ? NULL : part;
!!!3696652.java!!!	fromEncoded(in encoded : String) : Part
            return from(encoded, NOT_CACHED);
!!!3696780.java!!!	fromDecoded(in decoded : String) : Part
            return from(NOT_CACHED, decoded);
!!!3696908.java!!!	from(in encoded : String, in decoded : String) : Part
            // We have to check both encoded and decoded in case one is
            // NOT_CACHED.

            if (encoded == null) {
                return NULL;
            }
            if (encoded.length() == 0) {
                return EMPTY;
            }

            if (decoded == null) {
                return NULL;
            }
            if (decoded .length() == 0) {
                return EMPTY;
            }

            return new Part(encoded, decoded);
