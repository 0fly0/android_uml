class WifiMonitor
!!!9728012.java!!!	WifiMonitor(inout wifiStateMachine : StateMachine, inout wifiNative : WifiNative)
        mStateMachine = wifiStateMachine;
        mWifiNative = wifiNative;
!!!9728140.java!!!	startMonitoring() : void
        new MonitorThread().start();
!!!9729548.java!!!	handleNetworkStateChange(inout newState : DetailedState, in data : String) : void
        String BSSID = null;
        int networkId = -1;
        if (newState == NetworkInfo.DetailedState.CONNECTED) {
            Matcher match = mConnectedEventPattern.matcher(data);
            if (!match.find()) {
                if (false) Log.d(TAG, "Could not find BSSID in CONNECTED event string");
            } else {
                BSSID = match.group(1);
                try {
                    networkId = Integer.parseInt(match.group(2));
                } catch (NumberFormatException e) {
                    networkId = -1;
                }
            }
        }
        notifyNetworkStateChange(newState, BSSID, networkId);
!!!9729676.java!!!	notifyNetworkStateChange(inout newState : DetailedState, in BSSID : String, in netId : int) : void
        if (newState == NetworkInfo.DetailedState.CONNECTED) {
            Message m = mStateMachine.obtainMessage(NETWORK_CONNECTION_EVENT,
                    netId, 0, BSSID);
            mStateMachine.sendMessage(m);
        } else {
            Message m = mStateMachine.obtainMessage(NETWORK_DISCONNECTION_EVENT,
                    netId, 0, BSSID);
            mStateMachine.sendMessage(m);
        }
!!!9729804.java!!!	notifySupplicantStateChange(in networkId : int, inout wifiSsid : WifiSsid, in BSSID : String, inout newState : SupplicantState) : void
        mStateMachine.sendMessage(mStateMachine.obtainMessage(SUPPLICANT_STATE_CHANGE_EVENT,
                new StateChangeResult(networkId, wifiSsid, BSSID, newState)));
!!!9729932.java!!!	nap(in secs : int) : void
        try {
            Thread.sleep(secs * 1000);
        } catch (InterruptedException ignore) {
        }
