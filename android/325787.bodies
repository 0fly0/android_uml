class ZoneInfoDB
!!!2129563.java!!!	readHeader() : void
        // byte[12] tzdata_version  -- "tzdata2012f\0"
        // int index_offset
        // int data_offset
        // int zonetab_offset
        BufferIterator it = TZDATA.bigEndianIterator();

        byte[] tzdata_version = new byte[12];
        it.readByteArray(tzdata_version, 0, tzdata_version.length);
        String magic = new String(tzdata_version, 0, 6, Charsets.US_ASCII);
        if (!magic.equals("tzdata") || tzdata_version[11] != 0) {
            throw new RuntimeException("bad tzdata magic: " + Arrays.toString(tzdata_version));
        }
        version = new String(tzdata_version, 6, 5, Charsets.US_ASCII);

        int index_offset = it.readInt();
        int data_offset = it.readInt();
        int zonetab_offset = it.readInt();

        readIndex(it, index_offset, data_offset);
        readZoneTab(it, zonetab_offset);
!!!2129691.java!!!	mapData() : MemoryMappedFile
        MemoryMappedFile result = mapData(System.getenv("ANDROID_DATA") + "/misc/zoneinfo/");
        if (result == null) {
            result = mapData(System.getenv("ANDROID_ROOT") + "/usr/share/zoneinfo/");
            if (result == null) {
                throw new AssertionError("Couldn't find any tzdata!");
            }
        }
        return result;
!!!2129819.java!!!	mapData(inout directory : String) : MemoryMappedFile
        try {
            return MemoryMappedFile.mmapRO(directory + "tzdata");
        } catch (ErrnoException errnoException) {
            return null;
        }
!!!2129947.java!!!	readZoneTab(inout it : BufferIterator, in zoneTabOffset : int) : void
        byte[] bytes = new byte[(int) TZDATA.size() - zoneTabOffset];
        it.seek(zoneTabOffset);
        it.readByteArray(bytes, 0, bytes.length);
        zoneTab = new String(bytes, 0, bytes.length, Charsets.US_ASCII);
!!!2130075.java!!!	readIndex(inout it : BufferIterator, in indexOffset : int, in dataOffset : int) : void
        it.seek(indexOffset);

        // The database reserves 40 bytes for each id.
        final int SIZEOF_TZNAME = 40;
        // The database uses 32-bit (4 byte) integers.
        final int SIZEOF_TZINT = 4;

        byte[] idBytes = new byte[SIZEOF_TZNAME];
        int indexSize = (dataOffset - indexOffset);
        int entryCount = indexSize / (SIZEOF_TZNAME + 3*SIZEOF_TZINT);

        char[] idChars = new char[entryCount * SIZEOF_TZNAME];
        int[] idEnd = new int[entryCount];
        int idOffset = 0;

        byteOffsets = new int[entryCount];
        rawUtcOffsets = new int[entryCount];

        for (int i = 0; i < entryCount; i++) {
            it.readByteArray(idBytes, 0, idBytes.length);

            byteOffsets[i] = it.readInt();
            byteOffsets[i] += dataOffset; // TODO: change the file format so this is included.

            int length = it.readInt();
            if (length < 44) {
                throw new AssertionError("length in index file < sizeof(tzhead)");
            }
            rawUtcOffsets[i] = it.readInt();

            // Don't include null chars in the String
            int len = idBytes.length;
            for (int j = 0; j < len; j++) {
                if (idBytes[j] == 0) {
                    break;
                }
                idChars[idOffset++] = (char) (idBytes[j] & 0xFF);
            }

            idEnd[i] = idOffset;
        }

        // We create one string containing all the ids, and then break that into substrings.
        // This way, all ids share a single char[] on the heap.
        String allIds = new String(idChars, 0, idOffset);
        ids = new String[entryCount];
        for (int i = 0; i < entryCount; i++) {
            ids[i] = allIds.substring(i == 0 ? 0 : idEnd[i - 1], idEnd[i]);
        }
!!!2130203.java!!!	makeTimeZone(inout id : String) : TimeZone
        // Work out where in the big data file this time zone is.
        int index = Arrays.binarySearch(ids, id);
        if (index < 0) {
            return null;
        }

        BufferIterator it = TZDATA.bigEndianIterator();
        it.skip(byteOffsets[index]);

        return ZoneInfo.makeTimeZone(id, it);
!!!2130331.java!!!	getAvailableIDs() : String
        return ids.clone();
!!!2130459.java!!!	getAvailableIDs(in rawOffset : int) : String
        List<String> matches = new ArrayList<String>();
        for (int i = 0, end = rawUtcOffsets.length; i < end; ++i) {
            if (rawUtcOffsets[i] == rawOffset) {
                matches.add(ids[i]);
            }
        }
        return matches.toArray(new String[matches.size()]);
!!!2130587.java!!!	getSystemDefault() : TimeZone
        synchronized (LOCK) {
            TimezoneGetter tzGetter = TimezoneGetter.getInstance();
            String zoneName = tzGetter != null ? tzGetter.getId() : null;
            if (zoneName != null) {
                zoneName = zoneName.trim();
            }
            if (zoneName == null || zoneName.isEmpty()) {
                // use localtime for the simulator
                // TODO: what does that correspond to?
                zoneName = "localtime";
            }
            return TimeZone.getTimeZone(zoneName);
        }
!!!2130715.java!!!	getVersion() : String
        return version;
!!!2130843.java!!!	getZoneTab() : String
        return zoneTab;
