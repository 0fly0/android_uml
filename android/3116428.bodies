class DeviceMessageAdapterTest
!!!13093004.java!!!	setUp() : void
    super.setUp();
    mControl = EasyMock.createStrictControl();
    mCapture = new Capture<RemoteMessage>();
    mMockReceiver = mControl.createMock(MessageReceiver.class);
    mMockAdapter = mControl.createMock(WireAdapter.class);
    mDeviceMessageAdapter = new DeviceMessageAdapter(mMockReceiver, mMockAdapter);
!!!13093132.java!!!	tearDown() : void
    mCapture = null;
    mControl = null;
    mDeviceMessageAdapter = null;
    mMockReceiver = null;
    super.tearDown();
!!!13093260.java!!!	testAck() : void
    int sequenceNumber = 1;

    mMockReceiver.onAck();
    mControl.replay();

    // Empty response
    ResponseMessage.Builder builder = ResponseMessage.newBuilder();
    RemoteMessage.Builder remoteBuilder =
        RemoteMessage.newBuilder().setResponseMessage(builder);
    remoteBuilder.setSequenceNumber(sequenceNumber);

    mDeviceMessageAdapter.onMessage(remoteBuilder.build());
    mControl.verify();
!!!13093388.java!!!	testSendData() : void
    String type = "type";
    String data = "I'm a test string";

    mMockAdapter.sendRemoteMessage(capture(mCapture));
    mControl.replay();
    Token token = mDeviceMessageAdapter.sendData(type, data);
    mControl.verify();

    RemoteMessage msg = mCapture.getValue();
    assertTrue(msg.hasSequenceNumber());
    assertNotNull(token);
    assertEquals(token.getSequenceNumber(), msg.getSequenceNumber());
    assertTrue(msg.hasRequestMessage());
    assertTrue(msg.getRequestMessage().hasDataMessage());
    assertEquals(type, msg.getRequestMessage().getDataMessage().getType());
    assertEquals(data, msg.getRequestMessage().getDataMessage().getData());
!!!13093516.java!!!	testSendKeyEvent_values() : void
    Code keycode = Code.KEYCODE_6;
    Action action = Action.UP;

    mMockAdapter.sendRemoteMessage(capture(mCapture));
    mControl.replay();
    mDeviceMessageAdapter.sendKeyEvent(keycode, action);
    mControl.verify();

    RemoteMessage msg = mCapture.getValue();
    assertTrue(msg.hasRequestMessage());
    RequestMessage request = msg.getRequestMessage();
    assertTrue(request.hasKeyEventMessage());
    KeyEvent event = request.getKeyEventMessage();
    assertEquals("keycode was not transmitted properly",
        keycode, event.getKeycode());
    assertEquals("action was not transmitted properly",
        action, event.getAction());
!!!13093644.java!!!	testSendMouseMove() : void
    int dx = 3;
    int dy = 4;

    mMockAdapter.sendRemoteMessage(capture(mCapture));
    mControl.replay();
    mDeviceMessageAdapter.sendMouseMove(dx, dy);
    mControl.verify();

    RemoteMessage msg = mCapture.getValue();
    assertTrue(msg.hasRequestMessage());
    RequestMessage request = msg.getRequestMessage();
    assertNotNull(request);
    assertTrue(request.hasMouseEventMessage());
    MouseEvent event = request.getMouseEventMessage();
    assertEquals("x_delta for the mouse event was not transmited properly",
        dx, event.getXDelta());
    assertEquals("y_delta for the mouse event was not transmited properly",
        dy, event.getYDelta());
!!!13093772.java!!!	testSendMouseWheel() : void
    int dx = 3;
    int dy = 4;

    mMockAdapter.sendRemoteMessage(capture(mCapture));
    mControl.replay();
    mDeviceMessageAdapter.sendMouseWheel(dx, dy);
    mControl.verify();

    RemoteMessage msg = mCapture.getValue();
    assertTrue(msg.hasRequestMessage());
    RequestMessage request = msg.getRequestMessage();
    assertNotNull(request);
    assertTrue(request.hasMouseWheelMessage());
    MouseWheel wheel = request.getMouseWheelMessage();
    assertEquals("x_scroll for the mouse wheel was not transmited properly",
        dx, wheel.getXScroll());
    assertEquals("y_scroll for the mouse wheel was not transmited properly",
        dy, wheel.getYScroll());
!!!13093900.java!!!	testSendPing_sequenceNumber() : void
    mMockAdapter.sendRemoteMessage(capture(mCapture));
    mControl.replay();
    mDeviceMessageAdapter.sendPing();
    mControl.verify();

    RemoteMessage msg = mCapture.getValue();
    assertTrue(msg.hasSequenceNumber());
    assertEquals(1, msg.getSequenceNumber());
!!!13094028.java!!!	testSendMouseMove_noSequenceNumber() : void
    mMockAdapter.sendRemoteMessage(capture(mCapture));
    mControl.replay();
    mDeviceMessageAdapter.sendMouseMove(0, 0);
    mControl.verify();

    RemoteMessage msg = mCapture.getValue();
    assertFalse(msg.hasSequenceNumber());
!!!13094156.java!!!	testFling() : void
    String flingUri = "some uri";

    mMockAdapter.sendRemoteMessage(capture(mCapture));
    mControl.replay();
    Token token = mDeviceMessageAdapter.sendURI(flingUri);
    mControl.verify();

    RemoteMessage msg = mCapture.getValue();
    assertTrue(msg.hasRequestMessage());
    assertTrue(msg.hasSequenceNumber());
    assertTrue(token.hasSequenceNumber());
    assertEquals(token.getSequenceNumber(), msg.getSequenceNumber());

    RequestMessage request = msg.getRequestMessage();
    assertTrue(request.hasFlingMessage());
    assertEquals(flingUri, request.getFlingMessage().getText());
