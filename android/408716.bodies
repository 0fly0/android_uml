class AInputQueue
!!!958348.cpp!!!	~AInputQueue()
    close(mDispatchKeyRead);
    close(mDispatchKeyWrite);
!!!958476.cpp!!!	attachLooper(inout looper : ALooper, in ident : int, in callback : ALooper_callbackFunc, inout data : void) : void
    mLooper = static_cast<android::Looper*>(looper);
    mLooper->addFd(mConsumer.getChannel()->getFd(),
            ident, ALOOPER_EVENT_INPUT, callback, data);
    mLooper->addFd(mDispatchKeyRead,
            ident, ALOOPER_EVENT_INPUT, callback, data);
!!!958604.cpp!!!	detachLooper() : void
    mLooper->removeFd(mConsumer.getChannel()->getFd());
    mLooper->removeFd(mDispatchKeyRead);
!!!958732.cpp!!!	hasEvents() : int32_t
    struct pollfd pfd[2];

    pfd[0].fd = mConsumer.getChannel()->getFd();
    pfd[0].events = POLLIN;
    pfd[0].revents = 0;
    pfd[1].fd = mDispatchKeyRead;
    pfd[1].events = POLLIN;
    pfd[1].revents = 0;
    
    int nfd = poll(pfd, 2, 0);
    if (nfd <= 0) return 0;
    return ((pfd[0].revents & POLLIN) || (pfd[1].revents & POLLIN)) ? 1 : -1;
!!!958860.cpp!!!	getEvent(inout outEvent : AInputEvent) : int32_t
    *outEvent = NULL;

    char byteread;
    ssize_t nRead = read(mDispatchKeyRead, &byteread, 1);

    Mutex::Autolock _l(mLock);

    if (nRead == 1) {
        if (mDispatchingKeys.size() > 0) {
            KeyEvent* kevent = mDispatchingKeys[0];
            *outEvent = kevent;
            mDispatchingKeys.removeAt(0);
            in_flight_event inflight;
            inflight.event = kevent;
            inflight.seq = -1;
            inflight.finishSeq = 0;
            mInFlightEvents.push(inflight);
        }

        bool finishNow = false;
        if (mFinishPreDispatches.size() > 0) {
            finish_pre_dispatch finish(mFinishPreDispatches[0]);
            mFinishPreDispatches.removeAt(0);
            const size_t N = mInFlightEvents.size();
            for (size_t i=0; i<N; i++) {
                const in_flight_event& inflight(mInFlightEvents[i]);
                if (inflight.seq == finish.seq) {
                    *outEvent = inflight.event;
                    finishNow = finish.handled;
                }
            }
            if (*outEvent == NULL) {
                ALOGW("getEvent couldn't find inflight for seq %d", finish.seq);
            }
        }

        if (finishNow) {
            finishEvent(*outEvent, true, false);
            *outEvent = NULL;
            return -1;
        } else if (*outEvent != NULL) {
            return 0;
        }
    }

    uint32_t consumerSeq;
    InputEvent* myEvent = NULL;
    status_t res = mConsumer.consume(&mPooledInputEventFactory, true /*consumeBatches*/, -1,
            &consumerSeq, &myEvent);
    if (res != android::OK) {
        if (res != android::WOULD_BLOCK) {
            ALOGW("channel '%s' ~ Failed to consume input event.  status=%d",
                    mConsumer.getChannel()->getName().string(), res);
        }
        return -1;
    }

    if (mConsumer.hasDeferredEvent()) {
        wakeupDispatchLocked();
    }

    in_flight_event inflight;
    inflight.event = myEvent;
    inflight.seq = -1;
    inflight.finishSeq = consumerSeq;
    mInFlightEvents.push(inflight);

    *outEvent = myEvent;
    return 0;
!!!958988.cpp!!!	preDispatchEvent(inout event : AInputEvent) : bool
    if (((InputEvent*)event)->getType() != AINPUT_EVENT_TYPE_KEY) {
        // The IME only cares about key events.
        return false;
    }

    // For now we only send system keys to the IME...  this avoids having
    // critical keys like DPAD go through this path.  We really need to have
    // the IME report which keys it wants.
    if (!((KeyEvent*)event)->isSystemKey()) {
        return false;
    }

    return preDispatchKey((KeyEvent*)event);
!!!959116.cpp!!!	finishEvent(inout event : AInputEvent, in handled : bool, in didDefaultHandling : bool) : void
    LOG_TRACE("finishEvent: %p handled=%d, didDefaultHandling=%d", event,
            handled ? 1 : 0, didDefaultHandling ? 1 : 0);

    if (!handled && !didDefaultHandling
            && ((InputEvent*)event)->getType() == AINPUT_EVENT_TYPE_KEY
            && ((KeyEvent*)event)->hasDefaultAction()) {
        // The app didn't handle this, but it may have a default action
        // associated with it.  We need to hand this back to Java to be
        // executed.
        doUnhandledKey((KeyEvent*)event);
        return;
    }

    Mutex::Autolock _l(mLock);

    const size_t N = mInFlightEvents.size();
    for (size_t i=0; i<N; i++) {
        const in_flight_event& inflight(mInFlightEvents[i]);
        if (inflight.event == event) {
            if (inflight.finishSeq) {
                status_t res = mConsumer.sendFinishedSignal(inflight.finishSeq, handled);
                if (res != android::OK) {
                    ALOGW("Failed to send finished signal on channel '%s'.  status=%d",
                            mConsumer.getChannel()->getName().string(), res);
                }
            }
            mPooledInputEventFactory.recycle(static_cast<InputEvent*>(event));
            mInFlightEvents.removeAt(i);
            return;
        }
    }

    ALOGW("finishEvent called for unknown event: %p", event);
!!!959372.cpp!!!	dispatchEvent(inout event : KeyEvent) : void
    Mutex::Autolock _l(mLock);

    LOG_TRACE("dispatchEvent: dispatching=%d write=%d\n", mDispatchingKeys.size(),
            mDispatchKeyWrite);
    mDispatchingKeys.add(event);
    wakeupDispatchLocked();
!!!959500.cpp!!!	finishPreDispatch(in seq : int, in handled : bool) : void
    Mutex::Autolock _l(mLock);

    LOG_TRACE("finishPreDispatch: seq=%d handled=%d\n", seq, handled ? 1 : 0);
    finish_pre_dispatch finish;
    finish.seq = seq;
    finish.handled = handled;
    mFinishPreDispatches.add(finish);
    wakeupDispatchLocked();
!!!959628.cpp!!!	consumeUnhandledEvent() : KeyEvent
    Mutex::Autolock _l(mLock);

    KeyEvent* event = NULL;
    if (mUnhandledKeys.size() > 0) {
        event = mUnhandledKeys[0];
        mUnhandledKeys.removeAt(0);
    }

    LOG_TRACE("consumeUnhandledEvent: KeyEvent=%p", event);
    return event;
!!!959756.cpp!!!	consumePreDispatchingEvent(inout outSeq : int) : KeyEvent
    Mutex::Autolock _l(mLock);

    KeyEvent* event = NULL;
    if (mPreDispatchingKeys.size() > 0) {
        const in_flight_event& inflight(mPreDispatchingKeys[0]);
        event = static_cast<KeyEvent*>(inflight.event);
        *outSeq = inflight.seq;
        mPreDispatchingKeys.removeAt(0);
    }

    LOG_TRACE("consumePreDispatchingEvent: KeyEvent=%p", event);
    return event;
!!!959884.cpp!!!	createKeyEvent() : KeyEvent
    Mutex::Autolock _l(mLock);

    return mPooledInputEventFactory.createKeyEvent();
!!!960012.cpp!!!	doUnhandledKey(inout keyEvent : KeyEvent) : void
    Mutex::Autolock _l(mLock);

    LOG_TRACE("Unhandled key: pending=%d write=%d\n", mUnhandledKeys.size(), mWorkWrite);
    if (mUnhandledKeys.size() <= 0 && mWorkWrite >= 0) {
        write_work(mWorkWrite, CMD_DEF_KEY);
    }
    mUnhandledKeys.add(keyEvent);
!!!960140.cpp!!!	preDispatchKey(inout keyEvent : KeyEvent) : bool
    Mutex::Autolock _l(mLock);

    LOG_TRACE("preDispatch key: pending=%d write=%d\n", mPreDispatchingKeys.size(), mWorkWrite);
    const size_t N = mInFlightEvents.size();
    for (size_t i=0; i<N; i++) {
        in_flight_event& inflight(mInFlightEvents.editItemAt(i));
        if (inflight.event == keyEvent) {
            if (inflight.seq >= 0) {
                // This event has already been pre-dispatched!
                LOG_TRACE("Event already pre-dispatched!");
                return false;
            }
            mSeq++;
            if (mSeq < 0) mSeq = 1;
            inflight.seq = mSeq;

            if (mPreDispatchingKeys.size() <= 0 && mWorkWrite >= 0) {
                write_work(mWorkWrite, CMD_DEF_KEY);
            }
            mPreDispatchingKeys.add(inflight);
            return true;
        }
    }

    ALOGW("preDispatchKey called for unknown event: %p", keyEvent);
    return false;
!!!960268.cpp!!!	wakeupDispatchLocked() : void
restart:
    char dummy = 0;
    int res = write(mDispatchKeyWrite, &dummy, sizeof(dummy));
    if (res < 0 && errno == EINTR) {
        goto restart;
    }

    if (res == sizeof(dummy)) return;

    if (res < 0) ALOGW("Failed writing to dispatch fd: %s", strerror(errno));
    else ALOGW("Truncated writing to dispatch fd: %d", res);
