class KeyguardGlowStripView
!!!7842444.java!!!	KeyguardGlowStripView(inout context : Context)
        this(context, null, 0);
!!!7842572.java!!!	KeyguardGlowStripView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
!!!7842700.java!!!	KeyguardGlowStripView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.KeyguardGlowStripView);
        mDotSize = a.getDimensionPixelSize(R.styleable.KeyguardGlowStripView_dotSize, mDotSize);
        mNumDots = a.getInt(R.styleable.KeyguardGlowStripView_numDots, mNumDots);
        mDotDrawable = a.getDrawable(R.styleable.KeyguardGlowStripView_glowDot);
        mLeftToRight = a.getBoolean(R.styleable.KeyguardGlowStripView_leftToRight, mLeftToRight);
!!!7842828.java!!!	onSizeChanged(in w : int, in h : int, in oldw : int, in oldh : int) : void
        int availableWidth = w - getPaddingLeft() - getPaddingRight();
        mHorizontalDotGap = (availableWidth - mDotSize * mNumDots) /  (mNumDots - 1);
        mDotStripTop = getPaddingTop();
        invalidate();
!!!7842956.java!!!	dispatchDraw(inout canvas : Canvas) : void
        super.dispatchDraw(canvas);

        if (!mDrawDots) return;

        int xOffset = getPaddingLeft();
        mDotDrawable.setBounds(0, 0, mDotSize, mDotSize);

        for (int i = 0; i < mNumDots; i++) {
            // We fudge the relative position to provide a fade in of the first dot and a fade
            // out of the final dot.
            float relativeDotPosition = SLIDING_WINDOW_SIZE / 2 + ((1.0f * i) / (mNumDots - 1)) *
                    (1 - SLIDING_WINDOW_SIZE);
            float distance = Math.abs(relativeDotPosition - mAnimationProgress);
            float alpha = Math.max(0, 1 - distance / (SLIDING_WINDOW_SIZE / 2));

            alpha = mDotAlphaInterpolator.getInterpolation(alpha);

            canvas.save();
            canvas.translate(xOffset, mDotStripTop);
            mDotDrawable.setAlpha((int) (alpha * 255));
            mDotDrawable.draw(canvas);
            canvas.restore();
            xOffset += mDotSize + mHorizontalDotGap;
        }
!!!7843084.java!!!	makeEmGo() : void
        if (mAnimator != null) {
            mAnimator.cancel();
        }
        float from = mLeftToRight ? 0f : 1f;
        float to = mLeftToRight ? 1f : 0f;
        mAnimator = ValueAnimator.ofFloat(from, to);
        mAnimator.setDuration(DURATION);
        mAnimator.setInterpolator(new LinearInterpolator());
        mAnimator.addListener(new AnimatorListenerAdapter() {
            @Override
            public void onAnimationEnd(Animator animation) {
                mDrawDots = false;
                // make sure we draw one frame at the end with everything gone.
                invalidate();
            }

            @Override
            public void onAnimationStart(Animator animation) {
                mDrawDots = true;
            }
        });
        mAnimator.addUpdateListener(new AnimatorUpdateListener() {
            @Override
            public void onAnimationUpdate(ValueAnimator animation) {
                mAnimationProgress = (Float) animation.getAnimatedValue();
                invalidate();
            }
        });
        mAnimator.start();
