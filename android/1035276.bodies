class ArrayUtils
!!!5540364.java!!!	ArrayUtils()
 /* cannot be instantiated */
!!!5540492.java!!!	idealByteArraySize(in need : int) : int
        for (int i = 4; i < 32; i++)
            if (need <= (1 << i) - 12)
                return (1 << i) - 12;

        return need;
!!!5540620.java!!!	idealBooleanArraySize(in need : int) : int
        return idealByteArraySize(need);
!!!5540748.java!!!	idealShortArraySize(in need : int) : int
        return idealByteArraySize(need * 2) / 2;
!!!5540876.java!!!	idealCharArraySize(in need : int) : int
        return idealByteArraySize(need * 2) / 2;
!!!5541004.java!!!	idealIntArraySize(in need : int) : int
        return idealByteArraySize(need * 4) / 4;
!!!5541132.java!!!	idealFloatArraySize(in need : int) : int
        return idealByteArraySize(need * 4) / 4;
!!!5541260.java!!!	idealObjectArraySize(in need : int) : int
        return idealByteArraySize(need * 4) / 4;
!!!5541388.java!!!	idealLongArraySize(in need : int) : int
        return idealByteArraySize(need * 8) / 8;
!!!5541516.java!!!	equals(inout array1 : byte, inout array2 : byte, in length : int) : boolean
        if (array1 == array2) {
            return true;
        }
        if (array1 == null || array2 == null || array1.length < length || array2.length < length) {
            return false;
        }
        for (int i = 0; i < length; i++) {
            if (array1[i] != array2[i]) {
                return false;
            }
        }
        return true;
!!!5541644.java!!!	emptyArray(inout kind : Class<T>) : T
        if (kind == Object.class) {
            return (T[]) EMPTY;
        }

        int bucket = ((System.identityHashCode(kind) / 8) & 0x7FFFFFFF) % CACHE_SIZE;
        Object cache = sCache[bucket];

        if (cache == null || cache.getClass().getComponentType() != kind) {
            cache = Array.newInstance(kind, 0);
            sCache[bucket] = cache;

            // Log.e("cache", "new empty " + kind.getName() + " at " + bucket);
        }

        return (T[]) cache;
!!!5541772.java!!!	contains(inout array : T, inout value : T) : boolean
        for (T element : array) {
            if (element == null) {
                if (value == null) return true;
            } else {
                if (value != null && element.equals(value)) return true;
            }
        }
        return false;
!!!5541900.java!!!	contains(inout array : int, in value : int) : boolean
        for (int element : array) {
            if (element == value) {
                return true;
            }
        }
        return false;
!!!5542028.java!!!	total(inout array : long) : long
        long total = 0;
        for (long value : array) {
            total += value;
        }
        return total;
!!!5542156.java!!!	appendElement(inout kind : Class<T>, inout array : T, inout element : T) : T
        final T[] result;
        final int end;
        if (array != null) {
            end = array.length;
            result = (T[])Array.newInstance(kind, end + 1);
            System.arraycopy(array, 0, result, 0, end);
        } else {
            end = 0;
            result = (T[])Array.newInstance(kind, 1);
        }
        result[end] = element;
        return result;
!!!5542284.java!!!	removeElement(inout kind : Class<T>, inout array : T, inout element : T) : T
        if (array != null) {
            final int length = array.length;
            for (int i = 0; i < length; i++) {
                if (array[i] == element) {
                    if (length == 1) {
                        return null;
                    }
                    T[] result = (T[])Array.newInstance(kind, length - 1);
                    System.arraycopy(array, 0, result, 0, i);
                    System.arraycopy(array, i + 1, result, i, length - i - 1);
                    return result;
                }
            }
        }
        return array;
!!!5542412.java!!!	appendInt(inout cur : int, in val : int) : int
        if (cur == null) {
            return new int[] { val };
        }
        final int N = cur.length;
        for (int i = 0; i < N; i++) {
            if (cur[i] == val) {
                return cur;
            }
        }
        int[] ret = new int[N + 1];
        System.arraycopy(cur, 0, ret, 0, N);
        ret[N] = val;
        return ret;
!!!5542540.java!!!	removeInt(inout cur : int, in val : int) : int
        if (cur == null) {
            return null;
        }
        final int N = cur.length;
        for (int i = 0; i < N; i++) {
            if (cur[i] == val) {
                int[] ret = new int[N - 1];
                if (i > 0) {
                    System.arraycopy(cur, 0, ret, 0, i);
                }
                if (i < (N - 1)) {
                    System.arraycopy(cur, i + 1, ret, i, N - i - 1);
                }
                return ret;
            }
        }
        return cur;
