class HDMI_CertActivity
!!!12009356.java!!!	onCreate(inout icicle : Bundle) : void
        super.onCreate(icicle);

        setContentView(R.layout.main);
        addPreferencesFromResource(R.xml.settings);

        mHDMI_Cert_Resolution = (PreferenceScreen) findPreference(KEY_HDMI_CERT_RES);
        mHDMI_Cert_Aspect = (PreferenceScreen) findPreference(KEY_HDMI_CERT_ASPECT);
        mHDMI_Cert_HDCP = (PreferenceScreen) findPreference(KEY_HDMI_CERT_HDCP);
        mHDMI_Cert_YCC = (PreferenceScreen) findPreference(KEY_HDMI_CERT_YCC);
        mHDMI_Cert_ColorFormat = (PreferenceScreen) findPreference(KEY_HDMI_CERT_COLOR_FORMAT);
        mHDMI_Cert_AoutMode = (PreferenceScreen) findPreference(KEY_HDMI_CERT_AUDIO_OUTPUT_MODE);
        mHDMI_Cert_DRCMode = (PreferenceScreen) findPreference(KEY_HDMI_CERT_AUDIO_DRC_MODE);
        mHDMI_Cert_StereoMode = (PreferenceScreen) findPreference(
                KEY_HDMI_CERT_AUDIO_STEREO_MODE);
        mHDMI_Cert_DualMode = (PreferenceScreen) findPreference(
                KEY_HDMI_CERT_AUDIO_DUAL_MODE);
        mHDMI_Cert_LFEDownmixMode = (PreferenceScreen) findPreference(
                KEY_HDMI_CERT_AUDIO_LFE_DOWNMIX_MODE);
        mHDMI_Cert_SpeakerMode = (PreferenceScreen) findPreference(
                KEY_HDMI_CERT_AUDIO_SPEAKER_MODE);
        mHDMI_Cert_ChannelMode = (PreferenceScreen) findPreference(
                KEY_HDMI_CERT_AUDIO_CHANNEL_MODE);
        mHDMI_Cert_CMD = (PreferenceScreen) findPreference(KEY_HDMI_CERT_CMD);
        mHDMI_Cert_Exit = (PreferenceScreen) findPreference(KEY_HDMI_CERT_EXIT);

        mAudioStreamInfo = (TextView) findViewById(R.id.audio_info);
        mAVSettingsObserver = new AVSettingsObserver();
        mMySourceHandlerObserver = new MySourceHandlerObserver();
        mSourceHandlerObsHandle = mAVSettingsObserver.registerHandlerObserver(
                "mrvl.source", mMySourceHandlerObserver);

        mNative = new HDMI_CertNative();
        mAudioOut = new AudioOutput();
        mVideoOut = new VideoOutput();
        internalInit();
!!!12009484.java!!!	onResume() : void
        Log.v(TAG,"onResume");
        super.onResume();
!!!12009612.java!!!	onPreferenceTreeClick(inout preferenceScreen : PreferenceScreen, inout preference : Preference) : boolean
        if (preference == mHDMI_Cert_Resolution) {
            showDialog( DIALOG_RESOLUTION_ID );
        } else if (preference == mHDMI_Cert_Aspect) {
            showDialog( DIALOG_ASPECT_ID );
        } else if (preference == mHDMI_Cert_HDCP) {
            showDialog( DIALOG_HDCP_ID );
        } else if (preference == mHDMI_Cert_YCC) {
            showDialog( DIALOG_YCC_ID );
        } else if (preference == mHDMI_Cert_ColorFormat) {
            showDialog( DIALOG_COLOR_FORMAT_ID);
        } else if (preference == mHDMI_Cert_AoutMode) {
            showDialog( DIALOG_AUDIO_OUTPUT_MODE_ID );
        } else if (preference == mHDMI_Cert_DRCMode) {
            showDialog( DIALOG_AUDIO_DRC_MODE_ID );
        } else if (preference == mHDMI_Cert_StereoMode) {
            showDialog( DIALOG_AUDIO_STEREO_MODE_ID );
        } else if (preference == mHDMI_Cert_DualMode) {
            showDialog( DIALOG_AUDIO_DUAL_MODE_ID );
        } else if (preference == mHDMI_Cert_LFEDownmixMode) {
            showDialog( DIALOG_AUDIO_LFE_DOWNMIX_MODE_ID );
        } else if (preference == mHDMI_Cert_SpeakerMode) {
            showDialog( DIALOG_AUDIO_SPEAKER_MODE_ID );
        } else if (preference == mHDMI_Cert_ChannelMode) {
            showDialog( DIALOG_AUDIO_CHANNEL_MODE_ID );
        } else if (preference == mHDMI_Cert_CMD) {
            runCMDFile();
        } else if (preference == mHDMI_Cert_Exit) {
            showDialog( DIALOG_EXIT_ID );
        }

        return false;
!!!12009740.java!!!	onCreateDialog(in id : int) : Dialog
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        Dialog dialog;

        switch( id ) {
        case DIALOG_RESOLUTION_ID:
            final CharSequence[] RESOLUTIONitems = {
                " 1. 640 x 480 60Hz",
                " 2. NTSC M",
                " 3. NTSC J",
                " 4. PAL M",
                " 5. PAL BGH",
                " 6. 720 x 480 I 60Hz",
                " 7. 720 x 480 I 59.94Hz",
                " 8. 720 x 576 I 50Hz",
                " 9. 720 x 480 P 60Hz",
                "10. 720 x 480 P 59.94Hz",
                "11. 720 x 576 P 50Hz",
                "12. 1280 x 720 P 30Hz",
                "13. 1280 x 720 P 29.97Hz",
                "14. 1280 x 720 P 25Hz",
                "15. 1280 x 720 P 60Hz",
                "16. 1280 x 720 P 59.94Hz",
                "17. 1280 x 720 P 50Hz",
                "18. 1920 x 1080I 60Hz",
                "19. 1920 x 1080I 59.94Hz",
                "20. 1920 x 1080I 50Hz",
                "21. 1920 x 1080P 30Hz",
                "22. 1920 x 1080P 29.97Hz",
                "23. 1920 x 1080P 25Hz",
                "24. 1920 x 1080P 24Hz",
                "25. 1920 x 1080P 23.98Hz",
                "26. 1920 x 1080P 60Hz",
                "27. 1920 x 1080P 59.94Hz",
                "28. 1920 x 1080P 50Hz",
                "29. 1280 x 720 P 50 3D",
                "30. 1280 x 720 P 60 3D",
                "31. 1280 x 720 P 59.94 3D",
                "32. 1920 x 1080P 24 3D",
                "33. 1920 x 1080P 23.976 3D",
                "34. 1920 x 1080P 30 3D",
                "35. 1920 x 1080P 29.97 3D",
                "36. 1920 x 1080P 25 3D" };
            builder. setTitle("Set resolution")
                   .setItems(RESOLUTIONitems, new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int item) {
                            mNative.send_cmd(USER_CMD_RES, item);
                            Log.v(TAG, "Select item " + " " + item + " " + RESOLUTIONitems[item]);
                       }
                   });

            dialog = builder.create();
            break;

        case DIALOG_ASPECT_ID:
            final CharSequence[] ASPECTitems = {"4:3", "16:9"};
            builder.setTitle("Aspect ratio")
                   .setItems(ASPECTitems, new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int item) {
                            mNative.send_cmd(USER_CMD_ASPECT, item);
                            Log.v(TAG, "Select item " + " " + item + " " + ASPECTitems[item]);
                       }
                   });

            dialog = builder.create();
            break;

        case DIALOG_HDCP_ID:
            final CharSequence[] HDCPitems = {"disable HDCP", "enable HDCP"};
            builder.setTitle("HDCP")
                   .setItems(HDCPitems, new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int item) {
                            mNative.send_cmd(USER_CMD_HDCP, item);
                            Log.v(TAG, "Select item " + " " + item + " " + HDCPitems[item]);
                       }
                   });

            dialog = builder.create();
            break;

        case DIALOG_YCC_ID:
            final CharSequence[] YCCitems = {"disable x.v.YCC", "enable x.v.YCC"};
            builder.setTitle("x.v.YCC")
                   .setItems(YCCitems, new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int item) {
                            mNative.send_cmd(USER_CMD_YCC, item);
                            Log.v(TAG, "Select item " + " " + item + " " + YCCitems[item]);
                       }
                   });

            dialog = builder.create();
            break;

        case DIALOG_COLOR_FORMAT_ID:
                builder.setTitle(getString(R.string.HDMI_Cert_Color_Format_title))
                       .setItems(HDMI_COLOR_FORMAT_ENTRIES.toArray(new CharSequence[0]),
                                new DialogInterface.OnClickListener() {
                           public void onClick(DialogInterface dialog, int item) {
                               String value = HDMI_COLOR_FORMAT_VALUES.get(item);
                               Log.v(TAG, "Select " + HDMI_COLOR_FORMAT_ENTRIES.get(item) +
                                       ", value " + value);
                               mVideoOut.setPreferredColorFormat(value);
                           }
                       });

                dialog = builder.create();
                break;

        case DIALOG_AUDIO_OUTPUT_MODE_ID:

            builder.setTitle(getString(R.string.audio_output_title))
                   .setItems(AUDIO_OUTPUT_MODE_ENTRIES.toArray(new CharSequence[0]),
                           new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int item) {
                            String value = AUDIO_OUTPUT_MODE_VALUES.get(item);
                            Log.v(TAG, "Select " + AUDIO_OUTPUT_MODE_ENTRIES.get(item) +
                                    ", value " + value);
                            mAudioOut.setAudioOutputMode(value);
                       }
                   });

            dialog = builder.create();
            break;

        case DIALOG_AUDIO_DRC_MODE_ID:

            builder.setTitle(getString(R.string.audio_drc_title))
                   .setItems(AUDIO_DRC_MODE_ENTRIES.toArray(new CharSequence[0]),
                           new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int item) {
                            String value = AUDIO_DRC_MODE_VALUES.get(item);
                            Log.v(TAG, "Select " + AUDIO_DRC_MODE_ENTRIES.get(item) +
                                    ", value " + value);
                            mAudioOut.setAudioDRCMode(value);
                       }
                   });

            dialog = builder.create();
            break;

        case DIALOG_AUDIO_STEREO_MODE_ID:

            builder.setTitle(getString(R.string.audio_stereo_title))
                   .setItems(AUDIO_STEREO_MODE_ENTRIES.toArray(new CharSequence[0]),
                           new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int item) {
                            String value = AUDIO_STEREO_MODE_VALUES.get(item);
                            Log.v(TAG, "Select " + AUDIO_STEREO_MODE_ENTRIES.get(item) +
                                    ", value " + value);
                            mAudioOut.setAudioStereoMode(value);
                       }
                   });

            dialog = builder.create();
            break;

        case DIALOG_AUDIO_DUAL_MODE_ID:

            builder.setTitle(getString(R.string.audio_dual_title))
                   .setItems(AUDIO_DUAL_MODE_ENTRIES.toArray(new CharSequence[0]),
                           new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int item) {
                            String value = AUDIO_DUAL_MODE_VALUES.get(item);
                            Log.v(TAG, "Select " + AUDIO_DUAL_MODE_ENTRIES.get(item) +
                                    ", value " + value);
                            mAudioOut.setAudioDualMode(value);
                       }
                   });

            dialog = builder.create();
            break;

        case DIALOG_AUDIO_LFE_DOWNMIX_MODE_ID:

            builder.setTitle(getString(R.string.audio_lfe_downmix_title))
                   .setItems(AUDIO_LFE_DOWNMIX_MODE_ENTRIES.toArray(new CharSequence[0]),
                           new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int item) {
                            String value = AUDIO_LFE_DOWNMIX_MODE_VALUES.get(item);
                            Log.v(TAG, "Select " + AUDIO_LFE_DOWNMIX_MODE_ENTRIES.get(item) +
                                    ", value " + value);
                            mAudioOut.setAudioLFEDownmixMode(value);
                       }
                   });

            dialog = builder.create();
            break;

        case DIALOG_AUDIO_SPEAKER_MODE_ID:

            builder.setTitle(getString(R.string.audio_speaker_title))
                   .setItems(AUDIO_SPEAKER_MODE_ENTRIES.toArray(new CharSequence[0]),
                           new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int item) {
                            String value = AUDIO_SPEAKER_MODE_VALUES.get(item);
                            Log.v(TAG, "Select " + AUDIO_SPEAKER_MODE_ENTRIES.get(item) +
                                    ", value " + value);
                            mAudioOut.setAudioSpeakerMode(value);
                       }
                   });

            dialog = builder.create();
            break;

        case DIALOG_AUDIO_CHANNEL_MODE_ID:

                builder.setTitle(getString(R.string.audio_channel_title))
                       .setItems(AUDIO_CHANNEL_MODE_ENTRIES.toArray(new CharSequence[0]),
                               new DialogInterface.OnClickListener() {
                           public void onClick(DialogInterface dialog, int item) {
                                String value = AUDIO_CHANNEL_MODE_VALUES.get(item);
                                Log.v(TAG, "Select " + AUDIO_CHANNEL_MODE_ENTRIES.get(item) +
                                        ", value " + value);
                                mAudioOut.setAudioChannelMode(value);
                           }
                       });

                dialog = builder.create();
                break;

        case DIALOG_EXIT_ID:
            builder.setMessage("Are you sure you want to exit?")
                   .setTitle("Exit")
                   .setIcon(android.R.drawable.ic_dialog_alert)
                   .setCancelable(false)
                   .setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int id) {
                            if (mMySourceHandlerObserver != null) {
                                mAVSettingsObserver.unRegisterHandlerObserver(
                                        mSourceHandlerObsHandle);
                                mMySourceHandlerObserver = null;
                            }
                            mNative.send_cmd(USER_CMD_EXIT, 0);
                            HDMI_CertActivity.this.finish();
                       }
                   })
                   .setNegativeButton("No", new DialogInterface.OnClickListener() {
                       public void onClick(DialogInterface dialog, int id) {
                            dialog.cancel();
                       }
                   });
            dialog = builder.create();
            break;

        default:
            dialog = null;
            break;
        }
        return dialog;
!!!12009868.java!!!	onClick(inout dialog : DialogInterface, in which : int) : void
        Log.v(TAG, "onClick");
        if (which == DialogInterface.BUTTON_POSITIVE) {
            Runtime runtime = Runtime.getRuntime();
            try {
                runtime.exec("/system/NF3/deactivate");
            }
            catch (IOException e) {
                Log.i(TAG, "Can not execute deactivate");
            }
        } else {
            // Reset the toggle
        }
!!!12009996.java!!!	onDismiss(inout dialog : DialogInterface) : void
        // Assuming that onClick gets called first
!!!12010124.java!!!	runCMDFile() : void
        try{
            RandomAccessFile fp = new RandomAccessFile("/data/HDMI_Cert_cmd.txt", "r");
            String strLine;
            int default_delay = 0, loop_depth = -1;
            long [] loop_pos = { 0, 0, 0, 0 };
            int [] loop_cnt = { 0, 0, 0, 0 };

            while ((strLine = fp.readLine()) != null)   {
                // Print the content on the console
                System.out.println (strLine);
                strLine.trim();

                if( strLine.length() == 0 || strLine.startsWith( "#" ) ) {
                    continue;
                }

                if( strLine.compareTo( "end" ) == 0 ) {
                    break;
                } else if( strLine.compareTo( "loopend" ) == 0 ) {
                    if( loop_depth >= 0 && loop_depth < 4 ) {
                        loop_cnt[loop_depth]--;
                        if( loop_cnt[loop_depth] > 0 ) {
                            fp.seek( loop_pos[loop_depth] );
                        } else {
                            loop_depth--;
                        }
                    } else {
                        loop_depth--;
                    }
                } else if( strLine.startsWith( "loop" ) ) {
                    loop_depth++;
                    if( loop_depth >= 0 && loop_depth < 4 ) {
                        loop_cnt[loop_depth] = Integer.valueOf( strLine.substring(4).trim() );
                        loop_pos[loop_depth] = fp.getFilePointer();
                    }
                } else if( strLine.startsWith( "setdefaultdelay" ) ) {
                    default_delay = Integer.valueOf( strLine.substring(15).trim() );
                } else if( strLine.startsWith( "delay" ) ) {
                    int sleeptime = Integer.valueOf( strLine.substring(5).trim() );
                    if( sleeptime > 0 ) {
                        Thread.sleep( sleeptime );
                    }
                } else if ( default_delay != 0 ) {
                    Thread.sleep( default_delay );
                }

                if( strLine.startsWith( "resolution" ) ) {
                    int resid = Integer.valueOf( strLine.substring(10).trim() );
                    mNative.send_cmd(USER_CMD_RES, resid );
                } else if( strLine.compareTo( "hdcp_enable") == 0 ) {
                    mNative.send_cmd(USER_CMD_HDCP, 1);
                } else if( strLine.compareTo( "hdcp_disable") == 0 ) {
                    mNative.send_cmd(USER_CMD_HDCP, 0);
                } else if( strLine.compareTo( "ycc_enable") == 0 ) {
                    mNative.send_cmd(USER_CMD_YCC, 1);
                } else if( strLine.compareTo( "ycc_disable") == 0 ) {
                    mNative.send_cmd(USER_CMD_YCC, 0);
                } else if( strLine.compareTo( "color_format_auto") == 0 ) {
                    mVideoOut.setPreferredColorFormat(HDMI_COLOR_FORMAT_VALUES.get(0));
                } else if( strLine.compareTo( "color_format_rgb") == 0 ) {
                    mVideoOut.setPreferredColorFormat(HDMI_COLOR_FORMAT_VALUES.get(1));
                } else if( strLine.compareTo( "color_format_yuv444") == 0 ) {
                    mVideoOut.setPreferredColorFormat(HDMI_COLOR_FORMAT_VALUES.get(2));
                } else if( strLine.compareTo( "color_format_yuv422") == 0 ) {
                    mVideoOut.setPreferredColorFormat(HDMI_COLOR_FORMAT_VALUES.get(3));
                } else if( strLine.compareTo( "audio_output_passthrough" ) == 0 ) {
                    mAudioOut.setAudioOutputMode(AUDIO_OUTPUT_MODE_VALUES.get(0));
                } else if( strLine.compareTo( "audio_output_pcm" ) == 0 ) {
                    mAudioOut.setAudioOutputMode(AUDIO_OUTPUT_MODE_VALUES.get(1));
                } else if( strLine.compareTo( "audio_drc_off" ) == 0 ) {
                    mAudioOut.setAudioDRCMode(AUDIO_DRC_MODE_VALUES.get(0));
                } else if( strLine.compareTo( "audio_drc_on" ) == 0 ) {
                    mAudioOut.setAudioDRCMode(AUDIO_DRC_MODE_VALUES.get(1));
                } else if( strLine.compareTo( "audio_stereo_auto" ) == 0 ) {
                    mAudioOut.setAudioStereoMode(AUDIO_STEREO_MODE_VALUES.get(0));
                } else if( strLine.compareTo( "audio_stereo_ltrt" ) == 0 ) {
                    mAudioOut.setAudioStereoMode(AUDIO_STEREO_MODE_VALUES.get(1));
                } else if( strLine.compareTo( "audio_stereo_loro" ) == 0 ) {
                    mAudioOut.setAudioStereoMode(AUDIO_STEREO_MODE_VALUES.get(2));
                } else if( strLine.compareTo( "audio_dual_stereo" ) == 0 ) {
                    mAudioOut.setAudioDualMode(AUDIO_DUAL_MODE_VALUES.get(0));
                } else if( strLine.compareTo( "audio_dual_leftmono" ) == 0 ) {
                    mAudioOut.setAudioDualMode(AUDIO_DUAL_MODE_VALUES.get(1));
                } else if( strLine.compareTo( "audio_dual_rightmono" ) == 0 ) {
                    mAudioOut.setAudioDualMode(AUDIO_DUAL_MODE_VALUES.get(2));
                } else if( strLine.compareTo( "audio_dual_mixmono" ) == 0 ) {
                    mAudioOut.setAudioDualMode(AUDIO_DUAL_MODE_VALUES.get(3));
                } else if( strLine.compareTo( "audio_lfe_downmix_off" ) == 0 ) {
                    mAudioOut.setAudioLFEDownmixMode(AUDIO_LFE_DOWNMIX_MODE_VALUES.get(0));
                } else if( strLine.compareTo( "audio_lfe_downmix_on" ) == 0 ) {
                    mAudioOut.setAudioLFEDownmixMode(AUDIO_LFE_DOWNMIX_MODE_VALUES.get(1));
                } else if( strLine.compareTo( "audio_speaker_7.1" ) == 0 ) {
                    mAudioOut.setAudioSpeakerMode(AUDIO_SPEAKER_MODE_VALUES.get(0));
                } else if( strLine.compareTo( "audio_speaker_5.1" ) == 0 ) {
                    mAudioOut.setAudioSpeakerMode(AUDIO_SPEAKER_MODE_VALUES.get(1));
                } else if( strLine.compareTo( "audio_speaker_2.0" ) == 0 ) {
                    mAudioOut.setAudioSpeakerMode(AUDIO_SPEAKER_MODE_VALUES.get(2));
                } else if( strLine.compareTo( "audio_channel_5.1" ) == 0 ) {
                    mAudioOut.setAudioChannelMode(AUDIO_CHANNEL_MODE_VALUES.get(0));
                } else if( strLine.compareTo( "audio_channel_2.0" ) == 0 ) {
                    mAudioOut.setAudioChannelMode(AUDIO_CHANNEL_MODE_VALUES.get(1));
                } else if( strLine.compareTo( "aspect_4x3" ) == 0 ) {
                    mNative.send_cmd(USER_CMD_ASPECT, 0);
                } else if( strLine.compareTo( "aspect_16x9" ) == 0 ) {
                    mNative.send_cmd(USER_CMD_ASPECT, 1);
                } else {
                    Log.i(TAG, "Skip unknown command: " + strLine );
                }
            }

            fp.close();
        }
        catch (Exception e){//Catch exception if any
            System.err.println("Error: " + e.getMessage());
        }

!!!12010252.java!!!	internalInit() : void
        // HDMI Color Format
        HDMI_COLOR_FORMAT_ENTRIES = new ArrayList<CharSequence>();
        HDMI_COLOR_FORMAT_ENTRIES.add(getString(R.string.HDMI_Cert_Color_Format_Auto));
        HDMI_COLOR_FORMAT_ENTRIES.add(getString(R.string.HDMI_Cert_Color_Format_RGB));
        HDMI_COLOR_FORMAT_ENTRIES.add(getString(R.string.HDMI_Cert_Color_Format_YCbCr444));
        HDMI_COLOR_FORMAT_ENTRIES.add(getString(R.string.HDMI_Cert_Color_Format_YCbCr422));
        HDMI_COLOR_FORMAT_VALUES = new ArrayList<String>();
        HDMI_COLOR_FORMAT_VALUES.add(VideoOutput.VALUE_COLOR_FORMAT_AUTO);
        HDMI_COLOR_FORMAT_VALUES.add(VideoOutput.VALUE_COLOR_FORMAT_RGB);
        HDMI_COLOR_FORMAT_VALUES.add(VideoOutput.VALUE_COLOR_FORMAT_YCBCR444);
        HDMI_COLOR_FORMAT_VALUES.add(VideoOutput.VALUE_COLOR_FORMAT_YCBCR422);

        // Audio Output Mode
        AUDIO_OUTPUT_MODE_ENTRIES = new ArrayList<CharSequence>();
        AUDIO_OUTPUT_MODE_ENTRIES.add(getString(R.string.audio_output_passthrough));
        AUDIO_OUTPUT_MODE_ENTRIES.add(getString(R.string.audio_output_pcm));
        AUDIO_OUTPUT_MODE_VALUES = new ArrayList<String>();
        AUDIO_OUTPUT_MODE_VALUES.add(AudioOutput.VALUE_OUTPUT_AUTO);
        AUDIO_OUTPUT_MODE_VALUES.add(AudioOutput.VALUE_OUTPUT_PCM);

        // Audio DRC Mode
        AUDIO_DRC_MODE_ENTRIES = new ArrayList<CharSequence>();
        AUDIO_DRC_MODE_ENTRIES.add(getString(R.string.audio_drc_off));
        AUDIO_DRC_MODE_ENTRIES.add( getString(R.string.audio_drc_on));
        AUDIO_DRC_MODE_VALUES = new ArrayList<String>();
        AUDIO_DRC_MODE_VALUES.add(AudioOutput.VALUE_DRC_OFF);
        AUDIO_DRC_MODE_VALUES.add(AudioOutput.VALUE_DRC_ON);

        // Audio Stereo Mode
        AUDIO_STEREO_MODE_ENTRIES = new ArrayList<CharSequence>();
        AUDIO_STEREO_MODE_ENTRIES.add(getString(R.string.audio_stereo_auto));
        AUDIO_STEREO_MODE_ENTRIES.add(getString(R.string.audio_stereo_ltrt));
        AUDIO_STEREO_MODE_ENTRIES.add(getString(R.string.audio_stereo_loro));
        AUDIO_STEREO_MODE_VALUES = new ArrayList<String>();
        AUDIO_STEREO_MODE_VALUES.add(AudioOutput.VALUE_STEREO_AUTO);
        AUDIO_STEREO_MODE_VALUES.add(AudioOutput.VALUE_STEREO_LTRT);
        AUDIO_STEREO_MODE_VALUES.add(AudioOutput.VALUE_STEREO_LORO);

        // Audio Dual Mode
        AUDIO_DUAL_MODE_ENTRIES = new ArrayList<CharSequence>();
        AUDIO_DUAL_MODE_ENTRIES.add(getString(R.string.audio_dual_stereo));
        AUDIO_DUAL_MODE_ENTRIES.add(getString(R.string.audio_dual_leftmono));
        AUDIO_DUAL_MODE_ENTRIES.add(getString(R.string.audio_dual_rightmono));
        AUDIO_DUAL_MODE_ENTRIES.add(getString(R.string.audio_dual_mixmono));
        AUDIO_DUAL_MODE_VALUES = new ArrayList<String>();
        AUDIO_DUAL_MODE_VALUES.add(AudioOutput.VALUE_DUAL_STEREO);
        AUDIO_DUAL_MODE_VALUES.add(AudioOutput.VALUE_DUAL_LEFTMONO);
        AUDIO_DUAL_MODE_VALUES.add(AudioOutput.VALUE_DUAL_RIGHTMONO);
        AUDIO_DUAL_MODE_VALUES.add(AudioOutput.VALUE_DUAL_MIXMONO);

        // Audio LFE Downmix Mode
        AUDIO_LFE_DOWNMIX_MODE_ENTRIES = new ArrayList<CharSequence>();
        AUDIO_LFE_DOWNMIX_MODE_ENTRIES.add(getString(R.string.audio_lfe_downmix_off));
        AUDIO_LFE_DOWNMIX_MODE_ENTRIES.add(getString(R.string.audio_lfe_downmix_on));
        AUDIO_LFE_DOWNMIX_MODE_VALUES = new ArrayList<String>();
        AUDIO_LFE_DOWNMIX_MODE_VALUES.add(AudioOutput.VALUE_LFE_DOWNMIX_OFF);
        AUDIO_LFE_DOWNMIX_MODE_VALUES.add(AudioOutput.VALUE_LFE_DOWNMIX_ON);

        // Audio Speaker Mode
        AUDIO_SPEAKER_MODE_ENTRIES = new ArrayList<CharSequence>();
        AUDIO_SPEAKER_MODE_ENTRIES.add(getString(R.string.audio_speaker_7_1));
        AUDIO_SPEAKER_MODE_ENTRIES.add(getString(R.string.audio_speaker_5_1));
        AUDIO_SPEAKER_MODE_ENTRIES.add(getString(R.string.audio_speaker_2_0));
        AUDIO_SPEAKER_MODE_VALUES = new ArrayList<String>();
        AUDIO_SPEAKER_MODE_VALUES.add(AudioOutput.VALUE_SPEAKER_7_1);
        AUDIO_SPEAKER_MODE_VALUES.add(AudioOutput.VALUE_SPEAKER_5_1);
        AUDIO_SPEAKER_MODE_VALUES.add(AudioOutput.VALUE_SPEAKER_2_0);

        // Audio Channel Mode: only 2.0/5.1 for DCV
        AUDIO_CHANNEL_MODE_ENTRIES = new ArrayList<CharSequence>();
        AUDIO_CHANNEL_MODE_ENTRIES.add(getString(R.string.audio_channel_5_1));
        AUDIO_CHANNEL_MODE_ENTRIES.add(getString(R.string.audio_channel_2_0));
        AUDIO_CHANNEL_MODE_VALUES = new ArrayList<String>();
        AUDIO_CHANNEL_MODE_VALUES.add(AudioOutput.VALUE_CHANNEL_5_1);
        AUDIO_CHANNEL_MODE_VALUES.add(AudioOutput.VALUE_CHANNEL_2_0);
