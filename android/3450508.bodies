class DexBuffer
!!!15040140.java!!!	DexBuffer()
        this.data = new byte[0];
!!!15040268.java!!!	DexBuffer(inout data : byte)
        this.data = data;
        this.length = data.length;
        this.tableOfContents.readFrom(this);
!!!15040396.java!!!	DexBuffer(inout in : InputStream)
        loadFrom(in);
!!!15040524.java!!!	DexBuffer(inout file : File)
        if (FileUtils.hasArchiveSuffix(file.getName())) {
            ZipFile zipFile = new ZipFile(file);
            ZipEntry entry = zipFile.getEntry(DexFormat.DEX_IN_JAR_NAME);
            if (entry != null) {
                loadFrom(zipFile.getInputStream(entry));
                zipFile.close();
            } else {
                throw new DexException("Expected " + DexFormat.DEX_IN_JAR_NAME + " in " + file);
            }
        } else if (file.getName().endsWith(".dex")) {
            loadFrom(new FileInputStream(file));
        } else {
            throw new DexException("unknown output extension: " + file);
        }
!!!15040652.java!!!	loadFrom(inout in : InputStream) : void
        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();
        byte[] buffer = new byte[8192];

        int count;
        while ((count = in.read(buffer)) != -1) {
            bytesOut.write(buffer, 0, count);
        }
        in.close();

        this.data = bytesOut.toByteArray();
        this.length = data.length;
        this.tableOfContents.readFrom(this);
!!!15040780.java!!!	checkBounds(in index : int, in length : int) : void
        if (index < 0 || index >= length) {
            throw new IndexOutOfBoundsException("index:" + index + ", length=" + length);
        }
!!!15040908.java!!!	writeTo(inout out : OutputStream) : void
        out.write(data);
!!!15041036.java!!!	writeTo(inout dexOut : File) : void
        OutputStream out = new FileOutputStream(dexOut);
        writeTo(out);
        out.close();
!!!15041164.java!!!	getTableOfContents() : TableOfContents
        return tableOfContents;
!!!15041292.java!!!	open(in position : int) : Section
        if (position < 0 || position > length) {
            throw new IllegalArgumentException("position=" + position + " length=" + length);
        }
        return new Section(position);
!!!15041420.java!!!	appendSection(in maxByteCount : int, inout name : String) : Section
        int limit = fourByteAlign(length + maxByteCount);
        Section result = new Section(name, length, limit);
        length = limit;
        return result;
!!!15041548.java!!!	noMoreSections() : void
        data = new byte[length];
!!!15041676.java!!!	getLength() : int
        return length;
!!!15041804.java!!!	fourByteAlign(in position : int) : int
        return (position + 3) & ~3;
!!!15041932.java!!!	getBytes() : byte
        return data;
!!!15042060.java!!!	strings() : String
        return strings;
!!!15042188.java!!!	typeIds() : List<Integer>
        return typeIds;
!!!15042316.java!!!	typeNames() : String
        return typeNames;
!!!15042444.java!!!	protoIds() : ProtoId
        return protoIds;
!!!15042572.java!!!	fieldIds() : FieldId
        return fieldIds;
!!!15042700.java!!!	methodIds() : MethodId
        return methodIds;
!!!15042828.java!!!	classDefs() : ClassDef
        return new Iterable<ClassDef>() {
            public Iterator<ClassDef> iterator() {
                if (!tableOfContents.classDefs.exists()) {
                    return Collections.<ClassDef>emptySet().iterator();
                }
                return new Iterator<ClassDef>() {
                    private DexBuffer.Section in = open(tableOfContents.classDefs.off);
                    private int count = 0;

                    public boolean hasNext() {
                        return count < tableOfContents.classDefs.size;
                    }
                    public ClassDef next() {
                        if (!hasNext()) {
                            throw new NoSuchElementException();
                        }
                        count++;
                        return in.readClassDef();
                    }
                    public void remove() {
                        throw new UnsupportedOperationException();
                    }
                };
            }
        };
!!!15042956.java!!!	readTypeList(in offset : int) : TypeList
        if (offset == 0) {
            return TypeList.EMPTY;
        }
        return open(offset).readTypeList();
!!!15043084.java!!!	readClassData(inout classDef : ClassDef) : ClassData
        int offset = classDef.getClassDataOffset();
        if (offset == 0) {
            throw new IllegalArgumentException("offset == 0");
        }
        return open(offset).readClassData();
!!!15043212.java!!!	readCode(inout method : Method) : Code
        int offset = method.getCodeOffset();
        if (offset == 0) {
            throw new IllegalArgumentException("offset == 0");
        }
        return open(offset).readCode();
