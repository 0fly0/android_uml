class Bitmap_Delegate
!!!9391884.java!!!	getDelegate(inout bitmap : Bitmap) : Bitmap_Delegate
        return sManager.getDelegate(bitmap.mNativeBitmap);
!!!9392012.java!!!	getDelegate(in native_bitmap : int) : Bitmap_Delegate
        return sManager.getDelegate(native_bitmap);
!!!9392140.java!!!	createBitmap(inout input : File, inout isMutable : boolean, inout density : Density) : Bitmap
        // create a delegate with the content of the file.
        Bitmap_Delegate delegate = new Bitmap_Delegate(ImageIO.read(input), Config.ARGB_8888);

        return createBitmap(delegate, isMutable, density.getDpiValue());
!!!9392268.java!!!	createBitmap(inout input : InputStream, inout isMutable : boolean, inout density : Density) : Bitmap
        // create a delegate with the content of the stream.
        Bitmap_Delegate delegate = new Bitmap_Delegate(ImageIO.read(input), Config.ARGB_8888);

        return createBitmap(delegate, isMutable, density.getDpiValue());
!!!9392396.java!!!	createBitmap(inout image : BufferedImage, inout isMutable : boolean, inout density : Density) : Bitmap
        // create a delegate with the given image.
        Bitmap_Delegate delegate = new Bitmap_Delegate(image, Config.ARGB_8888);

        return createBitmap(delegate, isMutable, density.getDpiValue());
!!!9392524.java!!!	getImage(inout bitmap : Bitmap) : BufferedImage
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(bitmap.mNativeBitmap);
        if (delegate == null) {
            return null;
        }

        return delegate.mImage;
!!!9392652.java!!!	getBufferedImageType(in nativeBitmapConfig : int) : int
        switch (Config.nativeToConfig(nativeBitmapConfig)) {
            case ALPHA_8:
                return BufferedImage.TYPE_INT_ARGB;
            case RGB_565:
                return BufferedImage.TYPE_INT_ARGB;
            case ARGB_4444:
                return BufferedImage.TYPE_INT_ARGB;
            case ARGB_8888:
                return BufferedImage.TYPE_INT_ARGB;
        }

        return BufferedImage.TYPE_INT_ARGB;
!!!9392780.java!!!	getImage() : BufferedImage
        return mImage;
!!!9392908.java!!!	getConfig() : Config
        return mConfig;
!!!9393036.java!!!	hasAlpha() : boolean
        return mHasAlpha && mConfig != Config.RGB_565;
!!!9393164.java!!!	change() : void
        mGenerationId++;
!!!9393292.java!!!	nativeCreate(inout colors : int, in offset : int, in stride : int, in width : int, in height : int, in nativeConfig : int, inout mutable : boolean) : Bitmap
        int imageType = getBufferedImageType(nativeConfig);

        // create the image
        BufferedImage image = new BufferedImage(width, height, imageType);

        if (colors != null) {
            image.setRGB(0, 0, width, height, colors, offset, stride);
        }

        // create a delegate with the content of the stream.
        Bitmap_Delegate delegate = new Bitmap_Delegate(image, Config.nativeToConfig(nativeConfig));

        return createBitmap(delegate, mutable, Bitmap.getDefaultDensity());
!!!9393420.java!!!	nativeCopy(in srcBitmap : int, in nativeConfig : int, inout isMutable : boolean) : Bitmap
        Bitmap_Delegate srcBmpDelegate = sManager.getDelegate(srcBitmap);
        if (srcBmpDelegate == null) {
            return null;
        }

        BufferedImage srcImage = srcBmpDelegate.getImage();

        int width = srcImage.getWidth();
        int height = srcImage.getHeight();

        int imageType = getBufferedImageType(nativeConfig);

        // create the image
        BufferedImage image = new BufferedImage(width, height, imageType);

        // copy the source image into the image.
        int[] argb = new int[width * height];
        srcImage.getRGB(0, 0, width, height, argb, 0, width);
        image.setRGB(0, 0, width, height, argb, 0, width);

        // create a delegate with the content of the stream.
        Bitmap_Delegate delegate = new Bitmap_Delegate(image, Config.nativeToConfig(nativeConfig));

        return createBitmap(delegate, isMutable, Bitmap.getDefaultDensity());
!!!9393548.java!!!	nativeDestructor(in nativeBitmap : int) : void
        sManager.removeJavaReferenceFor(nativeBitmap);
!!!9393676.java!!!	nativeRecycle(in nativeBitmap : int) : void
        sManager.removeJavaReferenceFor(nativeBitmap);
!!!9393804.java!!!	nativeCompress(in nativeBitmap : int, in format : int, in quality : int, inout stream : OutputStream, inout tempStorage : byte) : boolean
        Bridge.getLog().error(LayoutLog.TAG_UNSUPPORTED,
                "Bitmap.compress() is not supported", null /*data*/);
        return true;
!!!9393932.java!!!	nativeErase(in nativeBitmap : int, in color : int) : void
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        BufferedImage image = delegate.mImage;

        Graphics2D g = image.createGraphics();
        try {
            g.setColor(new java.awt.Color(color, true));

            g.fillRect(0, 0, image.getWidth(), image.getHeight());
        } finally {
            g.dispose();
        }
!!!9394060.java!!!	nativeWidth(in nativeBitmap : int) : int
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return 0;
        }

        return delegate.mImage.getWidth();
!!!9394188.java!!!	nativeHeight(in nativeBitmap : int) : int
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return 0;
        }

        return delegate.mImage.getHeight();
!!!9394316.java!!!	nativeRowBytes(in nativeBitmap : int) : int
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return 0;
        }

        return delegate.mImage.getWidth();
!!!9394444.java!!!	nativeConfig(in nativeBitmap : int) : int
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return 0;
        }

        return delegate.mConfig.nativeInt;
!!!9394572.java!!!	nativeHasAlpha(in nativeBitmap : int) : boolean
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return true;
        }

        return delegate.mHasAlpha;
!!!9394700.java!!!	nativeGetPixel(in nativeBitmap : int, in x : int, in y : int) : int
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return 0;
        }

        return delegate.mImage.getRGB(x, y);
!!!9394828.java!!!	nativeGetPixels(in nativeBitmap : int, inout pixels : int, in offset : int, in stride : int, in x : int, in y : int, in width : int, in height : int) : void
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        delegate.getImage().getRGB(x, y, width, height, pixels, offset, stride);
!!!9394956.java!!!	nativeSetPixel(in nativeBitmap : int, in x : int, in y : int, in color : int) : void
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        delegate.getImage().setRGB(x, y, color);
!!!9395084.java!!!	nativeSetPixels(in nativeBitmap : int, inout colors : int, in offset : int, in stride : int, in x : int, in y : int, in width : int, in height : int) : void
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        delegate.getImage().setRGB(x, y, width, height, colors, offset, stride);
!!!9395212.java!!!	nativeCopyPixelsToBuffer(in nativeBitmap : int, inout dst : Buffer) : void
        // FIXME implement native delegate
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Bitmap.copyPixelsToBuffer is not supported.", null, null /*data*/);
!!!9395340.java!!!	nativeCopyPixelsFromBuffer(in nb : int, inout src : Buffer) : void
        // FIXME implement native delegate
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Bitmap.copyPixelsFromBuffer is not supported.", null, null /*data*/);
!!!9395468.java!!!	nativeGenerationId(in nativeBitmap : int) : int
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return 0;
        }

        return delegate.mGenerationId;
!!!9395596.java!!!	nativeCreateFromParcel(inout p : Parcel) : Bitmap
        // This is only called by Bitmap.CREATOR (Parcelable.Creator<Bitmap>), which is only
        // used during aidl call so really this should not be called.
        Bridge.getLog().error(LayoutLog.TAG_UNSUPPORTED,
                "AIDL is not suppored, and therefore Bitmaps cannot be created from parcels.",
                null /*data*/);
        return null;
!!!9395724.java!!!	nativeWriteToParcel(in nativeBitmap : int, inout isMutable : boolean, in density : int, inout p : Parcel) : boolean
        // This is only called when sending a bitmap through aidl, so really this should not
        // be called.
        Bridge.getLog().error(LayoutLog.TAG_UNSUPPORTED,
                "AIDL is not suppored, and therefore Bitmaps cannot be written to parcels.",
                null /*data*/);
        return false;
!!!9395852.java!!!	nativeExtractAlpha(in nativeBitmap : int, in nativePaint : int, inout offsetXY : int) : Bitmap
        Bitmap_Delegate bitmap = sManager.getDelegate(nativeBitmap);
        if (bitmap == null) {
            return null;
        }

        // get the paint which can be null if nativePaint is 0.
        Paint_Delegate paint = Paint_Delegate.getDelegate(nativePaint);

        if (paint != null && paint.getMaskFilter() != null) {
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_MASKFILTER,
                    "MaskFilter not supported in Bitmap.extractAlpha",
                    null, null /*data*/);
        }

        int alpha = paint != null ? paint.getAlpha() : 0xFF;
        BufferedImage image = createCopy(bitmap.getImage(), BufferedImage.TYPE_INT_ARGB, alpha);

        // create the delegate. The actual Bitmap config is only an alpha channel
        Bitmap_Delegate delegate = new Bitmap_Delegate(image, Config.ALPHA_8);

        // the density doesn't matter, it's set by the Java method.
        return createBitmap(delegate, false /*isMutable*/,
                Density.DEFAULT_DENSITY /*density*/);
!!!9395980.java!!!	nativePrepareToDraw(in nativeBitmap : int) : void
        // nothing to be done here.
!!!9396108.java!!!	nativeSetHasAlpha(in nativeBitmap : int, inout hasAlpha : boolean) : void
        // get the delegate from the native int.
        Bitmap_Delegate delegate = sManager.getDelegate(nativeBitmap);
        if (delegate == null) {
            return;
        }

        delegate.mHasAlpha = hasAlpha;
!!!9396236.java!!!	nativeSameAs(in nb0 : int, in nb1 : int) : boolean
        Bitmap_Delegate delegate1 = sManager.getDelegate(nb0);
        if (delegate1 == null) {
            return false;
        }

        Bitmap_Delegate delegate2 = sManager.getDelegate(nb1);
        if (delegate2 == null) {
            return false;
        }

        BufferedImage image1 = delegate1.getImage();
        BufferedImage image2 = delegate2.getImage();
        if (delegate1.mConfig != delegate2.mConfig ||
                image1.getWidth() != image2.getWidth() ||
                image1.getHeight() != image2.getHeight()) {
            return false;
        }

        // get the internal data
        int w = image1.getWidth();
        int h = image2.getHeight();
        int[] argb1 = new int[w*h];
        int[] argb2 = new int[w*h];

        image1.getRGB(0, 0, w, h, argb1, 0, w);
        image2.getRGB(0, 0, w, h, argb2, 0, w);

        // compares
        if (delegate1.mConfig == Config.ALPHA_8) {
            // in this case we have to manually compare the alpha channel as the rest is garbage.
            final int length = w*h;
            for (int i = 0 ; i < length ; i++) {
                if ((argb1[i] & 0xFF000000) != (argb2[i] & 0xFF000000)) {
                    return false;
                }
            }
            return true;
        }

        return Arrays.equals(argb1, argb2);
!!!9396364.java!!!	Bitmap_Delegate(inout image : BufferedImage, inout config : Config)
        mImage = image;
        mConfig = config;
!!!9396492.java!!!	createBitmap(inout delegate : Bitmap_Delegate, inout isMutable : boolean, in density : int) : Bitmap
        // get its native_int
        int nativeInt = sManager.addNewDelegate(delegate);

        // and create/return a new Bitmap with it
        return new Bitmap(nativeInt, null /* buffer */, isMutable, null /*ninePatchChunk*/, 
                density);
!!!9396620.java!!!	createCopy(inout image : BufferedImage, in imageType : int, in alpha : int) : BufferedImage
        int w = image.getWidth();
        int h = image.getHeight();

        BufferedImage result = new BufferedImage(w, h, imageType);

        int[] argb = new int[w * h];
        image.getRGB(0, 0, image.getWidth(), image.getHeight(), argb, 0, image.getWidth());

        if (alpha != 255) {
            final int length = argb.length;
            for (int i = 0 ; i < length; i++) {
                int a = (argb[i] >>> 24 * alpha) / 255;
                argb[i] = (a << 24) | (argb[i] & 0x00FFFFFF);
            }
        }

        result.setRGB(0, 0, w, h, argb, 0, w);

        return result;
