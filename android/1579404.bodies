class WifiP2pServiceRequest
!!!9807884.java!!!	WifiP2pServiceRequest(in protocolType : int, in query : String)
        validateQuery(query);

        mProtocolType = protocolType;
        mQuery = query;
        if (query != null) {
            mLength = query.length()/2 + 2;
        } else {
            mLength = 2;
        }
!!!9808012.java!!!	WifiP2pServiceRequest(in serviceType : int, in length : int, in transId : int, in query : String)
        mProtocolType = serviceType;
        mLength = length;
        mTransId = transId;
        mQuery = query;
!!!9808140.java!!!	getTransactionId() : int
        return mTransId;
!!!9808268.java!!!	setTransactionId(in id : int) : void
        mTransId = id;
!!!9808396.java!!!	getSupplicantQuery() : String
        StringBuffer sb = new StringBuffer();
        // length is retained as little endian format.
        sb.append(String.format("%02x", (mLength) & 0xff));
        sb.append(String.format("%02x", (mLength >> 8) & 0xff));
        sb.append(String.format("%02x", mProtocolType));
        sb.append(String.format("%02x", mTransId));
        if (mQuery != null) {
            sb.append(mQuery);
        }

        return sb.toString();
!!!9808524.java!!!	validateQuery(in query : String) : void
        if (query == null) {
            return;
        }

        int UNSIGNED_SHORT_MAX = 0xffff;
        if (query.length()%2 == 1) {
            throw new IllegalArgumentException(
                    "query size is invalid. query=" + query);
        }
        if (query.length()/2 > UNSIGNED_SHORT_MAX) {
            throw new IllegalArgumentException(
                    "query size is too large. len=" + query.length());
        }

        // check whether query is hex string.
        query = query.toLowerCase();
        char[] chars = query.toCharArray();
        for (char c: chars) {
            if (!((c >= '0' && c <= '9') ||
                    (c >= 'a' && c <= 'f'))){
                throw new IllegalArgumentException(
                        "query should be hex string. query=" + query);
            }
        }
!!!9808652.java!!!	newInstance(in protocolType : int, in queryData : String) : WifiP2pServiceRequest
        return new WifiP2pServiceRequest(protocolType, queryData);
!!!9808780.java!!!	newInstance(in protocolType : int) : WifiP2pServiceRequest
        return new WifiP2pServiceRequest(protocolType, null);
!!!9808908.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }
        if (!(o instanceof WifiP2pServiceRequest)) {
            return false;
        }

        WifiP2pServiceRequest req = (WifiP2pServiceRequest)o;

        /*
         * Not compare transaction id.
         * Transaction id may be changed on each service discovery operation.
         */
        if ((req.mProtocolType != mProtocolType) ||
                (req.mLength != mLength)) {
            return false;
        }

        if (req.mQuery == null && mQuery == null) {
            return true;
        } else if (req.mQuery != null) {
            return req.mQuery.equals(mQuery);
        }
        return false;
!!!9809036.java!!!	hashCode() : int
        int result = 17;
        result = 31 * result + mProtocolType;
        result = 31 * result + mLength;
        result = 31 * result + (mQuery == null ? 0 : mQuery.hashCode());
        return result;
!!!9809164.java!!!	describeContents() : int
        return 0;
!!!9809292.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeInt(mProtocolType);
        dest.writeInt(mLength);
        dest.writeInt(mTransId);
        dest.writeString(mQuery);
