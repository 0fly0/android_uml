class NonBlockingAudioTrack
!!!12723468.java!!!	NonBlockingAudioTrack(in sampleRate : int, in channelCount : int)
        int channelConfig;
        switch (channelCount) {
            case 1:
                channelConfig = AudioFormat.CHANNEL_OUT_MONO;
                break;
            case 2:
                channelConfig = AudioFormat.CHANNEL_OUT_STEREO;
                break;
            case 6:
                channelConfig = AudioFormat.CHANNEL_OUT_5POINT1;
                break;
            default:
                throw new IllegalArgumentException();
        }

        int minBufferSize =
            AudioTrack.getMinBufferSize(
                    sampleRate,
                    channelConfig,
                    AudioFormat.ENCODING_PCM_16BIT);

        int bufferSize = 8 * minBufferSize;

        mAudioTrack = new AudioTrack(
                AudioManager.STREAM_MUSIC,
                sampleRate,
                channelConfig,
                AudioFormat.ENCODING_PCM_16BIT,
                bufferSize,
                AudioTrack.MODE_STREAM);

        mSampleRate = sampleRate;
        mFrameSize = 2 * channelCount;
        mBufferSizeInFrames = bufferSize / mFrameSize;

        mHandler = new Handler() {
            public void handleMessage(Message msg) {
                switch (msg.what) {
                    case EVENT_WRITE_MORE:
                        writeMore();
                        mWriteMorePending = false;
                        break;

                    default:
                        break;
                }
            }
        };
!!!12723596.java!!!	play() : void
        mAudioTrack.play();
!!!12723724.java!!!	stop() : void
        cancelWriteMore();

        mAudioTrack.stop();

        mNumFramesSubmitted = 0;
!!!12723852.java!!!	pause() : void
        cancelWriteMore();

        mAudioTrack.pause();
!!!12723980.java!!!	release() : void
        cancelWriteMore();

        mAudioTrack.release();
        mAudioTrack = null;
!!!12724108.java!!!	getPlayState() : int
        return mAudioTrack.getPlayState();
!!!12724236.java!!!	writeMore() : void
        if (mQueue.isEmpty()) {
            return;
        }

        int numFramesPlayed = mAudioTrack.getPlaybackHeadPosition();
        int numFramesPending = mNumFramesSubmitted - numFramesPlayed;
        int numFramesAvailableToWrite = mBufferSizeInFrames - numFramesPending;
        int numBytesAvailableToWrite = numFramesAvailableToWrite * mFrameSize;

        while (numBytesAvailableToWrite > 0) {
            QueueElem elem = mQueue.peekFirst();

            int numBytes = elem.size;
            if (numBytes > numBytesAvailableToWrite) {
                numBytes = numBytesAvailableToWrite;
            }

            int written = mAudioTrack.write(elem.data, elem.offset, numBytes);
            assert(written == numBytes);

            mNumFramesSubmitted += written / mFrameSize;

            elem.size -= numBytes;
            if (elem.size == 0) {
                mQueue.removeFirst();

                if (mQueue.isEmpty()) {
                    break;
                }
            } else {
                elem.offset += numBytes;
                break;
            }

            numBytesAvailableToWrite -= numBytes;
        }

        if (!mQueue.isEmpty()) {
            scheduleWriteMore();
        }
!!!12724364.java!!!	scheduleWriteMore() : void
        if (mWriteMorePending) {
            return;
        }

        int numFramesPlayed = mAudioTrack.getPlaybackHeadPosition();
        int numFramesPending = mNumFramesSubmitted - numFramesPlayed;
        int pendingDurationMs = 1000 * numFramesPending / mSampleRate;

        mWriteMorePending = true;
        mHandler.sendMessageDelayed(
                mHandler.obtainMessage(EVENT_WRITE_MORE),
                pendingDurationMs / 3);
!!!12724492.java!!!	cancelWriteMore() : void
        mHandler.removeMessages(EVENT_WRITE_MORE);
        mWriteMorePending = false;
!!!12724620.java!!!	write(inout data : byte, in size : int) : void
        QueueElem elem = new QueueElem();
        elem.data = data;
        elem.offset = 0;
        elem.size = size;

        mQueue.add(elem);

        scheduleWriteMore();
