class X509CertPathImpl
!!!2194587.java!!!	X509CertPathImpl(inout certs : List)
        super("X.509");

        final int size = certs.size();
        certificates = new ArrayList<X509Certificate>(size);

        for (int i = 0; i < size; i++) {
            final java.security.cert.Certificate cert = certs.get(i);
            if (!(cert instanceof X509Certificate)) {
                throw new CertificateException("Certificate " + i + " is not an X.509 certificate");
            }

            certificates.add((X509Certificate) cert);
        }
!!!2194715.java!!!	X509CertPathImpl(inout certs : List, inout type : Encoding)
        super("X.509");

        certificates = certs;
!!!2194843.java!!!	getCertPathFromContentInfo(inout contentInfo : ContentInfo) : X509CertPathImpl
        final SignedData sd = contentInfo.getSignedData();
        if (sd == null) {
            throw new CertificateException("Incorrect PKCS7 encoded form: missing signed data");
        }

        List<Certificate> certs = sd.getCertificates();
        if (certs == null) {
            certs = Collections.emptyList();
        }

        final List<X509Certificate> result = new ArrayList<X509Certificate>(certs.size());
        for (Certificate cert : certs) {
            result.add(new X509CertImpl(cert));
        }

        return new X509CertPathImpl(result, Encoding.PKCS7);
!!!2194971.java!!!	getInstance(inout in : InputStream) : X509CertPathImpl
        try {
            return (X509CertPathImpl) ASN1.decode(in);
        } catch (IOException e) {
            throw new CertificateException("Failed to decode CertPath", e);
        }
!!!2195099.java!!!	getInstance(inout in : InputStream, inout encoding : String) : X509CertPathImpl
        try {
            final Encoding encType = Encoding.findByApiName(encoding);
            if (encType == null) {
                throw new CertificateException("Unsupported encoding: " + encoding);
            }

            switch (encType) {
                case PKI_PATH:
                    return (X509CertPathImpl) ASN1.decode(in);
                case PKCS7:
                    return getCertPathFromContentInfo((ContentInfo) ContentInfo.ASN1.decode(in));
                default:
                    throw new CertificateException("Unsupported encoding: " + encoding);
            }
        } catch (IOException e) {
            throw new CertificateException("Failed to decode CertPath", e);
        }
!!!2195227.java!!!	getInstance(inout in : byte) : X509CertPathImpl
        try {
            return (X509CertPathImpl) ASN1.decode(in);
        } catch (IOException e) {
            throw new CertificateException("Failed to decode CertPath", e);
        }
!!!2195355.java!!!	getInstance(inout in : byte, inout encoding : String) : X509CertPathImpl
        try {
            final Encoding encType = Encoding.findByApiName(encoding);
            if (encType == null) {
                throw new CertificateException("Unsupported encoding: " + encoding);
            }

            switch (encType) {
                case PKI_PATH:
                    return (X509CertPathImpl) ASN1.decode(in);
                case PKCS7:
                    return getCertPathFromContentInfo((ContentInfo) ContentInfo.ASN1.decode(in));
                default:
                    throw new CertificateException("Unsupported encoding: " + encoding);
            }
        } catch (IOException e) {
            throw new CertificateException("Failed to decode CertPath", e);
        }
!!!2195483.java!!!	getCertificates() : List
        return Collections.unmodifiableList(certificates);
!!!2195611.java!!!	getEncoded() : byte
        return getEncoded(Encoding.PKI_PATH);
!!!2195739.java!!!	getEncoded(inout encoding : Encoding) : byte
        switch (encoding) {
            case PKI_PATH:
                if (pkiPathEncoding == null) {
                    pkiPathEncoding = ASN1.encode(this);
                }

                return pkiPathEncoding.clone();
            case PKCS7:
                if (pkcs7Encoding == null) {
                    pkcs7Encoding = PKCS7_SIGNED_DATA_OBJECT.encode(this);
                }

                return pkcs7Encoding.clone();
            default:
                throw new CertificateEncodingException("Unsupported encoding: " + encoding);
        }
!!!2195867.java!!!	getEncoded(inout encoding : String) : byte
        final Encoding encType = Encoding.findByApiName(encoding);
        if (encType == null) {
            throw new CertificateEncodingException("Unsupported encoding: " + encoding);
        }

        return getEncoded(encType);
!!!2195995.java!!!	getEncodings() : Iterator
        return encodings.iterator();
