class AppWidgetService
!!!8020876.java!!!	AppWidgetService(inout context : Context)
        mContext = context;

        HandlerThread handlerThread = new HandlerThread("AppWidgetService -- Save state");
        handlerThread.start();
        mSaveStateHandler = new Handler(handlerThread.getLooper());

        mAppWidgetServices = new SparseArray<AppWidgetServiceImpl>(5);
        AppWidgetServiceImpl primary = new AppWidgetServiceImpl(context, 0, mSaveStateHandler);
        mAppWidgetServices.append(0, primary);
!!!8021004.java!!!	systemReady(inout safeMode : boolean) : void
        mSafeMode = safeMode;

        mAppWidgetServices.get(0).systemReady(safeMode);

        // Register for the boot completed broadcast, so we can send the
        // ENABLE broacasts. If we try to send them now, they time out,
        // because the system isn't ready to handle them yet.
        mContext.registerReceiverAsUser(mBroadcastReceiver, UserHandle.ALL,
                new IntentFilter(Intent.ACTION_BOOT_COMPLETED), null, null);

        // Register for configuration changes so we can update the names
        // of the widgets when the locale changes.
        mContext.registerReceiverAsUser(mBroadcastReceiver, UserHandle.ALL,
                new IntentFilter(Intent.ACTION_CONFIGURATION_CHANGED), null, null);

        // Register for broadcasts about package install, etc., so we can
        // update the provider list.
        IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_PACKAGE_ADDED);
        filter.addAction(Intent.ACTION_PACKAGE_CHANGED);
        filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
        filter.addDataScheme("package");
        mContext.registerReceiverAsUser(mBroadcastReceiver, UserHandle.ALL,
                filter, null, null);
        // Register for events related to sdcard installation.
        IntentFilter sdFilter = new IntentFilter();
        sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_AVAILABLE);
        sdFilter.addAction(Intent.ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE);
        mContext.registerReceiverAsUser(mBroadcastReceiver, UserHandle.ALL,
                sdFilter, null, null);

        IntentFilter userFilter = new IntentFilter();
        userFilter.addAction(Intent.ACTION_USER_REMOVED);
        userFilter.addAction(Intent.ACTION_USER_STOPPING);
        mContext.registerReceiver(new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                if (Intent.ACTION_USER_REMOVED.equals(intent.getAction())) {
                    onUserRemoved(intent.getIntExtra(Intent.EXTRA_USER_HANDLE,
                            UserHandle.USER_NULL));
                } else if (Intent.ACTION_USER_STOPPING.equals(intent.getAction())) {
                    onUserStopping(intent.getIntExtra(Intent.EXTRA_USER_HANDLE,
                            UserHandle.USER_NULL));
                }
            }
        }, userFilter);
!!!8021132.java!!!	getCallingOrCurrentUserId() : int
        int callingUid = Binder.getCallingUid();
        // Also check the PID because Settings (power control widget) also runs as System UID
        if (callingUid == android.os.Process.myUid()
                && Binder.getCallingPid() == android.os.Process.myPid()) {
            try {
                return ActivityManagerNative.getDefault().getCurrentUser().id;
            } catch (RemoteException re) {
                return UserHandle.getUserId(callingUid);
            }
        } else {
            return UserHandle.getUserId(callingUid);
        }
!!!8021260.java!!!	allocateAppWidgetId(in packageName : String, in hostId : int) : int
        return getImplForUser(getCallingOrCurrentUserId()).allocateAppWidgetId(
                packageName, hostId);
!!!8021388.java!!!	getAppWidgetIdsForHost(in hostId : int) : int
        return getImplForUser(getCallingOrCurrentUserId()).getAppWidgetIdsForHost(hostId);
!!!8021516.java!!!	deleteAppWidgetId(in appWidgetId : int) : void
        getImplForUser(getCallingOrCurrentUserId()).deleteAppWidgetId(appWidgetId);
!!!8021644.java!!!	deleteHost(in hostId : int) : void
        getImplForUser(getCallingOrCurrentUserId()).deleteHost(hostId);
!!!8021772.java!!!	deleteAllHosts() : void
        getImplForUser(getCallingOrCurrentUserId()).deleteAllHosts();
!!!8021900.java!!!	bindAppWidgetId(in appWidgetId : int, inout provider : ComponentName, inout options : Bundle) : void
        getImplForUser(getCallingOrCurrentUserId()).bindAppWidgetId(appWidgetId, provider,
                options);
!!!8022028.java!!!	bindAppWidgetIdIfAllowed(in packageName : String, in appWidgetId : int, inout provider : ComponentName, inout options : Bundle) : boolean
        return getImplForUser(getCallingOrCurrentUserId()).bindAppWidgetIdIfAllowed(
                packageName, appWidgetId, provider, options);
!!!8022156.java!!!	hasBindAppWidgetPermission(in packageName : String) : boolean
        return getImplForUser(getCallingOrCurrentUserId()).hasBindAppWidgetPermission(
                packageName);
!!!8022284.java!!!	setBindAppWidgetPermission(in packageName : String, inout permission : boolean) : void
        getImplForUser(getCallingOrCurrentUserId()).setBindAppWidgetPermission(
                packageName, permission);
!!!8022412.java!!!	bindRemoteViewsService(in appWidgetId : int, inout intent : Intent, inout connection : IBinder, in userId : int) : void
        if (Binder.getCallingPid() != android.os.Process.myPid()
                && userId != UserHandle.getCallingUserId()) {
            throw new SecurityException("Call from non-system process. Calling uid = "
                    + Binder.getCallingUid());
        }
        getImplForUser(userId).bindRemoteViewsService(
                appWidgetId, intent, connection);
!!!8022540.java!!!	startListening(inout host : IAppWidgetHost, in packageName : String, in hostId : int, inout updatedViews : List<RemoteViews>) : int
        return getImplForUser(getCallingOrCurrentUserId()).startListening(host,
                packageName, hostId, updatedViews);
!!!8022668.java!!!	startListeningAsUser(inout host : IAppWidgetHost, in packageName : String, in hostId : int, inout updatedViews : List<RemoteViews>, in userId : int) : int
        if (Binder.getCallingPid() != android.os.Process.myPid()
                && userId != UserHandle.getCallingUserId()) {
            throw new SecurityException("Call from non-system process. Calling uid = "
                    + Binder.getCallingUid());
        }
        return getImplForUser(userId).startListening(host, packageName, hostId, updatedViews);
!!!8022796.java!!!	onUserRemoved(in userId : int) : void
        if (userId < 1) return;
        synchronized (mAppWidgetServices) {
            AppWidgetServiceImpl impl = mAppWidgetServices.get(userId);
            mAppWidgetServices.remove(userId);

            if (impl == null) {
                AppWidgetServiceImpl.getSettingsFile(userId).delete();
            } else {
                impl.onUserRemoved();
            }
        }
!!!8022924.java!!!	onUserStopping(in userId : int) : void
        if (userId < 1) return;
        synchronized (mAppWidgetServices) {
            AppWidgetServiceImpl impl = mAppWidgetServices.get(userId);
            if (impl != null) {
                mAppWidgetServices.remove(userId);
                impl.onUserStopping();
            }
        }
!!!8023052.java!!!	getImplForUser(in userId : int) : AppWidgetServiceImpl
        boolean sendInitial = false;
        AppWidgetServiceImpl service;
        synchronized (mAppWidgetServices) {
            service = mAppWidgetServices.get(userId);
            if (service == null) {
                Slog.i(TAG, "Unable to find AppWidgetServiceImpl for user " + userId + ", adding");
                // TODO: Verify that it's a valid user
                service = new AppWidgetServiceImpl(mContext, userId, mSaveStateHandler);
                service.systemReady(mSafeMode);
                // Assume that BOOT_COMPLETED was received, as this is a non-primary user.
                mAppWidgetServices.append(userId, service);
                sendInitial = true;
            }
        }
        if (sendInitial) {
            service.sendInitialBroadcasts();
        }
        return service;
!!!8023180.java!!!	getAppWidgetIds(inout provider : ComponentName) : int
        return getImplForUser(getCallingOrCurrentUserId()).getAppWidgetIds(provider);
!!!8023308.java!!!	getAppWidgetInfo(in appWidgetId : int) : AppWidgetProviderInfo
        return getImplForUser(getCallingOrCurrentUserId()).getAppWidgetInfo(appWidgetId);
!!!8023436.java!!!	getAppWidgetViews(in appWidgetId : int) : RemoteViews
        return getImplForUser(getCallingOrCurrentUserId()).getAppWidgetViews(appWidgetId);
!!!8023564.java!!!	updateAppWidgetOptions(in appWidgetId : int, inout options : Bundle) : void
        getImplForUser(getCallingOrCurrentUserId()).updateAppWidgetOptions(appWidgetId, options);
!!!8023692.java!!!	getAppWidgetOptions(in appWidgetId : int) : Bundle
        return getImplForUser(getCallingOrCurrentUserId()).getAppWidgetOptions(appWidgetId);
!!!8023820.java!!!	getInstalledProviders(in categoryFilter : int) : AppWidgetProviderInfo
        return getImplForUser(getCallingOrCurrentUserId()).getInstalledProviders(categoryFilter);
!!!8023948.java!!!	notifyAppWidgetViewDataChanged(inout appWidgetIds : int, in viewId : int) : void
        getImplForUser(getCallingOrCurrentUserId()).notifyAppWidgetViewDataChanged(
                appWidgetIds, viewId);
!!!8024076.java!!!	partiallyUpdateAppWidgetIds(inout appWidgetIds : int, inout views : RemoteViews) : void
        getImplForUser(getCallingOrCurrentUserId()).partiallyUpdateAppWidgetIds(
                appWidgetIds, views);
!!!8024204.java!!!	stopListening(in hostId : int) : void
        getImplForUser(getCallingOrCurrentUserId()).stopListening(hostId);
!!!8024332.java!!!	stopListeningAsUser(in hostId : int, in userId : int) : void
        if (Binder.getCallingPid() != android.os.Process.myPid()
                && userId != UserHandle.getCallingUserId()) {
            throw new SecurityException("Call from non-system process. Calling uid = "
                    + Binder.getCallingUid());
        }
        getImplForUser(userId).stopListening(hostId);
!!!8024460.java!!!	unbindRemoteViewsService(in appWidgetId : int, inout intent : Intent, in userId : int) : void
        if (Binder.getCallingPid() != android.os.Process.myPid()
                && userId != UserHandle.getCallingUserId()) {
            throw new SecurityException("Call from non-system process. Calling uid = "
                    + Binder.getCallingUid());
        }
        getImplForUser(userId).unbindRemoteViewsService(
                appWidgetId, intent);
!!!8024588.java!!!	updateAppWidgetIds(inout appWidgetIds : int, inout views : RemoteViews) : void
        getImplForUser(getCallingOrCurrentUserId()).updateAppWidgetIds(appWidgetIds, views);
!!!8024716.java!!!	updateAppWidgetProvider(inout provider : ComponentName, inout views : RemoteViews) : void
        getImplForUser(getCallingOrCurrentUserId()).updateAppWidgetProvider(provider, views);
!!!8024844.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, TAG);

        // Dump the state of all the app widget providers
        synchronized (mAppWidgetServices) {
            IndentingPrintWriter ipw = new IndentingPrintWriter(pw, "  ");
            for (int i = 0; i < mAppWidgetServices.size(); i++) {
                pw.println("User: " + mAppWidgetServices.keyAt(i));
                ipw.increaseIndent();
                AppWidgetServiceImpl service = mAppWidgetServices.valueAt(i);
                service.dump(fd, ipw, args);
                ipw.decreaseIndent();
            }
        }
