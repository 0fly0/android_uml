class OpenSSLCipherRSA
!!!2409243.java!!!	OpenSSLCipherRSA(in padding : int)
        this.padding = padding;
!!!2409371.java!!!	engineSetMode(inout mode : String) : void
        final String modeUpper = mode.toUpperCase();
        if ("NONE".equals(modeUpper) || "ECB".equals(modeUpper)) {
            return;
        }

        throw new NoSuchAlgorithmException("mode not supported: " + mode);
!!!2409499.java!!!	engineSetPadding(inout padding : String) : void
        final String paddingUpper = padding.toUpperCase();
        if ("PKCS1PADDING".equals(paddingUpper)) {
            this.padding = NativeCrypto.RSA_PKCS1_PADDING;
            return;
        }
        if ("NOPADDING".equals(paddingUpper)) {
            this.padding = NativeCrypto.RSA_NO_PADDING;
            return;
        }

        throw new NoSuchPaddingException("padding not supported: " + padding);
!!!2409627.java!!!	engineGetBlockSize() : int
        if (encrypting) {
            return paddedBlockSizeBytes();
        }
        return keySizeBytes();
!!!2409755.java!!!	engineGetOutputSize(in inputLen : int) : int
        if (encrypting) {
            return keySizeBytes();
        }
        return paddedBlockSizeBytes();
!!!2409883.java!!!	paddedBlockSizeBytes() : int
        int paddedBlockSizeBytes = keySizeBytes();
        if (padding == NativeCrypto.RSA_PKCS1_PADDING) {
            paddedBlockSizeBytes--;  // for 0 prefix
            paddedBlockSizeBytes -= 10;  // PKCS1 padding header length
        }
        return paddedBlockSizeBytes;
!!!2410011.java!!!	keySizeBytes() : int
        if (key == null) {
            throw new IllegalStateException("cipher is not initialized");
        }
        return NativeCrypto.RSA_size(this.key.getPkeyContext());
!!!2410139.java!!!	engineGetIV() : byte
        return null;
!!!2410267.java!!!	engineGetParameters() : AlgorithmParameters
        return null;
!!!2410395.java!!!	engineInitInternal(in opmode : int, inout key : Key) : void
        if (opmode == Cipher.ENCRYPT_MODE || opmode == Cipher.WRAP_MODE) {
            encrypting = true;
        } else if (opmode == Cipher.DECRYPT_MODE || opmode == Cipher.UNWRAP_MODE) {
            encrypting = false;
        } else {
            throw new InvalidParameterException("Unsupported opmode " + opmode);
        }

        if (key instanceof OpenSSLRSAPrivateKey) {
            OpenSSLRSAPrivateKey rsaPrivateKey = (OpenSSLRSAPrivateKey) key;
            usingPrivateKey = true;
            this.key = rsaPrivateKey.getOpenSSLKey();
        } else if (key instanceof RSAPrivateCrtKey) {
            RSAPrivateCrtKey rsaPrivateKey = (RSAPrivateCrtKey) key;
            usingPrivateKey = true;
            this.key = OpenSSLRSAPrivateCrtKey.getInstance(rsaPrivateKey);
        } else if (key instanceof RSAPrivateKey) {
            RSAPrivateKey rsaPrivateKey = (RSAPrivateKey) key;
            usingPrivateKey = true;
            this.key = OpenSSLRSAPrivateKey.getInstance(rsaPrivateKey);
        } else if (key instanceof OpenSSLRSAPublicKey) {
            OpenSSLRSAPublicKey rsaPublicKey = (OpenSSLRSAPublicKey) key;
            usingPrivateKey = false;
            this.key = rsaPublicKey.getOpenSSLKey();
        } else if (key instanceof RSAPublicKey) {
            RSAPublicKey rsaPublicKey = (RSAPublicKey) key;
            usingPrivateKey = false;
            this.key = OpenSSLRSAPublicKey.getInstance(rsaPublicKey);
        } else {
            throw new InvalidKeyException("Need RSA private or public key");
        }

        buffer = new byte[NativeCrypto.RSA_size(this.key.getPkeyContext())];
        inputTooLarge = false;
!!!2410523.java!!!	engineInit(in opmode : int, inout key : Key, inout random : SecureRandom) : void
        engineInitInternal(opmode, key);
!!!2410651.java!!!	engineInit(in opmode : int, inout key : Key, inout params : AlgorithmParameterSpec, inout random : SecureRandom) : void
        if (params != null) {
            throw new InvalidAlgorithmParameterException("unknown param type: "
                    + params.getClass().getName());
        }

        engineInitInternal(opmode, key);
!!!2410779.java!!!	engineInit(in opmode : int, inout key : Key, inout params : AlgorithmParameters, inout random : SecureRandom) : void
        if (params != null) {
            throw new InvalidAlgorithmParameterException("unknown param type: "
                    + params.getClass().getName());
        }

        engineInitInternal(opmode, key);
!!!2410907.java!!!	engineUpdate(inout input : byte, in inputOffset : int, in inputLen : int) : byte
        if (bufferOffset + inputLen > buffer.length) {
            inputTooLarge = true;
            return EmptyArray.BYTE;
        }

        System.arraycopy(input, inputOffset, buffer, bufferOffset, inputLen);
        bufferOffset += inputLen;
        return EmptyArray.BYTE;
!!!2411035.java!!!	engineUpdate(inout input : byte, in inputOffset : int, in inputLen : int, inout output : byte, in outputOffset : int) : int
        engineUpdate(input, inputOffset, inputLen);
        return 0;
!!!2411163.java!!!	engineDoFinal(inout input : byte, in inputOffset : int, in inputLen : int) : byte
        if (input != null) {
            engineUpdate(input, inputOffset, inputLen);
        }

        if (inputTooLarge) {
            throw new IllegalBlockSizeException("input must be under " + buffer.length + " bytes");
        }

        final byte[] tmpBuf;
        if (bufferOffset != buffer.length) {
            if (padding == NativeCrypto.RSA_NO_PADDING) {
                tmpBuf = new byte[buffer.length];
                System.arraycopy(buffer, 0, tmpBuf, buffer.length - bufferOffset, bufferOffset);
            } else {
                tmpBuf = Arrays.copyOf(buffer, bufferOffset);
            }
        } else {
            tmpBuf = buffer;
        }

        byte[] output = new byte[buffer.length];
        int resultSize;
        if (encrypting) {
            if (usingPrivateKey) {
                resultSize = NativeCrypto.RSA_private_encrypt(tmpBuf.length, tmpBuf, output,
                                                              key.getPkeyContext(), padding);
            } else {
                resultSize = NativeCrypto.RSA_public_encrypt(tmpBuf.length, tmpBuf, output,
                                                             key.getPkeyContext(), padding);
            }
        } else {
            try {
                if (usingPrivateKey) {
                    resultSize = NativeCrypto.RSA_private_decrypt(tmpBuf.length, tmpBuf, output,
                                                                  key.getPkeyContext(), padding);
                } else {
                    resultSize = NativeCrypto.RSA_public_decrypt(tmpBuf.length, tmpBuf, output,
                                                                 key.getPkeyContext(), padding);
                }
            } catch (SignatureException e) {
                IllegalBlockSizeException newE = new IllegalBlockSizeException();
                newE.initCause(e);
                throw newE;
            }
        }
        if (!encrypting && resultSize != output.length) {
            output = Arrays.copyOf(output, resultSize);
        }

        bufferOffset = 0;
        return output;
!!!2411291.java!!!	engineDoFinal(inout input : byte, in inputOffset : int, in inputLen : int, inout output : byte, in outputOffset : int) : int
        byte[] b = engineDoFinal(input, inputOffset, inputLen);

        final int lastOffset = outputOffset + b.length;
        if (lastOffset > output.length) {
            throw new ShortBufferException("output buffer is too small " + output.length + " < "
                    + lastOffset);
        }

        System.arraycopy(b, 0, output, outputOffset, b.length);
        return b.length;
!!!2411419.java!!!	engineWrap(inout key : Key) : byte
        try {
            byte[] encoded = key.getEncoded();
            return engineDoFinal(encoded, 0, encoded.length);
        } catch (BadPaddingException e) {
            IllegalBlockSizeException newE = new IllegalBlockSizeException();
            newE.initCause(e);
            throw newE;
        }
!!!2411547.java!!!	engineUnwrap(inout wrappedKey : byte, inout wrappedKeyAlgorithm : String, in wrappedKeyType : int) : Key
        try {
            byte[] encoded = engineDoFinal(wrappedKey, 0, wrappedKey.length);
            if (wrappedKeyType == Cipher.PUBLIC_KEY) {
                KeyFactory keyFactory = KeyFactory.getInstance(wrappedKeyAlgorithm);
                return keyFactory.generatePublic(new X509EncodedKeySpec(encoded));
            } else if (wrappedKeyType == Cipher.PRIVATE_KEY) {
                KeyFactory keyFactory = KeyFactory.getInstance(wrappedKeyAlgorithm);
                return keyFactory.generatePrivate(new PKCS8EncodedKeySpec(encoded));
            } else if (wrappedKeyType == Cipher.SECRET_KEY) {
                return new SecretKeySpec(encoded, wrappedKeyAlgorithm);
            } else {
                throw new UnsupportedOperationException("wrappedKeyType == " + wrappedKeyType);
            }
        } catch (IllegalBlockSizeException e) {
            throw new InvalidKeyException(e);
        } catch (BadPaddingException e) {
            throw new InvalidKeyException(e);
        } catch (InvalidKeySpecException e) {
            throw new InvalidKeyException(e);
        }
