class SocketClient
!!!9857164.cpp!!!	SocketClient(in socket : int, in owned : bool)
    init(socket, owned, false);
!!!9857292.cpp!!!	SocketClient(in socket : int, in owned : bool, in useCmdNum : bool)
    init(socket, owned, useCmdNum);
!!!9857420.cpp!!!	~SocketClient()
    if (mSocketOwned) {
        close(mSocket);
    }
!!!9858316.cpp!!!	sendMsg(in code : int, in msg : char, in addErrno : bool) : int
    return sendMsg(code, msg, addErrno, mUseCmdNum);
!!!9858444.cpp!!!	sendMsg(in code : int, in msg : char, in addErrno : bool, in useCmdNum : bool) : int
    char *buf;
    int ret = 0;

    if (addErrno) {
        if (useCmdNum) {
            ret = asprintf(&buf, "%d %d %s (%s)", code, getCmdNum(), msg, strerror(errno));
        } else {
            ret = asprintf(&buf, "%d %s (%s)", code, msg, strerror(errno));
        }
    } else {
        if (useCmdNum) {
            ret = asprintf(&buf, "%d %d %s", code, getCmdNum(), msg);
        } else {
            ret = asprintf(&buf, "%d %s", code, msg);
        }
    }
    /* Send the zero-terminated message */
    if (ret != -1) {
        ret = sendMsg(buf);
        free(buf);
    }
    return ret;
!!!9858572.cpp!!!	sendCode(in code : int) : int
    char buf[4];
    snprintf(buf, sizeof(buf), "%.3d", code);
    return sendData(buf, sizeof(buf));
!!!9858700.cpp!!!	sendBinaryMsg(in code : int, in data : void, in len : int) : int

    /* 4 bytes for the code & null + 4 bytes for the len */
    char buf[8];
    /* Write the code */
    snprintf(buf, 4, "%.3d", code);
    /* Write the len */
    uint32_t tmp = htonl(len);
    memcpy(buf + 4, &tmp, sizeof(uint32_t));

    pthread_mutex_lock(&mWriteMutex);
    int result = sendDataLocked(buf, sizeof(buf));
    if (result == 0 && len > 0) {
        result = sendDataLocked(data, len);
    }
    pthread_mutex_unlock(&mWriteMutex);

    return result;
!!!9858828.cpp!!!	sendData(in data : void, in len : int) : int

    pthread_mutex_lock(&mWriteMutex);
    int rc = sendDataLocked(data, len);
    pthread_mutex_unlock(&mWriteMutex);

    return rc;
!!!9858956.cpp!!!	incRef() : void
    pthread_mutex_lock(&mRefCountMutex);
    mRefCount++;
    pthread_mutex_unlock(&mRefCountMutex);
!!!9859084.cpp!!!	decRef() : bool
    bool deleteSelf = false;
    pthread_mutex_lock(&mRefCountMutex);
    mRefCount--;
    if (mRefCount == 0) {
        deleteSelf = true;
    } else if (mRefCount < 0) {
        SLOGE("SocketClient refcount went negative!");
    }
    pthread_mutex_unlock(&mRefCountMutex);
    if (deleteSelf) {
        delete this;
    }
    return deleteSelf;
!!!9859212.cpp!!!	quoteArg(in arg : char) : char
    int len = strlen(arg);
    char *result = (char *)malloc(len * 2 + 3);
    char *current = result;
    const char *end = arg + len;

    *(current++) = '"';
    while (arg < end) {
        switch (*arg) {
        case '\\':
        case '"':
            *(current++) = '\\'; // fallthrough
        default:
            *(current++) = *(arg++);
        }
    }
    *(current++) = '"';
    *(current++) = '\0';
    result = (char *)realloc(result, current-result);
    return result;
!!!9859340.cpp!!!	sendMsg(in msg : char) : int
    // Send the message including null character
    if (sendData(msg, strlen(msg) + 1) != 0) {
        SLOGW("Unable to send msg '%s'", msg);
        return -1;
    }
    return 0;
!!!9859468.cpp!!!	init(in socket : int, in owned : bool, in useCmdNum : bool) : void
    mSocket = socket;
    mSocketOwned = owned;
    mUseCmdNum = useCmdNum;
    pthread_mutex_init(&mWriteMutex, NULL);
    pthread_mutex_init(&mRefCountMutex, NULL);
    mPid = -1;
    mUid = -1;
    mGid = -1;
    mRefCount = 1;
    mCmdNum = 0;

    struct ucred creds;
    socklen_t szCreds = sizeof(creds);
    memset(&creds, 0, szCreds);

    int err = getsockopt(socket, SOL_SOCKET, SO_PEERCRED, &creds, &szCreds);
    if (err == 0) {
        mPid = creds.pid;
        mUid = creds.uid;
        mGid = creds.gid;
    }
!!!9859596.cpp!!!	sendDataLocked(in data : void, in len : int) : int
    int rc = 0;
    const char *p = (const char*) data;
    int brtw = len;

    if (mSocket < 0) {
        errno = EHOSTUNREACH;
        return -1;
    }

    if (len == 0) {
        return 0;
    }

    while (brtw > 0) {
        rc = send(mSocket, p, brtw, MSG_NOSIGNAL);
        if (rc > 0) {
            p += rc;
            brtw -= rc;
            continue;
        }

        if (rc < 0 && errno == EINTR)
            continue;

        if (rc == 0) {
            SLOGW("0 length write :(");
            errno = EIO;
        } else {
            SLOGW("write error (%s)", strerror(errno));
        }
        return -1;
    }
    return 0;
