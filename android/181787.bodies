class CharArrayBuffer
!!!698779.java!!!	CharArrayBuffer(inout array : char)
    this(array.length, array, 0, false);
!!!698907.java!!!	CharArrayBuffer(in capacity : int, inout backingArray : char, in arrayOffset : int, inout isReadOnly : boolean)
    super(capacity);
    this.backingArray = backingArray;
    this.arrayOffset = arrayOffset;
    this.isReadOnly = isReadOnly;
!!!699035.java!!!	copy(inout other : CharArrayBuffer, in markOfOther : int, inout isReadOnly : boolean) : CharArrayBuffer
    CharArrayBuffer buf = new CharArrayBuffer(other.capacity(), other.backingArray, other.arrayOffset, isReadOnly);
    buf.limit = other.limit;
    buf.position = other.position();
    buf.mark = markOfOther;
    return buf;
!!!699163.java!!!	asReadOnlyBuffer() : CharBuffer
    return copy(this, mark, true);
!!!699291.java!!!	compact() : CharBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    System.arraycopy(backingArray, position + arrayOffset, backingArray, arrayOffset, remaining());
    position = limit - position;
    limit = capacity;
    mark = UNSET_MARK;
    return this;
!!!699419.java!!!	duplicate() : CharBuffer
    return copy(this, mark, isReadOnly);
!!!699547.java!!!	slice() : CharBuffer
    return new CharArrayBuffer(remaining(), backingArray, arrayOffset + position, isReadOnly);
!!!699675.java!!!	isReadOnly() : boolean
    return isReadOnly;
!!!699803.java!!!	protectedArray() : char
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    return backingArray;
!!!699931.java!!!	protectedArrayOffset() : int
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    return arrayOffset;
!!!700059.java!!!	protectedHasArray() : boolean
    if (isReadOnly) {
      return false;
    }
    return true;
!!!700187.java!!!	get() : char
    if (position == limit) {
      throw new BufferUnderflowException();
    }
    return backingArray[arrayOffset + position++];
!!!700315.java!!!	get(in index : int) : char
    checkIndex(index);
    return backingArray[arrayOffset + index];
!!!700443.java!!!	get(inout dst : char, in srcOffset : int, in charCount : int) : CharBuffer
    if (charCount > remaining()) {
      throw new BufferUnderflowException();
    }
    System.arraycopy(backingArray, arrayOffset + position, dst, srcOffset, charCount);
    position += charCount;
    return this;
!!!700571.java!!!	isDirect() : boolean
    return false;
!!!700699.java!!!	order() : ByteOrder
    return ByteOrder.nativeOrder();
!!!700827.java!!!	subSequence(in start : int, in end : int) : CharSequence
    checkStartEndRemaining(start, end);
    CharBuffer result = duplicate();
    result.limit(position + end);
    result.position(position + start);
    return result;
!!!700955.java!!!	put(in c : char) : CharBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    if (position == limit) {
      throw new BufferOverflowException();
    }
    backingArray[arrayOffset + position++] = c;
    return this;
!!!701083.java!!!	put(in index : int, in c : char) : CharBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    checkIndex(index);
    backingArray[arrayOffset + index] = c;
    return this;
!!!701211.java!!!	put(inout src : char, in srcOffset : int, in charCount : int) : CharBuffer
    if (isReadOnly) {
      throw new ReadOnlyBufferException();
    }
    if (charCount > remaining()) {
      throw new BufferOverflowException();
    }
    System.arraycopy(src, srcOffset, backingArray, arrayOffset + position, charCount);
    position += charCount;
    return this;
!!!701339.java!!!	toString() : String
    return String.copyValueOf(backingArray, arrayOffset + position, remaining());
