class X500Principal
!!!1862043.java!!!	X500Principal(inout name : byte)
        if (name == null) {
            throw new IllegalArgumentException("Name cannot be null");
        }
        try {
            // FIXME dn = new Name(name);
            dn = (Name) Name.ASN1.decode(name);
        } catch (IOException e) {
            throw incorrectInputEncoding(e);
        }
!!!1862171.java!!!	X500Principal(inout in : InputStream)
        if (in == null) {
            throw new NullPointerException("in == null");
        }
        try {
            // FIXME dn = new Name(is);
            dn = (Name) Name.ASN1.decode(in);
        } catch (IOException e) {
            throw incorrectInputEncoding(e);
        }
!!!1862299.java!!!	incorrectInputEncoding(inout e : IOException) : IllegalArgumentException
        IllegalArgumentException iae = new IllegalArgumentException("Incorrect input encoding");
        iae.initCause(e);
        throw iae;
!!!1862427.java!!!	X500Principal(inout name : String)
        if (name == null) {
            throw new NullPointerException("name == null");
        }
        try {
            dn = new Name(name);
        } catch (IOException e) {
            throw incorrectInputName(e, name);
        }
!!!1862555.java!!!	X500Principal(inout name : String, inout keywordMap : Map)
        if (name == null) {
            throw new NullPointerException("name == null");
        }
        try {
            dn = new Name(substituteNameFromMap(name, keywordMap));
        } catch (IOException e) {
            throw incorrectInputName(e, name);
        }
!!!1862683.java!!!	incorrectInputName(inout e : IOException, inout name : String) : IllegalArgumentException
        IllegalArgumentException iae = new IllegalArgumentException("Incorrect input name:" + name);
        iae.initCause(e);
        throw iae;
!!!1862811.java!!!	getCanonicalName() : String
        if (canonicalName == null) {
            canonicalName = dn.getName(CANONICAL);
        }
        return canonicalName;
!!!1862939.java!!!	equals(inout o : Object) : boolean
        if (this == o) {
            return true;
        }
        if (o == null || this.getClass() != o.getClass()) {
            return false;
        }
        X500Principal principal = (X500Principal) o;
        return getCanonicalName().equals(principal.getCanonicalName());
!!!1863067.java!!!	getEncoded() : byte
        byte[] src = dn.getEncoded();
        byte[] dst = new byte[src.length];
        System.arraycopy(src, 0, dst, 0, dst.length);
        return dst;
!!!1863195.java!!!	getName() : String
        return dn.getName(RFC2253);
!!!1863323.java!!!	getName(inout format : String) : String
        if (CANONICAL.equals(format)) {
            return getCanonicalName();
        }

        return dn.getName(format);
!!!1863451.java!!!	getName(inout format : String, inout oidMap : Map) : String
        String rfc1779Name = dn.getName(RFC1779);
        String rfc2253Name = dn.getName(RFC2253);

        if (format.equalsIgnoreCase("RFC1779")) {
            StringBuilder resultName = new StringBuilder(rfc1779Name);
            int fromIndex = resultName.length();
            int equalIndex = -1;
            while (-1 != (equalIndex = resultName.lastIndexOf("=", fromIndex))) {
                int commaIndex = resultName.lastIndexOf(",", equalIndex);
                String subName = resultName.substring(commaIndex + 1,
                        equalIndex).trim();
                if (subName.length() > 4
                        && subName.substring(0, 4).equals("OID.")) {
                    String subSubName = subName.substring(4);
                    if (oidMap.containsKey(subSubName)) {
                        String replaceName = oidMap.get(subSubName);
                        if(commaIndex > 0) replaceName = " " + replaceName;
                        resultName.replace(commaIndex + 1, equalIndex, replaceName);
                    }
                }
                fromIndex = commaIndex;
            }
            return resultName.toString();
        } else if (format.equalsIgnoreCase("RFC2253")) {
            StringBuilder resultName = new StringBuilder(rfc2253Name);
            StringBuilder subsidyName = new StringBuilder(rfc1779Name);

            int fromIndex = resultName.length();
            int subsidyFromIndex = subsidyName.length();
            int equalIndex = -1;
            int subsidyEqualIndex = -1;
            while (-1 != (equalIndex = resultName.lastIndexOf("=", fromIndex))) {
                subsidyEqualIndex = subsidyName.lastIndexOf("=",
                        subsidyFromIndex);
                int commaIndex = resultName.lastIndexOf(",", equalIndex);
                String subName = resultName.substring(commaIndex + 1,
                        equalIndex).trim();
                if (oidMap.containsKey(subName)) {
                    int subOrignalEndIndex = resultName
                            .indexOf(",", equalIndex);
                    if (subOrignalEndIndex == -1)
                        subOrignalEndIndex = resultName.length();
                    int subGoalEndIndex = subsidyName.indexOf(",",
                            subsidyEqualIndex);
                    if (subGoalEndIndex == -1)
                        subGoalEndIndex = subsidyName.length();
                    resultName.replace(equalIndex + 1, subOrignalEndIndex,
                            subsidyName.substring(subsidyEqualIndex + 1,
                                    subGoalEndIndex));
                    resultName.replace(commaIndex + 1, equalIndex, oidMap
                            .get(subName));
                }
                fromIndex = commaIndex;
                subsidyFromIndex = subsidyEqualIndex - 1;
            }
            return resultName.toString();
        } else {
            throw new IllegalArgumentException("invalid format specified: " + format);
        }
!!!1863579.java!!!	hashCode() : int
        return getCanonicalName().hashCode();
!!!1863707.java!!!	toString() : String
        return dn.getName(RFC1779);
!!!1863835.java!!!	writeObject(inout out : ObjectOutputStream) : void
        out.writeObject(dn.getEncoded());
!!!1863963.java!!!	readObject(inout in : ObjectInputStream) : void
        dn = (Name) Name.ASN1.decode((byte[]) in.readObject());
!!!1864091.java!!!	substituteNameFromMap(inout name : String, inout keywordMap : Map) : String
        StringBuilder sbName = new StringBuilder(name);
        int fromIndex = sbName.length();
        int equalIndex;
        while (-1 != (equalIndex = sbName.lastIndexOf("=", fromIndex))) {
            int commaIndex = sbName.lastIndexOf(",", equalIndex);
            String subName = sbName.substring(commaIndex + 1, equalIndex).trim();
            if (keywordMap.containsKey(subName)) {
                sbName.replace(commaIndex + 1, equalIndex, keywordMap.get(subName));
            }
            fromIndex = commaIndex;
        }
        return sbName.toString();
