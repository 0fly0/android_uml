class SamplingProfilerTest
!!!15476236.java!!!	test_SamplingProfiler() : void
        ThreadSet threadSet = SamplingProfiler.newArrayThreadSet(Thread.currentThread());
        SamplingProfiler profiler = new SamplingProfiler(12, threadSet);
        profiler.start(100);
        toBeMeasured();
        profiler.stop();
        profiler.shutdown();
        test_HprofData(profiler.getHprofData(), true);
!!!15476364.java!!!	toBeMeasured() : void
        long start = System.currentTimeMillis();
        for (int i = 0; i < 10000; i++) {
            BigInteger p = new BigInteger(P);
            BigInteger g = new BigInteger(G);
            KeyPairGenerator gen = KeyPairGenerator.getInstance("DH");
            gen.initialize(new DHParameterSpec(p, g), new SecureRandom());
        }
        long end = System.currentTimeMillis();
!!!15476492.java!!!	test_HprofData_null() : void
        try {
            new HprofData(null);
            fail();
        } catch (NullPointerException expected) {
        }
!!!15476620.java!!!	test_HprofData_empty() : void
        Map<StackTrace, int[]> stackTraces = new HashMap<StackTrace, int[]>();
        HprofData hprofData = new HprofData(stackTraces);
        test_HprofData(hprofData, true);
!!!15476748.java!!!	test_HprofData_timeMillis() : void
        Map<StackTrace, int[]> stackTraces = new HashMap<StackTrace, int[]>();
        HprofData hprofData = new HprofData(stackTraces);
        long now = System.currentTimeMillis();
        hprofData.setStartMillis(now);
        assertEquals(now, hprofData.getStartMillis());
        test_HprofData(hprofData, true);
!!!15476876.java!!!	test_HprofData_addThreadEvent_null() : void
        Map<StackTrace, int[]> stackTraces = new HashMap<StackTrace, int[]>();
        HprofData hprofData = new HprofData(stackTraces);
        try {
            hprofData.addThreadEvent(null);
            fail();
        } catch (NullPointerException expected) {
        }
        test_HprofData(hprofData, true);
!!!15477004.java!!!	test_HprofData_addThreadEvent() : void
        Map<StackTrace, int[]> stackTraces = new HashMap<StackTrace, int[]>();
        HprofData hprofData = new HprofData(stackTraces);

        // should have nothing in the thread history to start
        assertEquals(0, hprofData.getThreadHistory().size());

        // add thread 1
        final int threadId = 1;
        final int objectId = 2;
        ThreadEvent start1 = ThreadEvent.start(objectId, threadId,
                                               "thread-name", "thread-group", "parent-group");
        hprofData.addThreadEvent(start1);
        assertEquals(Arrays.asList(start1), hprofData.getThreadHistory());
        test_HprofData(hprofData, true);

        // remove thread 2, which should not exist (but that's okay on the RI)
        ThreadEvent end2 = ThreadEvent.end(threadId+1);
        hprofData.addThreadEvent(end2);
        assertEquals(Arrays.asList(start1, end2), hprofData.getThreadHistory());
        test_HprofData(hprofData, false); // non-strict from here down because of this RI data

        // remove thread 1, which should exist
        ThreadEvent end1 = ThreadEvent.end(threadId);
        hprofData.addThreadEvent(end1);
        assertEquals(Arrays.asList(start1, end2, end1), hprofData.getThreadHistory());
        test_HprofData(hprofData, false);

        // remove thread 1 again, which should not exist (its not okay to have end followed by end)
        try {
            hprofData.addThreadEvent(ThreadEvent.end(threadId));
            fail();
        } catch (IllegalArgumentException expected) {
        }
        assertEquals(Arrays.asList(start1, end2, end1), hprofData.getThreadHistory());
        test_HprofData(hprofData, false);
!!!15477132.java!!!	test_HprofData_addStackTrace() : void
        Map<StackTrace, int[]> stackTraces = new HashMap<StackTrace, int[]>();
        HprofData hprofData = new HprofData(stackTraces);

        // should have no samples to start
        assertEquals(0, hprofData.getSamples().size());

        // attempt to add a stack for a non-existent thread, should fail
        final int stackTraceId = 1;
        final int threadId = 2;
        final int objectId = 3;
        final int sampleCount = 4;
        StackTraceElement[] stackFrames = new Throwable().getStackTrace();
        final int[] countCell = new int[] { 4 };
        StackTrace stackTrace = new StackTrace(stackTraceId, threadId, stackFrames);
        try {
            hprofData.addStackTrace(stackTrace, countCell);
            fail();
        } catch (IllegalArgumentException expected) {
        }

        // add the thread and add the event
        ThreadEvent start = ThreadEvent.start(objectId, threadId,
                                              "thread-name", "thread-group", "parent-group");
        hprofData.addThreadEvent(start);
        hprofData.addStackTrace(stackTrace, countCell);
        Set<Sample> samples = hprofData.getSamples();
        assertNotNull(samples);
        assertNotSame(samples, hprofData.getSamples());
        assertEquals(1, samples.size());
        Sample sample = samples.iterator().next();
        assertNotNull(sample);
        assertEquals(stackTrace, sample.stackTrace);
        assertEquals(sampleCount, sample.count);
        test_HprofData(hprofData, true);

        // confirm we can mutate the sample count, but that its not
        // visible in the current sample, but it will be visible in a
        // new one.
        countCell[0] += 42;
        assertEquals(sampleCount, sample.count);
        Sample sample2 = hprofData.getSamples().iterator().next();
        assertEquals(sampleCount + 42, sample2.count);
        test_HprofData(hprofData, true);

        // try to reuse the stackTraceId, should fail
        try {
            hprofData.addStackTrace(stackTrace, countCell);
            fail();
        } catch (IllegalArgumentException expected) {
        }
        assertEquals(1, hprofData.getSamples().size());
        test_HprofData(hprofData, true);

!!!15477260.java!!!	test_HprofData(inout hprofData : HprofData, inout strict : boolean) : void
        assertHprofData(hprofData, strict);
        test_HprofData_ascii(hprofData);
        test_HprofData_binary(hprofData, strict);
!!!15477388.java!!!	assertHprofData(inout hprofData : HprofData, inout strict : boolean) : void
        List<ThreadEvent> threadHistory = hprofData.getThreadHistory();
        assertNotNull(threadHistory);
        Set<Integer> threadsSeen = new HashSet<Integer>();
        Set<Integer> threadsActive = new HashSet<Integer>();
        for (ThreadEvent event : threadHistory) {
            assertNotNull(event);
            assertNotNull(event.type);
            switch (event.type) {
                case START:
                    assertNotNull(event.threadName);
                    assertTrue(threadsActive.add(event.threadId));
                    assertTrue(threadsSeen.add(event.threadId));
                    break;
                case END:
                    assertEquals(-1, event.objectId);
                    assertNull(event.threadName);
                    assertNull(event.groupName);
                    assertNull(event.parentGroupName);
                    if (strict) {
                        assertTrue(threadsActive.remove(event.threadId));
                    }
                    break;
            }
        }

        Set<Sample> samples = hprofData.getSamples();
        assertNotNull(samples);
        for (Sample sample : samples) {
            assertNotNull(sample);
            assertTrue(sample.count > 0);
            assertNotNull(sample.stackTrace);
            assertTrue(sample.stackTrace.stackTraceId != -1);
            assertTrue(threadsSeen.contains(sample.stackTrace.getThreadId()));
            assertNotNull(sample.stackTrace.getStackFrames());
        }
!!!15477516.java!!!	test_HprofData_ascii(inout hprofData : HprofData) : void
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        AsciiHprofWriter.write(hprofData, out);
        assertFalse(out.toByteArray().length == 0);
!!!15477644.java!!!	test_HprofData_binary(inout hprofData : HprofData, inout strict : boolean) : void

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        BinaryHprofWriter.write(hprofData, out);
        out.close();

        byte[] bytes = out.toByteArray();
        assertFalse(bytes.length == 0);
        if (false) {
            File file = new File("/sdcard/java.hprof");
            OutputStream debug = new FileOutputStream(file);
            debug.write(bytes);
            debug.close();
            System.out.println("Wrote binary hprof data to " + file);
        }

        InputStream in = new ByteArrayInputStream(bytes);
        BinaryHprofReader reader = new BinaryHprofReader(in);
        assertTrue(reader.getStrict());
        reader.read();
        in.close();
        assertEquals("JAVA PROFILE 1.0.2", reader.getVersion());
        assertNotNull(reader.getHprofData());

        HprofData parsed = reader.getHprofData();
        assertHprofData(hprofData, strict);

        assertEquals(Long.toHexString(hprofData.getStartMillis()),
                     Long.toHexString(parsed.getStartMillis()));
        assertEquals(Long.toHexString(hprofData.getFlags()),
                     Long.toHexString(parsed.getFlags()));
        assertEquals(Long.toHexString(hprofData.getDepth()),
                     Long.toHexString(parsed.getDepth()));
        assertEquals(hprofData.getThreadHistory(),
                     parsed.getThreadHistory());
        assertEquals(hprofData.getSamples(),
                     parsed.getSamples());
