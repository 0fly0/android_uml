class DatagramSocket
!!!539803.java!!!	DatagramSocket()
        this(0);
!!!539931.java!!!	DatagramSocket(in aPort : int)
        checkPort(aPort);
        createSocket(aPort, Inet4Address.ANY);
!!!540059.java!!!	DatagramSocket(in aPort : int, inout addr : InetAddress)
        checkPort(aPort);
        createSocket(aPort, (addr == null) ? Inet4Address.ANY : addr);
!!!540187.java!!!	checkPort(in aPort : int) : void
        if (aPort < 0 || aPort > 65535) {
            throw new IllegalArgumentException("Port out of range: " + aPort);
        }
!!!540315.java!!!	close() : void
        isClosed = true;
        impl.close();
!!!540443.java!!!	disconnect() : void
        if (isClosed() || !isConnected()) {
            return;
        }
        impl.disconnect();
        address = null;
        port = -1;
        isConnected = false;
!!!540571.java!!!	createSocket(in aPort : int, inout addr : InetAddress) : void
        impl = factory != null ? factory.createDatagramSocketImpl()
                : new PlainDatagramSocketImpl();
        impl.create();
        try {
            impl.bind(aPort, addr);
            isBound = true;
        } catch (SocketException e) {
            close();
            throw e;
        }
!!!540699.java!!!	getInetAddress() : InetAddress
        return address;
!!!540827.java!!!	getLocalAddress() : InetAddress
        if (isClosed()) {
            return null;
        }
        if (!isBound()) {
            return Inet4Address.ANY;
        }
        return impl.getLocalAddress();
!!!540955.java!!!	getLocalPort() : int
        if (isClosed()) {
            return -1;
        }
        if (!isBound()) {
            return 0;
        }
        return impl.getLocalPort();
!!!541083.java!!!	getPort() : int
        return port;
!!!541211.java!!!	isMulticastSocket() : boolean
        return false;
!!!541339.java!!!	getReceiveBufferSize() : int
        checkOpen();
        return ((Integer) impl.getOption(SocketOptions.SO_RCVBUF)).intValue();
!!!541467.java!!!	getSendBufferSize() : int
        checkOpen();
        return ((Integer) impl.getOption(SocketOptions.SO_SNDBUF)).intValue();
!!!541595.java!!!	getSoTimeout() : int
        checkOpen();
        return ((Integer) impl.getOption(SocketOptions.SO_TIMEOUT)).intValue();
!!!541723.java!!!	receive(inout pack : DatagramPacket) : void
        checkOpen();
        ensureBound();
        if (pack == null) {
            throw new NullPointerException("pack == null");
        }
        if (pendingConnectException != null) {
            throw new SocketException("Pending connect failure", pendingConnectException);
        }
        pack.resetLengthForReceive();
        impl.receive(pack);
!!!541851.java!!!	send(inout pack : DatagramPacket) : void
        checkOpen();
        ensureBound();

        InetAddress packAddr = pack.getAddress();
        if (address != null) { // The socket is connected
            if (packAddr != null) {
                if (!address.equals(packAddr) || port != pack.getPort()) {
                    throw new IllegalArgumentException("Packet address mismatch with connected address");
                }
            } else {
                pack.setAddress(address);
                pack.setPort(port);
            }
        } else {
            // not connected so the target address is not allowed to be null
            if (packAddr == null) {
                throw new NullPointerException("Destination address is null");
            }
        }
        impl.send(pack);
!!!541979.java!!!	setNetworkInterface(inout netInterface : NetworkInterface) : void
        if (netInterface == null) {
            throw new NullPointerException("netInterface == null");
        }
        try {
            Libcore.os.setsockoptIfreq(impl.fd, SOL_SOCKET, SO_BINDTODEVICE, netInterface.getName());
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsSocketException();
        }
!!!542107.java!!!	setSendBufferSize(in size : int) : void
        if (size < 1) {
            throw new IllegalArgumentException("size < 1");
        }
        checkOpen();
        impl.setOption(SocketOptions.SO_SNDBUF, Integer.valueOf(size));
!!!542235.java!!!	setReceiveBufferSize(in size : int) : void
        if (size < 1) {
            throw new IllegalArgumentException("size < 1");
        }
        checkOpen();
        impl.setOption(SocketOptions.SO_RCVBUF, Integer.valueOf(size));
!!!542363.java!!!	setSoTimeout(in timeout : int) : void
        if (timeout < 0) {
            throw new IllegalArgumentException("timeout < 0");
        }
        checkOpen();
        impl.setOption(SocketOptions.SO_TIMEOUT, Integer.valueOf(timeout));
!!!542491.java!!!	setDatagramSocketImplFactory(inout fac : DatagramSocketImplFactory) : void
        if (factory != null) {
            throw new SocketException("Factory already set");
        }
        factory = fac;
!!!542619.java!!!	DatagramSocket(inout socketImpl : DatagramSocketImpl)
        if (socketImpl == null) {
            throw new NullPointerException("socketImpl == null");
        }
        impl = socketImpl;
!!!542747.java!!!	DatagramSocket(inout localAddr : SocketAddress)
        if (localAddr != null) {
            if (!(localAddr instanceof InetSocketAddress)) {
                throw new IllegalArgumentException("Local address not an InetSocketAddress: " +
                        localAddr.getClass());
            }
            checkPort(((InetSocketAddress) localAddr).getPort());
        }
        impl = factory != null ? factory.createDatagramSocketImpl()
                : new PlainDatagramSocketImpl();
        impl.create();
        if (localAddr != null) {
            try {
                bind(localAddr);
            } catch (SocketException e) {
                close();
                throw e;
            }
        }
        // SocketOptions.SO_BROADCAST is set by default for DatagramSocket
        setBroadcast(true);
!!!542875.java!!!	checkOpen() : void
        if (isClosed()) {
            throw new SocketException("Socket is closed");
        }
!!!543003.java!!!	ensureBound() : void
        if (!isBound()) {
            impl.bind(0, Inet4Address.ANY);
            isBound = true;
        }
!!!543131.java!!!	bind(inout localAddr : SocketAddress) : void
        checkOpen();
        int localPort = 0;
        InetAddress addr = Inet4Address.ANY;
        if (localAddr != null) {
            if (!(localAddr instanceof InetSocketAddress)) {
                throw new IllegalArgumentException("Local address not an InetSocketAddress: " +
                        localAddr.getClass());
            }
            InetSocketAddress inetAddr = (InetSocketAddress) localAddr;
            addr = inetAddr.getAddress();
            if (addr == null) {
                throw new SocketException("Host is unresolved: " + inetAddr.getHostName());
            }
            localPort = inetAddr.getPort();
            checkPort(localPort);
        }
        impl.bind(localPort, addr);
        isBound = true;
!!!543259.java!!!	connect(inout peer : SocketAddress) : void
        if (peer == null) {
            throw new IllegalArgumentException("peer == null");
        }

        if (!(peer instanceof InetSocketAddress)) {
            throw new IllegalArgumentException("peer not an InetSocketAddress: " + peer.getClass());
        }

        InetSocketAddress isa = (InetSocketAddress) peer;
        if (isa.getAddress() == null) {
            throw new SocketException("Host is unresolved: " + isa.getHostName());
        }

        synchronized (lock) {
            checkOpen();
            ensureBound();

            this.address = isa.getAddress();
            this.port = isa.getPort();
            this.isConnected = true;

            impl.connect(address, port);
        }
!!!543387.java!!!	connect(inout address : InetAddress, in port : int) : void
        if (address == null) {
            throw new IllegalArgumentException("address == null");
        }
        try {
            connect(new InetSocketAddress(address, port));
        } catch (SocketException connectException) {
            // TODO: or just use SneakyThrow? There's a clear API bug here.
            pendingConnectException = connectException;
        }
!!!543515.java!!!	isBound() : boolean
        return isBound;
!!!543643.java!!!	isConnected() : boolean
        return isConnected;
!!!543771.java!!!	getRemoteSocketAddress() : SocketAddress
        if (!isConnected()) {
            return null;
        }
        return new InetSocketAddress(getInetAddress(), getPort());
!!!543899.java!!!	getLocalSocketAddress() : SocketAddress
        if (!isBound()) {
            return null;
        }
        return new InetSocketAddress(getLocalAddress(), getLocalPort());
!!!544027.java!!!	setReuseAddress(inout reuse : boolean) : void
        checkOpen();
        impl.setOption(SocketOptions.SO_REUSEADDR, Boolean.valueOf(reuse));
!!!544155.java!!!	getReuseAddress() : boolean
        checkOpen();
        return ((Boolean) impl.getOption(SocketOptions.SO_REUSEADDR)).booleanValue();
!!!544283.java!!!	setBroadcast(inout broadcast : boolean) : void
        checkOpen();
        impl.setOption(SocketOptions.SO_BROADCAST, Boolean.valueOf(broadcast));
!!!544411.java!!!	getBroadcast() : boolean
        checkOpen();
        return ((Boolean) impl.getOption(SocketOptions.SO_BROADCAST)).booleanValue();
!!!544539.java!!!	setTrafficClass(in value : int) : void
        checkOpen();
        if (value < 0 || value > 255) {
            throw new IllegalArgumentException("Value doesn't fit in an unsigned byte: " + value);
        }
        impl.setOption(SocketOptions.IP_TOS, Integer.valueOf(value));
!!!544667.java!!!	getTrafficClass() : int
        checkOpen();
        return (Integer) impl.getOption(SocketOptions.IP_TOS);
!!!544795.java!!!	isClosed() : boolean
        return isClosed;
!!!544923.java!!!	getChannel() : DatagramChannel
        return null;
!!!545051.java!!!	getFileDescriptor$() : FileDescriptor
        return impl.fd;
