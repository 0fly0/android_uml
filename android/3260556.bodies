class TutorialActivity
!!!14094604.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.tutorial_step);
        mSteps = (TextView) findViewById(R.id.tutorial_steps);
        mTitle = (TextView) findViewById(R.id.tutorial_title);
        mText = (TextView) findViewById(R.id.tutorial_text);
        mImage = (ImageView) findViewById(R.id.tutorial_image);
        mFrame = (FrameLayout) findViewById(R.id.frame);
        mStepView = (ViewGroup) findViewById(R.id.tutorial_view);
        mNextButton = (Button) findViewById(R.id.next_button);
        mNextButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                advance();
            }
        });
        mBackButton = (Button) findViewById(R.id.back_button);
        mBackButton.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                onBackPressed();
            }
        });

        mLaunchedFromSettings = getIntent().getBooleanExtra(
                getString(R.string.from_settings), false);
        if (mLaunchedFromSettings) {
            // Always show the latest version if launching from settings.
            mTutorialController = new TutorialController(getApplicationContext(),
                    SetupConstants.CURRENT_SETUP_VERSION);
        } else {
            mTutorialController = new TutorialController(getApplicationContext());
        }

        TutorialStep step = mTutorialController.getCurrentTutorialStep();
        if (step == null || mLaunchedFromSettings) {
            mTutorialController.repeatTutorial();
            step = mTutorialController.getCurrentTutorialStep();
        }
        mTipCount = mTutorialController.getTotalTips();
        setStep(step);
!!!14094732.java!!!	onSearchRequested() : boolean
        // Block search key for all steps.
        return true;
!!!14094860.java!!!	onBackPressed() : void
        TutorialStep step = mTutorialController.previousStep();
        if (step != null) {
            setStep(step);
        } else if (mLaunchedFromSettings) {
            finish();
        }
!!!14094988.java!!!	advance() : void
        mTutorialController.advanceStep();
        TutorialStep step = mTutorialController.getCurrentTutorialStep();
        if (step != null) {
            setStep(step);
        } else {
            setResult(RESULT_OK);
            finish();
        }
!!!14095116.java!!!	setStep(inout step : TutorialStep) : void
        if (step.getTextResourceId() != 0) {
            if (step.isModelDependentText()) {
                mText.setText(getModelDependentText(step.getTextResourceId()));
            } else {
                mText.setText(step.getTextResourceId());
            }
        } else {
            mText.setText("");
        }
        if (step.getDrawableResourceId() != 0) {
            mImage.setImageResource(step.getDrawableResourceId());
            mImage.setVisibility(View.VISIBLE);
        } else {
            mImage.setVisibility(View.GONE);
        }
        if (step.getBackgroundResourceId() != 0) {
            mFrame.setBackgroundResource(step.getBackgroundResourceId());
        }
        if (step.getTitleResourceId() != 0) {
            mTitle.setText(step.getTitleResourceId());
        }
        View stepView = step.getStepView(this, mStepView);
        mStepView.removeAllViews();
        if (stepView != null) {
            mStepView.addView(stepView);
        }
        int tipNumber = mTutorialController.getTipNumber();
        boolean isLastStep = mTutorialController.isLastStep(step);
        mSteps.setText(getString(R.string.tutorial_steps_number, tipNumber, mTipCount));
        mSteps.setVisibility(step.isTip() ? View.VISIBLE : View.GONE);
        mNextButton.requestFocus();
        mNextButton.setText(isLastStep ? R.string.tutorial_ok : R.string.tutorial_next);
        mBackButton.setVisibility(tipNumber >= 1 ? View.VISIBLE : View.GONE);
!!!14095244.java!!!	getModelDependentText(in textResourceId : int) : CharSequence
        String resourceString = getResources().getString(textResourceId);
        return TextUtils.expandTemplate(resourceString, Build.MODEL);
