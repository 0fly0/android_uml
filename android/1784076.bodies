class AudioHardwareStub
!!!10135052.cpp!!!	initCheck() : status_t
    return NO_ERROR;
!!!10135180.cpp!!!	setVoiceVolume(in volume : float) : status_t
    return NO_ERROR;
!!!10135308.cpp!!!	setMasterVolume(in volume : float) : status_t
    return NO_ERROR;
!!!10135692.cpp!!!	openOutputStream(in devices : uint32_t, inout format : int = 0, inout channels : uint32_t = 0, inout sampleRate : uint32_t = 0, inout status : status_t = 0) : AudioStreamOut
    AudioStreamOutStub* out = new AudioStreamOutStub();
    status_t lStatus = out->set(format, channels, sampleRate);
    if (status) {
        *status = lStatus;
    }
    if (lStatus == NO_ERROR)
        return out;
    delete out;
    return 0;
!!!10135820.cpp!!!	closeOutputStream(inout out : AudioStreamOut) : void
    delete out;
!!!10135948.cpp!!!	openInputStream(in devices : uint32_t, inout format : int, inout channels : uint32_t, inout sampleRate : uint32_t, inout status : status_t, in acoustics : audio_in_acoustics) : AudioStreamIn
    // check for valid input source
    if (!AudioSystem::isInputDevice((AudioSystem::audio_devices)devices)) {
        return 0;
    }

    AudioStreamInStub* in = new AudioStreamInStub();
    status_t lStatus = in->set(format, channels, sampleRate, acoustics);
    if (status) {
        *status = lStatus;
    }
    if (lStatus == NO_ERROR)
        return in;
    delete in;
    return 0;
!!!10136076.cpp!!!	closeInputStream(inout in : AudioStreamIn) : void
    delete in;
!!!10136204.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    dumpInternals(fd, args);
    return NO_ERROR;
!!!10136332.cpp!!!	dumpInternals(in fd : int, in args : Vector<String16>) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;
    result.append("AudioHardwareStub::dumpInternals\n");
    snprintf(buffer, SIZE, "\tmMicMute: %s\n", mMicMute? "true": "false");
    result.append(buffer);
    ::write(fd, result.string(), result.size());
    return NO_ERROR;
