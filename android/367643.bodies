class OpenSSLRSAPublicKey
!!!2439323.java!!!	OpenSSLRSAPublicKey(inout key : OpenSSLKey)
        this.key = key;
!!!2439451.java!!!	getOpenSSLKey() : OpenSSLKey
        return key;
!!!2439579.java!!!	OpenSSLRSAPublicKey(inout spec : RSAPublicKeySpec)
        try {
            key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_RSA(
                    spec.getModulus().toByteArray(),
                    spec.getPublicExponent().toByteArray(),
                    null,
                    null,
                    null,
                    null,
                    null,
                    null));
        } catch (Exception e) {
            throw new InvalidKeySpecException(e);
        }
!!!2439707.java!!!	getInstance(inout rsaPublicKey : RSAPublicKey) : OpenSSLKey
        try {
            return new OpenSSLKey(NativeCrypto.EVP_PKEY_new_RSA(
                    rsaPublicKey.getModulus().toByteArray(),
                    rsaPublicKey.getPublicExponent().toByteArray(),
                    null,
                    null,
                    null,
                    null,
                    null,
                    null));
        } catch (Exception e) {
            throw new InvalidKeyException(e);
        }
!!!2439835.java!!!	getAlgorithm() : String
        return "RSA";
!!!2439963.java!!!	getFormat() : String
        return "X.509";
!!!2440091.java!!!	getEncoded() : byte
        return NativeCrypto.i2d_PUBKEY(key.getPkeyContext());
!!!2440219.java!!!	ensureReadParams() : void
        if (fetchedParams) {
            return;
        }

        byte[][] params = NativeCrypto.get_RSA_public_params(key.getPkeyContext());
        modulus = new BigInteger(params[0]);
        publicExponent = new BigInteger(params[1]);

        fetchedParams = true;
!!!2440347.java!!!	getModulus() : BigInteger
        ensureReadParams();
        return modulus;
!!!2440475.java!!!	getPublicExponent() : BigInteger
        ensureReadParams();
        return publicExponent;
!!!2440603.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }

        if (o instanceof OpenSSLRSAPublicKey) {
            OpenSSLRSAPublicKey other = (OpenSSLRSAPublicKey) o;

            /*
             * We can shortcut the true case, but it still may be equivalent but
             * different copies.
             */
            if (key.equals(other.getOpenSSLKey())) {
                return true;
            }
        }

        if (!(o instanceof RSAPublicKey)) {
            return false;
        }

        ensureReadParams();

        RSAPublicKey other = (RSAPublicKey) o;
        return modulus.equals(other.getModulus())
                && publicExponent.equals(other.getPublicExponent());
!!!2440731.java!!!	hashCode() : int
        ensureReadParams();

        return modulus.hashCode() ^ publicExponent.hashCode();
!!!2440859.java!!!	toString() : String
        ensureReadParams();

        final StringBuilder sb = new StringBuilder("OpenSSLRSAPublicKey{");
        sb.append("modulus=");
        sb.append(modulus.toString(16));
        sb.append(',');
        sb.append("publicExponent=");
        sb.append(publicExponent.toString(16));
        sb.append('}');

        return sb.toString();
!!!2440987.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();

        key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_RSA(
                modulus.toByteArray(),
                publicExponent.toByteArray(),
                null,
                null,
                null,
                null,
                null,
                null));
        fetchedParams = true;
!!!2441115.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        ensureReadParams();
        stream.defaultWriteObject();
