class OneWayService
!!!12210700.java!!!	onCreate() : void
        super.onCreate();

        mCommandSetUtil = new CommandSetUtil(this);
        addDevice(buildIrBlasterPairingDevice());
        addDevicesInService();
!!!12210828.java!!!	addDevicesInService() : void
        List<String> pairedDevices = getSettings().getPairedDeviceIds();
        for (String deviceId : pairedDevices) {
            if (findDeviceById(deviceId) == null) {
                Log.d(LOG_TAG, "updateDevicesInService: addDevice " + deviceId);
                String CommandSet = getSettings().getString(deviceId,
                    OneWayConstants.KEY_IR_COMMAND_SET_ID, "default");
                String Manufacturer = getSettings().getString(deviceId,
                    OneWayConstants.KEY_IR_DEVICE_BRAND_NAME, "default");

                // TODO: refine Capabilities.
                Device device = new Device.Builder(getPackageName(), deviceId)
                        .setType(DeviceType.IR_BLASTER)
                        .setLabel(CommandSet)
                        .setUserLabel(Manufacturer + " (" + CommandSet + ")")
                        .setManufacturer(Manufacturer)
                        .setCapability(Capability.IS_INTERNAL, true)
                        .setCapability(Capability.USES_CHANNEL_LINEUP, true)
                        .setCapability(Capability.PROVIDES_CHANNEL_LINEUP, false)
                        .setCapability(Capability.SUPPORTS_SOFT_KEYS, SoftKeys.ALL_SOFT_KEYS)
                        .build();
                addDevice(device);
            }
        }
        mCommandSetUtil.cleanUpCommandSets();
!!!12210956.java!!!	unpairDevice(in deviceId : String) : void
        if (findDeviceById(deviceId) == null) {
            return;
        }
        // Delete codeset if it's not used again.
        mCommandSetUtil.deleteDeviceCommandSetIfNecessary(deviceId);
        super.unpairDevice(deviceId);
        removeDevice(deviceId);
        Log.d(LOG_TAG, "unpairDevice: removeDevice " + deviceId);
!!!12211084.java!!!	onScheduleRecordingRequested(in deviceId : String, in tvUri : Uri) : void
        // Display a dialog to the user.
        startActivity(new Intent(getApplicationContext(), ScheduleRecordingDialog.class)
                .setData(tvUri)
                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
!!!12211340.java!!!	buildLocalBinder() : Binder
        return new OneWayBinder();
!!!12211468.java!!!	buildController(in device : Device) : AbstractDeviceController
        return ControllerFactory.createController(getDeviceControllerContext(), getSettings(),
                device.getId());
!!!12211596.java!!!	buildIrBlasterPairingDevice() : Device
        // The device ID here is not a real device ID. It's only used for pairing.
        // During pairing, we will assign a real device ID and send it back.
        // This is so that there is only one entry in the add device list.
        // Note that the IR blaster is not bound to a specific port.
        // IR blaster devices do not provide their own channel lineup so they require
        // the user to determine what channels they have; this is done in the
        // MediaDeviceSetupActivity.
        return new Device.Builder(getPackageName(), OneWayConstants.IR_BLASTER_DEVICE_ID_PAIRING)
                .setType(DeviceType.IR_BLASTER)
                .setLabel(getString(R.string.ir_device_pairing_label))
                .setCapability(Capability.IS_INTERNAL, true)
                .setCapability(Capability.USES_CHANNEL_LINEUP, true)
                .setCapability(Capability.PROVIDES_CHANNEL_LINEUP, false)
                .setCapability(Capability.SUPPORTS_SOFT_KEYS, SoftKeys.ALL_SOFT_KEYS)
                .build();
