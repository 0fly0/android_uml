class GenericSignatureParser
!!!2136219.java!!!	GenericSignatureParser(inout loader : ClassLoader)
        this.loader = loader;
!!!2136347.java!!!	setInput(inout genericDecl : GenericDeclaration, inout input : String) : void
        if (input != null) {
            this.genericDecl = genericDecl;
            this.buffer = input.toCharArray();
            this.eof = false;
            scanSymbol();
        }
        else {
            this.eof = true;
        }
!!!2136475.java!!!	parseForClass(inout genericDecl : GenericDeclaration, inout signature : String) : void
        setInput(genericDecl, signature);
        if (!eof) {
            parseClassSignature();
        } else {
            if(genericDecl instanceof Class) {
                Class c = (Class) genericDecl;
                this.formalTypeParameters = ListOfVariables.EMPTY;
                this.superclassType = c.getSuperclass();
                this.interfaceTypes = new ListOfTypes(c.getInterfaces());
            } else {
                this.formalTypeParameters = ListOfVariables.EMPTY;
                this.superclassType = Object.class;
                this.interfaceTypes = ListOfTypes.EMPTY;
            }
        }
!!!2136603.java!!!	parseForMethod(inout genericDecl : GenericDeclaration, inout signature : String, inout rawExceptionTypes : Class) : void
        setInput(genericDecl, signature);
        if (!eof) {
            parseMethodTypeSignature(rawExceptionTypes);
        } else {
            if(genericDecl instanceof Method) {
                Method m = (Method) genericDecl;
                this.formalTypeParameters = ListOfVariables.EMPTY;
                this.parameterTypes = new ListOfTypes(m.getParameterTypes());
                this.exceptionTypes = new ListOfTypes(m.getExceptionTypes());
                this.returnType = m.getReturnType();
            } else {
                this.formalTypeParameters = ListOfVariables.EMPTY;
                this.parameterTypes = ListOfTypes.EMPTY;
                this.exceptionTypes = ListOfTypes.EMPTY;
                this.returnType = void.class;
            }
        }
!!!2136731.java!!!	parseForConstructor(inout genericDecl : GenericDeclaration, inout signature : String, inout rawExceptionTypes : Class) : void
        setInput(genericDecl, signature);
        if (!eof) {
            parseMethodTypeSignature(rawExceptionTypes);
        } else {
            if(genericDecl instanceof Constructor) {
                Constructor c = (Constructor) genericDecl;
                this.formalTypeParameters = ListOfVariables.EMPTY;
                this.parameterTypes = new ListOfTypes(c.getParameterTypes());
                this.exceptionTypes = new ListOfTypes(c.getExceptionTypes());
            } else {
                this.formalTypeParameters = ListOfVariables.EMPTY;
                this.parameterTypes = ListOfTypes.EMPTY;
                this.exceptionTypes = ListOfTypes.EMPTY;
            }
        }
!!!2136859.java!!!	parseForField(inout genericDecl : GenericDeclaration, inout signature : String) : void
        setInput(genericDecl, signature);
        if (!eof) {
            this.fieldType = parseFieldTypeSignature();
        }
!!!2136987.java!!!	parseClassSignature() : void
        // ClassSignature ::=
        // OptFormalTypeParameters SuperclassSignature {SuperinterfaceSignature}.

        parseOptFormalTypeParameters();

        // SuperclassSignature ::= ClassTypeSignature.
        this.superclassType = parseClassTypeSignature();

        interfaceTypes = new ListOfTypes(16);
        while (symbol > 0) {
            // SuperinterfaceSignature ::= ClassTypeSignature.
            interfaceTypes.add(parseClassTypeSignature());
        }
!!!2137115.java!!!	parseOptFormalTypeParameters() : void
        // OptFormalTypeParameters ::=
        // ["<" FormalTypeParameter {FormalTypeParameter} ">"].

        ListOfVariables typeParams = new ListOfVariables();

        if (symbol == '<') {
            scanSymbol();
            typeParams.add(parseFormalTypeParameter());
            while ((symbol != '>') && (symbol > 0)) {
                typeParams.add(parseFormalTypeParameter());
            }
            expect('>');
        }
        this.formalTypeParameters = typeParams.getArray();
!!!2137243.java!!!	parseFormalTypeParameter() : ImplForVariable
        // FormalTypeParameter ::= Ident ClassBound {InterfaceBound}.

        scanIdentifier();
        String name = identifier.intern(); // FIXME: is this o.k.?

        ListOfTypes bounds = new ListOfTypes(8);

        // ClassBound ::= ":" [FieldTypeSignature].
        expect(':');
        if (symbol == 'L' || symbol == '[' || symbol == 'T') {
            bounds.add(parseFieldTypeSignature());
        }

        while (symbol == ':') {
            // InterfaceBound ::= ":" FieldTypeSignature.
            scanSymbol();
            bounds.add(parseFieldTypeSignature());
        }

        return new ImplForVariable<GenericDeclaration>(genericDecl, name, bounds);
!!!2137371.java!!!	parseFieldTypeSignature() : Type
        // FieldTypeSignature ::= ClassTypeSignature | ArrayTypeSignature
        //         | TypeVariableSignature.

        switch (symbol) {
        case 'L':
            return parseClassTypeSignature();
        case '[':
            // ArrayTypeSignature ::= "[" TypSignature.
            scanSymbol();
            return new ImplForArray(parseTypeSignature());
        case 'T':
            return parseTypeVariableSignature();
        default:
            throw new GenericSignatureFormatError();
        }
!!!2137499.java!!!	parseClassTypeSignature() : Type
        // ClassTypeSignature ::= "L" {Ident "/"} Ident
        //         OptTypeArguments {"." Ident OptTypeArguments} ";".

        expect('L');

        StringBuilder qualIdent = new StringBuilder();
        scanIdentifier();
        while (symbol == '/') {
            scanSymbol();
            qualIdent.append(identifier).append(".");
            scanIdentifier();
        }

        qualIdent.append(this.identifier);

        ListOfTypes typeArgs = parseOptTypeArguments();
        ImplForType parentType =
                new ImplForType(null, qualIdent.toString(), typeArgs, loader);
        ImplForType type = parentType;

        while (symbol == '.') {
            // Deal with Member Classes:
            scanSymbol();
            scanIdentifier();
            qualIdent.append("$").append(identifier); // FIXME: is "$" correct?
            typeArgs = parseOptTypeArguments();
            type = new ImplForType(parentType, qualIdent.toString(), typeArgs,
                    loader);
        }

        expect(';');

        return type;
!!!2137627.java!!!	parseOptTypeArguments() : ListOfTypes
        // OptTypeArguments ::= "<" TypeArgument {TypeArgument} ">".

        ListOfTypes typeArgs = new ListOfTypes(8);
        if (symbol == '<') {
            scanSymbol();

            typeArgs.add(parseTypeArgument());
            while ((symbol != '>') && (symbol > 0)) {
                typeArgs.add(parseTypeArgument());
            }
            expect('>');
        }
        return typeArgs;
!!!2137755.java!!!	parseTypeArgument() : Type
        // TypeArgument ::= (["+" | "-"] FieldTypeSignature) | "*".
        ListOfTypes extendsBound = new ListOfTypes(1);
        ListOfTypes superBound = new ListOfTypes(1);
        if (symbol == '*') {
            scanSymbol();
            extendsBound.add(Object.class);
            return new ImplForWildcard(extendsBound, superBound);
        }
        else if (symbol == '+') {
            scanSymbol();
            extendsBound.add(parseFieldTypeSignature());
            return new ImplForWildcard(extendsBound, superBound);
        }
        else if (symbol == '-') {
            scanSymbol();
            superBound.add(parseFieldTypeSignature());
            extendsBound.add(Object.class);
            return new ImplForWildcard(extendsBound, superBound);
        }
        else {
            return parseFieldTypeSignature();
        }
!!!2137883.java!!!	parseTypeVariableSignature() : ImplForVariable
        // TypeVariableSignature ::= "T" Ident ";".
        expect('T');
        scanIdentifier();
        expect(';');
        // Reference to type variable:
        // Note: we don't know the declaring GenericDeclaration yet.
        return new ImplForVariable<GenericDeclaration>(genericDecl, identifier);
!!!2138011.java!!!	parseTypeSignature() : Type
        switch (symbol) {
        case 'B': scanSymbol(); return byte.class;
        case 'C': scanSymbol(); return char.class;
        case 'D': scanSymbol(); return double.class;
        case 'F': scanSymbol(); return float.class;
        case 'I': scanSymbol(); return int.class;
        case 'J': scanSymbol(); return long.class;
        case 'S': scanSymbol(); return short.class;
        case 'Z': scanSymbol(); return boolean.class;
        default:
            // Not an elementary type, but a FieldTypeSignature.
            return parseFieldTypeSignature();
        }
!!!2138139.java!!!	parseMethodTypeSignature(inout rawExceptionTypes : Class) : void
        // MethodTypeSignature ::= [FormalTypeParameters]
        //         "(" {TypeSignature} ")" ReturnType {ThrowsSignature}.

        parseOptFormalTypeParameters();

        parameterTypes = new ListOfTypes(16);
        expect('(');
        while (symbol != ')' && (symbol > 0)) {
            parameterTypes.add(parseTypeSignature());
        }
        expect(')');

        returnType = parseReturnType();

        if (symbol == '^') {
            exceptionTypes = new ListOfTypes(8);
            do {
                scanSymbol();

                // ThrowsSignature ::= ("^" ClassTypeSignature) |
                //     ("^" TypeVariableSignature).
                if (symbol == 'T') {
                    exceptionTypes.add(parseTypeVariableSignature());
                } else {
                    exceptionTypes.add(parseClassTypeSignature());
                }
            } while (symbol == '^');
        } else if (rawExceptionTypes != null) {
            exceptionTypes = new ListOfTypes(rawExceptionTypes);
        } else {
            exceptionTypes = new ListOfTypes(0);
        }
!!!2138267.java!!!	parseReturnType() : Type
        // ReturnType ::= TypeSignature | "V".
        if (symbol != 'V') { return parseTypeSignature(); }
        else { scanSymbol(); return void.class; }
!!!2138395.java!!!	scanSymbol() : void
        if (!eof) {
            if (pos < buffer.length) {
                symbol = buffer[pos];
                pos++;
            } else {
                symbol = 0;
                eof = true;
            }
        } else {
            throw new GenericSignatureFormatError();
        }
!!!2138523.java!!!	expect(in c : char) : void
        if (symbol == c) {
            scanSymbol();
        } else {
            throw new GenericSignatureFormatError();
        }
!!!2138651.java!!!	isStopSymbol(in ch : char) : boolean
        switch (ch) {
        case ':':
        case '/':
        case ';':
        case '<':
        case '.':
            return true;
        }
        return false;
!!!2138779.java!!!	scanIdentifier() : void
        if (!eof) {
            StringBuilder identBuf = new StringBuilder(32);
            if (!isStopSymbol(symbol)) {
                identBuf.append(symbol);
                do {
                    char ch = buffer[pos];
                    if ((ch >= 'a') && (ch <= 'z') || (ch >= 'A') && (ch <= 'Z')
                            || !isStopSymbol(ch)) {
                        identBuf.append(buffer[pos]);
                        pos++;
                    } else {
                        identifier = identBuf.toString();
                        scanSymbol();
                        return;
                    }
                } while (pos != buffer.length);
                identifier = identBuf.toString();
                symbol = 0;
                eof = true;
            } else {
                // Ident starts with incorrect char.
                symbol = 0;
                eof = true;
                throw new GenericSignatureFormatError();
            }
        } else {
            throw new GenericSignatureFormatError();
        }
