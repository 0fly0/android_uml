class Modifier
!!!484379.java!!!	classModifiers() : int
        return PUBLIC | PROTECTED | PRIVATE | ABSTRACT | STATIC | FINAL | STRICT;
!!!484507.java!!!	constructorModifiers() : int
        return PUBLIC | PROTECTED | PRIVATE;
!!!484635.java!!!	fieldModifiers() : int
        return PUBLIC | PROTECTED | PRIVATE | STATIC | FINAL | TRANSIENT | VOLATILE;
!!!484763.java!!!	interfaceModifiers() : int
        return PUBLIC | PROTECTED | PRIVATE | ABSTRACT | STATIC | STRICT;
!!!484891.java!!!	methodModifiers() : int
        return PUBLIC | PROTECTED | PRIVATE | ABSTRACT | STATIC | FINAL | SYNCHRONIZED | NATIVE | STRICT;
!!!485019.java!!!	isAbstract(in modifiers : int) : boolean
        return ((modifiers & ABSTRACT) != 0);
!!!485147.java!!!	isFinal(in modifiers : int) : boolean
        return ((modifiers & FINAL) != 0);
!!!485275.java!!!	isInterface(in modifiers : int) : boolean
        return ((modifiers & INTERFACE) != 0);
!!!485403.java!!!	isNative(in modifiers : int) : boolean
        return ((modifiers & NATIVE) != 0);
!!!485531.java!!!	isPrivate(in modifiers : int) : boolean
        return ((modifiers & PRIVATE) != 0);
!!!485659.java!!!	isProtected(in modifiers : int) : boolean
        return ((modifiers & PROTECTED) != 0);
!!!485787.java!!!	isPublic(in modifiers : int) : boolean
        return ((modifiers & PUBLIC) != 0);
!!!485915.java!!!	isStatic(in modifiers : int) : boolean
        return ((modifiers & STATIC) != 0);
!!!486043.java!!!	isStrict(in modifiers : int) : boolean
        return ((modifiers & STRICT) != 0);
!!!486171.java!!!	isSynchronized(in modifiers : int) : boolean
        return ((modifiers & SYNCHRONIZED) != 0);
!!!486299.java!!!	isTransient(in modifiers : int) : boolean
        return ((modifiers & TRANSIENT) != 0);
!!!486427.java!!!	isVolatile(in modifiers : int) : boolean
        return ((modifiers & VOLATILE) != 0);
!!!486555.java!!!	toString(in modifiers : int) : String
        StringBuilder buf = new StringBuilder();

        if (isPublic(modifiers)) {
            buf.append("public ");
        }
        if (isProtected(modifiers)) {
            buf.append("protected ");
        }
        if (isPrivate(modifiers)) {
            buf.append("private ");
        }
        if (isAbstract(modifiers)) {
            buf.append("abstract ");
        }
        if (isStatic(modifiers)) {
            buf.append("static ");
        }
        if (isFinal(modifiers)) {
            buf.append("final ");
        }
        if (isTransient(modifiers)) {
            buf.append("transient ");
        }
        if (isVolatile(modifiers)) {
            buf.append("volatile ");
        }
        if (isSynchronized(modifiers)) {
            buf.append("synchronized ");
        }
        if (isNative(modifiers)) {
            buf.append("native ");
        }
        if (isStrict(modifiers)) {
            buf.append("strictfp ");
        }
        if (isInterface(modifiers)) {
            buf.append("interface ");
        }
        if (buf.length() == 0) {
            return "";
        }
        buf.setLength(buf.length() - 1);
        return buf.toString();
