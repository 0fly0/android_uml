class AtomicIntegerFieldUpdaterImpl
!!!1635611.java!!!	AtomicIntegerFieldUpdaterImpl(inout tclass : Class, inout fieldName : String)
            Field field = null;
            Class<?> caller = null;
            int modifiers = 0;
            try {
                field = tclass.getDeclaredField(fieldName);
                caller = VMStack.getStackClass2(); // android-changed
                modifiers = field.getModifiers();

                // BEGIN android-removed
                // sun.reflect.misc.ReflectUtil.ensureMemberAccess(
                //     caller, tclass, null, modifiers);
                // sun.reflect.misc.ReflectUtil.checkPackageAccess(tclass);
                // END android-removed
            } catch (Exception ex) {
                throw new RuntimeException(ex);
            }

            Class<?> fieldt = field.getType();
            if (fieldt != int.class)
                throw new IllegalArgumentException("Must be integer type");

            if (!Modifier.isVolatile(modifiers))
                throw new IllegalArgumentException("Must be volatile type");

            this.cclass = (Modifier.isProtected(modifiers) &&
                           caller != tclass) ? caller : null;
            this.tclass = tclass;
            offset = unsafe.objectFieldOffset(field);
!!!1635739.java!!!	fullCheck(inout obj : T) : void
            if (!tclass.isInstance(obj))
                throw new ClassCastException();
            if (cclass != null)
                ensureProtectedAccess(obj);
!!!1635867.java!!!	compareAndSet(inout obj : T, in expect : int, in update : int) : boolean
            if (obj == null || obj.getClass() != tclass || cclass != null) fullCheck(obj);
            return unsafe.compareAndSwapInt(obj, offset, expect, update);
!!!1635995.java!!!	weakCompareAndSet(inout obj : T, in expect : int, in update : int) : boolean
            if (obj == null || obj.getClass() != tclass || cclass != null) fullCheck(obj);
            return unsafe.compareAndSwapInt(obj, offset, expect, update);
!!!1636123.java!!!	set(inout obj : T, in newValue : int) : void
            if (obj == null || obj.getClass() != tclass || cclass != null) fullCheck(obj);
            unsafe.putIntVolatile(obj, offset, newValue);
!!!1636251.java!!!	lazySet(inout obj : T, in newValue : int) : void
            if (obj == null || obj.getClass() != tclass || cclass != null) fullCheck(obj);
            unsafe.putOrderedInt(obj, offset, newValue);
!!!1636379.java!!!	get(inout obj : T) : int
            if (obj == null || obj.getClass() != tclass || cclass != null) fullCheck(obj);
            return unsafe.getIntVolatile(obj, offset);
!!!1636507.java!!!	ensureProtectedAccess(inout obj : T) : void
            if (cclass.isInstance(obj)) {
                return;
            }
            throw new RuntimeException(
                new IllegalAccessException("Class " +
                    cclass.getName() +
                    " can not access a protected member of class " +
                    tclass.getName() +
                    " using an instance of " +
                    obj.getClass().getName()
                )
            );
