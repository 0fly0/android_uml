class ExemptionMechanism
!!!1790363.java!!!	ExemptionMechanism(inout exmechSpi : ExemptionMechanismSpi, inout provider : Provider, inout mechanism : String)
        this.mechanism = mechanism;
        this.spiImpl = exmechSpi;
        this.provider = provider;
        isInit = false;
!!!1790491.java!!!	getName() : String
        return mechanism;
!!!1790619.java!!!	getInstance(inout algorithm : String) : ExemptionMechanism
        if (algorithm == null) {
            throw new NullPointerException("algorithm == null");
        }
        Engine.SpiAndProvider sap = ENGINE.getInstance(algorithm, null);
        return new ExemptionMechanism((ExemptionMechanismSpi) sap.spi, sap.provider, algorithm);
!!!1790747.java!!!	getInstance(inout algorithm : String, inout provider : String) : ExemptionMechanism
        if (provider == null) {
            throw new IllegalArgumentException("provider == null");
        }
        Provider impProvider = Security.getProvider(provider);
        if (impProvider == null) {
            throw new NoSuchProviderException(provider);
        }
        if (algorithm == null) {
            throw new NullPointerException("algorithm == null");
        }
        return getInstance(algorithm, impProvider);
!!!1790875.java!!!	getInstance(inout algorithm : String, inout provider : Provider) : ExemptionMechanism
        if (algorithm == null) {
            throw new NullPointerException("algorithm == null");
        }
        if (provider == null) {
            throw new IllegalArgumentException("provider == null");
        }
        Object spi = ENGINE.getInstance(algorithm, provider, null);
        return new ExemptionMechanism((ExemptionMechanismSpi) spi, provider, algorithm);
!!!1791003.java!!!	getProvider() : Provider
        return provider;
!!!1791131.java!!!	isCryptoAllowed(inout key : Key) : boolean

        if (generated
                && (initKey.equals(key) || Arrays.equals(initKey.getEncoded(),
                        key.getEncoded()))) {
            return true;
        }
        return false;
!!!1791259.java!!!	getOutputSize(in inputLen : int) : int
        if (!isInit) {
            throw new IllegalStateException("ExemptionMechanism is not initialized");
        }
        return spiImpl.engineGetOutputSize(inputLen);
!!!1791387.java!!!	init(inout key : Key) : void
        generated = false;
        spiImpl.engineInit(key);
        initKey = key;
        isInit = true;
!!!1791515.java!!!	init(inout key : Key, inout param : AlgorithmParameters) : void
        generated = false;
        spiImpl.engineInit(key, param);
        initKey = key;
        isInit = true;
!!!1791643.java!!!	init(inout key : Key, inout param : AlgorithmParameterSpec) : void
        generated = false;
        spiImpl.engineInit(key, param);
        initKey = key;
        isInit = true;
!!!1791771.java!!!	genExemptionBlob() : byte
        if (!isInit) {
            throw new IllegalStateException("ExemptionMechanism is not initialized");
        }
        generated = false;
        byte[] result = spiImpl.engineGenExemptionBlob();
        generated = true;
        return result;
!!!1791899.java!!!	genExemptionBlob(inout output : byte) : int
        return genExemptionBlob(output, 0);
!!!1792027.java!!!	genExemptionBlob(inout output : byte, in outputOffset : int) : int
        if (!isInit) {
            throw new IllegalStateException("ExemptionMechanism is not initialized");
        }
        generated = false;
        int len = spiImpl.engineGenExemptionBlob(output, outputOffset);
        generated = true;
        return len;
!!!1792155.java!!!	finalize() : void
        try {
            super.finalize();
        } catch (Throwable t) {
            // for consistency with the RI, we must override Object.finalize() to
            // remove the throws clause.
            throw new AssertionError(t);
        }
