class WebBackForwardListClassic
!!!4935180.java!!!	WebBackForwardListClassic(inout proxy : CallbackProxy)
        mCurrentIndex = -1;
        mArray = new ArrayList<WebHistoryItemClassic>();
        mCallbackProxy = proxy;
!!!4935308.java!!!	getCurrentItem() : WebHistoryItemClassic
        return getItemAtIndex(mCurrentIndex);
!!!4935436.java!!!	getCurrentIndex() : int
        return mCurrentIndex;
!!!4935564.java!!!	getItemAtIndex(in index : int) : WebHistoryItemClassic
        if (index < 0 || index >= getSize()) {
            return null;
        }
        return mArray.get(index);
!!!4935692.java!!!	getSize() : int
        return mArray.size();
!!!4935820.java!!!	setClearPending() : void
        mClearPending = true;
!!!4935948.java!!!	getClearPending() : boolean
        return mClearPending;
!!!4936076.java!!!	addHistoryItem(inout item : WebHistoryItem) : void
        // Update the current position because we are going to add the new item
        // in that slot.
        ++mCurrentIndex;
        // If the current position is not at the end, remove all history items
        // after the current item.
        final int size = mArray.size();
        final int newPos = mCurrentIndex;
        if (newPos != size) {
            for (int i = size - 1; i >= newPos; i--) {
                final WebHistoryItem h = mArray.remove(i);
            }
        }
        // Add the item to the list.
        mArray.add((WebHistoryItemClassic) item);
        if (mCallbackProxy != null) {
            mCallbackProxy.onNewHistoryItem(item);
        }
!!!4936204.java!!!	close(in nativeFrame : int) : void
        // Clear the array first because nativeClose will call addHistoryItem
        // with the current item.
        mArray.clear();
        mCurrentIndex = -1;
        nativeClose(nativeFrame);
        // Reset the clear flag
        mClearPending = false;
!!!4936332.java!!!	removeHistoryItem(in index : int) : void
        // XXX: This is a special case. Since the callback is only triggered
        // when removing the first item, we can assert that the index is 0.
        // This lets us change the current index without having to query the
        // native BackForwardList.
        if (DebugFlags.WEB_BACK_FORWARD_LIST && (index != 0)) {
            throw new AssertionError();
        }
        final WebHistoryItem h = mArray.remove(index);
        // XXX: If we ever add another callback for removing history items at
        // any index, this will no longer be valid.
        mCurrentIndex--;
!!!4936460.java!!!	clone() : WebBackForwardListClassic
        WebBackForwardListClassic l = new WebBackForwardListClassic(null);
        if (mClearPending) {
            // If a clear is pending, return a copy with only the current item.
            l.addHistoryItem(getCurrentItem());
            return l;
        }
        l.mCurrentIndex = mCurrentIndex;
        int size = getSize();
        l.mArray = new ArrayList<WebHistoryItemClassic>(size);
        for (int i = 0; i < size; i++) {
            // Add a copy of each WebHistoryItem
            l.mArray.add(mArray.get(i).clone());
        }
        return l;
!!!4936588.java!!!	setCurrentIndex(in newIndex : int) : void
        mCurrentIndex = newIndex;
        if (mCallbackProxy != null) {
            mCallbackProxy.onIndexChanged(getItemAtIndex(newIndex), newIndex);
        }
