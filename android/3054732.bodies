class NetflixUrl
!!!12638732.java!!!	getExplicitSourceType(inout intent : Intent) : int
        int explicitSourceType = INVALID_SOURCE_TYPE;
        do {
            String sourceType = intent.getStringExtra(INTENT_KEY_LAUNCH_FROM);
            if (INTENT_VALUE_SOURCE_VOICE.equals(sourceType)) {
                explicitSourceType = VOICE_CONTROL;
                break;
            }
            if (intent.getBooleanExtra(INTENT_KEY_QUICK_LAUNCH, false)) {
                explicitSourceType = DEDICATED_ON_SCREEN_ICON;
                break;
            }
            explicitSourceType = intent.getIntExtra(INTENT_KEY_SOURCE_TYPE, INVALID_SOURCE_TYPE);
        }
        while(false);

        if (explicitSourceType != INVALID_SOURCE_TYPE) {
            Log.i(TAG, "source_type is explcitly set to " + explicitSourceType);
        }
        return explicitSourceType;
!!!12638860.java!!!	appendPlatformProperties(inout netflixUrlBuilder : Builder) : void
        netflixUrlBuilder.appendQueryParameter(QUERY_KEY_VERSION_RELEASE, Build.VERSION.RELEASE)
                .appendQueryParameter(QUERY_KEY_VERSION_INCREMENTAL, Build.VERSION.INCREMENTAL)
                .appendQueryParameter(QUERY_KEY_BUILD_ID, Build.ID)
                .appendQueryParameter(QUERY_KEY_BUILD_TIME, String.valueOf(Build.TIME));
!!!12638988.java!!!	appendNetworkProperties(inout netflixUrlBuilder : Builder, inout context : Context) : void
        NetworkInfo networkInfo = ((ConnectivityManager) context
                .getSystemService(Context.CONNECTIVITY_SERVICE))
                .getActiveNetworkInfo();
        if (networkInfo == null) {
            Log.w(TAG, "Cannot get NetworkInfo. Network might be disconected.");
            return;
        }
        netflixUrlBuilder.appendQueryParameter(QUERY_KEY_NETWORK_TYPE, networkInfo.getTypeName());
!!!12639116.java!!!	appendPlayParameters(inout netflixUrlBuilder : Builder, inout intent : Intent) : void
        int sourceType = ITEM_IN_APPLICATION_LIST;
        Builder playParameterBuilder = new Builder();
        if (Intent.ACTION_VIEW.equals(intent.getAction())) {
            Uri data = intent.getData();
            if (data != null) {
                if (NETFLIX_SCHEME.equals(data.getScheme())) {
                    // Strip "nflx://" from string.
                    playParameterBuilder.encodedQuery(
                            data.toString().substring((NETFLIX_SCHEME + "://").length()));
                    sourceType = SEARCH_RESULT;
                } else {
                    playParameterBuilder.appendQueryParameter(
                            QUERY_PLAY_SUBKEY_PLAY, data.toString());
                    sourceType = WEB_BROWSER;
                }
            } else {
                Log.w("TAG", "intent.data is null");
            }
        } else if (isFromDial(intent)) {
            String dialParams = intent.getStringExtra(DIAL_EXTRA_LAUNCH_DATA);
            Log.i(TAG, "dialParams = "  + dialParams);
            if (!TextUtils.isEmpty(dialParams)) {
                playParameterBuilder.appendQueryParameter(QUERY_PLAY_SUBKEY_DIAL, dialParams);
                String titleId = new Builder()
                        .encodedQuery(dialParams)
                        .build()
                        .getQueryParameter(DIAL_KEY_TITLE_ID);
                if (!TextUtils.isEmpty(titleId)) {
                    playParameterBuilder.appendQueryParameter(QUERY_PLAY_SUBKEY_PLAY, titleId);
                }
            }
            sourceType = DIAL;
        }

        int explicitSourceType = getExplicitSourceType(intent);
        if (explicitSourceType != INVALID_SOURCE_TYPE) {
            sourceType = explicitSourceType;
        }
        playParameterBuilder.appendQueryParameter(
                QUERY_PLAY_SUBKEY_SOURCE_TYPE, String.valueOf(sourceType));
        netflixUrlBuilder.appendQueryParameter(
                QUERY_KEY_PLAY_PARAMETERS, playParameterBuilder.build().getEncodedQuery());
!!!12639244.java!!!	appendVideoProperties(inout netflixUrlBuilder : Builder) : void
        // TODO(OEM): set below properties to override video width/height,
        //  if video output resolution is different from UI output resolution.
        String videoHeight = SystemProperties.get(PROPERTY_VIDEO_OUTPUT_HEIGHT);
        String videoWidth = SystemProperties.get(PROPERTY_VIDEO_OUTPUT_WIDTH);
        if (TextUtils.isEmpty(videoHeight) || TextUtils.isEmpty(videoWidth)) {
            PhysicalDisplayInfo displayInfo = new PhysicalDisplayInfo();
            IBinder displayToken = Surface.getBuiltInDisplay(Surface.BUILT_IN_DISPLAY_ID_MAIN);
            if (displayToken == null || !Surface.getDisplayInfo(displayToken, displayInfo)) {
                Log.w(TAG, "Could not video output width/height");
                return;
            }
            videoHeight = String.valueOf(displayInfo.height);
            videoWidth = String.valueOf(displayInfo.width);
        }
        netflixUrlBuilder
                .appendQueryParameter(QUERY_KEY_VIDEO_HEIGHT, videoHeight)
                .appendQueryParameter(QUERY_KEY_VIDEO_WIDTH, videoWidth);
!!!12639372.java!!!	readUrlFromFile() : String
        BufferedReader reader = null;
        try {
            reader = new BufferedReader(new FileReader(URL_OVERRIDE_FILE));
            return reader.readLine();
        } catch(Exception e) {
            return null;
        } finally {
            try {
                if (reader != null) reader.close();
            } catch (Exception e) {}
        }
!!!12639500.java!!!	getNetflixHomeUrl() : String
        String newNetflixHomeUrl = readUrlFromFile();
        return !TextUtils.isEmpty(newNetflixHomeUrl) ? newNetflixHomeUrl : NETFLIX_HOME_URL;
!!!12639628.java!!!	generate(inout context : Context, inout intent : Intent) : Uri
        Builder netflixUrlBuilder = Uri.parse(getNetflixHomeUrl()).buildUpon();
        appendPlayParameters(netflixUrlBuilder, intent);
        appendPlatformProperties(netflixUrlBuilder);
        appendNetworkProperties(netflixUrlBuilder, context);
        appendVideoProperties(netflixUrlBuilder);
        return netflixUrlBuilder.build();
!!!12639756.java!!!	isFromDial(inout intent : Intent) : boolean
        return DIAL_ACTION_NAME.equals(intent.getAction());
!!!12639884.java!!!	getDialAppId(inout intent : Intent) : int
        return intent.getIntExtra(DIAL_LAUNCH_EXTRA_APP_ID, -1);
