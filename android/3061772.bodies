class SmoothStreamingFragmentParser
!!!12667148.java!!!	parse(inout buffer : ByteBuffer) : TrackInfo
        parseMoofBox(buffer);
        parseMdatBox(buffer);

        return mTrackInfo;
!!!12667276.java!!!	parseMoofBox(inout buffer : ByteBuffer) : void
        int start = buffer.position();
        int size = readBoxSize(buffer, BoxType.MOOF);

        while (buffer.position() - start < size) {
            BoxType type = peekBoxType(buffer);
            switch (type) {
            case MFHD:
                parseMfhdBox(buffer);
                break;
            case TRAF:
                parseTrafBox(buffer);
                break;
            default:
                parseUnknownBox(buffer);
                break;
            }
        }

        buffer.position(start + size);
!!!12667404.java!!!	parseUnknownBox(inout buffer : ByteBuffer) : void
        int start = buffer.position();
        int size = readBoxSize(buffer, BoxType.UNKNOWN);

        Log.w(TAG, "Unknown BoxType");
        buffer.position(start + size);
!!!12667532.java!!!	parseMfhdBox(inout buffer : ByteBuffer) : void
        int start = buffer.position();
        int size = readBoxSize(buffer, BoxType.MFHD);

        // Reads sequence number.
        int seq = buffer.getInt();

        // Reads vendor specific data here.
        buffer.position(start + size);
!!!12667660.java!!!	parseTrafBox(inout buffer : ByteBuffer) : void
        int start = buffer.position();
        int size = readBoxSize(buffer, BoxType.TRAF);

        BoxType type = peekBoxType(buffer);

        // Assume that traf box starts with a trhd and follows zero or more trun
        // and vendor specific boxes.
        parseTfhdBox(buffer);

        while (buffer.position() - start < size) {
            switch (peekBoxType(buffer)) {
            case TRUN:
                parseTrunBox(buffer);
                break;
            case UUID:
                parseUuidBox(buffer);
                break;
            default:
                parseUnknownBox(buffer);
            }
        }

        buffer.position(start + size);
!!!12667788.java!!!	parseTfhdBox(inout buffer : ByteBuffer) : void
        int start = buffer.position();
        int size = readBoxSize(buffer, BoxType.TFHD);

        mTrackInfo = null;
        mTrackInfo = new TrackInfo();

        mTrackInfo.mFlag = readFullBoxFlag(buffer);
        mTrackInfo.mTrackId = buffer.getInt();

        if ((mTrackInfo.mFlag & sFlagTfhdBaseDataOffset) != 0) {
            mTrackInfo.mBaseOffset = buffer.getLong();
        }

        if ((mTrackInfo.mFlag & sFlagTfhdSampleDescriptionIndex) != 0) {
            mTrackInfo.mSampleDescriptionIndex = buffer.getInt();
        }

        if ((mTrackInfo.mFlag & sFlagTfhdDefaultSampleDuration) != 0) {
            mTrackInfo.mDefaultSampleDuration = buffer.getInt();
        }

        if ((mTrackInfo.mFlag & sFlagTfhdDefaultSampleSize) != 0) {
            mTrackInfo.mDefaultSampleSize = buffer.getInt();
        }

        if ((mTrackInfo.mFlag & sFlagTfhdDefaultSampleFlag) != 0) {
            mTrackInfo.mDefaultSampleFlags = buffer.getInt();
        }

        buffer.position(start + size);
!!!12667916.java!!!	parseTrunBox(inout buffer : ByteBuffer) : void
        int start = buffer.position();
        int size = readBoxSize(buffer, BoxType.TRUN);

        int flag = readFullBoxFlag(buffer);
        mTrackInfo.mSampleCount = buffer.getInt();

        if ((flag & sFlagTrunDataOffset) != 0) {
            mTrackInfo.mDataOffset = buffer.getInt();
        }

        int sampleFlags = mTrackInfo.mDefaultSampleFlags;
        if ((flag & sFlagTrunFirstSampleFlags) != 0) {
            sampleFlags = buffer.getInt();
        }

        for (int i = 0; i < mTrackInfo.mSampleCount; ++i) {
            SampleInfo sample = new SampleInfo();
            if ((flag & sFlagTrunSampleDuration) != 0) {
                sample.mDuration = buffer.getInt();
            } else {
                sample.mDuration = mTrackInfo.mDefaultSampleDuration;
            }

            if ((flag & sFlagTrunSampleSize) != 0) {
                sample.mSize = buffer.getInt();
            } else {
                sample.mSize = mTrackInfo.mDefaultSampleSize;
            }

            if ((flag & sFlagTrunSampleFlags) != 0) {
                sample.mFlags = buffer.getInt();
            } else {
                sample.mFlags = sampleFlags;
            }

            if ((flag & sFlagTrunSampleCompositionTimeOffsets) != 0) {
                sample.mCompositionTimeOffset = buffer.getInt();
            }

            mTrackInfo.mSamples.add(sample);
        }

        // Reads vendor specific trun data here.

        buffer.position(start + size);
!!!12668044.java!!!	parseUuidBox(inout buffer : ByteBuffer) : void
        int start = buffer.position();
        int size = readBoxSize(buffer, BoxType.UUID);

        byte[] sampleEncryptionBoxType = {
                (byte) 0xa2, 0x39, 0x4f, 0x52, 0x5a, (byte) 0x9b, 0x4f, 0x14,
                (byte) 0xa2, 0x44, 0x6c, 0x42, 0x7c, 0x64, (byte) 0x8d, (byte) 0xf4};
        byte[] type = new byte[16];
        buffer.get(type, 0, 16);
        if(!Arrays.equals(sampleEncryptionBoxType, type)) {
            throw new InvalidFormatException("encryptionBoxType in UUID box is not matched.");
        }
        int flag = readFullBoxFlag(buffer);
        if ((flag & sFlagOverrideTrackEncryptionBox) != 0) {
            // TODO: Implement this.
            Log.e(TAG, "Unsupported dynamic change of the algorithm.");
        }
        int sampleCount = buffer.getInt();
        if (sampleCount != mTrackInfo.mSampleCount) {
            throw new InvalidFormatException("Mismatch in the sample count.");
        }

        for (int i = 0; i < sampleCount; ++i) {
            CryptoInfo cryptoInfo = new CryptoInfo();
            // We assume that the mode is always CRYPTO_MODE_AES_CTR in SS.
            cryptoInfo.mode = CryptoInfo.MODE_AES_CTR;
            // TODO: Use drmId which gets from IsmParser.
            cryptoInfo.drmId = CryptoInfo.UUID_PLAYREADY;
            cryptoInfo.iv = new byte[16];
            cryptoInfo.key = new byte[16];
            // Convert BIG_ENDIAN to LITTLE_ENDIAN. (native order is LITTLE_ENDIAN.)
            ByteBuffer ivBuffer = ByteBuffer.wrap(cryptoInfo.iv);
            ivBuffer.order(ByteOrder.nativeOrder());
            ivBuffer.putLong(buffer.getLong());
            if ((flag & sFlagUseSubSampleEncryption) != 0) {
                int numSubSample = buffer.getShort();
                cryptoInfo.numSubSamples = numSubSample;
                cryptoInfo.numBytesOfClearData = new int[numSubSample];
                cryptoInfo.numBytesOfEncryptedData = new int[numSubSample];
                for (int j = 0; j < numSubSample; ++j) {
                    cryptoInfo.numBytesOfClearData[j] = buffer.getShort();
                    cryptoInfo.numBytesOfEncryptedData[j] = buffer.getInt();
                }
                mTrackInfo.mSamples.get(i).mCryptoInfo = cryptoInfo;
            } else {
                int numSubSample = 1;
                cryptoInfo.numSubSamples = numSubSample;
                cryptoInfo.numBytesOfClearData = new int[numSubSample];
                cryptoInfo.numBytesOfEncryptedData = new int[numSubSample];
                cryptoInfo.numBytesOfClearData[0] = 0;
                cryptoInfo.numBytesOfEncryptedData[0] = mTrackInfo.mSamples.get(i).mSize;
                mTrackInfo.mSamples.get(i).mCryptoInfo = cryptoInfo;
            }
        }
!!!12668172.java!!!	readFullBoxFlag(inout buffer : ByteBuffer) : int
        return buffer.getInt() & 0x00ffffff;
!!!12668300.java!!!	readBoxSize(inout buffer : ByteBuffer, inout type : BoxType) : int
        int size = buffer.getInt();

        BoxType readType = readBoxType(buffer);
        if (type != BoxType.UNKNOWN && type != readType) {
            throw new InvalidFormatException(type.name() +
                    " does not match with " + readType.name());
        }

        if (size == 1) {
            // skip type(4 bytes) and read long value.
            // Currently only < 2Gb allowed.
            long longSize = buffer.getLong(buffer.position() + 4);
            if (longSize > 0x7fffffff) {
                throw new InvalidFormatException("We supports only less than 2gb size of chunk.");
            }
        }

        return size;
!!!12668428.java!!!	peekBoxType(inout buffer : ByteBuffer) : BoxType
        int start = buffer.position();
        // read length;
        buffer.getInt();
        BoxType type = readBoxType(buffer);
        buffer.position(start);
        return type;
!!!12668556.java!!!	readBoxType(inout buffer : ByteBuffer) : BoxType
        byte data[] = new byte[4];
        buffer.get(data);
        return BoxType.valueOf(data);
!!!12668684.java!!!	parseMdatBox(inout buffer : ByteBuffer) : void
        int start = buffer.position();
        int size = readBoxSize(buffer, BoxType.MDAT);

        for (SampleInfo s : mTrackInfo.mSamples) {
            s.mPosition = buffer.position();

            // In order to reduce the number of mem copy, just mark start
            // position of buffer here.
            buffer.position(s.mPosition + s.mSize);
        }

        buffer.position(start + size);
