class StaticMatrixCursor
!!!13285772.java!!!	StaticMatrixCursor(inout columnNames : String, inout extras : Bundle)
        if (columnNames == null) {
            throw new IllegalArgumentException("columnNames cannot be null");
        }
        if (columnNames.length == 0) {
            throw new IllegalArgumentException("Must have at least one column");
        }
        this.mColumnNames = columnNames;
        if (extras == null) {
            throw new IllegalArgumentException("extras cannot be null");
        }
        this.mExtras = extras;
!!!13285900.java!!!	forContents(inout columnNames : String, inout contents : Object, inout extras : Bundle) : StaticMatrixCursor
        return new StaticMatrixCursor.FromContentArrays(columnNames, contents, extras);
!!!13286412.java!!!	forContentValues(in columnNames : String, in contents : ContentValues, inout extras : Bundle) : StaticMatrixCursor
        return new StaticMatrixCursor.FromContentValues(columnNames, contents, extras);
!!!13286924.java!!!	getExtras() : Bundle
        return mExtras;
!!!13287052.java!!!	getColumnNames() : String
        return mColumnNames;
!!!13287180.java!!!	get(in column : int) : Object
        if (column < 0 || column >= mColumnNames.length) {
            throw new CursorIndexOutOfBoundsException("Requested column: "
                    + column + ", # of columns: " +  mColumnNames.length);
        }
        if (mPos < 0) {
            throw new CursorIndexOutOfBoundsException("Before first row.");
        }
        if (mPos >= getCount()) {
            throw new CursorIndexOutOfBoundsException("After last row.");
        }
        return getInternal(mPos, column);
!!!13287436.java!!!	getBlob(in column : int) : byte
        return (byte[]) get(column);
!!!13287564.java!!!	getString(in column : int) : String
        Object value = get(column);
        return value == null ? null : value.toString();
!!!13287692.java!!!	getShort(in column : int) : short
        Object value = get(column);
        if (value == null) {
            return 0;
        }
        return ((Number) value).shortValue();
!!!13287820.java!!!	getInt(in column : int) : int
        Object value = get(column);
        if (value == null) {
            return 0;
        }
        return ((Number) value).intValue();
!!!13287948.java!!!	getLong(in column : int) : long
        Object value = get(column);
        if (value == null) {
            return 0;
        }
        return ((Number) value).longValue();
!!!13288076.java!!!	getFloat(in column : int) : float
        Object value = get(column);
        if (value == null) {
            return 0.0f;
        }
        return ((Number) value).floatValue();
!!!13288204.java!!!	getDouble(in column : int) : double
        Object value = get(column);
        if (value == null) {
            return 0.0d;
        }
        return ((Number) value).doubleValue();
!!!13288332.java!!!	getType(in column : int) : int
        return getTypeOfObject(get(column));
!!!13288460.java!!!	isNull(in column : int) : boolean
        return get(column) == null;
!!!13288588.java!!!	getTypeOfObject(inout obj : Object) : int
        if (obj == null) {
            return Cursor.FIELD_TYPE_NULL;
        } else if (obj instanceof byte[]) {
            return Cursor.FIELD_TYPE_BLOB;
        } else if (obj instanceof Float || obj instanceof Double) {
            return Cursor.FIELD_TYPE_FLOAT;
        } else if (obj instanceof Long || obj instanceof Integer) {
            return Cursor.FIELD_TYPE_INTEGER;
        } else {
            return Cursor.FIELD_TYPE_STRING;
        }
!!!13288716.java!!!	fillWindow(in position : int, inout window : CursorWindow) : void
        if (position < 0 || position >= getCount()) {
            return;
        }
        window.acquireReference();
        try {
            int oldpos = mPos;
            mPos = position - 1;
            window.clear();
            window.setStartPosition(position);
            int columnNum = getColumnCount();
            window.setNumColumns(columnNum);
            while (moveToNext() && window.allocRow()) {
                for (int i = 0; i < columnNum; i++) {
                    int columnType = getType(i);
                    if (columnType == Cursor.FIELD_TYPE_NULL) {
                        if (!window.putNull(mPos, i)) {
                            window.freeLastRow();
                            break;
                        }
                    } else if (columnType == Cursor.FIELD_TYPE_BLOB) {
                        if (!window.putBlob(getBlob(i), mPos, i)) {
                            window.freeLastRow();
                            break;
                        }
                    } else {
                        if (!window.putString(getString(i), mPos, i)) {
                            window.freeLastRow();
                            break;
                        }
                    }
                }
            }

            mPos = oldpos;
        } catch (IllegalStateException e) {
            // simply ignore it, to be consistent with AbstractCursor.
        } finally {
            window.releaseReference();
        }
