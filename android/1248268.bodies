class ToRGBAFilter
!!!7104268.java!!!	ToRGBAFilter(in name : String)
        super(name);
!!!7104396.java!!!	setupPorts() : void
        MutableFrameFormat mask = new MutableFrameFormat(FrameFormat.TYPE_BYTE,
                                                         FrameFormat.TARGET_NATIVE);
        mask.setDimensionCount(2);
        addMaskedInputPort("image", mask);
        addOutputBasedOnInput("image", "image");
!!!7104524.java!!!	getOutputFormat(in portName : String, inout inputFormat : FrameFormat) : FrameFormat
        return getConvertedFormat(inputFormat);
!!!7104652.java!!!	getConvertedFormat(inout format : FrameFormat) : FrameFormat
        MutableFrameFormat result = format.mutableCopy();
        result.setMetaValue(ImageFormat.COLORSPACE_KEY, ImageFormat.COLORSPACE_RGBA);
        result.setBytesPerSample(4);
        return result;
!!!7104780.java!!!	createProgram(inout context : FilterContext, inout format : FrameFormat) : void
        mInputBPP = format.getBytesPerSample();
        if (mLastFormat != null && mLastFormat.getBytesPerSample() == mInputBPP) return;
        mLastFormat = format;
        switch (mInputBPP) {
            case 1:
                mProgram = new NativeProgram("filterpack_imageproc", "gray_to_rgba");
                break;
            case 3:
                mProgram = new NativeProgram("filterpack_imageproc", "rgb_to_rgba");
                break;
            default:
                throw new RuntimeException("Unsupported BytesPerPixel: " + mInputBPP + "!");
        }
!!!7104908.java!!!	process(inout context : FilterContext) : void
        // Get input frame
        Frame input = pullInput("image");
        createProgram(context, input.getFormat());

        // Create output frame
        Frame output = context.getFrameManager().newFrame(getConvertedFormat(input.getFormat()));

        // Process
        mProgram.process(input, output);

        // Push output
        pushOutput("image", output);

        // Release pushed frame
        output.release();
