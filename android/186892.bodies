class Rect
!!!1547788.cpp!!!	makeInvalid() : void
    left = 0;
    top = 0;
    right = -1;
    bottom = -1;
!!!1550092.cpp!!!	operator <(in rhs : Rect) : bool
    if (top<rhs.top) {
        return true;
    } else if (top == rhs.top) {
        if (left < rhs.left) {
            return true;
        } else if (left == rhs.left) {
            if (bottom<rhs.bottom) {
                return true;
            } else if (bottom == rhs.bottom) {
                if (right<rhs.right) {
                    return true;
                }
            }
        }
    }
    return false;
!!!1550860.cpp!!!	operator +(in rhs : Point) : Rect
    const Rect result(left+rhs.x, top+rhs.y, right+rhs.x, bottom+rhs.y);
    return result;
!!!1550988.cpp!!!	operator -(in rhs : Point) : Rect
    const Rect result(left-rhs.x, top-rhs.y, right-rhs.x, bottom-rhs.y);
    return result;
!!!1551244.cpp!!!	offsetTo(in x : int32_t, in y : int32_t) : Rect
    right -= left - x;
    bottom -= top - y;
    left = x;
    top = y;
    return *this;
!!!1551372.cpp!!!	offsetBy(in x : int32_t, in y : int32_t) : Rect
    left += x;
    top  += y;
    right+= x;
    bottom+=y;
    return *this;
!!!1551500.cpp!!!	intersect(in with : Rect, inout result : Rect) : bool
    result->left    = max(left, with.left);
    result->top     = max(top, with.top);
    result->right   = min(right, with.right);
    result->bottom  = min(bottom, with.bottom);
    return !(result->isEmpty());
!!!1551628.cpp!!!	transform(in xform : uint32_t, in width : int32_t, in height : int32_t) : Rect
    Rect result(*this);
    if (xform & HAL_TRANSFORM_FLIP_H) {
        result = Rect(width - result.right, result.top,
                width - result.left, result.bottom);
    }
    if (xform & HAL_TRANSFORM_FLIP_V) {
        result = Rect(result.left, height - result.bottom,
                result.right, height - result.top);
    }
    if (xform & HAL_TRANSFORM_ROT_90) {
        int left = height - result.bottom;
        int top = result.left;
        int right = height - result.top;
        int bottom = result.right;
        result = Rect(left, top, right, bottom);
    }
    return result;
