class FsUtils
!!!9067532.java!!!	getHttpClient() : HttpClient
        if (sHttpClient == null) {
            HttpParams params = new BasicHttpParams();

            SchemeRegistry schemeRegistry = new SchemeRegistry();
            schemeRegistry.register(new Scheme("http", PlainSocketFactory.getSocketFactory(),
                    ForwarderManager.HTTP_PORT));
            schemeRegistry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(),
                    ForwarderManager.HTTPS_PORT));

            ClientConnectionManager connectionManager = new ThreadSafeClientConnManager(params,
                    schemeRegistry);
            sHttpClient = new DefaultHttpClient(connectionManager, params);
            HttpConnectionParams.setSoTimeout(sHttpClient.getParams(), HTTP_TIMEOUT_MS);
            HttpConnectionParams.setConnectionTimeout(sHttpClient.getParams(), HTTP_TIMEOUT_MS);
        }
        return sHttpClient;
!!!9067660.java!!!	writeDataToStorage(inout file : File, inout bytes : byte, inout append : boolean) : void
        Log.d(LOG_TAG, "writeDataToStorage(): " + file.getAbsolutePath());
        try {
            OutputStream outputStream = null;
            try {
                file.getParentFile().mkdirs();
                file.createNewFile();
                Log.d(LOG_TAG, "writeDataToStorage(): File created: " + file.getAbsolutePath());
                outputStream = new FileOutputStream(file, append);
                outputStream.write(bytes);
            } finally {
                if (outputStream != null) {
                    outputStream.close();
                }
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "file.getAbsolutePath=" + file.getAbsolutePath() + " append=" + append,
                    e);
        }
!!!9067788.java!!!	readDataFromStorage(inout file : File) : byte
        if (!file.exists()) {
            Log.d(LOG_TAG, "readDataFromStorage(): File does not exist: "
                    + file.getAbsolutePath());
            return null;
        }

        byte[] bytes = null;
        try {
            FileInputStream fis = null;
            try {
                fis = new FileInputStream(file);
                bytes = new byte[(int)file.length()];
                fis.read(bytes);
            } finally {
                if (fis != null) {
                    fis.close();
                }
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "file.getAbsolutePath=" + file.getAbsolutePath(), e);
        }

        return bytes;
!!!9068300.java!!!	readDataFromUrl(inout url : URL) : byte
        if (url == null) {
            Log.w(LOG_TAG, "readDataFromUrl(): url is null!");
            return null;
        }

        UrlDataGetter getter = new UrlDataGetter(url);
        return getter.get();
!!!9068428.java!!!	getLayoutTestsDirContents(in dirRelativePath : String, inout recurse : boolean, inout mode : boolean) : List<String>
        String modeString = (mode ? "folders" : "files");

        URL url = null;
        try {
            url = new URL(SCRIPT_URL +
                    "?path=" + dirRelativePath +
                    "&recurse=" + recurse +
                    "&mode=" + modeString);
        } catch (MalformedURLException e) {
            Log.e(LOG_TAG, "path=" + dirRelativePath + " recurse=" + recurse + " mode=" +
                    modeString, e);
            return new LinkedList<String>();
        }

        HttpGet httpRequest = new HttpGet(url.toString());
        ResponseHandler<LinkedList<String>> handler = new ResponseHandler<LinkedList<String>>() {
            @Override
            public LinkedList<String> handleResponse(HttpResponse response)
                    throws IOException {
                LinkedList<String> lines = new LinkedList<String>();

                if (response.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {
                    return lines;
                }
                HttpEntity entity = response.getEntity();
                if (entity == null) {
                    return lines;
                }

                BufferedReader reader =
                        new BufferedReader(new InputStreamReader(entity.getContent()));
                String line;
                try {
                    while ((line = reader.readLine()) != null) {
                        lines.add(line);
                    }
                } finally {
                    if (reader != null) {
                        reader.close();
                    }
                }

                return lines;
            }
        };

        try {
            return getHttpClient().execute(httpRequest, handler);
        } catch (IOException e) {
            Log.e(LOG_TAG, "getLayoutTestsDirContents(): HTTP GET failed for URL " + url);
            return null;
        }
!!!9068556.java!!!	closeInputStream(inout inputStream : InputStream) : void
        try {
            if (inputStream != null) {
                inputStream.close();
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "Couldn't close stream!", e);
        }
!!!9068684.java!!!	closeOutputStream(inout outputStream : OutputStream) : void
        try {
            if (outputStream != null) {
                outputStream.close();
            }
        } catch (IOException e) {
            Log.e(LOG_TAG, "Couldn't close stream!", e);
        }
!!!9068812.java!!!	loadTestListFromStorage(in path : String) : List<String>
        List<String> list = new ArrayList<String>();
        if (path != null && !path.isEmpty()) {
            try {
                File file = new File(path);
                Log.d(LOG_TAG, "test list loaded from " + path);
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String line = null;
                while ((line = reader.readLine()) != null) {
                    list.add(line);
                }
                reader.close();
            } catch (IOException ioe) {
                Log.e(LOG_TAG, "failed to load test list", ioe);
            }
        }
        return list;
!!!9068940.java!!!	saveTestListToStorage(inout file : File, in start : int, inout testList : List<String>) : void
        try {
            BufferedWriter writer = new BufferedWriter(
                    new FileWriter(file));
            for (String line : testList.subList(start, testList.size())) {
                writer.write(line + '\n');
            }
            writer.flush();
            writer.close();
        } catch (IOException e) {
            Log.e(LOG_TAG, "failed to write test list", e);
        }
