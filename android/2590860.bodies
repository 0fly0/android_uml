class AVSettingsTable
!!!10955148.cpp!!!	~AVSettingsTable()
    if(data_matrix_) {
        for(int i = 0; i< max_row_; i++)
            delete []data_matrix_[i];

        delete []data_matrix_;
    }

    for (unsigned int i = 0; i < field_list_.size(); i++) {
        FieldItem * item = field_list_.itemAt(i);
        delete item;
    }
    for (unsigned int i = 0; i < subkey_list_.size(); i++) {
        Subkey * item = subkey_list_.itemAt(i);
        delete item;
    }
!!!10955276.cpp!!!	attachDbFile(inout db : Sqlite3TableDatabase) : void
    db_file_ = db;
    fetchTableRecord();
!!!10955404.cpp!!!	detachDbFile() : void
    db_file_ = NULL;
    table_inited_ = 0;
!!!10955532.cpp!!!	initTable(inout xmltable : char) : void
    //hook up physical datebase.
    parseXmlTable(xmltable);

    //create table context
    unsigned int i = 0;
    //field name list
    field_name_.add(String8::format("%s", TABLE_KEY));
    field_name_.add(String8::format("%s", TABLE_KEYNAME));
    for(i = 0 ; i < field_list_.size(); i++)
        field_name_.add(field_list_[i]->GetName());

    //field type list
    field_type_.add(String8::format("INTEGER PRIMARY KEY"));
    field_type_.add(String8::format("CHAR(64)"));

    for(i = 0; i < field_list_.size(); i++)
        field_type_.add(String8::format("INTEGER"));

    //default value
    default_value_.add(String8::format(" "));
    default_value_.add(String8::format(" "));

    for(i = 0; i < field_list_.size(); i++) {
        default_value_.add(String8::format("%d", field_list_[i]->GetDefaultValue()));
    }
!!!10955660.cpp!!!	loadTable() : void
    fetchTableRecord();
!!!10955788.cpp!!!	createTable() : void
    String8 temp;

    //create table
    createTableField();

    //insert default record
    temp.setTo("");
    insertTableRecord(0, 0, temp);
!!!10956044.cpp!!!	getEntry(inout value : int32_t, in field : int32_t) : bool
    int32_t row = 0, col = 0, pkey = -1;
    String8 key_name;

    va_list args;
    va_start(args, field);

    int32_t i = 0, count, param;
    count = subkey_list_.size();
    param = va_arg(args, int32_t);
    while(i< count && param!=-1) {
        pkey = subkey_list_[i]->getKey(param);
        if(pkey == -1) break;
        key_name.appendFormat("_%s", subkey_list_[i]->keyitem_list[pkey]->GetName().string());
        row += subkey_list_[i]->GetNest()*pkey;
        i++;
        param = va_arg(args, int32_t);
    }
    va_end(args);

    if(i<count) row = -1;

    col = getField(field);

    if(row == -1 || col == -1)
        return false;

    if(table_inited_ == 0) {
        FieldItem * item = field_list_.itemAt(col);
        *value = item->GetDefaultValue();
        return false;
    }

    *value = data_matrix_[row][col];
    key_name.appendFormat("_%s", field_list_[col]->GetName().string());
    ALOGV("[%s][%s]=%d", table_name_.string(), key_name.string(), *value);
    return true;
!!!10956172.cpp!!!	putEntry(in value : int32_t, in field : int32_t) : bool
    int32_t row = 0, col = 0, key = 0, pkey = -1;
    String8 key_name;

    va_list args;
    va_start(args, field);

    int32_t i = 0, count, param;
    count = subkey_list_.size();
    param = va_arg(args, int32_t);
    while(i< count && param!=-1) {
        pkey = subkey_list_[i]->getKey(param);
        if(pkey == -1) break;
        key_name.appendFormat("_%s", subkey_list_[i]->keyitem_list[pkey]->GetName().string());
        key += (1<<((count -i -1)*TABLE_KEY_SHIFT))*pkey;
        row += subkey_list_[i]->GetNest()*pkey;
        i++;
        param = va_arg(args, int32_t);
    }
    va_end(args);

    if(i<count) row = -1;

    col = getField(field);

    if(row == -1 || col == -1)
        return false;

    if(table_inited_ == 0)  return false;

    data_matrix_[row][col] = value;
    key_name.appendFormat("_%s", field_list_[col]->GetName().string());
    ALOGV("[%s][%s]=%d", table_name_.string(), key_name.string(), value);

    updateTableRecord(row, col, key, value);
    return true;
!!!10956300.cpp!!!	getEntryKey(inout key : int32_t) : bool
    int32_t pkey = -1;
    String8 key_name;

    *key = 0;
    va_list args;
    va_start(args, key);

    int32_t i = 0, count, param;
    count = subkey_list_.size();
    param = va_arg(args, int32_t);
    while(i< count && param!=-1) {
        pkey = subkey_list_[i]->getKey(param);
        if(pkey == -1) break;
        key_name.appendFormat("_%s", subkey_list_[i]->keyitem_list[pkey]->GetName().string());
        *key += (1<<((count -i -1)*TABLE_KEY_SHIFT))*pkey;
        i++;
        param = va_arg(args, int32_t);
    }
    va_end(args);

    if(i >= count) {
        AVSLOGD("[%s][%s]=%d", table_name_.string(), key_name.string(), *key);
        return true;
    }
    return false;
!!!10956428.cpp!!!	getFieldMode(in field : int32_t, inout mode : int32_t) : bool
    int32_t index = getField(field);
    if(index == -1) return false;

    *mode = field_list_[index]->GetMode();
    return true;
!!!10956556.cpp!!!	getFieldGroup(in field : int32_t, inout group : int32_t) : bool
    int32_t index = getField(field);
    if(index == -1) return false;

    *group = field_list_[index]->GetGroup();
    return true;
!!!10956684.cpp!!!	getFieldName(in field : int32_t, inout name : String8) : bool
    int32_t index = getField(field);
    if(index == -1) return false;

    name = field_list_[index]->GetName();
    return true;
!!!10956812.cpp!!!	getFieldIndex(in field : int32_t, inout index : int32_t) : bool
    int32_t idx = getField(field);
    if(idx == -1) return false;

    *index = idx + TABLE_PREDEFINE_COLUMNS;
    return true;
!!!10957068.cpp!!!	getField(in field : int32_t) : int32_t
    ssize_t index = find(field_hash_, -1, field);
    if(index == -1 || (unsigned int)(field_hash_.entryAt(index).value) > field_list_.size()) {
        ALOGE("error field:%d", field);
        return -1;
    }
    return field_hash_.entryAt(index).value;
!!!10957196.cpp!!!	createTableField() : void
    /*for(int32_t i; i < field_name_.size(); i++) {
        ALOGD("%s, %s\n", field_name_[i].string(), field_type_[i].string());
    }*/
    db_file_->CreateTable(table_name_, field_name_, field_type_);
!!!10957324.cpp!!!	insertTableRecord(in i : int32_t, in key : int32_t, in key_name : String8) : void
    if((unsigned int)i >= subkey_list_.size()) {
        default_value_.replaceAt(String8::format("%d", key), 0);
        default_value_.replaceAt(String8::format("\'%s\'", key_name.string()), 1);
        /*for(int32_t j = 0; j < default_value_.size(); j++) {
            ALOGD("%s ", default_value_[j].string());
        }
        ALOGD("\n");*/
        db_file_->InsertTableRecord(table_name_, field_name_, default_value_);
        return;
    }

    Subkey *item = subkey_list_.itemAt(i);
    for(unsigned int j=0; j<item->keyitem_list.size(); j++) {
        String8 next_name = key_name;
        if(i > 0 )
            next_name.appendFormat("_%s", item->keyitem_list[j]->GetName().string());
        else
            next_name.appendFormat("%s", item->keyitem_list[j]->GetName().string());

        insertTableRecord(i+1, (key<<TABLE_KEY_SHIFT)+j, next_name);
    }
!!!10957452.cpp!!!	parseXmlTable(inout xmltable : char) : void
    xmlXPathContextPtr context = NULL;
    xmlXPathObjectPtr result = NULL;
    xmlDocPtr doc = xmlParseMemory(xmltable, strlen(xmltable));
    String8 prefix_;
    xmlNodePtr current;
    if (doc == NULL) {
        ALOGE("invalid table config file\n");
        goto bail;
    }
    context = xmlXPathNewContext(doc);
    if (context == NULL) {
        ALOGE("fail to create table context");
        goto bail;
    }

    current = xmlDocGetRootElement(doc);
    while(current != NULL) {
        if(!xmlStrcmp(current->name, (const xmlChar *)"Table")) {
            table_name_.setTo(reinterpret_cast<char *>(xmlGetProp(current, BAD_CAST"name")));
            break;
        }
        current = current->next;
    }

    current = xmlDocGetRootElement(doc);
    current = current->xmlChildrenNode;
    while(current != NULL) {
        if(!xmlStrcmp(current->name, (const xmlChar *)"Fields")) {
            prefix_.setTo(reinterpret_cast<char *>(xmlGetProp(current, BAD_CAST"prefix")));
            break;
        }
        current = current->next;
    }

    result = xmlXPathEvalExpression(BAD_CAST"//FieldItem", context);
    if (result == NULL) {
        ALOGE("invalid xpath expression");
        goto bail;
    }

    if (xmlXPathNodeSetIsEmpty(result->nodesetval)) {
        ALOGE("no source node found");
        goto bail;
    }

    for (int i = 0; i < result->nodesetval->nodeNr; i++) {
        xmlNodePtr node = result->nodesetval->nodeTab[i];
        int32_t id_, default_, mode_, group_;
        String8 name_;
        char *strname_;
        id_= atoi(reinterpret_cast<char *>(xmlGetProp(node, BAD_CAST"id")));
        strname_ = reinterpret_cast<char *>(xmlGetProp(node, BAD_CAST"name"));
        name_.setTo(strname_+prefix_.size());
        default_ = atoi(reinterpret_cast<char *>(xmlGetProp(node, BAD_CAST"default")));
        mode_ = atoi(reinterpret_cast<char *>(xmlGetProp(node, BAD_CAST"mode")));
        group_ = atoi(reinterpret_cast<char *>(xmlGetProp(node, BAD_CAST"group")));

        field_list_.add(new FieldItem(id_, name_, default_, mode_, group_));
        add(field_hash_, id_, i);
    }
    max_column_ = result->nodesetval->nodeNr;// + TABLE_PREDEFINE_COLUMNS;

    result = xmlXPathEvalExpression(BAD_CAST"//SubKey", context);
    if (result == NULL) {
        ALOGE("invalid xpath expression");
        goto bail;
    }

    if (xmlXPathNodeSetIsEmpty(result->nodesetval)) {
        ALOGE("no source node found");
        goto bail;
    }

    for (int i = 0; i < result->nodesetval->nodeNr; i++) {
        xmlNodePtr node = result->nodesetval->nodeTab[i];
        String8 subkeyname_;
        String8 subprefix_;
        Subkey *subkey;
        subkeyname_.setTo(reinterpret_cast<char *>(xmlGetProp(node, BAD_CAST"name")));
        subprefix_.setTo(reinterpret_cast<char *>(xmlGetProp(node, BAD_CAST"prefix")));
        subkey = new Subkey(i, subkeyname_);

        xmlNodePtr child = node->xmlChildrenNode;
        while(child != NULL) {
            if ((!xmlStrcmp(child->name, (const xmlChar *)"KeyItem"))) {
                int32_t id_;
                String8 keyname_;
                char * strname_;
                id_ = atoi(reinterpret_cast<char *>(xmlGetProp(child, BAD_CAST"id")));
                strname_ = reinterpret_cast<char *>(xmlGetProp(child, BAD_CAST"name"));
                keyname_.setTo(strname_+subprefix_.size());
                //subkey->keyitem_list.add(new SubkeyItem(id_, keyname_));
                subkey->AddKeyitem(id_, keyname_);
            }
            child = child->next;
        }
        subkey_list_.add(subkey);
    }
    for(int i = subkey_list_.size()-2; i>=0; i--)
        subkey_list_[i]->SetNest(
            subkey_list_[i+1]->keyitem_list.size()*subkey_list_[i+1]->GetNest());
    max_row_ = subkey_list_[0]->keyitem_list.size()*subkey_list_[0]->GetNest();
bail:
    if (NULL != result) xmlXPathFreeObject(result);
    if (NULL != context) xmlXPathFreeContext(context);
    if (NULL != doc) xmlFreeDoc(doc);

    ALOGD("=======[%s]rows:%d, columns:%d=======", table_name_.string(), max_row_, max_column_);
    for (unsigned int i = 0; i < field_list_.size(); i++) {
        ALOGD("field: %s\n",
                field_list_.itemAt(i)->ToString().string());
    }
    for (unsigned int i = 0; i < subkey_list_.size(); i++) {
        ALOGD("subkey: %s\n",
                subkey_list_.itemAt(i)->ToString().string());
    }
    ALOGD("\n");
!!!10957580.cpp!!!	fetchTableRecord() : void
    Vector<String8> data_field;
    for(unsigned int i = 0 ; i < field_list_.size(); i++)
        data_field.add(field_list_[i]->GetName());

    if(data_matrix_ == NULL) {
        data_matrix_ = new int32_t*[max_row_];
        for(int i=0; i < max_row_; i++)
            data_matrix_[i] = new int[max_column_];
    }
    if(db_file_ != NULL)
        table_inited_ = db_file_->FetchTableRecord(table_name_, data_field, data_matrix_);

    /*for(int i=0; i< max_row_; i++) {
        ALOGD("%d:", i);
        for(int j=0; j<max_column_; j++) {
            ALOGD("%d ", data_matrix_[i][j]);
        }
        ALOGD("\n");
    }*/
!!!10957708.cpp!!!	updateTableRecord(in row : int32_t, in col : int32_t, in key : int32_t, in value : int32_t) : void
    Vector<String8> data_field;
    Vector<String8> record_value;

    data_field.add(String8::format("%s", TABLE_KEY));
    data_field.add(field_list_[col]->GetName());
    record_value.add(String8::format("%d", key));
    record_value.add(String8::format("%d", value));

    if(db_file_ != NULL)
        db_file_->UpdateTableRecord(table_name_, data_field, record_value);
