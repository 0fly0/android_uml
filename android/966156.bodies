class SpellCheckerSubtype
!!!4777100.java!!!	SpellCheckerSubtype(in nameId : int, in locale : String, in extraValue : String)
        mSubtypeNameResId = nameId;
        mSubtypeLocale = locale != null ? locale : "";
        mSubtypeExtraValue = extraValue != null ? extraValue : "";
        mSubtypeHashCode = hashCodeInternal(mSubtypeLocale, mSubtypeExtraValue);
!!!4777228.java!!!	SpellCheckerSubtype(inout source : Parcel)
        String s;
        mSubtypeNameResId = source.readInt();
        s = source.readString();
        mSubtypeLocale = s != null ? s : "";
        s = source.readString();
        mSubtypeExtraValue = s != null ? s : "";
        mSubtypeHashCode = hashCodeInternal(mSubtypeLocale, mSubtypeExtraValue);
!!!4777356.java!!!	getNameResId() : int
        return mSubtypeNameResId;
!!!4777484.java!!!	getLocale() : String
        return mSubtypeLocale;
!!!4777612.java!!!	getExtraValue() : String
        return mSubtypeExtraValue;
!!!4777740.java!!!	getExtraValueHashMap() : HashMap<String, String>
        if (mExtraValueHashMapCache == null) {
            mExtraValueHashMapCache = new HashMap<String, String>();
            final String[] pairs = mSubtypeExtraValue.split(EXTRA_VALUE_PAIR_SEPARATOR);
            final int N = pairs.length;
            for (int i = 0; i < N; ++i) {
                final String[] pair = pairs[i].split(EXTRA_VALUE_KEY_VALUE_SEPARATOR);
                if (pair.length == 1) {
                    mExtraValueHashMapCache.put(pair[0], null);
                } else if (pair.length > 1) {
                    if (pair.length > 2) {
                        Slog.w(TAG, "ExtraValue has two or more '='s");
                    }
                    mExtraValueHashMapCache.put(pair[0], pair[1]);
                }
            }
        }
        return mExtraValueHashMapCache;
!!!4777868.java!!!	containsExtraValueKey(in key : String) : boolean
        return getExtraValueHashMap().containsKey(key);
!!!4777996.java!!!	getExtraValueOf(in key : String) : String
        return getExtraValueHashMap().get(key);
!!!4778124.java!!!	hashCode() : int
        return mSubtypeHashCode;
!!!4778252.java!!!	equals(inout o : Object) : boolean
        if (o instanceof SpellCheckerSubtype) {
            SpellCheckerSubtype subtype = (SpellCheckerSubtype) o;
            return (subtype.hashCode() == hashCode())
                && (subtype.getNameResId() == getNameResId())
                && (subtype.getLocale().equals(getLocale()))
                && (subtype.getExtraValue().equals(getExtraValue()));
        }
        return false;
!!!4778380.java!!!	constructLocaleFromString(in localeStr : String) : Locale
        if (TextUtils.isEmpty(localeStr))
            return null;
        String[] localeParams = localeStr.split("_", 3);
        // The length of localeStr is guaranteed to always return a 1 <= value <= 3
        // because localeStr is not empty.
        if (localeParams.length == 1) {
            return new Locale(localeParams[0]);
        } else if (localeParams.length == 2) {
            return new Locale(localeParams[0], localeParams[1]);
        } else if (localeParams.length == 3) {
            return new Locale(localeParams[0], localeParams[1], localeParams[2]);
        }
        return null;
!!!4778508.java!!!	getDisplayName(inout context : Context, in packageName : String, inout appInfo : ApplicationInfo) : CharSequence
        final Locale locale = constructLocaleFromString(mSubtypeLocale);
        final String localeStr = locale != null ? locale.getDisplayName() : mSubtypeLocale;
        if (mSubtypeNameResId == 0) {
            return localeStr;
        }
        final CharSequence subtypeName = context.getPackageManager().getText(
                packageName, mSubtypeNameResId, appInfo);
        if (!TextUtils.isEmpty(subtypeName)) {
            return String.format(subtypeName.toString(), localeStr);
        } else {
            return localeStr;
        }
!!!4778636.java!!!	describeContents() : int
        return 0;
!!!4778764.java!!!	writeToParcel(inout dest : Parcel, in parcelableFlags : int) : void
        dest.writeInt(mSubtypeNameResId);
        dest.writeString(mSubtypeLocale);
        dest.writeString(mSubtypeExtraValue);
!!!4778892.java!!!	hashCodeInternal(in locale : String, in extraValue : String) : int
        return Arrays.hashCode(new Object[] {locale, extraValue});
!!!4779020.java!!!	sort(inout context : Context, in flags : int, inout sci : SpellCheckerInfo, inout subtypeList : List<SpellCheckerSubtype>) : SpellCheckerSubtype
        if (sci == null) return subtypeList;
        final HashSet<SpellCheckerSubtype> subtypesSet = new HashSet<SpellCheckerSubtype>(
                subtypeList);
        final ArrayList<SpellCheckerSubtype> sortedList = new ArrayList<SpellCheckerSubtype>();
        int N = sci.getSubtypeCount();
        for (int i = 0; i < N; ++i) {
            SpellCheckerSubtype subtype = sci.getSubtypeAt(i);
            if (subtypesSet.contains(subtype)) {
                sortedList.add(subtype);
                subtypesSet.remove(subtype);
            }
        }
        // If subtypes in subtypesSet remain, that means these subtypes are not
        // contained in sci, so the remaining subtypes will be appended.
        for (SpellCheckerSubtype subtype: subtypesSet) {
            sortedList.add(subtype);
        }
        return sortedList;
