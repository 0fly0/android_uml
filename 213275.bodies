class PKIXParameters
!!!916507.java!!!	PKIXParameters(inout trustAnchors : Set)
        if (trustAnchors == null) {
            throw new NullPointerException("trustAnchors == null");
        }
        checkTrustAnchors(trustAnchors);
        this.trustAnchors = new HashSet<TrustAnchor>(trustAnchors);
!!!916635.java!!!	PKIXParameters(inout keyStore : KeyStore)
        if (keyStore == null) {
            throw new NullPointerException("keyStore == null");
        }
        // Will throw KeyStoreException if
        // keyStore has not been initialized (loaded)
        if (keyStore.size() == 0) {
            throw new InvalidAlgorithmParameterException("keyStore.size() == 0");
        }
        // keyStore is not null and loaded
        trustAnchors = new HashSet<TrustAnchor>();
        for (Enumeration i = keyStore.aliases(); i.hasMoreElements();) {
            String alias = (String) i.nextElement();
            if (keyStore.isCertificateEntry(alias)) {
                // this is trusted certificate entry
                // check if it is X509Certificate
                Certificate c = keyStore.getCertificate(alias);
                // add only X509Certificate
                // ignore all other types
                if (c instanceof X509Certificate) {
                    trustAnchors.add(new TrustAnchor((X509Certificate)c, null));
                }
            }
        }
        checkTrustAnchors(trustAnchors);
!!!916763.java!!!	getTrustAnchors() : Set
        return Collections.unmodifiableSet(trustAnchors);
!!!916891.java!!!	setTrustAnchors(inout trustAnchors : Set) : void
        if (trustAnchors == null) {
            throw new NullPointerException("trustAnchors == null");
        }
        checkTrustAnchors(trustAnchors);
        // make shallow copy
        this.trustAnchors = new HashSet<TrustAnchor>(trustAnchors);
!!!917019.java!!!	isAnyPolicyInhibited() : boolean
        return anyPolicyInhibited;
!!!917147.java!!!	setAnyPolicyInhibited(inout anyPolicyInhibited : boolean) : void
        this.anyPolicyInhibited = anyPolicyInhibited;
!!!917275.java!!!	getCertPathCheckers() : List
        if (certPathCheckers == null) {
            // set to empty List if has not been set yet
            certPathCheckers = new ArrayList<PKIXCertPathChecker>();
        }
        if (certPathCheckers.isEmpty()) {
            // no content - no need to copy,
            // just return immutable view of the same
            // empty List each time
            return Collections.unmodifiableList(certPathCheckers);
        }
        // List is not empty - do deep copy
        ArrayList<PKIXCertPathChecker> modifiableList = new ArrayList<PKIXCertPathChecker>();
        for (PKIXCertPathChecker certPathChecker : certPathCheckers) {
            modifiableList.add((PKIXCertPathChecker) certPathChecker.clone());
        }
        return Collections.unmodifiableList(modifiableList);
!!!917403.java!!!	setCertPathCheckers(inout certPathCheckers : List) : void
        if (certPathCheckers == null || certPathCheckers.isEmpty()) {
            // empty list or null provided
            if (this.certPathCheckers != null &&
               !this.certPathCheckers.isEmpty()) {
                // discard non-empty list
                this.certPathCheckers = null;
            }
            return;
        }
        // non-empty list provided - do deep copy
        this.certPathCheckers = new ArrayList<PKIXCertPathChecker>();
        for (PKIXCertPathChecker certPathChecker : certPathCheckers) {
            this.certPathCheckers.add((PKIXCertPathChecker) certPathChecker.clone());
        }
!!!917531.java!!!	addCertPathChecker(inout checker : PKIXCertPathChecker) : void
        if (checker == null) {
            // do nothing if null provided
            return;
        }
        if (certPathCheckers == null) {
            // set to empty List if has not been set yet
            certPathCheckers = new ArrayList<PKIXCertPathChecker>();
        }
        // add a copy to avoid possible modifications
        certPathCheckers.add((PKIXCertPathChecker) checker.clone());
!!!917659.java!!!	getCertStores() : List
        if (certStores == null) {
            // set to empty List if has not been set yet
            certStores = new ArrayList<CertStore>();
        }
        if (certStores.isEmpty()) {
            // no content - no need to copy,
            // just return immutable view of the same
            // empty List each time
            return Collections.unmodifiableList(certStores);
        }
        // List is not empty - do shallow copy
        ArrayList<CertStore> modifiableList
            = new ArrayList<CertStore>(certStores);
        return Collections.unmodifiableList(modifiableList);
!!!917787.java!!!	setCertStores(inout certStores : List) : void
        if (certStores == null || certStores.isEmpty()) {
            // empty list or null provided
            if (this.certStores != null && !this.certStores.isEmpty()) {
                // discard non-empty list
                this.certStores = null;
            }
            return;
        }
        // non-empty list provided - do shallow copy
        this.certStores = new ArrayList<CertStore>(certStores);
!!!917915.java!!!	addCertStore(inout store : CertStore) : void
        if (store == null) {
            // do nothing if null provided
            return;
        }
        if (certStores == null) {
            // set to empty List if has not been set yet
            certStores = new ArrayList<CertStore>();
        }
        // add store
        certStores.add(store);
!!!918043.java!!!	getDate() : Date
        return date == null ? null : (Date)date.clone();
!!!918171.java!!!	setDate(inout date : Date) : void
        this.date = (date == null ? null : new Date(date.getTime()));
!!!918299.java!!!	isExplicitPolicyRequired() : boolean
        return explicitPolicyRequired;
!!!918427.java!!!	setExplicitPolicyRequired(inout explicitPolicyRequired : boolean) : void
        this.explicitPolicyRequired = explicitPolicyRequired;
!!!918555.java!!!	getInitialPolicies() : Set
        if (initialPolicies == null) {
            // set to empty Set if has not been set yet
            initialPolicies = new HashSet<String>();
        }
        if (initialPolicies.isEmpty()) {
            // no content - no need to copy,
            // just return immutable view of the same
            // empty Set each time
            return Collections.unmodifiableSet(initialPolicies);
        }
        // List is not empty - do shallow copy
        HashSet<String> modifiableSet = new HashSet<String>(initialPolicies);
        return Collections.unmodifiableSet(modifiableSet);
!!!918683.java!!!	setInitialPolicies(inout initialPolicies : Set) : void
        if (initialPolicies == null || initialPolicies.isEmpty()) {
            // empty list or null provided
            if (this.initialPolicies != null && !this.initialPolicies.isEmpty()) {
                // discard non-empty list
                this.initialPolicies = null;
            }
            return;
        }
        // non-empty list provided - do shallow copy
        this.initialPolicies = new HashSet<String>(initialPolicies);
!!!918811.java!!!	isPolicyMappingInhibited() : boolean
        return policyMappingInhibited;
!!!918939.java!!!	setPolicyMappingInhibited(inout policyMappingInhibited : boolean) : void
        this.policyMappingInhibited = policyMappingInhibited;
!!!919067.java!!!	getPolicyQualifiersRejected() : boolean
        return policyQualifiersRejected;
!!!919195.java!!!	setPolicyQualifiersRejected(inout policyQualifiersRejected : boolean) : void
        this.policyQualifiersRejected = policyQualifiersRejected;
!!!919323.java!!!	isRevocationEnabled() : boolean
        return revocationEnabled;
!!!919451.java!!!	setRevocationEnabled(inout revocationEnabled : boolean) : void
        this.revocationEnabled = revocationEnabled;
!!!919579.java!!!	getSigProvider() : String
        return sigProvider;
!!!919707.java!!!	setSigProvider(inout sigProvider : String) : void
        this.sigProvider = sigProvider;
!!!919835.java!!!	getTargetCertConstraints() : CertSelector
        return (targetCertConstraints == null ? null
                :(CertSelector)targetCertConstraints.clone());
!!!919963.java!!!	setTargetCertConstraints(inout targetCertConstraints : CertSelector) : void
        this.targetCertConstraints = (targetCertConstraints == null ? null
                : (CertSelector)targetCertConstraints.clone());
!!!920091.java!!!	clone() : Object
        try {
            // do shallow copy first
            PKIXParameters ret = (PKIXParameters)super.clone();
            // copy fields containing references to mutable objects
            if (this.certStores != null) {
                ret.certStores = new ArrayList<CertStore>(this.certStores);
            }
            if (this.certPathCheckers != null) {
                ret.certPathCheckers = new ArrayList<PKIXCertPathChecker>(this.certPathCheckers);
            }
            return ret;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!920219.java!!!	toString() : String
        StringBuilder sb =
            new StringBuilder("[\n Trust Anchors: ");
        sb.append(trustAnchors);
        sb.append("\n Revocation Enabled: ");
        sb.append(revocationEnabled);
        sb.append("\n Explicit Policy Required: ");
        sb.append(explicitPolicyRequired);
        sb.append("\n Policy Mapping Inhibited: ");
        sb.append(policyMappingInhibited);
        sb.append("\n Any Policy Inhibited: ");
        sb.append(anyPolicyInhibited);
        sb.append("\n Policy Qualifiers Rejected: ");
        sb.append(policyQualifiersRejected);
        sb.append("\n Initial Policy OIDs: ");
        sb.append((initialPolicies == null || initialPolicies.isEmpty())
                ? "any" : initialPolicies.toString());
        sb.append("\n Cert Stores: ");
        sb.append((certStores==null||certStores.isEmpty())?
                "no":certStores.toString());
        sb.append("\n Validity Date: ");
        sb.append(date);
        sb.append("\n Cert Path Checkers: ");
        sb.append((certPathCheckers==null||certPathCheckers.isEmpty())?
                "no":certPathCheckers.toString());
        sb.append("\n Signature Provider: ");
        sb.append(sigProvider);
        sb.append("\n Target Certificate Constraints: ");
        sb.append(targetCertConstraints);
        sb.append("\n]");
        return sb.toString();
!!!920347.java!!!	checkTrustAnchors(inout trustAnchors : Set) : void
        if (trustAnchors.isEmpty()) {
            throw new InvalidAlgorithmParameterException("trustAnchors.isEmpty()");
        }
