class FaceUnlock
!!!7952012.java!!!	FaceUnlock(inout context : Context, inout updateMonitor : KeyguardUpdateMonitor, inout lockPatternUtils : LockPatternUtils, inout keyguardScreenCallback : KeyguardScreenCallback)
        mContext = context;
        mUpdateMonitor = updateMonitor;
        mLockPatternUtils = lockPatternUtils;
        mKeyguardScreenCallback = keyguardScreenCallback;
        mHandler = new Handler(this);
!!!7952140.java!!!	initializeView(inout biometricUnlockView : View) : void
        Log.d(TAG, "initializeView()");
        mFaceUnlockView = biometricUnlockView;
!!!7952268.java!!!	isRunning() : boolean
        return mIsRunning;
!!!7952396.java!!!	show(in timeoutMillis : long) : void
        if (DEBUG) Log.d(TAG, "show()");
        if (mHandler.getLooper() != Looper.myLooper()) {
            Log.e(TAG, "show() called off of the UI thread");
        }

        removeDisplayMessages();
        if (mFaceUnlockView != null) {
            mFaceUnlockView.setVisibility(View.VISIBLE);
        }
        if (timeoutMillis > 0) {
            mHandler.sendEmptyMessageDelayed(MSG_HIDE_FACE_UNLOCK_VIEW, timeoutMillis);
        }
!!!7952524.java!!!	hide() : void
        if (DEBUG) Log.d(TAG, "hide()");
        // Remove messages to prevent a delayed show message from undo-ing the hide
        removeDisplayMessages();
        mHandler.sendEmptyMessage(MSG_HIDE_FACE_UNLOCK_VIEW);
!!!7952652.java!!!	start() : boolean
        if (DEBUG) Log.d(TAG, "start()");
        if (mHandler.getLooper() != Looper.myLooper()) {
            Log.e(TAG, "start() called off of the UI thread");
        }

        if (mIsRunning) {
            Log.w(TAG, "start() called when already running");
        }

        // Show Face Unlock view, but only for a little bit so lockpattern will become visible if
        // Face Unlock fails to start or crashes
        // This must show before bind to guarantee that Face Unlock has a place to display
        show(SERVICE_STARTUP_VIEW_TIMEOUT);
        if (!mBoundToService) {
            Log.d(TAG, "Binding to Face Unlock service");
            mContext.bindService(new Intent(IFaceLockInterface.class.getName()),
                    mConnection,
                    Context.BIND_AUTO_CREATE,
                    mLockPatternUtils.getCurrentUser());
            mBoundToService = true;
        } else {
            Log.w(TAG, "Attempt to bind to Face Unlock when already bound");
        }

        mIsRunning = true;
        return true;
!!!7952780.java!!!	stop() : boolean
        if (DEBUG) Log.d(TAG, "stop()");
        if (mHandler.getLooper() != Looper.myLooper()) {
            Log.e(TAG, "stop() called off of the UI thread");
        }

        boolean mWasRunning = mIsRunning;
        stopUi();

        if (mBoundToService) {
            if (mService != null) {
                try {
                    mService.unregisterCallback(mFaceUnlockCallback);
                } catch (RemoteException e) {
                    // Not much we can do
                }
            }
            Log.d(TAG, "Unbinding from Face Unlock service");
            mContext.unbindService(mConnection);
            mBoundToService = false;
        } else {
            // This is usually not an error when this happens.  Sometimes we will tell it to
            // unbind multiple times because it's called from both onWindowFocusChanged and
            // onDetachedFromWindow.
            if (DEBUG) Log.d(TAG, "Attempt to unbind from Face Unlock when not bound");
        }
        mIsRunning = false;
        return mWasRunning;
!!!7952908.java!!!	cleanUp() : void
        if (DEBUG) Log.d(TAG, "cleanUp()");
        if (mService != null) {
            try {
                mService.unregisterCallback(mFaceUnlockCallback);
            } catch (RemoteException e) {
                // Not much we can do
            }
            stopUi();
            mService = null;
        }
!!!7953036.java!!!	getQuality() : int
        return DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK;
!!!7953164.java!!!	handleMessage(inout msg : Message) : boolean
        switch (msg.what) {
            case MSG_SHOW_FACE_UNLOCK_VIEW:
                handleShowFaceUnlockView();
                break;
            case MSG_HIDE_FACE_UNLOCK_VIEW:
                handleHideFaceUnlockView();
                break;
            case MSG_SERVICE_CONNECTED:
                handleServiceConnected();
                break;
            case MSG_SERVICE_DISCONNECTED:
                handleServiceDisconnected();
                break;
            case MSG_UNLOCK:
                handleUnlock();
                break;
            case MSG_CANCEL:
                handleCancel();
                break;
            case MSG_REPORT_FAILED_ATTEMPT:
                handleReportFailedAttempt();
                break;
                //case MSG_EXPOSE_FALLBACK:
                //handleExposeFallback();
                //break;
            case MSG_POKE_WAKELOCK:
                handlePokeWakelock(msg.arg1);
                break;
            default:
                Log.e(TAG, "Unhandled message");
                return false;
        }
        return true;
!!!7953292.java!!!	handleShowFaceUnlockView() : void
        if (DEBUG) Log.d(TAG, "handleShowFaceUnlockView()");
        if (mFaceUnlockView != null) {
            mFaceUnlockView.setVisibility(View.VISIBLE);
        } else {
            Log.e(TAG, "mFaceUnlockView is null in handleShowFaceUnlockView()");
        }
!!!7953420.java!!!	handleHideFaceUnlockView() : void
        if (DEBUG) Log.d(TAG, "handleHideFaceUnlockView()");
        if (mFaceUnlockView != null) {
            mFaceUnlockView.setVisibility(View.INVISIBLE);
        } else {
            Log.e(TAG, "mFaceUnlockView is null in handleHideFaceUnlockView()");
        }
!!!7953548.java!!!	handleServiceConnected() : void
        Log.d(TAG, "handleServiceConnected()");

        // It is possible that an unbind has occurred in the time between the bind and when this
        // function is reached.  If an unbind has already occurred, proceeding on to call startUi()
        // can result in a fatal error.  Note that the onServiceConnected() callback is
        // asynchronous, so this possibility would still exist if we executed this directly in
        // onServiceConnected() rather than using a handler.
        if (!mBoundToService) {
            Log.d(TAG, "Dropping startUi() in handleServiceConnected() because no longer bound");
            return;
        }

        try {
            mService.registerCallback(mFaceUnlockCallback);
        } catch (RemoteException e) {
            Log.e(TAG, "Caught exception connecting to Face Unlock: " + e.toString());
            mService = null;
            mBoundToService = false;
            mIsRunning = false;
            return;
        }

        if (mFaceUnlockView != null) {
            IBinder windowToken = mFaceUnlockView.getWindowToken();
            if (windowToken != null) {
                // When switching between portrait and landscape view while Face Unlock is running,
                // the screen will eventually go dark unless we poke the wakelock when Face Unlock
                // is restarted.
                mKeyguardScreenCallback.pokeWakelock();

                int[] position;
                position = new int[2];
                mFaceUnlockView.getLocationInWindow(position);
                startUi(windowToken, position[0], position[1], mFaceUnlockView.getWidth(),
                        mFaceUnlockView.getHeight());
            } else {
                Log.e(TAG, "windowToken is null in handleServiceConnected()");
            }
        }
!!!7953676.java!!!	handleServiceDisconnected() : void
        Log.e(TAG, "handleServiceDisconnected()");
        // TODO: this lock may no longer be needed now that everything is being called from a
        // handler
        synchronized (mServiceRunningLock) {
            mService = null;
            mServiceRunning = false;
        }
        mBoundToService = false;
        mIsRunning = false;
!!!7953804.java!!!	handleUnlock() : void
        if (DEBUG) Log.d(TAG, "handleUnlock()");
        removeDisplayMessages();
        if (mFaceUnlockView != null) {
            mFaceUnlockView.setVisibility(View.VISIBLE);
        } else {
            Log.e(TAG, "mFaceUnlockView is null in handleUnlock()");
        }
        stop();
        mKeyguardScreenCallback.keyguardDone(true);
        mKeyguardScreenCallback.reportSuccessfulUnlockAttempt();
!!!7953932.java!!!	handleCancel() : void
        if (DEBUG) Log.d(TAG, "handleCancel()");
        if (mFaceUnlockView != null) {
            mFaceUnlockView.setVisibility(View.INVISIBLE);
        } else {
            Log.e(TAG, "mFaceUnlockView is null in handleCancel()");
        }
        stop();
        mKeyguardScreenCallback.pokeWakelock(BACKUP_LOCK_TIMEOUT);
!!!7954060.java!!!	handleReportFailedAttempt() : void
        if (DEBUG) Log.d(TAG, "handleReportFailedAttempt()");
        mUpdateMonitor.reportFailedBiometricUnlockAttempt();
!!!7954188.java!!!	handlePokeWakelock(in millis : int) : void
        mKeyguardScreenCallback.pokeWakelock(millis);
!!!7954316.java!!!	removeDisplayMessages() : void
        mHandler.removeMessages(MSG_SHOW_FACE_UNLOCK_VIEW);
        mHandler.removeMessages(MSG_HIDE_FACE_UNLOCK_VIEW);
!!!7954444.java!!!	startUi(inout windowToken : IBinder, in x : int, in y : int, in w : int, in h : int) : void
        if (DEBUG) Log.d(TAG, "startUi()");
        synchronized (mServiceRunningLock) {
            if (!mServiceRunning) {
                Log.d(TAG, "Starting Face Unlock");
                try {
                    mService.startUi(windowToken, x, y, w, h,
                            mLockPatternUtils.isBiometricWeakLivelinessEnabled());
                } catch (RemoteException e) {
                    Log.e(TAG, "Caught exception starting Face Unlock: " + e.toString());
                    return;
                }
                mServiceRunning = true;
            } else {
                Log.w(TAG, "startUi() attempted while running");
            }
        }
!!!7954572.java!!!	stopUi() : void
        if (DEBUG) Log.d(TAG, "stopUi()");
        // Note that attempting to stop Face Unlock when it's not running is not an issue.
        // Face Unlock can return, which stops it and then we try to stop it when the
        // screen is turned off.  That's why we check.
        synchronized (mServiceRunningLock) {
            if (mServiceRunning) {
                Log.d(TAG, "Stopping Face Unlock");
                try {
                    mService.stopUi();
                } catch (RemoteException e) {
                    Log.e(TAG, "Caught exception stopping Face Unlock: " + e.toString());
                }
                mServiceRunning = false;
            } else {
                // This is usually not an error when this happens.  Sometimes we will tell it to
                // stop multiple times because it's called from both onWindowFocusChanged and
                // onDetachedFromWindow.
                if (DEBUG) Log.d(TAG, "stopUi() attempted while not running");
            }
        }
