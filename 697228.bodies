class SparseIntArray
!!!4424716.java!!!	SparseIntArray()
        this(10);
!!!4424844.java!!!	SparseIntArray(in initialCapacity : int)
        initialCapacity = ArrayUtils.idealIntArraySize(initialCapacity);

        mKeys = new int[initialCapacity];
        mValues = new int[initialCapacity];
        mSize = 0;
!!!4424972.java!!!	clone() : SparseIntArray
        SparseIntArray clone = null;
        try {
            clone = (SparseIntArray) super.clone();
            clone.mKeys = mKeys.clone();
            clone.mValues = mValues.clone();
        } catch (CloneNotSupportedException cnse) {
            /* ignore */
        }
        return clone;
!!!4425100.java!!!	get(in key : int) : int
        return get(key, 0);
!!!4425228.java!!!	get(in key : int, in valueIfKeyNotFound : int) : int
        int i = binarySearch(mKeys, 0, mSize, key);

        if (i < 0) {
            return valueIfKeyNotFound;
        } else {
            return mValues[i];
        }
!!!4425356.java!!!	delete(in key : int) : void
        int i = binarySearch(mKeys, 0, mSize, key);

        if (i >= 0) {
            removeAt(i);
        }
!!!4425484.java!!!	removeAt(in index : int) : void
        System.arraycopy(mKeys, index + 1, mKeys, index, mSize - (index + 1));
        System.arraycopy(mValues, index + 1, mValues, index, mSize - (index + 1));
        mSize--;
!!!4425612.java!!!	put(in key : int, in value : int) : void
        int i = binarySearch(mKeys, 0, mSize, key);

        if (i >= 0) {
            mValues[i] = value;
        } else {
            i = ~i;

            if (mSize >= mKeys.length) {
                int n = ArrayUtils.idealIntArraySize(mSize + 1);

                int[] nkeys = new int[n];
                int[] nvalues = new int[n];

                // Log.e("SparseIntArray", "grow " + mKeys.length + " to " + n);
                System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);
                System.arraycopy(mValues, 0, nvalues, 0, mValues.length);

                mKeys = nkeys;
                mValues = nvalues;
            }

            if (mSize - i != 0) {
                // Log.e("SparseIntArray", "move " + (mSize - i));
                System.arraycopy(mKeys, i, mKeys, i + 1, mSize - i);
                System.arraycopy(mValues, i, mValues, i + 1, mSize - i);
            }

            mKeys[i] = key;
            mValues[i] = value;
            mSize++;
        }
!!!4425740.java!!!	size() : int
        return mSize;
!!!4425868.java!!!	keyAt(in index : int) : int
        return mKeys[index];
!!!4425996.java!!!	valueAt(in index : int) : int
        return mValues[index];
!!!4426124.java!!!	indexOfKey(in key : int) : int
        return binarySearch(mKeys, 0, mSize, key);
!!!4426252.java!!!	indexOfValue(in value : int) : int
        for (int i = 0; i < mSize; i++)
            if (mValues[i] == value)
                return i;

        return -1;
!!!4426380.java!!!	clear() : void
        mSize = 0;
!!!4426508.java!!!	append(in key : int, in value : int) : void
        if (mSize != 0 && key <= mKeys[mSize - 1]) {
            put(key, value);
            return;
        }

        int pos = mSize;
        if (pos >= mKeys.length) {
            int n = ArrayUtils.idealIntArraySize(pos + 1);

            int[] nkeys = new int[n];
            int[] nvalues = new int[n];

            // Log.e("SparseIntArray", "grow " + mKeys.length + " to " + n);
            System.arraycopy(mKeys, 0, nkeys, 0, mKeys.length);
            System.arraycopy(mValues, 0, nvalues, 0, mValues.length);

            mKeys = nkeys;
            mValues = nvalues;
        }

        mKeys[pos] = key;
        mValues[pos] = value;
        mSize = pos + 1;
!!!4426636.java!!!	binarySearch(inout a : int, in start : int, in len : int, in key : int) : int
        int high = start + len, low = start - 1, guess;

        while (high - low > 1) {
            guess = (high + low) / 2;

            if (a[guess] < key)
                low = guess;
            else
                high = guess;
        }

        if (high == start + len)
            return ~(start + len);
        else if (a[high] == key)
            return high;
        else
            return ~high;
