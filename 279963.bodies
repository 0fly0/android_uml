class Handler
!!!1701275.java!!!	Handler()
        this.errorMan = new ErrorManager();
        this.level = DEFAULT_LEVEL;
        this.encoding = null;
        this.filter = null;
        this.formatter = null;
        this.prefix = this.getClass().getName();
!!!1701403.java!!!	getDefaultInstance(inout className : String) : Object
        Object result = null;
        if (className == null) {
            return result;
        }
        try {
            result = Class.forName(className).newInstance();
        } catch (Exception e) {
            // ignore
        }
        return result;
!!!1701531.java!!!	getCustomizeInstance(in className : String) : Object
        ClassLoader loader = Thread.currentThread().getContextClassLoader();
        if (loader == null) {
            loader = ClassLoader.getSystemClassLoader();
        }
        Class<?> c = loader.loadClass(className);
        return c.newInstance();
!!!1701659.java!!!	printInvalidPropMessage(inout key : String, inout value : String, inout e : Exception) : void
        String msg = "Invalid property value for " + prefix + ":" + key + "/" + value;
        errorMan.error(msg, e, ErrorManager.GENERIC_FAILURE);
!!!1701787.java!!!	initProperties(inout defaultLevel : String, inout defaultFilter : String, inout defaultFormatter : String, inout defaultEncoding : String) : void
        LogManager manager = LogManager.getLogManager();

        // set filter
        final String filterName = manager.getProperty(prefix + ".filter");
        if (filterName != null) {
            try {
                filter = (Filter) getCustomizeInstance(filterName);
            } catch (Exception e1) {
                printInvalidPropMessage("filter", filterName, e1);
                filter = (Filter) getDefaultInstance(defaultFilter);
            }
        } else {
            filter = (Filter) getDefaultInstance(defaultFilter);
        }

        // set level
        String levelName = manager.getProperty(prefix + ".level");
        if (levelName != null) {
            try {
                level = Level.parse(levelName);
            } catch (Exception e) {
                printInvalidPropMessage("level", levelName, e);
                level = Level.parse(defaultLevel);
            }
        } else {
            level = Level.parse(defaultLevel);
        }

        // set formatter
        final String formatterName = manager.getProperty(prefix + ".formatter");
        if (formatterName != null) {
            try {
                formatter = (Formatter) getCustomizeInstance(formatterName);
            } catch (Exception e) {
                printInvalidPropMessage("formatter", formatterName, e);
                formatter = (Formatter) getDefaultInstance(defaultFormatter);
            }
        } else {
            formatter = (Formatter) getDefaultInstance(defaultFormatter);
        }

        // set encoding
        final String encodingName = manager.getProperty(prefix + ".encoding");
        try {
            internalSetEncoding(encodingName);
        } catch (UnsupportedEncodingException e) {
            printInvalidPropMessage("encoding", encodingName, e);
        }
!!!1702299.java!!!	getEncoding() : String
        return this.encoding;
!!!1702427.java!!!	getErrorManager() : ErrorManager
        LogManager.getLogManager().checkAccess();
        return this.errorMan;
!!!1702555.java!!!	getFilter() : Filter
        return this.filter;
!!!1702683.java!!!	getFormatter() : Formatter
        return this.formatter;
!!!1702811.java!!!	getLevel() : Level
        return this.level;
!!!1702939.java!!!	isLoggable(inout record : LogRecord) : boolean
        if (record == null) {
            throw new NullPointerException("record == null");
        }
        if (this.level.intValue() == Level.OFF.intValue()) {
            return false;
        } else if (record.getLevel().intValue() >= this.level.intValue()) {
            return this.filter == null || this.filter.isLoggable(record);
        }
        return false;
!!!1703067.java!!!	reportError(inout msg : String, inout ex : Exception, in code : int) : void
        this.errorMan.error(msg, ex, code);
!!!1703195.java!!!	internalSetEncoding(inout newEncoding : String) : void
        // accepts "null" because it indicates using default encoding
        if (newEncoding == null) {
            this.encoding = null;
        } else {
            if (Charset.isSupported(newEncoding)) {
                this.encoding = newEncoding;
            } else {
                throw new UnsupportedEncodingException(newEncoding);
            }
        }
!!!1703323.java!!!	setEncoding(inout charsetName : String) : void
        LogManager.getLogManager().checkAccess();
        internalSetEncoding(charsetName);
!!!1703451.java!!!	setErrorManager(inout newErrorManager : ErrorManager) : void
        LogManager.getLogManager().checkAccess();
        if (newErrorManager == null) {
            throw new NullPointerException("newErrorManager == null");
        }
        this.errorMan = newErrorManager;
!!!1703579.java!!!	setFilter(inout newFilter : Filter) : void
        LogManager.getLogManager().checkAccess();
        this.filter = newFilter;
!!!1703707.java!!!	internalSetFormatter(inout newFormatter : Formatter) : void
        if (newFormatter == null) {
            throw new NullPointerException("newFormatter == null");
        }
        this.formatter = newFormatter;
!!!1703835.java!!!	setFormatter(inout newFormatter : Formatter) : void
        LogManager.getLogManager().checkAccess();
        internalSetFormatter(newFormatter);
!!!1703963.java!!!	setLevel(inout newLevel : Level) : void
        if (newLevel == null) {
            throw new NullPointerException("newLevel == null");
        }
        LogManager.getLogManager().checkAccess();
        this.level = newLevel;
