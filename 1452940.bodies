class CallbackProxy
!!!9017484.java!!!	CallbackProxy(inout eventSender : EventSender, inout layoutTestController : LayoutTestController)
        mEventSender = eventSender;
        mLayoutTestController = layoutTestController;
!!!9017612.java!!!	handleMessage(inout msg : Message) : void
        switch (msg.what) {
        case EVENT_DOM_LOG:
            mEventSender.enableDOMUIEventLogging(msg.arg1);
            break;
        case EVENT_FIRE_KBD:
            mEventSender.fireKeyboardEventsToElement(msg.arg1);
            break;
        case EVENT_KEY_DOWN_1:
            HashMap map = (HashMap) msg.obj;
            mEventSender.keyDown((String) map.get("character"), 
                    (String[]) map.get("withModifiers"));
            break;

        case EVENT_KEY_DOWN_2:
            mEventSender.keyDown((String)msg.obj);
            break;

        case EVENT_LEAP:
            mEventSender.leapForward(msg.arg1);
            break;

        case EVENT_MOUSE_CLICK:
            mEventSender.mouseClick();
            break;

        case EVENT_MOUSE_DOWN:
            mEventSender.mouseDown();
            break;

        case EVENT_MOUSE_MOVE:
            mEventSender.mouseMoveTo(msg.arg1, msg.arg2);
            break;

        case EVENT_MOUSE_UP:
            mEventSender.mouseUp();
            break;

        case EVENT_TOUCH_START:
            mEventSender.touchStart();
            break;

        case EVENT_TOUCH_MOVE:
            mEventSender.touchMove();
            break;

        case EVENT_TOUCH_END:
            mEventSender.touchEnd();
            break;

        case EVENT_TOUCH_CANCEL:
            mEventSender.touchCancel();
            break;

        case EVENT_ADD_TOUCH_POINT:
            mEventSender.addTouchPoint(msg.arg1, msg.arg2);
            break;

        case EVENT_UPDATE_TOUCH_POINT:
            Bundle args = (Bundle) msg.obj;
            int x = args.getInt("x");
            int y = args.getInt("y");
            int id = args.getInt("id");
            mEventSender.updateTouchPoint(id, x, y);
            break;

        case EVENT_SET_TOUCH_MODIFIER:
            Bundle modifierArgs = (Bundle) msg.obj;
            String modifier = modifierArgs.getString("modifier");
            boolean enabled = modifierArgs.getBoolean("enabled");
            mEventSender.setTouchModifier(modifier, enabled);
            break;

        case EVENT_RELEASE_TOUCH_POINT:
            mEventSender.releaseTouchPoint(msg.arg1);
            break;

        case EVENT_CLEAR_TOUCH_POINTS:
            mEventSender.clearTouchPoints();
            break;

        case EVENT_CANCEL_TOUCH_POINT:
            mEventSender.cancelTouchPoint(msg.arg1);
            break;

        case LAYOUT_CLEAR_LIST:
            mLayoutTestController.clearBackForwardList();
            break;

        case LAYOUT_DISPLAY:
            mLayoutTestController.display();
            break;

        case LAYOUT_DUMP_TEXT:
            mLayoutTestController.dumpAsText(msg.arg1 == 1);
            break;

        case LAYOUT_DUMP_CHILD_FRAMES_TEXT:
            mLayoutTestController.dumpChildFramesAsText();
            break;

        case LAYOUT_DUMP_HISTORY:
            mLayoutTestController.dumpBackForwardList();
            break;

        case LAYOUT_DUMP_CHILD_SCROLL:
            mLayoutTestController.dumpChildFrameScrollPositions();
            break;

        case LAYOUT_DUMP_EDIT_CB:
            mLayoutTestController.dumpEditingCallbacks();
            break;

        case LAYOUT_DUMP_SEL_RECT:
            mLayoutTestController.dumpSelectionRect();
            break;

        case LAYOUT_DUMP_TITLE_CHANGES:
            mLayoutTestController.dumpTitleChanges();
            break;

        case LAYOUT_KEEP_WEB_HISTORY:
            mLayoutTestController.keepWebHistory();
            break;

        case LAYOUT_NOTIFY_DONE:
            mLayoutTestController.notifyDone();
            break;

        case LAYOUT_QUEUE_BACK_NAV:
            mLayoutTestController.queueBackNavigation(msg.arg1);
            break;

        case LAYOUT_QUEUE_FWD_NAV:
            mLayoutTestController.queueForwardNavigation(msg.arg1);
            break;

        case LAYOUT_QUEUE_LOAD:
            HashMap<String, String> loadMap = 
                (HashMap<String, String>) msg.obj;
            mLayoutTestController.queueLoad(loadMap.get("Url"), 
                    loadMap.get("frameTarget"));
            break;

        case LAYOUT_QUEUE_RELOAD:
            mLayoutTestController.queueReload();
            break;

        case LAYOUT_QUEUE_SCRIPT:
            mLayoutTestController.queueScript((String)msg.obj);
            break;

        case LAYOUT_REPAINT_HORZ:
            mLayoutTestController.repaintSweepHorizontally();
            break;

        case LAYOUT_SET_ACCEPT_EDIT:
            mLayoutTestController.setAcceptsEditing(
                    msg.arg1 == 1 ? true : false);
            break;
        case LAYOUT_MAIN_FIRST_RESP:
            mLayoutTestController.setMainFrameIsFirstResponder(
                    msg.arg1 == 1 ? true : false);
            break;

        case LAYOUT_SET_WINDOW_KEY:
            mLayoutTestController.setWindowIsKey(
                    msg.arg1 == 1 ? true : false);
            break;

        case LAYOUT_TEST_REPAINT:
            mLayoutTestController.testRepaint();
            break;

        case LAYOUT_WAIT_UNTIL_DONE:
            mLayoutTestController.waitUntilDone();
            break;

        case LAYOUT_DUMP_DATABASE_CALLBACKS:
            mLayoutTestController.dumpDatabaseCallbacks();
            break;

        case LAYOUT_SET_CAN_OPEN_WINDOWS:
            mLayoutTestController.setCanOpenWindows();
            break;

        case OVERRIDE_PREFERENCE:
            String key = msg.getData().getString("key");
            boolean value = msg.getData().getBoolean("value");
            mLayoutTestController.overridePreference(key, value);
            break;

        case SET_XSS_AUDITOR_ENABLED:
            mLayoutTestController.setXSSAuditorEnabled(msg.arg1 == 1);
            break;
        }
!!!9017740.java!!!	enableDOMUIEventLogging(in DOMNode : int) : void
        obtainMessage(EVENT_DOM_LOG, DOMNode, 0).sendToTarget();
!!!9017868.java!!!	fireKeyboardEventsToElement(in DOMNode : int) : void
        obtainMessage(EVENT_FIRE_KBD, DOMNode, 0).sendToTarget();
!!!9017996.java!!!	keyDown(in character : String, inout withModifiers : String) : void
        // TODO Auto-generated method stub
        HashMap map = new HashMap();
        map.put("character", character);
        map.put("withModifiers", withModifiers);
        obtainMessage(EVENT_KEY_DOWN_1, map).sendToTarget();
!!!9018124.java!!!	keyDown(in character : String) : void
        obtainMessage(EVENT_KEY_DOWN_2, character).sendToTarget();
!!!9018252.java!!!	leapForward(in milliseconds : int) : void
        obtainMessage(EVENT_LEAP, milliseconds, 0).sendToTarget(); 
!!!9018380.java!!!	mouseClick() : void
        obtainMessage(EVENT_MOUSE_CLICK).sendToTarget();
!!!9018508.java!!!	mouseDown() : void
        obtainMessage(EVENT_MOUSE_DOWN).sendToTarget();
!!!9018636.java!!!	mouseMoveTo(in X : int, in Y : int) : void
        obtainMessage(EVENT_MOUSE_MOVE, X, Y).sendToTarget();
!!!9018764.java!!!	mouseUp() : void
        obtainMessage(EVENT_MOUSE_UP).sendToTarget();
!!!9018892.java!!!	touchStart() : void
        obtainMessage(EVENT_TOUCH_START).sendToTarget();
!!!9019020.java!!!	addTouchPoint(in x : int, in y : int) : void
        obtainMessage(EVENT_ADD_TOUCH_POINT, x, y).sendToTarget();
!!!9019148.java!!!	updateTouchPoint(in id : int, in x : int, in y : int) : void
        Bundle map = new Bundle();
        map.putInt("x", x);
        map.putInt("y", y);
        map.putInt("id", id);
        obtainMessage(EVENT_UPDATE_TOUCH_POINT, map).sendToTarget();
!!!9019276.java!!!	setTouchModifier(in modifier : String, inout enabled : boolean) : void
        Bundle map = new Bundle();
        map.putString("modifier", modifier);
        map.putBoolean("enabled", enabled);
        obtainMessage(EVENT_SET_TOUCH_MODIFIER, map).sendToTarget();
!!!9019404.java!!!	touchMove() : void
        obtainMessage(EVENT_TOUCH_MOVE).sendToTarget();
!!!9019532.java!!!	releaseTouchPoint(in id : int) : void
        obtainMessage(EVENT_RELEASE_TOUCH_POINT, id, 0).sendToTarget();
!!!9019660.java!!!	touchEnd() : void
        obtainMessage(EVENT_TOUCH_END).sendToTarget();
!!!9019788.java!!!	touchCancel() : void
        obtainMessage(EVENT_TOUCH_CANCEL).sendToTarget();
!!!9019916.java!!!	clearTouchPoints() : void
        obtainMessage(EVENT_CLEAR_TOUCH_POINTS).sendToTarget();
!!!9020044.java!!!	cancelTouchPoint(in id : int) : void
        obtainMessage(EVENT_CANCEL_TOUCH_POINT, id, 0).sendToTarget();
!!!9020172.java!!!	clearBackForwardList() : void
        obtainMessage(LAYOUT_CLEAR_LIST).sendToTarget();
!!!9020300.java!!!	display() : void
        obtainMessage(LAYOUT_DISPLAY).sendToTarget();
!!!9020428.java!!!	dumpAsText() : void
        obtainMessage(LAYOUT_DUMP_TEXT, 0).sendToTarget();
!!!9020556.java!!!	dumpAsText(inout enablePixelTests : boolean) : void
        obtainMessage(LAYOUT_DUMP_TEXT, enablePixelTests ? 1 : 0).sendToTarget();
!!!9020684.java!!!	dumpChildFramesAsText() : void
        obtainMessage(LAYOUT_DUMP_CHILD_FRAMES_TEXT).sendToTarget();
!!!9020812.java!!!	dumpBackForwardList() : void
        obtainMessage(LAYOUT_DUMP_HISTORY).sendToTarget();
!!!9020940.java!!!	dumpChildFrameScrollPositions() : void
        obtainMessage(LAYOUT_DUMP_CHILD_SCROLL).sendToTarget();
!!!9021068.java!!!	dumpEditingCallbacks() : void
        obtainMessage(LAYOUT_DUMP_EDIT_CB).sendToTarget(); 
!!!9021196.java!!!	dumpSelectionRect() : void
        obtainMessage(LAYOUT_DUMP_SEL_RECT).sendToTarget(); 
!!!9021324.java!!!	dumpTitleChanges() : void
        obtainMessage(LAYOUT_DUMP_TITLE_CHANGES).sendToTarget();
!!!9021452.java!!!	keepWebHistory() : void
        obtainMessage(LAYOUT_KEEP_WEB_HISTORY).sendToTarget();
!!!9021580.java!!!	notifyDone() : void
        obtainMessage(LAYOUT_NOTIFY_DONE).sendToTarget();
!!!9021708.java!!!	queueBackNavigation(in howfar : int) : void
        obtainMessage(LAYOUT_QUEUE_BACK_NAV, howfar, 0).sendToTarget();
!!!9021836.java!!!	queueForwardNavigation(in howfar : int) : void
        obtainMessage(LAYOUT_QUEUE_FWD_NAV, howfar, 0).sendToTarget();
!!!9021964.java!!!	queueLoad(in Url : String, in frameTarget : String) : void
        HashMap <String, String>map = new HashMap<String, String>();
        map.put("Url", Url);
        map.put("frameTarget", frameTarget);
        obtainMessage(LAYOUT_QUEUE_LOAD, map).sendToTarget();
!!!9022092.java!!!	queueReload() : void
        obtainMessage(LAYOUT_QUEUE_RELOAD).sendToTarget();
!!!9022220.java!!!	queueScript(in scriptToRunInCurrentContext : String) : void
        obtainMessage(LAYOUT_QUEUE_SCRIPT, 
                scriptToRunInCurrentContext).sendToTarget();
!!!9022348.java!!!	repaintSweepHorizontally() : void
        obtainMessage(LAYOUT_REPAINT_HORZ).sendToTarget();
!!!9022476.java!!!	setAcceptsEditing(inout b : boolean) : void
        obtainMessage(LAYOUT_SET_ACCEPT_EDIT, b ? 1 : 0, 0).sendToTarget();
!!!9022604.java!!!	setMainFrameIsFirstResponder(inout b : boolean) : void
        obtainMessage(LAYOUT_MAIN_FIRST_RESP, b ? 1 : 0, 0).sendToTarget();
!!!9022732.java!!!	setWindowIsKey(inout b : boolean) : void
        obtainMessage(LAYOUT_SET_WINDOW_KEY, b ? 1 : 0, 0).sendToTarget();
!!!9022860.java!!!	testRepaint() : void
        obtainMessage(LAYOUT_TEST_REPAINT).sendToTarget(); 
!!!9022988.java!!!	waitUntilDone() : void
        obtainMessage(LAYOUT_WAIT_UNTIL_DONE).sendToTarget();
!!!9023116.java!!!	dumpDatabaseCallbacks() : void
        obtainMessage(LAYOUT_DUMP_DATABASE_CALLBACKS).sendToTarget();
!!!9023244.java!!!	clearAllDatabases() : void
        WebStorage.getInstance().deleteAllData();
!!!9023372.java!!!	setDatabaseQuota(in quota : long) : void
        WebStorage.getInstance().setQuotaForOrigin("file://", quota);
!!!9023500.java!!!	setAppCacheMaximumSize(in size : long) : void
        android.webkit.WebStorageClassic.getInstance().setAppCacheMaximumSize(size);
!!!9023628.java!!!	setCanOpenWindows() : void
        obtainMessage(LAYOUT_SET_CAN_OPEN_WINDOWS).sendToTarget();
!!!9023756.java!!!	setMockGeolocationPosition(in latitude : double, in longitude : double, in accuracy : double) : void
        // Configuration is in WebKit, so stay on WebCore thread, but go via the TestShellActivity
        // as we need access to the Webview.
        mLayoutTestController.setMockGeolocationPosition(latitude,
                                                         longitude,
                                                         accuracy);
!!!9023884.java!!!	setMockGeolocationError(in code : int, in message : String) : void
        // Configuration is in WebKit, so stay on WebCore thread, but go via the TestShellActivity
        // as we need access to the Webview.
        mLayoutTestController.setMockGeolocationError(code, message);
!!!9024012.java!!!	setGeolocationPermission(inout allow : boolean) : void
        // Configuration is in WebKit, so stay on WebCore thread, but go via the TestShellActivity
        // as we need access to the Webview.
        mLayoutTestController.setGeolocationPermission(allow);
!!!9024140.java!!!	setMockDeviceOrientation(inout canProvideAlpha : boolean, in alpha : double, inout canProvideBeta : boolean, in beta : double, inout canProvideGamma : boolean, in gamma : double) : void
        // Configuration is in WebKit, so stay on WebCore thread, but go via the TestShellActivity
        // as we need access to the Webview.
        mLayoutTestController.setMockDeviceOrientation(canProvideAlpha, alpha, canProvideBeta, beta,
                canProvideGamma, gamma);
!!!9024268.java!!!	overridePreference(in key : String, inout value : boolean) : void
        Message message = obtainMessage(OVERRIDE_PREFERENCE);
        message.getData().putString("key", key);
        message.getData().putBoolean("value", value);
        message.sendToTarget();
!!!9024396.java!!!	setXSSAuditorEnabled(inout flag : boolean) : void
        obtainMessage(SET_XSS_AUDITOR_ENABLED, flag ? 1 : 0, 0).sendToTarget();
