class BidiFormatter
!!!15809676.java!!!	getInstance() : BidiFormatter
        return new Builder().build();
!!!15809804.java!!!	getInstance(inout rtlContext : boolean) : BidiFormatter
        return new Builder(rtlContext).build();
!!!15809932.java!!!	getInstance(inout locale : Locale) : BidiFormatter
        return new Builder(locale).build();
!!!15810060.java!!!	BidiFormatter(inout isRtlContext : boolean, in flags : int, inout heuristic : TextDirectionHeuristic)
        mIsRtlContext = isRtlContext;
        mFlags = flags;
        mDefaultTextDirectionHeuristic = heuristic;
!!!15810188.java!!!	isRtlContext() : boolean
        return mIsRtlContext;
!!!15810316.java!!!	getStereoReset() : boolean
        return (mFlags & FLAG_STEREO_RESET) != 0;
!!!15810444.java!!!	markAfter(inout str : String, inout heuristic : TextDirectionHeuristic) : String
        final boolean isRtl = heuristic.isRtl(str, 0, str.length());
        // getExitDir() is called only if needed (short-circuit).
        if (!mIsRtlContext && (isRtl || getExitDir(str) == DIR_RTL)) {
            return LRM_STRING;
        }
        if (mIsRtlContext && (!isRtl || getExitDir(str) == DIR_LTR)) {
            return RLM_STRING;
        }
        return EMPTY_STRING;
!!!15810572.java!!!	markBefore(inout str : String, inout heuristic : TextDirectionHeuristic) : String
        final boolean isRtl = heuristic.isRtl(str, 0, str.length());
        // getEntryDir() is called only if needed (short-circuit).
        if (!mIsRtlContext && (isRtl || getEntryDir(str) == DIR_RTL)) {
            return LRM_STRING;
        }
        if (mIsRtlContext && (!isRtl || getEntryDir(str) == DIR_LTR)) {
            return RLM_STRING;
        }
        return EMPTY_STRING;
!!!15810700.java!!!	isRtl(inout str : String) : boolean
        return mDefaultTextDirectionHeuristic.isRtl(str, 0, str.length());
!!!15810828.java!!!	unicodeWrap(inout str : String, inout heuristic : TextDirectionHeuristic, inout isolate : boolean) : String
        final boolean isRtl = heuristic.isRtl(str, 0, str.length());
        StringBuilder result = new StringBuilder();
        if (getStereoReset() && isolate) {
            result.append(markBefore(str,
                    isRtl ? TextDirectionHeuristics.RTL : TextDirectionHeuristics.LTR));
        }
        if (isRtl != mIsRtlContext) {
            result.append(isRtl ? RLE : LRE);
            result.append(str);
            result.append(PDF);
        } else {
            result.append(str);
        }
        if (isolate) {
            result.append(markAfter(str,
                    isRtl ? TextDirectionHeuristics.RTL : TextDirectionHeuristics.LTR));
        }
        return result.toString();
!!!15810956.java!!!	unicodeWrap(inout str : String, inout heuristic : TextDirectionHeuristic) : String
        return unicodeWrap(str, heuristic, true /* isolate */);
!!!15811084.java!!!	unicodeWrap(inout str : String, inout isolate : boolean) : String
        return unicodeWrap(str, mDefaultTextDirectionHeuristic, isolate);
!!!15811212.java!!!	unicodeWrap(inout str : String) : String
        return unicodeWrap(str, mDefaultTextDirectionHeuristic, true /* isolate */);
!!!15811340.java!!!	isRtlLocale(inout locale : Locale) : boolean
        return (TextUtils.getLayoutDirectionFromLocale(locale) == View.LAYOUT_DIRECTION_RTL);
!!!15811468.java!!!	getExitDir(inout str : String) : int
        return new DirectionalityEstimator(str, false /* isHtml */).getExitDir();
!!!15811596.java!!!	getEntryDir(inout str : String) : int
        return new DirectionalityEstimator(str, false /* isHtml */).getEntryDir();
