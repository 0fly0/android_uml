class OpenSSLDSAPrivateKey
!!!2414875.java!!!	OpenSSLDSAPrivateKey(inout key : OpenSSLKey)
        this.key = key;
!!!2415003.java!!!	getOpenSSLKey() : OpenSSLKey
        return key;
!!!2415131.java!!!	OpenSSLDSAPrivateKey(inout dsaKeySpec : DSAPrivateKeySpec)
        try {
            key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_DSA(
                    dsaKeySpec.getP().toByteArray(),
                    dsaKeySpec.getQ().toByteArray(),
                    dsaKeySpec.getG().toByteArray(),
                    null,
                    dsaKeySpec.getX().toByteArray()));
        } catch (Exception e) {
            throw new InvalidKeySpecException(e);
        }
!!!2415259.java!!!	ensureReadParams() : void
        if (params == null) {
            params = new OpenSSLDSAParams(key);
        }
!!!2415387.java!!!	getInstance(inout dsaPrivateKey : DSAPrivateKey) : OpenSSLKey
        try {
            DSAParams dsaParams = dsaPrivateKey.getParams();
            return new OpenSSLKey(NativeCrypto.EVP_PKEY_new_DSA(
                    dsaParams.getP().toByteArray(),
                    dsaParams.getQ().toByteArray(),
                    dsaParams.getG().toByteArray(),
                    null,
                    dsaPrivateKey.getX().toByteArray()));
        } catch (Exception e) {
            throw new InvalidKeyException(e);
        }
!!!2415515.java!!!	getParams() : DSAParams
        ensureReadParams();
        return params;
!!!2415643.java!!!	getAlgorithm() : String
        return "DSA";
!!!2415771.java!!!	getFormat() : String
        /*
         * If we're using an OpenSSL ENGINE, there's no guarantee we can export
         * the key. Returning {@code null} tells the caller that there's no
         * encoded format.
         */
        if (key.isEngineBased()) {
            return null;
        }

        return "PKCS#8";
!!!2415899.java!!!	getEncoded() : byte
        /*
         * If we're using an OpenSSL ENGINE, there's no guarantee we can export
         * the key. Returning {@code null} tells the caller that there's no
         * encoded format.
         */
        if (key.isEngineBased()) {
            return null;
        }

        return NativeCrypto.i2d_PKCS8_PRIV_KEY_INFO(key.getPkeyContext());
!!!2416027.java!!!	getX() : BigInteger
        if (key.isEngineBased()) {
            throw new UnsupportedOperationException("private key value X cannot be extracted");
        }

        ensureReadParams();
        return params.getX();
!!!2416155.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }

        if (o instanceof OpenSSLDSAPrivateKey) {
            OpenSSLDSAPrivateKey other = (OpenSSLDSAPrivateKey) o;

            /*
             * We can shortcut the true case, but it still may be equivalent but
             * different copies.
             */
            if (key.equals(other.getOpenSSLKey())) {
                return true;
            }
        }

        if (!(o instanceof DSAPrivateKey)) {
            return false;
        }

        ensureReadParams();

        final BigInteger x = params.getX();
        if (x == null) {
            /*
             * If our X is null, we can't tell if these two private keys are
             * equivalent. This usually happens if this key is ENGINE-based. If
             * the other key was ENGINE-based, we should have caught it in the
             * OpenSSLDSAPrivateKey case.
             */
            return false;
        }

        final DSAPrivateKey other = (DSAPrivateKey) o;
        return x.equals(other.getX()) && params.equals(other.getParams());
!!!2416283.java!!!	hashCode() : int
        ensureReadParams();

        int hash = 1;

        final BigInteger x = getX();
        if (x != null) {
            hash = hash * 3 + x.hashCode();
        }

        hash = hash * 7 + params.hashCode();

        return hash;
!!!2416411.java!!!	toString() : String
        final StringBuilder sb = new StringBuilder("OpenSSLDSAPrivateKey{");

        if (key.isEngineBased()) {
            sb.append("key=");
            sb.append(key);
            sb.append('}');
            return sb.toString();
        }

        ensureReadParams();
        sb.append("X=");
        sb.append(params.getX().toString(16));
        sb.append(',');
        sb.append("params=");
        sb.append(params.toString());
        sb.append('}');

        return sb.toString();
!!!2416539.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();

        final BigInteger g = (BigInteger) stream.readObject();
        final BigInteger p = (BigInteger) stream.readObject();
        final BigInteger q = (BigInteger) stream.readObject();
        final BigInteger x = (BigInteger) stream.readObject();

        key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_DSA(
                p.toByteArray(),
                q.toByteArray(),
                g.toByteArray(),
                null,
                x.toByteArray()));
!!!2416667.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        if (getOpenSSLKey().isEngineBased()) {
            throw new NotSerializableException("engine-based keys can not be serialized");
        }

        stream.defaultWriteObject();

        ensureReadParams();
        stream.writeObject(params.getG());
        stream.writeObject(params.getP());
        stream.writeObject(params.getQ());
        stream.writeObject(params.getX());
