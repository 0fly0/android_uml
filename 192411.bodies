class HashSet
!!!1301659.java!!!	HashSet()
        this(new HashMap<E, HashSet<E>>());
!!!1301787.java!!!	HashSet(in capacity : int)
        this(new HashMap<E, HashSet<E>>(capacity));
!!!1301915.java!!!	HashSet(in capacity : int, in loadFactor : float)
        this(new HashMap<E, HashSet<E>>(capacity, loadFactor));
!!!1302043.java!!!	HashSet(inout collection : Collection)
        this(new HashMap<E, HashSet<E>>(collection.size() < 6 ? 11 : collection
                .size() * 2));
        for (E e : collection) {
            add(e);
        }
!!!1302171.java!!!	HashSet(inout backingMap : HashMap)
        this.backingMap = backingMap;
!!!1302299.java!!!	add(inout object : E) : boolean
        return backingMap.put(object, this) == null;
!!!1302427.java!!!	clear() : void
        backingMap.clear();
!!!1302555.java!!!	clone() : Object
        try {
            HashSet<E> clone = (HashSet<E>) super.clone();
            clone.backingMap = (HashMap<E, HashSet<E>>) backingMap.clone();
            return clone;
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!1302683.java!!!	contains(inout object : Object) : boolean
        return backingMap.containsKey(object);
!!!1302811.java!!!	isEmpty() : boolean
        return backingMap.isEmpty();
!!!1302939.java!!!	iterator() : Iterator
        return backingMap.keySet().iterator();
!!!1303067.java!!!	remove(inout object : Object) : boolean
        return backingMap.remove(object) != null;
!!!1303195.java!!!	size() : int
        return backingMap.size();
!!!1303323.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        stream.defaultWriteObject();
        stream.writeInt(backingMap.table.length);
        stream.writeFloat(HashMap.DEFAULT_LOAD_FACTOR);
        stream.writeInt(size());
        for (E e : this) {
            stream.writeObject(e);
        }
!!!1303451.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();
        int length = stream.readInt();
        float loadFactor = stream.readFloat();
        backingMap = createBackingMap(length, loadFactor);
        int elementCount = stream.readInt();
        for (int i = elementCount; --i >= 0;) {
            E key = (E) stream.readObject();
            backingMap.put(key, this);
        }
!!!1303579.java!!!	createBackingMap(in capacity : int, in loadFactor : float) : HashMap
        return new HashMap<E, HashSet<E>>(capacity, loadFactor);
