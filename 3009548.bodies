class CECAppService
!!!12284300.java!!!	onBind(inout arg0 : Intent) : IBinder
        return null;
!!!12284428.java!!!	onCreate() : void
        super.onCreate();
        Log.i(TAG, "Inside the Oncreate of APP HDMI SERVICE");
        mContext = getApplicationContext();

        if (mWrapper == null) {
            mWrapper = Wrapper.getWrapperInstance();
        }

        mCecListener = new CecSrvConnectionListener() {
            @Override
            public void onCecServiceConnected(IBinder cecSrvImpl, int cecDevType) {
                Log.d(TAG, "onCecServiceConnected cecSrvImpl=" + cecSrvImpl + "  cecDevType="
                        + cecDevType);
                if (null != cecSrvImpl) {
                    switch (cecDevType) {
                        case HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV:
                            mTvCecService = ITvCecService.Stub.asInterface(cecSrvImpl);
                            Log.d(TAG, "onCecServiceConnected mITvCecService=" + mTvCecService);
                            if (null != mTvCecService) {
                                CecUtils.setITvCecService(mTvCecService);
                                try {
                                    mCecCb = new CecCallbacksBN();
                                    mTvCecService.registerCecCallBack(mCecCb);
                                } catch (RemoteException exp) {
                                    exp.printStackTrace();
                                }
                                applyUserSettings(mTvCecService);
                            }
                            break;
                    }

                }
            }

            @Override
            public void onCecServiceDisconnected() {
                Log.d(TAG, "onCecServiceDisconnected");
                CecUtils.unregisterCecServiceListener();
            }
        };
!!!12284556.java!!!	applyUserSettings(inout cecService : ITvCecService) : void
        boolean cecEnabled = mCecManager.isCECEnabled();
        Log.i(TAG, "applyUserSetting: CEC: enabled: " + cecEnabled);
        try {
            if (cecEnabled) {
                cecService.enableCEC(false);
            } else {
                cecService.disableCEC();
            }
        } catch(Exception ex) {
            Log.e(TAG, "", ex);
        }

        boolean sacEnabled = mCecManager.isSystemAudioModeEnabled();
        Log.i(TAG, "applyUserSetting: System Audio Control: enabled: " + sacEnabled);
        try {
            if (sacEnabled) {
                cecService.enableSAC();
            } else {
                cecService.disableSAC();
            }
        } catch(Exception ex) {
            Log.e(TAG, "", ex);
        }

        boolean autoPowerOn = mCecManager.isTVAutoPowerOnEnabled();
        Log.i(TAG, "applyUserSetting: TV Auto Power On: enabled: " + autoPowerOn);
        try {
            if (autoPowerOn) {
                cecService.enableTVAutoPowerOn();
            } else {
                cecService.disableTVAutoPowerOn();
            }
        } catch(Exception ex) {
            Log.e(TAG, "", ex);
        }

        boolean deviceAutoPowerOff = mCecManager.isDeviceAutoPowerOffEnabled();
        Log.i(TAG, "applyUserSetting: Device Auto Power Off: enabled: " + deviceAutoPowerOff);
        try {
            if (deviceAutoPowerOff) {
                cecService.enableDeviceAutoPowerOff();
            } else {
                cecService.disableDeviceAutoPowerOff();
            }
        } catch(Exception ex) {
            Log.e(TAG, "", ex);
        }
!!!12284684.java!!!	activatePortConnectedCecDevices() : void
        Log.i(TAG, "@@@@ activatePortConnectedCecDevices @@@@");
        // Last active cec port before shutdown
        int wakeupsource = 0;
        try {
            wakeupsource = mTvCecService.getWakeUpSource();
            Log.i(TAG, "@@@@ wake up source is @@@@" + wakeupsource);
            if (wakeupsource == 4) {
                mIsBootupByOneTouchPlay = true;
                mTvCecService.requestActiveSource();
            }
        } catch (RemoteException exp) {
            exp.printStackTrace();
        }
        // Activating the first playback device
        if (wakeupsource != 4) {
            activeFirstPlaybackDevice();
        }
!!!12284812.java!!!	onDestroy() : void

        if (mWrapper != null) {
            mWrapper = null;
        }
        CecUtils.disconnectCecService();
        super.onDestroy();
!!!12284940.java!!!	onStartCommand(inout intent : Intent, in flags : int, in startId : int) : int
        if (intent == null) {
            return START_STICKY;
        }

        String action = intent.getAction();

        if (action.equals(CecUtils.CEC_ACTION_INACTIVE_SOURCE)) {
            Log.i(TAG, "INACTIVE SOURCE INTENT RECEIVED");
        } else if (action.equals(CecUtils.CEC_ACTION_ACTIVE_SOURCE)) {
            handleActiveSource(intent);
        } else if (action.equals(CecUtils.CEC_ACTION_ACTIVATE_CEC_SAC_DEVICES)) {
            // Do a device discovery here so that the list is updated
            if (mWrapper == null) {
                mWrapper = Wrapper.getWrapperInstance();
            }
            mWrapper.setContext(mContext);
            CecUtils.setCecSrvConnectionListener(mCecListener);
            CecUtils.connectCecService();

            mCecManager = mWrapper.getCecManager();

        } else if (action.equals(CecUtils.CEC_ACTION_AUDIO_STATUS_UPDATE)) {
            // update ARC audio status
            Bundle bundle = intent.getExtras();
            int devAddr = bundle.getInt(HdmiCecUtils.key_sac_devaddr, 0);
            int volume = bundle.getInt(HdmiCecUtils.key_sac_volume, 0);
            boolean mute = bundle.getBoolean(HdmiCecUtils.key_sac_mute, false);
            if (mArcVolPanel == null) {
                mArcVolPanel = new ArcVolumePanel(mContext);
            }
            mArcVolPanel.postAVRVolumeChanged(volume, (mute ? ArcVolumePanel.AVR_MUTE_STATE
                    : ArcVolumePanel.AVR_NON_MUTE_STATE));

        } else if (action.equals(CecUtils.CEC_ACTION_AUDIO_STATUS_REMOVE)) {
            if (mArcVolPanel != null) {
                mArcVolPanel.dismissARCVolumePanel();
            }
        } else if (action.equals(CecUtils.CEC_ACTION_OSD_DISPLAY_NOTIFY)) {
            String osdstr = intent.getStringExtra(HdmiCecUtils.EXTRA_HDMI_DEV_OSDNAME);
            int osdMode = intent.getIntExtra(HdmiCecUtils.EXTRA_OSD_STRING_DISPLAY_MODE, 0);
            Log.d(TAG, "osdname:" + osdstr + ",mode:" + osdMode);
            if (mOsdDisplayToast == null) {
                mOsdDisplayToast = Toast.makeText(mContext, osdstr, Toast.LENGTH_SHORT);
            }
            if (osdMode == 0) {
                mOsdDisplayToast.setText(osdstr);
                mOsdDisplayToast.setDuration(Toast.LENGTH_SHORT);
                mOsdDisplayToast.show();
            } else if (osdMode == 1) {
                mOsdDisplayToast.setText(osdstr);
                mOsdDisplayToast.setDuration(Toast.LENGTH_LONG);
                mOsdDisplayToast.show();
            } else {
                mOsdDisplayToast.cancel();
            }

        } else if (action.equals(CecUtils.CEC_ACTION_TV_AS_ACTIVE)
                || action.equals(CecUtils.CEC_ACTION_TV_ROUTING_CHANGE)) {

        } else if (action.equals(CecUtils.CEC_ACTION_CEC_ON)) {
            handleCecOn();
        } else if (action.equals(CecUtils.CEC_ACTION_HDMI_CONNECTING_CHANGED)) {
            handleHdmiConnectingChanged();
        } else if (action.equals(CecUtils.CEC_ACTION_MUTE_UNMUTE_TV_SPEAKER)) {
            handleMuteUumuteTvSpeaker(intent);
        }

        return super.onStartCommand(intent, flags, startId);
!!!12285068.java!!!	handleActiveSource(in intent : Intent) : void
        if (mTvCecService == null) {
            Log.i(TAG, "@@@cec: handleActiveSource but TVCecService pointer is NULL," +
                " delay 0.2sec to retry.");
            mHandler.postDelayed(new Runnable() {
                public void run() {
                    handleActiveSource(intent);
                    }
                }, 200);
            return;
        }

        Bundle hdmiData = intent.getBundleExtra(HdmiCecUtils.EXTRA_HDMI_BUNDLE);
        int portNumber = 0;
        int devAddr = 0;
        String deviceId = "";

        if (hdmiData != null) {
            portNumber = hdmiData.getInt(HdmiCecUtils.EXTRA_HDMI_PORT);
            devAddr = hdmiData.getInt(HdmiCecUtils.EXTRA_HDMI_LOGICAL_ADDR);
            deviceId = hdmiData.getString(HdmiCecUtils.EXTRA_HDMI_DEVICE_ID);
            switchInput(portNumber, devAddr, deviceId);

        } else {
            Log.e(TAG, "Active source failed because of no meta data");
        }

!!!12285196.java!!!	handleCecOn() : void
        if (mTvCecService == null) {
            Log.i(TAG, "@@@cec: handleCecOn but TVCecService pointer is NULL," +
                " delay 0.2sec to retry.");
            mHandler.postDelayed(new Runnable() {
                public void run() {
                    handleCecOn();
                    }
                }, 200);
            return;
        }

        int wakeupsource = 0;
        try {
            wakeupsource = mTvCecService.getWakeUpSource();
            Log.i(TAG, "@@@@ wake up source is @@@@" + wakeupsource);
            if (wakeupsource == 4) {
                mIsBootupByOneTouchPlay = true;
                mTvCecService.requestActiveSource();
            }
        } catch (RemoteException exp) {
            exp.printStackTrace();
        }

        /*
         * When TV boot up or first time enable CEC, we should set TV as
         * active source, otherwise AVR will not un-mute when enable SAC;
         * but for booting up by one-touch-play, we should not set TV as
         * active, otherwise active source will fail and can't change to the
         * HDMI source.
         */
        Log.d(TAG, "received CEC ON intent.");
        if ((!mIsBootupByOneTouchPlay) && (!mhasSetTvAsActive) && mTvCecService != null
                && mWrapper != null) {
            int curport = CecUtils.getCurrentHdmiInputPort();
            Log.d(TAG, "current port:" + curport);
            try {
                mTvCecService.setCurrentInput(curport);
                if (curport < CecUtils.FIRST_HDMI_PORT || curport > CecUtils.LAST_HDMI_PORT) {
                    mTvCecService.setActiveSource();
                    mhasSetTvAsActive = true;
                }
            } catch (RemoteException exp) {
                exp.printStackTrace();
            }
        }

!!!12285324.java!!!	handleHdmiConnectingChanged() : void
        if (mTvCecService == null) {
            Log.i(TAG, "@@@cec: handleHdmiConnectingChanged but TVCecService pointer is NULL," +
                " delay 0.2sec to retry.");
            mHandler.postDelayed(new Runnable() {
                public void run() {
                    handleHdmiConnectingChanged();
                    }
                }, 200);
            return;
        }
        // Hdmi hotplug status changed, start a new device discovery

        try {
            if (mTvCecService != null && mCecManager != null && mCecManager.isCECEnabled()) {
                mTvCecService.startCECDeviceDiscovery();
            }
        } catch (RemoteException exp) {
            Log.d(TAG, "Exception happens when start discovery..");
        }
!!!12285452.java!!!	handleMuteUumuteTvSpeaker(in intent : Intent) : void
        if (mTvCecService == null) {
            Log.i(TAG, "@@@cec: handleMuteUumuteTvSpeaker but TVCecService pointer is NULL," +
                " delay 0.2sec to retry.");
            mHandler.postDelayed(new Runnable() {
                public void run() {
                    handleMuteUumuteTvSpeaker(intent);
                    }
                }, 200);
            return;
        }

        /* FIX TV speaker can't be UNMUTE when disable cec when sac is on. */
        /* In this case mCecManager.isCECEnabled() will return false. By JinYan@Marvell */
        if (mWrapper != null && mTvCecService != null
                    && mCecManager != null /*&& mCecManager.isCECEnabled()*/) {
            int mute = intent.getIntExtra(HdmiCecUtils.key_sac_mute, 0);
            mWrapper.setTvSpeakerMute(mute);
            try {
                mTvCecService.setTvMute((mute == 1) ? true : false);
            } catch (Exception exp) {
                Log.e(TAG, "Exception happens when setTvMute");
            }
        }
!!!12285580.java!!!	switchInput(in portNumber : int, in devAddr : int, in preDeviceId : String) : void
        Log.i(TAG, "Switch input,portNumber=" + portNumber + ",devAddr=" + devAddr
                + ",preDeviceId=" + preDeviceId);

        deviceID = CecUtils.getDeviceIdByHdmiPort(portNumber);

        if (deviceID != null && shouldReallyDoSwitch(portNumber, devAddr, preDeviceId)) {
            try {
                mTvCecService.setCurrentInput(portNumber);
                mTvCecService.activateCECDevice(devAddr);
                if (mCurPort != portNumber && mCurPort >= CecUtils.FIRST_HDMI_PORT
                        && mCurPort <= CecUtils.LAST_HDMI_PORT
                        && portNumber >= CecUtils.FIRST_HDMI_PORT
                        && portNumber <= CecUtils.LAST_HDMI_PORT) {
                    mTvCecService.sendRoutingChange(CecUtils.getPhyaddrByPort(portNumber),
                            CecUtils.getPhyaddrByPort(mCurPort));
                }
            } catch (RemoteException exp) {
                exp.printStackTrace();
            }
            // Remember it.
            mCurPort = portNumber;
            mCurDevAddr = devAddr;

            Uri dataUri = TvUriUtils.PASSTHROUGH_URI.buildUpon()
                    .appendQueryParameter(
                            TvUriUtils.DEVICE_ID_QUERY_PARAMETER,
                            deviceID)
                    .build();

            Intent viewIntent = new Intent(Intent.ACTION_VIEW, dataUri);
            viewIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                    | Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
            mContext.startActivity(viewIntent);

            // Set the Current Device as the Default Device. So that on
            // Reboot
            // this Device start playback
            Intent defaultIntent = MediaDevicesIntents
                    .createServiceDefaultDeviceIntent(deviceID);
            getApplicationContext().startService(defaultIntent);

        } else {
            Log.d(TAG, "don't do action since the logical address is same.");
        }

!!!12285708.java!!!	shouldReallyDoSwitch(in port : int, in devAddr : int, in preDeviceId : String) : boolean
        String deviceid = mWrapper.getCurrentDeviceId();
        String deviceidmappingcecport = CecUtils.getDeviceIdByHdmiPort(port);
        mCurPort = CecUtils.getHdmiPortbyDeviceId(deviceid);
        if (port != mCurPort
            /* check mCurDevAddr != -1, to avoid switching input when cec first on*/
            || (mCurDevAddr != -1 && devAddr != mCurDevAddr)
            || (deviceidmappingcecport != null && !deviceidmappingcecport.equals(deviceid))
            || (preDeviceId != null && !preDeviceId.equals(deviceid))) {
            return true;
        } else {
            return false;
        }
!!!12285836.java!!!	activeFirstPlaybackDevice() : void
        int numDevicesAtPort = 0;
        CECDevInfo firstPlaybackDev = null;
        CECDevInfo audioDev = null;
        ArrayList<CECDevInfo> cecDevAddressList = null;
        int hdmiPort = CecUtils.getCurrentHdmiInputPort();

        cecDevAddressList = (ArrayList<CECDevInfo>) CecUtils.getConnectedDevicesAtPort(hdmiPort);

        if (cecDevAddressList != null) {
            numDevicesAtPort = cecDevAddressList.size();
            Log.i(TAG, "######### Number of devices at the requested port = " + numDevicesAtPort);

            for (int i = 0; i < numDevicesAtPort; i++) {
                if (cecDevAddressList.get(i).getDeviceType() != DeviceType.AudioDevice) {
                    firstPlaybackDev = cecDevAddressList.get(i);
                    break;
                } else {
                    audioDev = cecDevAddressList.get(i);
                }
            }
        }

        try {
            if (firstPlaybackDev != null || audioDev != null) {
                int cecDevAddress = -1;
                int portNumber = -1;

                // Playback device has priority
                if (firstPlaybackDev != null) {
                    cecDevAddress = firstPlaybackDev.getDeviceAddress();
                    portNumber = firstPlaybackDev.getPortNumber();
                } else {
                    cecDevAddress = audioDev.getDeviceAddress();
                    portNumber = audioDev.getPortNumber();
                }

                Log.i(TAG, "Active cec device " + cecDevAddress + " at port " + portNumber);

                mTvCecService.setCurrentInput(portNumber);
                mTvCecService.activateCECDevice(cecDevAddress);
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
