class DeviceMessageAdapter
!!!13078156.java!!!	DeviceMessageAdapter(inout receiver : MessageReceiver, inout sender : WireAdapter)
    mWireAdapter = sender;
    mMessageReceiver = receiver;
!!!13078284.java!!!	onMessage(inout message : RemoteMessage) : void
    if (message.hasResponseMessage()) {
      Token token = message.hasSequenceNumber() ? new Token(message.getSequenceNumber()) : null;
      interpretResponse(token, message.getResponseMessage());
    }
!!!13078412.java!!!	getWireAdapter() : WireAdapter
    return mWireAdapter;
!!!13078540.java!!!	interpretResponse(inout token : Token, inout message : ResponseMessage) : void
    boolean isEmpty = true;
    if (message.hasDataMessage()) {
      isEmpty = false;
      onData(token, message.getDataMessage());
    }
    if (message.hasBinaryDataMessage()) {
      isEmpty = false;
      onBinaryData(token, message.getBinaryDataMessage());
    }
    if (message.hasDataListMessage()) {
      isEmpty = false;
      onDataList(token, message.getDataListMessage());
    }
    if (message.hasFlingResultMessage()) {
      isEmpty = false;
      onFlingResult(token, message.getFlingResultMessage());
    }
    if (message.hasConnectMessage()) {
      isEmpty = false;
      onConnectMessage(message.getConnectMessage());
    }
    if (message.hasSensorRegistrationMessage()) {
      isEmpty = false;
      onSensorRegistration(message.getSensorRegistrationMessage());
    }
    if (message.hasSoftInputUpdate()) {
      isEmpty = false;
      onSoftInputUpdate(message.getSoftInputUpdate());
    }
    if (message.hasSoftInputRequest()) {
      isEmpty = false;
      onSoftInputRequest(message.getSoftInputRequest());
    }
    if (message.hasQueryResponse()) {
      isEmpty = false;
      onQueryResponse(message.getQueryResponse());
    }
    if (isEmpty && token != null && token.hasSequenceNumber()) {
      onAck();
    }
!!!13078668.java!!!	onAck() : void
    mMessageReceiver.onAck();
!!!13078796.java!!!	onData(inout token : Token, inout message : Data) : void
    String type = message.getType();
    String data = message.getData();
    mMessageReceiver.onData(token, type, data);
!!!13078924.java!!!	onBinaryData(inout token : Token, inout message : BinaryData) : void
    String type = message.getKey();
    byte[] data = message.getData().toByteArray();
    mMessageReceiver.onData(token, type, data);
!!!13079052.java!!!	onDataList(inout token : Token, inout dataList : DataList) : void
    mMessageReceiver.onDataList(token, dataList);
!!!13079180.java!!!	onFlingResult(inout token : Token, inout flingResult : FlingResult) : void
    mMessageReceiver.onFlingResult(token, flingResult);
!!!13079308.java!!!	onConnectMessage(inout connectMessage : Connect) : void
    ConnectInfo connectInfo;
    if (connectMessage.hasVersion()) {
      connectInfo = new ConnectInfo(connectMessage.getDeviceName(), connectMessage.getVersion());
    } else {
      connectInfo = new ConnectInfo(connectMessage.getDeviceName());
    }
    mMessageReceiver.onConnect(connectInfo);
!!!13079436.java!!!	onSensorRegistration(inout message : SensorRegistration) : void
    if (message.getActivate()) {
      mMessageReceiver.onSensorRegister(message.getSensorId(), message.getDelay().getNumber());
    } else {
      mMessageReceiver.onSensorUnregister(message.getSensorId());
    }
!!!13079564.java!!!	onSoftInputRequest(inout request : SoftInputServerRequest) : void
    String hint = null;

    switch (request.getType()) {
      case INPUT_REQUIRED:
        if (request.hasHint()) {
          hint = request.getHint();
        }
        mMessageReceiver.onSoftInputRequired(request.getInputType(), request.getImeAction(), hint);
        break;

      case INPUT_DISMISS:
        mMessageReceiver.onSoftInputDismiss();
        break;
    }
!!!13079692.java!!!	onSoftInputUpdate(inout request : SoftInputUpdate) : void
    int selectStart = -1;
    int selectEnd = -1;

    if (request.hasUpdateSelection()) {
      selectStart = request.getUpdateSelection().getSelectionStart();
      selectEnd = request.getUpdateSelection().getSelectionEnd();
    }

    if (request.hasUpdateEntireText()) {
      mMessageReceiver.onSoftInputContent(request.getUpdateEntireText().getContent(),
          selectStart, selectEnd);
    } else if (request.hasUpdateChangedText()) {
      SoftInputUpdateChangedText update = request.getUpdateChangedText();
      mMessageReceiver.onSoftInputUpdate(update.getContent(), update.getChangePosition(),
          update.getChangeReplaced(), update.getChangeInserted(),
          selectStart, selectEnd);
    } else if ((selectStart != -1) && (selectEnd != -1)) {
      mMessageReceiver.onSoftInputUpdate(null, 0, 0, 0, selectStart, selectEnd);
    }
!!!13079820.java!!!	onQueryResponse(inout response : QueryInformationResponse) : void
    switch (response.getType()) {
      case BASIC_INFO:
        mMessageReceiver.onQueryResponseBasicInfo(
            response.getBasicInfo().getBoxName(),
            response.getBasicInfo().getMacAddress());
        break;

      case AVAILABLE_MEDIA_DEVICES:
        String defaultMediaDevice = null;
        if (response.getConnectedMediaDevices().hasDefaultMediaDeviceId()) {
          defaultMediaDevice = response.getConnectedMediaDevices().getDefaultMediaDeviceId();
        }
        mMessageReceiver.onQueryResponseConnectedMediaDevices(
            defaultMediaDevice, response.getConnectedMediaDevices().getAvailableMediaDeviceList());
        break;

      case MEDIA_DEVICE_INFO:
        final MediaDeviceInfo sourceInfo = new MediaDeviceInfo(response.getMediaDeviceInfo());
        mMessageReceiver.onQueryResponseMediaDeviceInfo(sourceInfo);
        break;
    }
!!!13079948.java!!!	sendPing() : void
    RequestMessage.Builder request = getRequestMessageBuilder();
    sendRequestWithToken(request);
!!!13080076.java!!!	sendConnect(inout connectInfo : ConnectInfo) : void
    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setConnectMessage(connectInfo.getProto());
    sendRequest(request);
!!!13080204.java!!!	sendData(in type : String, in data : String) : Token
    Data.Builder builder = Data.newBuilder();
    builder.setData(data);
    builder.setType(type);
    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setDataMessage(builder);
    return sendRequestWithToken(request);
!!!13080332.java!!!	sendData(in type : String, inout data : byte) : Token
    BinaryData.Builder builder = BinaryData.newBuilder();
    builder.setData(ByteString.copyFrom(data));
    builder.setKey(type);
    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setBinaryDataMessage(builder);
    return sendRequestWithToken(request);
!!!13080460.java!!!	sendKeyEvent(inout keycode : Code, inout action : Action) : void
    KeyEvent.Builder builder = KeyEvent.newBuilder();
    builder.setKeycode(keycode);
    builder.setAction(action);
    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setKeyEventMessage(builder);
    sendRequest(request);
!!!13080588.java!!!	sendMouseMove(in xDelta : int, in yDelta : int) : void
    MouseEvent.Builder builder = MouseEvent.newBuilder();
    builder.setXDelta(xDelta);
    builder.setYDelta(yDelta);
    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setMouseEventMessage(builder);
    sendRequest(request);
!!!13080716.java!!!	sendMouseWheel(in xScroll : int, in yScroll : int) : void
    MouseWheel.Builder builder = MouseWheel.newBuilder();
    builder.setXScroll(xScroll);
    builder.setYScroll(yScroll);
    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setMouseWheelMessage(builder);
    sendRequest(request);
!!!13080844.java!!!	sendSoftInputContent(in content : String, in selectStart : int, in selectEnd : int) : void
    if (content == null) {
      throw new NullPointerException("Content cannot be null");
    }

    sendSoftInputUpdate(content, 0, content.length(), -1, selectStart, selectEnd);
!!!13080972.java!!!	sendSoftInputUpdate(in content : String, in cursor : int, in oldLen : int, in newLen : int, in selectionStart : int, in selectionEnd : int) : void
    SoftInputUpdate.Builder inputBuilder = SoftInputUpdate.newBuilder();
    RequestMessage.Builder request = getRequestMessageBuilder();
    SoftInputUpdateSelection.Builder selection = SoftInputUpdateSelection.newBuilder();

    selection.setSelectionStart(selectionStart);
    selection.setSelectionEnd(selectionEnd);

    if (oldLen == -1) {
      SoftInputUpdateEntireText.Builder update = SoftInputUpdateEntireText.newBuilder();
      update.setContent(content);
      inputBuilder.setUpdateEntireText(update);
    } else if (oldLen != 0 || newLen != 0) {
      SoftInputUpdateChangedText.Builder partial = SoftInputUpdateChangedText.newBuilder();
      partial.setContent(content != null ? content : "");
      partial.setChangePosition(cursor);
      partial.setChangeReplaced(oldLen);
      partial.setChangeInserted(newLen);
      inputBuilder.setUpdateChangedText(partial);
    }

    inputBuilder.setUpdateSelection(selection);
    request.setSoftInputUpdate(inputBuilder);
    sendRequest(request);
!!!13081100.java!!!	sendSoftInputExecute(in action : int) : void
    SoftInputClientRequest.Builder builder = SoftInputClientRequest.newBuilder();
    RequestMessage.Builder request = getRequestMessageBuilder();

    builder.setType(SoftInputClientRequestType.INPUT_EXECUTE);
    builder.setImeAction(action);

    request.setSoftInputRequest(builder);
    sendRequest(request);
!!!13081228.java!!!	sendURI(in uri : String) : Token
    Fling.Builder builder = Fling.newBuilder();
    builder.setText(uri);
    builder.setType(FlingType.FLING_URL);
    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setFlingMessage(builder);
    return sendRequestWithToken(request);
!!!13081356.java!!!	sendQuery(inout type : QueryInformationType) : void
    QueryInformationRequest.Builder builder = QueryInformationRequest.newBuilder();
    builder.setType(type);
    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setQueryRequest(builder);
    sendRequest(request);
!!!13081484.java!!!	sendQueryBasicInfo() : void
    sendQuery(QueryInformationType.BASIC_INFO);
!!!13081612.java!!!	sendQueryConnectedMediaDevices() : void
    sendQuery(QueryInformationType.AVAILABLE_MEDIA_DEVICES);
!!!13081740.java!!!	sendQueryMediaDeviceInfo(in sourceInfo : String) : void
    QueryRequestMediaDeviceInfo.Builder infoBuilder = QueryRequestMediaDeviceInfo.newBuilder();
    infoBuilder.setMediaDeviceId(sourceInfo);
    QueryInformationRequest.Builder builder = QueryInformationRequest.newBuilder();
    builder.setType(QueryInformationType.MEDIA_DEVICE_INFO);
    builder.setMediaDeviceInfo(infoBuilder);
    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setQueryRequest(builder);
    sendRequest(request);
!!!13081868.java!!!	sendSearchQuery(in query : String) : Token
    Fling.Builder builder = Fling.newBuilder();
    builder.setText(query);
    builder.setType(FlingType.FLING_SEARCH_QUERY);
    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setFlingMessage(builder);
    return sendRequestWithToken(request);
!!!13081996.java!!!	sendTouchEvent(inout touchEvent : List<TouchDescriptor>) : void
    TouchEvent.Builder builder = TouchEvent.newBuilder();
    Iterator<TouchDescriptor> descriptor = touchEvent.iterator();

    while (descriptor.hasNext()) {
      TouchDescriptor touch = descriptor.next();
      TouchPointer.Builder element = TouchPointer.newBuilder();
      element.setId(touch.getId())
          .setAction(TouchAction.valueOf(touch.getAction()))
          .setX(touch.getX())
          .setY(touch.getY())
          .setPressure(touch.getPressure());
      builder.addTouch(element);
    }

    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setTouchEventMessage(builder);
    sendRequest(request);
!!!13082124.java!!!	getRequestMessageBuilder() : RequestMessage.Builder
    return RequestMessage.newBuilder();
!!!13082252.java!!!	sendRequest(inout builder : RequestMessage.Builder, inout withToken : boolean) : Token
    RemoteMessage.Builder messageBuilder = RemoteMessage.newBuilder().setRequestMessage(builder);
    Token token = null;
    if (withToken) {
      token = nextToken();
      messageBuilder.setSequenceNumber(token.getSequenceNumber());
    }
    mWireAdapter.sendRemoteMessage(messageBuilder.build());
    return token;
!!!13082380.java!!!	sendRequest(inout requestBuilder : RequestMessage.Builder) : void
    sendRequest(requestBuilder, false);
!!!13082508.java!!!	sendRequestWithToken(inout requestBuilder : RequestMessage.Builder) : Token
    return sendRequest(requestBuilder, true);
!!!13082636.java!!!	stop() : void
    mWireAdapter.stop();
!!!13082764.java!!!	nextToken() : Token
    return new Token(mSequenceId.incrementAndGet());
!!!13082892.java!!!	sendSensorList(inout sensorList : List<SensorDescriptor>) : void
    SensorList.Builder builder = SensorList.newBuilder();
    Iterator<SensorDescriptor> descriptor = sensorList.iterator();

    for (int i = 0; i < sensorList.size(); ++i) {
      SensorDescriptor sensor = descriptor.next();
      SensorDevice.Builder element = SensorDevice.newBuilder();
      element.setId(sensor.getId())
          .setType(sensor.getType())
          .setRange(sensor.getRange())
          .setResolution(sensor.getResolution())
          .setMinDelay(sensor.getMinDelay())
          .setDescription(sensor.getDescription());
      builder.addSensor(element);
    }

    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setSensorListMessage(builder);
    sendRequest(request);
!!!13083020.java!!!	sendSensorData(in sensorId : int, in timestamp : long, in accuracy : int, inout vector : float) : void
    SensorData.Builder builder = SensorData.newBuilder();
    builder.setSensorId(sensorId);
    if (timestamp >= 0L) {
      builder.setTimestamp(timestamp);
    }
    if (accuracy >= 0) {
      // TODO (ziemowit) we may want to introduce enumeration here
      builder.setAccuracy(SensorAccuracy.valueOf(accuracy));
    }
    if ((vector != null) && (vector.length > 0)) {
      ArrayList<Float> collection = new ArrayList<Float>(vector.length);
      for (int i = 0; i < vector.length; ++i) {
        collection.add(vector[i]);
      }
      builder.addAllVector(collection);
    }

    RequestMessage.Builder request = getRequestMessageBuilder();
    request.setSensorDataMessage(builder);
    sendRequest(request);
