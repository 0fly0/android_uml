class Stub
!!!10566284.java!!!	Stub()
this.attachInterface(this, DESCRIPTOR);
!!!10566412.java!!!	asInterface(inout obj : android.os.IBinder) : IConnectivityManager
if ((obj==null)) {
return null;
}
android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);
if (((iin!=null)&&(iin instanceof android.net.IConnectivityManager))) {
return ((android.net.IConnectivityManager)iin);
}
return new android.net.IConnectivityManager.Stub.Proxy(obj);
!!!10566540.java!!!	asBinder() : android.os.IBinder
return this;
!!!10566668.java!!!	onTransact(in code : int, inout data : android.os.Parcel, inout reply : android.os.Parcel, in flags : int) : boolean
switch (code)
{
case INTERFACE_TRANSACTION:
{
reply.writeString(DESCRIPTOR);
return true;
}
case TRANSACTION_setNetworkPreference:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
this.setNetworkPreference(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_getNetworkPreference:
{
data.enforceInterface(DESCRIPTOR);
int _result = this.getNetworkPreference();
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_getActiveNetworkInfo:
{
data.enforceInterface(DESCRIPTOR);
android.net.NetworkInfo _result = this.getActiveNetworkInfo();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getActiveNetworkInfoForUid:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.net.NetworkInfo _result = this.getActiveNetworkInfoForUid(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getNetworkInfo:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.net.NetworkInfo _result = this.getNetworkInfo(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getAllNetworkInfo:
{
data.enforceInterface(DESCRIPTOR);
android.net.NetworkInfo[] _result = this.getAllNetworkInfo();
reply.writeNoException();
reply.writeTypedArray(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case TRANSACTION_isNetworkSupported:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _result = this.isNetworkSupported(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_getActiveLinkProperties:
{
data.enforceInterface(DESCRIPTOR);
android.net.LinkProperties _result = this.getActiveLinkProperties();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getLinkProperties:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
android.net.LinkProperties _result = this.getLinkProperties(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_getAllNetworkState:
{
data.enforceInterface(DESCRIPTOR);
android.net.NetworkState[] _result = this.getAllNetworkState();
reply.writeNoException();
reply.writeTypedArray(_result, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
return true;
}
case TRANSACTION_getActiveNetworkQuotaInfo:
{
data.enforceInterface(DESCRIPTOR);
android.net.NetworkQuotaInfo _result = this.getActiveNetworkQuotaInfo();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_isActiveNetworkMetered:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isActiveNetworkMetered();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setRadios:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
boolean _result = this.setRadios(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setRadio:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _arg1;
_arg1 = (0!=data.readInt());
boolean _result = this.setRadio(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_startUsingNetworkFeature:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String _arg1;
_arg1 = data.readString();
android.os.IBinder _arg2;
_arg2 = data.readStrongBinder();
int _result = this.startUsingNetworkFeature(_arg0, _arg1, _arg2);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_stopUsingNetworkFeature:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
java.lang.String _arg1;
_arg1 = data.readString();
int _result = this.stopUsingNetworkFeature(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_requestRouteToHost:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
boolean _result = this.requestRouteToHost(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_requestRouteToHostAddress:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
byte[] _arg1;
_arg1 = data.createByteArray();
boolean _result = this.requestRouteToHostAddress(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_getMobileDataEnabled:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.getMobileDataEnabled();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_setMobileDataEnabled:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
this.setMobileDataEnabled(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_setPolicyDataEnable:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _arg1;
_arg1 = (0!=data.readInt());
this.setPolicyDataEnable(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_tether:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _result = this.tether(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_untether:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _result = this.untether(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_getLastTetherError:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
int _result = this.getLastTetherError(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_isTetheringSupported:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.isTetheringSupported();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_getTetherableIfaces:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _result = this.getTetherableIfaces();
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_getTetheredIfaces:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _result = this.getTetheredIfaces();
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_getTetheredIfacePairs:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _result = this.getTetheredIfacePairs();
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_getTetheringErroredIfaces:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _result = this.getTetheringErroredIfaces();
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_getTetherableUsbRegexs:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _result = this.getTetherableUsbRegexs();
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_getTetherableWifiRegexs:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _result = this.getTetherableWifiRegexs();
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_getTetherableBluetoothRegexs:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String[] _result = this.getTetherableBluetoothRegexs();
reply.writeNoException();
reply.writeStringArray(_result);
return true;
}
case TRANSACTION_setUsbTethering:
{
data.enforceInterface(DESCRIPTOR);
boolean _arg0;
_arg0 = (0!=data.readInt());
int _result = this.setUsbTethering(_arg0);
reply.writeNoException();
reply.writeInt(_result);
return true;
}
case TRANSACTION_requestNetworkTransitionWakelock:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
this.requestNetworkTransitionWakelock(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_reportInetCondition:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
int _arg1;
_arg1 = data.readInt();
this.reportInetCondition(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_getGlobalProxy:
{
data.enforceInterface(DESCRIPTOR);
android.net.ProxyProperties _result = this.getGlobalProxy();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_setGlobalProxy:
{
data.enforceInterface(DESCRIPTOR);
android.net.ProxyProperties _arg0;
if ((0!=data.readInt())) {
_arg0 = android.net.ProxyProperties.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
this.setGlobalProxy(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_getProxy:
{
data.enforceInterface(DESCRIPTOR);
android.net.ProxyProperties _result = this.getProxy();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_setDataDependency:
{
data.enforceInterface(DESCRIPTOR);
int _arg0;
_arg0 = data.readInt();
boolean _arg1;
_arg1 = (0!=data.readInt());
this.setDataDependency(_arg0, _arg1);
reply.writeNoException();
return true;
}
case TRANSACTION_protectVpn:
{
data.enforceInterface(DESCRIPTOR);
android.os.ParcelFileDescriptor _arg0;
if ((0!=data.readInt())) {
_arg0 = android.os.ParcelFileDescriptor.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
boolean _result = this.protectVpn(_arg0);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_prepareVpn:
{
data.enforceInterface(DESCRIPTOR);
java.lang.String _arg0;
_arg0 = data.readString();
java.lang.String _arg1;
_arg1 = data.readString();
boolean _result = this.prepareVpn(_arg0, _arg1);
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_establishVpn:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.net.VpnConfig _arg0;
if ((0!=data.readInt())) {
_arg0 = com.android.internal.net.VpnConfig.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
android.os.ParcelFileDescriptor _result = this.establishVpn(_arg0);
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_startLegacyVpn:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.net.VpnProfile _arg0;
if ((0!=data.readInt())) {
_arg0 = com.android.internal.net.VpnProfile.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
this.startLegacyVpn(_arg0);
reply.writeNoException();
return true;
}
case TRANSACTION_getLegacyVpnInfo:
{
data.enforceInterface(DESCRIPTOR);
com.android.internal.net.LegacyVpnInfo _result = this.getLegacyVpnInfo();
reply.writeNoException();
if ((_result!=null)) {
reply.writeInt(1);
_result.writeToParcel(reply, android.os.Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
else {
reply.writeInt(0);
}
return true;
}
case TRANSACTION_updateLockdownVpn:
{
data.enforceInterface(DESCRIPTOR);
boolean _result = this.updateLockdownVpn();
reply.writeNoException();
reply.writeInt(((_result)?(1):(0)));
return true;
}
case TRANSACTION_captivePortalCheckComplete:
{
data.enforceInterface(DESCRIPTOR);
android.net.NetworkInfo _arg0;
if ((0!=data.readInt())) {
_arg0 = android.net.NetworkInfo.CREATOR.createFromParcel(data);
}
else {
_arg0 = null;
}
this.captivePortalCheckComplete(_arg0);
reply.writeNoException();
return true;
}
}
return super.onTransact(code, data, reply, flags);
