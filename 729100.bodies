class Binder
!!!2470412.java!!!	getCallingUserHandle() : UserHandle
        return new UserHandle(UserHandle.getUserId(getCallingUid()));
!!!2471308.java!!!	Binder()
        init();

        if (FIND_POTENTIAL_LEAKS) {
            final Class<? extends Binder> klass = getClass();
            if ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &&
                    (klass.getModifiers() & Modifier.STATIC) == 0) {
                Log.w(TAG, "The following Binder class should be static or leaks might occur: " +
                    klass.getCanonicalName());
            }
        }
!!!2471436.java!!!	attachInterface(inout owner : IInterface, in descriptor : String) : void
        mOwner = owner;
        mDescriptor = descriptor;
!!!2471564.java!!!	getInterfaceDescriptor() : String
        return mDescriptor;
!!!2471692.java!!!	pingBinder() : boolean
        return true;
!!!2471820.java!!!	isBinderAlive() : boolean
        return true;
!!!2471948.java!!!	queryLocalInterface(in descriptor : String) : IInterface
        if (mDescriptor.equals(descriptor)) {
            return mOwner;
        }
        return null;
!!!2472076.java!!!	onTransact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
        if (code == INTERFACE_TRANSACTION) {
            reply.writeString(getInterfaceDescriptor());
            return true;
        } else if (code == DUMP_TRANSACTION) {
            ParcelFileDescriptor fd = data.readFileDescriptor();
            String[] args = data.readStringArray();
            if (fd != null) {
                try {
                    dump(fd.getFileDescriptor(), args);
                } finally {
                    try {
                        fd.close();
                    } catch (IOException e) {
                        // swallowed, not propagated back to the caller
                    }
                }
            }
            // Write the StrictMode header.
            if (reply != null) {
                reply.writeNoException();
            } else {
                StrictMode.clearGatheredViolations();
            }
            return true;
        }
        return false;
!!!2472204.java!!!	dump(inout fd : FileDescriptor, inout args : String) : void
        FileOutputStream fout = new FileOutputStream(fd);
        PrintWriter pw = new PrintWriter(fout);
        try {
            dump(fd, pw, args);
        } finally {
            pw.flush();
        }
!!!2472332.java!!!	dumpAsync(in fd : FileDescriptor, in args : String) : void
        final FileOutputStream fout = new FileOutputStream(fd);
        final PrintWriter pw = new PrintWriter(fout);
        Thread thr = new Thread("Binder.dumpAsync") {
            public void run() {
                try {
                    dump(fd, pw, args);
                } finally {
                    pw.flush();
                }
            }
        };
        thr.start();
!!!2472588.java!!!	transact(in code : int, inout data : Parcel, inout reply : Parcel, in flags : int) : boolean
        if (false) Log.v("Binder", "Transact: " + code + " to " + this);
        if (data != null) {
            data.setDataPosition(0);
        }
        boolean r = onTransact(code, data, reply, flags);
        if (reply != null) {
            reply.setDataPosition(0);
        }
        return r;
!!!2472844.java!!!	unlinkToDeath(inout recipient : DeathRecipient, in flags : int) : boolean
        return true;
!!!2472972.java!!!	finalize() : void
        try {
            destroy();
        } finally {
            super.finalize();
        }
!!!2473356.java!!!	execTransact(in code : int, in dataObj : int, in replyObj : int, in flags : int) : boolean
        Parcel data = Parcel.obtain(dataObj);
        Parcel reply = Parcel.obtain(replyObj);
        // theoretically, we should call transact, which will call onTransact,
        // but all that does is rewind it, and we just got these from an IPC,
        // so we'll just call it directly.
        boolean res;
        try {
            res = onTransact(code, data, reply, flags);
        } catch (RemoteException e) {
            reply.setDataPosition(0);
            reply.writeException(e);
            res = true;
        } catch (RuntimeException e) {
            reply.setDataPosition(0);
            reply.writeException(e);
            res = true;
        } catch (OutOfMemoryError e) {
            RuntimeException re = new RuntimeException("Out of memory", e);
            reply.setDataPosition(0);
            reply.writeException(re);
            res = true;
        }
        reply.recycle();
        data.recycle();
        return res;
