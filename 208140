format 74
"text" // framework::base::core::java::android::icu::text
  revision 2
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/jellybean/framework/base/icu4j/java/android/icu/text/"
  java_package "android.icu.text"
  classview 187788 "text"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 1191436 "ArabicShaping"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Shape Arabic text on a character basis.

<p>ArabicShaping performs basic operations for \"shaping\" Arabic text. It is most
useful for use with legacy data formats and legacy display technology
(simple terminals). All operations are performed on Unicode characters.</p>

<p>Text-based shaping means that some character code points in the text are
replaced by others depending on the context. It transforms one kind of text
into another. In comparison, modern displays for Arabic text select
appropriate, context-dependent font glyphs for each text element, which means
that they transform text into a glyph vector.</p>

<p>Text transformations are necessary when modern display technology is not
available or when text needs to be transformed to or from legacy formats that
use \"shaped\" characters. Since the Arabic script is cursive, connecting
adjacent letters to each other, computers select images for each letter based
on the surrounding letters. This usually results in four images per Arabic
letter: initial, middle, final, and isolated forms. In Unicode, on the other
hand, letters are normally stored abstract, and a display system is expected
to select the necessary glyphs. (This makes searching and other text
processing easier because the same letter has only one code.) It is possible
to mimic this with text transformations because there are characters in
Unicode that are rendered as letters with a specific shape
(or cursive connectivity). They were included for interoperability with
legacy systems and codepages, and for unsophisticated display systems.</p>

<p>A second kind of text transformations is supported for Arabic digits:
For compatibility with legacy codepages that only include European digits,
it is possible to replace one set of digits by another, changing the
character code points. These operations can be performed for either
Arabic-Indic Digits (U+0660...U+0669) or Eastern (Extended) Arabic-Indic
digits (U+06f0...U+06f9).</p>

<p>Some replacements may result in more or fewer characters (code points).
By default, this means that the destination buffer may receive text with a
length different from the source length. Some legacy systems rely on the
length of the text to be constant. They expect extra spaces to be added
or consumed either next to the affected character or at the end of the
text.</p>
@stable ICU 2.0

@hide"
      attribute 4208012 "options"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4208140 "isLogical"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " convenience"
      end

      attribute 4208268 "spacesRelativeToTextBeginEnd"
	private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4208396 "tailChar"
	private explicit_type "char"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 2440204 // SHAPER (<unidirectional association>)
	relation 2440204 --->
	  a role_name "SHAPER" init_value " new ArabicShaping(
            ArabicShaping.TEXT_DIRECTION_LOGICAL |
            ArabicShaping.LENGTH_FIXED_SPACES_NEAR |
            ArabicShaping.LETTERS_SHAPE |
            ArabicShaping.DIGITS_NOOP)" class_relation const_relation public
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 2440204 // SHAPER (<unidirectional association>)
	  b parent class_ref 1191436 // ArabicShaping
      end

      operation 6640652 "shape"
	public explicit_return_type "int"
	nparams 6
	  param inout name "source" explicit_type "char"
	  param in name "sourceStart" explicit_type "int"
	  param in name "sourceLength" explicit_type "int"
	  param inout name "dest" explicit_type "char"
	  param in name "destStart" explicit_type "int"
	  param in name "destSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 1191564 // ArabicShapingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a range of text in the source array, putting the result
into a range of text in the destination array, and return the number
of characters written.

@param source An array containing the input text
@param sourceStart The start of the range of text to convert
@param sourceLength The length of the range of text to convert
@param dest The destination array that will receive the result.
  It may be <code>NULL</code> only if  <code>destSize</code> is 0.
@param destStart The start of the range of the destination buffer to use.
@param destSize The size (capacity) of the destination buffer.
  If <code>destSize</code> is 0, then no output is produced,
  but the necessary buffer size is returned (\"preflighting\").  This
  does not validate the text against the options, for example,
  if letters are being unshaped, and spaces are being consumed
  following lamalef, this will not detect a lamalef without a
  corresponding space.  An error will be thrown when the actual
  conversion is attempted.
@return The number of chars written to the destination buffer.
  If an error occurs, then no output was written, or it may be
  incomplete.
@throws ArabicShapingException if the text cannot be converted according to the options.
@stable ICU 2.0"
      end

      class 1191564 "ArabicShapingException"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 6645900 "ArabicShapingException"
	  package explicit_return_type ""
	  nparams 1
	    param in name "msg" explicit_type "String"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 6640780 "shape"
	public explicit_return_type "void"
	nparams 3
	  param inout name "source" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 1191564 // ArabicShapingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a range of text in place.  This may only be used if the Length option
does not grow or shrink the text.

@param source An array containing the input text
@param start The start of the range of text to convert
@param length The length of the range of text to convert
@throws ArabicShapingException if the text cannot be converted according to the options.
@stable ICU 2.0"
      end

      operation 6640908 "shape"
	public explicit_return_type "String"
	nparams 1
	  param in name "text" explicit_type "String"
	nexceptions 1
	  exception class_ref 1191564 // ArabicShapingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Convert a string, returning the new string.

@param text the string to convert
@return the converted string
@throws ArabicShapingException if the string cannot be converted according to the options.
@stable ICU 2.0"
      end

      operation 6641036 "ArabicShaping"
	public explicit_return_type ""
	nparams 1
	  param in name "options" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Construct ArabicShaping using the options flags.
The flags are as follows:<br>
'LENGTH' flags control whether the text can change size, and if not,
how to maintain the size of the text when LamAlef ligatures are
formed or broken.<br>
'TEXT_DIRECTION' flags control whether the text is read and written
in visual order or in logical order.<br>
'LETTERS_SHAPE' flags control whether conversion is to or from
presentation forms.<br>
'DIGITS' flags control whether digits are shaped, and whether from
European to Arabic-Indic or vice-versa.<br>
'DIGIT_TYPE' flags control whether standard or extended Arabic-Indic
digits are used when performing digit conversion.
@stable ICU 2.0"
      end

      attribute 4208524 "SEEN_TWOCELL_NEAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x200000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Seen Tail options 

Memory option: the result must have the same length as the source.
Shaping mode: The SEEN family character will expand into two characters using space near
              the SEEN family character(i.e. the space after the character).
              if there are no spaces found, ArabicShapingException will be thrown

De-shaping mode: Any Seen character followed by Tail character will be
                 replaced by one cell Seen and a space will replace the Tail.
Affects: Seen options
"
      end

      attribute 4208652 "SEEN_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x700000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit mask for Seen memory options. "
      end

      attribute 4208780 "YEHHAMZA_TWOCELL_NEAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x1000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " YehHamza options 

Memory option: the result must have the same length as the source.
Shaping mode: The YEHHAMZA character will expand into two characters using space near it
             (i.e. the space after the character)
              if there are no spaces found, ArabicShapingException will be thrown

De-shaping mode: Any Yeh (final or isolated) character followed by Hamza character will be
                 replaced by one cell YehHamza and space will replace the Hamza.
Affects: YehHamza options
"
      end

      attribute 4208908 "YEHHAMZA_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x3800000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit mask for YehHamza memory options. "
      end

      attribute 4209036 "TASHKEEL_BEGIN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x40000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " New Tashkeel options 

Memory option: the result must have the same length as the source.
Shaping mode: Tashkeel characters will be replaced by spaces.
              Spaces will be placed at beginning of the buffer

De-shaping mode: N/A
Affects: Tashkeel options
"
      end

      attribute 4209164 "TASHKEEL_END"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x60000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: the result must have the same length as the source.
Shaping mode: Tashkeel characters will be replaced by spaces.
              Spaces will be placed at end of the buffer

De-shaping mode: N/A
Affects: Tashkeel options
"
      end

      attribute 4209292 "TASHKEEL_RESIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x80000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: allow the result to have a different length than the source.
Shaping mode: Tashkeel characters will be removed, buffer length will shrink.
De-shaping mode: N/A

Affects: Tashkeel options
"
      end

      attribute 4209420 "TASHKEEL_REPLACE_BY_TATWEEL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xC0000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: the result must have the same length as the source.
Shaping mode: Tashkeel characters will be replaced by Tatweel if it is connected to adjacent
              characters (i.e. shaped on Tatweel) or replaced by space if it is not connected.

De-shaping mode: N/A
Affects: YehHamza options
"
      end

      attribute 4209548 "TASHKEEL_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xE0000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit mask for Tashkeel replacement with Space or Tatweel memory options. "
      end

      attribute 4209676 "SPACES_RELATIVE_TO_TEXT_BEGIN_END"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Space location Control options 

This option effects the meaning of BEGIN and END options. if this option is not used the default
for BEGIN and END will be as following:
The Default (for both Visual LTR, Visual RTL and Logical Text)
          1. BEGIN always refers to the start address of physical memory.
          2. END always refers to the end address of physical memory.

If this option is used it will swap the meaning of BEGIN and END only for Visual LTR text.

The affect on BEGIN and END Memory Options will be as following:
   A. BEGIN For Visual LTR text: This will be the beginning (right side) of the visual text
      (corresponding to the physical memory address end, same as END in default behavior)
   B. BEGIN For Logical text: Same as BEGIN in default behavior.
   C. END For Visual LTR text: This will be the end (left side) of the visual text. (corresponding to
     the physical memory address beginning, same as BEGIN in default behavior)
   D. END For Logical text: Same as END in default behavior.
Affects: All LamAlef BEGIN, END and AUTO options.
"
      end

      attribute 4209804 "SPACES_RELATIVE_TO_TEXT_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x4000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit mask for swapping BEGIN and END for Visual LTR text "
      end

      attribute 4209932 "SHAPE_TAIL_NEW_UNICODE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If this option is used, shaping will use the new Unicode code point for TAIL (i.e. 0xFE73).
If this option is not specified (Default), old unofficial Unicode TAIL code point is used (i.e. 0x200B)
De-shaping will not use this option as it will always search for both the new Unicode code point for the
TAIL (i.e. 0xFE73) or the old unofficial Unicode TAIL code point (i.e. 0x200B) and de-shape the
Seen-Family letter accordingly.

Shaping Mode: Only shaping.
De-shaping Mode: N/A.
Affects: All Seen options
"
      end

      attribute 4210060 "SHAPE_TAIL_TYPE_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x8000000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit mask for new Unicode Tail option "
      end

      attribute 4210188 "LENGTH_GROW_SHRINK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: allow the result to have a different length than the source.
@stable ICU 2.0
"
      end

      attribute 4210316 "LAMALEF_RESIZE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: allow the result to have a different length than the source.
Affects: LamAlef options
This option is an alias to LENGTH_GROW_SHRINK
"
      end

      attribute 4210444 "LENGTH_FIXED_SPACES_NEAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: the result must have the same length as the source.
If more room is necessary, then try to consume spaces next to modified characters.
@stable ICU 2.0
"
      end

      attribute 4210572 "LAMALEF_NEAR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1 "
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: the result must have the same length as the source.
If more room is necessary, then try to consume spaces next to modified characters.
Affects: LamAlef options
This option is an alias to LENGTH_FIXED_SPACES_NEAR
"
      end

      attribute 4210700 "LENGTH_FIXED_SPACES_AT_END"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: the result must have the same length as the source.
If more room is necessary, then try to consume spaces at the end of the text.
@stable ICU 2.0
"
      end

      attribute 4210828 "LAMALEF_END"
	class_attribute const_attribute public explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: the result must have the same length as the source.
If more room is necessary, then try to consume spaces at the end of the text.
Affects: LamAlef options
This option is an alias to LENGTH_FIXED_SPACES_AT_END
"
      end

      attribute 4210956 "LENGTH_FIXED_SPACES_AT_BEGINNING"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: the result must have the same length as the source.
If more room is necessary, then try to consume spaces at the beginning of the text.
@stable ICU 2.0
"
      end

      attribute 4211084 "LAMALEF_BEGIN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: the result must have the same length as the source.
If more room is necessary, then try to consume spaces at the beginning of the text.
Affects: LamAlef options
This option is an alias to LENGTH_FIXED_SPACES_AT_BEGINNING
"
      end

      attribute 4211212 "LAMALEF_AUTO"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Memory option: the result must have the same length as the source.
Shaping Mode: For each LAMALEF character found, expand LAMALEF using space at end.
              If there is no space at end, use spaces at beginning of the buffer. If there
              is no space at beginning of the buffer, use spaces at the near (i.e. the space
              after the LAMALEF character).

Deshaping Mode: Perform the same function as the flag equals LAMALEF_END.
Affects: LamAlef options
"
      end

      attribute 4211340 "LENGTH_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10003"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for memory options.
@stable ICU 2.0
"
      end

      attribute 4211468 "LAMALEF_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10003"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Bit mask for LamAlef memory options. "
      end

      attribute 4211596 "TEXT_DIRECTION_LOGICAL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Direction indicator: the source is in logical (keyboard) order.
@stable ICU 2.0
"
      end

      attribute 4211724 "TEXT_DIRECTION_VISUAL_RTL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Direction indicator:the source is in visual RTL order,
the rightmost displayed character stored first.
This option is an alias to U_SHAPE_TEXT_DIRECTION_LOGICAL
"
      end

      attribute 4211852 "TEXT_DIRECTION_VISUAL_LTR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Direction indicator: the source is in visual (display) order, that is,
the leftmost displayed character is stored first.
@stable ICU 2.0
"
      end

      attribute 4211980 "TEXT_DIRECTION_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for direction indicators.
@stable ICU 2.0
"
      end

      attribute 4212108 "LETTERS_NOOP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Letter shaping option: do not perform letter shaping.
@stable ICU 2.0
"
      end

      attribute 4212236 "LETTERS_SHAPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Letter shaping option: replace normative letter characters in the U+0600 (Arabic) block,
by shaped ones in the U+FE70 (Presentation Forms B) block. Performs Lam-Alef ligature
substitution.
@stable ICU 2.0
"
      end

      attribute 4212364 "LETTERS_UNSHAPE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x10"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Letter shaping option: replace shaped letter characters in the U+FE70 (Presentation Forms B) block
by normative ones in the U+0600 (Arabic) block.  Converts Lam-Alef ligatures to pairs of Lam and
Alef characters, consuming spaces if required.
@stable ICU 2.0
"
      end

      attribute 4212492 "LETTERS_SHAPE_TASHKEEL_ISOLATED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x18"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Letter shaping option: replace normative letter characters in the U+0600 (Arabic) block,
except for the TASHKEEL characters at U+064B...U+0652, by shaped ones in the U+Fe70
(Presentation Forms B) block.  The TASHKEEL characters will always be converted to
the isolated forms rather than to their correct shape.
@stable ICU 2.0
"
      end

      attribute 4212620 "LETTERS_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x18"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for letter shaping options.
@stable ICU 2.0
"
      end

      attribute 4212748 "DIGITS_NOOP"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Digit shaping option: do not perform digit shaping.
@stable ICU 2.0
"
      end

      attribute 4212876 "DIGITS_EN2AN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x20"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Digit shaping option: Replace European digits (U+0030...U+0039) by Arabic-Indic digits.
@stable ICU 2.0
"
      end

      attribute 4213004 "DIGITS_AN2EN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x40"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Digit shaping option: Replace Arabic-Indic digits by European digits (U+0030...U+0039).
@stable ICU 2.0
"
      end

      attribute 4213132 "DIGITS_EN2AN_INIT_LR"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x60"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Digit shaping option:
Replace European digits (U+0030...U+0039) by Arabic-Indic digits
if the most recent strongly directional character
is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
The initial state at the start of the text is assumed to be not an Arabic,
letter, so European digits at the start of the text will not change.
Compare to DIGITS_ALEN2AN_INIT_AL.
@stable ICU 2.0
"
      end

      attribute 4213260 "DIGITS_EN2AN_INIT_AL"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x80"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Digit shaping option:
Replace European digits (U+0030...U+0039) by Arabic-Indic digits
if the most recent strongly directional character
is an Arabic letter (its Bidi direction value is RIGHT_TO_LEFT_ARABIC).
The initial state at the start of the text is assumed to be an Arabic,
letter, so European digits at the start of the text will change.
Compare to DIGITS_ALEN2AN_INT_LR.
@stable ICU 2.0
"
      end

      attribute 4213388 "DIGITS_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0xe0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Not a valid option value. 
private static final int DIGITS_RESERVED = 0xa0;

Bit mask for digit shaping options.
@stable ICU 2.0
"
      end

      attribute 4213516 "DIGIT_TYPE_AN"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Digit type option: Use Arabic-Indic digits (U+0660...U+0669).
@stable ICU 2.0
"
      end

      attribute 4213644 "DIGIT_TYPE_AN_EXTENDED"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Digit type option: Use Eastern (Extended) Arabic-Indic digits (U+06f0...U+06f9).
@stable ICU 2.0
"
      end

      attribute 4213772 "DIGIT_TYPE_MASK"
	class_attribute const_attribute public explicit_type "int"
	init_value " 0x0100"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Bit mask for digit type options.
@stable ICU 2.0

 0x3f00?"
      end

      attribute 4213900 "HAMZAFE_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\ufe80'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "some constants
"
      end

      attribute 4214028 "HAMZA06_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\u0621'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4214156 "YEH_HAMZA_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\u0626'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4214284 "YEH_HAMZAFE_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\uFE89'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4214412 "LAMALEF_SPACE_SUB"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\uffff'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4214540 "TASHKEEL_SPACE_SUB"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\ufffe'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4214668 "LAM_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\u0644'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4214796 "SPACE_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\u0020'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4214924 "SPACE_CHAR_FOR_LAMALEF"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\ufeff'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " XXX: tweak for TextLine use"
      end

      attribute 4215052 "SHADDA_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\uFE7C'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4215180 "TATWEEL_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\u0640'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4215308 "SHADDA_TATWEEL_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\uFE7D'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4215436 "NEW_TAIL_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\uFE73'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4215564 "OLD_TAIL_CHAR"
	class_attribute const_attribute private explicit_type "char"
	init_value " '\\u200B'"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4215692 "SHAPE_MODE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4215820 "DESHAPE_MODE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6641164 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "rhs" explicit_type "Object"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@stable ICU 2.0"
      end

      operation 6641292 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@stable ICU 2.0

/CLOVER:OFF"
      end

      operation 6641420 "toString"
	public explicit_return_type "String"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@stable ICU 2.0"
      end

      attribute 4215948 "IRRELEVANT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "/CLOVER:ON

 ported api
"
      end

      attribute 4216076 "LAMTYPE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4216204 "ALEFTYPE"
	class_attribute const_attribute private explicit_type "int"
	init_value " 32"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4216332 "LINKR"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4216460 "LINKL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4216588 "LINK_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4216716 "irrelevantPos"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        0x0, 0x2, 0x4, 0x6, 0x8, 0xA, 0xC, 0xE
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4216844 "tailFamilyIsolatedFinal"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        /* FEB1 */ 1,
        /* FEB2 */ 1,
        /* FEB3 */ 0,
        /* FEB4 */ 0,
        /* FEB5 */ 1,
        /* FEB6 */ 1,
        /* FEB7 */ 0,
        /* FEB8 */ 0,
        /* FEB9 */ 1,
        /* FEBA */ 1,
        /* FEBB */ 0,
        /* FEBC */ 0,
        /* FEBD */ 1,
        /* FEBE */ 1
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "private static final char convertLamAlef[] =  {
'\\u0622', // FEF5
'\\u0622', // FEF6
'\\u0623', // FEF7
'\\u0623', // FEF8
'\\u0625', // FEF9
'\\u0625', // FEFA
'\\u0627', // FEFB
'\\u0627'  // FEFC
};
"
      end

      attribute 4216972 "tashkeelMedial"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        /* FE70 */ 0,
        /* FE71 */ 1,
        /* FE72 */ 0,
        /* FE73 */ 0,
        /* FE74 */ 0,
        /* FE75 */ 0,
        /* FE76 */ 0,
        /* FE77 */ 1,
        /* FE78 */ 0,
        /* FE79 */ 1,
        /* FE7A */ 0,
        /* FE7B */ 1,
        /* FE7C */ 0,
        /* FE7D */ 1,
        /* FE7E */ 0,
        /* FE7F */ 1
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4217100 "yehHamzaToYeh"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value "
    {
    /* isolated*/ 0xFEEF,
    /* final   */ 0xFEF0
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4217228 "convertNormalizedLamAlef"
	class_attribute const_attribute private explicit_type "char"
	multiplicity "[]"
	init_value " {
        '\\u0622', // 065C
        '\\u0623', // 065D
        '\\u0625', // 065E
        '\\u0627', // 065F
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4217356 "araLink"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        1           + 32 + 256 * 0x11,  /*0x0622*/
        1           + 32 + 256 * 0x13,  /*0x0623*/
        1                + 256 * 0x15,  /*0x0624*/
        1           + 32 + 256 * 0x17,  /*0x0625*/
        1 + 2            + 256 * 0x19,  /*0x0626*/
        1           + 32 + 256 * 0x1D,  /*0x0627*/
        1 + 2            + 256 * 0x1F,  /*0x0628*/
        1                + 256 * 0x23,  /*0x0629*/
        1 + 2            + 256 * 0x25,  /*0x062A*/
        1 + 2            + 256 * 0x29,  /*0x062B*/
        1 + 2            + 256 * 0x2D,  /*0x062C*/
        1 + 2            + 256 * 0x31,  /*0x062D*/
        1 + 2            + 256 * 0x35,  /*0x062E*/
        1                + 256 * 0x39,  /*0x062F*/
        1                + 256 * 0x3B,  /*0x0630*/
        1                + 256 * 0x3D,  /*0x0631*/
        1                + 256 * 0x3F,  /*0x0632*/
        1 + 2            + 256 * 0x41,  /*0x0633*/
        1 + 2            + 256 * 0x45,  /*0x0634*/
        1 + 2            + 256 * 0x49,  /*0x0635*/
        1 + 2            + 256 * 0x4D,  /*0x0636*/
        1 + 2            + 256 * 0x51,  /*0x0637*/
        1 + 2            + 256 * 0x55,  /*0x0638*/
        1 + 2            + 256 * 0x59,  /*0x0639*/
        1 + 2            + 256 * 0x5D,  /*0x063A*/
        0, 0, 0, 0, 0,                  /*0x063B-0x063F*/
        1 + 2,                          /*0x0640*/
        1 + 2            + 256 * 0x61,  /*0x0641*/
        1 + 2            + 256 * 0x65,  /*0x0642*/
        1 + 2            + 256 * 0x69,  /*0x0643*/
        1 + 2       + 16 + 256 * 0x6D,  /*0x0644*/
        1 + 2            + 256 * 0x71,  /*0x0645*/
        1 + 2            + 256 * 0x75,  /*0x0646*/
        1 + 2            + 256 * 0x79,  /*0x0647*/
        1                + 256 * 0x7D,  /*0x0648*/
        1                + 256 * 0x7F,  /*0x0649*/
        1 + 2            + 256 * 0x81,  /*0x064A*/
        4, 4, 4, 4,                     /*0x064B-0x064E*/
        4, 4, 4, 4,                     /*0x064F-0x0652*/
        4, 4, 4, 0, 0,                  /*0x0653-0x0657*/
        0, 0, 0, 0,                     /*0x0658-0x065B*/
        1                + 256 * 0x85,  /*0x065C*/
        1                + 256 * 0x87,  /*0x065D*/
        1                + 256 * 0x89,  /*0x065E*/
        1                + 256 * 0x8B,  /*0x065F*/
        0, 0, 0, 0, 0,                  /*0x0660-0x0664*/
        0, 0, 0, 0, 0,                  /*0x0665-0x0669*/
        0, 0, 0, 0, 0, 0,               /*0x066A-0x066F*/
        4,                              /*0x0670*/
        0,                              /*0x0671*/
        1           + 32,               /*0x0672*/
        1           + 32,               /*0x0673*/
        0,                              /*0x0674*/
        1           + 32,               /*0x0675*/
        1, 1,                           /*0x0676-0x0677*/
        1+2, 1+2, 1+2, 1+2, 1+2, 1+2,   /*0x0678-0x067D*/
        1+2, 1+2, 1+2, 1+2, 1+2, 1+2,   /*0x067E-0x0683*/
        1+2, 1+2, 1+2, 1+2,             /*0x0684-0x0687*/
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   /*0x0688-0x0691*/
        1, 1, 1, 1, 1, 1, 1, 1,         /*0x0692-0x0699*/
        1+2, 1+2, 1+2, 1+2, 1+2, 1+2,   /*0x069A-0x06A3*/
        1+2, 1+2, 1+2, 1+2,             /*0x069A-0x06A3*/
        1+2, 1+2, 1+2, 1+2, 1+2, 1+2,   /*0x06A4-0x06AD*/
        1+2, 1+2, 1+2, 1+2,             /*0x06A4-0x06AD*/
        1+2, 1+2, 1+2, 1+2, 1+2, 1+2,   /*0x06AE-0x06B7*/
        1+2, 1+2, 1+2, 1+2,             /*0x06AE-0x06B7*/
        1+2, 1+2, 1+2, 1+2, 1+2, 1+2,   /*0x06B8-0x06BF*/
        1+2, 1+2,                       /*0x06B8-0x06BF*/
        1,                              /*0x06C0*/
        1+2,                            /*0x06C1*/
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1,   /*0x06C2-0x06CB*/
        1+2,                            /*0x06CC*/
        1,                              /*0x06CD*/
        1+2, 1+2, 1+2, 1+2,             /*0x06CE-0x06D1*/
        1, 1                            /*0x06D2-0x06D3*/
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4217484 "presLink"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        1 + 2,                        /*0xFE70*/
        1 + 2,                        /*0xFE71*/
        1 + 2, 0, 1+ 2, 0, 1+ 2,      /*0xFE72-0xFE76*/
        1 + 2,                        /*0xFE77*/
        1+ 2, 1 + 2, 1+2, 1 + 2,      /*0xFE78-0xFE81*/
        1+ 2, 1 + 2, 1+2, 1 + 2,      /*0xFE82-0xFE85*/
        0, 0 + 32, 1 + 32, 0 + 32,    /*0xFE86-0xFE89*/
        1 + 32, 0, 1,  0 + 32,        /*0xFE8A-0xFE8D*/
        1 + 32, 0, 2,  1 + 2,         /*0xFE8E-0xFE91*/
        1, 0 + 32, 1 + 32, 0,         /*0xFE92-0xFE95*/
        2, 1 + 2, 1, 0,               /*0xFE96-0xFE99*/
        1, 0, 2, 1 + 2,               /*0xFE9A-0xFE9D*/
        1, 0, 2, 1 + 2,               /*0xFE9E-0xFEA1*/
        1, 0, 2, 1 + 2,               /*0xFEA2-0xFEA5*/
        1, 0, 2, 1 + 2,               /*0xFEA6-0xFEA9*/
        1, 0, 2, 1 + 2,               /*0xFEAA-0xFEAD*/
        1, 0, 1, 0,                   /*0xFEAE-0xFEB1*/
        1, 0, 1, 0,                   /*0xFEB2-0xFEB5*/
        1, 0, 2, 1+2,                 /*0xFEB6-0xFEB9*/
        1, 0, 2, 1+2,                 /*0xFEBA-0xFEBD*/
        1, 0, 2, 1+2,                 /*0xFEBE-0xFEC1*/
        1, 0, 2, 1+2,                 /*0xFEC2-0xFEC5*/
        1, 0, 2, 1+2,                 /*0xFEC6-0xFEC9*/
        1, 0, 2, 1+2,                 /*0xFECA-0xFECD*/
        1, 0, 2, 1+2,                 /*0xFECE-0xFED1*/
        1, 0, 2, 1+2,                 /*0xFED2-0xFED5*/
        1, 0, 2, 1+2,                 /*0xFED6-0xFED9*/
        1, 0, 2, 1+2,                 /*0xFEDA-0xFEDD*/
        1, 0, 2, 1+2,                 /*0xFEDE-0xFEE1*/
        1, 0 + 16, 2 + 16, 1 + 2 +16, /*0xFEE2-0xFEE5*/
        1 + 16, 0, 2, 1+2,            /*0xFEE6-0xFEE9*/
        1, 0, 2, 1+2,                 /*0xFEEA-0xFEED*/
        1, 0, 2, 1+2,                 /*0xFEEE-0xFEF1*/
        1, 0, 1, 0,                   /*0xFEF2-0xFEF5*/
        1, 0, 2, 1+2,                 /*0xFEF6-0xFEF9*/
        1, 0, 1, 0,                   /*0xFEFA-0xFEFD*/
        1, 0, 1, 0,
        1
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4217612 "convertFEto06"
	class_attribute private explicit_type "int"
	multiplicity "[]"
	init_value " {
        /***********0******1******2******3******4******5******6******7******8******9******A******B******C******D******E******F***/
        /*FE7*/   0x64B, 0x64B, 0x64C, 0x64C, 0x64D, 0x64D, 0x64E, 0x64E, 0x64F, 0x64F, 0x650, 0x650, 0x651, 0x651, 0x652, 0x652,
        /*FE8*/   0x621, 0x622, 0x622, 0x623, 0x623, 0x624, 0x624, 0x625, 0x625, 0x626, 0x626, 0x626, 0x626, 0x627, 0x627, 0x628,
        /*FE9*/   0x628, 0x628, 0x628, 0x629, 0x629, 0x62A, 0x62A, 0x62A, 0x62A, 0x62B, 0x62B, 0x62B, 0x62B, 0x62C, 0x62C, 0x62C,
        /*FEA*/   0x62C, 0x62D, 0x62D, 0x62D, 0x62D, 0x62E, 0x62E, 0x62E, 0x62E, 0x62F, 0x62F, 0x630, 0x630, 0x631, 0x631, 0x632,
        /*FEB*/   0x632, 0x633, 0x633, 0x633, 0x633, 0x634, 0x634, 0x634, 0x634, 0x635, 0x635, 0x635, 0x635, 0x636, 0x636, 0x636,
        /*FEC*/   0x636, 0x637, 0x637, 0x637, 0x637, 0x638, 0x638, 0x638, 0x638, 0x639, 0x639, 0x639, 0x639, 0x63A, 0x63A, 0x63A,
        /*FED*/   0x63A, 0x641, 0x641, 0x641, 0x641, 0x642, 0x642, 0x642, 0x642, 0x643, 0x643, 0x643, 0x643, 0x644, 0x644, 0x644,
        /*FEE*/   0x644, 0x645, 0x645, 0x645, 0x645, 0x646, 0x646, 0x646, 0x646, 0x647, 0x647, 0x647, 0x647, 0x648, 0x648, 0x649,
        /*FEF*/   0x649, 0x64A, 0x64A, 0x64A, 0x64A, 0x65C, 0x65C, 0x65D, 0x65D, 0x65E, 0x65E, 0x65F, 0x65F
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 4217740 "shapeTable"
	class_attribute const_attribute private explicit_type "int"
	multiplicity "[][][]"
	init_value " {
        { {0,0,0,0}, {0,0,0,0}, {0,1,0,3}, {0,1,0,1} },
        { {0,0,2,2}, {0,0,1,2}, {0,1,1,2}, {0,1,1,3} },
        { {0,0,0,0}, {0,0,0,0}, {0,1,0,3}, {0,1,0,3} },
        { {0,0,1,2}, {0,0,1,2}, {0,1,1,2}, {0,1,1,3} }
    }"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 6641548 "shapeToArabicDigitsWithContext"
	private explicit_return_type "void"
	nparams 5
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "digitBase" explicit_type "char"
	  param inout name "lastStrongWasAL" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This function shapes European digits to Arabic-Indic digits
in-place, writing over the input characters.  Data is in visual
order."
      end

      operation 6641676 "invertBuffer"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "buffer" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : invertBuffer
Function: This function inverts the buffer, it's used
          in case the user specifies the buffer to be
          TEXT_DIRECTION_LOGICAL"
      end

      operation 6641804 "changeLamAlef"
	class_operation private explicit_return_type "char"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : changeLamAlef
Function: Converts the Alef characters into an equivalent
          LamAlef location in the 0x06xx Range, this is an
          intermediate stage in the operation of the program
          later it'll be converted into the 0xFExx LamAlefs
          in the shaping function."
      end

      operation 6641932 "specialChar"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : specialChar
Function: Special Arabic characters need special handling in the shapeUnicode
          function, this function returns 1 or 2 for these special characters"
      end

      operation 6642060 "getLink"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : getLink
Function: Resolves the link between the characters as
          Arabic characters have four forms :
          Isolated, Initial, Middle and Final Form"
      end

      operation 6642188 "countSpacesLeft"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : countSpaces
Function: Counts the number of spaces
          at each end of the logical buffer"
      end

      operation 6642316 "countSpacesRight"
	class_operation private explicit_return_type "int"
	nparams 3
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6642444 "isTashkeelChar"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : isTashkeelChar
Function: Returns true for Tashkeel characters else return false"
      end

      operation 6642572 "isSeenTailFamilyChar"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name     : isSeenTailFamilyChar
Function : returns 1 if the character is a seen family isolated character
          in the FE range otherwise returns 0"
      end

      operation 6642700 "isSeenFamilyChar"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Name     : isSeenFamilyChar
Function : returns 1 if the character is a seen family character in the Unicode
           06 range otherwise returns 0"
      end

      operation 6642828 "isTailChar"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name     : isTailChar
Function : returns true if the character matches one of the tail characters
          (0xfe73 or 0x200b) otherwise returns false"
      end

      operation 6642956 "isAlefMaksouraChar"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name     : isAlefMaksouraChar
Function : returns true if the character is a Alef Maksoura Final or isolated
          otherwise returns false"
      end

      operation 6643084 "isYehHamzaChar"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name     : isYehHamzaChar
Function : returns true if the character is a yehHamza isolated or yehhamza
           final is found otherwise returns false"
      end

      operation 6643212 "isTashkeelCharFE"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name     : isTashkeelCharFE
Function : Returns true for Tashkeel characters in FE range else return false"
      end

      operation 6643340 "isTashkeelOnTatweelChar"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name: isTashkeelOnTatweelChar
Function: Checks if the Tashkeel Character is on Tatweel or not,if the
          Tashkeel on tatweel (FE range), it returns 1 else if the
          Tashkeel with shadda on tatweel (FC range)return 2 otherwise
          returns 0"
      end

      operation 6643468 "isIsolatedTashkeelChar"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name: isIsolatedTashkeelChar
Function: Checks if the Tashkeel Character is in the isolated form
          (i.e. Unicode FE range) returns 1 else if the Tashkeel
          with shadda is in the isolated form (i.e. Unicode FC range)
          returns 1 otherwise returns 0"
      end

      operation 6643596 "isAlefChar"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : isAlefChar
Function: Returns 1 for Alef characters else return 0"
      end

      operation 6643724 "isLamAlefChar"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : isLamAlefChar
Function: Returns true for LamAlef characters else return false"
      end

      operation 6643852 "isNormalizedLamAlefChar"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "ch" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 6643980 "calculateSize"
	private explicit_return_type "int"
	nparams 3
	  param inout name "source" explicit_type "char"
	  param in name "sourceStart" explicit_type "int"
	  param in name "sourceLength" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : calculateSize
Function: This function calculates the destSize to be used in preflighting
          when the destSize is equal to 0"
      end

      operation 6644108 "countSpaceSub"
	class_operation public explicit_return_type "int"
	nparams 3
	  param inout name "dest" explicit_type "char"
	  param in name "length" explicit_type "int"
	  param in name "subChar" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : countSpaceSub
Function: Counts number of times the subChar appears in the array"
      end

      operation 6644236 "shiftArray"
	class_operation public explicit_return_type "void"
	nparams 4
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "e" explicit_type "int"
	  param in name "subChar" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : shiftArray
Function: Shifts characters to replace space sub characters"
      end

      operation 6644364 "flipArray"
	class_operation public explicit_return_type "int"
	nparams 4
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "e" explicit_type "int"
	  param in name "w" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : flipArray
Function: inverts array, so that start becomes end and vice versa"
      end

      operation 6644492 "handleTashkeelWithTatweel"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "dest" explicit_type "char"
	  param in name "sourceLength" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name     : handleTashkeelWithTatweel
Function : Replaces Tashkeel as following:
           Case 1 :if the Tashkeel on tatweel, replace it with Tatweel.
           Case 2 :if the Tashkeel aggregated with Shadda on Tatweel, replace
                  it with Shadda on Tatweel.
           Case 3: if the Tashkeel is isolated replace it with Space.
"
      end

      operation 6644620 "handleGeneratedSpaces"
	private explicit_return_type "int"
	nparams 3
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name     : handleGeneratedSpaces
Function : The shapeUnicode function converts Lam + Alef into LamAlef + space,
          and Tashkeel to space.
          handleGeneratedSpaces function puts these generated spaces
          according to the options the user specifies. LamAlef and Tashkeel
          spaces can be replaced at begin, at end, at near or decrease the
          buffer size.

          There is also Auto option for LamAlef and tashkeel, which will put
          the spaces at end of the buffer (or end of text if the user used
          the option SPACES_RELATIVE_TO_TEXT_BEGIN_END).

          If the text type was visual_LTR and the option
          SPACES_RELATIVE_TO_TEXT_BEGIN_END was selected the END
          option will place the space at the beginning of the buffer and
          BEGIN will place the space at the end of the buffer."
      end

      operation 6644748 "expandCompositCharAtBegin"
	private explicit_return_type "boolean"
	nparams 4
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "lacount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name     :expandCompositCharAtBegin
Function :Expands the LamAlef character to Lam and Alef consuming the required
        space from beginning of the buffer. If the text type was visual_LTR
        and the option SPACES_RELATIVE_TO_TEXT_BEGIN_END was selected
        the spaces will be located at end of buffer.
        If there are no spaces to expand the LamAlef, an exception is thrown."
      end

      operation 6644876 "expandCompositCharAtEnd"
	private explicit_return_type "boolean"
	nparams 4
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "lacount" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name     : expandCompositCharAtEnd
Function : Expands the LamAlef character to Lam and Alef consuming the
          required space from end of the buffer. If the text type was
          Visual LTR and the option SPACES_RELATIVE_TO_TEXT_BEGIN_END
          was used, the spaces will be consumed from begin of buffer. If
          there are no spaces to expand the LamAlef, an exception is thrown."
      end

      operation 6645004 "expandCompositCharAtNear"
	private explicit_return_type "boolean"
	nparams 6
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "yehHamzaOption" explicit_type "int"
	  param in name "seenTailOption" explicit_type "int"
	  param in name "lamAlefOption" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name     : expandCompositCharAtNear
Function : Expands the LamAlef character into Lam + Alef, YehHamza character
          into Yeh + Hamza, SeenFamily character into SeenFamily character
          + Tail, while consuming the space next to the character."
      end

      operation 6645132 "expandCompositChar"
	private explicit_return_type "int"
	nparams 5
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "lacount" explicit_type "int"
	  param in name "shapingMode" explicit_type "int"
	nexceptions 1
	  exception class_ref 1191564 // ArabicShapingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : expandCompositChar
Function: LamAlef needs special handling as the LamAlef is
          one character while expanding it will give two
          characters Lam + Alef, so we need to expand the LamAlef
          in near or far spaces according to the options the user
          specifies or increase the buffer size.
          Dest has enough room for the expansion if we are growing.
          lamalef are normalized to the 'special characters'"
      end

      operation 6645260 "normalize"
	private explicit_return_type "int"
	nparams 3
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Convert the input buffer from FExx Range into 06xx Range
to put all characters into the 06xx range
even the lamalef is converted to the special region in
the 06xx range.  Return the number of lamalef chars found."
      end

      operation 6645388 "deshapeNormalize"
	private explicit_return_type "int"
	nparams 3
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : deshapeNormalize
Function: Convert the input buffer from FExx Range into 06xx Range
          even the lamalef is converted to the special region in the 06xx range.
          According to the options the user enters, all seen family characters
          followed by a tail character are merged to seen tail family character and
          any yeh followed by a hamza character are merged to yehhamza character.
          Method returns the number of lamalef chars found."
      end

      operation 6645516 "shapeUnicode"
	private explicit_return_type "int"
	nparams 5
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "destSize" explicit_type "int"
	  param in name "tashkeelFlag" explicit_type "int"
	nexceptions 1
	  exception class_ref 1191564 // ArabicShapingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : shapeUnicode
Function: Converts an Arabic Unicode buffer in 06xx Range into a shaped
          arabic Unicode buffer in FExx Range"
      end

      operation 6645644 "deShapeUnicode"
	private explicit_return_type "int"
	nparams 4
	  param inout name "dest" explicit_type "char"
	  param in name "start" explicit_type "int"
	  param in name "length" explicit_type "int"
	  param in name "destSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 1191564 // ArabicShapingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Name    : deShapeUnicode
Function: Converts an Arabic Unicode buffer in FExx Range into unshaped
          arabic Unicode buffer in 06xx Range"
      end

      operation 6645772 "internalShape"
	private explicit_return_type "int"
	nparams 6
	  param inout name "source" explicit_type "char"
	  param in name "sourceStart" explicit_type "int"
	  param in name "sourceLength" explicit_type "int"
	  param inout name "dest" explicit_type "char"
	  param in name "destStart" explicit_type "int"
	  param in name "destSize" explicit_type "int"
	nexceptions 1
	  exception class_ref 1191564 // ArabicShapingException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}[] ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end
  end

  deploymentview 182924 "text"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 576268 "ArabicShaping"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 1191436 // ArabicShaping
      end
      comment "******************************************************************************
  Copyright (C) 2001-2009, International Business Machines
  Corporation and others.  All Rights Reserved.
******************************************************************************


Ported with minor modifications from ICU4J 4.2's
com.ibm.icu.text.ArabicShaping class."
    end
  end
end
