class OmxVout
!!!11174924.cpp!!!	OmxVout(in plane_id : OMX_S32)
  mAmpHandle = NULL;
  mAmpState = AMP_LOADED;
  mListener = NULL;
!!!11175180.cpp!!!	connectVideoPort(in comp : AMP_COMPONENT, in port : UINT32) : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  err = AMP_ConnectComp(comp, port, mAmpHandle, 0);
  return static_cast<OMX_ERRORTYPE>(err);
!!!11175308.cpp!!!	disconnectVideoPort(in comp : AMP_COMPONENT, in port : UINT32) : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  err = AMP_DisconnectComp(comp, port, mAmpHandle, 0);
  return static_cast<OMX_ERRORTYPE>(err);
!!!11175436.cpp!!!	connectClockPort(in comp : AMP_COMPONENT, in port : UINT32) : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  OMX_LOGD("comp %p, port %d, connect to clock port", comp, port);
  err = AMP_ConnectComp(comp, port, mAmpHandle, 1);
  return static_cast<OMX_ERRORTYPE>(err);
!!!11175564.cpp!!!	disconnectClockPort(in comp : AMP_COMPONENT, in port : UINT32) : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  err = AMP_DisconnectComp(comp, port, mAmpHandle, 1);
  return static_cast<OMX_ERRORTYPE>(err);
!!!11175692.cpp!!!	createAmpVout() : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_FACTORY factory;
  err = AMP_GetFactory(&factory);
  CHECKAMPERR(err);
  AMP_RPC(err, AMP_FACTORY_CreateComponent, factory, AMP_COMPONENT_VOUT,
      1, &mAmpHandle);
  CHECKAMPERR(err);
  return static_cast<OMX_ERRORTYPE>(err);
!!!11175820.cpp!!!	destroyAmpVout() : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  if (mAmpHandle) {
    AMP_RPC(err, AMP_VOUT_Destroy, mAmpHandle);
    CHECKAMPERR(err);
    AMP_FACTORY_Release(mAmpHandle);
    mAmpHandle = NULL;
  }
  return static_cast<OMX_ERRORTYPE>(err);
!!!11175948.cpp!!!	registerEvent(in event : AMP_EVENT_CODE, in func : AMP_EVENT_CALLBACK, inout userData : VOID) : HRESULT
  HRESULT err = SUCCESS;
  err = AMP_Event_RegisterCallback(mListener, event, func, userData);
  if (!err) {
    AMP_RPC(err, AMP_VOUT_RegisterNotify, mAmpHandle,
        AMP_Event_GetServiceID(mListener), event);
  }
  return err;
!!!11176076.cpp!!!	unRegisterEvent(in event : AMP_EVENT_CODE, in func : AMP_EVENT_CALLBACK) : HRESULT
  HRESULT err = SUCCESS;
  AMP_RPC(err, AMP_VOUT_UnregisterNotify, mAmpHandle,
      AMP_Event_GetServiceID(mListener), event);
  if (!err) {
    err = AMP_Event_UnregisterCallback(mListener, event, func);
  }
  return err;
!!!11176204.cpp!!!	prepare() : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  err = createAmpVout();
  CHECKAMPERR(err);
  AMP_COMPONENT_CONFIG config;
  kdMemset(&config, 0 ,sizeof(config));
  config._d = AMP_COMPONENT_VOUT;
  config._u.pVOUT.uiInputPortNum = 2;
  config._u.pVOUT.uiOutputPortNum = 0;
  if (mVideoPlaneId < 0) {
    OMX_LOGW("Invalid video plane id %d, using 0 by default", mVideoPlaneId);
    mVideoPlaneId = 0;
  }
  config._u.pVOUT.uiPlaneID = mVideoPlaneId;
  AMP_RPC(err, AMP_VOUT_Open, mAmpHandle, &config);

#ifdef ANDROID_A3CE
  // Keep last frame after flush AMP VOUT.
  // TODO: make it an option to OMX IL's users.
  AMP_VOUT_LastFrameAction last_frame_action = AMP_VOUT_REPEATLASTFRAME;
  AMP_RPC(err, AMP_VOUT_SetLastFrameMode, mAmpHandle, last_frame_action);
  OMX_LOGD("Set AMP_VOUT_REPEATLASTFRAME to VOUT to keep last frame.");
#endif

  mListener = AMP_Event_CreateListener(16, 0);
  return static_cast<OMX_ERRORTYPE>(err);
!!!11176332.cpp!!!	preroll() : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  OMX_ERRORTYPE err = OMX_ErrorNone;
  return err;
!!!11176460.cpp!!!	start() : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_RPC(err, AMP_VOUT_SetState, mAmpHandle, AMP_EXECUTING);
  CHECKAMPERR(err);
  mAmpState = AMP_EXECUTING;
  return static_cast<OMX_ERRORTYPE>(err);
!!!11176588.cpp!!!	pause() : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_RPC(err, AMP_VOUT_SetState, mAmpHandle, AMP_PAUSED);
  CHECKAMPERR(err);
  mAmpState = AMP_PAUSED;
  return static_cast<OMX_ERRORTYPE>(err);
!!!11176716.cpp!!!	resume() : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_RPC(err, AMP_VOUT_SetState, mAmpHandle, AMP_EXECUTING);
  CHECKAMPERR(err);
  mAmpState = AMP_EXECUTING;
  return static_cast<OMX_ERRORTYPE>(err);
!!!11176844.cpp!!!	stop() : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_RPC(err, AMP_VOUT_SetState, mAmpHandle, AMP_IDLE);
  CHECKAMPERR(err);
  mAmpState = AMP_IDLE;
  return static_cast<OMX_ERRORTYPE>(err);
!!!11176972.cpp!!!	release() : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  if (mListener) {
    AMP_Event_DestroyListener(mListener);
    mListener = NULL;
  }
  AMP_RPC(err, AMP_VOUT_Close, mAmpHandle);
  CHECKAMPERR(err);
  err = destroyAmpVout();
  CHECKAMPERR(err);
  VOUT_TRACE("Exit");
  return static_cast<OMX_ERRORTYPE>(err);
!!!11177100.cpp!!!	flush() : OMX_ERRORTYPE
  VOUT_TRACE("Enter");
  HRESULT err = SUCCESS;
  AMP_RPC(err, AMP_VOUT_SetState, mAmpHandle, AMP_IDLE);
  CHECKAMPERR(err);
  AMP_RPC(err, AMP_VOUT_SetState, mAmpHandle, mAmpState);
  VOUT_TRACE("EXIT");
  return static_cast<OMX_ERRORTYPE>(err);
