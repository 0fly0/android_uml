class PipeReader
!!!338444.cpp!!!	PipeReader(inout pipe : Pipe)
    android_atomic_inc(&pipe.mReaders);
!!!338572.cpp!!!	~PipeReader()
    int32_t readers = android_atomic_dec(&mPipe.mReaders);
    ALOG_ASSERT(readers > 0);
!!!338956.cpp!!!	availableToRead() : ssize_t
    if (CC_UNLIKELY(!mNegotiated)) {
        return NEGOTIATE;
    }
    int32_t rear = android_atomic_acquire_load(&mPipe.mRear);
    // read() is not multi-thread safe w.r.t. itself, so no mutex or atomic op needed to read mFront
    size_t avail = rear - mFront;
    if (CC_UNLIKELY(avail > mPipe.mMaxFrames)) {
        // Discard 1/16 of the most recent data in pipe to avoid another overrun immediately
        int32_t oldFront = mFront;
        mFront = rear - mPipe.mMaxFrames + (mPipe.mMaxFrames >> 4);
        mFramesOverrun += (size_t) (mFront - oldFront);
        ++mOverruns;
        return OVERRUN;
    }
    return avail;
!!!339084.cpp!!!	read(inout buffer : void, in count : size_t, in readPTS : int64_t) : ssize_t
    ssize_t avail = availableToRead();
    if (CC_UNLIKELY(avail <= 0)) {
        return avail;
    }
    // An overrun can occur from here on and be silently ignored,
    // but it will be caught at next read()
    if (CC_LIKELY(count > (size_t) avail)) {
        count = avail;
    }
    size_t front = mFront & (mPipe.mMaxFrames - 1);
    size_t red = mPipe.mMaxFrames - front;
    if (CC_LIKELY(red > count)) {
        red = count;
    }
    // In particular, an overrun during the memcpy will result in reading corrupt data
    memcpy(buffer, (char *) mPipe.mBuffer + (front << mBitShift), red << mBitShift);
    // We could re-read the rear pointer here to detect the corruption, but why bother?
    if (CC_UNLIKELY(front + red == mPipe.mMaxFrames)) {
        if (CC_UNLIKELY((count -= red) > front)) {
            count = front;
        }
        if (CC_LIKELY(count > 0)) {
            memcpy((char *) buffer + (red << mBitShift), mPipe.mBuffer, count << mBitShift);
            red += count;
        }
    }
    mFront += red;
    mFramesRead += red;
    return red;
