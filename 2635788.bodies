class OmxAmpAudioPort
!!!11095564.cpp!!!	OmxAmpAudioPort()
  InitOmxHeader(&mAudioParam);
!!!11095692.cpp!!!	OmxAmpAudioPort(in index : OMX_U32, in dir : OMX_DIRTYPE)
  mDefinition.nPortIndex = index;
  mDefinition.eDir = dir;
  mDefinition.eDomain = OMX_PortDomainAudio;

  mDefinition.bEnabled = OMX_TRUE;
  mDefinition.bPopulated = OMX_FALSE;
  mDefinition.bBuffersContiguous = OMX_FALSE;

  if (dir == OMX_DirOutput) {
    mDefinition.nBufferCountMin = kNumOutputBuffers;
    mDefinition.nBufferCountActual = mDefinition.nBufferCountMin;
    mDefinition.nBufferSize = 4096 * kMaxOutPutChannels;
    mDefinition.format.audio.eEncoding = OMX_AUDIO_CodingPCM;
    // mDefinition.format.audio.cMIMEType = const_cast<char *>("audio/raw");
    InitOmxHeader(&mCodecParam.pcmout);
    mCodecParam.pcmout.eNumData = OMX_NumericalDataSigned;
    mCodecParam.pcmout.eEndian = OMX_EndianLittle;
    mCodecParam.pcmout.bInterleaved = OMX_TRUE;
    mCodecParam.pcmout.nBitPerSample = 16;
    mCodecParam.pcmout.ePCMMode = OMX_AUDIO_PCMModeLinear;
    mCodecParam.pcmout.eChannelMapping[0] = OMX_AUDIO_ChannelLF;
    mCodecParam.pcmout.eChannelMapping[1] = OMX_AUDIO_ChannelRF;
    mCodecParam.pcmout.eChannelMapping[2] = OMX_AUDIO_ChannelCF;
    mCodecParam.pcmout.eChannelMapping[3] = OMX_AUDIO_ChannelLFE;
    mCodecParam.pcmout.eChannelMapping[4] = OMX_AUDIO_ChannelLS;
    mCodecParam.pcmout.eChannelMapping[5] = OMX_AUDIO_ChannelRS;
    mCodecParam.pcmout.nChannels = kDefaultOutputChannels;
    mCodecParam.pcmout.nSamplingRate = kDefaultOutputSampleRate;
    mCodecParam.pcmout.nPortIndex = mDefinition.nPortIndex;
  }

  mDefinition.format.audio.pNativeRender = NULL;
  mDefinition.format.audio.bFlagErrorConcealment = OMX_FALSE;
  InitOmxHeader(&mAudioParam);
  updateDomainParameter();
  mPushedBytes = 0;
  mPushedOffset = 0;
!!!11095948.cpp!!!	formatAudEsData(inout header : OMX_BUFFERHEADERTYPE) : OMX_U8
  return mFormatHeadSize;
!!!11096844.cpp!!!	getFormatHeadSize() : OMX_U32
  return mFormatHeadSize;
!!!11096972.cpp!!!	configMemInfo(in es_handle : AMP_SHM_HANDLE) : OMX_ERRORTYPE
  HRESULT err = SUCCESS;
  mEs = es_handle;
  err = AMP_SHM_GetVirtualAddress(mEs, 0, (VOID **)&mEsVirtAddr);
  CHECKAMPERR(err);
  return static_cast<OMX_ERRORTYPE>(err);
!!!11097100.cpp!!!	updateMemInfo(inout header : OMX_BUFFERHEADERTYPE) : OMX_ERRORTYPE
  OMX_LOGD("DMX size %d pushedoffset %d buffer size %d\n",
      DMX_ES_BUF_SIZE, mPushedOffset, header->nFilledLen);
  if (DMX_ES_BUF_SIZE > mPushedOffset + header->nFilledLen) {
    kdMemcpy(mEsVirtAddr + mPushedOffset, header->pBuffer + header->nOffset,
        header->nFilledLen);
    mPushedOffset += header->nFilledLen;
  } else {
    kdMemcpy(mEsVirtAddr + mPushedOffset, header->pBuffer + header->nOffset,
        DMX_ES_BUF_SIZE - mPushedOffset);
    kdMemcpy(mEsVirtAddr, header->pBuffer + header->nOffset,
        mPushedOffset + header->nFilledLen - DMX_ES_BUF_SIZE);
    mPushedOffset = mPushedOffset + header->nFilledLen - DMX_ES_BUF_SIZE;
  }

  mPushedBytes += header->nFilledLen;
  return OMX_ErrorNone;
!!!11097228.cpp!!!	SetOutputParameter(in mSampleRate : OMX_U32 = kDefaultOutputSampleRate, in mChannel : OMX_U32 = kDefaultOutputChannels) : void
  mCodecParam.pcmout.nChannels = mChannel;
  mCodecParam.pcmout.nSamplingRate = mSampleRate;
!!!11097356.cpp!!!	GetOutputParameter(inout mSampleRate : OMX_U32, inout mChannel : OMX_U32) : void
  if (mSampleRate != NULL) {
    *mSampleRate = mCodecParam.pcmout.nSamplingRate;
  }
  if (mChannel != NULL) {
    *mChannel = mCodecParam.pcmout.nChannels;
  }
