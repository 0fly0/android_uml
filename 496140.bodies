class UserDataType
!!!1435532.cpp!!!	CreatorName() : string
    return QualifiedName() + ".CREATOR";
!!!1435660.cpp!!!	RpcCreatorName() : string
    return QualifiedName() + ".RPC_CREATOR";
!!!1435788.cpp!!!	WriteToParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, in flags : int) : void
    // if (v != null) {
    //     parcel.writeInt(1);
    //     v.writeToParcel(parcel);
    // } else {
    //     parcel.writeInt(0);
    // }
    IfStatement* elsepart = new IfStatement();
    elsepart->statements->Add(new MethodCall(parcel, "writeInt", 1,
                                new LiteralExpression("0")));
    IfStatement* ifpart = new IfStatement;
    ifpart->expression = new Comparison(v, "!=", NULL_VALUE);
    ifpart->elseif = elsepart;
    ifpart->statements->Add(new MethodCall(parcel, "writeInt", 1,
                                new LiteralExpression("1")));
    ifpart->statements->Add(new MethodCall(v, "writeToParcel", 2,
                                parcel, BuildWriteToParcelFlags(flags)));

    addTo->Add(ifpart);
!!!1435916.cpp!!!	CreateFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    // if (0 != parcel.readInt()) {
    //     v = CLASS.CREATOR.createFromParcel(parcel)
    // } else {
    //     v = null;
    // }
    IfStatement* elsepart = new IfStatement();
    elsepart->statements->Add(new Assignment(v, NULL_VALUE));

    IfStatement* ifpart = new IfStatement();
    ifpart->expression = new Comparison(new LiteralExpression("0"), "!=",
                new MethodCall(parcel, "readInt"));
    ifpart->elseif = elsepart;
    ifpart->statements->Add(new Assignment(v,
                new MethodCall(v->type, "CREATOR.createFromParcel", 1, parcel)));

    addTo->Add(ifpart);
!!!1436044.cpp!!!	ReadFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    // TODO: really, we don't need to have this extra check, but we
    // don't have two separate marshalling code paths
    // if (0 != parcel.readInt()) {
    //     v.readFromParcel(parcel)
    // }
    IfStatement* ifpart = new IfStatement();
    ifpart->expression = new Comparison(new LiteralExpression("0"), "!=",
                new MethodCall(parcel, "readInt"));
    ifpart->statements->Add(new MethodCall(v, "readFromParcel", 1, parcel));
    addTo->Add(ifpart);
!!!1436172.cpp!!!	CanBeArray() : bool
    return true;
!!!1436300.cpp!!!	WriteArrayToParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, in flags : int) : void
    addTo->Add(new MethodCall(parcel, "writeTypedArray", 2, v,
                BuildWriteToParcelFlags(flags)));
!!!1436428.cpp!!!	CreateArrayFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    string creator = v->type->QualifiedName() + ".CREATOR";
    addTo->Add(new Assignment(v, new MethodCall(parcel,
                "createTypedArray", 1, new LiteralExpression(creator))));
!!!1436556.cpp!!!	ReadArrayFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    string creator = v->type->QualifiedName() + ".CREATOR";
    addTo->Add(new MethodCall(parcel, "readTypedArray", 2,
                    v, new LiteralExpression(creator)));
!!!1436684.cpp!!!	WriteToRpcData(inout addTo : StatementBlock, inout k : Expression, inout v : Variable, inout data : Variable, in flags : int) : void
    // data.putFlattenable(k, v);
    addTo->Add(new MethodCall(data, "putFlattenable", 2, k, v));
!!!1436812.cpp!!!	CreateFromRpcData(inout addTo : StatementBlock, inout k : Expression, inout v : Variable, inout data : Variable, inout cl : Variable) : void
    // data.getFlattenable(k, CLASS.RPC_CREATOR);
    addTo->Add(new Assignment(v, new MethodCall(data, "getFlattenable", 2, k,
                new FieldVariable(v->type, "RPC_CREATOR"))));
