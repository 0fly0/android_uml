class CallbackHandler
!!!4787084.java!!!	CallbackHandler(in interfaceName : String)
            mInterfaceName = interfaceName;
            mMainHandler = new Handler();
!!!4787212.java!!!	performAction(inout webView : WebView, in code : String) : boolean
            final int resultId = mResultIdCounter.getAndIncrement();
            final String url = String.format(
                    JAVASCRIPT_ACTION_TEMPLATE, mInterfaceName, resultId, code);
            webView.loadUrl(url);

            return getResultAndClear(resultId);
!!!4787340.java!!!	getResultAndClear(in resultId : int) : boolean
            synchronized (mResultLock) {
                final boolean success = waitForResultTimedLocked(resultId);
                final boolean result = success ? mResult : false;
                clearResultLocked();
                return result;
            }
!!!4787468.java!!!	clearResultLocked() : void
            mResultId = -1;
            mResult = false;
!!!4787596.java!!!	waitForResultTimedLocked(in resultId : int) : boolean
            final long startTimeMillis = SystemClock.uptimeMillis();

            if (DEBUG) {
                Log.d(TAG, "Waiting for CVOX result with ID " + resultId + "...");
            }

            while (true) {
                // Fail if we received a callback from the future.
                if (mResultId > resultId) {
                    if (DEBUG) {
                        Log.w(TAG, "Aborted CVOX result");
                    }
                    return false;
                }

                final long elapsedTimeMillis = (SystemClock.uptimeMillis() - startTimeMillis);

                // Succeed if we received the callback we were expecting.
                if (DEBUG) {
                    Log.w(TAG, "Check " + mResultId + " versus expected " + resultId);
                }
                if (mResultId == resultId) {
                    if (DEBUG) {
                        Log.w(TAG, "Received CVOX result after " + elapsedTimeMillis + " ms");
                    }
                    return true;
                }

                final long waitTimeMillis = (RESULT_TIMEOUT - elapsedTimeMillis);

                // Fail if we've already exceeded the timeout.
                if (waitTimeMillis <= 0) {
                    if (DEBUG) {
                        Log.w(TAG, "Timed out while waiting for CVOX result");
                    }
                    return false;
                }

                try {
                    if (DEBUG) {
                        Log.w(TAG, "Start waiting...");
                    }
                    mResultLock.wait(waitTimeMillis);
                } catch (InterruptedException ie) {
                    if (DEBUG) {
                        Log.w(TAG, "Interrupted while waiting for CVOX result");
                    }
                }
            }
!!!4787724.java!!!	onResult(in id : String, in result : String) : void
            if (DEBUG) {
                Log.w(TAG, "Saw CVOX result of '" + result + "' for ID " + id);
            }
            final int resultId;

            try {
                resultId = Integer.parseInt(id);
            } catch (NumberFormatException e) {
                return;
            }

            synchronized (mResultLock) {
                if (resultId > mResultId) {
                    mResult = Boolean.parseBoolean(result);
                    mResultId = resultId;
                } else {
                    if (DEBUG) {
                        Log.w(TAG, "Result with ID " + resultId + " was stale vesus " + mResultId);
                    }
                }
                mResultLock.notifyAll();
            }
!!!4787852.java!!!	requestCallback(inout webView : WebView, inout callbackRunnable : Runnable) : void
            mCallbackRunnable = callbackRunnable;

            webView.loadUrl("javascript:(function() { " + mInterfaceName + ".callback(); })();");
!!!4787980.java!!!	callback() : void
            if (mCallbackRunnable != null) {
                mMainHandler.post(mCallbackRunnable);
                mCallbackRunnable = null;
            }
