class GtvMediaController
!!!12171276.java!!!	GtvMediaController(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        mRoot = this;
        mContext = context;
        mUseFastForward = true;
        mFromXml = true;
        initGtvResources(context);
!!!12171404.java!!!	onFinishInflate() : void
        if (mRoot != null) {
            initControllerView(mRoot);
        }
!!!12171532.java!!!	GtvMediaController(inout context : Context, inout useFastForward : boolean)
        super(context);
        mContext = context;
        mUseFastForward = useFastForward;
        initGtvResources(context);
        initFloatingWindow();
!!!12171660.java!!!	GtvMediaController(inout context : Context)
        super(context);
        mContext = context;
        mUseFastForward = true;
        initGtvResources(context);
        initFloatingWindow();
!!!12171788.java!!!	initGtvResources(inout context : Context) : void
        if (mGtvResources == null) {
            mGtvResources = new GtvResources(context);
        }
!!!12171916.java!!!	initFloatingWindow() : void
        mWindowManager = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);
        mWindow = PolicyManager.makeNewWindow(mContext);
        mWindow.setWindowManager(mWindowManager, null, null);
        mWindow.requestFeature(Window.FEATURE_NO_TITLE);
        mDecor = mWindow.getDecorView();
        mDecor.setOnTouchListener(mTouchListener);
        mWindow.setContentView(this);
        mWindow.setBackgroundDrawableResource(android.R.color.transparent);

        // While the media controller is up, the volume control keys should
        // affect the media stream type
        mWindow.setVolumeControlStream(AudioManager.STREAM_MUSIC);

        setFocusable(true);
        setFocusableInTouchMode(true);
        setDescendantFocusability(ViewGroup.FOCUS_AFTER_DESCENDANTS);
        requestFocus();

        // Generates a language map
        String[] languages = Locale.getISOLanguages();
        mLocaleMap = new HashMap<String, String>(languages.length * 2);
        for (String language : languages) {
            Locale locale = new Locale(language);
            String displayName = locale.getDisplayName(locale);
            mLocaleMap.put(locale.getISO3Language(), displayName);
            mLocaleMap.put(locale.getLanguage(), displayName);
        }

        // Sets strings from resources.
        mTrackSelectionString = mGtvResources.getResources().getString(
                R.string.gtvmediacontroller_track_label);
        mChooseTrackString = mGtvResources.getResources().getString(
                R.string.gtvmediacontroller_track_title);
        mVideoTrackString = mGtvResources.getResources().getString(
                R.string.gtvmediacontroller_video_track);
        mAudioTrackString = mGtvResources.getResources().getString(
                R.string.gtvmediacontroller_audio_track);
        mSubtitleTrackString = mGtvResources.getResources().getString(
                R.string.gtvmediacontroller_text_track);
        mTurnOffSubtitleString = mGtvResources.getResources().getString(
                R.string.gtvmediacontroller_turn_off_subtitle);
!!!12172044.java!!!	setMediaPlayer(inout player : MediaPlayerControl) : void
        mPlayer = player;
        updatePausePlay();
!!!12172172.java!!!	setAnchorView(inout view : View) : void
        mAnchor = view;

        FrameLayout.LayoutParams frameParams = new FrameLayout.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT,
                ViewGroup.LayoutParams.MATCH_PARENT
        );

        removeAllViews();
        View v = makeControllerView();
        addView(v, frameParams);
!!!12172300.java!!!	makeControllerView() : View
        LayoutInflater inflater = mGtvResources.getLayoutInflater();
        mRoot = inflater.inflate(R.layout.gtv_media_controller, null);

        initControllerView(mRoot);

        return mRoot;
!!!12172428.java!!!	initControllerView(inout v : View) : void
        mPauseButton = (ImageButton) v.findViewById(R.id.pause);
        if (mPauseButton != null) {
            mPauseButton.requestFocus();
            mPauseButton.setOnClickListener(mPauseListener);
        }

        mFfwdButton = (ImageButton) v.findViewById(R.id.ffwd);
        if (mFfwdButton != null) {
            mFfwdButton.setOnClickListener(mFfwdListener);
            if (!mFromXml) {
                mFfwdButton.setVisibility(mUseFastForward ? View.VISIBLE : View.GONE);
            }
        }

        mRewButton = (ImageButton) v.findViewById(R.id.rew);
        if (mRewButton != null) {
            mRewButton.setOnClickListener(mRewListener);
            if (!mFromXml) {
                mRewButton.setVisibility(mUseFastForward ? View.VISIBLE : View.GONE);
            }
        }

        // By default these are hidden. They will be enabled when setPrevNextListeners() is called
        mNextButton = (ImageButton) v.findViewById(R.id.next);
        if (mNextButton != null && !mFromXml && !mListenersSet) {
            mNextButton.setVisibility(View.GONE);
        }
        mPrevButton = (ImageButton) v.findViewById(R.id.prev);
        if (mPrevButton != null && !mFromXml && !mListenersSet) {
            mPrevButton.setVisibility(View.GONE);
        }

        mProgress = (ProgressBar) v.findViewById(R.id.mediacontroller_progress);
        if (mProgress != null) {
            if (mProgress instanceof SeekBar) {
                SeekBar seeker = (SeekBar) mProgress;
                seeker.setOnSeekBarChangeListener(mSeekListener);
            }
            mProgress.setMax(1000);
        }

        mEndTime = (TextView) v.findViewById(R.id.time);
        mCurrentTime = (TextView) v.findViewById(R.id.time_current);
        mFormatBuilder = new StringBuilder();
        mFormatter = new Formatter(mFormatBuilder, Locale.getDefault());
        mTrackButton = (Button) v.findViewById(R.id.gtvmediacontroller_track);
        if (mTrackButton != null) {
            mTrackButton.setOnClickListener(mTrackSelectionListener);
        }
        installPrevNextListeners();
!!!12172556.java!!!	show() : void
        show(sDefaultTimeout);
!!!12172684.java!!!	disableUnsupportedButtons() : void
        try {
            if (mPauseButton != null && !mPlayer.canPause()) {
                mPauseButton.setEnabled(false);
            }
            if (mRewButton != null && !mPlayer.canSeekBackward()) {
                mRewButton.setEnabled(false);
            }
            if (mFfwdButton != null && !mPlayer.canSeekForward()) {
                mFfwdButton.setEnabled(false);
            }
        } catch (IncompatibleClassChangeError ex) {
            // We were given an old version of the interface, that doesn't have
            // the canPause/canSeekXYZ methods. This is OK, it just means we
            // assume the media can be paused and seeked, and so we don't disable
            // the buttons.
        }
!!!12172812.java!!!	updateTrackSelectionButton() : void
        GtvMediaPlayer.TrackInfo[] trackInfos = mPlayer.getTrackInfo();
        if (trackInfos == null || trackInfos.length == 0) {
            mTrackButton.setVisibility(View.GONE);
            mTrackButton.setEnabled(false);
            return;
        }

        mVideoTrackNames = null;
        mAudioTrackNames = null;
        mTimedTextTrackNames = null;
        mVideoTrackIndex = null;
        mAudioTrackIndex = null;
        mTimedTextTrackIndex = null;

        int videoTrackCount = 0;
        int audioTrackCount = 0;
        int timedTextTrackCount = 0;

        for (int i = 0; i < trackInfos.length; ++i) {
            if (trackInfos[i] == null) {
                continue;
            }
            if (trackInfos[i].getTrackType() ==
                GtvMediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_VIDEO) {
                ++videoTrackCount;
            } else if (trackInfos[i].getTrackType() ==
                GtvMediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_AUDIO) {
                ++audioTrackCount;
            } else if (trackInfos[i].getTrackType() ==
                GtvMediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_TIMEDTEXT) {
                ++timedTextTrackCount;
            }
        }

        int menuCount = 0;
        // If there is only one video/audio track,
        // we don't need to make menu to select video tracks.
        if (videoTrackCount > 1) {
            ++menuCount;
        }
        if (audioTrackCount > 1) {
            ++menuCount;
        }
        // Even if there is only one timed text track, we need menu to select
        // timed text tracks in order to choose whether turn on/off the text track.
        if (timedTextTrackCount > 0) {
            ++menuCount;
        }

        if (menuCount == 0) {
            mTrackButton.setVisibility(View.GONE);
            mTrackButton.setEnabled(false);
            return;
        }

        mTrackButton.setVisibility(View.VISIBLE);
        mTrackButton.setEnabled(true);

        mTrackMenu = new String[menuCount];

        int menuIndex = 0;
        if (videoTrackCount > 1) {
            mVideoTrackNames = new String[videoTrackCount];
            mVideoTrackIndex = new int[videoTrackCount];
            mTrackMenu[menuIndex++] = mVideoTrackString;
        }
        if (audioTrackCount > 1) {
            mAudioTrackNames = new String[audioTrackCount];
            mAudioTrackIndex = new int[audioTrackCount];
            mTrackMenu[menuIndex++] = mAudioTrackString;
        }
        if (timedTextTrackCount > 0) {
            // 'Turn off timed text' item is included as well. Therefore, the size
            // of mTimedTextTrackNames is timedTextTrackCount + 1.
            mTimedTextTrackNames = new String[timedTextTrackCount + 1];
            mTimedTextTrackIndex = new int[timedTextTrackCount + 1];
            mTrackMenu[menuIndex++] = mSubtitleTrackString;

            mTimedTextTrackNames[0] = mTurnOffSubtitleString;
            mTimedTextTrackIndex[0] = -1;
        }

        int videoTrackIndex = 0;
        int audioTrackIndex = 0;
        int timedTextTrackIndex = 0;
        for (int i = 0; i < trackInfos.length; ++i) {
            String language = trackInfos[i].getLanguage();
            if (language == null) {
                language = "";
            }
            if (mLocaleMap.containsKey(language)) {
                language = mLocaleMap.get(language);
            }

            if ((trackInfos[i].getTrackType() ==
                 GtvMediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_VIDEO) &&
                (videoTrackCount > 1)) {
                if (language.isEmpty()) {
                    language = String.format("%d track", videoTrackIndex + 1);
                }
                mVideoTrackNames[videoTrackIndex] = new String(language);
                mVideoTrackIndex[videoTrackIndex] = i;
                ++videoTrackIndex;
            } else if ((trackInfos[i].getTrackType() ==
                        GtvMediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_AUDIO) &&
                       (audioTrackCount > 1)) {
                if (language.isEmpty()) {
                    language = String.format("%d track", audioTrackIndex + 1);
                }
                mAudioTrackNames[audioTrackIndex] = new String(language);
                mAudioTrackIndex[audioTrackIndex] = i;
                ++audioTrackIndex;
            } else if (trackInfos[i].getTrackType() ==
                    GtvMediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_TIMEDTEXT) {
                if (language.isEmpty()) {
                    language = String.format("%d track", timedTextTrackIndex + 1);
                }
                mTimedTextTrackNames[timedTextTrackIndex + 1] = new String(language);
                mTimedTextTrackIndex[timedTextTrackIndex + 1] = i;
                ++timedTextTrackIndex;
            }
        }
!!!12172940.java!!!	show(in timeout : int) : void

        if (!mShowing && mAnchor != null) {
            setProgress();
            if (mPauseButton != null) {
                mPauseButton.requestFocus();
            }
            updateTrackSelectionButton();
            disableUnsupportedButtons();

            int [] anchorpos = new int[2];
            mAnchor.getLocationOnScreen(anchorpos);

            WindowManager.LayoutParams p = new WindowManager.LayoutParams();
            p.gravity = Gravity.TOP;
            p.width = mAnchor.getWidth();
            p.height = LayoutParams.WRAP_CONTENT;
            p.x = 0;
            p.y = anchorpos[1] + mAnchor.getHeight() - p.height;
            p.format = PixelFormat.TRANSLUCENT;
            p.type = WindowManager.LayoutParams.TYPE_APPLICATION_PANEL;
            p.flags |= WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM
                    | WindowManager.LayoutParams.FLAG_SPLIT_TOUCH;
            p.token = null;
            p.windowAnimations = 0; // android.R.style.DropDownAnimationDown;
            mWindowManager.addView(mDecor, p);
            mShowing = true;
        }
        updatePausePlay();

        // cause the progress bar to be updated even if mShowing
        // was already true.  This happens, for example, if we're
        // paused with the progress bar showing the user hits play.
        mHandler.sendEmptyMessage(SHOW_PROGRESS);

        Message msg = mHandler.obtainMessage(FADE_OUT);
        if (timeout != 0) {
            mHandler.removeMessages(FADE_OUT);
            mHandler.sendMessageDelayed(msg, timeout);
        }
!!!12173068.java!!!	isShowing() : boolean
        return mShowing;
!!!12173196.java!!!	hide() : void
        if (mAnchor == null) {
            return;
        }

        if (mShowing) {
            try {
                mHandler.removeMessages(SHOW_PROGRESS);
                mWindowManager.removeView(mDecor);
            } catch (IllegalArgumentException ex) {
                Log.w("GtvMediaController", "already removed");
            }
            mShowing = false;
        }
!!!12173324.java!!!	stringForTime(in timeMs : int) : String
        int totalSeconds = timeMs / 1000;

        int seconds = totalSeconds % 60;
        int minutes = (totalSeconds / 60) % 60;
        int hours   = totalSeconds / 3600;

        mFormatBuilder.setLength(0);
        if (hours > 0) {
            return mFormatter.format("%d:%02d:%02d", hours, minutes, seconds).toString();
        } else {
            return mFormatter.format("%02d:%02d", minutes, seconds).toString();
        }
!!!12173452.java!!!	setProgress() : int
        if (mPlayer == null || mDragging) {
            return 0;
        }
        int position = mPlayer.getCurrentPosition();
        int percent = mPlayer.getBufferPercentage();
        setProgress(position, percent);

        return position;
!!!12173580.java!!!	setProgress(in currentPosition : int, in bufferPercent : int) : void
        if (mPlayer == null) {
            return;
        }
        int duration = mPlayer.getDuration();
        if (mProgress != null) {
            if (duration > 0) {
                // use long to avoid overflow
                long pos = 1000L * currentPosition / duration;
                mProgress.setProgress((int) pos);
            }
            mProgress.setSecondaryProgress(bufferPercent * 10);
        }

        if (mEndTime != null) {
            mEndTime.setText(stringForTime(duration));
        }
        if (mCurrentTime != null) {
            mCurrentTime.setText(stringForTime(currentPosition));
        }
!!!12173708.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
        show(sDefaultTimeout);
        return true;
!!!12173836.java!!!	onTrackballEvent(inout ev : MotionEvent) : boolean
        show(sDefaultTimeout);
        return false;
!!!12173964.java!!!	dispatchKeyEvent(inout event : KeyEvent) : boolean
        int keyCode = event.getKeyCode();
        final boolean uniqueDown = event.getRepeatCount() == 0
                && event.getAction() == KeyEvent.ACTION_DOWN;
        if (keyCode ==  KeyEvent.KEYCODE_HEADSETHOOK
                || keyCode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE
                || keyCode == KeyEvent.KEYCODE_SPACE) {
            if (uniqueDown) {
                doPauseResume();
                show(sDefaultTimeout);
                if (mPauseButton != null) {
                    mPauseButton.requestFocus();
                }
            }
            return true;
        } else if (keyCode == KeyEvent.KEYCODE_MEDIA_PLAY) {
            if (uniqueDown && !mPlayer.isPlaying()) {
                mPlayer.start();
                updatePausePlay();
                show(sDefaultTimeout);
            }
            return true;
        } else if (keyCode == KeyEvent.KEYCODE_MEDIA_STOP
                || keyCode == KeyEvent.KEYCODE_MEDIA_PAUSE) {
            if (uniqueDown && mPlayer.isPlaying()) {
                mPlayer.pause();
                updatePausePlay();
                show(sDefaultTimeout);
            }
            return true;
        } else if (keyCode == KeyEvent.KEYCODE_MEDIA_FAST_FORWARD ||
                keyCode == KeyEvent.KEYCODE_MEDIA_REWIND) {
            if (mPlayer == null) {
                return true;
            }
            if (event.getAction() == KeyEvent.ACTION_DOWN) {
                show(sLongTimeout);
                mHandler.removeMessages(SHOW_PROGRESS);
                mHandler.removeMessages(SEEK_BY_KEY);
                if (mSeekTime == sNotSeeking) {
                    mSeekTime = mPlayer.getCurrentPosition();
                }
                int seekInterval = sSeekIntervalByMediaKey +
                        (event.getRepeatCount() * sSeekAccelerationByMediaKey);
                if (seekInterval > sMaxSeekIntervalByMediaKey) {
                    seekInterval = sMaxSeekIntervalByMediaKey;
                }
                if (keyCode == KeyEvent.KEYCODE_MEDIA_FAST_FORWARD) {
                    mSeekTime += seekInterval;
                    int duration = mPlayer.getDuration();
                    if (mSeekTime >= duration) {
                        mSeekTime = duration - 1;
                    }
                } else {
                    // keyCode == KeyEvent.KEYCODE_MEDIA_REWIND
                    mSeekTime -= seekInterval;
                    if (mSeekTime < 0) {
                        mSeekTime = 0;
                    }
                }
                if (event.getRepeatCount() % sSeekFrequencyDuringSeekKeyDown == 0) {
                    // Prevent from frequently calling seeking
                    mPlayer.seekTo(mSeekTime);
                    mNeedsSeekWhenKeyUp = false;
                } else {
                    mNeedsSeekWhenKeyUp = true;
                }
                setProgress(mSeekTime, 0);
            } else if (event.getAction() == KeyEvent.ACTION_UP) {
                if (mNeedsSeekWhenKeyUp) {
                    mPlayer.seekTo(mSeekTime);
                }
                mHandler.sendEmptyMessageDelayed(SEEK_BY_KEY, sSeekDelayAfterKeyUp);
            }
            return true;
        } else if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN
                || keyCode == KeyEvent.KEYCODE_VOLUME_UP
                || keyCode == KeyEvent.KEYCODE_VOLUME_MUTE) {
            // don't show the controls for volume adjustment
            return super.dispatchKeyEvent(event);
        } else if (keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_MENU ||
                event.isSystem()) {
            if (uniqueDown) {
                hide();
            }
            return true;
        }

        show(sDefaultTimeout);
        return super.dispatchKeyEvent(event);
!!!12174092.java!!!	updatePausePlay() : void
        if (mRoot == null || mPauseButton == null) {
            return;
        }

        if (mPlayer.isPlaying()) {
            mPauseButton.setImageDrawable(mGtvResources.getResources().getDrawable(
                    R.drawable.ic_media_pause_holo_dark));
        } else {
            mPauseButton.setImageDrawable(mGtvResources.getResources().getDrawable(
                    R.drawable.ic_media_play_holo_dark));
        }
!!!12174220.java!!!	doPauseResume() : void
        if (mPlayer.isPlaying()) {
            mPlayer.pause();
        } else {
            mPlayer.start();
        }
        updatePausePlay();
!!!12174348.java!!!	setEnabled(inout enabled : boolean) : void
        if (mPauseButton != null) {
            mPauseButton.setEnabled(enabled);
        }
        if (mFfwdButton != null) {
            mFfwdButton.setEnabled(enabled);
        }
        if (mRewButton != null) {
            mRewButton.setEnabled(enabled);
        }
        if (mNextButton != null) {
            mNextButton.setEnabled(enabled && mNextListener != null);
        }
        if (mPrevButton != null) {
            mPrevButton.setEnabled(enabled && mPrevListener != null);
        }
        if (mProgress != null) {
            mProgress.setEnabled(enabled);
        }
        disableUnsupportedButtons();
        super.setEnabled(enabled);
!!!12174476.java!!!	installPrevNextListeners() : void
        if (mNextButton != null) {
            mNextButton.setOnClickListener(mNextListener);
            mNextButton.setEnabled(mNextListener != null);
        }

        if (mPrevButton != null) {
            mPrevButton.setOnClickListener(mPrevListener);
            mPrevButton.setEnabled(mPrevListener != null);
        }
!!!12174604.java!!!	setPrevNextListeners(inout next : OnClickListener, inout prev : OnClickListener) : void
        mNextListener = next;
        mPrevListener = prev;
        mListenersSet = true;

        if (mRoot != null) {
            installPrevNextListeners();

            if (mNextButton != null && !mFromXml) {
                mNextButton.setVisibility(View.VISIBLE);
            }
            if (mPrevButton != null && !mFromXml) {
                mPrevButton.setVisibility(View.VISIBLE);
            }
        }
