class ActivityOptions
!!!2517772.java!!!	makeCustomAnimation(inout context : Context, in enterResId : int, in exitResId : int) : ActivityOptions
        return makeCustomAnimation(context, enterResId, exitResId, null, null);
!!!2517900.java!!!	makeCustomAnimation(inout context : Context, in enterResId : int, in exitResId : int, inout handler : Handler, inout listener : OnAnimationStartedListener) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = context.getPackageName();
        opts.mAnimationType = ANIM_CUSTOM;
        opts.mCustomEnterResId = enterResId;
        opts.mCustomExitResId = exitResId;
        opts.setListener(handler, listener);
        return opts;
!!!2518028.java!!!	setListener(inout handler : Handler, inout listener : OnAnimationStartedListener) : void
        if (listener != null) {
            final Handler h = handler;
            final OnAnimationStartedListener finalListener = listener;
            mAnimationStartedListener = new IRemoteCallback.Stub() {
                @Override public void sendResult(Bundle data) throws RemoteException {
                    h.post(new Runnable() {
                        @Override public void run() {
                            finalListener.onAnimationStarted();
                        }
                    });
                }
            };
        }
!!!2518284.java!!!	makeScaleUpAnimation(inout source : View, in startX : int, in startY : int, in startWidth : int, in startHeight : int) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = ANIM_SCALE_UP;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.mStartWidth = startWidth;
        opts.mStartHeight = startHeight;
        return opts;
!!!2518412.java!!!	makeThumbnailScaleUpAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int) : ActivityOptions
        return makeThumbnailScaleUpAnimation(source, thumbnail, startX, startY, null);
!!!2518540.java!!!	makeThumbnailScaleUpAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, inout listener : OnAnimationStartedListener) : ActivityOptions
        return makeThumbnailAnimation(source, thumbnail, startX, startY, listener, true);
!!!2518668.java!!!	makeThumbnailScaleDownAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, inout listener : OnAnimationStartedListener) : ActivityOptions
        return makeThumbnailAnimation(source, thumbnail, startX, startY, listener, false);
!!!2518796.java!!!	makeThumbnailAnimation(inout source : View, inout thumbnail : Bitmap, in startX : int, in startY : int, inout listener : OnAnimationStartedListener, inout scaleUp : boolean) : ActivityOptions
        ActivityOptions opts = new ActivityOptions();
        opts.mPackageName = source.getContext().getPackageName();
        opts.mAnimationType = scaleUp ? ANIM_THUMBNAIL_SCALE_UP : ANIM_THUMBNAIL_SCALE_DOWN;
        opts.mThumbnail = thumbnail;
        int[] pts = new int[2];
        source.getLocationOnScreen(pts);
        opts.mStartX = pts[0] + startX;
        opts.mStartY = pts[1] + startY;
        opts.setListener(source.getHandler(), listener);
        return opts;
!!!2519052.java!!!	ActivityOptions(inout opts : Bundle)
        mPackageName = opts.getString(KEY_PACKAGE_NAME);
        mAnimationType = opts.getInt(KEY_ANIM_TYPE);
        if (mAnimationType == ANIM_CUSTOM) {
            mCustomEnterResId = opts.getInt(KEY_ANIM_ENTER_RES_ID, 0);
            mCustomExitResId = opts.getInt(KEY_ANIM_EXIT_RES_ID, 0);
            mAnimationStartedListener = IRemoteCallback.Stub.asInterface(
                    opts.getIBinder(KEY_ANIM_START_LISTENER));
        } else if (mAnimationType == ANIM_SCALE_UP) {
            mStartX = opts.getInt(KEY_ANIM_START_X, 0);
            mStartY = opts.getInt(KEY_ANIM_START_Y, 0);
            mStartWidth = opts.getInt(KEY_ANIM_START_WIDTH, 0);
            mStartHeight = opts.getInt(KEY_ANIM_START_HEIGHT, 0);
        } else if (mAnimationType == ANIM_THUMBNAIL_SCALE_UP ||
                mAnimationType == ANIM_THUMBNAIL_SCALE_DOWN) {
            mThumbnail = (Bitmap)opts.getParcelable(KEY_ANIM_THUMBNAIL);
            mStartX = opts.getInt(KEY_ANIM_START_X, 0);
            mStartY = opts.getInt(KEY_ANIM_START_Y, 0);
            mAnimationStartedListener = IRemoteCallback.Stub.asInterface(
                    opts.getIBinder(KEY_ANIM_START_LISTENER));
        }
!!!2519180.java!!!	getPackageName() : String
        return mPackageName;
!!!2519308.java!!!	getAnimationType() : int
        return mAnimationType;
!!!2519436.java!!!	getCustomEnterResId() : int
        return mCustomEnterResId;
!!!2519564.java!!!	getCustomExitResId() : int
        return mCustomExitResId;
!!!2519692.java!!!	getThumbnail() : Bitmap
        return mThumbnail;
!!!2519820.java!!!	getStartX() : int
        return mStartX;
!!!2519948.java!!!	getStartY() : int
        return mStartY;
!!!2520076.java!!!	getStartWidth() : int
        return mStartWidth;
!!!2520204.java!!!	getStartHeight() : int
        return mStartHeight;
!!!2520332.java!!!	getOnAnimationStartListener() : IRemoteCallback
        return mAnimationStartedListener;
!!!2520460.java!!!	abort() : void
        if (mAnimationStartedListener != null) {
            try {
                mAnimationStartedListener.sendResult(null);
            } catch (RemoteException e) {
            }
        }
!!!2520588.java!!!	abort(inout options : Bundle) : void
        if (options != null) {
            (new ActivityOptions(options)).abort();
        }
!!!2520716.java!!!	update(inout otherOptions : ActivityOptions) : void
        if (otherOptions.mPackageName != null) {
            mPackageName = otherOptions.mPackageName;
        }
        switch (otherOptions.mAnimationType) {
            case ANIM_CUSTOM:
                mAnimationType = otherOptions.mAnimationType;
                mCustomEnterResId = otherOptions.mCustomEnterResId;
                mCustomExitResId = otherOptions.mCustomExitResId;
                mThumbnail = null;
                if (otherOptions.mAnimationStartedListener != null) {
                    try {
                        otherOptions.mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = otherOptions.mAnimationStartedListener;
                break;
            case ANIM_SCALE_UP:
                mAnimationType = otherOptions.mAnimationType;
                mStartX = otherOptions.mStartX;
                mStartY = otherOptions.mStartY;
                mStartWidth = otherOptions.mStartWidth;
                mStartHeight = otherOptions.mStartHeight;
                if (otherOptions.mAnimationStartedListener != null) {
                    try {
                        otherOptions.mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = null;
                break;
            case ANIM_THUMBNAIL_SCALE_UP:
            case ANIM_THUMBNAIL_SCALE_DOWN:
                mAnimationType = otherOptions.mAnimationType;
                mThumbnail = otherOptions.mThumbnail;
                mStartX = otherOptions.mStartX;
                mStartY = otherOptions.mStartY;
                if (otherOptions.mAnimationStartedListener != null) {
                    try {
                        otherOptions.mAnimationStartedListener.sendResult(null);
                    } catch (RemoteException e) {
                    }
                }
                mAnimationStartedListener = otherOptions.mAnimationStartedListener;
                break;
        }
!!!2520844.java!!!	toBundle() : Bundle
        Bundle b = new Bundle();
        if (mPackageName != null) {
            b.putString(KEY_PACKAGE_NAME, mPackageName);
        }
        switch (mAnimationType) {
            case ANIM_CUSTOM:
                b.putInt(KEY_ANIM_TYPE, mAnimationType);
                b.putInt(KEY_ANIM_ENTER_RES_ID, mCustomEnterResId);
                b.putInt(KEY_ANIM_EXIT_RES_ID, mCustomExitResId);
                b.putIBinder(KEY_ANIM_START_LISTENER, mAnimationStartedListener
                        != null ? mAnimationStartedListener.asBinder() : null);
                break;
            case ANIM_SCALE_UP:
                b.putInt(KEY_ANIM_TYPE, mAnimationType);
                b.putInt(KEY_ANIM_START_X, mStartX);
                b.putInt(KEY_ANIM_START_Y, mStartY);
                b.putInt(KEY_ANIM_START_WIDTH, mStartWidth);
                b.putInt(KEY_ANIM_START_HEIGHT, mStartHeight);
                break;
            case ANIM_THUMBNAIL_SCALE_UP:
            case ANIM_THUMBNAIL_SCALE_DOWN:
                b.putInt(KEY_ANIM_TYPE, mAnimationType);
                b.putParcelable(KEY_ANIM_THUMBNAIL, mThumbnail);
                b.putInt(KEY_ANIM_START_X, mStartX);
                b.putInt(KEY_ANIM_START_Y, mStartY);
                b.putIBinder(KEY_ANIM_START_LISTENER, mAnimationStartedListener
                        != null ? mAnimationStartedListener.asBinder() : null);
                break;
        }
        return b;
