class Display
!!!4452876.java!!!	Display(inout global : DisplayManagerGlobal, in displayId : int, inout displayInfo : DisplayInfo, inout compatibilityInfo : CompatibilityInfoHolder)
        mGlobal = global;
        mDisplayId = displayId;
        mDisplayInfo = displayInfo;
        mCompatibilityInfo = compatibilityInfo;
        mIsValid = true;

        // Cache properties that cannot change as long as the display is valid.
        mLayerStack = displayInfo.layerStack;
        mFlags = displayInfo.flags;
        mType = displayInfo.type;
        mAddress = displayInfo.address;
!!!4453004.java!!!	getDisplayId() : int
        return mDisplayId;
!!!4453132.java!!!	isValid() : boolean
        synchronized (this) {
            updateDisplayInfoLocked();
            return mIsValid;
        }
!!!4453260.java!!!	getDisplayInfo(inout outDisplayInfo : DisplayInfo) : boolean
        synchronized (this) {
            updateDisplayInfoLocked();
            outDisplayInfo.copyFrom(mDisplayInfo);
            return mIsValid;
        }
!!!4453388.java!!!	getLayerStack() : int
        return mLayerStack;
!!!4453516.java!!!	getFlags() : int
        return mFlags;
!!!4453644.java!!!	getType() : int
        return mType;
!!!4453772.java!!!	getAddress() : String
        return mAddress;
!!!4453900.java!!!	getCompatibilityInfo() : CompatibilityInfoHolder
        return mCompatibilityInfo;
!!!4454028.java!!!	getName() : String
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.name;
        }
!!!4454156.java!!!	getSize(inout outSize : Point) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            mDisplayInfo.getAppMetrics(mTempMetrics, mCompatibilityInfo);
            outSize.x = mTempMetrics.widthPixels;
            outSize.y = mTempMetrics.heightPixels;
        }
!!!4454284.java!!!	getRectSize(inout outSize : Rect) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            mDisplayInfo.getAppMetrics(mTempMetrics, mCompatibilityInfo);
            outSize.set(0, 0, mTempMetrics.widthPixels, mTempMetrics.heightPixels);
        }
!!!4454412.java!!!	getCurrentSizeRange(inout outSmallestSize : Point, inout outLargestSize : Point) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            outSmallestSize.x = mDisplayInfo.smallestNominalAppWidth;
            outSmallestSize.y = mDisplayInfo.smallestNominalAppHeight;
            outLargestSize.x = mDisplayInfo.largestNominalAppWidth;
            outLargestSize.y = mDisplayInfo.largestNominalAppHeight;
        }
!!!4454540.java!!!	getMaximumSizeDimension() : int
        synchronized (this) {
            updateDisplayInfoLocked();
            return Math.max(mDisplayInfo.logicalWidth, mDisplayInfo.logicalHeight);
        }
!!!4454668.java!!!	getWidth() : int
        synchronized (this) {
            updateCachedAppSizeIfNeededLocked();
            return mCachedAppWidthCompat;
        }
!!!4454796.java!!!	getHeight() : int
        synchronized (this) {
            updateCachedAppSizeIfNeededLocked();
            return mCachedAppHeightCompat;
        }
!!!4454924.java!!!	getRotation() : int
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.rotation;
        }
!!!4455052.java!!!	getOrientation() : int
        return getRotation();
!!!4455180.java!!!	getPixelFormat() : int
        return PixelFormat.RGBA_8888;
!!!4455308.java!!!	getRefreshRate() : float
        synchronized (this) {
            updateDisplayInfoLocked();
            return mDisplayInfo.refreshRate;
        }
!!!4455436.java!!!	getMetrics(inout outMetrics : DisplayMetrics) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            mDisplayInfo.getAppMetrics(outMetrics, mCompatibilityInfo);
        }
!!!4455564.java!!!	getRealSize(inout outSize : Point) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            outSize.x = mDisplayInfo.logicalWidth;
            outSize.y = mDisplayInfo.logicalHeight;
        }
!!!4455692.java!!!	getRealMetrics(inout outMetrics : DisplayMetrics) : void
        synchronized (this) {
            updateDisplayInfoLocked();
            mDisplayInfo.getLogicalMetrics(outMetrics, null);
        }
!!!4455820.java!!!	updateDisplayInfoLocked() : void
        // Note: The display manager caches display info objects on our behalf.
        DisplayInfo newInfo = mGlobal.getDisplayInfo(mDisplayId);
        if (newInfo == null) {
            // Preserve the old mDisplayInfo after the display is removed.
            if (mIsValid) {
                mIsValid = false;
                if (DEBUG) {
                    Log.d(TAG, "Logical display " + mDisplayId + " was removed.");
                }
            }
        } else {
            // Use the new display info.  (It might be the same object if nothing changed.)
            mDisplayInfo = newInfo;
            if (!mIsValid) {
                mIsValid = true;
                if (DEBUG) {
                    Log.d(TAG, "Logical display " + mDisplayId + " was recreated.");
                }
            }
        }
!!!4455948.java!!!	updateCachedAppSizeIfNeededLocked() : void
        long now = SystemClock.uptimeMillis();
        if (now > mLastCachedAppSizeUpdate + CACHED_APP_SIZE_DURATION_MILLIS) {
            updateDisplayInfoLocked();
            mDisplayInfo.getAppMetrics(mTempMetrics, mCompatibilityInfo);
            mCachedAppWidthCompat = mTempMetrics.widthPixels;
            mCachedAppHeightCompat = mTempMetrics.heightPixels;
            mLastCachedAppSizeUpdate = now;
        }
!!!4456076.java!!!	toString() : String
        synchronized (this) {
            updateDisplayInfoLocked();
            mDisplayInfo.getAppMetrics(mTempMetrics, mCompatibilityInfo);
            return "Display id " + mDisplayId + ": " + mDisplayInfo
                    + ", " + mTempMetrics + ", isValid=" + mIsValid;
        }
!!!4456204.java!!!	typeToString(in type : int) : String
        switch (type) {
            case TYPE_UNKNOWN:
                return "UNKNOWN";
            case TYPE_BUILT_IN:
                return "BUILT_IN";
            case TYPE_HDMI:
                return "HDMI";
            case TYPE_WIFI:
                return "WIFI";
            case TYPE_OVERLAY:
                return "OVERLAY";
            default:
                return Integer.toString(type);
        }
