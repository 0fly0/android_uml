class OmxAmpWMVPort
!!!11131788.cpp!!!	OmxAmpWMVPort(in index : OMX_U32, in dir : OMX_DIRTYPE)
  mDefinition.nPortIndex = index;
  mDefinition.eDir = dir;
  mDefinition.eDomain = OMX_PortDomainVideo;
  getVideoDefinition().eCompressionFormat = OMX_VIDEO_CodingWMV;
  getVideoDefinition().eColorFormat = OMX_COLOR_FormatUnused;
  getVideoDefinition().nFrameWidth = 176;
  getVideoDefinition().nFrameHeight = 144;
  getVideoDefinition().nBitrate = 64000;
  getVideoDefinition().xFramerate = 15<<16;
  updateDomainParameter();
  mFormatHeadSize = sizeof(MRVL_COMMON_PACKAGE_Hdr) * 2 +
      sizeof(MRVL_WMV3_SEQUENCE_Hdr) + sizeof(MRVL_WMV3_FRAME_Hdr);
  pWmvHdr = static_cast<OMX_U8 *>(kdMalloc(mFormatHeadSize));
  pSeqComHdr = reinterpret_cast<MRVL_COMMON_PACKAGE_Hdr *>(pWmvHdr);
  pSeqComHdr->start_code_1 = 0;
  pSeqComHdr->start_code_2 = 1;
  pSeqComHdr->packet_type = 0x10;
  pSeqComHdr->reserved = 0;
  pSeqComHdr->marker_byte_1 = 0x88;
  pSeqComHdr->packet_payload_len_msb = 0;
  pSeqComHdr->marker_byte_2 = 0x88;
  pSeqComHdr->packet_payload_len_lsb = 0x24;
  pSeqComHdr->marker_byte_3 = 0x88;
  pSeqComHdr->packet_padding_len = 0;
  pSeqComHdr->marker_byte_4 = 0x88;
  pSeqHeader = reinterpret_cast<MRVL_WMV3_SEQUENCE_Hdr *>(pWmvHdr +
      sizeof(MRVL_COMMON_PACKAGE_Hdr));
  pSeqHeader->start_code = 0xc5000000;
  pSeqHeader->mark_code_04 = 0x00000004;
  pSeqHeader->mark_code_0c = 0x0000000c;
  pSeqHeader->struct_b_1 = 0;
  pSeqHeader->struct_b_2 = 0;
  pSeqHeader->struct_b_3 = 0xffffffff;
  pFraComHdr = reinterpret_cast<MRVL_COMMON_PACKAGE_Hdr *>(pWmvHdr +
      sizeof(MRVL_COMMON_PACKAGE_Hdr) +
      sizeof(MRVL_WMV3_SEQUENCE_Hdr));
  pFraComHdr->start_code_1 = 0;
  pFraComHdr->start_code_2 = 1;
  pFraComHdr->packet_type = 0x11;
  pFraComHdr->reserved = 0;
  pFraComHdr->marker_byte_1 = 0x88;
  pFraComHdr->marker_byte_2 = 0x88;
  pFraComHdr->marker_byte_3 = 0x88;
  pFraComHdr->packet_padding_len = 0;
  pFraComHdr->marker_byte_4 = 0x88;
  pFrameHdr = reinterpret_cast<MRVL_WMV3_FRAME_Hdr *>(pWmvHdr +
      sizeof(MRVL_COMMON_PACKAGE_Hdr) * 2 +
      sizeof(MRVL_WMV3_SEQUENCE_Hdr));
!!!11131916.cpp!!!	~OmxAmpWMVPort()
  if (NULL != pWmvHdr) {
    kdFree(pWmvHdr);
    pWmvHdr = NULL;
  }
!!!11132044.cpp!!!	formatEsData(inout header : OMX_BUFFERHEADERTYPE, in isPadding : OMX_BOOL) : void
  OMX_U32 len = header->nFilledLen - mCodecDataSize;
  OMX_U8 *buf = header->pBuffer + header->nOffset;
  OMX_U32 copy_size;
  OMX_U8 *copy_header;
  if (mCodecDataSize) {
    copy_size = mFormatHeadSize;
    kdMemmove(buf + copy_size, buf + mCodecDataSize, len);
    pSeqHeader->struct_c = *(reinterpret_cast<OMX_U32 *>(buf));
    pSeqHeader->struct_a_1 = getVideoDefinition().nFrameHeight;
    pSeqHeader->struct_a_2 = getVideoDefinition().nFrameWidth;
    copy_header = reinterpret_cast<OMX_U8 *>(pSeqComHdr);
    mCodecDataSize = 0;
    OMX_LOGD("wmv add sequence header, struct_c = %d  height = %d  width = %d.",
        pSeqHeader->struct_c, pSeqHeader->struct_a_1, pSeqHeader->struct_a_2);
  } else {
    copy_size = sizeof(MRVL_COMMON_PACKAGE_Hdr) + sizeof(MRVL_WMV3_FRAME_Hdr);
    kdMemmove(buf + copy_size, buf, len);
    copy_header = reinterpret_cast<OMX_U8 *>(pFraComHdr);
  }
  OMX_U32 frame_size = len + sizeof(MRVL_WMV3_FRAME_Hdr);
  pFraComHdr->packet_payload_len_msb = SWAPSHORT(frame_size >> 16);
  pFraComHdr->packet_payload_len_lsb = SWAPSHORT(frame_size & 0xffff);
  *(reinterpret_cast<OMX_U32 *>(pFrameHdr)) = len;
  kdMemcpy(buf, copy_header, copy_size);
  header->nFilledLen = len + copy_size;
  OmxAmpVideoPort::formatEsData(header, isPadding);
