class DeviceMotionService
!!!4841868.java!!!	DeviceMotionService(inout manager : DeviceMotionAndOrientationManager, inout context : Context)
        mManager = manager;
        assert(mManager != null);
        mContext = context;
        assert(mContext != null);
!!!4841996.java!!!	start() : void
        mIsRunning = true;
        registerForSensor();
!!!4842124.java!!!	stop() : void
        mIsRunning = false;
        stopSendingUpdates();
        unregisterFromSensor();
!!!4842252.java!!!	suspend() : void
        if (mIsRunning) {
            stopSendingUpdates();
            unregisterFromSensor();
        }
!!!4842380.java!!!	resume() : void
        if (mIsRunning) {
            registerForSensor();
        }
!!!4842508.java!!!	sendErrorEvent() : void
        assert WebViewCore.THREAD_NAME.equals(Thread.currentThread().getName());
        // The spec requires that each listener receives the error event only once.
        if (mHaveSentErrorEvent)
            return;
        mHaveSentErrorEvent = true;
        createHandler();
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                assert WebViewCore.THREAD_NAME.equals(Thread.currentThread().getName());
                if (mIsRunning) {
                    // The special case of all nulls is used to signify a failure to get data.
                    mManager.onMotionChange(null, null, null, 0.0);
                }
            }
        });
!!!4842636.java!!!	createHandler() : void
        if (mHandler != null) {
            return;
        }

        mHandler = new Handler();
        mUpdateRunnable = new Runnable() {
            @Override
            public void run() {
                assert mIsRunning;
                mManager.onMotionChange(new Double(mLastAcceleration[0]),
                        new Double(mLastAcceleration[1]), new Double(mLastAcceleration[2]),
                        INTERVAL_MILLIS);
                mHandler.postDelayed(mUpdateRunnable, INTERVAL_MILLIS);
                // Now that we have successfully sent some data, reset whether we've sent an error.
                mHaveSentErrorEvent = false;
            }
        };
!!!4842764.java!!!	startSendingUpdates() : void
        createHandler();
        mUpdateRunnable.run();
!!!4842892.java!!!	stopSendingUpdates() : void
        mHandler.removeCallbacks(mUpdateRunnable);
        mLastAcceleration = null;
!!!4843020.java!!!	registerForSensor() : void
        if (!registerForAccelerometerSensor()) {
            sendErrorEvent();
        }
!!!4843148.java!!!	getSensorManager() : SensorManager
        assert WebViewCore.THREAD_NAME.equals(Thread.currentThread().getName());
        if (mSensorManager == null) {
            mSensorManager = (SensorManager) mContext.getSystemService(Context.SENSOR_SERVICE);
        }
        return mSensorManager;
!!!4843276.java!!!	registerForAccelerometerSensor() : boolean
        List<Sensor> sensors = getSensorManager().getSensorList(Sensor.TYPE_ACCELEROMETER);
        if (sensors.isEmpty()) {
            return false;
        }
        createHandler();
        // TODO: Consider handling multiple sensors.
        return getSensorManager().registerListener(
                this, sensors.get(0), SensorManager.SENSOR_DELAY_UI, mHandler);
!!!4843404.java!!!	unregisterFromSensor() : void
        getSensorManager().unregisterListener(this);
!!!4843532.java!!!	onSensorChanged(inout event : SensorEvent) : void
        assert(event.values.length == 3);
        assert WebViewCore.THREAD_NAME.equals(Thread.currentThread().getName());
        assert(event.sensor.getType() == Sensor.TYPE_ACCELEROMETER);

        // We may get callbacks after the call to getSensorManager().unregisterListener() returns.
        if (!mIsRunning) {
            return;
        }

        boolean firstData = mLastAcceleration == null;
        mLastAcceleration = event.values;
        if (firstData) {
            startSendingUpdates();
        }
!!!4843660.java!!!	onAccuracyChanged(inout sensor : Sensor, in accuracy : int) : void
        assert WebViewCore.THREAD_NAME.equals(Thread.currentThread().getName());
