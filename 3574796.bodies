class DexFile
!!!15440140.java!!!	DexFile(inout file : File)
        this(file.getPath());
!!!15440268.java!!!	DexFile(in fileName : String)
        mCookie = openDexFile(fileName, null, 0);
        mFileName = fileName;
        guard.open("close");
        //System.out.println("DEX FILE cookie is " + mCookie);
!!!15440396.java!!!	DexFile(in sourceName : String, in outputName : String, in flags : int)
        if (outputName != null) {
            try {
                String parent = new File(outputName).getParent();
                if (Libcore.os.getuid() != Libcore.os.stat(parent).st_uid) {
                    throw new IllegalArgumentException("Optimized data directory " + parent
                            + " is not owned by the current user. Shared storage cannot protect"
                            + " your application from code injection attacks.");
                }
            } catch (ErrnoException ignored) {
                // assume we'll fail with a more contextual error later
            }
        }

        mCookie = openDexFile(sourceName, outputName, flags);
        mFileName = sourceName;
        guard.open("close");
        //System.out.println("DEX FILE cookie is " + mCookie);
!!!15440524.java!!!	loadDex(in sourcePathName : String, in outputPathName : String, in flags : int) : DexFile

        /*
         * TODO: we may want to cache previously-opened DexFile objects.
         * The cache would be synchronized with close().  This would help
         * us avoid mapping the same DEX more than once when an app
         * decided to open it multiple times.  In practice this may not
         * be a real issue.
         */
        return new DexFile(sourcePathName, outputPathName, flags);
!!!15440652.java!!!	getName() : String
        return mFileName;
!!!15440780.java!!!	close() : void
        guard.close();
        closeDexFile(mCookie);
        mCookie = 0;
!!!15440908.java!!!	loadClass(in name : String, inout loader : ClassLoader) : Class
        String slashName = name.replace('.', '/');
        return loadClassBinaryName(slashName, loader);
!!!15441036.java!!!	loadClassBinaryName(in name : String, inout loader : ClassLoader) : Class
        return defineClass(name, loader, mCookie);
!!!15441292.java!!!	entries() : Enumeration<String>
        return new DFEnum(this);
!!!15441932.java!!!	finalize() : void
        try {
            if (guard != null) {
                guard.warnIfOpen();
            }
            close();
        } finally {
            super.finalize();
        }
