class HeaderParser
!!!2075419.java!!!	parseCacheControl(inout value : String, inout handler : CacheControlHandler) : void
        int pos = 0;
        while (pos < value.length()) {
            int tokenStart = pos;
            pos = skipUntil(value, pos, "=,");
            String directive = value.substring(tokenStart, pos).trim();

            if (pos == value.length() || value.charAt(pos) == ',') {
                pos++; // consume ',' (if necessary)
                handler.handle(directive, null);
                continue;
            }

            pos++; // consume '='
            pos = skipWhitespace(value, pos);

            String parameter;

            // quoted string
            if (pos < value.length() && value.charAt(pos) == '\"') {
                pos++; // consume '"' open quote
                int parameterStart = pos;
                pos = skipUntil(value, pos, "\"");
                parameter = value.substring(parameterStart, pos);
                pos++; // consume '"' close quote (if necessary)

            // unquoted string
            } else {
                int parameterStart = pos;
                pos = skipUntil(value, pos, ",");
                parameter = value.substring(parameterStart, pos).trim();
            }

            handler.handle(directive, parameter);
        }
!!!2075547.java!!!	parseChallenges(inout responseHeaders : RawHeaders, inout challengeHeader : String) : List
        /*
         * auth-scheme = token
         * auth-param  = token "=" ( token | quoted-string )
         * challenge   = auth-scheme 1*SP 1#auth-param
         * realm       = "realm" "=" realm-value
         * realm-value = quoted-string
         */
        List<Challenge> result = new ArrayList<Challenge>();
        for (int h = 0; h < responseHeaders.length(); h++) {
            if (!challengeHeader.equalsIgnoreCase(responseHeaders.getFieldName(h))) {
                continue;
            }
            String value = responseHeaders.getValue(h);
            int pos = 0;
            while (pos < value.length()) {
                int tokenStart = pos;
                pos = skipUntil(value, pos, " ");

                String scheme = value.substring(tokenStart, pos).trim();
                pos = skipWhitespace(value, pos);

                // TODO: This currently only handles schemes with a 'realm' parameter;
                //       It needs to be fixed to handle any scheme and any parameters
                //       http://code.google.com/p/android/issues/detail?id=11140

                if (!value.regionMatches(pos, "realm=\"", 0, "realm=\"".length())) {
                    break; // unexpected challenge parameter; give up
                }

                pos += "realm=\"".length();
                int realmStart = pos;
                pos = skipUntil(value, pos, "\"");
                String realm = value.substring(realmStart, pos);
                pos++; // consume '"' close quote
                pos = skipUntil(value, pos, ",");
                pos++; // consume ',' comma
                pos = skipWhitespace(value, pos);
                result.add(new Challenge(scheme, realm));
            }
        }
        return result;
!!!2075675.java!!!	skipUntil(inout input : String, in pos : int, inout characters : String) : int
        for (; pos < input.length(); pos++) {
            if (characters.indexOf(input.charAt(pos)) != -1) {
                break;
            }
        }
        return pos;
!!!2075803.java!!!	skipWhitespace(inout input : String, in pos : int) : int
        for (; pos < input.length(); pos++) {
            char c = input.charAt(pos);
            if (c != ' ' && c != '\t') {
                break;
            }
        }
        return pos;
!!!2075931.java!!!	parseSeconds(inout value : String) : int
        try {
            long seconds = Long.parseLong(value);
            if (seconds > Integer.MAX_VALUE) {
                return Integer.MAX_VALUE;
            } else if (seconds < 0) {
                return 0;
            } else {
                return (int) seconds;
            }
        } catch (NumberFormatException e) {
            return -1;
        }
