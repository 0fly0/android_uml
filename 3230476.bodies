class PreferenceHandler
!!!13890572.java!!!	PreferenceHandler(in resId : int, in prefKey : String, in summaryTemplate : String)
            mSummaryTemplate = summaryTemplate;

            addPreferencesFromResource(resId);
            mPreference = (ListPreference) findPreference(prefKey);
            mPreference.setOnPreferenceChangeListener(TvDisplaySettings.this);

            mEntries = mPreference.getEntries().clone();
            mValues = mPreference.getEntryValues().clone();

            updatePreference();
!!!13890700.java!!!	getKey() : String
            return mPreference.getKey();
!!!13890828.java!!!	readScreenResolution() : int
            int index = 0;
            String resolution = readStringFromFile(FB_RESOLUTION_PATH);
            try {
                index = Integer.parseInt(resolution);
            } catch (NumberFormatException e) {
                Log.w(TAG, "cannot read screen resolution setting");
            }
            return index;
!!!13890956.java!!!	filterUnsupportedModes(inout pref : ListPreference) : void
            // Ignore error in case there is no driver support to read current supported modes.
            String modeList = readStringFromFile(getSysDevicePath("modelist"));
            if (modeList != null) {
                Log.d(TAG, "mode list: " + modeList);
                // Populate preference list with supported resolutions.
                final Resources res = getResources();
                ArrayList<CharSequence> revisedEntries = new ArrayList<CharSequence>();
                ArrayList<CharSequence> revisedValues = new ArrayList<CharSequence>();
                revisedValues.add(mValues[0]);
                revisedEntries.add(mEntries[0]);
                for (int i = 1; i < mEntries.length; ++i) {
                    if (modeList.contains(mEntries[i])) {
                        Log.d(TAG, "Has " + mEntries[i]);
                        revisedValues.add(mValues[i]);
                        revisedEntries.add(mEntries[i]);
                    }
                }
                pref.setEntries(revisedEntries.toArray(new CharSequence[revisedValues.size()]));
                pref.setEntryValues(revisedValues.toArray(new CharSequence[revisedValues.size()]));
            }
!!!13891084.java!!!	updateSummary(in index : int) : void
            // Show current display mode in the summary text
            CharSequence summary = mEntries[index];
            if (index == 0) {
                // Ignore error in case there is no driver support to read current mode.
                String mode = readStringFromFile(getSysDevicePath("mode"));
                if (mode != null) {
                    String[] chunks = mode.split("x|i|p");
                    if (chunks.length >= 2) {
                        summary = String.format(mSummaryTemplate, chunks[0], chunks[1]);
                    }
                }
            } else {
                Log.d(TAG, "update summary " + summary);
            }
            mPreference.setSummary(summary);
!!!13891212.java!!!	isValidIndex(inout pref : ListPreference, in index : int) : boolean
            boolean validIndex = false;
            CharSequence[] values = pref.getEntryValues();
            try {
                for (CharSequence seq : values) {
                    if (Integer.parseInt((String) seq) == index) {
                        return true;
                    }
                }
            } catch (NumberFormatException e) {
                Log.w(TAG, "resolution value index is invalid");
            }
            return false;
!!!13891340.java!!!	updatePreference() : void
            filterUnsupportedModes(mPreference);
            int index = readScreenResolution();
            // Validate index
            if (!isValidIndex(mPreference, index)) {
                index = 0;
            }
            // mark the appropriate item in the preferences list
            mPreference.setValueIndex(index);
            updateSummary(index);
!!!13891468.java!!!	setPreference(in resolution : String) : boolean
            int value = Integer.parseInt(resolution);
            Log.d(TAG, "write resolution " + value);
            if (value != readScreenResolution()) {
                writeStringToFile(FB_RESOLUTION_PATH, Integer.toString(value));
                // Notify driver about resolution setting change;
                // ignore error in case there is no driver support.
                writeStringToFile(getSysDevicePath("resolution"), Integer.toString(value), true);
                updatePreference();
            }
            return true;
