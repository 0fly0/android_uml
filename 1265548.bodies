class MediaItemThumbnailTest
!!!7224076.java!!!	MediaItemThumbnailTest()
        super("com.android.mediaframeworktest", MediaFrameworkTest.class);
!!!7224204.java!!!	setUp() : void
        // setup for each test case.
        super.setUp();
        mVideoEditorHelper = new VideoEditorHelper();
        // Create a random String which will be used as project path, where all
        // project related files will be stored.
        final String projectPath = mVideoEditorHelper.
            createRandomFile(PROJECT_LOCATION);
        mVideoEditor = mVideoEditorHelper.createVideoEditor(projectPath);
!!!7224332.java!!!	tearDown() : void
        mVideoEditorHelper.destroyVideoEditor(mVideoEditor);
        // Clean the directory created as project path
        mVideoEditorHelper.deleteProject(new File(mVideoEditor.getPath()));
        System.gc();
        super.tearDown();
!!!7224460.java!!!	validateThumbnail(inout thumbNailBmp : Bitmap, in outWidth : int, in outHeight : int) : void
        assertNotNull("Thumbnail Retrived is Null", thumbNailBmp);
        assertEquals("Thumbnail Height", outHeight, thumbNailBmp.getHeight());
        assertEquals("Thumbnail Width", outWidth, thumbNailBmp.getWidth());
        thumbNailBmp.recycle();
!!!7224588.java!!!	testThumbnailForH263QCIF() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_0_26.3gp";
        final int atTime = 0;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);

        final int outWidth = (mediaVideoItem.getWidth() / 2);
        final int outHeight = mediaVideoItem.getHeight();

        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7224716.java!!!	testThumbnailForMPEG4VGA() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "MPEG4_SP_640x480_30fps_512Kbps_0_23.3gp";
        final int atTime = 0;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final int outWidth = (mediaVideoItem.getWidth() / 2);
        final int outHeight = mediaVideoItem.getHeight();
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7224844.java!!!	testThumbnailForMPEG4NTSC() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_96kbps_s_0_21.mp4";
        final int atTime = 0;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final int outWidth = mediaVideoItem.getWidth() / 2;
        final int outHeight = mediaVideoItem.getHeight() / 2;
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7224972.java!!!	testThumbnailForMPEG4WVGA() : void

        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_800x480_515kbps_15fps_AMR_NB_8KHz_12.2kbps_m_0_26.mp4";
        final int atTime = 0;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final int outWidth = mediaVideoItem.getWidth() * 2;
        final int outHeight = mediaVideoItem.getHeight();
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7225100.java!!!	testThumbnailForMPEG4QCIF() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";
        final int atTime = 0;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;

        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final int outWidth = mediaVideoItem.getWidth();
        final int outHeight = mediaVideoItem.getHeight() * 2;
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7225228.java!!!	testThumbnailForH264QCIF() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "H264_BP_176x144_15fps_144kbps_AMRNB_8kHz_12.2kbps_m_1_17.3gp";

        final int atTime = 0;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final int outWidth = mediaVideoItem.getWidth() * 2;
        final int outHeight = mediaVideoItem.getHeight() * 2;
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7225356.java!!!	testThumbnailForH264VGA() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_640x480_30fps_192kbps_1_5.mp4";
        final int outWidth = 32;
        final int outHeight = 32;
        final int atTime = 0;

        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);

        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7225484.java!!!	testThumbnailForH264WVGA() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_800x480_15fps_512kbps_AACLC_24KHz_38Kbps_s_1_17.mp4";
        final int outWidth = 64;
        final int outHeight = 64;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final long atTime = mediaVideoItem.getDuration() / 2;
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7225612.java!!!	testThumbnailForH264854_480() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_854x480_15fps_256kbps_AACLC_16khz_48kbps_s_0_26.mp4";
        final int outWidth = 128;
        final int outHeight = 128;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        MediaVideoItem mediaVideoItem = null;
        mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final long atTime = mediaVideoItem.getDuration() - 1000;
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7225740.java!!!	testThumbnailForH264HD960() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_960x720_25fps_800kbps_AACLC_48Khz_192Kbps_s_1_17.mp4";
        final int outWidth = 75;
        final int outHeight = 75;

        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final long atTime = mediaVideoItem.getDuration() - 1000;
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7225868.java!!!	testThumbnailForH264HD1080() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_1080x720_30fps_800kbps_1_17.mp4";
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final int outWidth = mediaVideoItem.getWidth() / 2;
        final int outHeight = mediaVideoItem.getHeight() / 2;
        final long atTime = mediaVideoItem.getDuration() / 4;
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7225996.java!!!	testThumbnailForH264VGADifferentDuration() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_640x480_30fps_256kbps_1_17.mp4";
        final int atTime = 0;
        final int atTime1 = 100;
        final int atTime2 = 200;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;

        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final int outWidth = mediaVideoItem.getWidth();
        final int outHeight = mediaVideoItem.getHeight();

        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);

        // get Thumbnail @ 100ms
        final Bitmap thumbNailBmpAt100 =
            mediaVideoItem.getThumbnail(outWidth, outHeight, atTime1);
        validateThumbnail(thumbNailBmpAt100, outWidth, outHeight);

        // get Thumbnail @ 200ms
        final Bitmap thumbNailBmpAt200 = mediaVideoItem.getThumbnail(
            outWidth, outHeight, atTime2);
        validateThumbnail(thumbNailBmpAt200, outWidth, outHeight);
!!!7226124.java!!!	testThumbnailForMP4VGA() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "MPEG4_SP_640x480_15fps_256kbps_0_30.mp4";
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, MediaItem.RENDERING_MODE_BLACK_BORDER);

        final int outWidth = mediaVideoItem.getWidth();
        final int outHeight = mediaVideoItem.getHeight();
        final long atTime = mediaVideoItem.getDuration() / 2;
        final long atTime1 = atTime + 100;
        final long atTime2 = atTime + 200;

        // get Thumbnail @ duration/2
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);

        // get Thumbnail @ duration/2 + 100ms
        final Bitmap thumbNailBmpAt100 = mediaVideoItem.getThumbnail(
            outWidth, outHeight, atTime1);
        validateThumbnail(thumbNailBmpAt100, outWidth, outHeight);

        // get Thumbnail @ duration/2 + 200ms
        final Bitmap thumbNailBmpAt200 = mediaVideoItem.getThumbnail(
            outWidth, outHeight, atTime2);
        validateThumbnail(thumbNailBmpAt200, outWidth, outHeight);
!!!7226252.java!!!	testThumbnailForImage() : void
        final String imageItemFilename = INPUT_FILE_PATH + "IMG_640x480.jpg";
        final int mediaDuration = 1000;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        boolean flagForException = false;
        int outWidth = 0;
        int outHeight = 0;

        final MediaImageItem mii = mVideoEditorHelper.createMediaItem(
            mVideoEditor, "m1", imageItemFilename, mediaDuration, renderingMode);
        assertNotNull("Media Image Item is Null",  mii);
        outWidth =  mii.getWidth() / 2;
        outHeight =  mii.getHeight() / 2;

        final Bitmap thumbNailBmp = mii.getThumbnail(outWidth,
            outHeight, mediaDuration);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7226380.java!!!	testThumbnailListH263QCIF() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_1_17.3gp";
        final int startTime = 0;
        final int tnCount = 10;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);

        final int outWidth = mediaVideoItem.getWidth() / 4;
        final int outHeight = mediaVideoItem.getHeight() / 4;
        final long endTime = mediaVideoItem.getDuration() / 2;

        final Bitmap thumbNailBmp[] = mediaVideoItem.getThumbnailList(
            outWidth, outHeight, startTime, endTime, tnCount);
        assertNotNull("Thumbnail Retrived is Null", thumbNailBmp);
        assertEquals("Thumbnail Count", tnCount, thumbNailBmp.length);

        for (int i = 0; i < thumbNailBmp.length; i++) {
            validateThumbnail(thumbNailBmp[i], outWidth, outHeight);
            thumbNailBmp[i] = null;
        }
!!!7226508.java!!!	testThumbnailListMPEG4QCIF() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";
        final int tnCount = 10;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;

        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);

        final int outWidth = mediaVideoItem.getWidth() / 2;
        final int outHeight = mediaVideoItem.getHeight() / 2;
        final long startTime = mediaVideoItem.getDuration() / 2;
        final long endTime = mediaVideoItem.getDuration();

        final Bitmap thumbNailBmp[] = mediaVideoItem.getThumbnailList(
            outWidth, outHeight, startTime, endTime, tnCount);

        assertNotNull("Thumbnail Retrived is Null", thumbNailBmp);
        assertEquals("Thumbnail Count", tnCount, thumbNailBmp.length);
        for (int i = 0; i < thumbNailBmp.length; i++) {
            validateThumbnail(thumbNailBmp[i], outWidth, outHeight);
            thumbNailBmp[i] = null;
        }
!!!7226636.java!!!	testThumbnailListH264VGA() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_640x480_30fps_256kbps_1_17.mp4";
        final int tnCount = 10;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);

        final int outWidth = mediaVideoItem.getWidth() / 2;
        final int outHeight = mediaVideoItem.getHeight() / 2;
        final long startTime = mediaVideoItem.getDuration() / 3;
        final long endTime = mediaVideoItem.getDuration() / 2;

        final Bitmap thumbNailBmp[] = mediaVideoItem.getThumbnailList(
            outWidth, outHeight, startTime, endTime, tnCount);
        assertNotNull("Thumbnail Retrived is Null", thumbNailBmp);
        assertEquals("Thumbnail Count", tnCount, thumbNailBmp.length);
        for (int i = 0; i < thumbNailBmp.length; i++) {
            validateThumbnail(thumbNailBmp[i], outWidth, outHeight);
            thumbNailBmp[i] = null;
        }
!!!7226764.java!!!	testThumbnailListH264WVGA() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_800x480_15fps_512kbps_AACLC_24KHz_38Kbps_s_1_17.mp4";
        final int tnCount = 10;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);

        final int outWidth = mediaVideoItem.getWidth() / 2;
        final int outHeight = mediaVideoItem.getHeight() / 2;
        final long startTime = mediaVideoItem.getDuration() / 3;
        final long endTime = mediaVideoItem.getDuration() / 2;

        final Bitmap thumbNailBmp[] = mediaVideoItem.getThumbnailList(
            outWidth, outHeight, startTime, endTime, tnCount);
        assertNotNull("Thumbnail Retrived is Null", thumbNailBmp);
        assertEquals("Thumbnail Count", tnCount, thumbNailBmp.length);
        for (int i = 0; i < thumbNailBmp.length; i++) {
            validateThumbnail(thumbNailBmp[i], outWidth, outHeight);
            thumbNailBmp[i] = null;
        }
!!!7226892.java!!!	testThumbnailH264VGAExceedingFileDuration() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_640x480_30fps_256kbps_1_17.mp4";
        boolean flagForException = false;
        int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;

        try {
            final MediaVideoItem mediaVideoItem =
                mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                    videoItemFilename, renderingMode);
            final int outWidth = mediaVideoItem.getWidth() / 2;
            final int outHeight = mediaVideoItem.getHeight() / 2;
            final long atTime = mediaVideoItem.getDuration() + 2000;
            mediaVideoItem.getThumbnail(outWidth, outHeight, atTime);
        } catch (IllegalArgumentException e) {
            flagForException = true;
        }
        assertTrue("Exception in Extracting thumbanil with Invalid Time",
            flagForException);
!!!7227020.java!!!	testThumbnailListVGAImage() : void
        final String imageItemFilename = INPUT_FILE_PATH + "IMG_640x480.jpg";
        final int imageItemDuration = 10000;
        final int startTime = 0;
        final int endTime = 0;
        final int tnCount = 10;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;

        final MediaImageItem mediaImageItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                imageItemFilename, imageItemDuration, renderingMode);
        final int outWidth = mediaImageItem.getWidth() / 2;
        final int outHeight = mediaImageItem.getHeight() / 2;

        final Bitmap thumbNailBmp[] = mediaImageItem.getThumbnailList
            (outWidth, outHeight, startTime, endTime, tnCount);
        assertNotNull("Thumbnail Retrived is Null", thumbNailBmp);
        assertEquals("Thumbnail Count", tnCount, thumbNailBmp.length);
        for (int i = 0; i < thumbNailBmp.length; i++) {
            validateThumbnail(thumbNailBmp[i], outWidth, outHeight);
            thumbNailBmp[i] = null;
        }
!!!7227148.java!!!	testThumbnailForInvalidFilePath() : void
        final String imageItemFileName = INPUT_FILE_PATH + "/sdcard/abc.jpg";
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        boolean flagForException = false;
        try{
        final MediaImageItem mii = new MediaImageItem(mVideoEditor, "m1",
            imageItemFileName, 3000, renderingMode);
        } catch (IllegalArgumentException e) {
            flagForException = true;
        } catch (IOException e) {
            flagForException = true;
        }
        assertTrue(" Invalid File Path", flagForException);
!!!7227276.java!!!	testThumbnailForMPEG4WVGAWithSetBoundaries() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "MPEG4_SP_800x480_515kbps_15fps_AMR_NB_8KHz_12.2kbps_m_0_26.mp4";
        final int atTime = 10000;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);

        mediaVideoItem.setExtractBoundaries(1000,
            (mediaVideoItem.getDuration() - 21000));

        final int outWidth = (mediaVideoItem.getWidth() / 2);
        final int outHeight = (mediaVideoItem.getHeight() / 2);
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail(outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7227404.java!!!	testThumbnailListForH264WVGAWithSetBoundaries() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_800x480_15fps_512kbps_1_17.mp4";
        final int thumbNailStartTime = 10000;
        final int thumbNailEndTime = 12000;
        final int tnCount = 10;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);

        final int outWidth = (mediaVideoItem.getWidth() / 2);
        final int outHeight = (mediaVideoItem.getHeight() / 2);

        mediaVideoItem.setExtractBoundaries(10000, 12000);

        final Bitmap thumbNailBmp[] = mediaVideoItem.getThumbnailList
            (outWidth, outHeight, thumbNailStartTime, thumbNailEndTime,
             tnCount);
        assertNotNull("Thumbnail Retrived is Null", thumbNailBmp);
        assertTrue("Thumbnail Size", (thumbNailBmp.length > 0) ? true : false);
        for (int i = 0; i < thumbNailBmp.length; i++) {
            validateThumbnail(thumbNailBmp[i], outWidth, outHeight);
            thumbNailBmp[i] = null;
        }
!!!7227532.java!!!	testThumbnailListForH264WVGAWithCount() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_800x480_15fps_512kbps_AACLC_24KHz_38Kbps_s_1_17.mp4";
        final int tnCount = 70;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);

        final int outWidth = (mediaVideoItem.getWidth() / 2);
        final int outHeight = (mediaVideoItem.getHeight() / 2);
        final long thumbNailStartTime = mediaVideoItem.getDuration() / 2;
        final long thumbNailEndTime = thumbNailStartTime + 4000;
        Bitmap thumbNailBmp[] = null;
        boolean flagForException = false;
        try{
            thumbNailBmp = mediaVideoItem.getThumbnailList(outWidth, outHeight,
                thumbNailStartTime, thumbNailEndTime, tnCount);
        }catch (Exception e){
            assertTrue("Unable to get Thumbnail list", flagForException);
        }
        if (thumbNailBmp.length <= tnCount) {
            flagForException = true;
        }
        assertTrue("Thumbnail count more than asked", flagForException);
!!!7227660.java!!!	testThumbnailListH264WVGAWithStartGreaterEnd() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_800x480_15fps_512kbps_AACLC_24KHz_38Kbps_s_1_17.mp4";
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final int tnCount = 10;
        boolean flagForException = false;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final int outWidth = (mediaVideoItem.getWidth() / 2);
        final int outHeight = (mediaVideoItem.getHeight() / 2);
        final long thumbNailStartTime = mediaVideoItem.getDuration() / 2;
        final long thumbNailEndTime = thumbNailStartTime - 1000;
        try{
            mediaVideoItem.getThumbnailList(outWidth, outHeight,
                thumbNailStartTime, thumbNailEndTime, tnCount);
        } catch (IllegalArgumentException e) {
            flagForException = true;
        }
        assertTrue("Thumbnail Extraction where start time > end time",
            flagForException);
!!!7227788.java!!!	testThumbnailListH264WVGAWithStartEqualEnd() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "H264_BP_800x480_15fps_512kbps_AACLC_24KHz_38Kbps_s_1_17.mp4";
        final int tnCount = 1;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;

        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final int outWidth = (mediaVideoItem.getWidth() / 2);
        final int outHeight = (mediaVideoItem.getHeight() / 2);
        final long thumbNailStartTime = mediaVideoItem.getDuration() / 2;
        final long thumbNailEndTime = thumbNailStartTime;
        final Bitmap thumbNailBmp[] = mediaVideoItem.getThumbnailList(outWidth,
            outHeight, thumbNailStartTime, thumbNailEndTime, tnCount);
        assertNotNull("Thumbnail Retrived is Null", thumbNailBmp);
        assertEquals("Thumbnail Count", tnCount, thumbNailBmp.length);
        for (int i = 0; i < thumbNailBmp.length; i++) {
            validateThumbnail(thumbNailBmp[i], outWidth, outHeight);
            thumbNailBmp[i] = null;
        }
!!!7227916.java!!!	testThumbnailForVideoDurationLessFileDuration() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "H264_BP_640x480_15fps_1200Kbps_AACLC_48KHz_64kps_m_0_27.3gp";
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
            final MediaVideoItem mediaVideoItem =
                mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                    videoItemFilename, renderingMode);
            final int outWidth = (mediaVideoItem.getWidth() / 2);
            final int outHeight = (mediaVideoItem.getHeight() / 2);
            final long atTime = mediaVideoItem.getDuration() - 2000;
            final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail (outWidth,
                outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);

!!!7228044.java!!!	testThumbnailWithCorruptedVideoPart() : void
        final String videoItemFilename = INPUT_FILE_PATH +
            "corrupted_H264_BP_640x480_12.5fps_256kbps_AACLC_16khz_24kbps_s_0_26.mp4";
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        boolean flagForException = false;

        try {
            final MediaVideoItem mediaVideoItem =
                 mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                    videoItemFilename, renderingMode);
            final int outWidth = mediaVideoItem.getWidth();
            final int outHeight = mediaVideoItem.getHeight() * 2;
            final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail
                (outWidth, outHeight, mediaVideoItem.getDuration()/2);
        } catch (IllegalArgumentException e) {
            flagForException = true;
        }
        assertTrue("Corrupted File cannot be read", flagForException);
!!!7228172.java!!!	testThumbnailWithNegativeHeight() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";
        final int tnCount = 10;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        boolean flagForException = false;
        try {
            final MediaVideoItem mediaVideoItem =
                mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                    videoItemFilename, renderingMode);
            final int outWidth = (mediaVideoItem.getWidth() / 2);
            final int outHeight = -1;
            final long thumbNailStartTime =
                mediaVideoItem.getBoundaryBeginTime()/2;
            final long thumbNailEndTime = mediaVideoItem.getBoundaryEndTime();
            mediaVideoItem.getThumbnailList(outWidth, outHeight,
                thumbNailStartTime, thumbNailEndTime, tnCount);
        } catch (IllegalArgumentException e) {
            flagForException = true;
        }
        assertTrue("Thumbnail List with negative Height", flagForException);
!!!7228300.java!!!	testThumbnailWithHeightAsZero() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";
        final int atTime = 100;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        boolean flagForException = false;
        try {
            final MediaVideoItem mediaVideoItem =
                mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                    videoItemFilename, renderingMode);
            final int outWidth = (mediaVideoItem.getWidth() / 2);
            final int outHeight = -1;
            mediaVideoItem.getThumbnail(outWidth, outHeight, atTime);
        } catch (IllegalArgumentException e) {
            flagForException = true;
        }
        assertTrue("Thumbnail List with Zero Height", flagForException);
!!!7228428.java!!!	testThumbnailWithHeight() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";
        final int atTime = 1000;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
            final MediaVideoItem mediaVideoItem =
                mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                    videoItemFilename, renderingMode);
            final int outWidth = (mediaVideoItem.getWidth() / 2);
            final int outHeight = 10;
            final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail (outWidth,
                outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7228556.java!!!	testThumbnailWithNegativeWidth() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";
        final int tnCount = 10;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        boolean flagForException = false;
        try {
            final MediaVideoItem mediaVideoItem =
                mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                    videoItemFilename, renderingMode);
            final int outWidth = -1;
            final int outHeight = mediaVideoItem.getHeight();
            final long thumbNailStartTime =
                mediaVideoItem.getBoundaryBeginTime()/2;
            final long thumbNailEndTime = mediaVideoItem.getBoundaryEndTime();
            mediaVideoItem.getThumbnailList(outWidth, outHeight, thumbNailStartTime,
                thumbNailEndTime, tnCount);
        } catch (IllegalArgumentException e) {
            flagForException = true;
        }
        assertTrue("Thumbnail List with negative Height", flagForException);
!!!7228684.java!!!	testThumbnailWithWidthAsZero() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";
        final int atTime = 1000;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        boolean flagForException = false;
        try {
            final MediaVideoItem mediaVideoItem =
                mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                    videoItemFilename, renderingMode);
            final int outWidth = 0;
            final int outHeight = mediaVideoItem.getHeight() / 2;
            mediaVideoItem.getThumbnail(outWidth, outHeight, atTime);
        } catch (IllegalArgumentException e) {
            flagForException = true;
        }
        assertTrue("Thumbnail List with Zero Width", flagForException);
!!!7228812.java!!!	testThumbnailWithWidth() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";
        final int atTime = 1000;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final int outWidth = 10;
        final int outHeight = mediaVideoItem.getHeight();
        final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail (outWidth,
            outHeight, atTime);
        validateThumbnail(thumbNailBmp, outWidth, outHeight);
!!!7228940.java!!!	testThumbnailMPEG4withMorethanFileDuration() : void
        final String videoItemFilename = INPUT_FILE_PATH
            + "MPEG4_SP_176x144_30fps_256kbps_AACLC_44.1kHz_96kbps_s_1_17.3gp";
        boolean flagForException = false;
        final int renderingMode = MediaItem.RENDERING_MODE_BLACK_BORDER;
        final MediaVideoItem mediaVideoItem =
            mVideoEditorHelper.createMediaItem(mVideoEditor, "m1",
                videoItemFilename, renderingMode);
        final int outWidth =  mediaVideoItem.getWidth()/2;
        final int outHeight =  mediaVideoItem.getHeight()/2;
        final long atTime = mediaVideoItem.getDuration() + 100;
        try{
            final Bitmap thumbNailBmp = mediaVideoItem.getThumbnail (outWidth,
            outHeight, atTime);
        } catch (IllegalArgumentException e) {
            flagForException = true;
        }
        assertTrue("Thumbnail duration is more than file duration",
            flagForException);
