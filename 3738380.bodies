class Nat464Xlat
!!!15938572.java!!!	Nat464Xlat(inout context : Context, inout nmService : INetworkManagementService, inout connService : IConnectivityManager, inout handler : Handler)
        mContext = context;
        mNMService = nmService;
        mConnService = connService;
        mHandler = handler;

        mIsStarted = false;
        mIsRunning = false;
        mLP = new LinkProperties();
!!!15938700.java!!!	requiresClat(in netType : int, inout tracker : NetworkStateTracker) : boolean
        LinkProperties lp = tracker.getLinkProperties();
        // Only support clat on mobile for now.
        Slog.d(TAG, "requiresClat: netType=" + netType + ", hasIPv4Address=" +
               lp.hasIPv4Address());
        return netType == TYPE_MOBILE && !lp.hasIPv4Address();
!!!15938828.java!!!	isRunningClat(inout lp : LinkProperties) : boolean
      return lp != null && lp.getAllInterfaceNames().contains(CLAT_INTERFACE_NAME);
!!!15938956.java!!!	startClat(inout tracker : NetworkStateTracker) : void
        if (mIsStarted) {
            Slog.e(TAG, "startClat: already started");
            return;
        }
        mTracker = tracker;
        LinkProperties lp = mTracker.getLinkProperties();
        String iface = lp.getInterfaceName();
        Slog.i(TAG, "Starting clatd on " + iface + ", lp=" + lp);
        try {
            mNMService.startClatd(iface);
        } catch(RemoteException e) {
            Slog.e(TAG, "Error starting clat daemon: " + e);
        }
        mIsStarted = true;
!!!15939084.java!!!	stopClat() : void
        if (mIsStarted) {
            Slog.i(TAG, "Stopping clatd");
            try {
                mNMService.stopClatd();
            } catch(RemoteException e) {
                Slog.e(TAG, "Error stopping clat daemon: " + e);
            }
            mIsStarted = false;
            mIsRunning = false;
            mTracker = null;
            mLP.clear();
        } else {
            Slog.e(TAG, "stopClat: already stopped");
        }
!!!15939212.java!!!	isStarted() : boolean
        return mIsStarted;
!!!15939340.java!!!	isRunning() : boolean
        return mIsRunning;
!!!15939468.java!!!	interfaceAdded(inout iface : String) : void
        if (iface.equals(CLAT_INTERFACE_NAME)) {
            Slog.i(TAG, "interface " + CLAT_INTERFACE_NAME +
                   " added, mIsRunning = " + mIsRunning + " -> true");
            mIsRunning = true;

            // Get the network configuration of the clat interface, store it
            // in our link properties, and stack it on top of the interface
            // it's running on.
            try {
                InterfaceConfiguration config = mNMService.getInterfaceConfig(iface);
                mLP.clear();
                mLP.setInterfaceName(iface);
                RouteInfo ipv4Default = new RouteInfo(new LinkAddress(Inet4Address.ANY, 0), null,
                                                      iface);
                mLP.addRoute(ipv4Default);
                mLP.addLinkAddress(config.getLinkAddress());
                mTracker.addStackedLink(mLP);
                Slog.i(TAG, "Adding stacked link. tracker LP: " +
                       mTracker.getLinkProperties());
            } catch(RemoteException e) {
                Slog.e(TAG, "Error getting link properties: " + e);
            }

            // Inform ConnectivityService that things have changed.
            Message msg = mHandler.obtainMessage(
                NetworkStateTracker.EVENT_CONFIGURATION_CHANGED,
                mTracker.getNetworkInfo());
            Slog.i(TAG, "sending message to ConnectivityService: " + msg);
            msg.sendToTarget();
        }
!!!15939596.java!!!	interfaceRemoved(inout iface : String) : void
        if (iface == CLAT_INTERFACE_NAME) {
            if (mIsRunning) {
                NetworkUtils.resetConnections(
                    CLAT_INTERFACE_NAME,
                    NetworkUtils.RESET_IPV4_ADDRESSES);
            }
            Slog.i(TAG, "interface " + CLAT_INTERFACE_NAME +
                   " removed, mIsRunning = " + mIsRunning + " -> false");
            mIsRunning = false;
            mTracker.removeStackedLink(mLP);
            mLP.clear();
            Slog.i(TAG, "mLP = " + mLP);
        }
