class AvsAppActivity
!!!12009100.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);

        mAudioOutput = new AudioOutput();
        mVideoOutput = new VideoOutput();
        mSourceControl = new SourceControl();
        mAVSettingsObserver = new AVSettingsObserver();

        mOutput = (TextView)findViewById(R.id.output);

        mGetDisplayMode = (Button)findViewById(R.id.get_display_mode);
        mGetDisplayMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                DisplayMode cur = mVideoOutput.getDisplayMode();
                if (DEBUG) Log.d(TAG, "current display mode: " + cur.toEncodedString());
                mOutput.setText(cur.toEncodedString());
            }
        });

        mGetPrefDisplayMode = (Button)findViewById(R.id.get_pref_display_mode);
        mGetPrefDisplayMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                DisplayMode curPref = mVideoOutput.getPreferredDisplayMode();
                String display = curPref == null ?
                        "Auto" : curPref.toEncodedString();
                if (DEBUG) Log.d(TAG, "current pref display mode: " + display);
                mOutput.setText(display);
            }
        });

        mGetTvModes = (Button)findViewById(R.id.get_tv_modes);
        mGetTvModes.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                DisplayMode[] modes = mVideoOutput.getTvSupportedModes();
                StringBuffer sb = new StringBuffer();
                for (DisplayMode mode : modes) {
                    sb.append(mode.toEncodedString() + "\n");
                }
                if (DEBUG) Log.d(TAG, "tv modes: " + sb.toString());
                mOutput.setText(sb.toString());
            }
        });

        mInputLock = (Switch) findViewById(R.id.input_lock);
        mInputLock.setChecked(
                mSourceControl.getGenericProperty(SOURCE_ID_HDMI,
                SourceControl.GENERIC_PROP_INPUT_LOCK) == SourceControl.INPUT_LOCK_ENABLED);
        mInputLock.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                boolean enabled = mInputLock.isChecked();
                boolean ret = mSourceControl.setGenericProperty(
                        SOURCE_ID_HDMI, SourceControl.GENERIC_PROP_INPUT_LOCK, enabled ? 1 : 0);
                StringBuffer sb = new StringBuffer();
                sb.append("input lock: ");
                int cur = mSourceControl.getGenericProperty(SOURCE_ID_HDMI,
                        SourceControl.GENERIC_PROP_INPUT_LOCK);
                sb.append(cur == SourceControl.INPUT_LOCK_ENABLED ?
                         "enabled" : "disabled");
                mOutput.setText(sb.toString());
            }
        });

        mUnlockInput = (Button)findViewById(R.id.unlock_input);
        mUnlockInput.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                boolean ret = mSourceControl.setInputLocked(SOURCE_ID_HDMI, false);
                if (DEBUG) Log.d(TAG, "unlock hdmi source, ret: " + ret);
            }
        });

        mGetCurrentSource = (Button)findViewById(R.id.get_current_source);
        mGetCurrentSource.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                int sourceId = mSourceControl.getCurrentSource();
                if (DEBUG) Log.d(TAG, "get current source, " + sourceId);
                mOutput.setText("" + sourceId);
            }
        });

        mGetHdmiAoutMode = (Button)findViewById(R.id.get_hdmi_aout_mode);
        mGetHdmiAoutMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                String cur = mAudioOutput.getAudioOutputMode();
                if (DEBUG) Log.d(TAG, "current audio hdmi output mode: " + cur);
                mOutput.setText(cur);
            }
        });

        mGetDrcMode = (Button)findViewById(R.id.get_drc_mode);
        mGetDrcMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                String cur = mAudioOutput.getAudioDRCMode();
                if (DEBUG) Log.d(TAG, "current audio drc output mode: " + cur);
                mOutput.setText(cur);
            }
        });

        mSetDrcMode = (Button)findViewById(R.id.set_drc_mode);
        mSetDrcMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                mAudioOutput.setAudioDRCMode(AudioOutput.VALUE_DRC_OFF);
                if (DEBUG) Log.d(TAG, "Set Drc Mode off");
            }
        });

        mGetStereoMode = (Button)findViewById(R.id.get_stereo_mode);
        mGetStereoMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                String cur = mAudioOutput.getAudioStereoMode();
                if (DEBUG) Log.d(TAG, "current audio stereo output mode: " + cur);
                mOutput.setText(cur);
            }
        });

        mSetStereoMode = (Button)findViewById(R.id.set_stereo_mode);
        mSetStereoMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                mAudioOutput.setAudioStereoMode(AudioOutput.VALUE_STEREO_LTRT);
                if (DEBUG) Log.d(TAG, "Set Stereo Mode ltrt");
            }
        });

        mGetDualMode = (Button)findViewById(R.id.get_dual_mode);
        mGetDualMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                String cur = mAudioOutput.getAudioDualMode();
                if (DEBUG) Log.d(TAG, "current audio dual output mode: " + cur);
                mOutput.setText(cur);
            }
        });

        mSetDualMode = (Button)findViewById(R.id.set_dual_mode);
        mSetDualMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                mAudioOutput.setAudioDualMode(AudioOutput.VALUE_DUAL_LEFTMONO);
                if (DEBUG) Log.d(TAG, "Set Stereo Mode leftmono");
            }
        });

        mGetLFEDownmixMode = (Button)findViewById(R.id.get_lfe_downmix_mode);
        mGetLFEDownmixMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                String cur = mAudioOutput.getAudioLFEDownmixMode();
                if (DEBUG) Log.d(TAG, "current audio lfe downmix mode: " + cur);
                mOutput.setText(cur);
            }
        });

        mSetLFEDownmixMode = (Button)findViewById(R.id.set_lfe_downmix_mode);
        mSetLFEDownmixMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                mAudioOutput.setAudioLFEDownmixMode(AudioOutput.VALUE_LFE_DOWNMIX_OFF);
                if (DEBUG) Log.d(TAG, "Set LFE downmix mode off");
            }
        });

        mGetSpeakerMode = (Button)findViewById(R.id.get_speaker_mode);
        mGetSpeakerMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                String cur = mAudioOutput.getAudioSpeakerMode();
                if (DEBUG) Log.d(TAG, "current audio speaker mode: " + cur);
                mOutput.setText(cur);
            }
        });

        mSetSpeakerMode = (Button)findViewById(R.id.set_speaker_mode);
        mSetSpeakerMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                mAudioOutput.setAudioSpeakerMode(AudioOutput.VALUE_SPEAKER_5_1);
                if (DEBUG) Log.d(TAG, "Set Speaker Mode 5.1");
            }
        });

        mGetChannelMode = (Button)findViewById(R.id.get_channel_mode);
        mGetChannelMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                String cur = mAudioOutput.getAudioChannelMode();
                if (DEBUG) Log.d(TAG, "current audio channel mode: " + cur);
                mOutput.setText(cur);
            }
        });

        mSetChannelMode = (Button)findViewById(R.id.set_channel_mode);
        mSetChannelMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                mAudioOutput.setAudioChannelMode(AudioOutput.VALUE_CHANNEL_5_1);
                if (DEBUG) Log.d(TAG, "Set Channel Mode 5.1");
            }
        });

        mRegValueObserver = (Button)findViewById(R.id.register_value_obs);
        mRegValueObserver.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                if (mMyValueChangedObserver == null) {
                    mMyValueChangedObserver = new MyValueChangedObserver();
                    mValueObsHandle =  mAVSettingsObserver.registerValueObserver(
                                        "mrvl.", mMyValueChangedObserver);

                } else {
                    mAVSettingsObserver.unRegisterValueObserver(mValueObsHandle);
                    mMyValueChangedObserver = null;
                }
            }
        });

        mRegHandlerObserver = (Button)findViewById(R.id.register_handler_obs);
        mRegHandlerObserver.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                if (mMyOutputHandlerObserver == null) {
                    mMyOutputHandlerObserver = new MyOutputHandlerObserver();
                    mOutputHandlerObsHandle = mAVSettingsObserver.registerHandlerObserver(
                            "mrvl.output", mMyOutputHandlerObserver);

                } else {
                    mAVSettingsObserver.unRegisterHandlerObserver(mOutputHandlerObsHandle);
                    mMyOutputHandlerObserver = null;
                }
                if (mMySourceHandlerObserver == null) {
                    mMySourceHandlerObserver = new MySourceHandlerObserver();
                    mSourceHandlerObsHandle = mAVSettingsObserver.registerHandlerObserver(
                            "mrvl.source", mMySourceHandlerObserver);

                } else {
                    mAVSettingsObserver.unRegisterHandlerObserver(mSourceHandlerObsHandle);
                    mMySourceHandlerObserver = null;
                }
            }
        });

        mGetSupportedSources = (Button) findViewById(R.id.get_supported_sources);
        mGetSupportedSources.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                SourceAttr[] attrs = mSourceControl.getSupportedSources();
                StringBuffer sb = new StringBuffer();
                for (SourceAttr attr : attrs) {
                    sb.append(attr.toString() + "\n");
                }
                if (DEBUG) Log.d(TAG, "supported sources: " + sb.toString());
                mOutput.setText(sb.toString());
            }
        });

        mSetSourceAudioProperty = (Button) findViewById(R.id.set_source_audio_property);
        mSetSourceAudioProperty.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                boolean ret = mSourceControl.setAudioProperty(1, 2, 3);
                StringBuffer sb = new StringBuffer();
                sb.append("setSourceAudioProperty(1, 2, 3) ");
                sb.append("ret: " + ret);
                if (DEBUG) Log.d(TAG, sb.toString());
                mOutput.setText(sb.toString());
            }
        });

        mSetPictureProperty = (Button) findViewById(R.id.set_picture_property);
        mSetPictureProperty.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                StringBuffer sb = new StringBuffer();

                sb.append("==== origin ====\n");
                for (VideoPropType type : VideoPropType.values()) {
                    sb.append("type: " + type +
                            ", value:" + mVideoOutput.getVideoProperty(type) + "\n");
                }
                try {
                    for (int i = 0; i < 5; i++) {
                        for (VideoPropType type : VideoPropType.values()) {
                            mVideoOutput.setVideoProperty(type, 10 + 20 * i);
                        }
                        Thread.sleep(5000);

                        sb.append("==== adjusted ====\n");
                        for (VideoPropType type : VideoPropType.values()) {
                            sb.append("type: " + type +
                                    ", value:" + mVideoOutput.getVideoProperty(type) + "\n");
                        }
                    }
                } catch (Exception e) {}
                mOutput.setText(sb.toString());
            }
        });

        mGlobalScalingMode = (Button) findViewById(R.id.global_scaling_mode);
        mGlobalScalingMode.setText(
                VideoOutput.KEY_SCALING_MODE + ": " +
                mVideoOutput.getScalingMode());
        mGlobalScalingMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                String target = mVideoOutput.getScalingMode().equals(
                        VideoOutput.VALUE_SCALING_MODE_STRETCH) ?
                        VideoOutput.VALUE_SCALING_MODE_AUTO :
                        VideoOutput.VALUE_SCALING_MODE_STRETCH;
                boolean ret = mVideoOutput.setScalingMode(target);
                mGlobalScalingMode.setText(
                        VideoOutput.KEY_SCALING_MODE + ": " +
                        mVideoOutput.getScalingMode());
                mOutput.setText("ret: " + ret);
            }
        });

        final int source_id = SOURCE_ID_FILE_MAIN;
        mFileSourceScalingMode = (Button) findViewById(R.id.file_source_scaling_mode);
        mFileSourceScalingMode.setText(
                "File source scaling mode: " +
                mSourceControl.getGenericProperty(
                source_id, SourceControl.GENERIC_PROP_SCALING_MODE));
        mFileSourceScalingMode.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                int cur = mSourceControl.getGenericProperty(
                        source_id, SourceControl.GENERIC_PROP_SCALING_MODE);
                int target = cur == 1 ? -1 : cur + 1;
                boolean ret = mSourceControl.setGenericProperty(
                        source_id,
                        SourceControl.GENERIC_PROP_SCALING_MODE,
                        target);
                mFileSourceScalingMode.setText(
                        "File source scaling mode: " +
                        mSourceControl.getGenericProperty(
                        source_id, SourceControl.GENERIC_PROP_SCALING_MODE));
                mOutput.setText("ret: " + ret);
            }
        });
!!!12009228.java!!!	onStop() : void
        super.onStop();
        if (mMyValueChangedObserver != null) {
            mAVSettingsObserver.unRegisterValueObserver(mValueObsHandle);
            mMyValueChangedObserver = null;
        }
        if (mMyOutputHandlerObserver != null) {
            mAVSettingsObserver.unRegisterHandlerObserver(mOutputHandlerObsHandle);
            mMyOutputHandlerObserver = null;
        }
        if (mMySourceHandlerObserver != null) {
            mAVSettingsObserver.unRegisterHandlerObserver(mSourceHandlerObsHandle);
            mMySourceHandlerObserver = null;
        }
