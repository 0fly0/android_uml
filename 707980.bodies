class ViewLocationHolder
!!!2307724.java!!!	obtain(inout root : ViewGroup, inout view : View) : ViewLocationHolder
            ViewLocationHolder holder = null;
            synchronized (sPoolLock) {
                if (sPool != null) {
                    holder = sPool;
                    sPool = holder.mNext;
                    holder.mNext = null;
                    holder.mIsPooled = false;
                    sPoolSize--;
                } else {
                    holder = new ViewLocationHolder();
                }
                holder.init(root, view);
                return holder;
            }
!!!2307852.java!!!	recycle() : void
            if (mIsPooled) {
                throw new IllegalStateException("Instance already recycled.");
            }
            clear();
            synchronized (sPoolLock) {
                if (sPoolSize < MAX_POOL_SIZE) {
                    mNext = sPool;
                    mIsPooled = true;
                    sPool = this;
                    sPoolSize++;
                }
            }
!!!2307980.java!!!	compareTo(inout another : ViewLocationHolder) : int
            // This instance is greater than an invalid argument.
            if (another == null) {
                return 1;
            }
            if (getClass() != another.getClass()) {
                return 1;
            }
            // First is above second.
            if (mLocation.bottom - another.mLocation.top <= 0) {
                return -1;
            }
            // First is below second.
            if (mLocation.top - another.mLocation.bottom >= 0) {
                return 1;
            }
            // LTR
            if (mLayoutDirection == LAYOUT_DIRECTION_LTR) {
                final int leftDifference = mLocation.left - another.mLocation.left;
                // First more to the left than second.
                if (leftDifference != 0) {
                    return leftDifference;
                }
            } else { // RTL
                final int rightDifference = mLocation.right - another.mLocation.right;
                // First more to the right than second.
                if (rightDifference != 0) {
                    return -rightDifference;
                }
            }
            // Break tie by top.
            final int topDiference = mLocation.top - another.mLocation.top;
            if (topDiference != 0) {
                return topDiference;
            }
            // Break tie by height.
            final int heightDiference = mLocation.height() - another.mLocation.height();
            if (heightDiference != 0) {
                return -heightDiference;
            }
            // Break tie by width.
            final int widthDiference = mLocation.width() - another.mLocation.width();
            if (widthDiference != 0) {
                return -widthDiference;
            }
            // Just break the tie somehow. The accessibliity ids are unique
            // and stable, hence this is deterministic tie breaking.
            return mView.getAccessibilityViewId() - another.mView.getAccessibilityViewId();
!!!2308108.java!!!	init(inout root : ViewGroup, inout view : View) : void
            Rect viewLocation = mLocation;
            view.getDrawingRect(viewLocation);
            root.offsetDescendantRectToMyCoords(view, viewLocation);
            mView = view;
            mLayoutDirection = root.getLayoutDirection();
!!!2308236.java!!!	clear() : void
            mView = null;
            mLocation.set(0, 0, 0, 0);
