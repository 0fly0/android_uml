format 74
"channels" // _unknown::java::nio::channels
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/nio/channels/"
  java_package "java.nio.channels"
  classview 128923 "channels"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 141083 "FileChannel"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An abstract channel type for interaction with a platform file.
<p>
A {@code FileChannel} defines the methods for reading, writing, memory
mapping, and manipulating the logical state of a platform file. This type
does not have a method for opening files, since this behavior has been
delegated to the {@link java.io.FileInputStream},
{@link java.io.FileOutputStream} and {@link java.io.RandomAccessFile} types.
<p>
FileChannels created from a {@code FileInputStream} or a
{@code RandomAccessFile} created in mode \"r\", are read-only. FileChannels
created from a {@code FileOutputStream} are write-only. FileChannels created
from a {@code RandomAccessFile} created in mode \"rw\" are read/write.
FileChannels created from a {@code RandomAccessFile} that was opened in
append-mode will also be in append-mode -- meaning that each write will be
proceeded by a seek to the end of file.
<p>
FileChannels have a virtual pointer into the file which is referred to as a
file <em>position</em>. The position can be manipulated by moving it
within the file, and the current position can be queried.
<p>
FileChannels also have an associated <em>size</em>. The size of the file
is the number of bytes that it currently contains. The size can be
manipulated by adding more bytes to the end of the file (which increases the
size) or truncating the file (which decreases the size). The current size can
also be queried.
<p>
FileChannels have operations beyond the simple read, write, and close. They
can also:
<ul>
<li>request that cached data be forced onto the disk,</li>
<li>lock ranges of bytes associated with the file,</li>
<li>transfer data directly to another channel in a manner that has the
potential to be optimized by the platform,</li>
<li>memory-mapping files into NIO buffers to provide efficient manipulation
of file data,</li>
<li>read and write to the file at absolute byte offsets in a fashion that
does not modify the current position.</li>
</ul>
<p>
FileChannels are thread-safe. Only one operation involving manipulation of
the file position may be executed at the same time. Subsequent calls to such
operations will block, and one of those blocked will be freed to continue
when the first operation has completed. There is no ordered queue or fairness
applied to the blocked threads.
<p>
It is undefined whether operations that do not manipulate the file position
will also block when there are any other operations in-flight.
<p>
The logical view of the underlying file is consistent across all FileChannels
and I/O streams opened on the same file by the same VM.
Therefore, modifications performed via a channel will be visible to the
stream and vice versa; this includes modifications to the file position,
content, size, etc."
      class 184475 "MapMode"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 258587 // PRIVATE (<unidirectional association>)
	  relation 258587 --->
	    a role_name "PRIVATE" init_value " new MapMode(\"PRIVATE\")" class_relation const_relation public
	      comment "
Private mapping mode (equivalent to copy on write).

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 258587 // PRIVATE (<unidirectional association>)
	    b parent class_ref 184475 // MapMode
	end

	classrelation 258715 // READ_ONLY (<unidirectional association>)
	  relation 258715 --->
	    a role_name "READ_ONLY" init_value " new MapMode(\"READ_ONLY\")" class_relation const_relation public
	      comment "
Read-only mapping mode.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 258715 // READ_ONLY (<unidirectional association>)
	    b parent class_ref 184475 // MapMode
	end

	classrelation 258843 // READ_WRITE (<unidirectional association>)
	  relation 258843 --->
	    a role_name "READ_WRITE" init_value " new MapMode(\"READ_WRITE\")" class_relation const_relation public
	      comment "
Read-write mapping mode.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 258843 // READ_WRITE (<unidirectional association>)
	    b parent class_ref 184475 // MapMode
	end

	classrelation 258971 // displayName (<unidirectional association>)
	  relation 258971 --->
	    a role_name "displayName" const_relation private
	      comment " The string used to display the mapping mode.
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 258971 // displayName (<unidirectional association>)
	    b parent class_ref 3399692 // String
	end

	operation 726299 "MapMode"
	  private explicit_return_type ""
	  nparams 1
	    param inout name "displayName" type class_ref 3399692 // String
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Private constructor prevents others creating new modes."
	end

	operation 726427 "toString"
	  public return_type class_ref 3399692 // String
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Returns a string version of the mapping mode.

@return this map mode as string."
	end
      end

      classrelation 258075 // <generalisation>
	relation 258075 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 258075 // <generalisation>
	  b parent class_ref 182427 // AbstractInterruptibleChannel
      end

      classrelation 258203 // <realization>
	relation 258203 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 258203 // <realization>
	  b parent class_ref 183835 // GatheringByteChannel
      end

      classrelation 258331 // <realization>
	relation 258331 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 258331 // <realization>
	  b parent class_ref 183707 // ScatteringByteChannel
      end

      classrelation 258459 // <realization>
	relation 258459 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 258459 // <realization>
	  b parent class_ref 183323 // ByteChannel
      end

      operation 726555 "FileChannel"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected default constructor."
      end

      operation 726683 "force"
	abstract public explicit_return_type "void"
	nparams 1
	  param inout name "metadata" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requests that all updates to this channel are committed to the storage
device.
<p>
When this method returns, all modifications made to the platform file
underlying this channel have been committed if the file resides on a
local storage device. If the file is not hosted locally, for example on a
networked file system, then applications cannot be certain that the
modifications have been committed.
<p>
There are no assurances given that changes made to the file using methods
defined elsewhere will be committed. For example, changes made via a
mapped byte buffer may not be committed.
<p>
The <code>metadata</code> parameter indicates whether the update should
include the file's metadata such as last modification time, last access
time, etc. Note that passing <code>true</code> may invoke an underlying
write to the operating system (if the platform is maintaining metadata
such as last access time), even if the channel is opened read-only.

@param metadata
           {@code true} if the file metadata should be flushed in
           addition to the file content, {@code false} otherwise.
@throws ClosedChannelException
            if this channel is already closed.
@throws IOException
            if another I/O error occurs."
      end

      operation 726811 "lock"
	public return_type class_ref 184859 // FileLock
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains an exclusive lock on this file.
<p>
This is a convenience method for acquiring a maximum length lock on a
file. It is equivalent to:
{@code fileChannel.lock(0L, Long.MAX_VALUE, false);}

@return the lock object representing the locked file area.
@throws ClosedChannelException
            the file channel is closed.
@throws NonWritableChannelException
            this channel was not opened for writing.
@throws OverlappingFileLockException
            either a lock is already held that overlaps this lock
            request, or another thread is waiting to acquire a lock that
            will overlap with this request.
@throws FileLockInterruptionException
            the calling thread was interrupted while waiting to acquire
            the lock.
@throws AsynchronousCloseException
            the channel was closed while the calling thread was waiting
            to acquire the lock.
@throws IOException
            if another I/O error occurs while obtaining the requested
            lock."
      end

      operation 726939 "lock"
	abstract public return_type class_ref 184859 // FileLock
	nparams 3
	  param in name "position" explicit_type "long"
	  param in name "size" explicit_type "long"
	  param inout name "shared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Obtains a lock on a specified region of the file.
<p>
This is the blocking version of lock acquisition, see also the
<code>tryLock()</code> methods.
<p>
Attempts to acquire an overlapping lock region will fail. The attempt
will fail if the overlapping lock has already been obtained, or if
another thread is currently waiting to acquire the overlapping lock.
<p>
If the request is not for an overlapping lock, the thread calling this
method will block until the lock is obtained (likely by no contention or
another process releasing a lock), or until this thread is interrupted or
the channel is closed.
<p>
If the lock is obtained successfully then the {@link FileLock} object
returned represents the lock for subsequent operations on the locked
region.
<p>
If the thread is interrupted while waiting for the lock, the thread is
set to the interrupted state and throws a
{@link FileLockInterruptionException}. If this channel is closed while
the thread is waiting to obtain the lock then the thread throws a
{@link AsynchronousCloseException}.
<p>
There is no requirement for the position and size to be within the
current start and length of the file.
<p>
Some platforms do not support shared locks, and if a request is made for
a shared lock on such a platform, this method will attempt to acquire an
exclusive lock instead. It is undefined whether the lock obtained is
advisory or mandatory.

@param position
           the starting position for the locked region.
@param size
           the length of the locked region in bytes.
@param shared
           a flag indicating whether an attempt should be made to acquire
           a shared lock.
@return the file lock object.
@throws IllegalArgumentException
            if {@code position} or {@code size} is negative.
@throws ClosedChannelException
            if this channel is closed.
@throws OverlappingFileLockException
            if the requested region overlaps an existing lock or pending
            lock request.
@throws NonReadableChannelException
            if the channel is not opened in read-mode but shared is true.
@throws NonWritableChannelException
            if the channel is not opened in write mode but shared is
            false.
@throws AsynchronousCloseException
            if this channel is closed by another thread while this method
            is executing.
@throws FileLockInterruptionException
            if the thread is interrupted while in the state of waiting on
            the desired file lock.
@throws IOException
            if another I/O error occurs."
      end

      operation 727067 "map"
	abstract public return_type class_ref 184347 // MappedByteBuffer
	nparams 3
	  param inout name "mode" type class_ref 184475 // MapMode
	  param in name "position" explicit_type "long"
	  param in name "size" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Maps the file into memory. There can be three modes: read-only,
read/write and private. After mapping, changes made to memory or the file
channel do not affect the other storage place.
<p>
Note: mapping a file into memory is usually expensive.

@param mode
           one of the three mapping modes.
@param position
           the starting position of the file.
@param size
           the size of the region to map into memory.
@return the mapped byte buffer.
@throws NonReadableChannelException
            if the FileChannel is not opened for reading but the given
            mode is \"READ_ONLY\".
@throws NonWritableChannelException
            if the FileChannel is not opened for writing but the given
            mode is not \"READ_ONLY\".
@throws IllegalArgumentException
            if the given parameters of position and size are not correct.
            Both must be non negative. {@code size} also must not be
            bigger than max integer.
@throws IOException
            if any I/O error occurs."
      end

      operation 727195 "position"
	abstract public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current value of the file position pointer.

@return the current position as a positive integer number of bytes from
        the start of the file.
@throws ClosedChannelException
            if this channel is closed.
@throws IOException
            if another I/O error occurs."
      end

      operation 727323 "position"
	abstract public return_type class_ref 141083 // FileChannel
	nparams 1
	  param in name "offset" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the file position pointer to a new value.
<p>
The argument is the number of bytes counted from the start of the file.
The position cannot be set to a value that is negative. The new position
can be set beyond the current file size. If set beyond the current file
size, attempts to read will return end of file. Write operations will
succeed but they will fill the bytes between the current end of file and
the new position with the required number of (unspecified) byte values.

@param offset
           the new file position, in bytes.
@return the receiver.
@throws IllegalArgumentException
            if the new position is negative.
@throws ClosedChannelException
            if this channel is closed.
@throws IOException
            if another I/O error occurs."
      end

      operation 727451 "read"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "buffer" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from this file channel into the given buffer.
<p>
The maximum number of bytes that will be read is the remaining number of
bytes in the buffer when the method is invoked. The bytes will be copied
into the buffer starting at the buffer's current position.
<p>
The call may block if other threads are also attempting to read from this
channel.
<p>
Upon completion, the buffer's position is set to the end of the bytes
that have been read. The buffer's limit is not changed.

@param buffer
           the byte buffer to receive the bytes.
@return the number of bytes actually read.
@throws AsynchronousCloseException
            if another thread closes the channel during the read.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread during the
            read.
@throws ClosedChannelException
            if this channel is closed.
@throws IOException
            if another I/O error occurs, details are in the message.
@throws NonReadableChannelException
            if the channel has not been opened in a mode that permits
            reading."
      end

      operation 727579 "read"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "buffer" type class_ref 142363 // ByteBuffer
	  param in name "position" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from this file channel into the given buffer starting from
the specified file position.
<p>
The bytes are read starting at the given file position (up to the
remaining number of bytes in the buffer). The number of bytes actually
read is returned.
<p>
If {@code position} is beyond the current end of file, then no bytes are
read.
<p>
Note that the file position is unmodified by this method.

@param buffer
           the buffer to receive the bytes.
@param position
           the (non-negative) position at which to read the bytes.
@return the number of bytes actually read.
@throws AsynchronousCloseException
            if this channel is closed by another thread while this method
            is executing.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The calling thread will have the
            interrupt state set, and the channel will be closed.
@throws ClosedChannelException
            if this channel is closed.
@throws IllegalArgumentException
            if <code>position</code> is less than 0.
@throws IOException
            if another I/O error occurs.
@throws NonReadableChannelException
            if the channel has not been opened in a mode that permits
            reading."
      end

      operation 727707 "read"
	public explicit_return_type "long"
	nparams 1
	  param inout name "buffers" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from this file channel and stores them in the specified array
of buffers. This method attempts to read as many bytes as can be stored
in the buffer array from this channel and returns the number of bytes
actually read. It also increases the file position by the number of bytes
read.
<p>
If a read operation is in progress, subsequent threads will block until
the read is completed and will then contend for the ability to read.
<p>
Calling this method is equivalent to calling
{@code read(buffers, 0, buffers.length);}

@param buffers
           the array of byte buffers into which the bytes will be copied.
@return the number of bytes actually read.
@throws AsynchronousCloseException
            if this channel is closed by another thread during this read
            operation.
@throws ClosedByInterruptException
            if the thread is interrupted by another thread during this
            read operation.
@throws ClosedChannelException
            if this channel is closed.
@throws IOException
            if another I/O error occurs; details are in the message.
@throws NonReadableChannelException
            if the channel has not been opened in a mode that permits
            reading."
      end

      operation 727835 "read"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "buffers" type class_ref 142363 // ByteBuffer
	  param in name "start" explicit_type "int"
	  param in name "number" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from this file channel into a subset of the given buffers.
This method attempts to read all {@code remaining()} bytes from {@code
length} byte buffers, in order, starting at {@code targets[offset]}. It
increases the file position by the number of bytes actually read. The
number of bytes actually read is returned.
<p>
If a read operation is in progress, subsequent threads will block until
the read is completed and will then contend for the ability to read.

@param buffers
           the array of byte buffers into which the bytes will be copied.
@param start
           the index of the first buffer to store bytes in.
@param number
           the maximum number of buffers to store bytes in.
@return the number of bytes actually read.
@throws AsynchronousCloseException
            if this channel is closed by another thread during this read
            operation.
@throws ClosedByInterruptException
            if the thread is interrupted by another thread during this
            read operation.
@throws ClosedChannelException
            if this channel is closed.
@throws IndexOutOfBoundsException
            if {@code start < 0} or {@code number < 0}, or if
            {@code start + number} is greater than the size of
            {@code buffers}.
@throws IOException
            if another I/O error occurs; details are in the message.
@throws NonReadableChannelException
            if the channel has not been opened in a mode that permits
            reading."
      end

      operation 727963 "size"
	abstract public explicit_return_type "long"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the size of the file underlying this channel in bytes.

@return the size of the file in bytes.
@throws ClosedChannelException
            if this channel is closed.
@throws IOException
            if an I/O error occurs while getting the size of the file."
      end

      operation 728091 "transferFrom"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "src" type class_ref 183451 // ReadableByteChannel
	  param in name "position" explicit_type "long"
	  param in name "count" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to {@code count} bytes from {@code src} and stores them in this
channel's file starting at {@code position}. No bytes are transferred if
{@code position} is larger than the size of this channel's file. Less
than {@code count} bytes are transferred if there are less bytes
remaining in the source channel or if the source channel is non-blocking
and has less than {@code count} bytes immediately available in its output
buffer.
<p>
Note that this channel's position is not modified.

@param src
           the source channel to read bytes from.
@param position
           the non-negative start position.
@param count
           the non-negative number of bytes to transfer.
@return the number of bytes that are transferred.
@throws IllegalArgumentException
            if the parameters are invalid.
@throws NonReadableChannelException
            if the source channel is not readable.
@throws NonWritableChannelException
            if this channel is not writable.
@throws ClosedChannelException
            if either channel has already been closed.
@throws AsynchronousCloseException
            if either channel is closed by other threads during this
            operation.
@throws ClosedByInterruptException
            if the thread is interrupted during this operation.
@throws IOException
            if any I/O error occurs."
      end

      operation 728219 "transferTo"
	abstract public explicit_return_type "long"
	nparams 3
	  param in name "position" explicit_type "long"
	  param in name "count" explicit_type "long"
	  param inout name "target" type class_ref 183579 // WritableByteChannel
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads up to {@code count} bytes from this channel's file starting at
{@code position} and writes them to {@code target}. No bytes are
transferred if {@code position} is larger than the size of this channel's
file. Less than {@code count} bytes are transferred if there less bytes
available from this channel's file or if the target channel is
non-blocking and has less than {@code count} bytes free in its input
buffer.
<p>
Note that this channel's position is not modified.

@param position
           the non-negative position to begin.
@param count
           the non-negative number of bytes to transfer.
@param target
           the target channel to write to.
@return the number of bytes that were transferred.
@throws IllegalArgumentException
            if the parameters are invalid.
@throws NonReadableChannelException
            if this channel is not readable.
@throws NonWritableChannelException
            if the target channel is not writable.
@throws ClosedChannelException
            if either channel has already been closed.
@throws AsynchronousCloseException
            if either channel is closed by other threads during this
            operation.
@throws ClosedByInterruptException
            if the thread is interrupted during this operation.
@throws IOException
            if any I/O error occurs."
      end

      operation 728347 "truncate"
	abstract public return_type class_ref 141083 // FileChannel
	nparams 1
	  param in name "size" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Truncates the file underlying this channel to a given size. Any bytes
beyond the given size are removed from the file. If there are no bytes
beyond the given size then the file contents are unmodified.
<p>
If the file position is currently greater than the given size, then it is
set to the new size.

@param size
           the maximum size of the underlying file.
@throws IllegalArgumentException
            if the requested size is negative.
@throws ClosedChannelException
            if this channel is closed.
@throws NonWritableChannelException
            if the channel cannot be written to.
@throws IOException
            if another I/O error occurs.
@return this channel."
      end

      operation 728475 "tryLock"
	public return_type class_ref 184859 // FileLock
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to acquire an exclusive lock on this file without blocking.
<p>
This is a convenience method for attempting to acquire a maximum length
lock on the file. It is equivalent to:
{@code fileChannel.tryLock(0L, Long.MAX_VALUE, false);}
<p>
The method returns {@code null} if the acquisition would result in an
overlapped lock with another OS process.

@return the file lock object, or {@code null} if the lock would overlap
        with an existing exclusive lock in another OS process.
@throws ClosedChannelException
            if the file channel is closed.
@throws OverlappingFileLockException
            if a lock already exists that overlaps this lock request or
            another thread is waiting to acquire a lock that will overlap
            with this request.
@throws IOException
            if any I/O error occurs."
      end

      operation 728603 "tryLock"
	abstract public return_type class_ref 184859 // FileLock
	nparams 3
	  param in name "position" explicit_type "long"
	  param in name "size" explicit_type "long"
	  param inout name "shared" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to acquire an exclusive lock on this file without blocking. The
method returns {@code null} if the acquisition would result in an
overlapped lock with another OS process.
<p>
It is possible to acquire a lock for any region even if it's completely
outside of the file's size. The size of the lock is fixed. If the file
grows outside of the lock that region of the file won't be locked by this
lock.

@param position
           the starting position.
@param size
           the size of file to lock.
@param shared
           true if the lock is shared.
@return the file lock object, or {@code null} if the lock would overlap
        with an existing exclusive lock in another OS process.
@throws IllegalArgumentException
            if any parameters are invalid.
@throws ClosedChannelException
            if the file channel is closed.
@throws OverlappingFileLockException
            if a lock is already held that overlaps this lock request or
            another thread is waiting to acquire a lock that will overlap
            with this request.
@throws IOException
            if any I/O error occurs."
      end

      operation 728731 "write"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "src" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes bytes from the given byte buffer to this file channel.
<p>
The bytes are written starting at the current file position, and after
some number of bytes are written (up to the remaining number of bytes in
the buffer) the file position is increased by the number of bytes
actually written.

@param src
           the byte buffer containing the bytes to be written.
@return the number of bytes actually written.
@throws NonWritableChannelException
            if the channel was not opened for writing.
@throws ClosedChannelException
            if the channel was already closed.
@throws AsynchronousCloseException
            if another thread closes the channel during the write.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws IOException
            if another I/O error occurs, details are in the message.
@see java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer)"
      end

      operation 728859 "write"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "buffer" type class_ref 142363 // ByteBuffer
	  param in name "position" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes bytes from the given buffer to this file channel starting at the
given file position.
<p>
The bytes are written starting at the given file position (up to the
remaining number of bytes in the buffer). The number of bytes actually
written is returned.
<p>
If the position is beyond the current end of file, then the file is first
extended up to the given position by the required number of unspecified
byte values.
<p>
Note that the file position is not modified by this method.

@param buffer
           the buffer containing the bytes to be written.
@param position
           the (non-negative) position at which to write the bytes.
@return the number of bytes actually written.
@throws IllegalArgumentException
            if <code>position</code> is less than 0.
@throws ClosedChannelException
            if this channel is closed.
@throws NonWritableChannelException
            if the channel was not opened in write-mode.
@throws AsynchronousCloseException
            if this channel is closed by another thread while this method
            is executing.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws IOException
            if another I/O error occurs."
      end

      operation 728987 "write"
	public explicit_return_type "long"
	nparams 1
	  param inout name "buffers" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes bytes from all the given byte buffers to this file channel.
<p>
The bytes are written starting at the current file position, and after
the bytes are written (up to the remaining number of bytes in all the
buffers), the file position is increased by the number of bytes actually
written.
<p>
Calling this method is equivalent to calling
{@code write(buffers, 0, buffers.length);}

@param buffers
           the buffers containing bytes to write.
@return the number of bytes actually written.
@throws AsynchronousCloseException
            if this channel is closed by another thread during this write
            operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if this channel is closed.
@throws IOException
            if another I/O error occurs; details are in the message.
@throws NonWritableChannelException
            if this channel was not opened for writing."
      end

      operation 729115 "write"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "buffers" type class_ref 142363 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to write a subset of the given bytes from the buffers to this
file channel. This method attempts to write all {@code remaining()}
bytes from {@code length} byte buffers, in order, starting at {@code
sources[offset]}. The number of bytes actually written is returned.
<p>
If a write operation is in progress, subsequent threads will block until
the write is completed and then contend for the ability to write.

@param buffers
           the array of byte buffers that is the source for bytes written
           to this channel.
@param offset
           the index of the first buffer in {@code buffers }to get bytes
           from.
@param length
           the number of buffers to get bytes from.
@return the number of bytes actually written to this channel.
@throws AsynchronousCloseException
            if this channel is closed by another thread during this write
            operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if this channel is closed.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the size of
            {@code buffers}.
@throws IOException
            if another I/O error occurs; details are in the message.
@throws NonWritableChannelException
            if this channel was not opened for writing."
      end
    end

    class 160155 "Channel"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A channel is a conduit to I/O services covering such items as files, sockets,
hardware devices, I/O ports or some software component.
<p>
Channels are open upon creation, and can be closed explicitly. Once a channel
is closed it cannot be re-opened, and any attempts to perform I/O operations
on the closed channel result in a <code>ClosedChannelException</code>.
<p>
Particular implementations or sub-interfaces of {@code Channel} dictate
whether they are thread-safe or not."
      classrelation 253723 // <generalisation>
	relation 253723 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 253723 // <generalisation>
	  b parent class_ref 131995 // Closeable
      end

      operation 704027 "isOpen"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this channel is open."
      end

      operation 704155 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes an open channel. If the channel is already closed then this method
has no effect. If there is a problem with closing the channel then the
method throws an IOException and the exception contains reasons for the
failure.
<p>
If an attempt is made to perform an operation on a closed channel then a
{@link ClosedChannelException} will be thrown on that attempt.
<p>
If multiple threads attempt to simultaneously close a channel, then only
one thread will run the closure code, and others will be blocked until
the first returns.

@throws IOException
            if a problem occurs closing the channel."
      end
    end

    class 170907 "DatagramChannel"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code DatagramChannel} is a selectable channel that represents a partial
abstraction of a datagram socket. The {@code socket} method of this class can
return the related {@code DatagramSocket} instance, which can handle the
socket.
<p>
A datagram channel is open but not connected when created with the
{@code open()} method. After it is connected, it will keep the connected
status until it is disconnected or closed. The benefit of a connected channel
is the reduced effort of security checks during send and receive. When
invoking {@code read} or {@code write}, a connected channel is required.
<p>
Datagram channels are thread-safe; only one thread can read or write at the
same time."
      classrelation 255131 // <generalisation>
	relation 255131 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 255131 // <generalisation>
	  b parent class_ref 182171 // AbstractSelectableChannel
      end

      classrelation 255771 // <realization>
	relation 255771 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 255771 // <realization>
	  b parent class_ref 183323 // ByteChannel
      end

      classrelation 256027 // <realization>
	relation 256027 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 256027 // <realization>
	  b parent class_ref 183707 // ScatteringByteChannel
      end

      classrelation 256283 // <realization>
	relation 256283 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 256283 // <realization>
	  b parent class_ref 183835 // GatheringByteChannel
      end

      operation 708891 "DatagramChannel"
	protected explicit_return_type ""
	nparams 1
	  param inout name "selectorProvider" type class_ref 183067 // SelectorProvider
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code DatagramChannel}.

@param selectorProvider
           an instance of SelectorProvider."
      end

      operation 709019 "open"
	class_operation public return_type class_ref 170907 // DatagramChannel
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an opened and not-connected datagram channel.
<p>
This channel is created by calling the <code>openDatagramChannel</code>
method of the default {@link SelectorProvider} instance.

@return the new channel which is open but not connected.
@throws IOException
            if some I/O error occurs."
      end

      operation 709147 "validOps"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the valid operations of this channel. Datagram channels support read
and write operations, so this method returns (
<code>SelectionKey.OP_READ</code> | <code>SelectionKey.OP_WRITE</code> ).

@see java.nio.channels.SelectableChannel#validOps()
@return valid operations in bit-set."
      end

      operation 709275 "socket"
	abstract public return_type class_ref 170395 // DatagramSocket
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the related datagram socket of this channel, which does not
define additional public methods to those defined by
{@link DatagramSocket}.

@return the related DatagramSocket instance."
      end

      operation 709403 "isConnected"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns whether this channel's socket is connected or not.

@return <code>true</code> if this channel's socket is connected;
        <code>false</code> otherwise."
      end

      operation 709531 "connect"
	abstract public return_type class_ref 170907 // DatagramChannel
	nparams 1
	  param inout name "address" type class_ref 170267 // SocketAddress
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects the socket of this channel to a remote address, which is the
only communication peer for getting and sending datagrams after being
connected.
<p>
This method can be called at any time without affecting the read and
write operations being processed at the time the method is called. The
connection status does not change until the channel is disconnected or
closed.
<p>
This method executes the same security checks as the connect method of
the {@link DatagramSocket} class.

@param address
           the address to be connected to.
@return this channel.
@throws ClosedChannelException
            if the channel is already closed.
@throws AsynchronousCloseException
            if the channel is closed by another thread while this method
            is in operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The calling thread will have the
            interrupt state set and the channel will be closed.
@throws IOException
            if some other I/O error occurs."
      end

      operation 709659 "disconnect"
	abstract public return_type class_ref 170907 // DatagramChannel
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Disconnects the socket of this channel, which has been connected before
in order to send and receive datagrams.
<p>
This method can be called at any time without affecting the read and
write operations being underway. It does not have any effect if the
socket is not connected or the channel is closed.

@return this channel.
@throws IOException
            some other I/O error occurs."
      end

      operation 709787 "receive"
	abstract public return_type class_ref 170267 // SocketAddress
	nparams 1
	  param inout name "target" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets a datagram from this channel.
<p>
This method transfers a datagram from the channel into the target byte
buffer. If this channel is in blocking mode, it waits for the datagram
and returns its address when it is available. If this channel is in
non-blocking mode and no datagram is available, it returns {@code null}
immediately. The transfer starts at the current position of the buffer,
and if there is not enough space remaining in the buffer to store the
datagram then the part of the datagram that does not fit is discarded.
<p>
This method can be called at any time and it will block if there is
another thread that has started a read operation on the channel.
<p>
This method executes the same security checks as the receive method of
the {@link DatagramSocket} class.

@param target
           the byte buffer to store the received datagram.
@return the address of the datagram if the transfer is performed, or null
        if the channel is in non-blocking mode and no datagram is
        available.
@throws ClosedChannelException
            if the channel is already closed.
@throws AsynchronousCloseException
            if the channel is closed by another thread while this method
            is in operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The calling thread will have the
            interrupt state set and the channel will be closed.
@throws IOException
            some other I/O error occurs."
      end

      operation 709915 "send"
	abstract public explicit_return_type "int"
	nparams 2
	  param inout name "source" type class_ref 142363 // ByteBuffer
	  param inout name "address" type class_ref 170267 // SocketAddress
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sends a datagram through this channel. The datagram consists of the
remaining bytes in {@code source}.
<p>
If this channel is in blocking mode then the datagram is sent as soon as
there is enough space in the underlying output buffer. If this channel is
in non-blocking mode then the datagram is only sent if there is enough
space in the underlying output buffer at that moment. The transfer action
is just like a regular write operation.
<p>
This method can be called at any time and it will block if another thread
has started a send operation on this channel.
<p>
This method executes the same security checks as the send method of the
{@link DatagramSocket} class.

@param source
           the byte buffer with the datagram to be sent.
@param address
           the destination address for the datagram.
@return the number of bytes sent. This is the number of bytes remaining
        in {@code source} or zero if the channel is in non-blocking mode
        and there is not enough space for the datagram in the underlying
        output buffer.
@throws ClosedChannelException
            if the channel is already closed.
@throws AsynchronousCloseException
            if the channel is closed by another thread while this method
            is in operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The calling thread will have the
            interrupt state set and the channel will be closed.
@throws IOException
            some other I/O error occurs."
      end

      operation 710043 "read"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "target" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a datagram from this channel into the byte buffer.
<p>
The precondition for calling this method is that the channel is connected
and the incoming datagram is from the connected address. If the buffer is
not big enough to store the datagram, the part of the datagram that does
not fit in the buffer is discarded. Otherwise, this method has the same
behavior as the {@code read} method in the {@link ReadableByteChannel}
interface.

@see java.nio.channels.ReadableByteChannel#read(java.nio.ByteBuffer)
@param target
           the byte buffer to store the received datagram.
@return a non-negative number as the number of bytes read, or -1 as the
        read operation reaches the end of stream.
@throws NotYetConnectedException
            if the channel is not connected yet.
@throws ClosedChannelException
            if the channel is already closed.
@throws AsynchronousCloseException
            if the channel is closed by another thread while this method
            is in operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The calling thread will have the
            interrupt state set and the channel will be closed.
@throws IOException
            some other I/O error occurs."
      end

      operation 710171 "read"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "targets" type class_ref 142363 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a datagram from this channel into an array of byte buffers.
<p>
The precondition for calling this method is that the channel is connected
and the incoming datagram is from the connected address. If the buffers
do not have enough remaining space to store the datagram, the part of the
datagram that does not fit in the buffers is discarded. Otherwise, this
method has the same behavior as the {@code read} method in the
{@link ScatteringByteChannel} interface.

@see java.nio.channels.ScatteringByteChannel#read(java.nio.ByteBuffer[],
     int, int)
@param targets
           the byte buffers to store the received datagram.
@param offset
           a non-negative offset in the array of buffers, pointing to the
           starting buffer to store the bytes transferred, must not be
           bigger than {@code targets.length}.
@param length
           a non-negative length to indicate the maximum number of
           buffers to be filled, must not be bigger than
           {@code targets.length - offset}.
@return a non-negative number as the number of bytes read, or -1 if the
        read operation reaches the end of stream.
@throws NotYetConnectedException
            if the channel is not connected yet.
@throws ClosedChannelException
            if the channel is already closed.
@throws AsynchronousCloseException
            if the channel is closed by another thread while this method
            is in operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The calling thread will have the
            interrupt state set and the channel will be closed.
@throws IOException
            some other I/O error occurs."
      end

      operation 710299 "read"
	public explicit_return_type "long"
	nparams 1
	  param inout name "targets" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads a datagram from this channel into an array of byte buffers.
<p>
The precondition for calling this method is that the channel is connected
and the incoming datagram is from the connected address. If the buffers
do not have enough remaining space to store the datagram, the part of the
datagram that does not fit in the buffers is discarded. Otherwise, this
method has the same behavior as the {@code read} method in the
{@link ScatteringByteChannel} interface.

@see java.nio.channels.ScatteringByteChannel#read(java.nio.ByteBuffer[])
@param targets
           the byte buffers to store the received datagram.
@return a non-negative number as the number of bytes read, or -1 if the
        read operation reaches the end of stream.
@throws NotYetConnectedException
            if the channel is not connected yet.
@throws ClosedChannelException
            if the channel is already closed.
@throws AsynchronousCloseException
            if the channel is closed by another thread while this method
            is in operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The calling thread will have the
            interrupt state set and the channel will be closed.
@throws IOException
            some other I/O error occurs."
      end

      operation 710427 "write"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "source" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a datagram from the byte buffer to this channel.
<p>
The precondition of calling this method is that the channel is connected
and the datagram is sent to the connected address. Otherwise, this method
has the same behavior as the {@code write} method in the
{@link WritableByteChannel} interface.

@see java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer)
@param source
           the byte buffer as the source of the datagram.
@return a non-negative number of bytes written.
@throws NotYetConnectedException
            if the channel is not connected yet.
@throws ClosedChannelException
            if the channel is already closed.
@throws AsynchronousCloseException
            if the channel is closed by another thread while this method
            is in operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The calling thread will have the
            interrupt state set and the channel will be closed.
@throws IOException
            some other I/O error occurs."
      end

      operation 710555 "write"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "sources" type class_ref 142363 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a datagram from the byte buffers to this channel.
<p>
The precondition of calling this method is that the channel is connected
and the datagram is sent to the connected address. Otherwise, this method
has the same behavior as the {@code write} method in the
{@link GatheringByteChannel} interface.

@see java.nio.channels.GatheringByteChannel#write(java.nio.ByteBuffer[],
     int, int)
@param sources
           the byte buffers as the source of the datagram.
@param offset
           a non-negative offset in the array of buffers, pointing to the
           starting buffer to be retrieved, must be no larger than
           {@code sources.length}.
@param length
           a non-negative length to indicate the maximum number of
           buffers to be submitted, must be no bigger than
           {@code sources.length - offset}.
@return the number of bytes written. If this method is called, it returns
        the number of bytes that where remaining in the byte buffers. If
        the channel is in non-blocking mode and there was not enough
        space for the datagram in the buffer, it may return zero.
@throws NotYetConnectedException
            if the channel is not connected yet.
@throws ClosedChannelException
            if the channel is already closed.
@throws AsynchronousCloseException
            if the channel is closed by another thread while this method
            is in operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The calling thread will have the
            interrupt state set and the channel will be closed.
@throws IOException
            some other I/O error occurs."
      end

      operation 710683 "write"
	public explicit_return_type "long"
	nparams 1
	  param inout name "sources" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes a datagram from the byte buffers to this channel.
<p>
The precondition of calling this method is that the channel is connected
and the datagram is sent to the connected address. Otherwise, this method
has the same behavior as the write method in the
{@link GatheringByteChannel} interface.

@see java.nio.channels.GatheringByteChannel#write(java.nio.ByteBuffer[])
@param sources
           the byte buffers as the source of the datagram.
@return the number of bytes written. If this method is called, it returns
        the number of bytes that where remaining in the byte buffer. If
        the channel is in non-blocking mode and there was not enough
        space for the datagram in the buffer, it may return zero.
@throws NotYetConnectedException
            if the channel is not connected yet.
@throws ClosedChannelException
            if the channel is already closed.
@throws AsynchronousCloseException
            if the channel is closed by another thread while this method
            is in operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The calling thread will have the
            interrupt state set and the channel will be closed.
@throws IOException
            some other I/O error occurs."
      end
    end

    class 177051 "ServerSocketChannel"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code ServerSocketChannel} is a partial abstraction of a selectable,
stream-oriented listening socket. Binding and manipulation of socket options
can only be done through the associated {@link ServerSocket} object, returned
by calling {@code socket()}. ServerSocketChannels can not be constructed for
an already existing server-socket, nor can a {@link java.net.SocketImpl} be assigned.
<p>
A server-socket channel is open but not bound when created by the {@code
open()} method. Calling {@code accept} before bound will cause a
{@link NotYetBoundException}. It can be bound by calling the bind method of a
related {@code ServerSocket} instance."
      classrelation 266779 // <generalisation>
	relation 266779 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 266779 // <generalisation>
	  b parent class_ref 182171 // AbstractSelectableChannel
      end

      operation 768155 "ServerSocketChannel"
	protected explicit_return_type ""
	nparams 1
	  param inout name "selectorProvider" type class_ref 183067 // SelectorProvider
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@link ServerSocketChannel}.

@param selectorProvider
           an instance of SelectorProvider."
      end

      operation 768283 "open"
	class_operation public return_type class_ref 177051 // ServerSocketChannel
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an open and unbound server-socket channel.
<p>
This channel is created by calling {@code openServerSocketChannel} method
of the default {@code SelectorProvider} instance.

@return the new channel which is open but unbound.
@throws IOException
            if an I/O error occurs."
      end

      operation 768411 "validOps"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the valid operations of this channel. Server-socket channels support
accepting operation, so this method returns {@code
SelectionKey.OP_ACCEPT}.

@see java.nio.channels.SelectableChannel#validOps()
@return the operations supported by this channel."
      end

      operation 768539 "socket"
	abstract public return_type class_ref 176667 // ServerSocket
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return the server-socket assigned this channel, which does not declare
any public methods that are not declared in {@code ServerSocket}.

@return the server-socket assigned to this channel."
      end

      operation 768667 "accept"
	abstract public return_type class_ref 177179 // SocketChannel
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Accepts a connection to this server-socket channel.
<p>
This method returns {@code null} when this channel is non-blocking and no
connection is available, otherwise it blocks until a new connection is
available or an I/O error occurs. The socket channel returned by this
method will always be in blocking mode.
<p>
This method just executes the same security checks as the {@code
accept()} method of the {@link ServerSocket} class.

@return the accepted {@code SocketChannel} instance, or {@code null} if
        the channel is non-blocking and no connection is available.
@throws AsynchronousCloseException
            if this channel is closed by another thread while this method
            is in operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if this channel is closed.
@throws IOException
            if another I/O error occurs.
@throws NotYetBoundException
            if the socket has not yet been bound."
      end
    end

    class 177179 "SocketChannel"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code SocketChannel} is a selectable channel that provides a partial
abstraction of stream connecting socket. {@code socket()} returns the related
{@link Socket} instance which can handle the socket.
<p>
A socket channel is open but not connected when created by {@code open()}.
After connecting it by calling {@code connect(SocketAddress)}, it will remain
connected until it gets closed. If the connection is non-blocking then
{@code connect(SocketAddress)} is used to initiate the connection, followed
by a call of {@code finishConnect()} to perform the final steps of
connecting. {@code isConnectionPending()} indicates if the connection is
blocked or not; {@code isConnected()} indicates if the socket is finally
connected or not.
<p>
The input and output sides of a channel can be shut down independently and
asynchronously without closing the channel. The {@code shutdownInput} method
is used for the input side of a channel and subsequent read operations return
-1, which means end of stream. If another thread is blocked in a read
operation when the shutdown occurs, the read will end without effect and
return end of stream. The {@code shutdownOutput} method is used for the
output side of the channel; subsequent write operations throw a
{@link ClosedChannelException}. If the output is shut down and another thread
is blocked in a write operation, an {@link AsynchronousCloseException} will
be thrown to the pending thread.
<p>
Socket channels are thread-safe, no more than one thread can read or write at
any given time. The {@code connect(SocketAddress)} and {@code
finishConnect()} methods are synchronized against each other; when they are
processing, calls to {@code read} and {@code write} will block."
      classrelation 267931 // <generalisation>
	relation 267931 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 267931 // <generalisation>
	  b parent class_ref 182171 // AbstractSelectableChannel
      end

      classrelation 268059 // <realization>
	relation 268059 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 268059 // <realization>
	  b parent class_ref 183323 // ByteChannel
      end

      classrelation 268187 // <realization>
	relation 268187 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 268187 // <realization>
	  b parent class_ref 183707 // ScatteringByteChannel
      end

      classrelation 268315 // <realization>
	relation 268315 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 268315 // <realization>
	  b parent class_ref 183835 // GatheringByteChannel
      end

      operation 773019 "SocketChannel"
	protected explicit_return_type ""
	nparams 1
	  param inout name "selectorProvider" type class_ref 183067 // SelectorProvider
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SocketChannel}.

@param selectorProvider
           an instance of SelectorProvider."
      end

      operation 773147 "open"
	class_operation public return_type class_ref 177179 // SocketChannel
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an open and unconnected socket channel.
<p>
This channel is created by calling {@code openSocketChannel()} of the
default {@link SelectorProvider} instance.

@return the new channel which is open but unconnected.
@throws IOException
            if an I/O error occurs."
      end

      operation 773275 "open"
	class_operation public return_type class_ref 177179 // SocketChannel
	nparams 1
	  param inout name "address" type class_ref 170267 // SocketAddress
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a socket channel and connects it to a socket address.
<p>
This method performs a call to {@code open()} followed by a call to
{@code connect(SocketAddress)}.

@param address
           the socket address to be connected to.
@return the new connected channel.
@throws AsynchronousCloseException
            if this channel is closed by another thread while this method
            is executing.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is executing. The calling thread will have the
            interrupt state set and the channel will be closed.
@throws UnresolvedAddressException
            if the address is not resolved.
@throws UnsupportedAddressTypeException
            if the address type is not supported.
@throws IOException
            if an I/O error occurs."
      end

      operation 773403 "validOps"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Gets the valid operations of this channel. Socket channels support
connect, read and write operation, so this method returns
{@code SelectionKey.OP_CONNECT | SelectionKey.OP_READ | SelectionKey.OP_WRITE}.

@return the operations supported by this channel.
@see java.nio.channels.SelectableChannel#validOps()"
      end

      operation 773531 "socket"
	abstract public return_type class_ref 176923 // Socket
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the socket assigned to this channel, which does not declare any public
methods that are not declared in {@code Socket}.

@return the socket assigned to this channel."
      end

      operation 773659 "isConnected"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this channel's socket is connected.

@return {@code true} if this channel's socket is connected, {@code false}
        otherwise."
      end

      operation 773787 "isConnectionPending"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this channel's socket is still trying to connect.

@return {@code true} if the connection is initiated but not finished;
        {@code false} otherwise."
      end

      operation 773915 "connect"
	abstract public explicit_return_type "boolean"
	nparams 1
	  param inout name "address" type class_ref 170267 // SocketAddress
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Connects this channel's socket with a remote address.
<p>
If this channel is blocking, this method will suspend until connecting is
finished or an I/O exception occurs. If the channel is non-blocking,
this method will return {@code true} if the connection is finished at
once or return {@code false} when the connection must be finished later
by calling {@code finishConnect()}.
<p>
This method can be called at any moment and can block other read and
write operations while connecting. It executes the same security checks
as the connect method of the {@code Socket} class.

@param address
           the address to connect with.
@return {@code true} if the connection is finished, {@code false}
        otherwise.
@throws AlreadyConnectedException
            if the channel is already connected.
@throws ConnectionPendingException
            a non-blocking connecting operation is already executing on
            this channel.
@throws ClosedChannelException
            if this channel is closed.
@throws AsynchronousCloseException
            if this channel is closed by another thread while this method
            is executing.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The calling thread will have the
            interrupt state set and this channel will be closed.
@throws UnresolvedAddressException
            if the address is not resolved.
@throws UnsupportedAddressTypeException
            if the address type is not supported.
@throws IOException
            if an I/O error occurs."
      end

      operation 774043 "finishConnect"
	abstract public explicit_return_type "boolean"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes the connection process initiated by a call of {@code
connect(SocketAddress)}.
<p>
This method returns {@code true} if the connection is finished already
and returns {@code false} if the channel is non-blocking and the
connection is not finished yet.
<p>
If this channel is in blocking mode, this method will suspend and return
{@code true} when the connection is finished. It closes this channel and
throws an exception if the connection fails.
<p>
This method can be called at any moment and it can block other {@code
read} and {@code write} operations while connecting.

@return {@code true} if the connection is successfully finished, {@code
        false} otherwise.
@throws NoConnectionPendingException
            if the channel is not connected and the connection process
            has not been initiated.
@throws ClosedChannelException
            if this channel is closed.
@throws AsynchronousCloseException
            if this channel is closed by another thread while this method
            is executing.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The calling thread has the
            interrupt state set, and this channel is closed.
@throws IOException
            if an I/O error occurs."
      end

      operation 774171 "read"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "target" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from this socket channel into the given buffer.
<p>
The maximum number of bytes that will be read is the remaining number of
bytes in the buffer when the method is invoked. The bytes will be copied
into the buffer starting at the buffer's current position.
<p>
The call may block if other threads are also attempting to read from this
channel.
<p>
Upon completion, the buffer's position is set to the end of the bytes
that have been read. The buffer's limit is not changed.

@param target
           the byte buffer to receive the bytes.
@return the number of bytes actually read.
@throws AsynchronousCloseException
            if another thread closes the channel during the read.
@throws NotYetConnectedException
            if this channel is not yet connected.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if this channel is closed.
@throws IOException
            if another I/O error occurs.
@see java.nio.channels.ReadableByteChannel#read(java.nio.ByteBuffer)"
      end

      operation 774299 "read"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "targets" type class_ref 142363 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from this socket channel into a subset of the given buffers.
This method attempts to read all {@code remaining()} bytes from {@code
length} byte buffers, in order, starting at {@code targets[offset]}. The
number of bytes actually read is returned.
<p>
If a read operation is in progress, subsequent threads will block until
the read is completed and will then contend for the ability to read.

@param targets
           the array of byte buffers into which the bytes will be copied.
@param offset
           the index of the first buffer to store bytes in.
@param length
           the maximum number of buffers to store bytes in.
@return the number of bytes actually read.
@throws AsynchronousCloseException
            if this channel is closed by another thread during this read
            operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if this channel is closed.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if {@code
            offset + length} is greater than the size of {@code targets}.
@throws IOException
            if another I/O error occurs.
@throws NotYetConnectedException
            if this channel is not yet connected.
@see java.nio.channels.ScatteringByteChannel#read(java.nio.ByteBuffer[],
     int, int)"
      end

      operation 774427 "read"
	public explicit_return_type "long"
	nparams 1
	  param inout name "targets" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from this socket channel and stores them in the specified
array of buffers. This method attempts to read as many bytes as can be
stored in the buffer array from this channel and returns the number of
bytes actually read.
<p>
If a read operation is in progress, subsequent threads will block until
the read is completed and will then contend for the ability to read.
<p>
Calling this method is equivalent to calling {@code read(targets, 0,
targets.length);}

@param targets
           the array of byte buffers into which the bytes will be copied.
@return the number of bytes actually read.
@throws AsynchronousCloseException
            if this channel is closed by another thread during this read
            operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if this channel is closed.
@throws IOException
            if another I/O error occurs.
@throws NotYetConnectedException
            if this channel is not yet connected."
      end

      operation 774555 "write"
	abstract public explicit_return_type "int"
	nparams 1
	  param inout name "source" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes bytes from the given byte buffer to this socket channel. The
maximum number of bytes that are written is the remaining number of bytes
in the buffer when this method is invoked. The bytes are taken from the
buffer starting at the buffer's position.
<p>
The call may block if other threads are also attempting to write to the
same channel.
<p>
Upon completion, the buffer's position is updated to the end of the bytes
that have been written. The buffer's limit is not changed.

@param source
           the byte buffer containing the bytes to be written.
@return the number of bytes actually written.
@throws AsynchronousCloseException
            if another thread closes the channel during the write.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if the channel was already closed.
@throws IOException
            if another I/O error occurs.
@throws NotYetConnectedException
            if this channel is not connected yet.
@see java.nio.channels.WritableByteChannel#write(java.nio.ByteBuffer)"
      end

      operation 774683 "write"
	abstract public explicit_return_type "long"
	nparams 3
	  param inout name "sources" type class_ref 142363 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to write a subset of the given bytes from the buffers to this
socket channel. This method attempts to write all {@code remaining()}
bytes from {@code length} byte buffers, in order, starting at {@code
sources[offset]}. The number of bytes actually written is returned.
<p>
If a write operation is in progress, subsequent threads will block until
the write is completed and then contend for the ability to write.

@param sources
           the array of byte buffers that is the source for bytes written
           to this channel.
@param offset
           the index of the first buffer in {@code buffers }to get bytes
           from.
@param length
           the number of buffers to get bytes from.
@return the number of bytes actually written to this channel.
@throws AsynchronousCloseException
            if this channel is closed by another thread during this write
            operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if this channel is closed.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if {@code
            offset + length} is greater than the size of {@code sources}.
@throws IOException
            if another I/O error occurs.
@throws NotYetConnectedException
            if this channel is not yet connected.
@see java.nio.channels.GatheringByteChannel#write(java.nio.ByteBuffer[],
     int, int)"
      end

      operation 774811 "write"
	public explicit_return_type "long"
	nparams 1
	  param inout name "sources" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes bytes from all the given byte buffers to this socket channel.
<p>
Calling this method is equivalent to calling {@code write(sources, 0,
sources.length);}

@param sources
           the buffers containing bytes to write.
@return the number of bytes actually written.
@throws AsynchronousCloseException
            if this channel is closed by another thread during this write
            operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while this
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if this channel is closed.
@throws IOException
            if another I/O error occurs.
@throws NotYetConnectedException
            if this channel is not yet connected.
@see java.nio.channels.GatheringByteChannel#write(java.nio.ByteBuffer[])"
      end
    end

    class 182299 "SelectableChannel"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A channel that can be used with a {@link Selector}. The channel must be
registered with a selector by calling one of the {@code register} methods,
which return a {@link SelectionKey} object. In order to deregister a channel
from a selector, its selection key must be canceled. This can be done
explicitly by calling the {@link SelectionKey#cancel()} method but it is also
done implicitly when the channel or the selector is closed.
<p>
A channel may be registered with several selectors at the same time but only
once for any given selector."
      classrelation 254363 // <generalisation>
	relation 254363 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 254363 // <generalisation>
	  b parent class_ref 182427 // AbstractInterruptibleChannel
      end

      classrelation 254491 // <realization>
	relation 254491 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 254491 // <realization>
	  b parent class_ref 160155 // Channel
      end

      operation 705179 "SelectableChannel"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SelectableChannel}."
      end

      operation 705307 "blockingLock"
	abstract public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the blocking lock which synchronizes the {@code configureBlocking}
and {@code register} methods.

@return the blocking object as lock."
      end

      operation 705435 "configureBlocking"
	abstract public return_type class_ref 182299 // SelectableChannel
	nparams 1
	  param inout name "block" explicit_type "boolean"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the blocking mode of this channel. A call to this method blocks if
other calls to this method or to a {@code register} method are executing.
The new blocking mode is valid for calls to other methods that are
invoked after the call to this method. If other methods are already
executing when this method is called, they still have the old mode and
the call to this method might block depending on the implementation.

@param block
           {@code true} for setting this channel's mode to blocking,
           {@code false} to set it to non-blocking.
@return this channel.
@throws ClosedChannelException
            if this channel is closed.
@throws IllegalBlockingModeException
            if {@code block} is {@code true} and this channel has been
            registered with at least one selector.
@throws IOException
            if an I/O error occurs."
      end

      operation 705563 "isBlocking"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this channel is in blocking mode.

@return {@code true} if this channel is blocking, undefined if this
        channel is closed."
      end

      operation 705691 "isRegistered"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this channel is registered with at least one selector.

@return {@code true} if this channel is registered, {@code false}
        otherwise."
      end

      operation 705819 "keyFor"
	abstract public return_type class_ref 182811 // SelectionKey
	nparams 1
	  param inout name "sel" type class_ref 182939 // Selector
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets this channel's selection key for the specified selector.

@param sel
           the selector with which this channel has been registered.
@return the selection key for the channel or {@code null} if this channel
        has not been registered with {@code sel}."
      end

      operation 705947 "provider"
	abstract public return_type class_ref 183067 // SelectorProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the provider of this channel.

@return the provider of this channel."
      end

      operation 706075 "register"
	public return_type class_ref 182811 // SelectionKey
	nparams 2
	  param inout name "selector" type class_ref 182939 // Selector
	  param in name "operations" explicit_type "int"
	nexceptions 1
	  exception class_ref 183195 // ClosedChannelException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers this channel with the specified selector for the specified
interest set. If the channel is already registered with the selector, the
corresponding selection key is returned but the
{@link SelectionKey interest set} is updated to {@code operations}. The
returned key is canceled if the channel is closed while registering is in
progress.
<p>
Calling this method is valid at any time. If another thread executes this
method or the {@code configureBlocking(boolean} method then this call is
blocked until the other call finishes. After that, it will synchronize on
the key set of the selector and thus may again block if other threads
also hold locks on the key set of the same selector.
<p>
Calling this method is equivalent to calling
{@code register(selector, operations, null)}.

@param selector
           the selector with which to register this channel.
@param operations
           this channel's {@link SelectionKey interest set}.
@return the selection key for this registration.
@throws ClosedChannelException
            if the channel is closed.
@throws IllegalBlockingModeException
            if the channel is in blocking mode.
@throws IllegalSelectorException
            if this channel does not have the same provider as the given
            selector.
@throws CancelledKeyException
            if this channel is registered but its key has been canceled.
@throws IllegalArgumentException
            if the operation given is not supported by this channel."
      end

      operation 706203 "register"
	abstract public return_type class_ref 182811 // SelectionKey
	nparams 3
	  param inout name "sel" type class_ref 182939 // Selector
	  param in name "ops" explicit_type "int"
	  param inout name "att" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 183195 // ClosedChannelException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Registers this channel with the specified selector for the specified
interest set and an object to attach. If the channel is already
registered with the selector, the corresponding selection key is returned
but its {@link SelectionKey interest set} is updated to {@code ops} and
the attached object is updated to {@code att}. The returned key is
canceled if the channel is closed while registering is in progress.
<p>
Calling this method is valid at any time. If another thread executes this
method or the {@code configureBlocking(boolean)} method then this call is
blocked until the other call finishes. After that, it will synchronize on
the key set of the selector and thus may again block if other threads
also hold locks on the key set of the same selector.

@param sel
           the selector with which to register this channel.
@param ops
           this channel's {@link SelectionKey interest set}.
@param att
           the object to attach, can be {@code null}.
@return the selection key for this registration.
@throws ClosedChannelException
            if this channel is closed.
@throws IllegalArgumentException
            if {@code ops} is not supported by this channel.
@throws IllegalBlockingModeException
            if this channel is in blocking mode.
@throws IllegalSelectorException
            if this channel does not have the same provider as the given
            selector.
@throws CancelledKeyException
            if this channel is registered but its key has been canceled."
      end

      operation 706331 "validOps"
	abstract public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the set of valid {@link SelectionKey operations} of this channel.
Instances of a concrete channel class always return the same value.

@return the set of operations that this channel supports."
      end
    end

    class 182555 "InterruptibleChannel"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Channels that implement this interface can be asynchronously closed and
interrupted.
<p>
A channel that can be asynchronously closed permits that a thread blocked on
an I/O operation (the I/O thread) can be released by another thread calling
the channel's {@link #close()} method. The I/O thread will throw an
{@link AsynchronousCloseException} and the channel will be closed.
<p>
A channel that is interruptible permits a thread blocked on an I/O operation
(the I/O thread) to be interrupted by another thread (by invoking
{@link Thread#interrupt()} on the I/O thread). When the I/O thread is
interrupted it will throw a {@link ClosedByInterruptException}, it will have
its interrupted status set and the channel will be closed. If the I/O thread
attempts to make an I/O call with the interrupt status set the call will
immediately fail with a {@link ClosedByInterruptException}."
      classrelation 253979 // <generalisation>
	relation 253979 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 253979 // <generalisation>
	  b parent class_ref 160155 // Channel
      end

      operation 704283 "close"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes the channel.
<p>
Any threads that are blocked on I/O operations on this channel will be
interrupted with an {@link AsynchronousCloseException}. Otherwise, this
method behaves the same as defined in the {@code Channel} interface.

@throws IOException
            if an I/O error occurs while closing the channel."
      end
    end

    class 182683 "AsynchronousCloseException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code AsynchronousCloseException} is thrown when the underlying channel
for an I/O operation is closed by another thread."
      classrelation 270619 // <generalisation>
	relation 270619 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 270619 // <generalisation>
	  b parent class_ref 183195 // ClosedChannelException
      end

      attribute 238875 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6891178312432313966L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 781083 "AsynchronousCloseException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code AsynchronousCloseException}."
      end
    end

    class 182811 "SelectionKey"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code SelectionKey} represents the relationship between a channel and a
selector for which the channel is registered.
<h3>Operation set</h3>
An operation set is represented by an integer value. The bits of an operation
set represent categories of operations for a key's channel: Accepting socket
connections ({@code OP_ACCEPT}), connecting with a socket ({@code OP_CONNECT}),
reading ({@code OP_READ}) and writing ({@code OP_WRITE}).
<h4>Interest set</h4>
The interest set is an operation set that defines the operations that a
{@link SelectableChannel channel} is interested in performing.
<h4>Ready set</h4>
The ready set is an operation set that shows the operations that a
{@code channel} is ready to execute."
      attribute 236187 "OP_ACCEPT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Interest set mask bit for socket-accept operations.
"
      end

      attribute 236315 "OP_CONNECT"
	class_attribute const_attribute public explicit_type "int"
	init_value " 8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Interest set mask bit for socket-connect operations.
"
      end

      attribute 236443 "OP_READ"
	class_attribute const_attribute public explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Interesting operation mask bit for read operations.
"
      end

      attribute 236571 "OP_WRITE"
	class_attribute const_attribute public explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Interest set mask bit for write operations.
"
      end

      classrelation 263579 // attachment (<unidirectional association>)
	relation 263579 --->
	  a role_name "attachment" init_value " null" volatile private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 263579 // attachment (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      operation 752155 "SelectionKey"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code SelectionKey}."
      end

      operation 752283 "attach"
	public return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "anObject" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attaches an object to this key. It is acceptable to attach {@code null},
this discards the old attachment.

@param anObject
           the object to attach, or {@code null} to discard the current
           attachment.
@return the last attached object or {@code null} if no object has been
        attached."
      end

      operation 752411 "attachment"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the attached object.

@return the attached object or {@code null} if no object has been
        attached."
      end

      operation 752539 "cancel"
	abstract public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels this key.
<p>
A key that has been canceled is no longer valid. Calling this method on
an already canceled key does nothing.
<p>
Calling this method is safe at any time. The call might block until
another ongoing call to a method of this selector has finished. The
reason is that it is synchronizing on the key set of the selector. After
this call finishes, the key will have been added to the selectors
canceled-keys set and will not be included in any future selects of this
selector."
      end

      operation 752667 "channel"
	abstract public return_type class_ref 182299 // SelectableChannel
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the channel of this key.

@return the channel of this key."
      end

      operation 752795 "interestOps"
	abstract public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets this key's {@link SelectionKey interest set}. The returned set has
only those bits set that are valid for this key's channel.

@return the interest set of this key.
@throws CancelledKeyException
            if the key has already been canceled."
      end

      operation 752923 "interestOps"
	abstract public return_type class_ref 182811 // SelectionKey
	nparams 1
	  param in name "operations" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the {@link SelectionKey interest set} for this key.

@param operations
           the new interest set.
@return this key.
@throws IllegalArgumentException
            if a bit in {@code operations} is not in the set of
            {@link SelectableChannel#validOps() valid operations} of this
            key's channel.
@throws CancelledKeyException
            if the key has already been canceled."
      end

      operation 753051 "isAcceptable"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this key's channel is interested in the accept
operation and is ready to accept new connections. A call to this method
is equal to executing {@code (readyOps() & OP_ACCEPT) == OP_ACCEPT}.

@return {@code true} if the channel is interested in the accept operation
        and is ready to accept new connections, {@code false} otherwise.
@throws CancelledKeyException
            if the key has already been canceled."
      end

      operation 753179 "isConnectable"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this key's channel is interested in the connect
operation and is ready to connect. A call to this method is equal to
executing {@code (readyOps() & OP_CONNECT) == OP_CONNECT}.

@return {@code true} if the channel is interested in the connect
        operation and is ready to connect, {@code false} otherwise.
@throws CancelledKeyException
            if the key has already been canceled."
      end

      operation 753307 "isReadable"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this key's channel is interested in the read operation
and is ready to read. A call to this method is equal to executing
{@code (readyOps() & OP_READ) == OP_READ}.

@return {@code true} if the channel is interested in the read operation
        and is ready to read, {@code false} otherwise.
@throws CancelledKeyException
            if the key has already been canceled."
      end

      operation 753435 "isValid"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this key is valid. A key is valid as long as it has not
been canceled.

@return {@code true} if this key has not been canceled, {@code false}
        otherwise."
      end

      operation 753563 "isWritable"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this key's channel is interested in the write operation
and is ready to write. A call to this method is equal to executing
{@code (readyOps() & OP_WRITE) == OP_WRITE}.

@return {@code true} if the channel is interested in the write operation
        and is ready to write, {@code false} otherwise.
@throws CancelledKeyException
            if the key has already been canceled."
      end

      operation 753691 "readyOps"
	abstract public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the set of operations that are ready. The returned set has only
those bits set that are valid for this key's channel.

@return the operations for which this key's channel is ready.
@throws CancelledKeyException
            if the key has already been canceled."
      end

      operation 753819 "selector"
	abstract public return_type class_ref 182939 // Selector
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the selector for which this key's channel is registered.

@return the related selector."
      end
    end

    class 182939 "Selector"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A controller for the selection of {@link SelectableChannel} objects.
Selectable channels can be registered with a selector and get a
{@link SelectionKey} that represents the registration. The keys are also
added to the selector's key set. Selection keys can be canceled so that the
corresponding channel is no longer registered with the selector.
<p>
By invoking the {@code select} method, the key set is checked and all keys
that have been canceled since last select operation are moved to the set of
canceled keys. During the select operation, the channels registered with this
selector are checked to see whether they are ready for operation according to
their {@link SelectionKey interest set}."
      operation 755611 "open"
	class_operation public return_type class_ref 182939 // Selector
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a selector returned by {@link SelectorProvider#provider}'s
{@link SelectorProvider#openSelector} method.

@throws IOException
            if an I/O error occurs."
      end

      operation 755739 "Selector"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Selector}."
      end

      operation 755867 "close"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Closes this selector. Ongoing calls to the {@code select} methods of this
selector will get interrupted. This interruption behaves as if the
{@link #wakeup()} method of this selector is called. After this, all keys
that are still valid are invalidated and their channels are unregistered.
All resources held by this selector are released.
<p>
Any further attempt of using this selector after this method has been
called (except calling {@link #close()} or {@link #wakeup()}) results in
a {@link ClosedSelectorException} being thrown.

@throws IOException
            if an I/O error occurs."
      end

      operation 755995 "isOpen"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this selector is open.

@return {@code true} if this selector is not closed, {@code false}
        otherwise."
      end

      operation 756123 "keys"
	abstract public return_type class_ref 129691 // Set
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SelectionKey> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the set of registered keys. The set is immutable and is not thread-
safe.

@return the set of registered keys."
      end

      operation 756251 "provider"
	abstract public return_type class_ref 183067 // SelectorProvider
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the provider of this selector.

@return the provider of this selector."
      end

      operation 756379 "select"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Detects if any of the registered channels is ready for I/O operations
according to its {@link SelectionKey interest set}. This method does not
return until at least one channel is ready, {@link #wakeup()} is
invoked or the calling thread is interrupted.

@return the number of channels that are ready for operation.
@throws IOException
            if an I/O error occurs.
@throws ClosedSelectorException
            if the selector is closed."
      end

      operation 756507 "select"
	abstract public explicit_return_type "int"
	nparams 1
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Detects if any of the registered channels is ready for I/O operations
according to its {@link SelectionKey interest set}. This method does not
return until at least one channel is ready, {@link #wakeup()} is invoked,
the calling thread is interrupted or the specified {@code timeout}
expires.

@param timeout
           the non-negative timeout in millisecond; 0 will block forever
           if no channels get ready.
@return the number of channels that are ready for operation.
@throws ClosedSelectorException
            if the selector is closed.
@throws IllegalArgumentException
            if the given timeout argument is less than zero.
@throws IOException
            if an I/O error occurs."
      end

      operation 756635 "selectedKeys"
	abstract public return_type class_ref 129691 // Set
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<SelectionKey> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the selection keys whose channels are ready for operation. The set
is not thread-safe and no keys may be added to it. Removing keys is
allowed.

@return the selection keys whose channels are ready for operation.
@throws ClosedSelectorException
            if the selector is closed."
      end

      operation 756763 "selectNow"
	abstract public explicit_return_type "int"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Detects if any of the registered channels is ready for I/O operations
according to its {@link SelectionKey interest set}. This operation will
return immediately.

@return the number of channels that are ready for operation, 0 if none is
        ready.
@throws IOException
            if an I/O error occurrs.
@throws ClosedSelectorException
            if the selector is closed."
      end

      operation 756891 "wakeup"
	abstract public return_type class_ref 182939 // Selector
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces blocked {@code select} operations to return immediately.
<p>
If no {@code select} operation is blocked when {@code wakeup()} is called
then the next {@code select} operation will return immediately. This can
be undone by a call to {@code selectNow()}; after calling
{@code selectNow()}, a subsequent call of {@code select} can block
again.

@return this selector.
@throws ClosedSelectorException
            if the selector is closed."
      end
    end

    class 183195 "ClosedChannelException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code ClosedChannelException} is thrown when a channel is closed for the
type of operation attempted."
      classrelation 270491 // <generalisation>
	relation 270491 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 270491 // <generalisation>
	  b parent class_ref 128539 // IOException
      end

      attribute 238747 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 882777185433553857L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 780955 "ClosedChannelException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code ClosedChannelException}."
      end
    end

    class 183323 "ByteChannel"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A ByteChannel is both readable and writable.
<p>
The methods for the byte channel are precisely those defined by readable and
writable byte channels.

@see ReadableByteChannel
@see WritableByteChannel"
      classrelation 255387 // <generalisation>
	relation 255387 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 255387 // <generalisation>
	  b parent class_ref 183451 // ReadableByteChannel
      end

      classrelation 255643 // <generalisation>
	relation 255643 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 255643 // <generalisation>
	  b parent class_ref 183579 // WritableByteChannel
      end
    end

    class 183451 "ReadableByteChannel"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code ReadableByteChannel} is a type of {@link Channel} that can read
bytes.
<p>
Read operations are synchronous on a {@code ReadableByteChannel}, that is,
if a read is already in progress on the channel then subsequent reads will
block until the first read completes. It is undefined whether non-read
operations will block."
      classrelation 255259 // <generalisation>
	relation 255259 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 255259 // <generalisation>
	  b parent class_ref 160155 // Channel
      end

      operation 708123 "read"
	public explicit_return_type "int"
	nparams 1
	  param inout name "buffer" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from the channel into the given buffer.
<p>
The maximum number of bytes that will be read is the
{@link java.nio.Buffer#remaining() remaining} number of bytes in the
buffer when the method is invoked. The bytes will be read into the buffer
starting at the buffer's current
{@link java.nio.Buffer#position() position}.
<p>
The call may block if other threads are also attempting to read from the
same channel.
<p>
Upon completion, the buffer's {@code position} is updated to the end of
the bytes that were read. The buffer's
{@link java.nio.Buffer#limit() limit} is not changed.

@param buffer
           the byte buffer to receive the bytes.
@return the number of bytes actually read.
@throws AsynchronousCloseException
            if another thread closes the channel during the read.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if the channel is closed.
@throws IOException
            another I/O error occurs, details are in the message.
@throws NonReadableChannelException
            if the channel was not opened for reading."
      end
    end

    class 183579 "WritableByteChannel"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code WritableByteChannel} is a type of {@link Channel} that can write
bytes.
<p>
Write operations are synchronous on a {@code WritableByteChannel}, that is,
if a write is already in progress on the channel then subsequent writes will
block until the first write completes. It is undefined whether non-write
operations will block."
      classrelation 255515 // <generalisation>
	relation 255515 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 255515 // <generalisation>
	  b parent class_ref 160155 // Channel
      end

      operation 708251 "write"
	public explicit_return_type "int"
	nparams 1
	  param inout name "buffer" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes bytes from the given buffer to the channel.
<p>
The maximum number of bytes that will be written is the
<code>remaining()</code> number of bytes in the buffer when the method
invoked. The bytes will be written from the buffer starting at the
buffer's <code>position</code>.
<p>
The call may block if other threads are also attempting to write on the
same channel.
<p>
Upon completion, the buffer's <code>position()</code> is updated to the
end of the bytes that were written. The buffer's <code>limit()</code>
is unmodified.

@param buffer
           the byte buffer containing the bytes to be written.
@return the number of bytes actually written.
@throws NonWritableChannelException
            if the channel was not opened for writing.
@throws ClosedChannelException
            if the channel was already closed.
@throws AsynchronousCloseException
            if another thread closes the channel during the write.
@throws ClosedByInterruptException
            if another thread interrupt the calling thread during the
            write.
@throws IOException
            another IO exception occurs, details are in the message."
      end
    end

    class 183707 "ScatteringByteChannel"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The interface for channels that can read data into a set of buffers in a
single operation. The corresponding interface for writes is
{@link GatheringByteChannel}."
      classrelation 255899 // <generalisation>
	relation 255899 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 255899 // <generalisation>
	  b parent class_ref 183451 // ReadableByteChannel
      end

      operation 708379 "read"
	public explicit_return_type "long"
	nparams 1
	  param inout name "buffers" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reads bytes from this channel into the specified array of buffers.
<p>
This method is equivalent to {@code read(buffers, 0, buffers.length);}

@param buffers
           the array of byte buffers to store the bytes being read.
@return the number of bytes actually read.
@throws AsynchronousCloseException
            if the channel is closed by another thread during this read
            operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if the channel is closed.
@throws IOException
            if another I/O error occurs; details are in the message.
@throws NonWritableChannelException
            if the channel has not been opened in a mode that permits
            reading."
      end

      operation 708507 "read"
	public explicit_return_type "long"
	nparams 3
	  param inout name "buffers" type class_ref 142363 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to read all {@code remaining()} bytes from {@code length} byte
buffers, in order, starting at {@code buffers[offset]}. The number of
bytes actually read is returned.
<p>
If a read operation is in progress, subsequent threads will block until
the read is completed and will then contend for the ability to read.

@param buffers
           the array of byte buffers into which the bytes will be copied.
@param offset
           the index of the first buffer to store bytes in.
@param length
           the maximum number of buffers to store bytes in.
@return the number of bytes actually read.
@throws AsynchronousCloseException
            if the channel is closed by another thread during this read
            operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if the channel is closed.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the size of
            {@code buffers}.
@throws IOException
            if another I/O error occurs; details are in the message.
@throws NonWritableChannelException
            if the channel has not been opened in a mode that permits
            reading."
      end
    end

    class 183835 "GatheringByteChannel"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "The interface for channels that can write a set of buffers in a single
operation. The corresponding interface for read operations is
{@link ScatteringByteChannel}."
      classrelation 256155 // <generalisation>
	relation 256155 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 256155 // <generalisation>
	  b parent class_ref 183579 // WritableByteChannel
      end

      operation 708635 "write"
	public explicit_return_type "long"
	nparams 1
	  param inout name "buffers" type class_ref 142363 // ByteBuffer
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Writes bytes from all the given buffers to a channel.
<p>
This method is equivalent to: {@code write(buffers, 0, buffers.length);}

@param buffers
           the buffers containing bytes to be written.
@return the number of bytes actually written.
@throws AsynchronousCloseException
            if the channel is closed by another thread during this write
            operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if the channel is closed.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the size of
            {@code buffers}.
@throws IOException
            if another I/O error occurs; details are in the message.
@throws NonWritableChannelException
            if the channel has not been opened in a mode that permits
            writing."
      end

      operation 708763 "write"
	public explicit_return_type "long"
	nparams 3
	  param inout name "buffers" type class_ref 142363 // ByteBuffer
	  param in name "offset" explicit_type "int"
	  param in name "length" explicit_type "int"
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to write all <code>remaining()</code> bytes from {@code length}
byte buffers, in order, starting at {@code buffers[offset]}. The number
of bytes actually written is returned.
<p>
If a write operation is in progress, subsequent threads will block until
the write is completed and then contend for the ability to write.

@param buffers
           the array of byte buffers that is the source for bytes written
           to the channel.
@param offset
           the index of the first buffer in {@code buffers }to get bytes
           from.
@param length
           the number of buffers to get bytes from.
@return the number of bytes actually written.
@throws AsynchronousCloseException
            if the channel is closed by another thread during this write
            operation.
@throws ClosedByInterruptException
            if another thread interrupts the calling thread while the
            operation is in progress. The interrupt state of the calling
            thread is set and the channel is closed.
@throws ClosedChannelException
            if the channel is closed.
@throws IndexOutOfBoundsException
            if {@code offset < 0} or {@code length < 0}, or if
            {@code offset + length} is greater than the size of
            {@code buffers}.
@throws IOException
            if another I/O error occurs; details are in the message.
@throws NonWritableChannelException
            if the channel was not opened for writing."
      end
    end

    class 184859 "FileLock"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code FileLock} represents a locked region of a file.
<p>
Locks have certain properties that enable collaborating processes to avoid
the lost update problem or reading inconsistent data. Logically, a file lock
can be <em>exclusive</em> or <em>shared</em>. Multiple processes can hold
shared locks on the same region of a file, but only a single process can hold
an exclusive lock on a given region of a file and no other process can
simultaneously hold a shared lock overlapping the exclusive lock. An
application can determine whether a {@code FileLock} is shared or exclusive
via the {@code isShared()} method.
<p>
Locks held by a particular process cannot overlap one another. Applications
can determine whether a proposed lock will overlap by using the {@code
overlaps(long, long)}) method. Locks held in other processes may overlap
locks held in this process. Locks are shared amongst all threads in the
acquiring process, and are therefore unsuitable for intra-process
synchronization.
<p>
Once a lock is acquired, it is immutable in all its state except {@code
isValid()}. The lock will initially be valid, but may be rendered invalid by
explicit removal of the lock, using {@code release()}, or implicitly by
closing the channel or exiting the process (terminating the VM).
<h3>Platform dependencies</h3>
<p>
Locks are intended to be true platform operating system file locks, and
therefore locks held by the VM will be visible to other
operating system processes.
<p>
The characteristics of the underlying operating system locks will show
through in the Java implementation. For example, some platforms' locks are
'mandatory' -- meaning the operating system enforces the locks on processes
that attempt to access locked regions of files; whereas other platforms'
locks are only 'advisory' -- meaning that processes are required to
collaborate to ensure locks are acquired and there is a potential for
processes to not play well. To be on the safe side, it is best to assume that
the platform is adopting advisory locks and always acquire shared locks when
reading a region of a file.
<p>
On some platforms, the presence of a lock will prevent the file from being
memory-mapped. On some platforms, closing a channel on a given file handle
will release all the locks held on that file -- even if there are other
channels open on the same file; their locks will also be released. The safe
option here is to ensure that you only acquire locks on a single channel for
a particular file and that becomes the synchronization point.
<p>
Further care should be exercised when locking files maintained on network
file systems, since they often have further limitations."
      classrelation 259739 // channel (<unidirectional association>)
	relation 259739 --->
	  a role_name "channel" const_relation private
	    comment " The underlying file channel.
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 259739 // channel (<unidirectional association>)
	  b parent class_ref 141083 // FileChannel
      end

      attribute 233115 "position"
	const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The lock starting position."
      end

      attribute 233243 "size"
	const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The lock length in bytes"
      end

      attribute 233371 "shared"
	const_attribute private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " If true then shared, if false then exclusive"
      end

      operation 730139 "FileLock"
	protected explicit_return_type ""
	nparams 4
	  param inout name "channel" type class_ref 141083 // FileChannel
	  param in name "position" explicit_type "long"
	  param in name "size" explicit_type "long"
	  param inout name "shared" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new file lock instance for a given channel. The constructor
enforces the starting position, length and sharing mode of the lock.

@param channel
           the underlying file channel that holds the lock.
@param position
           the starting point for the lock.
@param size
           the length of the lock in number of bytes.
@param shared
           the lock's sharing mode of lock; {@code true} is shared,
           {@code false} is exclusive."
      end

      operation 730267 "channel"
	public return_type class_ref 141083 // FileChannel
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lock's {@link FileChannel}.

@return the channel."
      end

      operation 730395 "position"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the lock's starting position in the file.

@return the lock position."
      end

      operation 730523 "size"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the length of the file lock in bytes.

@return the size of the file lock in bytes."
      end

      operation 730651 "isShared"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if the file lock is shared with other processes or if it is
exclusive.

@return {@code true} if the lock is a shared lock, {@code false} if it is
        exclusive."
      end

      operation 730779 "overlaps"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "start" explicit_type "long"
	  param in name "length" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates if the receiver's lock region overlaps the region described
in the parameter list.

@param start
           the starting position for the comparative lock.
@param length
           the length of the comparative lock.
@return {@code true} if there is an overlap, {@code false} otherwise."
      end

      operation 730907 "isValid"
	abstract public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Indicates whether this lock is a valid file lock. The lock is
valid unless the underlying channel has been closed or it has been
explicitly released.

@return {@code true} if the lock is valid, {@code false} otherwise."
      end

      operation 731035 "release"
	abstract public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases this particular lock on the file. If the lock is invalid then
this method has no effect. Once released, the lock becomes invalid.

@throws ClosedChannelException
            if the channel is already closed when an attempt to release
            the lock is made.
@throws IOException
            if another I/O error occurs."
      end

      operation 731163 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Returns a string that shows the details of the lock suitable for display
to an end user.

@return the display string."
      end
    end

    class 185371 "OverlappingFileLockException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code OverlappingFileLockException} is thrown when attempting to acquire
a lock that overlaps an existing or pending lock held by this process."
      classrelation 273563 // <generalisation>
	relation 273563 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 273563 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 240539 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2047812138163068433L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 785947 "OverlappingFileLockException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code OverlappingFileLockException}."
      end
    end

    class 186907 "Pipe"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A pipe contains two channels, forming a unidirectional pipe. One is the writable sink channel,
and the other is the readable source channel. When bytes are written into the writable
channel they can be read from the readable channel. Bytes are read in the order in which they
were written."
      class 187035 "SinkChannel"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 261275 // <generalisation>
	  relation 261275 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 261275 // <generalisation>
	    b parent class_ref 182171 // AbstractSelectableChannel
	end

	classrelation 261403 // <realization>
	  relation 261403 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 261403 // <realization>
	    b parent class_ref 183579 // WritableByteChannel
	end

	classrelation 261531 // <realization>
	  relation 261531 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 261531 // <realization>
	    b parent class_ref 183835 // GatheringByteChannel
	end

	operation 748827 "SinkChannel"
	  protected explicit_return_type ""
	  nparams 1
	    param inout name "provider" type class_ref 183067 // SelectorProvider
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new {@code SinkChannel}.

@param provider
           the provider of the channel."
	end

	operation 748955 "validOps"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Indicates that this channel only supports writing.

@return a static value of OP_WRITE."
	end
      end

      class 187163 "SourceChannel"
	abstract visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 261659 // <generalisation>
	  relation 261659 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 261659 // <generalisation>
	    b parent class_ref 182171 // AbstractSelectableChannel
	end

	classrelation 261787 // <realization>
	  relation 261787 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 261787 // <realization>
	    b parent class_ref 183451 // ReadableByteChannel
	end

	classrelation 261915 // <realization>
	  relation 261915 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 261915 // <realization>
	    b parent class_ref 183707 // ScatteringByteChannel
	end

	operation 749083 "SourceChannel"
	  protected explicit_return_type ""
	  nparams 1
	    param inout name "provider" type class_ref 183067 // SelectorProvider
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new {@code SourceChannel}.

@param provider
           the provider of the channel."
	end

	operation 749211 "validOps"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	  comment "Indicates that this channel only supports reading.

@return a static value of OP_READ."
	end
      end

      operation 749339 "open"
	class_operation public return_type class_ref 186907 // Pipe
	nparams 0
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new pipe from the default {@see java.nio.channels.spi.SelectorProvider}.

@throws IOException
            if an I/O error occurs."
      end

      operation 749467 "Pipe"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The protected default constructor."
      end

      operation 749595 "sink"
	abstract public return_type class_ref 187035 // SinkChannel
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the sink channel of the pipe.

@return a writable sink channel of the pipe."
      end

      operation 749723 "source"
	abstract public return_type class_ref 187163 // SourceChannel
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the source channel of the pipe.

@return a readable source channel of the pipe."
      end
    end

    class 189723 "AlreadyConnectedException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code AlreadyConnectedException} is thrown when an attempt is made to
connect a SocketChannel that is already connected."
      classrelation 270363 // <generalisation>
	relation 270363 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 270363 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 238619 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7331895245053773357L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 780827 "AlreadyConnectedException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code AlreadyConnectedException}."
      end
    end

    class 189851 "CancelledKeyException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code CancelledKeyException} is thrown when an invalid selection key is
used."
      classrelation 270747 // <generalisation>
	relation 270747 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 270747 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 239003 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8438032138028814268L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Version ID for serialization.
"
      end

      operation 781211 "CancelledKeyException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code CancelledKeyException}."
      end
    end

    class 189979 "Channels"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This class provides several utilities to get I/O streams from channels."
      operation 781339 "Channels"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 781467 "newInputStream"
	class_operation public return_type class_ref 131867 // InputStream
	nparams 1
	  param inout name "channel" type class_ref 183451 // ReadableByteChannel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an input stream on the given channel. The resulting stream has
the following properties:
<ul>
<li>If the stream is closed, then the underlying channel is closed as
well.</li>
<li>It is thread safe.</li>
<li>It throws an {@link IllegalBlockingModeException} if the channel is
in non-blocking mode and {@code read} is called.</li>
<li>Neither {@code mark} nor {@code reset} is supported.</li>
<li>It is not buffered.</li>
</ul>

@param channel
           the channel to be wrapped by an InputStream.
@return an InputStream that takes bytes from the given byte channel."
      end

      operation 781595 "newOutputStream"
	class_operation public return_type class_ref 132635 // OutputStream
	nparams 1
	  param inout name "channel" type class_ref 183579 // WritableByteChannel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an output stream on the given channel. The resulting stream has
the following properties:
<ul>
<li>If the stream is closed, then the underlying channel is closed as
well.</li>
<li>It is thread safe.</li>
<li>It throws an {@link IllegalBlockingModeException} if the channel is
in non-blocking mode and {@code write} is called.</li>
<li>It is not buffered.</li>
</ul>

@param channel
           the channel to be wrapped by an OutputStream.
@return an OutputStream that puts bytes onto the given byte channel."
      end

      operation 781723 "newChannel"
	class_operation public return_type class_ref 183451 // ReadableByteChannel
	nparams 1
	  param inout name "inputStream" type class_ref 131867 // InputStream
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a readable channel on the given input stream. The resulting
channel has the following properties:
<ul>
<li>If the channel is closed, then the underlying stream is closed as
well.</li>
<li>It is not buffered.</li>
</ul>

@param inputStream
           the stream to be wrapped by a byte channel.
@return a byte channel that reads bytes from the input stream."
      end

      operation 781851 "newChannel"
	class_operation public return_type class_ref 183579 // WritableByteChannel
	nparams 1
	  param inout name "outputStream" type class_ref 132635 // OutputStream
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a writable channel on the given output stream.

The resulting channel has following properties:
<ul>
<li>If the channel is closed, then the underlying stream is closed as
well.</li>
<li>It is not buffered.</li>
</ul>

@param outputStream
           the stream to be wrapped by a byte channel.
@return a byte channel that writes bytes to the output stream."
      end

      operation 781979 "newReader"
	class_operation public return_type class_ref 133019 // Reader
	nparams 3
	  param inout name "channel" type class_ref 183451 // ReadableByteChannel
	  param inout name "decoder" type class_ref 142235 // CharsetDecoder
	  param in name "minBufferCapacity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reader that decodes bytes from a channel.

@param channel
           the Channel to be read.
@param decoder
           the Charset decoder to be used.
@param minBufferCapacity
           The minimum size of the byte buffer, -1 means to use the
           default size.
@return the reader."
      end

      operation 782107 "newReader"
	class_operation public return_type class_ref 133019 // Reader
	nparams 2
	  param inout name "channel" type class_ref 183451 // ReadableByteChannel
	  param inout name "charsetName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reader that decodes bytes from a channel. This method creates a
reader with a buffer of default size.

@param channel
           the Channel to be read.
@param charsetName
           the name of the charset.
@return the reader.
@throws java.nio.charset.UnsupportedCharsetException
            if the given charset name is not supported."
      end

      operation 782235 "newWriter"
	class_operation public return_type class_ref 133531 // Writer
	nparams 3
	  param inout name "channel" type class_ref 183579 // WritableByteChannel
	  param inout name "encoder" type class_ref 142875 // CharsetEncoder
	  param in name "minBufferCapacity" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a writer that encodes characters with the specified
{@code encoder} and sends the bytes to the specified channel.

@param channel
           the Channel to write to.
@param encoder
           the CharsetEncoder to be used.
@param minBufferCapacity
           the minimum size of the byte buffer, -1 means to use the
           default size.
@return the writer."
      end

      operation 782363 "newWriter"
	class_operation public return_type class_ref 133531 // Writer
	nparams 2
	  param inout name "channel" type class_ref 183579 // WritableByteChannel
	  param inout name "charsetName" type class_ref 3399692 // String
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a writer that encodes characters with the specified
{@code encoder} and sends the bytes to the specified channel. This method
creates a writer with a buffer of default size.

@param channel
           the Channel to be written to.
@param charsetName
           the name of the charset.
@return the writer.
@throws java.nio.charset.UnsupportedCharsetException
            if the given charset name is not supported."
      end

      class 190107 "ChannelInputStream"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 270875 // <generalisation>
	  relation 270875 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 270875 // <generalisation>
	    b parent class_ref 131867 // InputStream
	end

	classrelation 271003 // channel (<unidirectional association>)
	  relation 271003 --->
	    a role_name "channel" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 271003 // channel (<unidirectional association>)
	    b parent class_ref 183451 // ReadableByteChannel
	end

	operation 782491 "ChannelInputStream"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "channel" type class_ref 183451 // ReadableByteChannel
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 782619 "read"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 782747 "read"
	  public explicit_return_type "int"
	  nparams 3
	    param inout name "target" explicit_type "byte"
	    param in name "offset" explicit_type "int"
	    param in name "length" explicit_type "int"
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 782875 "available"
	  public explicit_return_type "int"
	  nparams 0
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 783003 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 190235 "ChannelOutputStream"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 271131 // <generalisation>
	  relation 271131 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 271131 // <generalisation>
	    b parent class_ref 132635 // OutputStream
	end

	classrelation 271259 // channel (<unidirectional association>)
	  relation 271259 --->
	    a role_name "channel" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 271259 // channel (<unidirectional association>)
	    b parent class_ref 183579 // WritableByteChannel
	end

	operation 783131 "ChannelOutputStream"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "channel" type class_ref 183579 // WritableByteChannel
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 783259 "write"
	  public explicit_return_type "void"
	  nparams 1
	    param in name "oneByte" explicit_type "int"
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 783387 "write"
	  public explicit_return_type "void"
	  nparams 3
	    param inout name "source" explicit_type "byte"
	    param in name "offset" explicit_type "int"
	    param in name "length" explicit_type "int"
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 783515 "close"
	  public explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      operation 783643 "checkBlocking"
	class_operation package explicit_return_type "void"
	nparams 1
	  param inout name "channel" type class_ref 160155 // Channel
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 190363 "InputStreamChannel"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 271387 // <generalisation>
	  relation 271387 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 271387 // <generalisation>
	    b parent class_ref 182427 // AbstractInterruptibleChannel
	end

	classrelation 271515 // <realization>
	  relation 271515 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 271515 // <realization>
	    b parent class_ref 183451 // ReadableByteChannel
	end

	classrelation 271643 // inputStream (<unidirectional association>)
	  relation 271643 --->
	    a role_name "inputStream" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 271643 // inputStream (<unidirectional association>)
	    b parent class_ref 131867 // InputStream
	end

	operation 783771 "InputStreamChannel"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "inputStream" type class_ref 131867 // InputStream
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 783899 "read"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "target" type class_ref 142363 // ByteBuffer
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 784027 "implCloseChannel"
	  protected explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 190491 "OutputStreamChannel"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 271771 // <generalisation>
	  relation 271771 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 271771 // <generalisation>
	    b parent class_ref 182427 // AbstractInterruptibleChannel
	end

	classrelation 271899 // <realization>
	  relation 271899 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 271899 // <realization>
	    b parent class_ref 183579 // WritableByteChannel
	end

	classrelation 272027 // outputStream (<unidirectional association>)
	  relation 272027 --->
	    a role_name "outputStream" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 272027 // outputStream (<unidirectional association>)
	    b parent class_ref 132635 // OutputStream
	end

	operation 784155 "OutputStreamChannel"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "outputStream" type class_ref 132635 // OutputStream
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 784283 "write"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "source" type class_ref 142363 // ByteBuffer
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 784411 "implCloseChannel"
	  protected explicit_return_type "void"
	  nparams 0
	  nexceptions 1
	    exception class_ref 128539 // IOException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end
    end

    class 190619 "ClosedByInterruptException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code ClosedByInterruptException} is thrown when a thread is interrupted
in a blocking I/O operation.
<p>
When the thread is interrupted by a call to {@code interrupt()}, it closes
the channel, sets the interrupt status of the thread to {@code true} and
throws a {@code ClosedByInterruptException}."
      classrelation 272155 // <generalisation>
	relation 272155 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 272155 // <generalisation>
	  b parent class_ref 182683 // AsynchronousCloseException
      end

      attribute 239131 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -4488191543534286750L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 784539 "ClosedByInterruptException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code ClosedByInterruptException}."
      end
    end

    class 190747 "ClosedSelectorException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code ClosedSelectorException} is thrown when a {@link Selector selector}
is closed and an I/O operation is attempted."
      classrelation 272283 // <generalisation>
	relation 272283 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 272283 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 239259 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6466297122317847835L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 784667 "ClosedSelectorException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code ClosedSelectorException}."
      end
    end

    class 190875 "ConnectionPendingException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code ConnectionPendingException} is thrown when an attempt is made to
connect a {@link SocketChannel} that has a non-blocking connection already
underway."
      classrelation 272411 // <generalisation>
	relation 272411 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 272411 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 239387 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 2008393366501760879L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 784795 "ConnectionPendingException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code ConnectionPendingException}."
      end
    end

    class 191003 "FileLockInterruptionException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code FileLockInterruptionException} is thrown when a thread is
interrupted while waiting to acquire a file lock.
<p>
Note that the thread will also be in the 'interrupted' state."
      classrelation 272539 // <generalisation>
	relation 272539 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 272539 // <generalisation>
	  b parent class_ref 128539 // IOException
      end

      attribute 239515 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7104080643653532383L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 784923 "FileLockInterruptionException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code FileLockInterruptionException}."
      end
    end

    class 191131 "IllegalBlockingModeException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code IllegalBlockingModeException} is thrown when an operation that
requires a specific blocking mode is invoked on a channel that is in a
different blocking mode."
      classrelation 272667 // <generalisation>
	relation 272667 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 272667 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 239643 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3335774961855590474L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 785051 "IllegalBlockingModeException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code IllegalBlockingModeException}."
      end
    end

    class 191259 "IllegalSelectorException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code IllegalSelectorException} is thrown when a call is made to register
a channel on a selector that has been created by a different provider."
      classrelation 272795 // <generalisation>
	relation 272795 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 272795 // <generalisation>
	  b parent class_ref 128283 // IllegalArgumentException
      end

      attribute 239771 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8406323347253320987L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 785179 "IllegalSelectorException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code IllegalSelectorException}."
      end
    end

    class 191387 "NoConnectionPendingException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code NoConnectionPendingException} is thrown if {@code SocketChannel}'s
{@link SocketChannel#finishConnect() finishConnect} method is called before
the {@code SocketChannel}'s {@link
SocketChannel#connect(java.net.SocketAddress)} connect} method completed
without error."
      classrelation 272923 // <generalisation>
	relation 272923 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 272923 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 239899 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8296561183633134743L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 785307 "NoConnectionPendingException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code NoConnectionPendingException}."
      end
    end

    class 191515 "NonReadableChannelException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code NonReadableChannelException} is thrown when attempting to read from
a channel that is not open for reading."
      classrelation 273051 // <generalisation>
	relation 273051 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 273051 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 240027 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3200915679294993514L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 785435 "NonReadableChannelException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code NonReadableChannelException}."
      end
    end

    class 191643 "NonWritableChannelException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code NonWritableChannelException} is thrown when attempting to write to a
channel that is not open for writing."
      classrelation 273179 // <generalisation>
	relation 273179 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 273179 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 240155 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7071230488279011621L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 785563 "NonWritableChannelException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code NonWritableChannelException}."
      end
    end

    class 191771 "NotYetBoundException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code NotYetBoundException} is thrown if the server socket channel is not
bound before an I/O operation is made."
      classrelation 273307 // <generalisation>
	relation 273307 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 273307 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 240283 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4640999303950202242L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 785691 "NotYetBoundException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code NotYetBoundException}."
      end
    end

    class 191899 "NotYetConnectedException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@code NotYetConnectedException} is thrown if the socket channel is not
connected before an I/O operation is invoked."
      classrelation 273435 // <generalisation>
	relation 273435 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 273435 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 240411 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 4697316551909513464L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 785819 "NotYetConnectedException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code NotYetConnectedException}."
      end
    end

    class 192027 "UnresolvedAddressException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code UnresolvedAddressException} is thrown when trying to use an
unresolved network address in a network operation."
      classrelation 273691 // <generalisation>
	relation 273691 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 273691 // <generalisation>
	  b parent class_ref 128283 // IllegalArgumentException
      end

      attribute 240667 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 6136959093620794148L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 786075 "UnresolvedAddressException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code UnresolvedAddressException}."
      end
    end

    class 192155 "UnsupportedAddressTypeException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@code UnsupportedAddressTypeException} is thrown when connecting or
binding to an unsupported address type."
      classrelation 273819 // <generalisation>
	relation 273819 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 273819 // <generalisation>
	  b parent class_ref 128283 // IllegalArgumentException
      end

      attribute 240795 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2964323842829700493L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 786203 "UnsupportedAddressTypeException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an {@code UnsupportedAddressTypeException}."
      end
    end
  end

  package_ref 131355 // spi

  deploymentview 129691 "channels"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 172059 "Channel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Closeable;
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 160155 // Channel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 172187 "InterruptibleChannel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 182555 // InterruptibleChannel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 172443 "SelectableChannel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.channels.spi.AbstractInterruptibleChannel;
import java.nio.channels.spi.SelectorProvider;
${definition}"
      associated_classes
	class_ref 182299 // SelectableChannel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 172699 "ReadableByteChannel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.ByteBuffer;
${definition}"
      associated_classes
	class_ref 183451 // ReadableByteChannel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 172827 "WritableByteChannel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.ByteBuffer;
${definition}"
      associated_classes
	class_ref 183579 // WritableByteChannel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 172955 "ByteChannel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 183323 // ByteChannel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 173083 "ScatteringByteChannel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.ByteBuffer;
${definition}"
      associated_classes
	class_ref 183707 // ScatteringByteChannel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 173211 "GatheringByteChannel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.ByteBuffer;
${definition}"
      associated_classes
	class_ref 183835 // GatheringByteChannel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 173339 "DatagramChannel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.net.DatagramSocket;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.spi.AbstractSelectableChannel;
import java.nio.channels.spi.SelectorProvider;
${definition}"
      associated_classes
	class_ref 170907 // DatagramChannel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 174107 "FileChannel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.MappedByteBuffer;
import java.nio.channels.spi.AbstractInterruptibleChannel;
${definition}"
      associated_classes
	class_ref 141083 // FileChannel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 174235 "FileLock"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 184859 // FileLock
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 175515 "Pipe"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.channels.spi.AbstractSelectableChannel;
import java.nio.channels.spi.SelectorProvider;
${definition}"
      associated_classes
	class_ref 186907 // Pipe
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 175899 "SelectionKey"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 182811 // SelectionKey
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 176283 "Selector"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.nio.channels.spi.SelectorProvider;
import java.util.Set;
${definition}"
      associated_classes
	class_ref 182939 // Selector
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 177179 "ServerSocketChannel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.net.ServerSocket;
import java.nio.channels.spi.AbstractSelectableChannel;
import java.nio.channels.spi.SelectorProvider;
${definition}"
      associated_classes
	class_ref 177051 // ServerSocketChannel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 177563 "SocketChannel"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.spi.AbstractSelectableChannel;
import java.nio.channels.spi.SelectorProvider;
${definition}"
      associated_classes
	class_ref 177179 // SocketChannel
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 177819 "AlreadyConnectedException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 189723 // AlreadyConnectedException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 177947 "ClosedChannelException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 183195 // ClosedChannelException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 178075 "AsynchronousCloseException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 182683 // AsynchronousCloseException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 178203 "CancelledKeyException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 189851 // CancelledKeyException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 178331 "Channels"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Reader;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.channels.spi.AbstractInterruptibleChannel;
import java.nio.charset.Charset;
import java.nio.charset.CharsetDecoder;
import java.nio.charset.CharsetEncoder;
import libcore.io.Streams;
${definition}"
      associated_classes
	class_ref 189979 // Channels
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the \"License\"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an \"AS IS\" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License."
    end

    artifact 178459 "ClosedByInterruptException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 190619 // ClosedByInterruptException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 178587 "ClosedSelectorException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 190747 // ClosedSelectorException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 178715 "ConnectionPendingException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 190875 // ConnectionPendingException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 178843 "FileLockInterruptionException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
${definition}"
      associated_classes
	class_ref 191003 // FileLockInterruptionException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 178971 "IllegalBlockingModeException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 191131 // IllegalBlockingModeException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 179099 "IllegalSelectorException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 191259 // IllegalSelectorException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 179227 "NoConnectionPendingException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 191387 // NoConnectionPendingException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 179355 "NonReadableChannelException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 191515 // NonReadableChannelException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 179483 "NonWritableChannelException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 191643 // NonWritableChannelException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 179611 "NotYetBoundException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 191771 // NotYetBoundException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 179739 "NotYetConnectedException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 191899 // NotYetConnectedException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 179867 "OverlappingFileLockException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 185371 // OverlappingFileLockException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 179995 "UnresolvedAddressException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 192027 // UnresolvedAddressException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 180123 "UnsupportedAddressTypeException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 192155 // UnsupportedAddressTypeException
      end
      comment " Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the \"License\"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end
  end
end
