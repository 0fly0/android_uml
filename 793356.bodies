class ConnectivityManager
!!!3581580.java!!!	isNetworkTypeValid(in networkType : int) : boolean
        return networkType >= 0 && networkType <= MAX_NETWORK_TYPE;
!!!3581708.java!!!	getNetworkTypeName(in type : int) : String
        switch (type) {
            case TYPE_MOBILE:
                return "MOBILE";
            case TYPE_WIFI:
                return "WIFI";
            case TYPE_MOBILE_MMS:
                return "MOBILE_MMS";
            case TYPE_MOBILE_SUPL:
                return "MOBILE_SUPL";
            case TYPE_MOBILE_DUN:
                return "MOBILE_DUN";
            case TYPE_MOBILE_HIPRI:
                return "MOBILE_HIPRI";
            case TYPE_WIMAX:
                return "WIMAX";
            case TYPE_BLUETOOTH:
                return "BLUETOOTH";
            case TYPE_DUMMY:
                return "DUMMY";
            case TYPE_ETHERNET:
                return "ETHERNET";
            case TYPE_MOBILE_FOTA:
                return "MOBILE_FOTA";
            case TYPE_MOBILE_IMS:
                return "MOBILE_IMS";
            case TYPE_MOBILE_CBS:
                return "MOBILE_CBS";
            case TYPE_WIFI_P2P:
                return "WIFI_P2P";
            default:
                return Integer.toString(type);
        }
!!!3581836.java!!!	isNetworkTypeMobile(in networkType : int) : boolean
        switch (networkType) {
            case TYPE_MOBILE:
            case TYPE_MOBILE_MMS:
            case TYPE_MOBILE_SUPL:
            case TYPE_MOBILE_DUN:
            case TYPE_MOBILE_HIPRI:
            case TYPE_MOBILE_FOTA:
            case TYPE_MOBILE_IMS:
            case TYPE_MOBILE_CBS:
                return true;
            default:
                return false;
        }
!!!3581964.java!!!	setNetworkPreference(in preference : int) : void
        try {
            mService.setNetworkPreference(preference);
        } catch (RemoteException e) {
        }
!!!3582092.java!!!	getNetworkPreference() : int
        try {
            return mService.getNetworkPreference();
        } catch (RemoteException e) {
            return -1;
        }
!!!3582220.java!!!	getActiveNetworkInfo() : NetworkInfo
        try {
            return mService.getActiveNetworkInfo();
        } catch (RemoteException e) {
            return null;
        }
!!!3582348.java!!!	getActiveNetworkInfoForUid(in uid : int) : NetworkInfo
        try {
            return mService.getActiveNetworkInfoForUid(uid);
        } catch (RemoteException e) {
            return null;
        }
!!!3582476.java!!!	getNetworkInfo(in networkType : int) : NetworkInfo
        try {
            return mService.getNetworkInfo(networkType);
        } catch (RemoteException e) {
            return null;
        }
!!!3582604.java!!!	getAllNetworkInfo() : NetworkInfo
        try {
            return mService.getAllNetworkInfo();
        } catch (RemoteException e) {
            return null;
        }
!!!3582732.java!!!	getActiveLinkProperties() : LinkProperties
        try {
            return mService.getActiveLinkProperties();
        } catch (RemoteException e) {
            return null;
        }
!!!3582860.java!!!	getLinkProperties(in networkType : int) : LinkProperties
        try {
            return mService.getLinkProperties(networkType);
        } catch (RemoteException e) {
            return null;
        }
!!!3582988.java!!!	setRadios(inout turnOn : boolean) : boolean
        try {
            return mService.setRadios(turnOn);
        } catch (RemoteException e) {
            return false;
        }
!!!3583116.java!!!	setRadio(in networkType : int, inout turnOn : boolean) : boolean
        try {
            return mService.setRadio(networkType, turnOn);
        } catch (RemoteException e) {
            return false;
        }
!!!3583244.java!!!	startUsingNetworkFeature(in networkType : int, in feature : String) : int
        try {
            return mService.startUsingNetworkFeature(networkType, feature,
                    new Binder());
        } catch (RemoteException e) {
            return -1;
        }
!!!3583372.java!!!	stopUsingNetworkFeature(in networkType : int, in feature : String) : int
        try {
            return mService.stopUsingNetworkFeature(networkType, feature);
        } catch (RemoteException e) {
            return -1;
        }
!!!3583500.java!!!	requestRouteToHost(in networkType : int, in hostAddress : int) : boolean
        InetAddress inetAddress = NetworkUtils.intToInetAddress(hostAddress);

        if (inetAddress == null) {
            return false;
        }

        return requestRouteToHostAddress(networkType, inetAddress);
!!!3583628.java!!!	requestRouteToHostAddress(in networkType : int, inout hostAddress : InetAddress) : boolean
        byte[] address = hostAddress.getAddress();
        try {
            return mService.requestRouteToHostAddress(networkType, address);
        } catch (RemoteException e) {
            return false;
        }
!!!3583756.java!!!	getBackgroundDataSetting() : boolean
        // assume that background data is allowed; final authority is
        // NetworkInfo which may be blocked.
        return true;
!!!3583884.java!!!	setBackgroundDataSetting(inout allowBackgroundData : boolean) : void
        // ignored
!!!3584012.java!!!	getActiveNetworkQuotaInfo() : NetworkQuotaInfo
        try {
            return mService.getActiveNetworkQuotaInfo();
        } catch (RemoteException e) {
            return null;
        }
!!!3584140.java!!!	getMobileDataEnabled() : boolean
        try {
            return mService.getMobileDataEnabled();
        } catch (RemoteException e) {
            return true;
        }
!!!3584268.java!!!	setMobileDataEnabled(inout enabled : boolean) : void
        try {
            mService.setMobileDataEnabled(enabled);
        } catch (RemoteException e) {
        }
!!!3584396.java!!!	ConnectivityManager(inout service : IConnectivityManager)
        mService = checkNotNull(service, "missing IConnectivityManager");
!!!3584524.java!!!	from(inout context : Context) : ConnectivityManager
        return (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
!!!3584652.java!!!	getTetherableIfaces() : String
        try {
            return mService.getTetherableIfaces();
        } catch (RemoteException e) {
            return new String[0];
        }
!!!3584780.java!!!	getTetheredIfaces() : String
        try {
            return mService.getTetheredIfaces();
        } catch (RemoteException e) {
            return new String[0];
        }
!!!3584908.java!!!	getTetheringErroredIfaces() : String
        try {
            return mService.getTetheringErroredIfaces();
        } catch (RemoteException e) {
            return new String[0];
        }
!!!3585036.java!!!	tether(in iface : String) : int
        try {
            return mService.tether(iface);
        } catch (RemoteException e) {
            return TETHER_ERROR_SERVICE_UNAVAIL;
        }
!!!3585164.java!!!	untether(in iface : String) : int
        try {
            return mService.untether(iface);
        } catch (RemoteException e) {
            return TETHER_ERROR_SERVICE_UNAVAIL;
        }
!!!3585292.java!!!	isTetheringSupported() : boolean
        try {
            return mService.isTetheringSupported();
        } catch (RemoteException e) {
            return false;
        }
!!!3585420.java!!!	getTetherableUsbRegexs() : String
        try {
            return mService.getTetherableUsbRegexs();
        } catch (RemoteException e) {
            return new String[0];
        }
!!!3585548.java!!!	getTetherableWifiRegexs() : String
        try {
            return mService.getTetherableWifiRegexs();
        } catch (RemoteException e) {
            return new String[0];
        }
!!!3585676.java!!!	getTetherableBluetoothRegexs() : String
        try {
            return mService.getTetherableBluetoothRegexs();
        } catch (RemoteException e) {
            return new String[0];
        }
!!!3585804.java!!!	setUsbTethering(inout enable : boolean) : int
        try {
            return mService.setUsbTethering(enable);
        } catch (RemoteException e) {
            return TETHER_ERROR_SERVICE_UNAVAIL;
        }
!!!3585932.java!!!	getLastTetherError(in iface : String) : int
        try {
            return mService.getLastTetherError(iface);
        } catch (RemoteException e) {
            return TETHER_ERROR_SERVICE_UNAVAIL;
        }
!!!3586060.java!!!	requestNetworkTransitionWakelock(in forWhom : String) : boolean
        try {
            mService.requestNetworkTransitionWakelock(forWhom);
            return true;
        } catch (RemoteException e) {
            return false;
        }
!!!3586188.java!!!	reportInetCondition(in networkType : int, in percentage : int) : void
        try {
            mService.reportInetCondition(networkType, percentage);
        } catch (RemoteException e) {
        }
!!!3586316.java!!!	setGlobalProxy(inout p : ProxyProperties) : void
        try {
            mService.setGlobalProxy(p);
        } catch (RemoteException e) {
        }
!!!3586444.java!!!	getGlobalProxy() : ProxyProperties
        try {
            return mService.getGlobalProxy();
        } catch (RemoteException e) {
            return null;
        }
!!!3586572.java!!!	getProxy() : ProxyProperties
        try {
            return mService.getProxy();
        } catch (RemoteException e) {
            return null;
        }
!!!3586700.java!!!	setDataDependency(in networkType : int, inout met : boolean) : void
        try {
            mService.setDataDependency(networkType, met);
        } catch (RemoteException e) {
        }
!!!3586828.java!!!	isNetworkSupported(in networkType : int) : boolean
        try {
            return mService.isNetworkSupported(networkType);
        } catch (RemoteException e) {}
        return false;
!!!3586956.java!!!	isActiveNetworkMetered() : boolean
        try {
            return mService.isActiveNetworkMetered();
        } catch (RemoteException e) {
            return false;
        }
!!!3587084.java!!!	updateLockdownVpn() : boolean
        try {
            return mService.updateLockdownVpn();
        } catch (RemoteException e) {
            return false;
        }
!!!3587212.java!!!	captivePortalCheckComplete(inout info : NetworkInfo) : void
        try {
            mService.captivePortalCheckComplete(info);
        } catch (RemoteException e) {
        }
