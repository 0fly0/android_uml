class ApplicationThread
!!!2541836.java!!!	updatePendingConfiguration(inout config : Configuration) : void
            synchronized (mPackages) {
                if (mPendingConfiguration == null ||
                        mPendingConfiguration.isOtherSeqNewer(config)) {
                    mPendingConfiguration = config;
                }
            }
!!!2541964.java!!!	schedulePauseActivity(inout token : IBinder, inout finished : boolean, inout userLeaving : boolean, in configChanges : int) : void
            queueOrSendMessage(
                    finished ? H.PAUSE_ACTIVITY_FINISHING : H.PAUSE_ACTIVITY,
                    token,
                    (userLeaving ? 1 : 0),
                    configChanges);
!!!2542092.java!!!	scheduleStopActivity(inout token : IBinder, inout showWindow : boolean, in configChanges : int) : void
           queueOrSendMessage(
                showWindow ? H.STOP_ACTIVITY_SHOW : H.STOP_ACTIVITY_HIDE,
                token, 0, configChanges);
!!!2542220.java!!!	scheduleWindowVisibility(inout token : IBinder, inout showWindow : boolean) : void
            queueOrSendMessage(
                showWindow ? H.SHOW_WINDOW : H.HIDE_WINDOW,
                token);
!!!2542348.java!!!	scheduleSleeping(inout token : IBinder, inout sleeping : boolean) : void
            queueOrSendMessage(H.SLEEPING, token, sleeping ? 1 : 0);
!!!2542476.java!!!	scheduleResumeActivity(inout token : IBinder, inout isForward : boolean) : void
            queueOrSendMessage(H.RESUME_ACTIVITY, token, isForward ? 1 : 0);
!!!2542604.java!!!	scheduleSendResult(inout token : IBinder, inout results : List<ResultInfo>) : void
            ResultData res = new ResultData();
            res.token = token;
            res.results = results;
            queueOrSendMessage(H.SEND_RESULT, res);
!!!2542732.java!!!	scheduleLaunchActivity(inout intent : Intent, inout token : IBinder, in ident : int, inout info : ActivityInfo, inout curConfig : Configuration, inout compatInfo : CompatibilityInfo, inout state : Bundle, inout pendingResults : List<ResultInfo>, inout pendingNewIntents : List<Intent>, inout notResumed : boolean, inout isForward : boolean, in profileName : String, inout profileFd : ParcelFileDescriptor, inout autoStopProfiler : boolean) : void
            ActivityClientRecord r = new ActivityClientRecord();

            r.token = token;
            r.ident = ident;
            r.intent = intent;
            r.activityInfo = info;
            r.compatInfo = compatInfo;
            r.state = state;

            r.pendingResults = pendingResults;
            r.pendingIntents = pendingNewIntents;

            r.startsNotResumed = notResumed;
            r.isForward = isForward;

            r.profileFile = profileName;
            r.profileFd = profileFd;
            r.autoStopProfiler = autoStopProfiler;

            updatePendingConfiguration(curConfig);

            queueOrSendMessage(H.LAUNCH_ACTIVITY, r);
!!!2542860.java!!!	scheduleRelaunchActivity(inout token : IBinder, inout pendingResults : List<ResultInfo>, inout pendingNewIntents : List<Intent>, in configChanges : int, inout notResumed : boolean, inout config : Configuration) : void
            requestRelaunchActivity(token, pendingResults, pendingNewIntents,
                    configChanges, notResumed, config, true);
!!!2542988.java!!!	scheduleNewIntent(inout intents : List<Intent>, inout token : IBinder) : void
            NewIntentData data = new NewIntentData();
            data.intents = intents;
            data.token = token;

            queueOrSendMessage(H.NEW_INTENT, data);
!!!2543116.java!!!	scheduleDestroyActivity(inout token : IBinder, inout finishing : boolean, in configChanges : int) : void
            queueOrSendMessage(H.DESTROY_ACTIVITY, token, finishing ? 1 : 0,
                    configChanges);
!!!2543244.java!!!	scheduleReceiver(inout intent : Intent, inout info : ActivityInfo, inout compatInfo : CompatibilityInfo, in resultCode : int, in data : String, inout extras : Bundle, inout sync : boolean, in sendingUser : int) : void
            ReceiverData r = new ReceiverData(intent, resultCode, data, extras,
                    sync, false, mAppThread.asBinder(), sendingUser);
            r.info = info;
            r.compatInfo = compatInfo;
            queueOrSendMessage(H.RECEIVER, r);
!!!2543372.java!!!	scheduleCreateBackupAgent(inout app : ApplicationInfo, inout compatInfo : CompatibilityInfo, in backupMode : int) : void
            CreateBackupAgentData d = new CreateBackupAgentData();
            d.appInfo = app;
            d.compatInfo = compatInfo;
            d.backupMode = backupMode;

            queueOrSendMessage(H.CREATE_BACKUP_AGENT, d);
!!!2543500.java!!!	scheduleDestroyBackupAgent(inout app : ApplicationInfo, inout compatInfo : CompatibilityInfo) : void
            CreateBackupAgentData d = new CreateBackupAgentData();
            d.appInfo = app;
            d.compatInfo = compatInfo;

            queueOrSendMessage(H.DESTROY_BACKUP_AGENT, d);
!!!2543628.java!!!	scheduleCreateService(inout token : IBinder, inout info : ServiceInfo, inout compatInfo : CompatibilityInfo) : void
            CreateServiceData s = new CreateServiceData();
            s.token = token;
            s.info = info;
            s.compatInfo = compatInfo;

            queueOrSendMessage(H.CREATE_SERVICE, s);
!!!2543756.java!!!	scheduleBindService(inout token : IBinder, inout intent : Intent, inout rebind : boolean) : void
            BindServiceData s = new BindServiceData();
            s.token = token;
            s.intent = intent;
            s.rebind = rebind;

            if (DEBUG_SERVICE)
                Slog.v(TAG, "scheduleBindService token=" + token + " intent=" + intent + " uid="
                        + Binder.getCallingUid() + " pid=" + Binder.getCallingPid());
            queueOrSendMessage(H.BIND_SERVICE, s);
!!!2543884.java!!!	scheduleUnbindService(inout token : IBinder, inout intent : Intent) : void
            BindServiceData s = new BindServiceData();
            s.token = token;
            s.intent = intent;

            queueOrSendMessage(H.UNBIND_SERVICE, s);
!!!2544012.java!!!	scheduleServiceArgs(inout token : IBinder, inout taskRemoved : boolean, in startId : int, in flags : int, inout args : Intent) : void
            ServiceArgsData s = new ServiceArgsData();
            s.token = token;
            s.taskRemoved = taskRemoved;
            s.startId = startId;
            s.flags = flags;
            s.args = args;

            queueOrSendMessage(H.SERVICE_ARGS, s);
!!!2544140.java!!!	scheduleStopService(inout token : IBinder) : void
            queueOrSendMessage(H.STOP_SERVICE, token);
!!!2544268.java!!!	bindApplication(in processName : String, inout appInfo : ApplicationInfo, inout providers : List<ProviderInfo>, inout instrumentationName : ComponentName, in profileFile : String, inout profileFd : ParcelFileDescriptor, inout autoStopProfiler : boolean, inout instrumentationArgs : Bundle, inout instrumentationWatcher : IInstrumentationWatcher, in debugMode : int, inout enableOpenGlTrace : boolean, inout isRestrictedBackupMode : boolean, inout persistent : boolean, inout config : Configuration, inout compatInfo : CompatibilityInfo, inout services : Map<String, IBinder>, inout coreSettings : Bundle) : void

            if (services != null) {
                // Setup the service cache in the ServiceManager
                ServiceManager.initServiceCache(services);
            }

            setCoreSettings(coreSettings);

            AppBindData data = new AppBindData();
            data.processName = processName;
            data.appInfo = appInfo;
            data.providers = providers;
            data.instrumentationName = instrumentationName;
            data.instrumentationArgs = instrumentationArgs;
            data.instrumentationWatcher = instrumentationWatcher;
            data.debugMode = debugMode;
            data.enableOpenGlTrace = enableOpenGlTrace;
            data.restrictedBackupMode = isRestrictedBackupMode;
            data.persistent = persistent;
            data.config = config;
            data.compatInfo = compatInfo;
            data.initProfileFile = profileFile;
            data.initProfileFd = profileFd;
            data.initAutoStopProfiler = false;
            queueOrSendMessage(H.BIND_APPLICATION, data);
!!!2544396.java!!!	scheduleExit() : void
            queueOrSendMessage(H.EXIT_APPLICATION, null);
!!!2544524.java!!!	scheduleSuicide() : void
            queueOrSendMessage(H.SUICIDE, null);
!!!2544652.java!!!	requestThumbnail(inout token : IBinder) : void
            queueOrSendMessage(H.REQUEST_THUMBNAIL, token);
!!!2544780.java!!!	scheduleConfigurationChanged(inout config : Configuration) : void
            updatePendingConfiguration(config);
            queueOrSendMessage(H.CONFIGURATION_CHANGED, config);
!!!2544908.java!!!	updateTimeZone() : void
            TimeZone.setDefault(null);
!!!2545036.java!!!	clearDnsCache() : void
            // a non-standard API to get this to libcore
            InetAddress.clearDnsCache();
!!!2545164.java!!!	setHttpProxy(in host : String, in port : String, in exclList : String) : void
            Proxy.setHttpProxySystemProperty(host, port, exclList);
!!!2545292.java!!!	processInBackground() : void
            mH.removeMessages(H.GC_WHEN_IDLE);
            mH.sendMessage(mH.obtainMessage(H.GC_WHEN_IDLE));
!!!2545420.java!!!	dumpService(inout fd : FileDescriptor, inout servicetoken : IBinder, inout args : String) : void
            DumpComponentInfo data = new DumpComponentInfo();
            try {
                data.fd = ParcelFileDescriptor.dup(fd);
                data.token = servicetoken;
                data.args = args;
                queueOrSendMessage(H.DUMP_SERVICE, data);
            } catch (IOException e) {
                Slog.w(TAG, "dumpService failed", e);
            }
!!!2545548.java!!!	scheduleRegisteredReceiver(inout receiver : IIntentReceiver, inout intent : Intent, in resultCode : int, in dataStr : String, inout extras : Bundle, inout ordered : boolean, inout sticky : boolean, in sendingUser : int) : void
            receiver.performReceive(intent, resultCode, dataStr, extras, ordered,
                    sticky, sendingUser);
!!!2545676.java!!!	scheduleLowMemory() : void
            queueOrSendMessage(H.LOW_MEMORY, null);
!!!2545804.java!!!	scheduleActivityConfigurationChanged(inout token : IBinder) : void
            queueOrSendMessage(H.ACTIVITY_CONFIGURATION_CHANGED, token);
!!!2545932.java!!!	profilerControl(inout start : boolean, in path : String, inout fd : ParcelFileDescriptor, in profileType : int) : void
            ProfilerControlData pcd = new ProfilerControlData();
            pcd.path = path;
            pcd.fd = fd;
            queueOrSendMessage(H.PROFILER_CONTROL, pcd, start ? 1 : 0, profileType);
!!!2546060.java!!!	dumpHeap(inout managed : boolean, in path : String, inout fd : ParcelFileDescriptor) : void
            DumpHeapData dhd = new DumpHeapData();
            dhd.path = path;
            dhd.fd = fd;
            queueOrSendMessage(H.DUMP_HEAP, dhd, managed ? 1 : 0);
!!!2546188.java!!!	setSchedulingGroup(in group : int) : void
            // Note: do this immediately, since going into the foreground
            // should happen regardless of what pending work we have to do
            // and the activity manager will wait for us to report back that
            // we are done before sending us to the background.
            try {
                Process.setProcessGroup(Process.myPid(), group);
            } catch (Exception e) {
                Slog.w(TAG, "Failed setting process group to " + group, e);
            }
!!!2546316.java!!!	getMemoryInfo(inout outInfo : MemoryInfo) : void
            Debug.getMemoryInfo(outInfo);
!!!2546444.java!!!	dispatchPackageBroadcast(in cmd : int, inout packages : String) : void
            queueOrSendMessage(H.DISPATCH_PACKAGE_BROADCAST, packages, cmd);
!!!2546572.java!!!	scheduleCrash(in msg : String) : void
            queueOrSendMessage(H.SCHEDULE_CRASH, msg);
!!!2546700.java!!!	dumpActivity(inout fd : FileDescriptor, inout activitytoken : IBinder, in prefix : String, inout args : String) : void
            DumpComponentInfo data = new DumpComponentInfo();
            try {
                data.fd = ParcelFileDescriptor.dup(fd);
                data.token = activitytoken;
                data.prefix = prefix;
                data.args = args;
                queueOrSendMessage(H.DUMP_ACTIVITY, data);
            } catch (IOException e) {
                Slog.w(TAG, "dumpActivity failed", e);
            }
!!!2546828.java!!!	dumpProvider(inout fd : FileDescriptor, inout providertoken : IBinder, inout args : String) : void
            DumpComponentInfo data = new DumpComponentInfo();
            try {
                data.fd = ParcelFileDescriptor.dup(fd);
                data.token = providertoken;
                data.args = args;
                queueOrSendMessage(H.DUMP_PROVIDER, data);
            } catch (IOException e) {
                Slog.w(TAG, "dumpProvider failed", e);
            }
!!!2546956.java!!!	dumpMemInfo(inout fd : FileDescriptor, inout checkin : boolean, inout all : boolean, inout args : String) : MemoryInfo
            FileOutputStream fout = new FileOutputStream(fd);
            PrintWriter pw = new PrintWriter(fout);
            try {
                return dumpMemInfo(pw, checkin, all);
            } finally {
                pw.flush();
            }
!!!2547084.java!!!	dumpMemInfo(inout pw : PrintWriter, inout checkin : boolean, inout all : boolean) : MemoryInfo
            long nativeMax = Debug.getNativeHeapSize() / 1024;
            long nativeAllocated = Debug.getNativeHeapAllocatedSize() / 1024;
            long nativeFree = Debug.getNativeHeapFreeSize() / 1024;

            Debug.MemoryInfo memInfo = new Debug.MemoryInfo();
            Debug.getMemoryInfo(memInfo);

            if (!all) {
                return memInfo;
            }

            Runtime runtime = Runtime.getRuntime();

            long dalvikMax = runtime.totalMemory() / 1024;
            long dalvikFree = runtime.freeMemory() / 1024;
            long dalvikAllocated = dalvikMax - dalvikFree;
            long viewInstanceCount = ViewDebug.getViewInstanceCount();
            long viewRootInstanceCount = ViewDebug.getViewRootImplCount();
            long appContextInstanceCount = Debug.countInstancesOfClass(ContextImpl.class);
            long activityInstanceCount = Debug.countInstancesOfClass(Activity.class);
            int globalAssetCount = AssetManager.getGlobalAssetCount();
            int globalAssetManagerCount = AssetManager.getGlobalAssetManagerCount();
            int binderLocalObjectCount = Debug.getBinderLocalObjectCount();
            int binderProxyObjectCount = Debug.getBinderProxyObjectCount();
            int binderDeathObjectCount = Debug.getBinderDeathObjectCount();
            long openSslSocketCount = Debug.countInstancesOfClass(OpenSSLSocketImpl.class);
            SQLiteDebug.PagerStats stats = SQLiteDebug.getDatabaseInfo();

            // For checkin, we print one long comma-separated list of values
            if (checkin) {
                // NOTE: if you change anything significant below, also consider changing
                // ACTIVITY_THREAD_CHECKIN_VERSION.
                String processName = (mBoundApplication != null)
                        ? mBoundApplication.processName : "unknown";

                // Header
                pw.print(ACTIVITY_THREAD_CHECKIN_VERSION); pw.print(',');
                pw.print(Process.myPid()); pw.print(',');
                pw.print(processName); pw.print(',');

                // Heap info - max
                pw.print(nativeMax); pw.print(',');
                pw.print(dalvikMax); pw.print(',');
                pw.print("N/A,");
                pw.print(nativeMax + dalvikMax); pw.print(',');

                // Heap info - allocated
                pw.print(nativeAllocated); pw.print(',');
                pw.print(dalvikAllocated); pw.print(',');
                pw.print("N/A,");
                pw.print(nativeAllocated + dalvikAllocated); pw.print(',');

                // Heap info - free
                pw.print(nativeFree); pw.print(',');
                pw.print(dalvikFree); pw.print(',');
                pw.print("N/A,");
                pw.print(nativeFree + dalvikFree); pw.print(',');

                // Heap info - proportional set size
                pw.print(memInfo.nativePss); pw.print(',');
                pw.print(memInfo.dalvikPss); pw.print(',');
                pw.print(memInfo.otherPss); pw.print(',');
                pw.print(memInfo.nativePss + memInfo.dalvikPss + memInfo.otherPss); pw.print(',');

                // Heap info - shared
                pw.print(memInfo.nativeSharedDirty); pw.print(',');
                pw.print(memInfo.dalvikSharedDirty); pw.print(',');
                pw.print(memInfo.otherSharedDirty); pw.print(',');
                pw.print(memInfo.nativeSharedDirty + memInfo.dalvikSharedDirty
                        + memInfo.otherSharedDirty); pw.print(',');

                // Heap info - private
                pw.print(memInfo.nativePrivateDirty); pw.print(',');
                pw.print(memInfo.dalvikPrivateDirty); pw.print(',');
                pw.print(memInfo.otherPrivateDirty); pw.print(',');
                pw.print(memInfo.nativePrivateDirty + memInfo.dalvikPrivateDirty
                        + memInfo.otherPrivateDirty); pw.print(',');

                // Object counts
                pw.print(viewInstanceCount); pw.print(',');
                pw.print(viewRootInstanceCount); pw.print(',');
                pw.print(appContextInstanceCount); pw.print(',');
                pw.print(activityInstanceCount); pw.print(',');

                pw.print(globalAssetCount); pw.print(',');
                pw.print(globalAssetManagerCount); pw.print(',');
                pw.print(binderLocalObjectCount); pw.print(',');
                pw.print(binderProxyObjectCount); pw.print(',');

                pw.print(binderDeathObjectCount); pw.print(',');
                pw.print(openSslSocketCount); pw.print(',');

                // SQL
                pw.print(stats.memoryUsed / 1024); pw.print(',');
                pw.print(stats.memoryUsed / 1024); pw.print(',');
                pw.print(stats.pageCacheOverflow / 1024); pw.print(',');
                pw.print(stats.largestMemAlloc / 1024);
                for (int i = 0; i < stats.dbStats.size(); i++) {
                    DbStats dbStats = stats.dbStats.get(i);
                    pw.print(','); pw.print(dbStats.dbName);
                    pw.print(','); pw.print(dbStats.pageSize);
                    pw.print(','); pw.print(dbStats.dbSize);
                    pw.print(','); pw.print(dbStats.lookaside);
                    pw.print(','); pw.print(dbStats.cache);
                    pw.print(','); pw.print(dbStats.cache);
                }
                pw.println();

                return memInfo;
            }

            // otherwise, show human-readable format
            printRow(pw, HEAP_COLUMN, "", "", "Shared", "Private", "Heap", "Heap", "Heap");
            printRow(pw, HEAP_COLUMN, "", "Pss", "Dirty", "Dirty", "Size", "Alloc", "Free");
            printRow(pw, HEAP_COLUMN, "", "------", "------", "------", "------", "------",
                    "------");
            printRow(pw, HEAP_COLUMN, "Native", memInfo.nativePss, memInfo.nativeSharedDirty,
                    memInfo.nativePrivateDirty, nativeMax, nativeAllocated, nativeFree);
            printRow(pw, HEAP_COLUMN, "Dalvik", memInfo.dalvikPss, memInfo.dalvikSharedDirty,
                    memInfo.dalvikPrivateDirty, dalvikMax, dalvikAllocated, dalvikFree);

            int otherPss = memInfo.otherPss;
            int otherSharedDirty = memInfo.otherSharedDirty;
            int otherPrivateDirty = memInfo.otherPrivateDirty;

            for (int i=0; i<Debug.MemoryInfo.NUM_OTHER_STATS; i++) {
                printRow(pw, HEAP_COLUMN, Debug.MemoryInfo.getOtherLabel(i),
                        memInfo.getOtherPss(i), memInfo.getOtherSharedDirty(i),
                        memInfo.getOtherPrivateDirty(i), "", "", "");
                otherPss -= memInfo.getOtherPss(i);
                otherSharedDirty -= memInfo.getOtherSharedDirty(i);
                otherPrivateDirty -= memInfo.getOtherPrivateDirty(i);
            }

            printRow(pw, HEAP_COLUMN, "Unknown", otherPss, otherSharedDirty,
                    otherPrivateDirty, "", "", "");
            printRow(pw, HEAP_COLUMN, "TOTAL", memInfo.getTotalPss(),
                    memInfo.getTotalSharedDirty(), memInfo.getTotalPrivateDirty(),
                    nativeMax+dalvikMax, nativeAllocated+dalvikAllocated,
                    nativeFree+dalvikFree);

            pw.println(" ");
            pw.println(" Objects");
            printRow(pw, TWO_COUNT_COLUMNS, "Views:", viewInstanceCount, "ViewRootImpl:",
                    viewRootInstanceCount);

            printRow(pw, TWO_COUNT_COLUMNS, "AppContexts:", appContextInstanceCount,
                    "Activities:", activityInstanceCount);

            printRow(pw, TWO_COUNT_COLUMNS, "Assets:", globalAssetCount,
                    "AssetManagers:", globalAssetManagerCount);

            printRow(pw, TWO_COUNT_COLUMNS, "Local Binders:", binderLocalObjectCount,
                    "Proxy Binders:", binderProxyObjectCount);
            printRow(pw, ONE_COUNT_COLUMN, "Death Recipients:", binderDeathObjectCount);

            printRow(pw, ONE_COUNT_COLUMN, "OpenSSL Sockets:", openSslSocketCount);

            // SQLite mem info
            pw.println(" ");
            pw.println(" SQL");
            printRow(pw, ONE_COUNT_COLUMN, "MEMORY_USED:", stats.memoryUsed / 1024);
            printRow(pw, TWO_COUNT_COLUMNS, "PAGECACHE_OVERFLOW:",
                    stats.pageCacheOverflow / 1024, "MALLOC_SIZE:", stats.largestMemAlloc / 1024);
            pw.println(" ");
            int N = stats.dbStats.size();
            if (N > 0) {
                pw.println(" DATABASES");
                printRow(pw, "  %8s %8s %14s %14s  %s", "pgsz", "dbsz", "Lookaside(b)", "cache",
                        "Dbname");
                for (int i = 0; i < N; i++) {
                    DbStats dbStats = stats.dbStats.get(i);
                    printRow(pw, DB_INFO_FORMAT,
                            (dbStats.pageSize > 0) ? String.valueOf(dbStats.pageSize) : " ",
                            (dbStats.dbSize > 0) ? String.valueOf(dbStats.dbSize) : " ",
                            (dbStats.lookaside > 0) ? String.valueOf(dbStats.lookaside) : " ",
                            dbStats.cache, dbStats.dbName);
                }
            }

            // Asset details.
            String assetAlloc = AssetManager.getAssetAllocations();
            if (assetAlloc != null) {
                pw.println(" ");
                pw.println(" Asset Allocations");
                pw.print(assetAlloc);
            }

            return memInfo;
!!!2547212.java!!!	dumpGfxInfo(inout fd : FileDescriptor, inout args : String) : void
            dumpGraphicsInfo(fd);
            WindowManagerGlobal.getInstance().dumpGfxInfo(fd);
!!!2547340.java!!!	dumpDbInfo(inout fd : FileDescriptor, inout args : String) : void
            PrintWriter pw = new PrintWriter(new FileOutputStream(fd));
            PrintWriterPrinter printer = new PrintWriterPrinter(pw);
            SQLiteDebug.dump(printer, args);
            pw.flush();
!!!2547468.java!!!	unstableProviderDied(inout provider : IBinder) : void
            queueOrSendMessage(H.UNSTABLE_PROVIDER_DIED, provider);
!!!2547596.java!!!	printRow(inout pw : PrintWriter, in format : String, inout  : Object...objs) : void
            pw.println(String.format(format, objs));
!!!2547724.java!!!	setCoreSettings(inout coreSettings : Bundle) : void
            queueOrSendMessage(H.SET_CORE_SETTINGS, coreSettings);
!!!2547852.java!!!	updatePackageCompatibilityInfo(in pkg : String, inout info : CompatibilityInfo) : void
            UpdateCompatibilityData ucd = new UpdateCompatibilityData();
            ucd.pkg = pkg;
            ucd.info = info;
            queueOrSendMessage(H.UPDATE_PACKAGE_COMPATIBILITY_INFO, ucd);
!!!2547980.java!!!	scheduleTrimMemory(in level : int) : void
            queueOrSendMessage(H.TRIM_MEMORY, null, level);
