class OpenSSLRSAPrivateCrtKey
!!!2437147.java!!!	OpenSSLRSAPrivateCrtKey(inout key : OpenSSLKey)
        super(key);
!!!2437275.java!!!	OpenSSLRSAPrivateCrtKey(inout key : OpenSSLKey, inout params : byte)
        super(key, params);
!!!2437403.java!!!	OpenSSLRSAPrivateCrtKey(inout rsaKeySpec : RSAPrivateCrtKeySpec)
        super(init(rsaKeySpec));
!!!2437531.java!!!	init(inout rsaKeySpec : RSAPrivateCrtKeySpec) : OpenSSLKey
        BigInteger modulus = rsaKeySpec.getModulus();
        BigInteger privateExponent = rsaKeySpec.getPrivateExponent();

        if (modulus == null) {
            throw new InvalidKeySpecException("modulus == null");
        } else if (privateExponent == null) {
            throw new InvalidKeySpecException("privateExponent == null");
        }

        try {
            /*
             * OpenSSL uses the public modulus to do RSA blinding. If
             * the public modulus is not available, the call to
             * EVP_PKEY_new_RSA will turn off blinding for this key
             * instance.
             */
            final BigInteger publicExponent = rsaKeySpec.getPublicExponent();
            final BigInteger primeP = rsaKeySpec.getPrimeP();
            final BigInteger primeQ = rsaKeySpec.getPrimeQ();
            final BigInteger primeExponentP = rsaKeySpec.getPrimeExponentP();
            final BigInteger primeExponentQ = rsaKeySpec.getPrimeExponentQ();
            final BigInteger crtCoefficient = rsaKeySpec.getCrtCoefficient();

            return new OpenSSLKey(NativeCrypto.EVP_PKEY_new_RSA(
                    modulus.toByteArray(),
                    publicExponent == null ? null : publicExponent.toByteArray(),
                    privateExponent.toByteArray(),
                    primeP == null ? null : primeP.toByteArray(),
                    primeQ == null ? null : primeQ.toByteArray(),
                    primeExponentP == null ? null : primeExponentP.toByteArray(),
                    primeExponentQ == null ? null : primeExponentQ.toByteArray(),
                    crtCoefficient == null ? null : crtCoefficient.toByteArray()));
        } catch (Exception e) {
            throw new InvalidKeySpecException(e);
        }
!!!2437659.java!!!	getInstance(inout rsaPrivateKey : RSAPrivateCrtKey) : OpenSSLKey
        BigInteger modulus = rsaPrivateKey.getModulus();
        BigInteger privateExponent = rsaPrivateKey.getPrivateExponent();

        if (modulus == null) {
            throw new InvalidKeyException("modulus == null");
        } else if (privateExponent == null) {
            throw new InvalidKeyException("privateExponent == null");
        }

        try {
            /*
             * OpenSSL uses the public modulus to do RSA blinding. If
             * the public modulus is not available, the call to
             * EVP_PKEY_new_RSA will turn off blinding for this key
             * instance.
             */
            final BigInteger publicExponent = rsaPrivateKey.getPublicExponent();
            final BigInteger primeP = rsaPrivateKey.getPrimeP();
            final BigInteger primeQ = rsaPrivateKey.getPrimeQ();
            final BigInteger primeExponentP = rsaPrivateKey.getPrimeExponentP();
            final BigInteger primeExponentQ = rsaPrivateKey.getPrimeExponentQ();
            final BigInteger crtCoefficient = rsaPrivateKey.getCrtCoefficient();

            return new OpenSSLKey(NativeCrypto.EVP_PKEY_new_RSA(
                    modulus.toByteArray(),
                    publicExponent == null ? null : publicExponent.toByteArray(),
                    privateExponent.toByteArray(),
                    primeP == null ? null : primeP.toByteArray(),
                    primeQ == null ? null : primeQ.toByteArray(),
                    primeExponentP == null ? null : primeExponentP.toByteArray(),
                    primeExponentQ == null ? null : primeExponentQ.toByteArray(),
                    crtCoefficient == null ? null : crtCoefficient.toByteArray()));
        } catch (Exception e) {
            throw new InvalidKeyException(e);
        }
!!!2437787.java!!!	readParams(inout params : byte) : void
        super.readParams(params);
        // params[0] read in super.readParams
        if (params[1] != null) {
            publicExponent = new BigInteger(params[1]);
        }
        // params[2] read in super.readParams
        if (params[3] != null) {
            primeP = new BigInteger(params[3]);
        }
        if (params[4] != null) {
            primeQ = new BigInteger(params[4]);
        }
        if (params[5] != null) {
            primeExponentP = new BigInteger(params[5]);
        }
        if (params[6] != null) {
            primeExponentQ = new BigInteger(params[6]);
        }
        if (params[7] != null) {
            crtCoefficient = new BigInteger(params[7]);
        }
!!!2437915.java!!!	getPublicExponent() : BigInteger
        ensureReadParams();
        return publicExponent;
!!!2438043.java!!!	getPrimeP() : BigInteger
        ensureReadParams();
        return primeP;
!!!2438171.java!!!	getPrimeQ() : BigInteger
        ensureReadParams();
        return primeQ;
!!!2438299.java!!!	getPrimeExponentP() : BigInteger
        ensureReadParams();
        return primeExponentP;
!!!2438427.java!!!	getPrimeExponentQ() : BigInteger
        ensureReadParams();
        return primeExponentQ;
!!!2438555.java!!!	getCrtCoefficient() : BigInteger
        ensureReadParams();
        return crtCoefficient;
!!!2438683.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }

        if (o instanceof OpenSSLRSAPrivateKey) {
            OpenSSLRSAPrivateKey other = (OpenSSLRSAPrivateKey) o;
            return getOpenSSLKey().equals(other.getOpenSSLKey());
        }

        if (o instanceof RSAPrivateCrtKey) {
            ensureReadParams();
            RSAPrivateCrtKey other = (RSAPrivateCrtKey) o;

            if (getOpenSSLKey().isEngineBased()) {
                return getModulus().equals(other.getModulus())
                        && publicExponent.equals(other.getPublicExponent());
            } else {
                return getModulus().equals(other.getModulus())
                        && publicExponent.equals(other.getPublicExponent())
                        && getPrivateExponent().equals(other.getPrivateExponent())
                        && primeP.equals(other.getPrimeP()) && primeQ.equals(other.getPrimeQ())
                        && primeExponentP.equals(other.getPrimeExponentP())
                        && primeExponentQ.equals(other.getPrimeExponentQ())
                        && crtCoefficient.equals(other.getCrtCoefficient());
            }
        } else if (o instanceof RSAPrivateKey) {
            ensureReadParams();
            RSAPrivateKey other = (RSAPrivateKey) o;

            if (getOpenSSLKey().isEngineBased()) {
                return getModulus().equals(other.getModulus());
            } else {
                return getModulus().equals(other.getModulus())
                        && getPrivateExponent().equals(other.getPrivateExponent());
            }
        }

        return false;
!!!2438811.java!!!	hashCode() : int
        int hashCode = super.hashCode();
        if (publicExponent != null) {
            hashCode ^= publicExponent.hashCode();
        }
        return hashCode;
!!!2438939.java!!!	toString() : String
        final StringBuilder sb = new StringBuilder("OpenSSLRSAPrivateCrtKey{");

        final boolean engineBased = getOpenSSLKey().isEngineBased();
        if (engineBased) {
            sb.append("key=");
            sb.append(getOpenSSLKey());
            sb.append('}');
        }

        ensureReadParams();
        sb.append("modulus=");
        sb.append(getModulus().toString(16));
        sb.append(',');

        if (publicExponent != null) {
            sb.append("publicExponent=");
            sb.append(publicExponent.toString(16));
            sb.append(',');
        }

        if (!engineBased) {
            sb.append("privateExponent=");
            sb.append(getPrivateExponent().toString(16));
            sb.append(',');
        }

        if (primeP != null) {
            sb.append("primeP=");
            sb.append(primeP.toString(16));
            sb.append(',');
        }

        if (primeQ != null) {
            sb.append("primeQ=");
            sb.append(primeQ.toString(16));
            sb.append(',');
        }

        if (primeExponentP != null) {
            sb.append("primeExponentP=");
            sb.append(primeExponentP.toString(16));
            sb.append(',');
        }

        if (primeExponentQ != null) {
            sb.append("primeExponentQ=");
            sb.append(primeExponentQ.toString(16));
            sb.append(',');
        }

        if (crtCoefficient != null) {
            sb.append("crtCoefficient=");
            sb.append(crtCoefficient.toString(16));
            sb.append(',');
        }

        return sb.toString();
!!!2439067.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();

        key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_RSA(
                modulus.toByteArray(),
                publicExponent == null ? null : publicExponent.toByteArray(),
                privateExponent.toByteArray(),
                primeP == null ? null : primeP.toByteArray(),
                primeQ == null ? null : primeQ.toByteArray(),
                primeExponentP == null ? null : primeExponentP.toByteArray(),
                primeExponentQ == null ? null : primeExponentQ.toByteArray(),
                crtCoefficient == null ? null : crtCoefficient.toByteArray()));
        fetchedParams = true;
!!!2439195.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        if (getOpenSSLKey().isEngineBased()) {
            throw new NotSerializableException("engine-based keys can not be serialized");
        }

        ensureReadParams();
        stream.defaultWriteObject();
