class WifiSettingsForSetupWizardXL
!!!14166924.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        setContentView(R.layout.wifi_settings_for_setup_wizard_xl);

        mWifiManager = (WifiManager)getSystemService(Context.WIFI_SERVICE);
        // There's no button here enabling wifi network, so we need to enable it without
        // users' request.
        mWifiManager.setWifiEnabled(true);

        mWifiSettings =
                (WifiSettings)getFragmentManager().findFragmentById(R.id.wifi_setup_fragment);
        mInputMethodManager = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);

        initViews();

        // At first, Wifi module doesn't return SCANNING state (it's too early), so we manually
        // show it.
        showScanningState();
!!!14167052.java!!!	initViews() : void
        Intent intent = getIntent();

        if (intent.getBooleanExtra("firstRun", false)) {
            final View layoutRoot = findViewById(R.id.layout_root);
            layoutRoot.setSystemUiVisibility(View.STATUS_BAR_DISABLE_BACK);
        }
        if (intent.getBooleanExtra(EXTRA_PREFS_LANDSCAPE_LOCK, false)) {
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE);
        }
        if (intent.getBooleanExtra(EXTRA_PREFS_PORTRAIT_LOCK, false)) {
            setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_SENSOR_PORTRAIT);
        }

        mTitleView = (TextView)findViewById(R.id.wifi_setup_title);
        mProgressBar = (ProgressBar)findViewById(R.id.scanning_progress_bar);
        mProgressBar.setMax(2);
        mTopDividerNoProgress = findViewById(R.id.top_divider_no_progress);
        mBottomPadding = findViewById(R.id.bottom_padding);

        mProgressBar.setVisibility(View.VISIBLE);
        mProgressBar.setIndeterminate(true);
        mTopDividerNoProgress.setVisibility(View.GONE);

        mAddNetworkButton = (Button)findViewById(R.id.wifi_setup_add_network);
        mAddNetworkButton.setOnClickListener(this);
        mRefreshButton = (Button)findViewById(R.id.wifi_setup_refresh_list);
        mRefreshButton.setOnClickListener(this);
        mSkipOrNextButton = (Button)findViewById(R.id.wifi_setup_skip_or_next);
        mSkipOrNextButton.setOnClickListener(this);
        mConnectButton = (Button)findViewById(R.id.wifi_setup_connect);
        mConnectButton.setOnClickListener(this);
        mBackButton = (Button)findViewById(R.id.wifi_setup_cancel);
        mBackButton.setOnClickListener(this);

        mTopPadding = findViewById(R.id.top_padding);
        mContentPadding = findViewById(R.id.content_padding);

        mWifiSettingsFragmentLayout = findViewById(R.id.wifi_settings_fragment_layout);
        mConnectingStatusLayout = findViewById(R.id.connecting_status_layout);
        mConnectingStatusView = (TextView) findViewById(R.id.connecting_status);
!!!14167180.java!!!	restoreFirstVisibilityState() : void
        showDefaultTitle();
        mAddNetworkButton.setVisibility(View.VISIBLE);
        mRefreshButton.setVisibility(View.VISIBLE);
        mSkipOrNextButton.setVisibility(View.VISIBLE);
        mConnectButton.setVisibility(View.GONE);
        mBackButton.setVisibility(View.GONE);
        setPaddingVisibility(View.VISIBLE);
!!!14167308.java!!!	onClick(inout view : View) : void
        hideSoftwareKeyboard();
        if (view == mAddNetworkButton) {
            if (DEBUG) Log.d(TAG, "AddNetwork button pressed");
            onAddNetworkButtonPressed();
        } else if (view == mRefreshButton) {
            if (DEBUG) Log.d(TAG, "Refresh button pressed");
            refreshAccessPoints(true);
        } else if (view == mSkipOrNextButton) {
            if (DEBUG) Log.d(TAG, "Skip/Next button pressed");
            if (TextUtils.equals(getString(R.string.wifi_setup_skip), ((Button)view).getText())) {
                // We don't want to let Wifi enabled when a user press skip without choosing
                // any access point.
                mWifiManager.setWifiEnabled(false);
                // Notify "skip"
                setResult(RESULT_FIRST_USER);
            } else {
                setResult(RESULT_OK);
            }
            finish();
        } else if (view == mConnectButton) {
            if (DEBUG) Log.d(TAG, "Connect button pressed");
            onConnectButtonPressed();
        } else if (view == mBackButton) {
            if (DEBUG) Log.d(TAG, "Back button pressed");
            onBackButtonPressed();
        }
!!!14167436.java!!!	hideSoftwareKeyboard() : void
        if (DEBUG) Log.i(TAG, "Hiding software keyboard.");
        final View focusedView = getCurrentFocus();
        if (focusedView != null) {
            mInputMethodManager.hideSoftInputFromWindow(focusedView.getWindowToken(), 0);
        }
!!!14167564.java!!!	updateConnectionState(inout originalState : DetailedState) : void
        final DetailedState state = sNetworkStateMap.get(originalState);

        if (originalState == DetailedState.FAILED) {
            // We clean up the current connectivity status and let users select another network
            // if they want.
            refreshAccessPoints(true);
        }

        switch (state) {
        case SCANNING: {
            if (mScreenState == SCREEN_STATE_DISCONNECTED) {
                if (mWifiSettings.getAccessPointsCount() == 0) {
                    showScanningState();
                } else {
                    showDisconnectedProgressBar();
                    mWifiSettingsFragmentLayout.setVisibility(View.VISIBLE);
                    mBottomPadding.setVisibility(View.GONE);
                }
            } else {
                showDisconnectedProgressBar();
            }
            break;
        }
        case CONNECTING: {
            if (mScreenState == SCREEN_STATE_CONNECTING) {
                showConnectingState();
            }
            break;
        }
        case CONNECTED: {
            showConnectedState();
            break;
        }
        default:  // DISCONNECTED, FAILED
            if (mScreenState != SCREEN_STATE_CONNECTED &&
                    mWifiSettings.getAccessPointsCount() > 0) {
                showDisconnectedState(Summary.get(this, state));
            }
            break;
        }
        mPreviousNetworkState = state;
!!!14167692.java!!!	showDisconnectedState(in stateString : String) : void
        showDisconnectedProgressBar();
        if (mScreenState == SCREEN_STATE_DISCONNECTED &&
                mWifiSettings.getAccessPointsCount() > 0) {
            mWifiSettingsFragmentLayout.setVisibility(View.VISIBLE);
            mBottomPadding.setVisibility(View.GONE);
        }
        mAddNetworkButton.setEnabled(true);
        mRefreshButton.setEnabled(true);
!!!14167820.java!!!	showConnectingState() : void
        mScreenState = SCREEN_STATE_CONNECTING;

        mBackButton.setVisibility(View.VISIBLE);
        // We save this title and show it when authentication failed.
        mEditingTitle = mTitleView.getText();
        showConnectingTitle();
        showConnectingProgressBar();

        setPaddingVisibility(View.VISIBLE);
!!!14167948.java!!!	showConnectedState() : void
        // Once we show "connected" screen, we won't change it even when the device becomes
        // disconnected afterwards. We keep the state unless a user explicitly cancel it
        // (by pressing "back" button).
        mScreenState = SCREEN_STATE_CONNECTED;

        hideSoftwareKeyboard();
        setPaddingVisibility(View.VISIBLE);

        showConnectedTitle();
        showConnectedProgressBar();

        mWifiSettingsFragmentLayout.setVisibility(View.GONE);
        mConnectingStatusLayout.setVisibility(View.VISIBLE);

        mConnectingStatusView.setText(R.string.wifi_setup_description_connected);
        mConnectButton.setVisibility(View.GONE);
        mAddNetworkButton.setVisibility(View.GONE);
        mRefreshButton.setVisibility(View.GONE);
        mBackButton.setVisibility(View.VISIBLE);
        mBackButton.setText(R.string.wifi_setup_back);
        mSkipOrNextButton.setVisibility(View.VISIBLE);
        mSkipOrNextButton.setEnabled(true);
!!!14168076.java!!!	showDefaultTitle() : void
        mTitleView.setText(getString(R.string.wifi_setup_title));
!!!14168204.java!!!	showAddNetworkTitle() : void
        mNetworkName = "";
        mTitleView.setText(R.string.wifi_setup_title_add_network);
!!!14168332.java!!!	showEditingTitle() : void
        if (TextUtils.isEmpty(mNetworkName) && mWifiConfig != null) {
            if (mWifiConfig.getController() != null &&
                mWifiConfig.getController().getConfig() != null) {
                mNetworkName = mWifiConfig.getController().getConfig().SSID;
            } else {
                Log.w(TAG, "Unexpected null found (WifiController or WifiConfig is null). " +
                        "Ignore them.");
            }
        }
        mTitleView.setText(getString(R.string.wifi_setup_title_editing_network, mNetworkName));
!!!14168460.java!!!	showConnectingTitle() : void
        if (TextUtils.isEmpty(mNetworkName) && mWifiConfig != null) {
            if (mWifiConfig.getController() != null &&
                    mWifiConfig.getController().getConfig() != null) {
                mNetworkName = mWifiConfig.getController().getConfig().SSID;
            } else {
                Log.w(TAG, "Unexpected null found (WifiController or WifiConfig is null). " +
                        "Ignore them.");
            }
        }
        mTitleView.setText(getString(R.string.wifi_setup_title_connecting_network, mNetworkName));
!!!14168588.java!!!	showConnectedTitle() : void
        if (TextUtils.isEmpty(mNetworkName) && mWifiConfig != null) {
            if (mWifiConfig.getController() != null &&
                    mWifiConfig.getController().getConfig() != null) {
                mNetworkName = mWifiConfig.getController().getConfig().SSID;
            } else {
                Log.w(TAG, "Unexpected null found (WifiController or WifiConfig is null). " +
                        "Ignore them.");
            }
        }
        mTitleView.setText(getString(R.string.wifi_setup_title_connected_network, mNetworkName));
!!!14168716.java!!!	showTopDividerWithProgressBar() : void
        mProgressBar.setVisibility(View.VISIBLE);
        mTopDividerNoProgress.setVisibility(View.GONE);
        mBottomPadding.setVisibility(View.GONE);
!!!14168844.java!!!	showScanningState() : void
        setPaddingVisibility(View.VISIBLE);
        mWifiSettingsFragmentLayout.setVisibility(View.GONE);
        showScanningProgressBar();
!!!14168972.java!!!	onAddNetworkButtonPressed() : void
        mWifiSettings.onAddNetworkPressed();
!!!14169100.java!!!	showConfigUi(inout selectedAccessPoint : AccessPoint, inout edit : boolean) : void
        mScreenState = SCREEN_STATE_EDITING;

        if (selectedAccessPoint != null &&
                (selectedAccessPoint.security == AccessPoint.SECURITY_WEP ||
                        selectedAccessPoint.security == AccessPoint.SECURITY_PSK)) {
            // We forcibly set edit as true so that users can modify every field if they want,
            // while config UI doesn't allow them to edit some of them when edit is false
            // (e.g. password field is hiden when edit==false).
            edit = true;
        }

        // We don't want to keep scanning Wifi networks during users' configuring a network.
        mWifiSettings.pauseWifiScan();

        mWifiSettingsFragmentLayout.setVisibility(View.GONE);
        mConnectingStatusLayout.setVisibility(View.GONE);
        final ViewGroup parent = (ViewGroup)findViewById(R.id.wifi_config_ui);
        parent.setVisibility(View.VISIBLE);
        parent.removeAllViews();
        mWifiConfig = new WifiConfigUiForSetupWizardXL(this, parent, selectedAccessPoint, edit);

        if (selectedAccessPoint == null) {  // "Add network" flow
            showAddNetworkTitle();
            mConnectButton.setVisibility(View.VISIBLE);

            showDisconnectedProgressBar();
            showEditingButtonState();
        } else if (selectedAccessPoint.security == AccessPoint.SECURITY_NONE) {
            mNetworkName = selectedAccessPoint.getTitle().toString();

            // onConnectButtonPressed() will change visibility status.
            mConnectButton.performClick();
        } else {
            mNetworkName = selectedAccessPoint.getTitle().toString();
            showEditingTitle();
            showDisconnectedProgressBar();
            showEditingButtonState();
            if (selectedAccessPoint.security == AccessPoint.SECURITY_EAP) {
                onEapNetworkSelected();
            } else {
                mConnectButton.setVisibility(View.VISIBLE);

                // WifiConfigController shows Connect button as "Save" when edit==true and a user
                // tried to connect the network.
                // In SetupWizard, we just show the button as "Connect" instead.
                mConnectButton.setText(R.string.wifi_connect);
                mBackButton.setText(R.string.wifi_setup_cancel);
            }
        }
!!!14169228.java!!!	initSecurityFields(inout view : View, in accessPointSecurity : int) : boolean
        // Reset all states tweaked below.
        view.findViewById(R.id.eap_not_supported).setVisibility(View.GONE);
        view.findViewById(R.id.eap_not_supported_for_add_network).setVisibility(View.GONE);
        view.findViewById(R.id.ssid_text).setVisibility(View.VISIBLE);
        view.findViewById(R.id.ssid_layout).setVisibility(View.VISIBLE);

        if (accessPointSecurity == AccessPoint.SECURITY_EAP) {
            setPaddingVisibility(View.VISIBLE);
            hideSoftwareKeyboard();

            // In SetupWizard for XLarge screen, we don't have enough space for showing
            // configurations needed for EAP. We instead disable the whole feature there and let
            // users configure those networks after the setup.
            if (view.findViewById(R.id.type_ssid).getVisibility() == View.VISIBLE) {
                view.findViewById(R.id.eap_not_supported_for_add_network)
                        .setVisibility(View.VISIBLE);
            } else {
                view.findViewById(R.id.eap_not_supported).setVisibility(View.VISIBLE);
            }
            view.findViewById(R.id.security_fields).setVisibility(View.GONE);
            view.findViewById(R.id.ssid_text).setVisibility(View.GONE);
            view.findViewById(R.id.ssid_layout).setVisibility(View.GONE);
            onEapNetworkSelected();

            // This method did init security fields by itself. The caller must not do it.
            return false;
        }

        mConnectButton.setVisibility(View.VISIBLE);
        setPaddingVisibility(View.GONE);

        // In "add network" flow, we'll see multiple initSecurityFields() calls with different
        // accessPointSecurity variable. We want to show software keyboard conditionally everytime
        // when this method is called.
        if (mWifiConfig != null) {
            if (accessPointSecurity == AccessPoint.SECURITY_PSK ||
                    accessPointSecurity == AccessPoint.SECURITY_WEP) {
                mWifiConfig.requestFocusAndShowKeyboard(R.id.password);
            } else {
                mWifiConfig.requestFocusAndShowKeyboard(R.id.ssid);
            }
        }

        // Let the caller init security fields.
        return true;
!!!14169356.java!!!	onEapNetworkSelected() : void
        mConnectButton.setVisibility(View.GONE);
        mBackButton.setText(R.string.wifi_setup_back);
!!!14169484.java!!!	showEditingButtonState() : void
        mSkipOrNextButton.setVisibility(View.GONE);
        mAddNetworkButton.setVisibility(View.GONE);
        mRefreshButton.setVisibility(View.GONE);
        mBackButton.setVisibility(View.VISIBLE);
!!!14169612.java!!!	onConnectButtonPressed() : void
        mScreenState = SCREEN_STATE_CONNECTING;

        mWifiSettings.submit(mWifiConfig.getController());

        // updateConnectionState() isn't called soon by the main Wifi module after the user's
        // "connect" request, and the user still sees "not connected" message for a while, which
        // looks strange for users though legitimate from the view of the module.
        //
        // We instead manually show "connecting" message before the system gets actual
        // "connecting" message from Wifi module.
        showConnectingState();

        // Might be better to delay showing this button.
        mBackButton.setVisibility(View.VISIBLE);
        mBackButton.setText(R.string.wifi_setup_back);

        final ViewGroup parent = (ViewGroup)findViewById(R.id.wifi_config_ui);
        parent.setVisibility(View.GONE);
        mConnectingStatusLayout.setVisibility(View.VISIBLE);
        mConnectingStatusView.setText(R.string.wifi_setup_description_connecting);

        mSkipOrNextButton.setVisibility(View.VISIBLE);
        mSkipOrNextButton.setEnabled(false);
        mConnectButton.setVisibility(View.GONE);
        mAddNetworkButton.setVisibility(View.GONE);
        mRefreshButton.setVisibility(View.GONE);
!!!14169740.java!!!	onBackButtonPressed() : void

        if (mScreenState == SCREEN_STATE_CONNECTING || mScreenState == SCREEN_STATE_CONNECTED) {
            if (DEBUG) Log.d(TAG, "Back button pressed after connect action.");
            mScreenState = SCREEN_STATE_DISCONNECTED;

            // When a user press "Back" button after pressing "Connect" button, we want to cancel
            // the "Connect" request and refresh the whole Wifi status.
            restoreFirstVisibilityState();

            mSkipOrNextButton.setEnabled(true);
            changeNextButtonState(false);  // Skip

            // Wifi list becomes empty for a moment. We show "scanning" effect to a user so that
            // he/she won't be astonished there. This stops once the scan finishes.
            showScanningState();

            // Remembered networks may be re-used during SetupWizard, which confuse users.
            // We force the module to forget them to reduce UX complexity
            final List<WifiConfiguration> configs = mWifiManager.getConfiguredNetworks();
            for (WifiConfiguration config : configs) {
                if (DEBUG) {
                    Log.d(TAG, String.format("forgeting Wi-Fi network \"%s\" (id: %d)",
                            config.SSID, config.networkId));
                }
                mWifiManager.forget(config.networkId, new WifiManager.ActionListener() {
                        public void onSuccess() {
                        }
                        public void onFailure(int reason) {
                            //TODO: Add failure UI
                        }
                        });
            }

            mWifiSettingsFragmentLayout.setVisibility(View.GONE);
            refreshAccessPoints(true);
        } else { // During user's Wifi configuration.
            mScreenState = SCREEN_STATE_DISCONNECTED;
            mWifiSettings.resumeWifiScan();

            restoreFirstVisibilityState();

            mAddNetworkButton.setEnabled(true);
            mRefreshButton.setEnabled(true);
            mSkipOrNextButton.setEnabled(true);
            showDisconnectedProgressBar();
            mWifiSettingsFragmentLayout.setVisibility(View.VISIBLE);
            mBottomPadding.setVisibility(View.GONE);
        }

        setPaddingVisibility(View.VISIBLE);
        mConnectingStatusLayout.setVisibility(View.GONE);
        final ViewGroup parent = (ViewGroup)findViewById(R.id.wifi_config_ui);
        parent.removeAllViews();
        parent.setVisibility(View.GONE);
        mWifiConfig = null;
!!!14169868.java!!!	changeNextButtonState(inout connected : boolean) : void
        if (connected) {
            mSkipOrNextButton.setText(R.string.wifi_setup_next);
        } else {
            mSkipOrNextButton.setText(R.string.wifi_setup_skip);
        }
!!!14169996.java!!!	onAccessPointsUpdated(inout preferenceScreen : PreferenceScreen, inout accessPoints : Collection<AccessPoint>) : void
        // If we already show some of access points but the bar still shows "scanning" state, it
        // should be stopped.
        if (mProgressBar.isIndeterminate() && accessPoints.size() > 0) {
            showDisconnectedProgressBar();
            if (mScreenState == SCREEN_STATE_DISCONNECTED) {
                mWifiSettingsFragmentLayout.setVisibility(View.VISIBLE);
                mBottomPadding.setVisibility(View.GONE);
            }
            mAddNetworkButton.setEnabled(true);
            mRefreshButton.setEnabled(true);
        }

        for (AccessPoint accessPoint : accessPoints) {
            accessPoint.setLayoutResource(R.layout.custom_preference);
            preferenceScreen.addPreference(accessPoint);
        }
!!!14170124.java!!!	refreshAccessPoints(inout disconnectNetwork : boolean) : void
        showScanningState();

        if (disconnectNetwork) {
            mWifiManager.disconnect();
        }

        mWifiSettings.refreshAccessPoints();
!!!14170252.java!!!	onSupplicantStateChanged(inout intent : Intent) : void
        final int errorCode = intent.getIntExtra(WifiManager.EXTRA_SUPPLICANT_ERROR, -1);
        if (errorCode == WifiManager.ERROR_AUTHENTICATING) {
            Log.i(TAG, "Received authentication error event.");
            onAuthenticationFailure();
        }
!!!14170380.java!!!	onAuthenticationFailure() : void
        mScreenState = SCREEN_STATE_EDITING;

        mSkipOrNextButton.setVisibility(View.GONE);
        mConnectButton.setVisibility(View.VISIBLE);
        mConnectButton.setEnabled(true);

        if (!TextUtils.isEmpty(mEditingTitle)) {
            mTitleView.setText(mEditingTitle);
        } else {
            Log.w(TAG, "Title during editing/adding a network was empty.");
            showEditingTitle();
        }

        final ViewGroup parent = (ViewGroup)findViewById(R.id.wifi_config_ui);
        parent.setVisibility(View.VISIBLE);
        mConnectingStatusLayout.setVisibility(View.GONE);

        showDisconnectedProgressBar();
        setPaddingVisibility(View.GONE);
!!!14170508.java!!!	setPaddingVisibility(in visibility : int) : void
        mTopPadding.setVisibility(visibility);
        mContentPadding.setVisibility(visibility);
!!!14170636.java!!!	showDisconnectedProgressBar() : void
        // The device may report DISCONNECTED during connecting to a network, at which we don't
        // want to lose bottom padding of top divider implicitly added by ProgressBar.
        if (mScreenState == SCREEN_STATE_DISCONNECTED) {
            mProgressBar.setVisibility(View.GONE);
            mProgressBar.setIndeterminate(false);
            mTopDividerNoProgress.setVisibility(View.VISIBLE);
        } else {
            mProgressBar.setVisibility(View.VISIBLE);
            mProgressBar.setIndeterminate(false);
            mProgressBar.setProgress(0);
            mTopDividerNoProgress.setVisibility(View.GONE);
        }
!!!14170764.java!!!	showScanningProgressBar() : void
        showTopDividerWithProgressBar();
        mProgressBar.setIndeterminate(true);
!!!14170892.java!!!	showConnectingProgressBar() : void
        showTopDividerWithProgressBar();
        mProgressBar.setIndeterminate(false);
        mProgressBar.setProgress(1);
!!!14171020.java!!!	showConnectedProgressBar() : void
        showTopDividerWithProgressBar();
        mProgressBar.setIndeterminate(false);
        mProgressBar.setProgress(2);
!!!14171148.java!!!	onSaveNetwork(inout config : WifiConfiguration) : void
        // We want to both save and connect a network. connectNetwork() does both.
        mWifiManager.connect(config, new WifiManager.ActionListener() {
                public void onSuccess() {
                }
                public void onFailure(int reason) {
                //TODO: Add failure UI
                }
                });
