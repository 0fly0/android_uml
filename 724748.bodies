class PropertyValuesHolder
!!!2438924.java!!!	PropertyValuesHolder(in propertyName : String)
        mPropertyName = propertyName;
!!!2439052.java!!!	PropertyValuesHolder(inout property : Property)
        mProperty = property;
        if (property != null) {
            mPropertyName = property.getName();
        }
!!!2439180.java!!!	ofInt(in propertyName : String, inout  : int...values) : PropertyValuesHolder
        return new IntPropertyValuesHolder(propertyName, values);
!!!2439308.java!!!	ofInt(inout property : Property, inout  : int...values) : PropertyValuesHolder
        return new IntPropertyValuesHolder(property, values);
!!!2439436.java!!!	ofFloat(in propertyName : String, inout  : float...values) : PropertyValuesHolder
        return new FloatPropertyValuesHolder(propertyName, values);
!!!2439564.java!!!	ofFloat(inout property : Property, inout  : float...values) : PropertyValuesHolder
        return new FloatPropertyValuesHolder(property, values);
!!!2439692.java!!!	ofObject(in propertyName : String, inout evaluator : TypeEvaluator, inout  : Object...values) : PropertyValuesHolder
        PropertyValuesHolder pvh = new PropertyValuesHolder(propertyName);
        pvh.setObjectValues(values);
        pvh.setEvaluator(evaluator);
        return pvh;
!!!2439820.java!!!	ofObject(inout property : Property, inout evaluator : TypeEvaluator, inout  : V...values) : PropertyValuesHolder
        PropertyValuesHolder pvh = new PropertyValuesHolder(property);
        pvh.setObjectValues(values);
        pvh.setEvaluator(evaluator);
        return pvh;
!!!2439948.java!!!	ofKeyframe(in propertyName : String, inout  : Keyframe...values) : PropertyValuesHolder
        KeyframeSet keyframeSet = KeyframeSet.ofKeyframe(values);
        if (keyframeSet instanceof IntKeyframeSet) {
            return new IntPropertyValuesHolder(propertyName, (IntKeyframeSet) keyframeSet);
        } else if (keyframeSet instanceof FloatKeyframeSet) {
            return new FloatPropertyValuesHolder(propertyName, (FloatKeyframeSet) keyframeSet);
        }
        else {
            PropertyValuesHolder pvh = new PropertyValuesHolder(propertyName);
            pvh.mKeyframeSet = keyframeSet;
            pvh.mValueType = ((Keyframe)values[0]).getType();
            return pvh;
        }
!!!2440076.java!!!	ofKeyframe(inout property : Property, inout  : Keyframe...values) : PropertyValuesHolder
        KeyframeSet keyframeSet = KeyframeSet.ofKeyframe(values);
        if (keyframeSet instanceof IntKeyframeSet) {
            return new IntPropertyValuesHolder(property, (IntKeyframeSet) keyframeSet);
        } else if (keyframeSet instanceof FloatKeyframeSet) {
            return new FloatPropertyValuesHolder(property, (FloatKeyframeSet) keyframeSet);
        }
        else {
            PropertyValuesHolder pvh = new PropertyValuesHolder(property);
            pvh.mKeyframeSet = keyframeSet;
            pvh.mValueType = ((Keyframe)values[0]).getType();
            return pvh;
        }
!!!2440204.java!!!	setIntValues(inout  : int...values) : void
        mValueType = int.class;
        mKeyframeSet = KeyframeSet.ofInt(values);
!!!2440332.java!!!	setFloatValues(inout  : float...values) : void
        mValueType = float.class;
        mKeyframeSet = KeyframeSet.ofFloat(values);
!!!2440460.java!!!	setKeyframes(inout  : Keyframe...values) : void
        int numKeyframes = values.length;
        Keyframe keyframes[] = new Keyframe[Math.max(numKeyframes,2)];
        mValueType = ((Keyframe)values[0]).getType();
        for (int i = 0; i < numKeyframes; ++i) {
            keyframes[i] = (Keyframe)values[i];
        }
        mKeyframeSet = new KeyframeSet(keyframes);
!!!2440588.java!!!	setObjectValues(inout  : Object...values) : void
        mValueType = values[0].getClass();
        mKeyframeSet = KeyframeSet.ofObject(values);
!!!2440716.java!!!	getPropertyFunction(inout targetClass : Class, in prefix : String, inout valueType : Class) : Method
        // TODO: faster implementation...
        Method returnVal = null;
        String methodName = getMethodName(prefix, mPropertyName);
        Class args[] = null;
        if (valueType == null) {
            try {
                returnVal = targetClass.getMethod(methodName, args);
            } catch (NoSuchMethodException e) {
                // Swallow the error, log it later
            }
        } else {
            args = new Class[1];
            Class typeVariants[];
            if (mValueType.equals(Float.class)) {
                typeVariants = FLOAT_VARIANTS;
            } else if (mValueType.equals(Integer.class)) {
                typeVariants = INTEGER_VARIANTS;
            } else if (mValueType.equals(Double.class)) {
                typeVariants = DOUBLE_VARIANTS;
            } else {
                typeVariants = new Class[1];
                typeVariants[0] = mValueType;
            }
            for (Class typeVariant : typeVariants) {
                args[0] = typeVariant;
                try {
                    returnVal = targetClass.getMethod(methodName, args);
                    // change the value type to suit
                    mValueType = typeVariant;
                    return returnVal;
                } catch (NoSuchMethodException e) {
                    // Swallow the error and keep trying other variants
                }
            }
            // If we got here, then no appropriate function was found
        }

        if (returnVal == null) {
            Log.w("PropertyValuesHolder", "Method " +
                    getMethodName(prefix, mPropertyName) + "() with type " + mValueType +
                    " not found on target class " + targetClass);
        }

        return returnVal;
!!!2440844.java!!!	setupSetterOrGetter(inout targetClass : Class, inout propertyMapMap : HashMap<Class, HashMap<String, Method>>, in prefix : String, inout valueType : Class) : Method
        Method setterOrGetter = null;
        try {
            // Have to lock property map prior to reading it, to guard against
            // another thread putting something in there after we've checked it
            // but before we've added an entry to it
            mPropertyMapLock.writeLock().lock();
            HashMap<String, Method> propertyMap = propertyMapMap.get(targetClass);
            if (propertyMap != null) {
                setterOrGetter = propertyMap.get(mPropertyName);
            }
            if (setterOrGetter == null) {
                setterOrGetter = getPropertyFunction(targetClass, prefix, valueType);
                if (propertyMap == null) {
                    propertyMap = new HashMap<String, Method>();
                    propertyMapMap.put(targetClass, propertyMap);
                }
                propertyMap.put(mPropertyName, setterOrGetter);
            }
        } finally {
            mPropertyMapLock.writeLock().unlock();
        }
        return setterOrGetter;
!!!2440972.java!!!	setupSetter(inout targetClass : Class) : void
        mSetter = setupSetterOrGetter(targetClass, sSetterPropertyMap, "set", mValueType);
!!!2441100.java!!!	setupGetter(inout targetClass : Class) : void
        mGetter = setupSetterOrGetter(targetClass, sGetterPropertyMap, "get", null);
!!!2441228.java!!!	setupSetterAndGetter(inout target : Object) : void
        if (mProperty != null) {
            // check to make sure that mProperty is on the class of target
            try {
                Object testValue = mProperty.get(target);
                for (Keyframe kf : mKeyframeSet.mKeyframes) {
                    if (!kf.hasValue()) {
                        kf.setValue(mProperty.get(target));
                    }
                }
                return;
            } catch (ClassCastException e) {
                Log.w("PropertyValuesHolder","No such property (" + mProperty.getName() +
                        ") on target object " + target + ". Trying reflection instead");
                mProperty = null;
            }
        }
        Class targetClass = target.getClass();
        if (mSetter == null) {
            setupSetter(targetClass);
        }
        for (Keyframe kf : mKeyframeSet.mKeyframes) {
            if (!kf.hasValue()) {
                if (mGetter == null) {
                    setupGetter(targetClass);
                    if (mGetter == null) {
                        // Already logged the error - just return to avoid NPE
                        return;
                    }
                }
                try {
                    kf.setValue(mGetter.invoke(target));
                } catch (InvocationTargetException e) {
                    Log.e("PropertyValuesHolder", e.toString());
                } catch (IllegalAccessException e) {
                    Log.e("PropertyValuesHolder", e.toString());
                }
            }
        }
!!!2441356.java!!!	setupValue(inout target : Object, inout kf : Keyframe) : void
        if (mProperty != null) {
            kf.setValue(mProperty.get(target));
        }
        try {
            if (mGetter == null) {
                Class targetClass = target.getClass();
                setupGetter(targetClass);
                if (mGetter == null) {
                    // Already logged the error - just return to avoid NPE
                    return;
                }
            }
            kf.setValue(mGetter.invoke(target));
        } catch (InvocationTargetException e) {
            Log.e("PropertyValuesHolder", e.toString());
        } catch (IllegalAccessException e) {
            Log.e("PropertyValuesHolder", e.toString());
        }
!!!2441484.java!!!	setupStartValue(inout target : Object) : void
        setupValue(target, mKeyframeSet.mKeyframes.get(0));
!!!2441612.java!!!	setupEndValue(inout target : Object) : void
        setupValue(target, mKeyframeSet.mKeyframes.get(mKeyframeSet.mKeyframes.size() - 1));
!!!2441740.java!!!	clone() : PropertyValuesHolder
        try {
            PropertyValuesHolder newPVH = (PropertyValuesHolder) super.clone();
            newPVH.mPropertyName = mPropertyName;
            newPVH.mProperty = mProperty;
            newPVH.mKeyframeSet = mKeyframeSet.clone();
            newPVH.mEvaluator = mEvaluator;
            return newPVH;
        } catch (CloneNotSupportedException e) {
            // won't reach here
            return null;
        }
!!!2441868.java!!!	setAnimatedValue(inout target : Object) : void
        if (mProperty != null) {
            mProperty.set(target, getAnimatedValue());
        }
        if (mSetter != null) {
            try {
                mTmpValueArray[0] = getAnimatedValue();
                mSetter.invoke(target, mTmpValueArray);
            } catch (InvocationTargetException e) {
                Log.e("PropertyValuesHolder", e.toString());
            } catch (IllegalAccessException e) {
                Log.e("PropertyValuesHolder", e.toString());
            }
        }
!!!2441996.java!!!	init() : void
        if (mEvaluator == null) {
            // We already handle int and float automatically, but not their Object
            // equivalents
            mEvaluator = (mValueType == Integer.class) ? sIntEvaluator :
                    (mValueType == Float.class) ? sFloatEvaluator :
                    null;
        }
        if (mEvaluator != null) {
            // KeyframeSet knows how to evaluate the common types - only give it a custom
            // evaluator if one has been set on this class
            mKeyframeSet.setEvaluator(mEvaluator);
        }
!!!2442124.java!!!	setEvaluator(inout evaluator : TypeEvaluator) : void
        mEvaluator = evaluator;
        mKeyframeSet.setEvaluator(evaluator);
!!!2442252.java!!!	calculateValue(in fraction : float) : void
        mAnimatedValue = mKeyframeSet.getValue(fraction);
!!!2442380.java!!!	setPropertyName(in propertyName : String) : void
        mPropertyName = propertyName;
!!!2442508.java!!!	setProperty(inout property : Property) : void
        mProperty = property;
!!!2442636.java!!!	getPropertyName() : String
        return mPropertyName;
!!!2442764.java!!!	getAnimatedValue() : Object
        return mAnimatedValue;
!!!2442892.java!!!	toString() : String
        return mPropertyName + ": " + mKeyframeSet.toString();
!!!2443020.java!!!	getMethodName(in prefix : String, in propertyName : String) : String
        if (propertyName == null || propertyName.length() == 0) {
            // shouldn't get here
            return prefix;
        }
        char firstLetter = Character.toUpperCase(propertyName.charAt(0));
        String theRest = propertyName.substring(1);
        return prefix + firstLetter + theRest;
