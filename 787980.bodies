class Transport
!!!3060236.java!!!	getContentProvider() : ContentProvider
            return ContentProvider.this;
!!!3060364.java!!!	getProviderName() : String
            return getContentProvider().getClass().getName();
!!!3060492.java!!!	query(inout uri : Uri, inout projection : String, in selection : String, inout selectionArgs : String, in sortOrder : String, inout cancellationSignal : ICancellationSignal) : Cursor
            enforceReadPermission(uri);
            return ContentProvider.this.query(uri, projection, selection, selectionArgs, sortOrder,
                    CancellationSignal.fromTransport(cancellationSignal));
!!!3060620.java!!!	getType(inout uri : Uri) : String
            return ContentProvider.this.getType(uri);
!!!3060748.java!!!	insert(inout uri : Uri, inout initialValues : ContentValues) : Uri
            enforceWritePermission(uri);
            return ContentProvider.this.insert(uri, initialValues);
!!!3060876.java!!!	bulkInsert(inout uri : Uri, inout initialValues : ContentValues) : int
            enforceWritePermission(uri);
            return ContentProvider.this.bulkInsert(uri, initialValues);
!!!3061004.java!!!	applyBatch(inout operations : ArrayList<ContentProviderOperation>) : ContentProviderResult
            for (ContentProviderOperation operation : operations) {
                if (operation.isReadOperation()) {
                    enforceReadPermission(operation.getUri());
                }

                if (operation.isWriteOperation()) {
                    enforceWritePermission(operation.getUri());
                }
            }
            return ContentProvider.this.applyBatch(operations);
!!!3061132.java!!!	delete(inout uri : Uri, in selection : String, inout selectionArgs : String) : int
            enforceWritePermission(uri);
            return ContentProvider.this.delete(uri, selection, selectionArgs);
!!!3061260.java!!!	update(inout uri : Uri, inout values : ContentValues, in selection : String, inout selectionArgs : String) : int
            enforceWritePermission(uri);
            return ContentProvider.this.update(uri, values, selection, selectionArgs);
!!!3061388.java!!!	openFile(inout uri : Uri, in mode : String) : ParcelFileDescriptor
            if (mode != null && mode.indexOf('w') != -1) enforceWritePermission(uri);
            else enforceReadPermission(uri);
            return ContentProvider.this.openFile(uri, mode);
!!!3061516.java!!!	openAssetFile(inout uri : Uri, in mode : String) : AssetFileDescriptor
            if (mode != null && mode.indexOf('w') != -1) enforceWritePermission(uri);
            else enforceReadPermission(uri);
            return ContentProvider.this.openAssetFile(uri, mode);
!!!3061644.java!!!	call(in method : String, in arg : String, inout extras : Bundle) : Bundle
            return ContentProvider.this.call(method, arg, extras);
!!!3061772.java!!!	getStreamTypes(inout uri : Uri, in mimeTypeFilter : String) : String
            return ContentProvider.this.getStreamTypes(uri, mimeTypeFilter);
!!!3061900.java!!!	openTypedAssetFile(inout uri : Uri, in mimeType : String, inout opts : Bundle) : AssetFileDescriptor
            enforceReadPermission(uri);
            return ContentProvider.this.openTypedAssetFile(uri, mimeType, opts);
!!!3062028.java!!!	createCancellationSignal() : ICancellationSignal
            return CancellationSignal.createTransport();
!!!3062156.java!!!	enforceReadPermission(inout uri : Uri) : void
            final Context context = getContext();
            final int pid = Binder.getCallingPid();
            final int uid = Binder.getCallingUid();
            String missingPerm = null;

            if (UserHandle.isSameApp(uid, mMyUid)) {
                return;
            }

            if (mExported) {
                final String componentPerm = getReadPermission();
                if (componentPerm != null) {
                    if (context.checkPermission(componentPerm, pid, uid) == PERMISSION_GRANTED) {
                        return;
                    } else {
                        missingPerm = componentPerm;
                    }
                }

                // track if unprotected read is allowed; any denied
                // <path-permission> below removes this ability
                boolean allowDefaultRead = (componentPerm == null);

                final PathPermission[] pps = getPathPermissions();
                if (pps != null) {
                    final String path = uri.getPath();
                    for (PathPermission pp : pps) {
                        final String pathPerm = pp.getReadPermission();
                        if (pathPerm != null && pp.match(path)) {
                            if (context.checkPermission(pathPerm, pid, uid) == PERMISSION_GRANTED) {
                                return;
                            } else {
                                // any denied <path-permission> means we lose
                                // default <provider> access.
                                allowDefaultRead = false;
                                missingPerm = pathPerm;
                            }
                        }
                    }
                }

                // if we passed <path-permission> checks above, and no default
                // <provider> permission, then allow access.
                if (allowDefaultRead) return;
            }

            // last chance, check against any uri grants
            if (context.checkUriPermission(uri, pid, uid, Intent.FLAG_GRANT_READ_URI_PERMISSION)
                    == PERMISSION_GRANTED) {
                return;
            }

            final String failReason = mExported
                    ? " requires " + missingPerm + ", or grantUriPermission()"
                    : " requires the provider be exported, or grantUriPermission()";
            throw new SecurityException("Permission Denial: reading "
                    + ContentProvider.this.getClass().getName() + " uri " + uri + " from pid=" + pid
                    + ", uid=" + uid + failReason);
!!!3062284.java!!!	enforceWritePermission(inout uri : Uri) : void
            final Context context = getContext();
            final int pid = Binder.getCallingPid();
            final int uid = Binder.getCallingUid();
            String missingPerm = null;

            if (UserHandle.isSameApp(uid, mMyUid)) {
                return;
            }

            if (mExported) {
                final String componentPerm = getWritePermission();
                if (componentPerm != null) {
                    if (context.checkPermission(componentPerm, pid, uid) == PERMISSION_GRANTED) {
                        return;
                    } else {
                        missingPerm = componentPerm;
                    }
                }

                // track if unprotected write is allowed; any denied
                // <path-permission> below removes this ability
                boolean allowDefaultWrite = (componentPerm == null);

                final PathPermission[] pps = getPathPermissions();
                if (pps != null) {
                    final String path = uri.getPath();
                    for (PathPermission pp : pps) {
                        final String pathPerm = pp.getWritePermission();
                        if (pathPerm != null && pp.match(path)) {
                            if (context.checkPermission(pathPerm, pid, uid) == PERMISSION_GRANTED) {
                                return;
                            } else {
                                // any denied <path-permission> means we lose
                                // default <provider> access.
                                allowDefaultWrite = false;
                                missingPerm = pathPerm;
                            }
                        }
                    }
                }

                // if we passed <path-permission> checks above, and no default
                // <provider> permission, then allow access.
                if (allowDefaultWrite) return;
            }

            // last chance, check against any uri grants
            if (context.checkUriPermission(uri, pid, uid, Intent.FLAG_GRANT_WRITE_URI_PERMISSION)
                    == PERMISSION_GRANTED) {
                return;
            }

            final String failReason = mExported
                    ? " requires " + missingPerm + ", or grantUriPermission()"
                    : " requires the provider be exported, or grantUriPermission()";
            throw new SecurityException("Permission Denial: writing "
                    + ContentProvider.this.getClass().getName() + " uri " + uri + " from pid=" + pid
                    + ", uid=" + uid + failReason);
