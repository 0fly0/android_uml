class DrawableContainerState
!!!6448524.java!!!	DrawableContainerState(inout orig : DrawableContainerState, inout owner : DrawableContainer, inout res : Resources)
            mOwner = owner;

            if (orig != null) {
                mChangingConfigurations = orig.mChangingConfigurations;
                mChildrenChangingConfigurations = orig.mChildrenChangingConfigurations;
                
                final Drawable[] origDr = orig.mDrawables;

                mDrawables = new Drawable[origDr.length];
                mNumChildren = orig.mNumChildren;

                final int N = mNumChildren;
                for (int i=0; i<N; i++) {
                    if (res != null) {
                        mDrawables[i] = origDr[i].getConstantState().newDrawable(res);
                    } else {
                        mDrawables[i] = origDr[i].getConstantState().newDrawable();
                    }
                    mDrawables[i].setCallback(owner);
                }

                mCheckedConstantState = mCanConstantState = true;
                mVariablePadding = orig.mVariablePadding;
                if (orig.mConstantPadding != null) {
                    mConstantPadding = new Rect(orig.mConstantPadding);
                }
                mConstantSize = orig.mConstantSize;
                mComputedConstantSize = orig.mComputedConstantSize;
                mConstantWidth = orig.mConstantWidth;
                mConstantHeight = orig.mConstantHeight;
                mConstantMinimumWidth = orig.mConstantMinimumWidth;
                mConstantMinimumHeight = orig.mConstantMinimumHeight;
                
                mOpacity = orig.mOpacity;
                mHaveStateful = orig.mHaveStateful;
                mStateful = orig.mStateful;
                
                mDither = orig.mDither;

                mEnterFadeDuration = orig.mEnterFadeDuration;
                mExitFadeDuration = orig.mExitFadeDuration;

            } else {
                mDrawables = new Drawable[10];
                mNumChildren = 0;
                mCheckedConstantState = mCanConstantState = false;
            }
!!!6448652.java!!!	getChangingConfigurations() : int
            return mChangingConfigurations;
!!!6448780.java!!!	addChild(inout dr : Drawable) : int
            final int pos = mNumChildren;

            if (pos >= mDrawables.length) {
                growArray(pos, pos+10);
            }

            dr.setVisible(false, true);
            dr.setCallback(mOwner);

            mDrawables[pos] = dr;
            mNumChildren++;
            mChildrenChangingConfigurations |= dr.getChangingConfigurations();
            mHaveStateful = false;

            mConstantPadding = null;
            mPaddingChecked = false;
            mComputedConstantSize = false;

            return pos;
!!!6448908.java!!!	getChildCount() : int
            return mNumChildren;
!!!6449036.java!!!	getChildren() : Drawable
            return mDrawables;
!!!6449164.java!!!	setVariablePadding(inout variable : boolean) : void
            mVariablePadding = variable;
!!!6449292.java!!!	getConstantPadding() : Rect
            if (mVariablePadding) {
                return null;
            }
            if (mConstantPadding != null || mPaddingChecked) {
                return mConstantPadding;
            }

            Rect r = null;
            final Rect t = new Rect();
            final int N = getChildCount();
            final Drawable[] drawables = mDrawables;
            for (int i = 0; i < N; i++) {
                if (drawables[i].getPadding(t)) {
                    if (r == null) r = new Rect(0, 0, 0, 0);
                    if (t.left > r.left) r.left = t.left;
                    if (t.top > r.top) r.top = t.top;
                    if (t.right > r.right) r.right = t.right;
                    if (t.bottom > r.bottom) r.bottom = t.bottom;
                }
            }
            mPaddingChecked = true;
            return (mConstantPadding = r);
!!!6449420.java!!!	setConstantSize(inout constant : boolean) : void
            mConstantSize = constant;
!!!6449548.java!!!	isConstantSize() : boolean
            return mConstantSize;
!!!6449676.java!!!	getConstantWidth() : int
            if (!mComputedConstantSize) {
                computeConstantSize();
            }

            return mConstantWidth;
!!!6449804.java!!!	getConstantHeight() : int
            if (!mComputedConstantSize) {
                computeConstantSize();
            }

            return mConstantHeight;
!!!6449932.java!!!	getConstantMinimumWidth() : int
            if (!mComputedConstantSize) {
                computeConstantSize();
            }

            return mConstantMinimumWidth;
!!!6450060.java!!!	getConstantMinimumHeight() : int
            if (!mComputedConstantSize) {
                computeConstantSize();
            }

            return mConstantMinimumHeight;
!!!6450188.java!!!	computeConstantSize() : void
            mComputedConstantSize = true;

            final int N = getChildCount();
            final Drawable[] drawables = mDrawables;
            mConstantWidth = mConstantHeight = -1;
            mConstantMinimumWidth = mConstantMinimumHeight = 0;
            for (int i = 0; i < N; i++) {
                Drawable dr = drawables[i];
                int s = dr.getIntrinsicWidth();
                if (s > mConstantWidth) mConstantWidth = s;
                s = dr.getIntrinsicHeight();
                if (s > mConstantHeight) mConstantHeight = s;
                s = dr.getMinimumWidth();
                if (s > mConstantMinimumWidth) mConstantMinimumWidth = s;
                s = dr.getMinimumHeight();
                if (s > mConstantMinimumHeight) mConstantMinimumHeight = s;
            }
!!!6450316.java!!!	setEnterFadeDuration(in duration : int) : void
            mEnterFadeDuration = duration;
!!!6450444.java!!!	getEnterFadeDuration() : int
            return mEnterFadeDuration;
!!!6450572.java!!!	setExitFadeDuration(in duration : int) : void
            mExitFadeDuration = duration;
!!!6450700.java!!!	getExitFadeDuration() : int
            return mExitFadeDuration;
!!!6450828.java!!!	getOpacity() : int
            final int N = getChildCount();
            final Drawable[] drawables = mDrawables;
            int op = N > 0 ? drawables[0].getOpacity() : PixelFormat.TRANSPARENT;
            for (int i = 1; i < N; i++) {
                op = Drawable.resolveOpacity(op, drawables[i].getOpacity());
            }
            mOpacity = op;
            return op;
!!!6450956.java!!!	isStateful() : boolean
            if (mHaveStateful) {
                return mStateful;
            }
            
            boolean stateful = false;
            final int N = getChildCount();
            for (int i = 0; i < N; i++) {
                if (mDrawables[i].isStateful()) {
                    stateful = true;
                    break;
                }
            }
            
            mStateful = stateful;
            mHaveStateful = true;
            return stateful;
!!!6451084.java!!!	growArray(in oldSize : int, in newSize : int) : void
            Drawable[] newDrawables = new Drawable[newSize];
            System.arraycopy(mDrawables, 0, newDrawables, 0, oldSize);
            mDrawables = newDrawables;
!!!6451212.java!!!	canConstantState() : boolean
            if (!mCheckedConstantState) {
                mCanConstantState = true;
                final int N = mNumChildren;
                for (int i=0; i<N; i++) {
                    if (mDrawables[i].getConstantState() == null) {
                        mCanConstantState = false;
                        break;
                    }
                }
                mCheckedConstantState = true;
            }

            return mCanConstantState;
