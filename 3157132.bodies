class MdnsDiscovery
!!!13378316.java!!!	MdnsDiscovery(inout context : Context)
        mProxy = new DiscoveryProxy(context);
!!!13378444.java!!!	isListening() : boolean
        return mIsListening;
!!!13378572.java!!!	startDiscovery() : void
        if (!mIsListening) {
            mProxy.bind();
            mProxy.registerListener(
                    MDCP_DISCOVERY_TYPE,
                    new DiscoveryListener() {

                public void onServiceAdded(ServiceRecord record) {
                    if (mListener != null) {
                        DeviceRecord device = getDeviceRecord(record);
                                if (device != null) {
                                    mListener.onDeviceFound(device);
                                }
                    }
                }

                public void onServiceRemoved(ServiceRecord record) {
                    if (mListener != null) {
                        DeviceRecord device = getDeviceRecord(record);
                                if (device != null) {
                                    mListener.onDeviceLost(device);
                                }
                    }
                }
            });
            mIsListening = true;
        }
!!!13378700.java!!!	stopDiscovery() : void
        if (mIsListening) {
            mProxy.unregisterListener(MDCP_DISCOVERY_TYPE);
            mProxy.unbind();
            mIsListening = false;
        }

!!!13378828.java!!!	setListener(inout listener : Listener) : void
        mListener = listener;
!!!13378956.java!!!	getDeviceRecord(inout record : ServiceRecord) : DeviceRecord
        String id = record.getDescription().getInstanceName();
        String label = record.getDescription().getInstanceName();
        InetAddress address = null;
        int port = record.getDescription().getPort();
        try {
            address = record.getDescription().getHostAddress();
        } catch (UnknownHostException e) {
            return null;
        }
        return new DeviceRecord(id, label, address, port);
