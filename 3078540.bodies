class WordComposer
!!!12870412.java!!!	WordComposer()
        mPrimaryKeyCodes = new int[N];
        mTypedWord = new StringBuilder(N);
        mXCoordinates = new int[N];
        mYCoordinates = new int[N];
        mAutoCorrection = null;
        mTrailingSingleQuotesCount = 0;
        mIsResumed = false;
        refreshSize();
!!!12870540.java!!!	WordComposer(inout source : WordComposer)
        init(source);
!!!12870668.java!!!	init(inout source : WordComposer) : void
        mPrimaryKeyCodes = Arrays.copyOf(source.mPrimaryKeyCodes, source.mPrimaryKeyCodes.length);
        mTypedWord = new StringBuilder(source.mTypedWord);
        mXCoordinates = Arrays.copyOf(source.mXCoordinates, source.mXCoordinates.length);
        mYCoordinates = Arrays.copyOf(source.mYCoordinates, source.mYCoordinates.length);
        mCapsCount = source.mCapsCount;
        mIsFirstCharCapitalized = source.mIsFirstCharCapitalized;
        mAutoCapitalized = source.mAutoCapitalized;
        mTrailingSingleQuotesCount = source.mTrailingSingleQuotesCount;
        mIsResumed = source.mIsResumed;
        refreshSize();
!!!12870796.java!!!	reset() : void
        mTypedWord.setLength(0);
        mAutoCorrection = null;
        mCapsCount = 0;
        mIsFirstCharCapitalized = false;
        mTrailingSingleQuotesCount = 0;
        mIsResumed = false;
        refreshSize();
!!!12870924.java!!!	refreshSize() : void
        mCodePointSize = mTypedWord.codePointCount(0, mTypedWord.length());
!!!12871052.java!!!	size() : int
        return mCodePointSize;
!!!12871180.java!!!	isComposingWord() : boolean
        return size() > 0;
!!!12871308.java!!!	getCodeAt(in index : int) : int
        if (index >= BinaryDictionary.MAX_WORD_LENGTH) {
            return -1;
        }
        return mPrimaryKeyCodes[index];
!!!12871436.java!!!	getXCoordinates() : int
        return mXCoordinates;
!!!12871564.java!!!	getYCoordinates() : int
        return mYCoordinates;
!!!12871692.java!!!	isFirstCharCapitalized(in index : int, in codePoint : int, inout previous : boolean) : boolean
        if (index == 0) return Character.isUpperCase(codePoint);
        return previous && !Character.isUpperCase(codePoint);
!!!12871820.java!!!	add(in primaryCode : int, in x : int, in y : int, inout keyDetector : KeyDetector) : void
        final int keyX;
        final int keyY;
        if (null == keyDetector
                || x == KeyboardActionListener.SUGGESTION_STRIP_COORDINATE
                || y == KeyboardActionListener.SUGGESTION_STRIP_COORDINATE
                || x == KeyboardActionListener.NOT_A_TOUCH_COORDINATE
                || y == KeyboardActionListener.NOT_A_TOUCH_COORDINATE) {
            keyX = x;
            keyY = y;
        } else {
            keyX = keyDetector.getTouchX(x);
            keyY = keyDetector.getTouchY(y);
        }
        add(primaryCode, keyX, keyY);
!!!12871948.java!!!	add(in primaryCode : int, in keyX : int, in keyY : int) : void
        final int newIndex = size();
        mTypedWord.appendCodePoint(primaryCode);
        refreshSize();
        if (newIndex < BinaryDictionary.MAX_WORD_LENGTH) {
            mPrimaryKeyCodes[newIndex] = primaryCode >= Keyboard.CODE_SPACE
                    ? Character.toLowerCase(primaryCode) : primaryCode;
            mXCoordinates[newIndex] = keyX;
            mYCoordinates[newIndex] = keyY;
        }
        mIsFirstCharCapitalized = isFirstCharCapitalized(
                newIndex, primaryCode, mIsFirstCharCapitalized);
        if (Character.isUpperCase(primaryCode)) mCapsCount++;
        if (Keyboard.CODE_SINGLE_QUOTE == primaryCode) {
            ++mTrailingSingleQuotesCount;
        } else {
            mTrailingSingleQuotesCount = 0;
        }
        mAutoCorrection = null;
!!!12872076.java!!!	addKeyInfo(in codePoint : int, in keyboard : Keyboard) : void
        for (final Key key : keyboard.mKeys) {
            if (key.mCode == codePoint) {
                final int x = key.mX + key.mWidth / 2;
                final int y = key.mY + key.mHeight / 2;
                add(codePoint, x, y);
                return;
            }
        }
        add(codePoint, WordComposer.NOT_A_COORDINATE, WordComposer.NOT_A_COORDINATE);
!!!12872204.java!!!	setComposingWord(in word : CharSequence, in keyboard : Keyboard) : void
        reset();
        final int length = word.length();
        for (int i = 0; i < length; i = Character.offsetByCodePoints(word, i, 1)) {
            int codePoint = Character.codePointAt(word, i);
            addKeyInfo(codePoint, keyboard);
        }
        mIsResumed = true;
!!!12872332.java!!!	deleteLast() : void
        final int size = size();
        if (size > 0) {
            // Note: mTypedWord.length() and mCodes.length differ when there are surrogate pairs
            final int stringBuilderLength = mTypedWord.length();
            if (stringBuilderLength < size) {
                throw new RuntimeException(
                        "In WordComposer: mCodes and mTypedWords have non-matching lengths");
            }
            final int lastChar = mTypedWord.codePointBefore(stringBuilderLength);
            if (Character.isSupplementaryCodePoint(lastChar)) {
                mTypedWord.delete(stringBuilderLength - 2, stringBuilderLength);
            } else {
                mTypedWord.deleteCharAt(stringBuilderLength - 1);
            }
            if (Character.isUpperCase(lastChar)) mCapsCount--;
            refreshSize();
        }
        // We may have deleted the last one.
        if (0 == size()) {
            mIsFirstCharCapitalized = false;
        }
        if (mTrailingSingleQuotesCount > 0) {
            --mTrailingSingleQuotesCount;
        } else {
            int i = mTypedWord.length();
            while (i > 0) {
                i = mTypedWord.offsetByCodePoints(i, -1);
                if (Keyboard.CODE_SINGLE_QUOTE != mTypedWord.codePointAt(i)) break;
                ++mTrailingSingleQuotesCount;
            }
        }
        mAutoCorrection = null;
!!!12872460.java!!!	getTypedWord() : String
        return mTypedWord.toString();
!!!12872588.java!!!	isFirstCharCapitalized() : boolean
        return mIsFirstCharCapitalized;
!!!12872716.java!!!	trailingSingleQuotesCount() : int
        return mTrailingSingleQuotesCount;
!!!12872844.java!!!	isAllUpperCase() : boolean
        return (mCapsCount > 0) && (mCapsCount == size());
!!!12872972.java!!!	isMostlyCaps() : boolean
        return mCapsCount > 1;
!!!12873100.java!!!	setAutoCapitalized(inout auto : boolean) : void
        mAutoCapitalized = auto;
!!!12873228.java!!!	isAutoCapitalized() : boolean
        return mAutoCapitalized;
!!!12873356.java!!!	setAutoCorrection(in correction : CharSequence) : void
        mAutoCorrection = correction;
!!!12873484.java!!!	getAutoCorrectionOrNull() : CharSequence
        return mAutoCorrection;
!!!12873612.java!!!	isResumed() : boolean
        return mIsResumed;
!!!12873740.java!!!	commitWord(in type : int, in committedWord : String, in separatorCode : int, in prevWord : CharSequence) : LastComposedWord
        // Note: currently, we come here whenever we commit a word. If it's a MANUAL_PICK
        // or a DECIDED_WORD we may cancel the commit later; otherwise, we should deactivate
        // the last composed word to ensure this does not happen.
        final int[] primaryKeyCodes = mPrimaryKeyCodes;
        final int[] xCoordinates = mXCoordinates;
        final int[] yCoordinates = mYCoordinates;
        mPrimaryKeyCodes = new int[N];
        mXCoordinates = new int[N];
        mYCoordinates = new int[N];
        final LastComposedWord lastComposedWord = new LastComposedWord(primaryKeyCodes,
                xCoordinates, yCoordinates, mTypedWord.toString(), committedWord, separatorCode,
                prevWord);
        if (type != LastComposedWord.COMMIT_TYPE_DECIDED_WORD
                && type != LastComposedWord.COMMIT_TYPE_MANUAL_PICK) {
            lastComposedWord.deactivate();
        }
        mTypedWord.setLength(0);
        refreshSize();
        mAutoCorrection = null;
        mIsResumed = false;
        return lastComposedWord;
!!!12873868.java!!!	resumeSuggestionOnLastComposedWord(in lastComposedWord : LastComposedWord) : void
        mPrimaryKeyCodes = lastComposedWord.mPrimaryKeyCodes;
        mXCoordinates = lastComposedWord.mXCoordinates;
        mYCoordinates = lastComposedWord.mYCoordinates;
        mTypedWord.setLength(0);
        mTypedWord.append(lastComposedWord.mTypedWord);
        refreshSize();
        mAutoCorrection = null; // This will be filled by the next call to updateSuggestion.
        mIsResumed = true;
