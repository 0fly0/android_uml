class NinePatchDrawable
!!!6485004.java!!!	NinePatchDrawable(inout bitmap : Bitmap, inout chunk : byte, inout padding : Rect, in srcName : String)
        this(new NinePatchState(new NinePatch(bitmap, chunk, srcName), padding), null);
!!!6485132.java!!!	NinePatchDrawable(inout res : Resources, inout bitmap : Bitmap, inout chunk : byte, inout padding : Rect, in srcName : String)
        this(new NinePatchState(new NinePatch(bitmap, chunk, srcName), padding), res);
        mNinePatchState.mTargetDensity = mTargetDensity;
!!!6485260.java!!!	NinePatchDrawable(inout res : Resources, inout bitmap : Bitmap, inout chunk : byte, inout padding : Rect, inout layoutInsets : Rect, in srcName : String)
        this(new NinePatchState(new NinePatch(bitmap, chunk, srcName), padding, layoutInsets), res);
        mNinePatchState.mTargetDensity = mTargetDensity;
!!!6485388.java!!!	NinePatchDrawable(inout patch : NinePatch)
        this(new NinePatchState(patch, new Rect()), null);
!!!6485516.java!!!	NinePatchDrawable(inout res : Resources, inout patch : NinePatch)
        this(new NinePatchState(patch, new Rect()), res);
        mNinePatchState.mTargetDensity = mTargetDensity;
!!!6485644.java!!!	setNinePatchState(inout state : NinePatchState, inout res : Resources) : void
        mNinePatchState = state;
        mNinePatch = state.mNinePatch;
        mPadding = state.mPadding;
        mTargetDensity = res != null ? res.getDisplayMetrics().densityDpi
                : state.mTargetDensity;
        //noinspection PointlessBooleanExpression
        if (state.mDither != DEFAULT_DITHER) {
            // avoid calling the setter unless we need to, since it does a
            // lazy allocation of a paint
            setDither(state.mDither);
        }
        if (mNinePatch != null) {
            computeBitmapSize();
        }
!!!6485772.java!!!	setTargetDensity(inout canvas : Canvas) : void
        setTargetDensity(canvas.getDensity());
!!!6485900.java!!!	setTargetDensity(inout metrics : DisplayMetrics) : void
        setTargetDensity(metrics.densityDpi);
!!!6486028.java!!!	setTargetDensity(in density : int) : void
        if (density != mTargetDensity) {
            mTargetDensity = density == 0 ? DisplayMetrics.DENSITY_DEFAULT : density;
            if (mNinePatch != null) {
                computeBitmapSize();
            }
            invalidateSelf();
        }
!!!6486156.java!!!	scaleFromDensity(inout insets : Insets, in sdensity : int, in tdensity : int) : Insets
        int left = Bitmap.scaleFromDensity(insets.left, sdensity, tdensity);
        int top = Bitmap.scaleFromDensity(insets.top, sdensity, tdensity);
        int right = Bitmap.scaleFromDensity(insets.right, sdensity, tdensity);
        int bottom = Bitmap.scaleFromDensity(insets.bottom, sdensity, tdensity);
        return Insets.of(left, top, right, bottom);
!!!6486284.java!!!	computeBitmapSize() : void
        final int sdensity = mNinePatch.getDensity();
        final int tdensity = mTargetDensity;
        if (sdensity == tdensity) {
            mBitmapWidth = mNinePatch.getWidth();
            mBitmapHeight = mNinePatch.getHeight();
            mLayoutInsets = mNinePatchState.mLayoutInsets;
        } else {
            mBitmapWidth = Bitmap.scaleFromDensity(mNinePatch.getWidth(),
                    sdensity, tdensity);
            mBitmapHeight = Bitmap.scaleFromDensity(mNinePatch.getHeight(),
                    sdensity, tdensity);
            if (mNinePatchState.mPadding != null && mPadding != null) {
                Rect dest = mPadding;
                Rect src = mNinePatchState.mPadding;
                if (dest == src) {
                    mPadding = dest = new Rect(src);
                }
                dest.left = Bitmap.scaleFromDensity(src.left, sdensity, tdensity);
                dest.top = Bitmap.scaleFromDensity(src.top, sdensity, tdensity);
                dest.right = Bitmap.scaleFromDensity(src.right, sdensity, tdensity);
                dest.bottom = Bitmap.scaleFromDensity(src.bottom, sdensity, tdensity);
            }
            mLayoutInsets = scaleFromDensity(mNinePatchState.mLayoutInsets, sdensity, tdensity);
        }
!!!6486412.java!!!	draw(inout canvas : Canvas) : void
        mNinePatch.draw(canvas, getBounds(), mPaint);
!!!6486540.java!!!	getChangingConfigurations() : int
        return super.getChangingConfigurations() | mNinePatchState.mChangingConfigurations;
!!!6486668.java!!!	getPadding(inout padding : Rect) : boolean
        padding.set(mPadding);
        return true;
!!!6486796.java!!!	getLayoutInsets() : Insets
        return mLayoutInsets;
!!!6486924.java!!!	setAlpha(in alpha : int) : void
        if (mPaint == null && alpha == 0xFF) {
            // Fast common case -- leave at normal alpha.
            return;
        }
        getPaint().setAlpha(alpha);
        invalidateSelf();
!!!6487052.java!!!	setColorFilter(inout cf : ColorFilter) : void
        if (mPaint == null && cf == null) {
            // Fast common case -- leave at no color filter.
            return;
        }
        getPaint().setColorFilter(cf);
        invalidateSelf();
!!!6487180.java!!!	setDither(inout dither : boolean) : void
        if (mPaint == null && dither == DEFAULT_DITHER) {
            // Fast common case -- leave at default dither.
            return;
        }
        getPaint().setDither(dither);
        invalidateSelf();
!!!6487308.java!!!	setFilterBitmap(inout filter : boolean) : void
        getPaint().setFilterBitmap(filter);
        invalidateSelf();
!!!6487436.java!!!	inflate(inout r : Resources, inout parser : XmlPullParser, inout attrs : AttributeSet) : void
        super.inflate(r, parser, attrs);

        TypedArray a = r.obtainAttributes(attrs, com.android.internal.R.styleable.NinePatchDrawable);

        final int id = a.getResourceId(com.android.internal.R.styleable.NinePatchDrawable_src, 0);
        if (id == 0) {
            throw new XmlPullParserException(parser.getPositionDescription() +
                    ": <nine-patch> requires a valid src attribute");
        }

        final boolean dither = a.getBoolean(
                com.android.internal.R.styleable.NinePatchDrawable_dither,
                DEFAULT_DITHER);
        final BitmapFactory.Options options = new BitmapFactory.Options();
        if (dither) {
            options.inDither = false;
        }
        options.inScreenDensity = r.getDisplayMetrics().noncompatDensityDpi;

        final Rect padding = new Rect();
        final Rect layoutInsets = new Rect();
        Bitmap bitmap = null;

        try {
            final TypedValue value = new TypedValue();
            final InputStream is = r.openRawResource(id, value);

            bitmap = BitmapFactory.decodeResourceStream(r, value, is, padding, options);

            is.close();
        } catch (IOException e) {
            // Ignore
        }

        if (bitmap == null) {
            throw new XmlPullParserException(parser.getPositionDescription() +
                    ": <nine-patch> requires a valid src attribute");
        } else if (bitmap.getNinePatchChunk() == null) {
            throw new XmlPullParserException(parser.getPositionDescription() +
                    ": <nine-patch> requires a valid 9-patch source image");
        }

        setNinePatchState(new NinePatchState(
                new NinePatch(bitmap, bitmap.getNinePatchChunk(), "XML 9-patch"),
                padding, layoutInsets, dither), r);
        mNinePatchState.mTargetDensity = mTargetDensity;

        a.recycle();
!!!6487564.java!!!	getPaint() : Paint
        if (mPaint == null) {
            mPaint = new Paint();
            mPaint.setDither(DEFAULT_DITHER);
        }
        return mPaint;
!!!6487692.java!!!	getIntrinsicWidth() : int
        return mBitmapWidth;
!!!6487820.java!!!	getIntrinsicHeight() : int
        return mBitmapHeight;
!!!6487948.java!!!	getMinimumWidth() : int
        return mBitmapWidth;
!!!6488076.java!!!	getMinimumHeight() : int
        return mBitmapHeight;
!!!6488204.java!!!	getOpacity() : int
        return mNinePatch.hasAlpha() || (mPaint != null && mPaint.getAlpha() < 255) ?
                PixelFormat.TRANSLUCENT : PixelFormat.OPAQUE;
!!!6488332.java!!!	getTransparentRegion() : Region
        return mNinePatch.getTransparentRegion(getBounds());
!!!6488460.java!!!	getConstantState() : ConstantState
        mNinePatchState.mChangingConfigurations = getChangingConfigurations();
        return mNinePatchState;
!!!6488588.java!!!	mutate() : Drawable
        if (!mMutated && super.mutate() == this) {
            mNinePatchState = new NinePatchState(mNinePatchState);
            mNinePatch = mNinePatchState.mNinePatch;
            mMutated = true;
        }
        return this;
!!!6489612.java!!!	NinePatchDrawable(inout state : NinePatchState, inout res : Resources)
        setNinePatchState(state, res);
