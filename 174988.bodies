class GraphicBuffer
!!!1539724.cpp!!!	GraphicBuffer()
    width  = 
    height = 
    stride = 
    format = 
    usage  = 0;
    handle = NULL;
!!!1539852.cpp!!!	GraphicBuffer(in w : uint32_t, in h : uint32_t, in reqFormat : PixelFormat, in reqUsage : uint32_t)
    width  = 
    height = 
    stride = 
    format = 
    usage  = 0;
    handle = NULL;
    mInitCheck = initSize(w, h, reqFormat, reqUsage);
!!!1539980.cpp!!!	GraphicBuffer(in w : uint32_t, in h : uint32_t, in inFormat : PixelFormat, in inUsage : uint32_t, in inStride : uint32_t, inout inHandle : native_handle_t, in keepOwnership : bool)
    width  = w;
    height = h;
    stride = inStride;
    format = inFormat;
    usage  = inUsage;
    handle = inHandle;
!!!1540108.cpp!!!	GraphicBuffer(inout buffer : ANativeWindowBuffer, in keepOwnership : bool)
    width  = buffer->width;
    height = buffer->height;
    stride = buffer->stride;
    format = buffer->format;
    usage  = buffer->usage;
    handle = buffer->handle;
!!!1540236.cpp!!!	initCheck() : status_t
    return mInitCheck;
!!!1541132.cpp!!!	reallocate(in w : uint32_t, in h : uint32_t, in f : PixelFormat, in reqUsage : uint32_t) : status_t
    if (mOwner != ownData)
        return INVALID_OPERATION;

    if (handle && w==width && h==height && f==format && reqUsage==usage)
        return NO_ERROR;

    if (handle) {
        GraphicBufferAllocator& allocator(GraphicBufferAllocator::get());
        allocator.free(handle);
        handle = 0;
    }
    return initSize(w, h, f, reqUsage);
!!!1541260.cpp!!!	lock(in usage : uint32_t, inout vaddr : void) : status_t
    const Rect lockBounds(width, height);
    status_t res = lock(usage, lockBounds, vaddr);
    return res;
!!!1541388.cpp!!!	lock(in usage : uint32_t, in rect : Rect, inout vaddr : void) : status_t
    if (rect.left < 0 || rect.right  > this->width || 
        rect.top  < 0 || rect.bottom > this->height) {
        ALOGE("locking pixels (%d,%d,%d,%d) outside of buffer (w=%d, h=%d)",
                rect.left, rect.top, rect.right, rect.bottom, 
                this->width, this->height);
        return BAD_VALUE;
    }
    status_t res = getBufferMapper().lock(handle, usage, rect, vaddr);
    return res;
!!!1541516.cpp!!!	unlock() : status_t
    status_t res = getBufferMapper().unlock(handle);
    return res;
!!!1541644.cpp!!!	getNativeBuffer() : ANativeWindowBuffer
    return static_cast<ANativeWindowBuffer*>(
            const_cast<GraphicBuffer*>(this));
!!!1541772.cpp!!!	setIndex(in index : int) : void
    mIndex = index;
!!!1541900.cpp!!!	getIndex() : int
    return mIndex;
!!!1542028.cpp!!!	dumpAllocationsToSystemLog() : void
    GraphicBufferAllocator::dumpToSystemLog();
!!!1542156.cpp!!!	~GraphicBuffer()
    if (handle) {
        free_handle();
    }
!!!1542924.cpp!!!	initSize(in w : uint32_t, in h : uint32_t, in format : PixelFormat, in reqUsage : uint32_t) : status_t
    GraphicBufferAllocator& allocator = GraphicBufferAllocator::get();
    status_t err = allocator.alloc(w, h, format, reqUsage, &handle, &stride);
    if (err == NO_ERROR) {
        this->width  = w;
        this->height = h;
        this->format = format;
        this->usage  = reqUsage;
    }
    return err;
!!!1543052.cpp!!!	free_handle() : void
    if (mOwner == ownHandle) {
        mBufferMapper.unregisterBuffer(handle);
        native_handle_close(handle);
        native_handle_delete(const_cast<native_handle*>(handle));
    } else if (mOwner == ownData) {
        GraphicBufferAllocator& allocator(GraphicBufferAllocator::get());
        allocator.free(handle);
    }
    mWrappedBuffer = 0;
!!!1543180.cpp!!!	getFlattenedSize() : size_t
    return (8 + (handle ? handle->numInts : 0))*sizeof(int);
!!!1543308.cpp!!!	getFdCount() : size_t
    return handle ? handle->numFds : 0;
!!!1543436.cpp!!!	flatten(inout buffer : void, in size : size_t, in fds : int, in count : size_t) : status_t
    size_t sizeNeeded = GraphicBuffer::getFlattenedSize();
    if (size < sizeNeeded) return NO_MEMORY;

    size_t fdCountNeeded = GraphicBuffer::getFdCount();
    if (count < fdCountNeeded) return NO_MEMORY;

    int* buf = static_cast<int*>(buffer);
    buf[0] = 'GBFR';
    buf[1] = width;
    buf[2] = height;
    buf[3] = stride;
    buf[4] = format;
    buf[5] = usage;
    buf[6] = 0;
    buf[7] = 0;

    if (handle) {
        buf[6] = handle->numFds;
        buf[7] = handle->numInts;
        native_handle_t const* const h = handle;
        memcpy(fds,     h->data,             h->numFds*sizeof(int));
        memcpy(&buf[8], h->data + h->numFds, h->numInts*sizeof(int));
    }

    return NO_ERROR;
!!!1543564.cpp!!!	unflatten(in buffer : void, in size : size_t, in fds : int, in count : size_t) : status_t
    if (size < 8*sizeof(int)) return NO_MEMORY;

    int const* buf = static_cast<int const*>(buffer);
    if (buf[0] != 'GBFR') return BAD_TYPE;

    const size_t numFds  = buf[6];
    const size_t numInts = buf[7];

    const size_t sizeNeeded = (8 + numInts) * sizeof(int);
    if (size < sizeNeeded) return NO_MEMORY;

    size_t fdCountNeeded = 0;
    if (count < fdCountNeeded) return NO_MEMORY;

    if (handle) {
        // free previous handle if any
        free_handle();
    }

    if (numFds || numInts) {
        width  = buf[1];
        height = buf[2];
        stride = buf[3];
        format = buf[4];
        usage  = buf[5];
        native_handle* h = native_handle_create(numFds, numInts);
        memcpy(h->data,          fds,     numFds*sizeof(int));
        memcpy(h->data + numFds, &buf[8], numInts*sizeof(int));
        handle = h;
    } else {
        width = height = stride = format = usage = 0;
        handle = NULL;
    }

    mOwner = ownHandle;

    if (handle != 0) {
        status_t err = mBufferMapper.registerBuffer(handle);
        if (err != NO_ERROR) {
            ALOGE("unflatten: registerBuffer failed: %s (%d)",
                    strerror(-err), err);
            return err;
        }
    }

    return NO_ERROR;
