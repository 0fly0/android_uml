class OpenSSLECDHKeyAgreement
!!!2418715.java!!!	engineDoPhase(inout key : Key, inout lastPhase : boolean) : Key
        if (mOpenSslPrivateKey == null) {
            throw new IllegalStateException("Not initialized");
        }
        if (!lastPhase) {
            throw new IllegalStateException("ECDH only has one phase");
        }

        if (key == null) {
            throw new InvalidKeyException("key == null");
        }
        if (!(key instanceof PublicKey)) {
            throw new InvalidKeyException("Not a public key: " + key.getClass());
        }
        OpenSSLKey openSslPublicKey = translateKeyToEcOpenSSLKey(key);

        byte[] buffer = new byte[mExpectedResultLength];
        int actualResultLength = NativeCrypto.ECDH_compute_key(
                buffer,
                0,
                openSslPublicKey.getPkeyContext(),
                mOpenSslPrivateKey.getPkeyContext());
        byte[] result;
        if (actualResultLength == -1) {
            throw new RuntimeException("Engine returned " + actualResultLength);
        } else if (actualResultLength == mExpectedResultLength) {
            // The output is as long as expected -- use the whole buffer
            result = buffer;
        } else if (actualResultLength < mExpectedResultLength) {
            // The output is shorter than expected -- use only what's produced by the engine
            result = new byte[actualResultLength];
            System.arraycopy(buffer, 0, mResult, 0, mResult.length);
        } else {
            // The output is longer than expected
            throw new RuntimeException("Engine produced a longer than expected result. Expected: "
                + mExpectedResultLength + ", actual: " + actualResultLength);
        }
        mResult = result;

        return null; // No intermediate key
!!!2418843.java!!!	engineGenerateSecret(inout sharedSecret : byte, in offset : int) : int
        checkCompleted();
        int available = sharedSecret.length - offset;
        if (mResult.length > available) {
            throw new ShortBufferException(
                    "Needed: " + mResult.length + ", available: " + available);
        }

        System.arraycopy(mResult, 0, sharedSecret, offset, mResult.length);
        return mResult.length;
!!!2418971.java!!!	engineGenerateSecret() : byte
        checkCompleted();
        return mResult;
!!!2419099.java!!!	engineGenerateSecret(inout algorithm : String) : SecretKey
        checkCompleted();
        return new SecretKeySpec(engineGenerateSecret(), algorithm);
!!!2419227.java!!!	engineInit(inout key : Key, inout random : SecureRandom) : void
        if (key == null) {
            throw new InvalidKeyException("key == null");
        }
        if (!(key instanceof PrivateKey)) {
            throw new InvalidKeyException("Not a private key: " + key.getClass());
        }

        OpenSSLKey openSslKey = translateKeyToEcOpenSSLKey(key);
        int fieldSizeBits = NativeCrypto.EC_GROUP_get_degree(NativeCrypto.EC_KEY_get0_group(
                openSslKey.getPkeyContext()));
        mExpectedResultLength = (fieldSizeBits + 7) / 8;
        mOpenSslPrivateKey = openSslKey;
!!!2419355.java!!!	engineInit(inout key : Key, inout params : AlgorithmParameterSpec, inout random : SecureRandom) : void
        // ECDH doesn't need an AlgorithmParameterSpec
        if (params != null) {
          throw new InvalidAlgorithmParameterException("No algorithm parameters supported");
        }
        engineInit(key, random);
!!!2419483.java!!!	checkCompleted() : void
        if (mResult == null) {
            throw new IllegalStateException("Key agreement not completed");
        }
!!!2419611.java!!!	translateKeyToEcOpenSSLKey(inout key : Key) : OpenSSLKey
        try {
            return ((OpenSSLKeyHolder) KeyFactory.getInstance(
                    "EC", OpenSSLProvider.PROVIDER_NAME).translateKey(key)).getOpenSSLKey();
        } catch (Exception e) {
            throw new InvalidKeyException("Failed to translate key to OpenSSL EC key", e);
        }
