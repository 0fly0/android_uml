class AccessibilityEnableScriptInjectionPreference
!!!13743116.java!!!	AccessibilityEnableScriptInjectionPreference(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        updateSummary();
!!!13743244.java!!!	setInjectionAllowed(inout injectionAllowed : boolean) : void
        if (mInjectionAllowed != injectionAllowed) {
            mInjectionAllowed = injectionAllowed;
            persistBoolean(injectionAllowed);
            updateSummary();
        }
!!!13743372.java!!!	isInjectionAllowed() : boolean
        return mInjectionAllowed;
!!!13743500.java!!!	onBindView(inout view : View) : void
        super.onBindView(view);
        View summaryView = view.findViewById(com.android.internal.R.id.summary);
        sendAccessibilityEvent(summaryView);
!!!13743628.java!!!	sendAccessibilityEvent(inout view : View) : void
        // Since the view is still not attached we create, populate,
        // and send the event directly since we do not know when it
        // will be attached and posting commands is not as clean.
        AccessibilityManager accessibilityManager = AccessibilityManager.getInstance(getContext());
        if (mSendClickAccessibilityEvent && accessibilityManager.isEnabled()) {
            AccessibilityEvent event = AccessibilityEvent.obtain();
            event.setEventType(AccessibilityEvent.TYPE_VIEW_CLICKED);
            view.onInitializeAccessibilityEvent(event);
            view.dispatchPopulateAccessibilityEvent(event);
            accessibilityManager.sendAccessibilityEvent(event);
        }
        mSendClickAccessibilityEvent = false;
!!!13743756.java!!!	onClick() : void
        if (isInjectionAllowed()) {
            setInjectionAllowed(false);
            // Update the system setting only upon user action.
            setSystemSetting(false);
            mSendClickAccessibilityEvent = true;
        } else {
            super.onClick();
            mSendClickAccessibilityEvent = false;
        }
!!!13743884.java!!!	onGetDefaultValue(inout a : TypedArray, in index : int) : Object
        return a.getBoolean(index, false);
!!!13744012.java!!!	onSetInitialValue(inout restoreValue : boolean, inout defaultValue : Object) : void
        setInjectionAllowed(restoreValue
                ? getPersistedBoolean(mInjectionAllowed)
                : (Boolean) defaultValue);
!!!13744140.java!!!	onDialogClosed(inout result : boolean) : void
        setInjectionAllowed(result);
        if (result) {
            // Update the system setting only upon user action.
            setSystemSetting(true);
        }
!!!13744268.java!!!	onSaveInstanceState() : Parcelable
        Parcelable superState = super.onSaveInstanceState();
        if (isPersistent()) {
            return superState;
        }
        SavedState myState = new SavedState(superState);
        myState.mInjectionAllowed = mInjectionAllowed;
        return myState;
!!!13744396.java!!!	onRestoreInstanceState(inout state : Parcelable) : void
        if (state == null || !state.getClass().equals(SavedState.class)) {
            super.onRestoreInstanceState(state);
            return;
        }
        SavedState myState = (SavedState) state;
        super.onRestoreInstanceState(myState.getSuperState());
        setInjectionAllowed(myState.mInjectionAllowed);
!!!13744524.java!!!	updateSummary() : void
        setSummary(mInjectionAllowed
                ? getContext().getString(R.string.accessibility_script_injection_allowed)
                : getContext().getString(R.string.accessibility_script_injection_disallowed));
!!!13744652.java!!!	setSystemSetting(inout enabled : boolean) : void
        Settings.Secure.putInt(getContext().getContentResolver(),
                Settings.Secure.ACCESSIBILITY_SCRIPT_INJECTION, enabled ? 1 : 0);
