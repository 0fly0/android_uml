class AVCReformatter
!!!12687884.java!!!	AVCReformatter(inout streamElement : StreamElement)
            super(streamElement);
!!!12688012.java!!!	reformatSamples(inout track : TrackInfo, inout rawBuffer : ByteBuffer, in fragmentIndex : int, in qualityLevel : int) : SmoothStreamSample
            StreamFragmentElement fragment = mStreamElement.getFragments().get(fragmentIndex);
            long timeScale = mStreamElement.getTimeScale();

            long elapsed = 0;
            long fragmentStartTime = fragment.getFragmentStartTime();

            List<SmoothStreamSample> newSamples = new ArrayList<SmoothStreamSample>(
                    track.mSamples.size());

            int nalLengthSize = mStreamElement.getTracks().get(qualityLevel)
                    .getNalUnitLengthField();

            for (SampleInfo sample : track.mSamples) {
                int size = sample.mSize + kMaxNALNumberPerSample * 4;
                SmoothStreamSample newSample = SmoothStreamSample.create(size);

                // copy buffer.
                rawBuffer.position(sample.mPosition);
                convertNALDelimiter(rawBuffer, newSample.buffer, sample.mSize, nalLengthSize);

                // calculate start time.
                newSample.startTime = SmoothStreamingUtil.convertTimeInUs(
                        fragmentStartTime + elapsed + sample.mCompositionTimeOffset, timeScale);

                // We assume that nalLengthSize is always 4.
                assert(nalLengthSize == 4);
                newSample.cryptoInfo = sample.mCryptoInfo;

                // calculate duration.
                newSample.duration = SmoothStreamingUtil
                        .convertTimeInUs(sample.mDuration, timeScale);
                elapsed += sample.mDuration;

                newSamples.add(newSample);
            }

            return newSamples;
!!!12688140.java!!!	convertNALDelimiter(inout rawBuffer : ByteBuffer, inout newBuffer : ByteBuffer, in leftSize : int, in nalLengthSize : int) : void
            int nalLength;
            int offset = 0;
            int nalCount = 0;
            while (leftSize > nalLengthSize) {
                // read NAL length
                nalLength = (rawBuffer.get() & 0xff);

                for (int i = 1; i < nalLengthSize; ++i) {
                    nalLength <<= 8;
                    nalLength |= (rawBuffer.get() & 0xff);
                }

                leftSize -= nalLengthSize;
                if (nalLength > leftSize) {
                    Log.e("AVCReformatter", "Nal length is larger than leftsize");
                    break;
                }

                newBuffer.put((byte) 0x00);
                newBuffer.put((byte) 0x00);
                newBuffer.put((byte) 0x00);
                newBuffer.put((byte) 0x01);
                offset += 4;

                rawBuffer.get(newBuffer.array(), offset, nalLength);
                offset += nalLength;
                newBuffer.position(offset);
                leftSize -= nalLength;

                nalCount++;
            }

            newBuffer.position(0);
            newBuffer.limit(offset);
!!!12688268.java!!!	createStartFrame(in currentTrack : int, in fragmentIndex : int) : SmoothStreamSample
            String codec = mStreamElement.getTracks().get(currentTrack).getCodecPrivateData();
            StreamFragmentElement fragment = mStreamElement.getFragments().get(fragmentIndex);

            long fragmentStartTime = fragment.getFragmentStartTime();
            long timeScale = mStreamElement.getTimeScale();

            SmoothStreamSample sample = SmoothStreamSample.create(codec.length() / 2);
            sample.duration = 0;
            sample.startTime = SmoothStreamingUtil.convertTimeInUs(
                    fragmentStartTime, timeScale);
            for (int i = 0; i < codec.length(); i += 2) {
                Integer value = Integer.parseInt(codec.substring(i, i + 2), 16);
                sample.buffer.put(value.byteValue());
            }
            sample.isCodecSpecificData = true;
            sample.buffer.flip();
            return sample;
