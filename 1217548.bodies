class AudioTrack
!!!6882828.java!!!	AudioTrack()
        this(null, null, null);
!!!6882956.java!!!	AudioTrack(inout editor : VideoEditor, in audioTrackId : String, in filename : String)
        this(editor, audioTrackId, filename, 0, 0, MediaItem.END_OF_FILE, false, 100, false, false,
                0, 0, null);
!!!6883084.java!!!	AudioTrack(inout editor : VideoEditor, in audioTrackId : String, in filename : String, in startTimeMs : long, in beginMs : long, in endMs : long, inout loop : boolean, in volume : int, inout muted : boolean, inout duckingEnabled : boolean, in duckThreshold : int, in duckedTrackVolume : int, in audioWaveformFilename : String)
        Properties properties = null;

        File file = new File(filename);
        if (!file.exists()) {
            throw new IOException(filename + " not found ! ");
        }

        /*Compare file_size with 2GB*/
        if (VideoEditor.MAX_SUPPORTED_FILE_SIZE <= file.length()) {
            throw new IllegalArgumentException("File size is more than 2GB");
        }

        if (editor instanceof VideoEditorImpl) {
            mMANativeHelper = ((VideoEditorImpl)editor).getNativeContext();
        } else {
            throw new IllegalArgumentException("editor is not of type VideoEditorImpl");
        }
        try {
          properties = mMANativeHelper.getMediaProperties(filename);
        } catch (Exception e) {
            throw new IllegalArgumentException(e.getMessage() + " : " + filename);
        }
        int fileType = mMANativeHelper.getFileType(properties.fileType);
        switch (fileType) {
            case MediaProperties.FILE_3GP:
            case MediaProperties.FILE_MP4:
            case MediaProperties.FILE_MP3:
            case MediaProperties.FILE_AMR:
                break;

            default: {
                throw new IllegalArgumentException("Unsupported input file type: " + fileType);
            }
        }
        switch (mMANativeHelper.getAudioCodecType(properties.audioFormat)) {
            case MediaProperties.ACODEC_AMRNB:
            case MediaProperties.ACODEC_AMRWB:
            case MediaProperties.ACODEC_AAC_LC:
            case MediaProperties.ACODEC_MP3:
                break;
            default:
                throw new IllegalArgumentException("Unsupported Audio Codec Format in Input File");
        }

        if (endMs == MediaItem.END_OF_FILE) {
            endMs = properties.audioDuration;
        }

        mUniqueId = audioTrackId;
        mFilename = filename;
        mStartTimeMs = startTimeMs;
        mDurationMs = properties.audioDuration;
        mAudioChannels = properties.audioChannels;
        mAudioBitrate = properties.audioBitrate;
        mAudioSamplingFrequency = properties.audioSamplingFrequency;
        mAudioType = properties.audioFormat;
        mTimelineDurationMs = endMs - beginMs;
        mVolumePercent = volume;

        mBeginBoundaryTimeMs = beginMs;
        mEndBoundaryTimeMs = endMs;

        mLoop = loop;
        mMuted = muted;
        mIsDuckingEnabled = duckingEnabled;
        mDuckingThreshold = duckThreshold;
        mDuckedTrackVolume = duckedTrackVolume;

        mAudioWaveformFilename = audioWaveformFilename;
        if (audioWaveformFilename != null) {
            mWaveformData =
                new SoftReference<WaveformData>(new WaveformData(audioWaveformFilename));
        } else {
            mWaveformData = null;
        }
!!!6883212.java!!!	getId() : String
        return mUniqueId;
!!!6883340.java!!!	getFilename() : String
        return mFilename;
!!!6883468.java!!!	getAudioChannels() : int
        return mAudioChannels;
!!!6883596.java!!!	getAudioType() : int
        return mAudioType;
!!!6883724.java!!!	getAudioSamplingFrequency() : int
        return mAudioSamplingFrequency;
!!!6883852.java!!!	getAudioBitrate() : int
        return mAudioBitrate;
!!!6883980.java!!!	setVolume(in volumePercent : int) : void
        if (volumePercent > MediaProperties.AUDIO_MAX_VOLUME_PERCENT) {
            throw new IllegalArgumentException("Volume set exceeds maximum allowed value");
        }

        if (volumePercent < 0) {
            throw new IllegalArgumentException("Invalid Volume ");
        }

        /**
         *  Force update of preview settings
         */
        mMANativeHelper.setGeneratePreview(true);

        mVolumePercent = volumePercent;
!!!6884108.java!!!	getVolume() : int
        return mVolumePercent;
!!!6884236.java!!!	setMute(inout muted : boolean) : void
        /**
         *  Force update of preview settings
         */
        mMANativeHelper.setGeneratePreview(true);
        mMuted = muted;
!!!6884364.java!!!	isMuted() : boolean
        return mMuted;
!!!6884492.java!!!	getStartTime() : long
        return mStartTimeMs;
!!!6884620.java!!!	getDuration() : long
        return mDurationMs;
!!!6884748.java!!!	getTimelineDuration() : long
        return mTimelineDurationMs;
!!!6884876.java!!!	setExtractBoundaries(in beginMs : long, in endMs : long) : void
        if (beginMs > mDurationMs) {
            throw new IllegalArgumentException("Invalid start time");
        }
        if (endMs > mDurationMs) {
            throw new IllegalArgumentException("Invalid end time");
        }
        if (beginMs < 0) {
            throw new IllegalArgumentException("Invalid start time; is < 0");
        }
        if (endMs < 0) {
            throw new IllegalArgumentException("Invalid end time; is < 0");
        }

        /**
         *  Force update of preview settings
         */
        mMANativeHelper.setGeneratePreview(true);

        mBeginBoundaryTimeMs = beginMs;
        mEndBoundaryTimeMs = endMs;

        mTimelineDurationMs = mEndBoundaryTimeMs - mBeginBoundaryTimeMs;
!!!6885004.java!!!	getBoundaryBeginTime() : long
        return mBeginBoundaryTimeMs;
!!!6885132.java!!!	getBoundaryEndTime() : long
        return mEndBoundaryTimeMs;
!!!6885260.java!!!	enableLoop() : void
        if (!mLoop) {
            /**
             *  Force update of preview settings
             */
            mMANativeHelper.setGeneratePreview(true);
            mLoop = true;
        }
!!!6885388.java!!!	disableLoop() : void
        if (mLoop) {
            /**
             *  Force update of preview settings
             */
            mMANativeHelper.setGeneratePreview(true);
            mLoop = false;
        }
!!!6885516.java!!!	isLooping() : boolean
        return mLoop;
!!!6885644.java!!!	disableDucking() : void
        if (mIsDuckingEnabled) {
            /**
             *  Force update of preview settings
             */
            mMANativeHelper.setGeneratePreview(true);
            mIsDuckingEnabled = false;
        }
!!!6885772.java!!!	enableDucking(in threshold : int, in duckedTrackVolume : int) : void
        if (threshold < 0 || threshold > 90) {
            throw new IllegalArgumentException("Invalid threshold value: " + threshold);
        }

        if (duckedTrackVolume < 0 || duckedTrackVolume > 100) {
            throw new IllegalArgumentException("Invalid duckedTrackVolume value: "
                    + duckedTrackVolume);
        }

        /**
         *  Force update of preview settings
         */
        mMANativeHelper.setGeneratePreview(true);

        mDuckingThreshold = threshold;
        mDuckedTrackVolume = duckedTrackVolume;
        mIsDuckingEnabled = true;
!!!6885900.java!!!	isDuckingEnabled() : boolean
        return mIsDuckingEnabled;
!!!6886028.java!!!	getDuckingThreshhold() : int
        return mDuckingThreshold;
!!!6886156.java!!!	getDuckedTrackVolume() : int
        return mDuckedTrackVolume;
!!!6886284.java!!!	extractAudioWaveform(inout listener : ExtractAudioWaveformProgressListener) : void
        if (mAudioWaveformFilename == null) {
            /**
             *  AudioWaveformFilename is generated
             */
            final String projectPath = mMANativeHelper.getProjectPath();
            final String audioWaveFilename = String.format(projectPath + "/audioWaveformFile-"
                    + getId() + ".dat");

            /**
             * Logic to get frame duration = (no. of frames per sample * 1000)/
             * sampling frequency
             */
            final int frameDuration;
            final int sampleCount;
            final int codecType = mMANativeHelper.getAudioCodecType(mAudioType);
            switch (codecType) {
                case MediaProperties.ACODEC_AMRNB: {
                    frameDuration = (MediaProperties.SAMPLES_PER_FRAME_AMRNB * 1000)
                    / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;
                    sampleCount = MediaProperties.SAMPLES_PER_FRAME_AMRNB;
                    break;
                }

                case MediaProperties.ACODEC_AMRWB: {
                    frameDuration = (MediaProperties.SAMPLES_PER_FRAME_AMRWB * 1000)
                    / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;
                    sampleCount = MediaProperties.SAMPLES_PER_FRAME_AMRWB;
                    break;
                }

                case MediaProperties.ACODEC_AAC_LC: {
                    frameDuration = (MediaProperties.SAMPLES_PER_FRAME_AAC * 1000)
                    / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;
                    sampleCount = MediaProperties.SAMPLES_PER_FRAME_AAC;
                    break;
                }

                case MediaProperties.ACODEC_MP3: {
                    frameDuration = (MediaProperties.SAMPLES_PER_FRAME_MP3 * 1000)
                    / MediaProperties.DEFAULT_SAMPLING_FREQUENCY;
                    sampleCount = MediaProperties.SAMPLES_PER_FRAME_MP3;
                    break;
                }

                default: {
                    throw new IllegalStateException("Unsupported codec type: "
                                                                   + codecType);
                }
            }

            mMANativeHelper.generateAudioGraph( mUniqueId,
                    mFilename,
                    audioWaveFilename,
                    frameDuration,
                    MediaProperties.DEFAULT_CHANNEL_COUNT,
                    sampleCount,
                    listener,
                    false);
            /**
             *  Record the generated file name
             */
            mAudioWaveformFilename = audioWaveFilename;
        }
        mWaveformData = new SoftReference<WaveformData>(new WaveformData(mAudioWaveformFilename));
!!!6886412.java!!!	getAudioWaveformFilename() : String
        return mAudioWaveformFilename;
!!!6886540.java!!!	invalidate() : void
        if (mAudioWaveformFilename != null) {
            new File(mAudioWaveformFilename).delete();
            mAudioWaveformFilename = null;
            mWaveformData = null;
        }
!!!6886668.java!!!	getWaveformData() : WaveformData
        if (mWaveformData == null) {
            return null;
        }

        WaveformData waveformData = mWaveformData.get();
        if (waveformData != null) {
            return waveformData;
        } else if (mAudioWaveformFilename != null) {
            try {
                waveformData = new WaveformData(mAudioWaveformFilename);
            } catch (IOException e) {
                throw e;
            }
            mWaveformData = new SoftReference<WaveformData>(waveformData);
            return waveformData;
        } else {
            return null;
        }
!!!6886796.java!!!	equals(inout object : Object) : boolean
        if (!(object instanceof AudioTrack)) {
            return false;
        }
        return mUniqueId.equals(((AudioTrack)object).mUniqueId);
!!!6886924.java!!!	hashCode() : int
        return mUniqueId.hashCode();
