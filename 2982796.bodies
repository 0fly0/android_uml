class WFDDisplayActivity
!!!12134412.java!!!	setDestroyByUser(inout destroyByUser : boolean) : void
		this.destroyByUser = destroyByUser;
!!!12134540.java!!!	onCreate(inout savedInstanceState : Bundle) : void
		Log.d(TAG, "onCreate WFDDisplayActivity");
		super.onCreate(savedInstanceState);

		manualConnect = this.getIntent().getBooleanExtra("manual_connect", false);
		if (!manualConnect) {
			// add necessary intent values to be matched.
			intentFilter.addAction(WifiP2pManager.WIFI_P2P_STATE_CHANGED_ACTION);
			intentFilter.addAction(WifiP2pManager.WIFI_P2P_CONNECTION_CHANGED_ACTION);
			intentFilter.addAction(WFDSinkService.SESSION_TIMEOUT_ACTION);
			receiver = new WFDDisplayActivityReceiver(this);
		}

		// full screen
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON, WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
		mSV = new WFDSinkSurfaceView(this);
		FrameLayout.LayoutParams params1 = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
				FrameLayout.LayoutParams.WRAP_CONTENT);
		params1.topMargin = 0;
		params1.gravity = Gravity.CENTER;

		this.setContentView(mSV, params1);
		editText = new EditText(this);
		editText.setAlpha(0);
		editText.setFocusable(false);
		editText.setFocusableInTouchMode(false);
		FrameLayout.LayoutParams params = new FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT,
				FrameLayout.LayoutParams.WRAP_CONTENT);
		params.topMargin = 0;
		params.gravity = Gravity.TOP | Gravity.CENTER_HORIZONTAL;
		this.addContentView(editText, params);

		this.bindService(new Intent(WFDDisplayActivity.this, WFDSinkService.class), mConnection, Context.BIND_AUTO_CREATE);
!!!12134668.java!!!	onResume() : void
		Log.d(TAG, "onResume WFDDisplayActivity");
		super.onResume();
		if(!manualConnect)
			registerReceiver(receiver, intentFilter);
		mSV.getHolder().addCallback(cb);
!!!12134796.java!!!	onPause() : void
		Log.d(TAG, "onPause WFDDisplayActivity");
		super.onPause();

		if(!manualConnect)
			unregisterReceiver(receiver);

!!!12134924.java!!!	onStop() : void
		Log.d(TAG, "onStop WFDDisplayActivity");
		super.onStop();

		clientStarted = false;
		mSV.getHolder().removeCallback(cb);
		if(mWFDSinkStateMachine != null)
			mWFDSinkStateMachine.sendMessage(WFDSinkStateMachine.USER_DESTROY_SESSION);
		setDestroyByUser(true);

		finish();
!!!12135052.java!!!	onBackPressed() : void
		Log.d(TAG, "onBackPressed");
		clientStarted = false;
		mSV.getHolder().removeCallback(cb);
		if(mWFDSinkStateMachine != null)
			mWFDSinkStateMachine.sendMessage(WFDSinkStateMachine.USER_DESTROY_SESSION);
		setDestroyByUser(true);
!!!12135180.java!!!	onDestroy() : void
		Log.d(TAG, "onDestroy WFDDisplayActivity");
		unbindService(mConnection);
		mWFDSinkService = null;
		surfaceCreated = false;
		mWFDSinkStateMachine = null;
		super.onDestroy();
!!!12135308.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
		if(WFDDeviceCapability.CertMode && mWFDSinkService != null){
			Log.d(TAG, "onKeyDown:" + event);
			if(event.getAction() == KeyEvent.ACTION_DOWN){
				switch(keyCode){
				case KeyEvent.KEYCODE_P:
					mWFDSinkService.wfd_trigger_method(WFDSinkService.WFD_SINK_PLAY);
					break;
				case KeyEvent.KEYCODE_U:
					mWFDSinkService.wfd_trigger_method(WFDSinkService.WFD_SINK_PAUSE);
					break;
				case KeyEvent.KEYCODE_S:
					mWFDSinkService.wfd_trigger_method(WFDSinkService.WFD_SINK_STANDBY);
					break;
				case KeyEvent.KEYCODE_R:
					mWFDSinkService.wfd_trigger_method(WFDSinkService.WFD_SINK_RESUME);
					break;
				case KeyEvent.KEYCODE_I:
					mWFDSinkService.wfd_trigger_method(WFDSinkService.WFD_SINK_IDR_REQ);
					break;
				};
			}
		}
		mWFDSinkService.notifyKeyEvent(event);
		return true;
!!!12135436.java!!!	onKeyUp(in keyCode : int, inout event : KeyEvent) : boolean
		mWFDSinkService.notifyKeyEvent(event);
		return true;
!!!12135564.java!!!	onTouchEvent(inout event : MotionEvent) : boolean
		mWFDSinkService.notifyTouchEvent(event, mSurfaceWidth, mSurfaceHeight);
		return true;
!!!12135692.java!!!	onGenericMotionEvent(inout event : MotionEvent) : boolean
		if  ( event.getSource() == InputDevice.SOURCE_MOUSE ) {
			switch (event.getAction()) {
				case MotionEvent.ACTION_HOVER_ENTER:
				case MotionEvent.ACTION_HOVER_MOVE:
				case MotionEvent.ACTION_HOVER_EXIT:
					mWFDSinkService.notifyTouchEvent(event, mSurfaceWidth, mSurfaceHeight);
					return true;
			}
		}
		return super.onGenericMotionEvent(event);
!!!12135820.java!!!	getCurrentState() : String
		if (mWFDSinkStateMachine == null) {
			return null;
		}
		return mWFDSinkStateMachine.getState().getName();
!!!12136204.java!!!	sessionTimeout(in timeout : int) : void
		AlertDialog.Builder builder = null;
		AlertDialog alertDialog = null;

		builder = new AlertDialog.Builder(this);
		builder.setTitle("Server Session timeout "+timeout);
		builder.setPositiveButton("Stop", new OnClickListener() {
			@Override
			public void onClick(DialogInterface arg0, int mode) {
				mWFDSinkService.teardownClient(WFDSinkService.TEAR_DOWN_SINK_TRIGGER);
			}
		});
		builder.setNegativeButton("Wait", new OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
				//DO nothing
			}
		});

		builder.setCancelable(false);
		alertDialog = builder.show();
