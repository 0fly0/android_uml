class Channels
!!!781467.java!!!	newInputStream(inout channel : ReadableByteChannel) : InputStream
        return new ChannelInputStream(channel);
!!!781595.java!!!	newOutputStream(inout channel : WritableByteChannel) : OutputStream
        return new ChannelOutputStream(channel);
!!!781723.java!!!	newChannel(inout inputStream : InputStream) : ReadableByteChannel
        return new InputStreamChannel(inputStream);
!!!781851.java!!!	newChannel(inout outputStream : OutputStream) : WritableByteChannel
        return new OutputStreamChannel(outputStream);
!!!781979.java!!!	newReader(inout channel : ReadableByteChannel, inout decoder : CharsetDecoder, in minBufferCapacity : int) : Reader
        /*
         * This method doesn't honor minBufferCapacity. Ignoring that parameter
         * saves us from having to add a hidden constructor to InputStreamReader.
         */
        return new InputStreamReader(new ChannelInputStream(channel), decoder);
!!!782107.java!!!	newReader(inout channel : ReadableByteChannel, inout charsetName : String) : Reader
        if (charsetName == null) {
            throw new NullPointerException("charsetName == null");
        }
        return newReader(channel, Charset.forName(charsetName).newDecoder(), -1);
!!!782235.java!!!	newWriter(inout channel : WritableByteChannel, inout encoder : CharsetEncoder, in minBufferCapacity : int) : Writer
        /*
         * This method doesn't honor minBufferCapacity. Ignoring that parameter
         * saves us from having to add a hidden constructor to OutputStreamWriter.
         */
        return new OutputStreamWriter(new ChannelOutputStream(channel), encoder);
!!!782363.java!!!	newWriter(inout channel : WritableByteChannel, inout charsetName : String) : Writer
        if (charsetName == null) {
            throw new NullPointerException("charsetName == null");
        }
        return newWriter(channel, Charset.forName(charsetName).newEncoder(), -1);
!!!783643.java!!!	checkBlocking(inout channel : Channel) : void
        if (channel instanceof SelectableChannel && !((SelectableChannel) channel).isBlocking()) {
            throw new IllegalBlockingModeException();
        }
