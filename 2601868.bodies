class SourceControl
!!!10981132.cpp!!!	SourceControl()
    sp<android::IServiceManager> smgr = android::defaultServiceManager();
    source_settings_ = NULL;
    av_settings_ = NULL;
    if (smgr != NULL) {
        // Source
        sp<IBinder> service = smgr->getService(ISourceSettings::kServiceName);
        if (service != NULL) {
            source_settings_ = android::interface_cast<ISourceSettings>(service);
        } else {
            ALOGE("Failed to get ISourceSettings service");
            return;
        }
        // IAVSettings
        service = smgr->getService(IAVSettings::kServiceName);
        if (service != NULL) {
            av_settings_ = android::interface_cast<IAVSettings>(service);
        } else {
            ALOGE("Failed to get IAVSettings service");
            return;
        }
    }
!!!10981260.cpp!!!	~SourceControl()
    source_list_.clear();
    source_settings_ = NULL;
    av_settings_ = NULL;
!!!10981388.cpp!!!	getSupportedSources(inout sources : Vector<SourceAttr>) : status_t
    if (sources == NULL) {
        return android::UNKNOWN_ERROR;
    }

    sources->clear();
    for (unsigned int i = 0; i < sourceList().size(); i++) {
        sources->add(sourceList().valueAt(i));
    }
    ALOGD("getSupportedSources, totally %d", sources->size());
    return android::OK;
!!!10981516.cpp!!!	getSourceCount(in type : String8) : int32_t
    int32_t count = 0;
    for (unsigned int i = 0; i < sourceList().size(); i++) {
        SourceAttr src_attr = sourceList().valueAt(i);
        if (src_attr.type == type) {
            count ++;
        }
    }
    ALOGD("getSourceCount, return %d for type %s", count, type.string());
    return count;
!!!10981644.cpp!!!	getSourceAttr(in source_id : int32_t, inout source_attr : SourceAttr) : status_t
    if (sourceList().indexOfKey(source_id) < 0) {
        ALOGW("No supported source found for id: %d", source_id);
        return android::BAD_VALUE;
    }
    source_attr->SetTo(sourceList().valueFor(source_id));
    return android::OK;
!!!10981772.cpp!!!	getSourceByUri(in uri : String8, inout source_id : int32_t) : status_t
    if (uri.isEmpty()) {
        return android::BAD_VALUE;
    }
    ALOGD("getSourceByUri, uri: %s", uri.string());
    String8 checking_uri;
    if (strstr(uri.string(), kAudioDecoderSourcePrefix)) {
        checking_uri = parseAudioUri(uri, kAudioDecoderSourcePrefix);
    } else if (strstr(uri.string(), kAudioRenderSourcePrefix)) {
        checking_uri = parseAudioUri(uri, kAudioRenderSourcePrefix);
    } else {
        checking_uri = uri;
    }
    for (unsigned int i = 0; i < sourceList().size(); i++) {
        SourceAttr src_attr = sourceList().valueAt(i);
        if (src_attr.uri == checking_uri) {
            *source_id = sourceList().keyAt(i);
            ALOGD("Source id %d found for uri %s",
                    *source_id, checking_uri.string());
            return android::OK;
        }
    }
    return android::BAD_VALUE;
!!!10981900.cpp!!!	registerObserver(in observer : sp<ISourceSettingsObserver>) : status_t
    CHECK(source_settings_ != NULL);

    return source_settings_->registerObserver(observer);
!!!10982028.cpp!!!	removeObserver(in obs : sp<ISourceSettingsObserver>) : void
    CHECK(source_settings_ != NULL);

    source_settings_->removeObserver(obs);
!!!10982156.cpp!!!	setSource(in source_id : int32_t, in video_channel : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    ALOGD("setSource, source_id %d video_channel %d", source_id, video_channel);
    int32_t id = -1;
    if (android::OK == getSource(video_channel, &id, false)) {
        if (id == source_id) {
            ALOGD("setSource, already binded, ingore");
            return android::OK;
        }
        // If bind with other sources, unbind it
        ALOGD("setSource, unbind video channel %d from source id %d", video_channel, id);
        exitSource(id);
    }

    Parcel request;
    request.writeInt32(source_id);
    request.writeInt32(video_channel);

    return source_settings_->setParameter(SET_SOURCE, request);
!!!10982284.cpp!!!	getSource(in video_channel : int32_t, inout source_id : int32_t, in bind_default : bool = true) : status_t
    CHECK(source_settings_ != NULL);

    ALOGD("getSource, video_channel %d", video_channel);
    Parcel request, reply;
    request.writeInt32(GET_SOURCE);
    request.writeInt32(video_channel);
    status_t status = source_settings_->invoke(request, &reply);
    ALOGD("getSource, status %d bind_default %d", status, bind_default);
    if (status == android::OK) {
        *source_id = reply.readInt32();
    } else if (status == android::BAD_VALUE && bind_default) {
        // Default bind to file source
        char file_source_uri[MAX_SOURCE_URI_LEN];
        snprintf(file_source_uri, MAX_SOURCE_URI_LEN, "%s%d",
                kFileSourcePrefix, video_channel);
        int32_t file_source_id = -1;
        if (android::OK != getSourceByUri(
                String8(file_source_uri), &file_source_id)) {
            ALOGE("getSource, get file source id fail");
            return android::BAD_VALUE;
        }
        ALOGD("getSource, bind video channel %d to file source %d",
                video_channel, file_source_id);
        setSource(file_source_id, video_channel);
        *source_id = file_source_id;
        return android::OK;
    }

    return status;
!!!10982412.cpp!!!	exitSource(in source_id : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    ALOGD("exitSource");
    Parcel request;
    request.writeInt32(source_id);
    return source_settings_->setParameter(EXIT_SOURCE, request);
!!!10982540.cpp!!!	notifyVideoRectangle(in source_id : int32_t, in src_x : int32_t, in src_y : int32_t, in src_width : int32_t, in src_height : int32_t, in dst_x : int32_t, in dst_y : int32_t, in dst_width : int32_t, in dst_height : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request;
    request.writeInt32(source_id);
    request.writeInt32(src_x);
    request.writeInt32(src_y);
    request.writeInt32(src_width);
    request.writeInt32(src_height);
    request.writeInt32(dst_x);
    request.writeInt32(dst_y);
    request.writeInt32(dst_width);
    request.writeInt32(dst_height);

    return source_settings_->setParameter(NOTIFY_VIDEO_REC, request);
!!!10982668.cpp!!!	notifyDisplayMode(in source_id : int32_t, in mode : DisplayMode) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request;
    request.writeInt32(source_id);
    mode.WriteToParcel(&request);
    return source_settings_->setParameter(NOTIFY_DISPLAY_MODE, request);
!!!10982796.cpp!!!	notifySourceAudioInfo(in source_id : int32_t, in audio_format : int32_t, in sample_rate : int32_t, in channels : int32_t, in lfe_channels : int32_t, in dual_mono : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request;
    request.writeInt32(source_id);
    request.writeInt32(audio_format);
    request.writeInt32(sample_rate);
    request.writeInt32(channels);
    request.writeInt32(lfe_channels);
    request.writeInt32(dual_mono);
    return source_settings_->setParameter(NOTIFY_SOURCE_AUDIO_INFO, request);
!!!10982924.cpp!!!	notifySourceAudioInfo(in source_id : int32_t, in audio_info : AudioStreamInfo) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request;
    request.writeInt32(source_id);
    audio_info.WriteToParcel(&request);
    return source_settings_->setParameter(NOTIFY_SOURCE_AUDIO_INFO, request);
!!!10983052.cpp!!!	notifySourceVideoInfo(in source_id : int32_t, in width : int32_t, in height : int32_t, in stereo_mode : int32_t, in is_interlaced : bool, in frame_rate : int32_t, in aspect_width : int32_t, in aspect_height : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request;
    request.writeInt32(source_id);
    request.writeInt32(width);
    request.writeInt32(height);
    request.writeInt32(stereo_mode);
    request.writeInt32(is_interlaced);
    request.writeInt32(frame_rate);
    request.writeInt32(aspect_width);
    request.writeInt32(aspect_height);
    return source_settings_->setParameter(NOTIFY_SOURCE_VIDEO_INFO, request);
!!!10983180.cpp!!!	notifySourceInputLock(in source_id : int32_t, in enabled : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request;
    request.writeInt32(source_id);
    request.writeInt32(enabled);
    return source_settings_->setParameter(NOTIFY_SOURCE_INPUT_LOCK, request);
!!!10983308.cpp!!!	applyPQ(in source_id : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request;
    request.writeInt32(source_id);
    return source_settings_->setParameter(APPLY_PQ, request);
!!!10983436.cpp!!!	applyAQ(in source_id : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request;
    request.writeInt32(source_id);
    return source_settings_->setParameter(APPLY_AQ, request);
!!!10983564.cpp!!!	setSubSource(in source_id : int32_t, in sub_source : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request;
    request.writeInt32(source_id);
    request.writeInt32(sub_source);
    return source_settings_->setParameter(SET_SUB_SOURCE, request);
!!!10983692.cpp!!!	getSubSource(in source_id : int32_t, inout sub_source : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request, reply;
    request.writeInt32(GET_SUB_SOURCE);
    request.writeInt32(source_id);
    status_t status = source_settings_->invoke(request, &reply);
    if (status == android::OK) {
        *sub_source = reply.readInt32();
    }
    return status;
!!!10983820.cpp!!!	getVideoProperty(in source_id : int32_t, in vProp : int32_t, inout value : int32_t) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX, source_id, kVideoProperty, vProp);
    AVSettingValue avValue;
    status_t status = av_settings_->ReadSetting(key.string(), &avValue);
    if (android::OK == status) {
        CHECK(avValue.isInt());
        *value = avValue.getInt();
    } else {
        ALOGE("getVideoProperty, read setting fail");
    }
    return status;
!!!10983948.cpp!!!	setVideoProperty(in source_id : int32_t, in vProp : int32_t, in value : int32_t) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX, source_id, kVideoProperty, vProp);
    AVSettingValue avValue;
    avValue.setInt(value);
    status_t status = av_settings_->WriteSetting(key.string(), avValue, true, true);
    if (android::OK != status) {
        ALOGE("setVideoProperty, write setting fail");
    }
    return status;
!!!10984076.cpp!!!	applyVideoProperty(in source_id : int32_t, in vProp : int32_t, in value : int32_t) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX, source_id, kVideoProperty, vProp);
    AVSettingValue avValue;
    avValue.setInt(value);
    status_t status = av_settings_->WriteSetting(key.string(), avValue, true, false);
    if (android::OK != status) {
        ALOGE("applyVideoProperty, write setting fail");
    }
    return status;
!!!10984204.cpp!!!	getAudioProperty(in source_id : int32_t, in aProp : int32_t, inout value : int32_t) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX, source_id, kAudioProperty, aProp);
    AVSettingValue avValue;
    status_t status = av_settings_->ReadSetting(key.string(), &avValue);
    if (android::OK == status) {
        CHECK(avValue.isInt());
        *value = avValue.getInt();
    } else {
        ALOGE("getAudioProperty, read setting fail");
    }
    return status;
!!!10984332.cpp!!!	setAudioProperty(in source_id : int32_t, in aProp : int32_t, in value : int32_t) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX, source_id, kAudioProperty, aProp);
    AVSettingValue avValue;
    avValue.setInt(value);
    status_t status = av_settings_->WriteSetting(key.string(), avValue, true, true);
    if (android::OK != status) {
        ALOGE("setAudioProperty, write setting fail");
    }
    return status;
!!!10984460.cpp!!!	applyAudioProperty(in source_id : int32_t, in aProp : int32_t, in value : int32_t) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX, source_id, kAudioProperty, aProp);
    AVSettingValue avValue;
    avValue.setInt(value);
    status_t status = av_settings_->WriteSetting(key.string(), avValue, true, false);
    if (android::OK != status) {
        ALOGE("applyAudioProperty, write setting fail");
    }
    return status;
!!!10984588.cpp!!!	getFactoryProperty(in source_id : int32_t, in fProp : int32_t, inout value : int32_t) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX, source_id, kFactoryProperty, fProp);
    AVSettingValue avValue;
    status_t status = av_settings_->ReadSetting(key.string(), &avValue);
    if (android::OK == status) {
        CHECK(avValue.isInt());
        *value = avValue.getInt();
    } else {
        ALOGE("getFactoryProperty, read setting fail");
    }
    return status;
!!!10984716.cpp!!!	setFactoryProperty(in source_id : int32_t, in fProp : int32_t, in value : int32_t) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX, source_id, kFactoryProperty, fProp);
    AVSettingValue avValue;
    avValue.setInt(value);
    status_t status = av_settings_->WriteSetting(key.string(), avValue, true, true);
    if (android::OK != status) {
        ALOGE("setFactoryProperty, write setting fail");
    }
    return status;
!!!10984844.cpp!!!	applyFactoryProperty(in source_id : int32_t, in fProp : int32_t, in value : int32_t) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX, source_id, kFactoryProperty, fProp);
    AVSettingValue avValue;
    avValue.setInt(value);
    status_t status = av_settings_->WriteSetting(key.string(), avValue, true, false);
    if (android::OK != status) {
        ALOGE("applyFactoryProperty, write setting fail");
    }
    return status;
!!!10984972.cpp!!!	getGenericProperty(in source_id : int32_t, in gProp : int32_t, inout value : int32_t) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX, source_id, kGenericProperty, gProp);
    AVSettingValue avValue;
    status_t status = av_settings_->ReadSetting(key.string(), &avValue);
    if (android::OK == status) {
        CHECK(avValue.isInt());
        *value = avValue.getInt();
    } else {
        ALOGE("getGenericProperty, read setting fail");
    }
    return status;
!!!10985100.cpp!!!	setGenericProperty(in source_id : int32_t, in gProp : int32_t, in value : int32_t) : status_t
    CHECK(av_settings_ != NULL);
    String8 key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX, source_id, kGenericProperty, gProp);
    AVSettingValue avValue;
    avValue.setInt(value);
    status_t status = av_settings_->WriteSetting(key.string(), avValue, true, true);
    if (android::OK != status) {
        ALOGE("setGenericProperty, write setting fail");
    }
    return status;
!!!10985228.cpp!!!	getDRCMode(in source_id : int32_t, inout phy_mode : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request, reply;
    request.writeInt32(GET_DRC_MODE);
    request.writeInt32(source_id);
    status_t status = source_settings_->invoke(request, &reply);
    if (status == android::OK) {
        *phy_mode = reply.readInt32();
    }
    return status;
!!!10985356.cpp!!!	getSourceGain(in source_id : int32_t, inout phy_gain : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request, reply;
    request.writeInt32(GET_SOURCE_GAIN);
    request.writeInt32(source_id);
    status_t status = source_settings_->invoke(request, &reply);
    if (status == android::OK) {
        *phy_gain = reply.readInt32();
    }
    return status;
!!!10985484.cpp!!!	getChannelMap(in source_id : int32_t, inout phy_chmap : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request, reply;
    request.writeInt32(GET_CHANNEL_MAP);
    request.writeInt32(source_id);
    status_t status = source_settings_->invoke(request, &reply);
    if (status == android::OK) {
        *phy_chmap = reply.readInt32();
    }
    return status;
!!!10985612.cpp!!!	bindVideoSource(in audio_source_id : int32_t, in video_source_id : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request;
    request.writeInt32(audio_source_id);
    request.writeInt32(video_source_id);
    return source_settings_->setParameter(BIND_VIDEO_SOURCE, request);
!!!10985740.cpp!!!	getStereoMode(in source_id : int32_t, inout phy_mode : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request, reply;
    request.writeInt32(GET_STEREO_MODE);
    request.writeInt32(source_id);
    status_t status = source_settings_->invoke(request, &reply);
    if (status == android::OK) {
        *phy_mode = reply.readInt32();
    }
    return status;
!!!10985868.cpp!!!	getDualMode(in source_id : int32_t, inout phy_mode : int32_t) : status_t
    CHECK(source_settings_ != NULL);

    Parcel request, reply;
    request.writeInt32(GET_DUAL_MODE);
    request.writeInt32(source_id);
    status_t status = source_settings_->invoke(request, &reply);
    if (status == android::OK) {
        *phy_mode = reply.readInt32();
    }
    return status;
!!!10985996.cpp!!!	registerObserver(in prefix : char, in observer : sp<IAVSettingObserver>) : status_t
     CHECK(av_settings_ != NULL);

     return av_settings_->RegisterObserver(prefix, observer);
!!!10986124.cpp!!!	removeObserver(in obs : sp<IAVSettingObserver>) : void
    CHECK(av_settings_ != NULL);

    av_settings_->RemoveObserver(obs);
!!!10986252.cpp!!!	sourceList() : KeyedVector<int32_t, SourceAttr>
    if (source_list_.isEmpty()) {
        AVSettingValue value;
        String8 supported_sources_key = AVSettingsHelper::GetFullKey(
                MRVL_AVSETTINGS_SOURCE_PREFIX,
                kDeviceSupportedSources);
        status_t status = av_settings_->ReadSetting(
                supported_sources_key, &value);
        if (android::OK == status) {
            CHECK(value.isStringArray());
            Vector<String8> supported_sources = value.getStringArray();
            SourceAttr source_attr;
            for (uint32_t i = 0; i < supported_sources.size(); i++) {

                if (SourceAttr::FromString(
                        supported_sources.itemAt(i).string(), &source_attr)) {
                    source_list_.add(source_attr.id, source_attr);
                    ALOGD("init sourceList, add %s",
                            source_attr.ToString().string());
                } else {
                    ALOGE("init sourceList, SourceAttr::FromString fail %s",
                            supported_sources.itemAt(i).string());
                }
            }
        } else {
            ALOGE("getSupportedSources, read setting fail");
        }
    }
    return source_list_;
!!!10986380.cpp!!!	parseAudioUri(in uri : String8, in prefix : char) : String8
    ALOGD("parseAudioUri, input: %s", uri.string());
    CHECK(!uri.isEmpty() && prefix != NULL);
    char buf[MAX_SOURCE_URI_LEN], avs_uri[MAX_SOURCE_URI_LEN];
    strcpy(buf, uri.string() + strlen(prefix));
    int32_t rm_audio_channel_id = atoi(buf);
    int32_t audio_channel_base = -1;

    if (rm_audio_channel_id == marvell::AUDIO_SOURCE_NONE_ID) {
        ALOGD("parseAudioUri, none id, output: %s", uri.string());
        return uri;
    }

#ifdef PRODUCT_CATEGORY_GTV
    if (!strcmp(prefix, kAudioDecoderSourcePrefix)) {
        audio_channel_base = berlin::kBerlinResourceAudioDecoder_1;
    } else if (!strcmp(prefix, kAudioRenderSourcePrefix)) {
        audio_channel_base = berlin::kBerlinResourceAudioChannel_1;
    } else {
        ALOGE("parseAudioUri, unknown audio type");
        return String8("");
    }

    ALOGD("parseAudioUri, GTV audio_channel_base %d", audio_channel_base);
#endif

#ifdef PRODUCT_CATEGORY_A3CE
    // TODO: check A3CE enum value
    audio_channel_base = 0;
    ALOGD("parseAudioUri, A3CE audio_channel_base %d", audio_channel_base);
#endif

    CHECK(audio_channel_base != -1);
    int32_t avs_audio_channel_id = rm_audio_channel_id - audio_channel_base;
    ALOGD("parseAudioUri, RM audio channel %d, AVS audio channel %d",
            rm_audio_channel_id, avs_audio_channel_id);
    snprintf(avs_uri, MAX_SOURCE_URI_LEN, "%s%d",
            prefix, avs_audio_channel_id);
    ALOGD("parseAudioUri, output: %s", avs_uri);
    return String8(avs_uri);
