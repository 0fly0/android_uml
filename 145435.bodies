class PushbackInputStream
!!!255387.java!!!	PushbackInputStream(inout in : InputStream)
        super(in);
        buf = (in == null) ? null : new byte[1];
        pos = 1;
!!!255515.java!!!	PushbackInputStream(inout in : InputStream, in size : int)
        super(in);
        if (size <= 0) {
            throw new IllegalArgumentException("size <= 0");
        }
        buf = (in == null) ? null : new byte[size];
        pos = size;
!!!255643.java!!!	available() : int
        if (buf == null) {
            throw new IOException();
        }
        return buf.length - pos + in.available();
!!!255771.java!!!	close() : void
        if (in != null) {
            in.close();
            in = null;
            buf = null;
        }
!!!255899.java!!!	markSupported() : boolean
        return false;
!!!256027.java!!!	read() : int
        if (buf == null) {
            throw new IOException();
        }
        // Is there a pushback byte available?
        if (pos < buf.length) {
            return (buf[pos++] & 0xFF);
        }
        // Assume read() in the InputStream will return low-order byte or -1
        // if end of stream.
        return in.read();
!!!256155.java!!!	read(inout buffer : byte, in offset : int, in length : int) : int
        if (buf == null) {
            throw streamClosed();
        }
        Arrays.checkOffsetAndCount(buffer.length, offset, length);
        int copiedBytes = 0, copyLength = 0, newOffset = offset;
        // Are there pushback bytes available?
        if (pos < buf.length) {
            copyLength = (buf.length - pos >= length) ? length : buf.length
                    - pos;
            System.arraycopy(buf, pos, buffer, newOffset, copyLength);
            newOffset += copyLength;
            copiedBytes += copyLength;
            // Use up the bytes in the local buffer
            pos += copyLength;
        }
        // Have we copied enough?
        if (copyLength == length) {
            return length;
        }
        int inCopied = in.read(buffer, newOffset, length - copiedBytes);
        if (inCopied > 0) {
            return inCopied + copiedBytes;
        }
        if (copiedBytes == 0) {
            return inCopied;
        }
        return copiedBytes;
!!!256283.java!!!	streamClosed() : IOException
        throw new IOException("PushbackInputStream is closed");
!!!256411.java!!!	skip(in byteCount : long) : long
        if (in == null) {
            throw streamClosed();
        }
        if (byteCount <= 0) {
            return 0;
        }
        int numSkipped = 0;
        if (pos < buf.length) {
            numSkipped += (byteCount < buf.length - pos) ? byteCount : buf.length - pos;
            pos += numSkipped;
        }
        if (numSkipped < byteCount) {
            numSkipped += in.skip(byteCount - numSkipped);
        }
        return numSkipped;
!!!256539.java!!!	unread(inout buffer : byte) : void
        unread(buffer, 0, buffer.length);
!!!256667.java!!!	unread(inout buffer : byte, in offset : int, in length : int) : void
        if (length > pos) {
            throw new IOException("Pushback buffer full");
        }
        Arrays.checkOffsetAndCount(buffer.length, offset, length);
        if (buf == null) {
            throw streamClosed();
        }

        System.arraycopy(buffer, offset, buf, pos - length, length);
        pos = pos - length;
!!!256795.java!!!	unread(in oneByte : int) : void
        if (buf == null) {
            throw new IOException();
        }
        if (pos == 0) {
            throw new IOException("Pushback buffer full");
        }
        buf[--pos] = (byte) oneByte;
!!!257051.java!!!	reset() : void
        throw new IOException();
