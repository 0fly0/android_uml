class RandomAccessFileTest
!!!2695963.java!!!	setUp() : void
        file = File.createTempFile("RandomAccessFileTest", "tmp");
!!!2696091.java!!!	tearDown() : void
        file.delete();
!!!2696219.java!!!	testSeekTooLarge() : void
        RandomAccessFile raf = new RandomAccessFile(file, "rw");
        try {
            raf.seek(Long.MAX_VALUE);
            fail();
        } catch (IOException expected) {
        }
!!!2696347.java!!!	testSetLengthTooLarge() : void
        RandomAccessFile raf = new RandomAccessFile(file, "rw");
        try {
            raf.setLength(Long.MAX_VALUE);
            fail();
        } catch (IOException expected) {
        }
!!!2696475.java!!!	testSetLength64() : void
        RandomAccessFile raf = new RandomAccessFile(file, "rw");
        raf.setLength(0);
        assertEquals(0, file.length());
        long moreThanFourGig = ((long) Integer.MAX_VALUE) + 1L;
        raf.setLength(moreThanFourGig);
        assertEquals(moreThanFourGig, file.length());
!!!2696603.java!!!	testRandomAccessFileHasCleanupFinalizer() : void
        // TODO: this always succeeds on the host because our default open file limit is 32Ki.
        // Add Libcore.os.getrlimit and use that instead of hard-coding.
        int tooManyOpenFiles = 2000;
        File file = File.createTempFile("RandomAccessFileTest", "tmp");
        for (int i = 0; i < tooManyOpenFiles; i++) {
            createRandomAccessFile(file);
            FinalizationTester.induceFinalization();
        }
!!!2696731.java!!!	createRandomAccessFile(inout file : File) : void
        // TODO: fix our register maps and remove this otherwise unnecessary
        // indirection! (http://b/5412580)
        new RandomAccessFile(file, "rw");
!!!2696859.java!!!	testDirectories() : void
        try {
            new RandomAccessFile(".", "r");
            fail();
        } catch (FileNotFoundException expected) {
        }
        try {
            new RandomAccessFile(".", "rw");
            fail();
        } catch (FileNotFoundException expected) {
        }
