class GtvVideoView
!!!12176268.java!!!	GtvVideoView(inout context : Context)
        super(context);
        initVideoView();
!!!12176396.java!!!	GtvVideoView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, 0);
        initVideoView();
!!!12176524.java!!!	GtvVideoView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);
        initVideoView();
!!!12176652.java!!!	onMeasure(in widthMeasureSpec : int, in heightMeasureSpec : int) : void
        //Log.i("@@@@", "onMeasure");
        int width = getDefaultSize(mVideoWidth, widthMeasureSpec);
        int height = getDefaultSize(mVideoHeight, heightMeasureSpec);
        if (SHOULD_SCALE_VIDEO && mVideoWidth > 0 && mVideoHeight > 0) {
            if (mVideoWidth * height  > width * mVideoHeight) {
                //Log.i("@@@", "image too tall, correcting");
                height = width * mVideoHeight / mVideoWidth;
            } else if (mVideoWidth * height  < width * mVideoHeight) {
                //Log.i("@@@", "image too wide, correcting");
                width = height * mVideoWidth / mVideoHeight;
            } else {
                //Log.i("@@@", "aspect ratio is correct: " +
                        //width+"/"+height+"="+
                        //mVideoWidth+"/"+mVideoHeight);
            }
        }
        //Log.i("@@@@@@@@@@", "setting size: " + width + 'x' + height);
        setMeasuredDimension(width, height);
!!!12176780.java!!!	resolveAdjustedSize(in desiredSize : int, in measureSpec : int) : int
        int result = desiredSize;
        int specMode = MeasureSpec.getMode(measureSpec);
        int specSize =  MeasureSpec.getSize(measureSpec);

        switch (specMode) {
            case MeasureSpec.UNSPECIFIED:
                /* Parent says we can be as big as we want. Just don't be larger
                 * than max size imposed on ourselves.
                 */
                result = desiredSize;
                break;

            case MeasureSpec.AT_MOST:
                /* Parent says we can be as big as we want, up to specSize.
                 * Don't be larger than specSize, and don't be larger than
                 * the max size imposed on ourselves.
                 */
                result = Math.min(desiredSize, specSize);
                break;

            case MeasureSpec.EXACTLY:
                // No choice. Do what we are told.
                result = specSize;
                break;
        }
        return result;
!!!12176908.java!!!	initVideoView() : void
        mVideoWidth = 0;
        mVideoHeight = 0;
        getHolder().addCallback(mSurafecHolderCallback);
        getHolder().setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
        if (!SHOULD_SCALE_VIDEO) {
            getHolder().setSizeFromLayout();
        }
        setFocusable(true);
        setFocusableInTouchMode(true);
        requestFocus();
        mCurrentState = STATE_IDLE;
        mTargetState  = STATE_IDLE;
        // Initialize to full volume.
        mVolume = MAX_VOLUME;
!!!12177036.java!!!	setVideoPath(in path : String) : void
        setVideoURI(Uri.parse(path));
!!!12177164.java!!!	setVideoURI(inout uri : Uri) : void
        setVideoURI(uri, null);
!!!12177292.java!!!	setMediaSource(inout mediaSource : MediaSource) : void
        mMediaSource = mediaSource;
        mUri = null;
        mHeaders = null;
        mSeekWhenPrepared = 0;
        openVideo();
        requestLayout();
        invalidate();
!!!12177420.java!!!	setVideoURI(inout uri : Uri, inout headers : Map<String, String>) : void
        mUri = uri;
        mHeaders = headers;
        mMediaSource = null;
        mSeekWhenPrepared = 0;
        openVideo();
        requestLayout();
        invalidate();
!!!12177548.java!!!	setVolume(in volume : float) : void
        if (volume < MIN_VOLUME || volume > MAX_VOLUME) {
            throw new IllegalArgumentException("Invalid volume value. " + volume);
        }
        mVolume = volume;
        if (isPlaying()) {
            mMediaPlayer.setVolume(mVolume, mVolume);
        }
!!!12177676.java!!!	stopPlayback() : void
        if (mMediaPlayer != null) {
            mMediaPlayer.stop();
            mMediaPlayer.release();
            mMediaPlayer = null;
            mCurrentState = STATE_IDLE;
            mTargetState  = STATE_IDLE;
        }
!!!12177804.java!!!	openVideo() : void
        if ((mMediaSource == null && mUri == null) || mSurfaceHolder == null) {
            // not ready for playback just yet, will try again later
            return;
        }
        // Tell the music playback service to pause
        // TODO: these constants need to be published somewhere in the framework.
        Intent i = new Intent("com.android.music.musicservicecommand");
        i.putExtra("command", "pause");
        mContext.sendBroadcast(i);

        // we shouldn't clear the target state, because somebody might have
        // called start() previously
        release(false);
        try {
            mMediaPlayer = new GtvMediaPlayer();
            mMediaPlayer.setOnPreparedListener(mPreparedListener);
            mMediaPlayer.setOnInfoListener(mInfoListener);
            mMediaPlayer.setOnSeekCompleteListener(mSeekCompleteListener);
            mMediaPlayer.setOnVideoSizeChangedListener(mSizeChangedListener);
            mDuration = -1;
            mMediaPlayer.setOnCompletionListener(mCompletionListener);
            mMediaPlayer.setOnErrorListener(mErrorListener);
            mMediaPlayer.setOnBufferingUpdateListener(mBufferingUpdateListener);
            mMediaPlayer.setOnTimedTextListener(mTimedTextListener);

            mCurrentBufferPercentage = 0;
            if (mMediaSource != null) {
                mMediaPlayer.setDataSource(mMediaSource);
            } else {
                mMediaPlayer.setDataSource(mContext, mUri, mHeaders);
            }
            mMediaPlayer.setDisplay(mSurfaceHolder);
            mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
            mMediaPlayer.setScreenOnWhilePlaying(true);
            mMediaPlayer.prepareAsync();
            // we don't set the target state here either, but preserve the
            // target state that was there before.
            mCurrentState = STATE_PREPARING;
            attachMediaController();
        } catch (IOException ex) {
            Log.w(TAG, "Unable to open content: " + mUri, ex);
            mCurrentState = STATE_ERROR;
            mTargetState = STATE_ERROR;
            mErrorListener.onError(mMediaPlayer, MediaPlayer.MEDIA_ERROR_UNKNOWN, 0);
            return;
        } catch (IllegalArgumentException ex) {
            Log.w(TAG, "Unable to open content: " + mUri, ex);
            mCurrentState = STATE_ERROR;
            mTargetState = STATE_ERROR;
            mErrorListener.onError(mMediaPlayer, MediaPlayer.MEDIA_ERROR_UNKNOWN, 0);
            return;
        }
!!!12177932.java!!!	setMediaController(inout controller : GtvMediaController) : void
        if (mMediaController != null) {
            mMediaController.hide();
        }
        mMediaController = controller;
        attachMediaController();
!!!12178060.java!!!	attachMediaController() : void
        if (mMediaPlayer != null && mMediaController != null) {
            mMediaController.setMediaPlayer(this);
            View anchorView = this.getParent() instanceof View ?
                    (View) this.getParent() : this;
            mMediaController.setAnchorView(anchorView);
            mMediaController.setEnabled(isInPlaybackState());
        }
!!!12178188.java!!!	setOnPreparedListener(inout l : OnPreparedListener) : void
        mOnPreparedListener = l;
!!!12178316.java!!!	setOnInfoListener(inout l : OnInfoListener) : void
        mOnInfoListener = l;
!!!12178444.java!!!	setOnSeekCompleteListener(inout l : OnSeekCompleteListener) : void
        mOnSeekCompleteListener = l;
!!!12178572.java!!!	setOnVideoSizeChangedListener(inout l : OnVideoSizeChangedListener) : void
        mOnVideoSizeChangedListener = l;
!!!12178700.java!!!	setOnBufferingUpdateListener(inout l : OnBufferingUpdateListener) : void
        mOnBufferingUpdateListener = l;
!!!12178828.java!!!	setOnCompletionListener(inout l : OnCompletionListener) : void
        mOnCompletionListener = l;
!!!12178956.java!!!	setOnErrorListener(inout l : OnErrorListener) : void
        mOnErrorListener = l;
!!!12179084.java!!!	setOnTimedTextListener(inout l : OnTimedTextListener) : void
        mOnTimedTextListener = l;
!!!12179212.java!!!	release(inout cleartargetstate : boolean) : void
        if (mMediaPlayer != null) {
            mMediaPlayer.reset();
            mMediaPlayer.release();
            mMediaPlayer = null;
            mCurrentState = STATE_IDLE;
            if (cleartargetstate) {
                mTargetState  = STATE_IDLE;
            }
        }
!!!12179340.java!!!	onTouchEvent(inout ev : MotionEvent) : boolean
        if (isInPlaybackState() && mMediaController != null) {
            toggleMediaControlsVisiblity();
        }
        return false;
!!!12179468.java!!!	onTrackballEvent(inout ev : MotionEvent) : boolean
        if (isInPlaybackState() && mMediaController != null) {
            toggleMediaControlsVisiblity();
        }
        return false;
!!!12179596.java!!!	onGenericMotionEvent(inout event : MotionEvent) : boolean
        if (event.getAction() == MotionEvent.ACTION_HOVER_ENTER ||
            event.getAction() == MotionEvent.ACTION_HOVER_MOVE) {
            if (isInPlaybackState() && mMediaController != null) {
                if (!mMediaController.isShowing()) {
                  toggleMediaControlsVisiblity();
                }
            }
        }
        return super.onGenericMotionEvent(event);
!!!12179724.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        boolean isKeyCodeSupported = isMediaKeyCode(keyCode) || !event.isSystem();
        if (isInPlaybackState() && isKeyCodeSupported && mMediaController != null) {
            if (keyCode == KeyEvent.KEYCODE_HEADSETHOOK ||
                    keyCode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE) {
                if (mMediaPlayer.isPlaying()) {
                    pause();
                    mMediaController.show();
                } else {
                    start();
                    mMediaController.hide();
                }
                return true;
            } else if (keyCode == KeyEvent.KEYCODE_MEDIA_PLAY) {
                if (!mMediaPlayer.isPlaying()) {
                    start();
                    mMediaController.hide();
                }
                return true;
            } else if (keyCode == KeyEvent.KEYCODE_MEDIA_STOP
                    || keyCode == KeyEvent.KEYCODE_MEDIA_PAUSE) {
                if (mMediaPlayer.isPlaying()) {
                    pause();
                    mMediaController.show();
                }
                return true;
            } else {
                toggleMediaControlsVisiblity();
            }
        }

        return super.onKeyDown(keyCode, event);
!!!12179852.java!!!	isMediaKeyCode(in keyCode : int) : boolean
        switch (keyCode) {
            case KeyEvent.KEYCODE_HEADSETHOOK:
            case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:
            case KeyEvent.KEYCODE_MEDIA_STOP:
            case KeyEvent.KEYCODE_MEDIA_NEXT:
            case KeyEvent.KEYCODE_MEDIA_PREVIOUS:
            case KeyEvent.KEYCODE_MEDIA_REWIND:
            case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:
            case KeyEvent.KEYCODE_CHANNEL_UP:
            case KeyEvent.KEYCODE_CHANNEL_DOWN:
            case KeyEvent.KEYCODE_MEDIA_PLAY:
            case KeyEvent.KEYCODE_MEDIA_PAUSE:
            case KeyEvent.KEYCODE_MEDIA_RECORD:
                return true;
        }
        return false;
!!!12179980.java!!!	toggleMediaControlsVisiblity() : void
        if (mMediaController.isShowing()) {
            mMediaController.hide();
        } else {
            mMediaController.show();
        }
!!!12180108.java!!!	start() : void
        if (isInPlaybackState()) {
            mMediaPlayer.start();
            mMediaPlayer.setVolume(mVolume, mVolume);
            mCurrentState = STATE_PLAYING;
        }
        mTargetState = STATE_PLAYING;
!!!12180236.java!!!	pause() : void
        if (isInPlaybackState()) {
            if (mMediaPlayer.isPlaying()) {
                mMediaPlayer.pause();
                mCurrentState = STATE_PAUSED;
            }
        }
        mTargetState = STATE_PAUSED;
!!!12180364.java!!!	suspend() : void
        release(false);
!!!12180492.java!!!	resume() : void
        openVideo();
!!!12180620.java!!!	getDuration() : int
        if (isInPlaybackState()) {
            if (mDuration > 0) {
                return mDuration;
            }
            mDuration = mMediaPlayer.getDuration();
            return mDuration;
        }
        mDuration = -1;
        return mDuration;
!!!12180748.java!!!	getCurrentPosition() : int
        if (isInPlaybackState()) {
            return mMediaPlayer.getCurrentPosition();
        }
        return 0;
!!!12180876.java!!!	seekTo(in msec : int) : void
        if (isInPlaybackState()) {
            mMediaPlayer.seekTo(msec);
            mSeekWhenPrepared = 0;
        } else {
            mSeekWhenPrepared = msec;
        }
!!!12181004.java!!!	isPlaying() : boolean
        return isInPlaybackState() && mMediaPlayer.isPlaying();
!!!12181132.java!!!	getBufferPercentage() : int
        if (mMediaPlayer != null) {
            return mCurrentBufferPercentage;
        }
        return 0;
!!!12181260.java!!!	isInPlaybackState() : boolean
        return (mMediaPlayer != null &&
                mCurrentState != STATE_ERROR &&
                mCurrentState != STATE_IDLE &&
                mCurrentState != STATE_PREPARING);
!!!12181388.java!!!	canPause() : boolean
        return mCanPause;
!!!12181516.java!!!	canSeekBackward() : boolean
        return mCanSeekBack;
!!!12181644.java!!!	canSeekForward() : boolean
        return mCanSeekForward;
!!!12181772.java!!!	getTrackInfo() : TrackInfo
        if (mMediaPlayer != null) {
            mLatestTrackInfo = mMediaPlayer.getTrackInfo();
        } else {
            mLatestTrackInfo = null;
        }
        return mLatestTrackInfo;
!!!12181900.java!!!	selectTrack(in index : int) : void
        if (mMediaPlayer != null && mLatestTrackInfo != null && index <= mLatestTrackInfo.length) {
            if (index < 0) {
                // Turn off a subtitle track.
                // TODO(youngsang): Need to disable the current subtitle track. There is no way to
                // know which track is activated.
                mTimedTextListener.onTimedText(mMediaPlayer, null);
                mSubtitleEnabled = false;
            } else {
                if (mLatestTrackInfo[index].getTrackType() ==
                    MediaPlayer.TrackInfo.MEDIA_TRACK_TYPE_TIMEDTEXT) {
                    mSubtitleEnabled = true;
                }
                mMediaPlayer.selectTrack(index);
            }
        }
