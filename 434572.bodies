class Region
!!!1551756.cpp!!!	Region()
    mStorage.add(Rect(0,0));
!!!1551884.cpp!!!	Region(in rhs : Region)
#if VALIDATE_REGIONS
    validate(rhs, "rhs copy-ctor");
#endif
!!!1552012.cpp!!!	Region(in rhs : Rect)
    mStorage.add(rhs);
!!!1552268.cpp!!!	operator =(in rhs : Region) : Region
#if VALIDATE_REGIONS
    validate(*this, "this->operator=");
    validate(rhs, "rhs.operator=");
#endif
    mStorage = rhs.mStorage;
    return *this;
!!!1552908.cpp!!!	makeBoundsSelf() : Region
    if (mStorage.size() >= 2) {
        const Rect bounds(getBounds());
        mStorage.clear();
        mStorage.add(bounds);
    }
    return *this;
!!!1553036.cpp!!!	clear() : void
    mStorage.clear();
    mStorage.add(Rect(0,0));
!!!1553164.cpp!!!	set(in r : Rect) : void
    mStorage.clear();
    mStorage.add(r);
!!!1553292.cpp!!!	set(in w : uint32_t, in h : uint32_t) : void
    mStorage.clear();
    mStorage.add(Rect(w,h));
!!!1553420.cpp!!!	orSelf(in r : Rect) : Region
    return operationSelf(r, op_or);
!!!1553548.cpp!!!	xorSelf(in r : Rect) : Region
    return operationSelf(r, op_xor);
!!!1553676.cpp!!!	andSelf(in r : Rect) : Region
    return operationSelf(r, op_and);
!!!1553804.cpp!!!	subtractSelf(in r : Rect) : Region
    return operationSelf(r, op_nand);
!!!1553932.cpp!!!	orSelf(in rhs : Region) : Region
    return operationSelf(rhs, op_or);
!!!1554060.cpp!!!	xorSelf(in rhs : Region) : Region
    return operationSelf(rhs, op_xor);
!!!1554188.cpp!!!	andSelf(in rhs : Region) : Region
    return operationSelf(rhs, op_and);
!!!1554316.cpp!!!	subtractSelf(in rhs : Region) : Region
    return operationSelf(rhs, op_nand);
!!!1554444.cpp!!!	merge(in rhs : Rect) : Region
    return operation(rhs, op_or);
!!!1554572.cpp!!!	mergeExclusive(in rhs : Rect) : Region
    return operation(rhs, op_xor);
!!!1554700.cpp!!!	intersect(in rhs : Rect) : Region
    return operation(rhs, op_and);
!!!1554828.cpp!!!	subtract(in rhs : Rect) : Region
    return operation(rhs, op_nand);
!!!1554956.cpp!!!	merge(in rhs : Region) : Region
    return operation(rhs, op_or);
!!!1555084.cpp!!!	mergeExclusive(in rhs : Region) : Region
    return operation(rhs, op_xor);
!!!1555212.cpp!!!	intersect(in rhs : Region) : Region
    return operation(rhs, op_and);
!!!1555340.cpp!!!	subtract(in rhs : Region) : Region
    return operation(rhs, op_nand);
!!!1555468.cpp!!!	translateSelf(in x : int, in y : int) : Region
    if (x|y) translate(*this, x, y);
    return *this;
!!!1555596.cpp!!!	orSelf(in rhs : Region, in dx : int, in dy : int) : Region
    return operationSelf(rhs, dx, dy, op_or);
!!!1555724.cpp!!!	xorSelf(in rhs : Region, in dx : int, in dy : int) : Region
    return operationSelf(rhs, dx, dy, op_xor);
!!!1555852.cpp!!!	andSelf(in rhs : Region, in dx : int, in dy : int) : Region
    return operationSelf(rhs, dx, dy, op_and);
!!!1555980.cpp!!!	subtractSelf(in rhs : Region, in dx : int, in dy : int) : Region
    return operationSelf(rhs, dx, dy, op_nand);
!!!1556108.cpp!!!	translate(in x : int, in y : int) : Region
    Region result;
    translate(result, *this, x, y);
    return result;
!!!1556236.cpp!!!	merge(in rhs : Region, in dx : int, in dy : int) : Region
    return operation(rhs, dx, dy, op_or);
!!!1556364.cpp!!!	mergeExclusive(in rhs : Region, in dx : int, in dy : int) : Region
    return operation(rhs, dx, dy, op_xor);
!!!1556492.cpp!!!	intersect(in rhs : Region, in dx : int, in dy : int) : Region
    return operation(rhs, dx, dy, op_and);
!!!1556620.cpp!!!	subtract(in rhs : Region, in dx : int, in dy : int) : Region
    return operation(rhs, dx, dy, op_nand);
!!!1556748.cpp!!!	operator |(in rhs : Region) : Region
    return merge(rhs);
!!!1556876.cpp!!!	operator ^(in rhs : Region) : Region
    return mergeExclusive(rhs);
!!!1557004.cpp!!!	operator &(in rhs : Region) : Region
    return intersect(rhs);
!!!1557132.cpp!!!	operator -(in rhs : Region) : Region
    return subtract(rhs);
!!!1557260.cpp!!!	operator +(in pt : Point) : Region
    return translate(pt.x, pt.y);
!!!1557388.cpp!!!	operator |=(in rhs : Region) : Region
    return orSelf(rhs);
!!!1557516.cpp!!!	operator ^=(in rhs : Region) : Region
    return xorSelf(rhs);
!!!1557644.cpp!!!	operator &=(in rhs : Region) : Region
    return andSelf(rhs);
!!!1557772.cpp!!!	operator -=(in rhs : Region) : Region
    return subtractSelf(rhs);
!!!1557900.cpp!!!	operator +=(in pt : Point) : Region
    return translateSelf(pt.x, pt.y);
!!!1558028.cpp!!!	begin() : const_iterator
    return mStorage.array();
!!!1558156.cpp!!!	end() : const_iterator
    size_t numRects = isRect() ? 1 : mStorage.size() - 1;
    return mStorage.array() + numRects;
!!!1558284.cpp!!!	getArray(inout count : size_t) : Rect
    const_iterator const b(begin());
    const_iterator const e(end());
    if (count) *count = e-b;
    return b;
!!!1558412.cpp!!!	getSharedBuffer(inout count : size_t) : SharedBuffer
    // We can get to the SharedBuffer of a Vector<Rect> because Rect has
    // a trivial destructor.
    SharedBuffer const* sb = SharedBuffer::bufferFromData(mStorage.array());
    if (count) {
        size_t numRects = isRect() ? 1 : mStorage.size() - 1;
        count[0] = numRects;
    }
    sb->acquire();
    return sb;
!!!1558540.cpp!!!	addRectUnchecked(in l : int, in t : int, in r : int, in b : int) : void
    Rect rect(l,t,r,b);
    size_t where = mStorage.size() - 1;
    mStorage.insertAt(rect, where, 1);
!!!1558796.cpp!!!	getSize() : size_t
    return mStorage.size() * sizeof(Rect);
!!!1558924.cpp!!!	flatten(inout buffer : void) : status_t
#if VALIDATE_REGIONS
    validate(*this, "Region::flatten");
#endif
    Rect* rects = reinterpret_cast<Rect*>(buffer);
    memcpy(rects, mStorage.array(), mStorage.size() * sizeof(Rect));
    return NO_ERROR;
!!!1559052.cpp!!!	unflatten(in buffer : void, in size : size_t) : status_t
    Region result;
    if (size >= sizeof(Rect)) {
        Rect const* rects = reinterpret_cast<Rect const*>(buffer);
        size_t count = size / sizeof(Rect);
        if (count > 0) {
            result.mStorage.clear();
            ssize_t err = result.mStorage.insertAt(0, count);
            if (err < 0) {
                return status_t(err);
            }
            memcpy(result.mStorage.editArray(), rects, count*sizeof(Rect));
        }
    }
#if VALIDATE_REGIONS
    validate(result, "Region::unflatten");
#endif

    if (!result.validate(result, "Region::unflatten", true)) {
        ALOGE("Region::unflatten() failed, invalid region");
        return BAD_VALUE;
    }
    mStorage = result.mStorage;
    return NO_ERROR;
!!!1559180.cpp!!!	dump(inout out : String8, in what : char, in flags : uint32_t = 0) : void
    (void)flags;
    const_iterator head = begin();
    const_iterator const tail = end();

    size_t SIZE = 256;
    char buffer[SIZE];

    snprintf(buffer, SIZE, "  Region %s (this=%p, count=%d)\n",
            what, this, tail-head);
    out.append(buffer);
    while (head != tail) {
        snprintf(buffer, SIZE, "    [%3d, %3d, %3d, %3d]\n",
                head->left, head->top, head->right, head->bottom);
        out.append(buffer);
        head++;
    }
!!!1559308.cpp!!!	dump(in what : char, in flags : uint32_t = 0) : void
    (void)flags;
    const_iterator head = begin();
    const_iterator const tail = end();
    ALOGD("  Region %s (this=%p, count=%d)\n", what, this, tail-head);
    while (head != tail) {
        ALOGD("    [%3d, %3d, %3d, %3d]\n",
                head->left, head->top, head->right, head->bottom);
        head++;
    }
!!!1559436.cpp!!!	operationSelf(in r : Rect, in op : int) : Region
    Region lhs(*this);
    boolean_operation(op, *this, lhs, r);
    return *this;
!!!1559564.cpp!!!	operationSelf(in rhs : Region, in op : int) : Region
    Region lhs(*this);
    boolean_operation(op, *this, lhs, rhs);
    return *this;
!!!1559692.cpp!!!	operationSelf(in rhs : Region, in dx : int, in dy : int, in op : int) : Region
    Region lhs(*this);
    boolean_operation(op, *this, lhs, rhs, dx, dy);
    return *this;
!!!1559820.cpp!!!	operation(in rhs : Rect, in op : int) : Region
    Region result;
    boolean_operation(op, result, *this, rhs);
    return result;
!!!1559948.cpp!!!	operation(in rhs : Region, in op : int) : Region
    Region result;
    boolean_operation(op, result, *this, rhs);
    return result;
!!!1560076.cpp!!!	operation(in rhs : Region, in dx : int, in dy : int, in op : int) : Region
    Region result;
    boolean_operation(op, result, *this, rhs, dx, dy);
    return result;
!!!1560204.cpp!!!	boolean_operation(in op : int, inout dst : Region, in lhs : Region, in rhs : Region, in dx : int, in dy : int) : void
#if VALIDATE_REGIONS
    validate(lhs, "boolean_operation (before): lhs");
    validate(rhs, "boolean_operation (before): rhs");
    validate(dst, "boolean_operation (before): dst");
#endif

    size_t lhs_count;
    Rect const * const lhs_rects = lhs.getArray(&lhs_count);

    size_t rhs_count;
    Rect const * const rhs_rects = rhs.getArray(&rhs_count);

    region_operator<Rect>::region lhs_region(lhs_rects, lhs_count);
    region_operator<Rect>::region rhs_region(rhs_rects, rhs_count, dx, dy);
    region_operator<Rect> operation(op, lhs_region, rhs_region);
    { // scope for rasterizer (dtor has side effects)
        rasterizer r(dst);
        operation(r);
    }

#if VALIDATE_REGIONS
    validate(lhs, "boolean_operation: lhs");
    validate(rhs, "boolean_operation: rhs");
    validate(dst, "boolean_operation: dst");
#endif

#if VALIDATE_WITH_CORECG
    SkRegion sk_lhs;
    SkRegion sk_rhs;
    SkRegion sk_dst;
    
    for (size_t i=0 ; i<lhs_count ; i++)
        sk_lhs.op(
                lhs_rects[i].left   + dx,
                lhs_rects[i].top    + dy,
                lhs_rects[i].right  + dx,
                lhs_rects[i].bottom + dy,
                SkRegion::kUnion_Op);
    
    for (size_t i=0 ; i<rhs_count ; i++)
        sk_rhs.op(
                rhs_rects[i].left   + dx,
                rhs_rects[i].top    + dy,
                rhs_rects[i].right  + dx,
                rhs_rects[i].bottom + dy,
                SkRegion::kUnion_Op);
 
    const char* name = "---";
    SkRegion::Op sk_op;
    switch (op) {
        case op_or: sk_op = SkRegion::kUnion_Op; name="OR"; break;
        case op_xor: sk_op = SkRegion::kUnion_XOR; name="XOR"; break;
        case op_and: sk_op = SkRegion::kIntersect_Op; name="AND"; break;
        case op_nand: sk_op = SkRegion::kDifference_Op; name="NAND"; break;
    }
    sk_dst.op(sk_lhs, sk_rhs, sk_op);

    if (sk_dst.isEmpty() && dst.isEmpty())
        return;
    
    bool same = true;
    Region::const_iterator head = dst.begin();
    Region::const_iterator const tail = dst.end();
    SkRegion::Iterator it(sk_dst);
    while (!it.done()) {
        if (head != tail) {
            if (
                    head->left != it.rect().fLeft ||     
                    head->top != it.rect().fTop ||     
                    head->right != it.rect().fRight ||     
                    head->bottom != it.rect().fBottom
            ) {
                same = false;
                break;
            }
        } else {
            same = false;
            break;
        }
        head++;
        it.next();
    }
    
    if (head != tail) {
        same = false;
    }
    
    if(!same) {
        ALOGD("---\nregion boolean %s failed", name);
        lhs.dump("lhs");
        rhs.dump("rhs");
        dst.dump("dst");
        ALOGD("should be");
        SkRegion::Iterator it(sk_dst);
        while (!it.done()) {
            ALOGD("    [%3d, %3d, %3d, %3d]",
                it.rect().fLeft,
                it.rect().fTop,
                it.rect().fRight,
                it.rect().fBottom);
            it.next();
        }
    }
#endif
!!!1560332.cpp!!!	boolean_operation(in op : int, inout dst : Region, in lhs : Region, in rhs : Rect, in dx : int, in dy : int) : void
    if (!rhs.isValid()) {
        ALOGE("Region::boolean_operation(op=%d) invalid Rect={%d,%d,%d,%d}",
                op, rhs.left, rhs.top, rhs.right, rhs.bottom);
        return;
    }

#if VALIDATE_WITH_CORECG || VALIDATE_REGIONS
    boolean_operation(op, dst, lhs, Region(rhs), dx, dy);
#else
    size_t lhs_count;
    Rect const * const lhs_rects = lhs.getArray(&lhs_count);

    region_operator<Rect>::region lhs_region(lhs_rects, lhs_count);
    region_operator<Rect>::region rhs_region(&rhs, 1, dx, dy);
    region_operator<Rect> operation(op, lhs_region, rhs_region);
    { // scope for rasterizer (dtor has side effects)
        rasterizer r(dst);
        operation(r);
    }

#endif
!!!1560460.cpp!!!	boolean_operation(in op : int, inout dst : Region, in lhs : Region, in rhs : Region) : void
    boolean_operation(op, dst, lhs, rhs, 0, 0);
!!!1560588.cpp!!!	boolean_operation(in op : int, inout dst : Region, in lhs : Region, in rhs : Rect) : void
    boolean_operation(op, dst, lhs, rhs, 0, 0);
!!!1560716.cpp!!!	translate(inout reg : Region, in dx : int, in dy : int) : void
    if ((dx || dy) && !reg.isEmpty()) {
#if VALIDATE_REGIONS
        validate(reg, "translate (before)");
#endif
        size_t count = reg.mStorage.size();
        Rect* rects = reg.mStorage.editArray();
        while (count) {
            rects->translate(dx, dy);
            rects++;
            count--;
        }
#if VALIDATE_REGIONS
        validate(reg, "translate (after)");
#endif
    }
!!!1560844.cpp!!!	translate(inout dst : Region, in reg : Region, in dx : int, in dy : int) : void
    dst = reg;
    translate(dst, dx, dy);
!!!1560972.cpp!!!	validate(in reg : Region, in name : char, in silent : bool = false) : bool
    bool result = true;
    const_iterator cur = reg.begin();
    const_iterator const tail = reg.end();
    const_iterator prev = cur;
    Rect b(*prev);
    while (cur != tail) {
        if (cur->isValid() == false) {
            ALOGE_IF(!silent, "%s: region contains an invalid Rect", name);
            result = false;
        }
        if (cur->right > region_operator<Rect>::max_value) {
            ALOGE_IF(!silent, "%s: rect->right > max_value", name);
            result = false;
        }
        if (cur->bottom > region_operator<Rect>::max_value) {
            ALOGE_IF(!silent, "%s: rect->right > max_value", name);
            result = false;
        }
        if (prev != cur) {
            b.left   = b.left   < cur->left   ? b.left   : cur->left;
            b.top    = b.top    < cur->top    ? b.top    : cur->top;
            b.right  = b.right  > cur->right  ? b.right  : cur->right;
            b.bottom = b.bottom > cur->bottom ? b.bottom : cur->bottom;
            if ((*prev < *cur) == false) {
                ALOGE_IF(!silent, "%s: region's Rects not sorted", name);
                result = false;
            }
            if (cur->top == prev->top) {
                if (cur->bottom != prev->bottom) {
                    ALOGE_IF(!silent, "%s: invalid span %p", name, cur);
                    result = false;
                } else if (cur->left < prev->right) {
                    ALOGE_IF(!silent,
                            "%s: spans overlap horizontally prev=%p, cur=%p",
                            name, prev, cur);
                    result = false;
                }
            } else if (cur->top < prev->bottom) {
                ALOGE_IF(!silent,
                        "%s: spans overlap vertically prev=%p, cur=%p",
                        name, prev, cur);
                result = false;
            }
            prev = cur;
        }
        cur++;
    }
    if (b != reg.getBounds()) {
        result = false;
        ALOGE_IF(!silent,
                "%s: invalid bounds [%d,%d,%d,%d] vs. [%d,%d,%d,%d]", name,
                b.left, b.top, b.right, b.bottom,
                reg.getBounds().left, reg.getBounds().top, 
                reg.getBounds().right, reg.getBounds().bottom);
    }
    if (reg.mStorage.size() == 2) {
        result = false;
        ALOGE_IF(!silent, "%s: mStorage size is 2, which is never valid", name);
    }
    if (result == false && !silent) {
        reg.dump(name);
        CallStack stack;
        stack.update();
        stack.dump("");
    }
    return result;
