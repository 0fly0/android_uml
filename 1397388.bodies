class WifiP2pGroup
!!!9778188.java!!!	WifiP2pGroup(in supplicantEvent : String)

        String[] tokens = supplicantEvent.split(" ");

        if (tokens.length < 3) {
            throw new IllegalArgumentException("Malformed supplicant event");
        }

        if (tokens[0].startsWith("P2P-GROUP")) {
            mInterface = tokens[1];
            mIsGroupOwner = tokens[2].equals("GO");

            Matcher match = groupStartedPattern.matcher(supplicantEvent);
            if (!match.find()) {
                return;
            }

            mNetworkName = match.group(1);
            //freq and psk are unused right now
            //int freq = Integer.parseInt(match.group(2));
            //String psk = match.group(3);
            mPassphrase = match.group(4);
            mOwner = new WifiP2pDevice(match.group(5));
            if (match.group(6) != null) {
                mNetId = PERSISTENT_NET_ID;
            } else {
                mNetId = TEMPORARY_NET_ID;
            }
        } else if (tokens[0].equals("P2P-INVITATION-RECEIVED")) {
            String sa = null;
            mNetId = PERSISTENT_NET_ID;
            for (String token : tokens) {
                String[] nameValue = token.split("=");
                if (nameValue.length != 2) continue;

                if (nameValue[0].equals("sa")) {
                    sa = nameValue[1];

                    // set source address into the client list.
                    WifiP2pDevice dev = new WifiP2pDevice();
                    dev.deviceAddress = nameValue[1];
                    mClients.add(dev);
                    continue;
                }

                if (nameValue[0].equals("go_dev_addr")) {
                    mOwner = new WifiP2pDevice(nameValue[1]);
                    continue;
                }

                if (nameValue[0].equals("persistent")) {
                    mOwner = new WifiP2pDevice(sa);
                    mNetId = Integer.parseInt(nameValue[1]);
                    continue;
                }
            }
        } else {
            throw new IllegalArgumentException("Malformed supplicant event");
        }
!!!9778316.java!!!	setNetworkName(in networkName : String) : void
        mNetworkName = networkName;
!!!9778444.java!!!	getNetworkName() : String
        return mNetworkName;
!!!9778572.java!!!	setIsGroupOwner(inout isGo : boolean) : void
        mIsGroupOwner = isGo;
!!!9778700.java!!!	isGroupOwner() : boolean
        return mIsGroupOwner;
!!!9778828.java!!!	setOwner(inout device : WifiP2pDevice) : void
        mOwner = device;
!!!9778956.java!!!	getOwner() : WifiP2pDevice
        return mOwner;
!!!9779084.java!!!	addClient(in address : String) : void
        addClient(new WifiP2pDevice(address));
!!!9779212.java!!!	addClient(inout device : WifiP2pDevice) : void
        for (WifiP2pDevice client : mClients) {
            if (client.equals(device)) return;
        }
        mClients.add(device);
!!!9779340.java!!!	removeClient(in address : String) : boolean
        return mClients.remove(new WifiP2pDevice(address));
!!!9779468.java!!!	removeClient(inout device : WifiP2pDevice) : boolean
        return mClients.remove(device);
!!!9779596.java!!!	isClientListEmpty() : boolean
        return mClients.size() == 0;
!!!9779724.java!!!	contains(inout device : WifiP2pDevice) : boolean
        if (mOwner.equals(device) || mClients.contains(device)) return true;
        return false;
!!!9779852.java!!!	getClientList() : WifiP2pDevice
        return Collections.unmodifiableCollection(mClients);
!!!9779980.java!!!	setPassphrase(in passphrase : String) : void
        mPassphrase = passphrase;
!!!9780108.java!!!	getPassphrase() : String
        return mPassphrase;
!!!9780236.java!!!	setInterface(in intf : String) : void
        mInterface = intf;
!!!9780364.java!!!	getInterface() : String
        return mInterface;
!!!9780492.java!!!	getNetworkId() : int
        return mNetId;
!!!9780620.java!!!	setNetworkId(in netId : int) : void
        this.mNetId = netId;
!!!9780748.java!!!	toString() : String
        StringBuffer sbuf = new StringBuffer();
        sbuf.append("network: ").append(mNetworkName);
        sbuf.append("\n isGO: ").append(mIsGroupOwner);
        sbuf.append("\n GO: ").append(mOwner);
        for (WifiP2pDevice client : mClients) {
            sbuf.append("\n Client: ").append(client);
        }
        sbuf.append("\n interface: ").append(mInterface);
        sbuf.append("\n networkId: ").append(mNetId);
        return sbuf.toString();
!!!9780876.java!!!	describeContents() : int
        return 0;
!!!9781004.java!!!	WifiP2pGroup(inout source : WifiP2pGroup)
        if (source != null) {
            mNetworkName = source.getNetworkName();
            mOwner = new WifiP2pDevice(source.getOwner());
            mIsGroupOwner = source.mIsGroupOwner;
            for (WifiP2pDevice d : source.getClientList()) mClients.add(d);
            mPassphrase = source.getPassphrase();
            mInterface = source.getInterface();
            mNetId = source.getNetworkId();
        }
!!!9781132.java!!!	writeToParcel(inout dest : Parcel, in flags : int) : void
        dest.writeString(mNetworkName);
        dest.writeParcelable(mOwner, flags);
        dest.writeByte(mIsGroupOwner ? (byte) 1: (byte) 0);
        dest.writeInt(mClients.size());
        for (WifiP2pDevice client : mClients) {
            dest.writeParcelable(client, flags);
        }
        dest.writeString(mPassphrase);
        dest.writeString(mInterface);
        dest.writeInt(mNetId);
