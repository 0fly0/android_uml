class CameraParameters
!!!188940.cpp!!!	flatten() : String8
    String8 flattened("");
    size_t size = mMap.size();

    for (size_t i = 0; i < size; i++) {
        String8 k, v;
        k = mMap.keyAt(i);
        v = mMap.valueAt(i);

        flattened += k;
        flattened += "=";
        flattened += v;
        if (i != size-1)
            flattened += ";";
    }

    return flattened;
!!!189068.cpp!!!	unflatten(in params : String8) : void
    const char *a = params.string();
    const char *b;

    mMap.clear();

    for (;;) {
        // Find the bounds of the key name.
        b = strchr(a, '=');
        if (b == 0)
            break;

        // Create the key string.
        String8 k(a, (size_t)(b-a));

        // Find the value.
        a = b+1;
        b = strchr(a, ';');
        if (b == 0) {
            // If there's no semicolon, this is the last item.
            String8 v(a);
            mMap.add(k, v);
            break;
        }

        String8 v(a, (size_t)(b-a));
        mMap.add(k, v);
        a = b+1;
    }
!!!189196.cpp!!!	set(in key : char, in value : char) : void
    // XXX i think i can do this with strspn()
    if (strchr(key, '=') || strchr(key, ';')) {
        //XXX ALOGE("Key \"%s\"contains invalid character (= or ;)", key);
        return;
    }

    if (strchr(value, '=') || strchr(key, ';')) {
        //XXX ALOGE("Value \"%s\"contains invalid character (= or ;)", value);
        return;
    }

    mMap.replaceValueFor(String8(key), String8(value));
!!!189324.cpp!!!	set(in key : char, in value : int) : void
    char str[16];
    sprintf(str, "%d", value);
    set(key, str);
!!!189452.cpp!!!	setFloat(in key : char, in value : float) : void
    char str[16];  // 14 should be enough. We overestimate to be safe.
    snprintf(str, sizeof(str), "%g", value);
    set(key, str);
!!!189580.cpp!!!	get(in key : char) : char
    String8 v = mMap.valueFor(String8(key));
    if (v.length() == 0)
        return 0;
    return v.string();
!!!189708.cpp!!!	getInt(in key : char) : int
    const char *v = get(key);
    if (v == 0)
        return -1;
    return strtol(v, 0, 0);
!!!189836.cpp!!!	getFloat(in key : char) : float
    const char *v = get(key);
    if (v == 0) return -1;
    return strtof(v, 0);
!!!189964.cpp!!!	remove(in key : char) : void
    mMap.removeItem(String8(key));
!!!190092.cpp!!!	setPreviewSize(in width : int, in height : int) : void
    char str[32];
    sprintf(str, "%dx%d", width, height);
    set(KEY_PREVIEW_SIZE, str);
!!!190220.cpp!!!	getPreviewSize(inout width : int, inout height : int) : void
    *width = *height = -1;
    // Get the current string, if it doesn't exist, leave the -1x-1
    const char *p = get(KEY_PREVIEW_SIZE);
    if (p == 0)  return;
    parse_pair(p, width, height, 'x');
!!!190348.cpp!!!	getSupportedPreviewSizes(inout sizes : Vector<Size>) : void
    const char *previewSizesStr = get(KEY_SUPPORTED_PREVIEW_SIZES);
    parseSizesList(previewSizesStr, sizes);
!!!190476.cpp!!!	setVideoSize(in width : int, in height : int) : void
    char str[32];
    sprintf(str, "%dx%d", width, height);
    set(KEY_VIDEO_SIZE, str);
!!!190604.cpp!!!	getVideoSize(inout width : int, inout height : int) : void
    *width = *height = -1;
    const char *p = get(KEY_VIDEO_SIZE);
    if (p == 0) return;
    parse_pair(p, width, height, 'x');
!!!190732.cpp!!!	getSupportedVideoSizes(inout sizes : Vector<Size>) : void
    const char *videoSizesStr = get(KEY_SUPPORTED_VIDEO_SIZES);
    parseSizesList(videoSizesStr, sizes);
!!!190860.cpp!!!	getPreferredPreviewSizeForVideo(inout width : int, inout height : int) : void
    *width = *height = -1;
    const char *p = get(KEY_PREFERRED_PREVIEW_SIZE_FOR_VIDEO);
    if (p == 0)  return;
    parse_pair(p, width, height, 'x');
!!!190988.cpp!!!	setPreviewFrameRate(in fps : int) : void
    set(KEY_PREVIEW_FRAME_RATE, fps);
!!!191116.cpp!!!	getPreviewFrameRate() : int
    return getInt(KEY_PREVIEW_FRAME_RATE);
!!!191244.cpp!!!	getPreviewFpsRange(inout min_fps : int, inout max_fps : int) : void
    *min_fps = *max_fps = -1;
    const char *p = get(KEY_PREVIEW_FPS_RANGE);
    if (p == 0) return;
    parse_pair(p, min_fps, max_fps, ',');
!!!191372.cpp!!!	setPreviewFormat(in format : char) : void
    set(KEY_PREVIEW_FORMAT, format);
!!!191500.cpp!!!	getPreviewFormat() : char
    return get(KEY_PREVIEW_FORMAT);
!!!191628.cpp!!!	setPictureSize(in width : int, in height : int) : void
    char str[32];
    sprintf(str, "%dx%d", width, height);
    set(KEY_PICTURE_SIZE, str);
!!!191756.cpp!!!	getPictureSize(inout width : int, inout height : int) : void
    *width = *height = -1;
    // Get the current string, if it doesn't exist, leave the -1x-1
    const char *p = get(KEY_PICTURE_SIZE);
    if (p == 0) return;
    parse_pair(p, width, height, 'x');
!!!191884.cpp!!!	getSupportedPictureSizes(inout sizes : Vector<Size>) : void
    const char *pictureSizesStr = get(KEY_SUPPORTED_PICTURE_SIZES);
    parseSizesList(pictureSizesStr, sizes);
!!!192012.cpp!!!	setPictureFormat(in format : char) : void
    set(KEY_PICTURE_FORMAT, format);
!!!192140.cpp!!!	getPictureFormat() : char
    return get(KEY_PICTURE_FORMAT);
!!!192268.cpp!!!	dump() : void
    ALOGD("dump: mMap.size = %d", mMap.size());
    for (size_t i = 0; i < mMap.size(); i++) {
        String8 k, v;
        k = mMap.keyAt(i);
        v = mMap.valueAt(i);
        ALOGD("%s: %s\n", k.string(), v.string());
    }
!!!192396.cpp!!!	dump(in fd : int, in args : Vector<String16>) : status_t
    const size_t SIZE = 256;
    char buffer[SIZE];
    String8 result;
    snprintf(buffer, 255, "CameraParameters::dump: mMap.size = %d\n", mMap.size());
    result.append(buffer);
    for (size_t i = 0; i < mMap.size(); i++) {
        String8 k, v;
        k = mMap.keyAt(i);
        v = mMap.valueAt(i);
        snprintf(buffer, 255, "\t%s: %s\n", k.string(), v.string());
        result.append(buffer);
    }
    write(fd, result.string(), result.size());
    return NO_ERROR;
