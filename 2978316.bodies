class DisplayAudioSettings
!!!12116364.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        mVideoOut = new VideoOutput();
        mAudioOut = new AudioOutput();
        addPreferencesFromResource(R.xml.display_audio_settings);
        populatePreferredDeepColors();
        populateAudioOutputModes();
!!!12116492.java!!!	handleSelectPreferredDeepColor(inout newValue : Object) : boolean
        String setting = newValue.toString();
        Log.d(TAG, "handleSelectPreferredDeepColor: " + setting);
        // Native observer will refresh display mode to make deep color change effective
        return mVideoOut.setPreferredDeepColorMode(setting);
!!!12116620.java!!!	populatePreferredDeepColors() : void
        ListPreference deepColorPref =
            (ListPreference) findPreference(KEY_DEEP_COLOR_MODE);
        String cur = mVideoOut.getPreferredDeepColorMode();
        Log.d(TAG, "populatePreferredDeepColors, current " + cur);
        if (cur == null) {
            cur = VideoOutput.VALUE_DEEP_COLOR_8BIT;
            Log.d(TAG, "populatePreferredDeepColors, use '8-bit' by default");
            mVideoOut.setPreferredDeepColorMode(cur);
        }

        deepColorPref.setValue(cur);
        deepColorPref.setOnPreferenceChangeListener(
                new Preference.OnPreferenceChangeListener() {
            public boolean onPreferenceChange(Preference preference,
                    Object newValue) {
                if (newValue.equals(mVideoOut.getPreferredDeepColorMode())) {
                    Log.d(TAG, "no change, ignore");
                    return true;
                }
                return handleSelectPreferredDeepColor(newValue);
            }
        });
!!!12116748.java!!!	handleSelectAudioOutputMode(inout newValue : Object) : boolean
        String setting = newValue.toString();
        Log.d(TAG, "handleSelectAudioOutputMode: " + setting);
        return mAudioOut.setAudioOutputMode(setting);
!!!12116876.java!!!	populateAudioOutputModes() : void
        ListPreference audioOutputModePref =
            (ListPreference) findPreference(KEY_AUDIO_OUTPUT_MODE);
        String curMode = mAudioOut.getAudioOutputMode();
        Log.d(TAG, "populateAudioOutputModes, current mode " + curMode);
        if (curMode == null) {
            curMode = AudioOutput.VALUE_OUTPUT_AUTO;
            Log.d(TAG, "populateAudioOutputModes, use 'Auto' by default");
            mAudioOut.setAudioOutputMode(curMode);
        }

        audioOutputModePref.setValue(curMode);
        audioOutputModePref.setOnPreferenceChangeListener(
                new Preference.OnPreferenceChangeListener() {
            public boolean onPreferenceChange(Preference preference,
                    Object newValue) {
                if (newValue.equals(mAudioOut.getAudioOutputMode())) {
                    Log.d(TAG, "no change, ignore");
                    return true;
                }
                return handleSelectAudioOutputMode(newValue);
            }
        });
