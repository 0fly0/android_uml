class Composer
!!!2050956.cpp!!!	closeGlobalTransactionImpl(in synchronous : bool) : void
    sp<ISurfaceComposer> sm(ComposerService::getComposerService());

    Vector<ComposerState> transaction;
    Vector<DisplayState> displayTransaction;
    uint32_t flags = 0;

    { // scope for the lock
        Mutex::Autolock _l(mLock);
        transaction = mComposerStates;
        mComposerStates.clear();

        displayTransaction = mDisplayStates;
        mDisplayStates.clear();

        if (synchronous || mForceSynchronous) {
            flags |= ISurfaceComposer::eSynchronous;
        }
        if (mAnimation) {
            flags |= ISurfaceComposer::eAnimation;
        }

        mForceSynchronous = false;
        mAnimation = false;
    }

   sm->setTransactionState(transaction, displayTransaction, flags);
!!!2051084.cpp!!!	setAnimationTransactionImpl() : void
    Mutex::Autolock _l(mLock);
    mAnimation = true;
!!!2051212.cpp!!!	getLayerStateLocked(in client : sp<SurfaceComposerClient>, in id : SurfaceID) : layer_state_t

    ComposerState s;
    s.client = client->mClient;
    s.state.surface = id;

    ssize_t index = mComposerStates.indexOf(s);
    if (index < 0) {
        // we don't have it, add an initialized layer_state to our list
        index = mComposerStates.add(s);
    }

    ComposerState* const out = mComposerStates.editArray();
    return &(out[index].state);
!!!2051340.cpp!!!	getDisplayStateLocked(in token : sp<IBinder>) : DisplayState
    DisplayState s;
    s.token = token;
    ssize_t index = mDisplayStates.indexOf(s);
    if (index < 0) {
        // we don't have it, add an initialized layer_state to our list
        s.what = 0;
        index = mDisplayStates.add(s);
    }
    return mDisplayStates.editItemAt(index);
!!!2051468.cpp!!!	createDisplay(in displayName : String8, in secure : bool) : sp<IBinder>
    return ComposerService::getComposerService()->createDisplay(displayName,
            secure);
!!!2051596.cpp!!!	getBuiltInDisplay(in id : int32_t) : sp<IBinder>
    return ComposerService::getComposerService()->getBuiltInDisplay(id);
!!!2051724.cpp!!!	setPosition(in client : sp<SurfaceComposerClient>, in id : SurfaceID, in x : float, in y : float) : status_t
    Mutex::Autolock _l(mLock);
    layer_state_t* s = getLayerStateLocked(client, id);
    if (!s)
        return BAD_INDEX;
    s->what |= layer_state_t::ePositionChanged;
    s->x = x;
    s->y = y;
    return NO_ERROR;
!!!2051852.cpp!!!	setSize(in client : sp<SurfaceComposerClient>, in id : SurfaceID, in w : uint32_t, in h : uint32_t) : status_t
    Mutex::Autolock _l(mLock);
    layer_state_t* s = getLayerStateLocked(client, id);
    if (!s)
        return BAD_INDEX;
    s->what |= layer_state_t::eSizeChanged;
    s->w = w;
    s->h = h;

    // Resizing a surface makes the transaction synchronous.
    mForceSynchronous = true;

    return NO_ERROR;
!!!2051980.cpp!!!	setLayer(in client : sp<SurfaceComposerClient>, in id : SurfaceID, in z : int32_t) : status_t
    Mutex::Autolock _l(mLock);
    layer_state_t* s = getLayerStateLocked(client, id);
    if (!s)
        return BAD_INDEX;
    s->what |= layer_state_t::eLayerChanged;
    s->z = z;
    return NO_ERROR;
!!!2052108.cpp!!!	setFlags(in client : sp<SurfaceComposerClient>, in id : SurfaceID, in flags : uint32_t, in mask : uint32_t) : status_t
    Mutex::Autolock _l(mLock);
    layer_state_t* s = getLayerStateLocked(client, id);
    if (!s)
        return BAD_INDEX;
    s->what |= layer_state_t::eVisibilityChanged;
    s->flags &= ~mask;
    s->flags |= (flags & mask);
    s->mask |= mask;
    return NO_ERROR;
!!!2052236.cpp!!!	setTransparentRegionHint(in client : sp<SurfaceComposerClient>, in id : SurfaceID, in transparentRegion : Region) : status_t
    Mutex::Autolock _l(mLock);
    layer_state_t* s = getLayerStateLocked(client, id);
    if (!s)
        return BAD_INDEX;
    s->what |= layer_state_t::eTransparentRegionChanged;
    s->transparentRegion = transparentRegion;
    return NO_ERROR;
!!!2052364.cpp!!!	setAlpha(in client : sp<SurfaceComposerClient>, in id : SurfaceID, in alpha : float) : status_t
    Mutex::Autolock _l(mLock);
    layer_state_t* s = getLayerStateLocked(client, id);
    if (!s)
        return BAD_INDEX;
    s->what |= layer_state_t::eAlphaChanged;
    s->alpha = alpha;
    return NO_ERROR;
!!!2052492.cpp!!!	setMatrix(in client : sp<SurfaceComposerClient>, in id : SurfaceID, in dsdx : float, in dtdx : float, in dsdy : float, in dtdy : float) : status_t
    Mutex::Autolock _l(mLock);
    layer_state_t* s = getLayerStateLocked(client, id);
    if (!s)
        return BAD_INDEX;
    s->what |= layer_state_t::eMatrixChanged;
    layer_state_t::matrix22_t matrix;
    matrix.dsdx = dsdx;
    matrix.dtdx = dtdx;
    matrix.dsdy = dsdy;
    matrix.dtdy = dtdy;
    s->matrix = matrix;
    return NO_ERROR;
!!!2052748.cpp!!!	setCrop(in client : sp<SurfaceComposerClient>, in id : SurfaceID, in crop : Rect) : status_t
    Mutex::Autolock _l(mLock);
    layer_state_t* s = getLayerStateLocked(client, id);
    if (!s)
        return BAD_INDEX;
    s->what |= layer_state_t::eCropChanged;
    s->crop = crop;
    return NO_ERROR;
!!!2052876.cpp!!!	setLayerStack(in client : sp<SurfaceComposerClient>, in id : SurfaceID, in layerStack : uint32_t) : status_t
    Mutex::Autolock _l(mLock);
    layer_state_t* s = getLayerStateLocked(client, id);
    if (!s)
        return BAD_INDEX;
    s->what |= layer_state_t::eLayerStackChanged;
    s->layerStack = layerStack;
    return NO_ERROR;
!!!2053004.cpp!!!	setDisplaySurface(in token : sp<IBinder>, in surface : sp<ISurfaceTexture>) : void
    Mutex::Autolock _l(mLock);
    DisplayState& s(getDisplayStateLocked(token));
    s.surface = surface;
    s.what |= DisplayState::eSurfaceChanged;
!!!2053132.cpp!!!	setDisplayLayerStack(in token : sp<IBinder>, in layerStack : uint32_t) : void
    Mutex::Autolock _l(mLock);
    DisplayState& s(getDisplayStateLocked(token));
    s.layerStack = layerStack;
    s.what |= DisplayState::eLayerStackChanged;
!!!2053260.cpp!!!	setDisplayProjection(in token : sp<IBinder>, in orientation : uint32_t, in layerStackRect : Rect, in displayRect : Rect) : void
    Mutex::Autolock _l(mLock);
    DisplayState& s(getDisplayStateLocked(token));
    s.orientation = orientation;
    s.viewport = layerStackRect;
    s.frame = displayRect;
    s.what |= DisplayState::eDisplayProjectionChanged;
    mForceSynchronous = true; // TODO: do we actually still need this?
