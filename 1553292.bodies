class StubMethodAdapter
!!!9606284.java!!!	StubMethodAdapter(inout mv : MethodVisitor, in methodName : String, inout returnType : Type, in invokeSignature : String, inout isStatic : boolean, inout isNative : boolean)
        super(Opcodes.ASM4);
        mParentVisitor = mv;
        mReturnType = returnType;
        mInvokeSignature = invokeSignature;
        mIsStatic = isStatic;
        mIsNative = isNative;

        if (CONSTRUCTOR.equals(methodName) || CLASS_INIT.equals(methodName)) {
            mIsInitMethod = true;
        }
!!!9606412.java!!!	generateInvoke() : void
        /* Generates the code:
         *  OverrideMethod.invoke("signature", mIsNative ? true : false, null or this);
         */
        mParentVisitor.visitLdcInsn(mInvokeSignature);
        // push true or false
        mParentVisitor.visitInsn(mIsNative ? Opcodes.ICONST_1 : Opcodes.ICONST_0);
        // push null or this
        if (mIsStatic) {
            mParentVisitor.visitInsn(Opcodes.ACONST_NULL);
        } else {
            mParentVisitor.visitVarInsn(Opcodes.ALOAD, 0);
        }

        int sort = mReturnType != null ? mReturnType.getSort() : Type.VOID;
        switch(sort) {
        case Type.VOID:
            mParentVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,
                    "com/android/tools/layoutlib/create/OverrideMethod",
                    "invokeV",
                    "(Ljava/lang/String;ZLjava/lang/Object;)V");
            mParentVisitor.visitInsn(Opcodes.RETURN);
            break;
        case Type.BOOLEAN:
        case Type.CHAR:
        case Type.BYTE:
        case Type.SHORT:
        case Type.INT:
            mParentVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,
                    "com/android/tools/layoutlib/create/OverrideMethod",
                    "invokeI",
                    "(Ljava/lang/String;ZLjava/lang/Object;)I");
            switch(sort) {
            case Type.BOOLEAN:
                Label l1 = new Label();
                mParentVisitor.visitJumpInsn(Opcodes.IFEQ, l1);
                mParentVisitor.visitInsn(Opcodes.ICONST_1);
                mParentVisitor.visitInsn(Opcodes.IRETURN);
                mParentVisitor.visitLabel(l1);
                mParentVisitor.visitInsn(Opcodes.ICONST_0);
                break;
            case Type.CHAR:
                mParentVisitor.visitInsn(Opcodes.I2C);
                break;
            case Type.BYTE:
                mParentVisitor.visitInsn(Opcodes.I2B);
                break;
            case Type.SHORT:
                mParentVisitor.visitInsn(Opcodes.I2S);
                break;
            }
            mParentVisitor.visitInsn(Opcodes.IRETURN);
            break;
        case Type.LONG:
            mParentVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,
                    "com/android/tools/layoutlib/create/OverrideMethod",
                    "invokeL",
                    "(Ljava/lang/String;ZLjava/lang/Object;)J");
            mParentVisitor.visitInsn(Opcodes.LRETURN);
            break;
        case Type.FLOAT:
            mParentVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,
                    "com/android/tools/layoutlib/create/OverrideMethod",
                    "invokeF",
                    "(Ljava/lang/String;ZLjava/lang/Object;)F");
            mParentVisitor.visitInsn(Opcodes.FRETURN);
            break;
        case Type.DOUBLE:
            mParentVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,
                    "com/android/tools/layoutlib/create/OverrideMethod",
                    "invokeD",
                    "(Ljava/lang/String;ZLjava/lang/Object;)D");
            mParentVisitor.visitInsn(Opcodes.DRETURN);
            break;
        case Type.ARRAY:
        case Type.OBJECT:
            mParentVisitor.visitMethodInsn(Opcodes.INVOKESTATIC,
                    "com/android/tools/layoutlib/create/OverrideMethod",
                    "invokeA",
                    "(Ljava/lang/String;ZLjava/lang/Object;)Ljava/lang/Object;");
            mParentVisitor.visitTypeInsn(Opcodes.CHECKCAST, mReturnType.getInternalName());
            mParentVisitor.visitInsn(Opcodes.ARETURN);
            break;
        }

!!!9606540.java!!!	generatePop() : void
        /* Pops the stack, depending on the return type.
         */
        switch(mReturnType != null ? mReturnType.getSort() : Type.VOID) {
        case Type.VOID:
            break;
        case Type.BOOLEAN:
        case Type.CHAR:
        case Type.BYTE:
        case Type.SHORT:
        case Type.INT:
        case Type.FLOAT:
        case Type.ARRAY:
        case Type.OBJECT:
            mParentVisitor.visitInsn(Opcodes.POP);
            break;
        case Type.LONG:
        case Type.DOUBLE:
            mParentVisitor.visitInsn(Opcodes.POP2);
            break;
        }
!!!9606668.java!!!	visitCode() : void
        mParentVisitor.visitCode();
!!!9606796.java!!!	visitMaxs(in maxStack : int, in maxLocals : int) : void
        if (!mIsInitMethod && !mMessageGenerated) {
            generateInvoke();
            mMessageGenerated = true;
        }
        mParentVisitor.visitMaxs(maxStack, maxLocals);
!!!9606924.java!!!	visitEnd() : void
        if (!mIsInitMethod && !mMessageGenerated) {
            generateInvoke();
            mMessageGenerated = true;
            mParentVisitor.visitMaxs(1, 1);
        }
        mParentVisitor.visitEnd();
!!!9607052.java!!!	visitAnnotation(in desc : String, inout visible : boolean) : AnnotationVisitor
        return mParentVisitor.visitAnnotation(desc, visible);
!!!9607180.java!!!	visitAnnotationDefault() : AnnotationVisitor
        return mParentVisitor.visitAnnotationDefault();
!!!9607308.java!!!	visitParameterAnnotation(in parameter : int, in desc : String, inout visible : boolean) : AnnotationVisitor
        return mParentVisitor.visitParameterAnnotation(parameter, desc, visible);
!!!9607436.java!!!	visitAttribute(inout attr : Attribute) : void
        mParentVisitor.visitAttribute(attr);
!!!9607564.java!!!	visitLineNumber(in line : int, inout start : Label) : void
        if (mIsInitMethod || mOutputFirstLineNumber) {
            mParentVisitor.visitLineNumber(line, start);
            mOutputFirstLineNumber = false;
        }
!!!9607692.java!!!	visitInsn(in opcode : int) : void
        if (mIsInitMethod) {
            switch (opcode) {
            case Opcodes.RETURN:
            case Opcodes.ARETURN:
            case Opcodes.DRETURN:
            case Opcodes.FRETURN:
            case Opcodes.IRETURN:
            case Opcodes.LRETURN:
                // Pop the last word from the stack since invoke will generate its own return.
                generatePop();
                generateInvoke();
                mMessageGenerated = true;
                //$FALL-THROUGH$
            default:
                mParentVisitor.visitInsn(opcode);
            }
        }
!!!9607820.java!!!	visitLabel(inout label : Label) : void
        if (mIsInitMethod) {
            mParentVisitor.visitLabel(label);
        }
!!!9607948.java!!!	visitTryCatchBlock(inout start : Label, inout end : Label, inout handler : Label, in type : String) : void
        if (mIsInitMethod) {
            mParentVisitor.visitTryCatchBlock(start, end, handler, type);
        }
!!!9608076.java!!!	visitMethodInsn(in opcode : int, in owner : String, in name : String, in desc : String) : void
        if (mIsInitMethod) {
            mParentVisitor.visitMethodInsn(opcode, owner, name, desc);
        }
!!!9608204.java!!!	visitFieldInsn(in opcode : int, in owner : String, in name : String, in desc : String) : void
        if (mIsInitMethod) {
            mParentVisitor.visitFieldInsn(opcode, owner, name, desc);
        }
!!!9608332.java!!!	visitFrame(in type : int, in nLocal : int, inout local : Object, in nStack : int, inout stack : Object) : void
        if (mIsInitMethod) {
            mParentVisitor.visitFrame(type, nLocal, local, nStack, stack);
        }
!!!9608460.java!!!	visitIincInsn(in var : int, in increment : int) : void
        if (mIsInitMethod) {
            mParentVisitor.visitIincInsn(var, increment);
        }
!!!9608588.java!!!	visitIntInsn(in opcode : int, in operand : int) : void
        if (mIsInitMethod) {
            mParentVisitor.visitIntInsn(opcode, operand);
        }
!!!9608716.java!!!	visitJumpInsn(in opcode : int, inout label : Label) : void
        if (mIsInitMethod) {
            mParentVisitor.visitJumpInsn(opcode, label);
        }
!!!9608844.java!!!	visitLdcInsn(inout cst : Object) : void
        if (mIsInitMethod) {
            mParentVisitor.visitLdcInsn(cst);
        }
!!!9608972.java!!!	visitLocalVariable(in name : String, in desc : String, in signature : String, inout start : Label, inout end : Label, in index : int) : void
        if (mIsInitMethod) {
            mParentVisitor.visitLocalVariable(name, desc, signature, start, end, index);
        }
!!!9609100.java!!!	visitLookupSwitchInsn(inout dflt : Label, inout keys : int, inout labels : Label) : void
        if (mIsInitMethod) {
            mParentVisitor.visitLookupSwitchInsn(dflt, keys, labels);
        }
!!!9609228.java!!!	visitMultiANewArrayInsn(in desc : String, in dims : int) : void
        if (mIsInitMethod) {
            mParentVisitor.visitMultiANewArrayInsn(desc, dims);
        }
!!!9609356.java!!!	visitTableSwitchInsn(in min : int, in max : int, inout dflt : Label, inout labels : Label) : void
        if (mIsInitMethod) {
            mParentVisitor.visitTableSwitchInsn(min, max, dflt, labels);
        }
!!!9609484.java!!!	visitTypeInsn(in opcode : int, in type : String) : void
        if (mIsInitMethod) {
            mParentVisitor.visitTypeInsn(opcode, type);
        }
!!!9609612.java!!!	visitVarInsn(in opcode : int, in var : int) : void
        if (mIsInitMethod) {
            mParentVisitor.visitVarInsn(opcode, var);
        }
