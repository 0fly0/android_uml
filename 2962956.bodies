class VideoOutput
!!!12033292.java!!!	getTvSupportedModes() : DisplayMode
        List<DisplayMode> tvModes = new ArrayList<DisplayMode>();
        String[] values = null;
        try {
            values = AVSettings.getStringValueArray(getFullKey(KEY_TV_SUPPORTED_MODES));
        } catch (NoValueException e) {
            // We will get no value if sink is disconnected,
            // throw NoValueException to notify application
            if (AVSettings.DEBUG) Log.d(TAG, "no supported modes, is tv connected?");
            return new DisplayMode[0];
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (null == values) {
            Log.w(TAG, "getTvSupportedModes, return null");
            return new DisplayMode[0];
        }

        if (AVSettings.DEBUG) Log.d(TAG, "getTvSupportedModes, total: " + values.length);
        for (String value : values) {
            tvModes.add(DisplayMode.fromString(value));
        }
        return tvModes.toArray(new DisplayMode[tvModes.size()]);
!!!12033420.java!!!	getDisplayMode() : DisplayMode
        if (AVSettings.DEBUG)  Log.d(TAG, "getDisplayMode, enter");
        String value = null;
        try {
            value = AVSettings.getStringValue(getFullKey(KEY_DISPLAY_MODE));
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (AVSettings.DEBUG)  Log.d(TAG, "getDisplayMode, return: " + value);
        return DisplayMode.fromString(value);
!!!12033548.java!!!	setDisplayMode(inout mode : DisplayMode) : boolean
        if (AVSettings.DEBUG)  Log.d(TAG, "setDisplayMode, " + mode.toEncodedString());
        return AVSettings.setStringValue(getFullKey(KEY_DISPLAY_MODE), mode.toEncodedString());
!!!12033676.java!!!	getPreferredDisplayMode() : DisplayMode
        String value = null;
        try {
            value = AVSettings.getStringValue(getFullKey(KEY_PREFERRED_DISPLAY_MODE));
        } catch (NoValueException e) {
            // Application will handle null preferred mode as 'Auto';
            // We can also throw NoValueException to notify application
            if (AVSettings.DEBUG) Log.d(TAG, "no preferred display mode, use auto");
            return null;
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (AVSettings.DEBUG)  Log.d(TAG, "getPreferredDisplayMode, return: " + value);
        return DisplayMode.fromString(value);
!!!12033804.java!!!	setPreferredDisplayMode(inout mode : DisplayMode) : boolean
        if (mode == null) {
            if (AVSettings.DEBUG) Log.d(TAG, "clear preferred display mode");
            return AVSettings.setNoValue(getFullKey(KEY_PREFERRED_DISPLAY_MODE));
        }
        if (AVSettings.DEBUG)  Log.d(TAG, "setPreferredDisplayMode, " + mode.toEncodedString());
        return AVSettings.setStringValue(
                getFullKey(KEY_PREFERRED_DISPLAY_MODE), mode.toEncodedString());
!!!12033932.java!!!	getPreferredDeepColorMode() : String
        String value = null;
        try {
            value = AVSettings.getStringValue(getFullKey(KEY_DEEP_COLOR));
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (AVSettings.DEBUG)  Log.d(TAG, "getPreferredDeepColor, return: " + value);
        return value;
!!!12034060.java!!!	setPreferredDeepColorMode(in deepColor : String) : boolean
        if (AVSettings.DEBUG)  Log.d(TAG, "setPreferredDeepColor, " + deepColor);
        if (deepColor == null) {
            Log.w(TAG, "Deep color null");
            return false;
        }
        return AVSettings.setStringValue(getFullKey(KEY_DEEP_COLOR), deepColor);
!!!12034188.java!!!	getPreferredColorFormat() : String
        String value = null;
        try {
            value = AVSettings.getStringValue(getFullKey(KEY_COLOR_FORMAT));
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (AVSettings.DEBUG)  Log.d(TAG, "getPreferredColorFormat, return: " + value);
        return value;
!!!12034316.java!!!	setPreferredColorFormat(in colorFormat : String) : boolean
        if (AVSettings.DEBUG)  Log.d(TAG, "setPreferredColorFormat, " + colorFormat);
        if (colorFormat == null) {
            Log.w(TAG, "Color format null");
            return false;
        }
        return AVSettings.setStringValue(getFullKey(KEY_COLOR_FORMAT), colorFormat);
!!!12034444.java!!!	getScalingMode() : String
        String value = null;
        try {
            value = AVSettings.getStringValue(getFullKey(KEY_SCALING_MODE));
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (AVSettings.DEBUG)  Log.d(TAG, "getScalingMode, return: " + value);
        return value;
!!!12034572.java!!!	setScalingMode(in scalingMode : String) : boolean
        if (AVSettings.DEBUG)  Log.d(TAG, "setScalingMode, " + scalingMode);
        if (scalingMode == null) {
            Log.w(TAG, "Scaling mode null");
            return false;
        }
        return AVSettings.setStringValue(
                getFullKey(KEY_SCALING_MODE), scalingMode);
!!!12034700.java!!!	setAVMute(inout mute : boolean) : boolean
        if (AVSettings.DEBUG)  Log.d(TAG, "setAVMute, " + mute);
        return AVSettings.setBooleanValue(getFullKey(KEY_AV_MUTE), mute);
!!!12034828.java!!!	setVideoProperty(inout type : VideoPropType, in value : int) : boolean
        return setVideoProperty(type.ordinal() + VIDEO_PROP_OFFSET, value);
!!!12034956.java!!!	getVideoProperty(inout type : VideoPropType) : int
        return getVideoProperty(type.ordinal() + VIDEO_PROP_OFFSET);
!!!12035084.java!!!	setVideoProperty(in vProp : int, in value : int) : boolean
        if (AVSettings.DEBUG) {
            Log.d(TAG, "setVideoProperty: " + vProp + ", " + value);
        }
        return AVSettings.setIntValue(getFullKey(KEY_VIDEO_PROP + vProp), value);
!!!12035212.java!!!	getVideoProperty(in vProp : int) : int
        int value = -1;
        try {
            value = AVSettings.getIntValue(getFullKey(KEY_VIDEO_PROP + vProp));
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (AVSettings.DEBUG)  Log.d(TAG, "getVideoProperty, return: " + value);
        return value;
!!!12035340.java!!!	getFullKey(in subkey : String) : String
        return AVSettings.KEY_PREFIX_VIDEO_OUTPUT + subkey;
