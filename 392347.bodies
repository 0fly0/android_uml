class OldPipedOutputStreamTest
!!!2680091.java!!!	test_Constructor() : void
        out = new PipedOutputStream();
        assertNotNull(out);
        try {
            out.close();
        } catch (IOException e) {
            fail("Unexpeceted IOException.");
        }
!!!2680219.java!!!	test_ConstructorLjava_io_PipedInputStream() : void
        // Test for method java.io.PipedOutputStream(java.io.PipedInputStream)

        try {
            out = new PipedOutputStream(new PipedInputStream());
            out.write('b');
        } catch (Exception e) {
            fail("Test 1: Constructor failed: " + e.getMessage());
        }
        out.close();

        PipedInputStream pis = new PipedInputStream(new PipedOutputStream());
        try {
            out = new PipedOutputStream(pis);
            fail("Test 2: IOException expected because the input stream is already connected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2680347.java!!!	test_close() : void
        out = new PipedOutputStream();
        rt = new Thread(reader = new PReader(out));
        rt.start();
        try {
            out.close();
        } catch (IOException e) {
            fail("Test 1: Unexpected IOException: " + e.getMessage());
        }
!!!2680475.java!!!	test_connectLjava_io_PipedInputStream() : void
        out = new PipedOutputStream();

        try {
            out.connect(new PipedInputStream());
        } catch (Exception e) {
            fail("Test 1: Unexpected exception when connecting: " +
                    e.getLocalizedMessage());
        }

        try {
            out.write('B');
        } catch (IOException e) {
            fail("Test 2: Unexpected IOException when writing after connecting.");
        }

        try {
            out.connect(new PipedInputStream());
            fail("Test 3: IOException expected when reconnecting the stream.");
        } catch (IOException e) {
            // Expected.
        }

        try {
            out.connect(null);
            fail("Test 4: NullPointerException expected.");
        } catch (NullPointerException e) {
            // Expected.
        }
!!!2680603.java!!!	test_flush() : void
        out = new PipedOutputStream();
        rt = new Thread(reader = new PReader(out));
        rt.start();
        out.write(testString.getBytes(), 0, 10);
        assertTrue("Test 1: Bytes have been written before flush.", reader.available() != 0);
        out.flush();
        assertEquals("Test 2: Flush failed. ",
                testString.substring(0, 10), reader.read(10));
!!!2680731.java!!!	test_write$BII() : void
        out = new PipedOutputStream();

        try {
            out.write(testString.getBytes(), 0, 5);
            fail("Test 1: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }

        out = new PipedOutputStream(new PipedInputStream());

        try {
            out.write(testString.getBytes(), -1, 10);
            fail("Test 2: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            out.write(testString.getBytes(), 0, -1);
            fail("Test 3: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        try {
            out.write(testString.getBytes(), 5, testString.length());
            fail("Test 4: IndexOutOfBoundsException expected.");
        } catch (IndexOutOfBoundsException e) {
            // Expected.
        }

        out.close();
        out = new PipedOutputStream();
        try {
            rt = new Thread(reader = new PReader(out));
            rt.start();
            out.write(testString.getBytes(), 0, testString.length());
            out.flush();
            assertEquals("Test 5: Bytes read do not match the bytes written. ",
                         testString, reader.read(testString.length()));
        } catch (IOException e) {
            fail("Test 5: Unexpected IOException: " + e.getMessage());
        }

        reader.getReader().close();
        try {
            out.write(testString.getBytes(), 0, 5);
            fail("Test 7: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2680859.java!!!	test_writeI() : void
        out = new PipedOutputStream();

        try {
            out.write(42);
            fail("Test 1: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }

        rt = new Thread(reader = new PReader(out));
        rt.start();
        out.write('c');
        out.flush();
        assertEquals("Test 2: The byte read does not match the byte written. ",
                     "c", reader.read(1));

/* Test disabled due to incomplete implementation, see ticket #92.
        rt.interrupt();

        try {
            out.write(42);
            fail("Test 3: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
    }
*/
        reader.getReader().close();
        try {
            out.write(42);
            fail("Test 4: IOException expected.");
        } catch (IOException e) {
            // Expected.
        }
!!!2680987.java!!!	tearDown() : void
        if (rt != null)
            rt.interrupt();
        super.tearDown();
