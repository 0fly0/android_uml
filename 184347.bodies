class MappedByteBuffer
!!!715419.java!!!	MappedByteBuffer(inout block : MemoryBlock, in capacity : int, inout mapMode : MapMode)
    super(capacity, block);
    this.mapMode = mapMode;
!!!715547.java!!!	isLoaded() : boolean
    checkIsMapped();

    long address = block.toLong();
    long size = block.getSize();
    if (size == 0) {
      return true;
    }

    try {
      int pageSize = (int) Libcore.os.sysconf(_SC_PAGE_SIZE);
      int pageOffset = (int) (address % pageSize);
      address -= pageOffset;
      size += pageOffset;
      int pageCount = (int) ((size + pageSize - 1) / pageSize);
      byte[] vector = new byte[pageCount];
      Libcore.os.mincore(address, size, vector);
      for (int i = 0; i < vector.length; ++i) {
        if ((vector[i] & 1) != 1) {
          return false;
        }
      }
      return true;
    } catch (ErrnoException errnoException) {
      return false;
    }
!!!715675.java!!!	load() : MappedByteBuffer
    checkIsMapped();

    try {
      Libcore.os.mlock(block.toLong(), block.getSize());
      Libcore.os.munlock(block.toLong(), block.getSize());
    } catch (ErrnoException ignored) {
    }
    return this;
!!!715803.java!!!	force() : MappedByteBuffer
    checkIsMapped();

    if (mapMode == MapMode.READ_WRITE) {
      try {
        Libcore.os.msync(block.toLong(), block.getSize(), MS_SYNC);
      } catch (ErrnoException errnoException) {
        // The RI doesn't throw, presumably on the assumption that you can't get into
        // a state where msync(2) could return an error.
        throw new AssertionError(errnoException);
      }
    }
    return this;
!!!715931.java!!!	checkIsMapped() : void
    if (mapMode == null) {
      throw new UnsupportedOperationException();
    }
