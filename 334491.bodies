class X509CertImpl
!!!2189211.java!!!	X509CertImpl(inout in : InputStream)
        try {
            // decode the Certificate object
            this.certificate = (Certificate) Certificate.ASN1.decode(in);
            // cache the values of TBSCertificate and Extensions
            this.tbsCert = certificate.getTbsCertificate();
            this.extensions = tbsCert.getExtensions();
        } catch (IOException e) {
            throw new CertificateException(e);
        }
!!!2189339.java!!!	X509CertImpl(inout certificate : Certificate)
        this.certificate = certificate;
        // cache the values of TBSCertificate and Extensions
        this.tbsCert = certificate.getTbsCertificate();
        this.extensions = tbsCert.getExtensions();
!!!2189467.java!!!	X509CertImpl(inout encoding : byte)
        this((Certificate) Certificate.ASN1.decode(encoding));
!!!2189595.java!!!	checkValidity() : void
        checkValidity(System.currentTimeMillis());
!!!2189723.java!!!	checkValidity(inout date : Date) : void
        checkValidity(date.getTime());
!!!2189851.java!!!	checkValidity(in time : long) : void
        if (time < getNotBeforeInternal()) {
            throw new CertificateNotYetValidException("current time: " + new Date(time)
                + ", validation time: " + new Date(getNotBeforeInternal()));
        }
        if (time > getNotAfterInternal()) {
            throw new CertificateExpiredException("current time: " + new Date(time)
                + ", expiration time: " + new Date(getNotAfterInternal()));
        }
!!!2189979.java!!!	getVersion() : int
        return tbsCert.getVersion() + 1;
!!!2190107.java!!!	getSerialNumber() : BigInteger
        BigInteger result = serialNumber;
        if (result == null) {
            serialNumber = result = tbsCert.getSerialNumber();
        }
        return result;
!!!2190235.java!!!	getIssuerDN() : Principal
        return getIssuerX500Principal();
!!!2190363.java!!!	getIssuerX500Principal() : X500Principal
        X500Principal result = issuer;
        if (result == null) {
            // retrieve the issuer's principal
            issuer = result = tbsCert.getIssuer().getX500Principal();
        }
        return result;
!!!2190491.java!!!	getSubjectDN() : Principal
        return getSubjectX500Principal();
!!!2190619.java!!!	getSubjectX500Principal() : X500Principal
        X500Principal result = subject;
        if (result == null) {
            // retrieve the subject's principal
            subject = result = tbsCert.getSubject().getX500Principal();
        }
        return result;
!!!2190747.java!!!	getNotBefore() : Date
        return new Date(getNotBeforeInternal());
!!!2190875.java!!!	getNotBeforeInternal() : long
        long result = notBefore;
        if (result == -1) {
            notBefore = result = tbsCert.getValidity().getNotBefore().getTime();
        }
        return result;
!!!2191003.java!!!	getNotAfter() : Date
        return new Date(getNotAfterInternal());
!!!2191131.java!!!	getNotAfterInternal() : long
        long result = notAfter;
        if (result == -1) {
            notAfter = result = tbsCert.getValidity().getNotAfter().getTime();
        }
        return result;
!!!2191259.java!!!	getTBSCertificate() : byte
        return getTbsCertificateInternal().clone();
!!!2191387.java!!!	getTbsCertificateInternal() : byte
        byte[] result = tbsCertificate;
        if (result == null) {
            tbsCertificate = result = tbsCert.getEncoded();
        }
        return result;
!!!2191515.java!!!	getSignature() : byte
        return getSignatureInternal().clone();
!!!2191643.java!!!	getSignatureInternal() : byte
        byte[] result = signature;
        if (result == null) {
            signature = result = certificate.getSignatureValue();
        }
        return result;
!!!2191771.java!!!	getSigAlgName() : String
        String result = sigAlgName;
        if (result == null) {
            String sigAlgOIDLocal = getSigAlgOID();
            // retrieve the name of the signing algorithm
            result = AlgNameMapper.map2AlgName(sigAlgOIDLocal);
            if (result == null) {
                // if could not be found, use OID as a name
                result = sigAlgOIDLocal;
            }
            sigAlgName = result;
        }
        return result;
!!!2191899.java!!!	getSigAlgOID() : String
        String result = sigAlgOID;
        if (result == null) {
            // if info was not retrieved (and cached), do it:
            sigAlgOID = result = tbsCert.getSignature().getAlgorithm();
        }
        return result;
!!!2192027.java!!!	getSigAlgParams() : byte
        if (nullSigAlgParams) {
            return null;
        }
        byte[] result = sigAlgParams;
        if (result == null) {
            result = tbsCert.getSignature().getParameters();
            if (result == null) {
                nullSigAlgParams = true;
                return null;
            }
            sigAlgParams = result;
        }
        return result;
!!!2192155.java!!!	getIssuerUniqueID() : boolean
        return tbsCert.getIssuerUniqueID();
!!!2192283.java!!!	getSubjectUniqueID() : boolean
        return tbsCert.getSubjectUniqueID();
!!!2192411.java!!!	getKeyUsage() : boolean
        if (extensions == null) {
            return null;
        }
        return extensions.valueOfKeyUsage();
!!!2192539.java!!!	getExtendedKeyUsage() : List
        if (extensions == null) {
            return null;
        }
        try {
            return extensions.valueOfExtendedKeyUsage();
        } catch (IOException e) {
            throw new CertificateParsingException(e);
        }
!!!2192667.java!!!	getBasicConstraints() : int
        if (extensions == null) {
            return -1;
        }
        return extensions.valueOfBasicConstraints();
!!!2192795.java!!!	getSubjectAlternativeNames() : Collection
        if (extensions == null) {
            return null;
        }
        try {
            // Retrieve the extension value from the cached extensions object
            // This extension is not checked for correctness during
            // certificate generation, so now it can throw exception
            return extensions.valueOfSubjectAlternativeName();
        } catch (IOException e) {
            throw new CertificateParsingException(e);
        }
!!!2192923.java!!!	getIssuerAlternativeNames() : Collection
        if (extensions == null) {
            return null;
        }
        try {
            // Retrieve the extension value from the cached extensions object
            // This extension is not checked for correctness during
            // certificate generation, so now it can throw exception
            return extensions.valueOfIssuerAlternativeName();
        } catch (IOException e) {
            throw new CertificateParsingException(e);
        }
!!!2193051.java!!!	getEncoded() : byte
        return getEncodedInternal().clone();
!!!2193179.java!!!	getEncodedInternal() : byte
        byte[] result = encoding;
        if (encoding == null) {
            encoding = result = certificate.getEncoded();
        }
        return result;
!!!2193307.java!!!	getPublicKey() : PublicKey
        PublicKey result = publicKey;
        if (result == null) {
            publicKey = result = tbsCert.getSubjectPublicKeyInfo().getPublicKey();
        }
        return result;
!!!2193435.java!!!	toString() : String
        return certificate.toString();
!!!2193563.java!!!	verify(inout key : PublicKey) : void

        Signature signature;
        try {
            signature = Signature.getInstance(getSigAlgName(), OpenSSLProvider.PROVIDER_NAME);
        } catch (NoSuchAlgorithmException ignored) {
            signature = Signature.getInstance(getSigAlgName());
        }
        signature.initVerify(key);
        // retrieve the encoding of the TBSCertificate structure
        byte[] tbsCertificateLocal = getTbsCertificateInternal();
        // compute and verify the signature
        signature.update(tbsCertificateLocal, 0, tbsCertificateLocal.length);
        if (!signature.verify(certificate.getSignatureValue())) {
            throw new SignatureException("Signature was not verified");
        }
!!!2193691.java!!!	verify(inout key : PublicKey, inout sigProvider : String) : void

        Signature signature;
        try {
            if (sigProvider == null) {
                signature = Signature.getInstance(getSigAlgName(), OpenSSLProvider.PROVIDER_NAME);
            } else {
                signature = Signature.getInstance(getSigAlgName(), sigProvider);
            }
        } catch (NoSuchAlgorithmException ignored) {
            signature = Signature.getInstance(getSigAlgName(), sigProvider);
        }
        signature.initVerify(key);
        // retrieve the encoding of the TBSCertificate structure
        byte[] tbsCertificateLocal = getTbsCertificateInternal();
        // compute and verify the signature
        signature.update(tbsCertificateLocal, 0, tbsCertificateLocal.length);
        if (!signature.verify(certificate.getSignatureValue())) {
            throw new SignatureException("Signature was not verified");
        }
!!!2193819.java!!!	getNonCriticalExtensionOIDs() : Set
        if (extensions == null) {
            return null;
        }
        // retrieve the info from the cached extensions object
        return extensions.getNonCriticalExtensions();
!!!2193947.java!!!	getCriticalExtensionOIDs() : Set
        if (extensions == null) {
            return null;
        }
        // retrieve the info from the cached extensions object
        return extensions.getCriticalExtensions();
!!!2194075.java!!!	getExtensionValue(inout oid : String) : byte
        if (extensions == null) {
            return null;
        }
        // retrieve the info from the cached extensions object
        Extension ext = extensions.getExtensionByOID(oid);
        return (ext == null) ? null : ext.getRawExtnValue();
!!!2194203.java!!!	hasUnsupportedCriticalExtension() : boolean
        if (extensions == null) {
            return false;
        }
        // retrieve the info from the cached extensions object
        return extensions.hasUnsupportedCritical();
