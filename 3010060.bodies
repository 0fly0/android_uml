class HdmiCecDeviceListActivity
!!!12289420.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        // TODO Auto-generated method stub
        super.onCreate(savedInstanceState);
        mContext = this.getApplicationContext();
        setContentView(R.layout.device_sub_menu);
        mListView = (ListView) findViewById(R.id.devices);
        mListView.setOnItemClickListener(mListener);
        adapter = new DeviceAdapter(this);
        mListView.setAdapter(adapter);
        mNotify = (TextView) findViewById(R.id.cecScanNotify);
        mRefresh = (Button) findViewById(R.id.refresh);
        mRefresh.setOnClickListener(this);
        mDeviceFoundNotify1 = getResources().getString(R.string.cec_device_found_notify1);
        mDeviceFoundNotify2 = getResources().getString(R.string.cec_device_found_notify2);
        mWrapper = Wrapper.getWrapperInstance();
        // mCecProxy = mWrapper.getCecProxy();

        IntentFilter filter = new IntentFilter(HDMICEC_MSG_ACTIVE_SOURCE);
        registerReceiver(mReceiver, filter);

        /* bind service everytime to make sure getting the service reference */
        connectCecService();
!!!12289548.java!!!	updateDeviceList() : void
        try {
            if (mITvCecService != null) {
                synchronized(devices) {
                    List<CECDevInfo> cecList = mITvCecService.getListOfConnectedCECDevices();
                    int size = parseDeviceList(cecList);
                    devicesClone = (ArrayList<DeviceEntry>)devices.clone();
                    adapter.notifyDataSetChanged();
                    // mListView.setAdapter(new
                    // DeviceAdapter(HdmiCecDeviceListActivity.this));
                    if (size <= 1) {
                        mNotify.setText(String.valueOf(size) + " " + mDeviceFoundNotify1);
                    } else {
                        mNotify.setText(String.valueOf(size) + " " + mDeviceFoundNotify2);
                    }
                }
            }
        } catch (RemoteException e) {
            e.printStackTrace();

        }

!!!12289676.java!!!	onStop() : void
        disconnectCecService();
        unregisterReceiver(mReceiver);
        super.onStop();
!!!12291724.java!!!	parseDeviceList(inout cecList : List<CECDevInfo>) : int
        int size = 0;
        int pos = 0;
        int count = 0;
        CECDevInfo devInfo = null;
        Log.d(TAG, "parseDeviceList");
        if (cecList != null) {
            size = cecList.size();
            if (devices != null) {
                devices.clear();
            }
            for (pos = 0; pos < size; pos++) {
                devInfo = cecList.get(pos);
                if (devInfo != null) {
                    DeviceEntry e1 = new DeviceEntry();
                    e1.port = devInfo.getPortNumber();
                    e1.name = devInfo.getOsdName();
                    e1.phyAddr = convertPhyAddress(devInfo.getDevicePhysicalAddress());
                    e1.logAddr = String.valueOf(devInfo.getDeviceAddress());
                    if (devices != null) {
                        devices.add(e1);
                    }
                    count = count + 1;
                }
            }
        } else {
            Log.d(TAG, "Cec device list is null.");
        }
        return count;
!!!12291852.java!!!	convertPhyAddress(in phyAddr : int) : String
        // Log.d(TAG,"convertPhyAddress,"+phyAddr+
        // ","+(phyAddr&0xF000)+","+((phyAddr&0xF000)>>12));
        String str = String.valueOf((phyAddr & 0xF000) >> 12) + "."
                + String.valueOf((phyAddr & 0x0F00) >> 8) + "."
                + String.valueOf((phyAddr & 0x00F0) >> 4) + "." + String.valueOf(phyAddr & 0x000F);
        return str;
!!!12291980.java!!!	getUriPortByCecPort(in cecport : int) : int
        String deviceid = "";
        int uriport = 0;
        if (cecport == 1) {
            deviceid = PairingDevice.HDMI1_DEVICE_ID;
        } else if (cecport == 2) {
            deviceid = PairingDevice.HDMI2_DEVICE_ID;
        } else if (cecport == 3) {
            deviceid = PairingDevice.HDMI3_DEVICE_ID;
        } else if (cecport == 4) {
            deviceid = PairingDevice.HDMI4_DEVICE_ID;
        }
        uriport = PairingDevice.getPortId(deviceid);

        return uriport;

!!!12292108.java!!!	onClick(inout arg0 : View) : void
        // TODO Auto-generated method stub
        new DeviceAsyncTask().execute("");

!!!12292236.java!!!	connectCecService() : boolean
        Intent bindCECIntent = new Intent(HdmiCecUtils.ACTION_BIND_HDMI_CEC_SERVICE);
        return bindService(bindCECIntent, this, BIND_AUTO_CREATE);
!!!12292364.java!!!	disconnectCecService() : void
        if (mITvCecService != null) {
            try {
                mITvCecService.unregisterCecCallBack(mCbImpl);
                mCbRegistered = false;
            } catch(RemoteException ex) {
                ex.printStackTrace();
            }
            unbindService(this);
            Log.i(TAG, "@@@cec device list activity disconnect service");
        }
!!!12292492.java!!!	onServiceConnected(inout name : ComponentName, inout service : IBinder) : void
        Log.d(TAG, "@@@cec device list activity onServiceConnected");
        if (null == service) {
            Log.e(TAG, "@@@cec Remote CEC service connected, return a null IBinder object!");
            return;
        }

        try {
        ICecServiceHub mCecServiceHub = ICecServiceHub.Stub.asInterface(service);
        if (null == mCecServiceHub) {
            Log.e(TAG, "@@@cec Construct BP binder from remote binder error!");
            return;
        }


        if (HdmiCecUtils.CecDeviceType.CEC_DEVICE_TYPE_TV
                != mCecServiceHub.getCecDeviceType()) {
            Log.e(TAG, "@@@cec not tv cec service!");
            return;
        }

        mITvCecService = ITvCecService.Stub.asInterface(mCecServiceHub.getCecService());
        //mITvCecService = CecUtils.getITvCecService();
        mCbImpl = new CallBackImplementation();
            if (mITvCecService != null) {
            Log.i(TAG, "@@@cec device list activity onServiceConnected success!");
                mITvCecService.registerCecCallBack(mCbImpl);
                mCbRegistered = true;
                updateDeviceList();
            }
        } catch (RemoteException e) {
            e.printStackTrace();
        }
!!!12292620.java!!!	onServiceDisconnected(inout name : ComponentName) : void
        Log.i(TAG, "@@@cec device list activity onServiceDisconnected success!");
