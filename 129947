format 74
"concurrent" // _unknown::java::util::concurrent
  revision 1
  modified_by 27 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/android-x86/libcore/luni/src/main/java/java/util/concurrent/"
  java_package "java.util.concurrent"
  package_ref 130075 // atomic

  classview 132891 "concurrent"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 252827 "AbstractExecutorService"
      abstract visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Provides default implementations of {@link ExecutorService}
execution methods. This class implements the <tt>submit</tt>,
<tt>invokeAny</tt> and <tt>invokeAll</tt> methods using a
{@link RunnableFuture} returned by <tt>newTaskFor</tt>, which defaults
to the {@link FutureTask} class provided in this package.  For example,
the implementation of <tt>submit(Runnable)</tt> creates an
associated <tt>RunnableFuture</tt> that is executed and
returned. Subclasses may override the <tt>newTaskFor</tt> methods
to return <tt>RunnableFuture</tt> implementations other than
<tt>FutureTask</tt>.

<p> <b>Extension example</b>. Here is a sketch of a class
that customizes {@link ThreadPoolExecutor} to use
a <tt>CustomTask</tt> class instead of the default <tt>FutureTask</tt>:
 <pre> {@code
public class CustomThreadPoolExecutor extends ThreadPoolExecutor {

  static class CustomTask<V> implements RunnableFuture<V> {...}

  protected <V> RunnableFuture<V> newTaskFor(Callable<V> c) {
      return new CustomTask<V>(c);
  }
  protected <V> RunnableFuture<V> newTaskFor(Runnable r, V v) {
      return new CustomTask<V>(r, v);
  }
  // ... add constructors, etc.
}}</pre>

@since 1.5
@author Doug Lea"
      classrelation 411163 // <realization>
	relation 411163 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 411163 // <realization>
	  b parent class_ref 252955 // ExecutorService
      end

      operation 1421083 "newTaskFor"
	protected return_type class_ref 253851 // RunnableFuture
	nparams 2
	  param inout name "runnable" type class_ref 151963 // Runnable
	  param inout name "value" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>RunnableFuture</tt> for the given runnable and default
value.

@param runnable the runnable task being wrapped
@param value the default value for the returned future
@return a <tt>RunnableFuture</tt> which when run will run the
underlying runnable and which, as a <tt>Future</tt>, will yield
the given value as its result and provide for cancellation of
the underlying task.
@since 1.6"
      end

      operation 1421211 "newTaskFor"
	protected return_type class_ref 253851 // RunnableFuture
	nparams 1
	  param inout name "callable" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a <tt>RunnableFuture</tt> for the given callable task.

@param callable the callable task being wrapped
@return a <tt>RunnableFuture</tt> which when run will call the
underlying callable and which, as a <tt>Future</tt>, will yield
the callable's result as its result and provide for
cancellation of the underlying task.
@since 1.6"
      end

      operation 1421339 "submit"
	public return_type class_ref 253339 // Future
	nparams 1
	  param inout name "task" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}"
      end

      operation 1421467 "submit"
	public return_type class_ref 253339 // Future
	nparams 2
	  param inout name "task" type class_ref 151963 // Runnable
	  param inout name "result" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}"
      end

      operation 1421595 "submit"
	public return_type class_ref 253339 // Future
	nparams 1
	  param inout name "task" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}"
      end

      operation 1421723 "doInvokeAny"
	private explicit_return_type "T"
	nparams 3
	  param inout name "tasks" type class_ref 160667 // Collection
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	nexceptions 3
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253595 // ExecutionException
	  exception class_ref 253723 // TimeoutException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "the main mechanics of invokeAny."
      end

      operation 1421851 "invokeAny"
	public explicit_return_type "T"
	nparams 1
	  param inout name "tasks" type class_ref 160667 // Collection
	nexceptions 2
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253595 // ExecutionException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1421979 "invokeAny"
	public explicit_return_type "T"
	nparams 3
	  param inout name "tasks" type class_ref 160667 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 3
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253595 // ExecutionException
	  exception class_ref 253723 // TimeoutException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1422107 "invokeAll"
	public return_type class_ref 131483 // List
	nparams 1
	  param inout name "tasks" type class_ref 160667 // Collection
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1422235 "invokeAll"
	public return_type class_ref 131483 // List
	nparams 3
	  param inout name "tasks" type class_ref 160667 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 252955 "ExecutorService"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed security manager docs
 END android-note

An {@link Executor} that provides methods to manage termination and
methods that can produce a {@link Future} for tracking progress of
one or more asynchronous tasks.

<p> An <tt>ExecutorService</tt> can be shut down, which will cause
it to reject new tasks.  Two different methods are provided for
shutting down an <tt>ExecutorService</tt>. The {@link #shutdown}
method will allow previously submitted tasks to execute before
terminating, while the {@link #shutdownNow} method prevents waiting
tasks from starting and attempts to stop currently executing tasks.
Upon termination, an executor has no tasks actively executing, no
tasks awaiting execution, and no new tasks can be submitted.  An
unused <tt>ExecutorService</tt> should be shut down to allow
reclamation of its resources.

<p> Method <tt>submit</tt> extends base method {@link
Executor#execute} by creating and returning a {@link Future} that
can be used to cancel execution and/or wait for completion.
Methods <tt>invokeAny</tt> and <tt>invokeAll</tt> perform the most
commonly useful forms of bulk execution, executing a collection of
tasks and then waiting for at least one, or all, to
complete. (Class {@link ExecutorCompletionService} can be used to
write customized variants of these methods.)

<p>The {@link Executors} class provides factory methods for the
executor services provided in this package.

<h3>Usage Examples</h3>

Here is a sketch of a network service in which threads in a thread
pool service incoming requests. It uses the preconfigured {@link
Executors#newFixedThreadPool} factory method:

 <pre> {@code
class NetworkService implements Runnable {
  private final ServerSocket serverSocket;
  private final ExecutorService pool;

  public NetworkService(int port, int poolSize)
      throws IOException {
    serverSocket = new ServerSocket(port);
    pool = Executors.newFixedThreadPool(poolSize);
  }

  public void run() { // run the service
    try {
      for (;;) {
        pool.execute(new Handler(serverSocket.accept()));
      }
    } catch (IOException ex) {
      pool.shutdown();
    }
  }
}

class Handler implements Runnable {
  private final Socket socket;
  Handler(Socket socket) { this.socket = socket; }
  public void run() {
    // read and service request on socket
  }
}}</pre>

The following method shuts down an <tt>ExecutorService</tt> in two phases,
first by calling <tt>shutdown</tt> to reject incoming tasks, and then
calling <tt>shutdownNow</tt>, if necessary, to cancel any lingering tasks:

 <pre> {@code
void shutdownAndAwaitTermination(ExecutorService pool) {
  pool.shutdown(); // Disable new tasks from being submitted
  try {
    // Wait a while for existing tasks to terminate
    if (!pool.awaitTermination(60, TimeUnit.SECONDS)) {
      pool.shutdownNow(); // Cancel currently executing tasks
      // Wait a while for tasks to respond to being cancelled
      if (!pool.awaitTermination(60, TimeUnit.SECONDS))
          System.err.println(\"Pool did not terminate\");
    }
  } catch (InterruptedException ie) {
    // (Re-)Cancel if current thread also interrupted
    pool.shutdownNow();
    // Preserve interrupt status
    Thread.currentThread().interrupt();
  }
}}</pre>

<p>Memory consistency effects: Actions in a thread prior to the
submission of a {@code Runnable} or {@code Callable} task to an
{@code ExecutorService}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
any actions taken by that task, which in turn <i>happen-before</i> the
result is retrieved via {@code Future.get()}.

@since 1.5
@author Doug Lea"
      classrelation 411035 // <generalisation>
	relation 411035 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 411035 // <generalisation>
	  b parent class_ref 253083 // Executor
      end

      operation 1419547 "shutdown"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initiates an orderly shutdown in which previously submitted
tasks are executed, but no new tasks will be accepted.
Invocation has no additional effect if already shut down.

<p>This method does not wait for previously submitted tasks to
complete execution.  Use {@link #awaitTermination awaitTermination}
to do that."
      end

      operation 1419675 "shutdownNow"
	public return_type class_ref 131483 // List
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to stop all actively executing tasks, halts the
processing of waiting tasks, and returns a list of the tasks
that were awaiting execution.

<p>This method does not wait for actively executing tasks to
terminate.  Use {@link #awaitTermination awaitTermination} to
do that.

<p>There are no guarantees beyond best-effort attempts to stop
processing actively executing tasks.  For example, typical
implementations will cancel via {@link Thread#interrupt}, so any
task that fails to respond to interrupts may never terminate.

@return list of tasks that never commenced execution"
      end

      operation 1419803 "isShutdown"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this executor has been shut down.

@return <tt>true</tt> if this executor has been shut down"
      end

      operation 1419931 "isTerminated"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if all tasks have completed following shut down.
Note that <tt>isTerminated</tt> is never <tt>true</tt> unless
either <tt>shutdown</tt> or <tt>shutdownNow</tt> was called first.

@return <tt>true</tt> if all tasks have completed following shut down"
      end

      operation 1420059 "awaitTermination"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Blocks until all tasks have completed execution after a shutdown
request, or the timeout occurs, or the current thread is
interrupted, whichever happens first.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return <tt>true</tt> if this executor terminated and
        <tt>false</tt> if the timeout elapsed before termination
@throws InterruptedException if interrupted while waiting"
      end

      operation 1420187 "submit"
	public return_type class_ref 253339 // Future
	nparams 1
	  param inout name "task" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a value-returning task for execution and returns a
Future representing the pending results of the task. The
Future's <tt>get</tt> method will return the task's result upon
successful completion.

<p>
If you would like to immediately block waiting
for a task, you can use constructions of the form
<tt>result = exec.submit(aCallable).get();</tt>

<p> Note: The {@link Executors} class includes a set of methods
that can convert some other common closure-like objects,
for example, {@link java.security.PrivilegedAction} to
{@link Callable} form so they can be submitted.

@param task the task to submit
@return a Future representing pending completion of the task
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if the task is null"
      end

      operation 1420315 "submit"
	public return_type class_ref 253339 // Future
	nparams 2
	  param inout name "task" type class_ref 151963 // Runnable
	  param inout name "result" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a Runnable task for execution and returns a Future
representing that task. The Future's <tt>get</tt> method will
return the given result upon successful completion.

@param task the task to submit
@param result the result to return
@return a Future representing pending completion of the task
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if the task is null"
      end

      operation 1420443 "submit"
	public return_type class_ref 253339 // Future
	nparams 1
	  param inout name "task" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a Runnable task for execution and returns a Future
representing that task. The Future's <tt>get</tt> method will
return <tt>null</tt> upon <em>successful</em> completion.

@param task the task to submit
@return a Future representing pending completion of the task
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if the task is null"
      end

      operation 1420571 "invokeAll"
	public return_type class_ref 131483 // List
	nparams 1
	  param inout name "tasks" type class_ref 160667 // Collection
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning a list of Futures holding
their status and results when all complete.
{@link Future#isDone} is <tt>true</tt> for each
element of the returned list.
Note that a <em>completed</em> task could have
terminated either normally or by throwing an exception.
The results of this method are undefined if the given
collection is modified while this operation is in progress.

@param tasks the collection of tasks
@return A list of Futures representing the tasks, in the same
        sequential order as produced by the iterator for the
        given task list, each of which has completed.
@throws InterruptedException if interrupted while waiting, in
        which case unfinished tasks are cancelled.
@throws NullPointerException if tasks or any of its elements are <tt>null</tt>
@throws RejectedExecutionException if any task cannot be
        scheduled for execution"
      end

      operation 1420699 "invokeAll"
	public return_type class_ref 131483 // List
	nparams 3
	  param inout name "tasks" type class_ref 160667 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning a list of Futures holding
their status and results
when all complete or the timeout expires, whichever happens first.
{@link Future#isDone} is <tt>true</tt> for each
element of the returned list.
Upon return, tasks that have not completed are cancelled.
Note that a <em>completed</em> task could have
terminated either normally or by throwing an exception.
The results of this method are undefined if the given
collection is modified while this operation is in progress.

@param tasks the collection of tasks
@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return a list of Futures representing the tasks, in the same
        sequential order as produced by the iterator for the
        given task list. If the operation did not time out,
        each task will have completed. If it did time out, some
        of these tasks will not have completed.
@throws InterruptedException if interrupted while waiting, in
        which case unfinished tasks are cancelled
@throws NullPointerException if tasks, any of its elements, or
        unit are <tt>null</tt>
@throws RejectedExecutionException if any task cannot be scheduled
        for execution"
      end

      operation 1420827 "invokeAny"
	public explicit_return_type "T"
	nparams 1
	  param inout name "tasks" type class_ref 160667 // Collection
	nexceptions 2
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253595 // ExecutionException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning the result
of one that has completed successfully (i.e., without throwing
an exception), if any do. Upon normal or exceptional return,
tasks that have not completed are cancelled.
The results of this method are undefined if the given
collection is modified while this operation is in progress.

@param tasks the collection of tasks
@return the result returned by one of the tasks
@throws InterruptedException if interrupted while waiting
@throws NullPointerException if tasks or any element task
        subject to execution is <tt>null</tt>
@throws IllegalArgumentException if tasks is empty
@throws ExecutionException if no task successfully completes
@throws RejectedExecutionException if tasks cannot be scheduled
        for execution"
      end

      operation 1420955 "invokeAny"
	public explicit_return_type "T"
	nparams 3
	  param inout name "tasks" type class_ref 160667 // Collection
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 3
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253595 // ExecutionException
	  exception class_ref 253723 // TimeoutException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given tasks, returning the result
of one that has completed successfully (i.e., without throwing
an exception), if any do before the given timeout elapses.
Upon normal or exceptional return, tasks that have not
completed are cancelled.
The results of this method are undefined if the given
collection is modified while this operation is in progress.

@param tasks the collection of tasks
@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return the result returned by one of the tasks.
@throws InterruptedException if interrupted while waiting
@throws NullPointerException if tasks, or unit, or any element
        task subject to execution is <tt>null</tt>
@throws TimeoutException if the given timeout elapses before
        any task successfully completes
@throws ExecutionException if no task successfully completes
@throws RejectedExecutionException if tasks cannot be scheduled
        for execution"
      end
    end

    class 253083 "Executor"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that executes submitted {@link Runnable} tasks. This
interface provides a way of decoupling task submission from the
mechanics of how each task will be run, including details of thread
use, scheduling, etc.  An <tt>Executor</tt> is normally used
instead of explicitly creating threads. For example, rather than
invoking <tt>new Thread(new(RunnableTask())).start()</tt> for each
of a set of tasks, you might use:

<pre>
Executor executor = <em>anExecutor</em>;
executor.execute(new RunnableTask1());
executor.execute(new RunnableTask2());
...
</pre>

However, the <tt>Executor</tt> interface does not strictly
require that execution be asynchronous. In the simplest case, an
executor can run the submitted task immediately in the caller's
thread:

 <pre> {@code
class DirectExecutor implements Executor {
  public void execute(Runnable r) {
    r.run();
  }
}}</pre>

More typically, tasks are executed in some thread other
than the caller's thread.  The executor below spawns a new thread
for each task.

 <pre> {@code
class ThreadPerTaskExecutor implements Executor {
  public void execute(Runnable r) {
    new Thread(r).start();
  }
}}</pre>

Many <tt>Executor</tt> implementations impose some sort of
limitation on how and when tasks are scheduled.  The executor below
serializes the submission of tasks to a second executor,
illustrating a composite executor.

 <pre> {@code
class SerialExecutor implements Executor {
  final Queue<Runnable> tasks = new ArrayDeque<Runnable>();
  final Executor executor;
  Runnable active;

  SerialExecutor(Executor executor) {
    this.executor = executor;
  }

  public synchronized void execute(final Runnable r) {
    tasks.offer(new Runnable() {
      public void run() {
        try {
          r.run();
        } finally {
          scheduleNext();
        }
      }
    });
    if (active == null) {
      scheduleNext();
    }
  }

  protected synchronized void scheduleNext() {
    if ((active = tasks.poll()) != null) {
      executor.execute(active);
    }
  }
}}</pre>

The <tt>Executor</tt> implementations provided in this package
implement {@link ExecutorService}, which is a more extensive
interface.  The {@link ThreadPoolExecutor} class provides an
extensible thread pool implementation. The {@link Executors} class
provides convenient factory methods for these Executors.

<p>Memory consistency effects: Actions in a thread prior to
submitting a {@code Runnable} object to an {@code Executor}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
its execution begins, perhaps in another thread.

@since 1.5
@author Doug Lea"
      operation 1419419 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given command at some time in the future.  The command
may execute in a new thread, in a pooled thread, or in the calling
thread, at the discretion of the <tt>Executor</tt> implementation.

@param command the runnable task
@throws RejectedExecutionException if this task cannot be
accepted for execution.
@throws NullPointerException if command is null"
      end
    end

    class 253211 "TimeUnit"
      visibility public stereotype "enum"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}enum ${name}${implements} {
${items};
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>TimeUnit</tt> represents time durations at a given unit of
granularity and provides utility methods to convert across units,
and to perform timing and delay operations in these units.  A
<tt>TimeUnit</tt> does not maintain time information, but only
helps organize and use time representations that may be maintained
separately across various contexts.  A nanosecond is defined as one
thousandth of a microsecond, a microsecond as one thousandth of a
millisecond, a millisecond as one thousandth of a second, a minute
as sixty seconds, an hour as sixty minutes, and a day as twenty four
hours.

<p>A <tt>TimeUnit</tt> is mainly used to inform time-based methods
how a given timing parameter should be interpreted. For example,
the following code will timeout in 50 milliseconds if the {@link
java.util.concurrent.locks.Lock lock} is not available:

 <pre> {@code
Lock lock = ...;
if (lock.tryLock(50L, TimeUnit.MILLISECONDS)) ...}</pre>

while this code will timeout in 50 seconds:
 <pre> {@code
Lock lock = ...;
if (lock.tryLock(50L, TimeUnit.SECONDS)) ...}</pre>

Note however, that there is no guarantee that a particular timeout
implementation will be able to notice the passage of time at the
same granularity as the given <tt>TimeUnit</tt>.

@since 1.5
@author Doug Lea"
      attribute 398107 "NANOSECONDS"
	public type class_ref 253211 // TimeUnit
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return d; }
        public long toMicros(long d)  { return d/(C1/C0); }
        public long toMillis(long d)  { return d/(C2/C0); }
        public long toSeconds(long d) { return d/(C3/C0); }
        public long toMinutes(long d) { return d/(C4/C0); }
        public long toHours(long d)   { return d/(C5/C0); }
        public long toDays(long d)    { return d/(C6/C0); }
        public long convert(long d, TimeUnit u) { return u.toNanos(d); }
        int excessNanos(long d, long m) { return (int)(d - (m*C2)); }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 398235 "MICROSECONDS"
	public type class_ref 253211 // TimeUnit
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C1/C0, MAX/(C1/C0)); }
        public long toMicros(long d)  { return d; }
        public long toMillis(long d)  { return d/(C2/C1); }
        public long toSeconds(long d) { return d/(C3/C1); }
        public long toMinutes(long d) { return d/(C4/C1); }
        public long toHours(long d)   { return d/(C5/C1); }
        public long toDays(long d)    { return d/(C6/C1); }
        public long convert(long d, TimeUnit u) { return u.toMicros(d); }
        int excessNanos(long d, long m) { return (int)((d*C1) - (m*C2)); }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 398363 "MILLISECONDS"
	public type class_ref 253211 // TimeUnit
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C2/C0, MAX/(C2/C0)); }
        public long toMicros(long d)  { return x(d, C2/C1, MAX/(C2/C1)); }
        public long toMillis(long d)  { return d; }
        public long toSeconds(long d) { return d/(C3/C2); }
        public long toMinutes(long d) { return d/(C4/C2); }
        public long toHours(long d)   { return d/(C5/C2); }
        public long toDays(long d)    { return d/(C6/C2); }
        public long convert(long d, TimeUnit u) { return u.toMillis(d); }
        int excessNanos(long d, long m) { return 0; }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 398491 "SECONDS"
	public type class_ref 253211 // TimeUnit
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C3/C0, MAX/(C3/C0)); }
        public long toMicros(long d)  { return x(d, C3/C1, MAX/(C3/C1)); }
        public long toMillis(long d)  { return x(d, C3/C2, MAX/(C3/C2)); }
        public long toSeconds(long d) { return d; }
        public long toMinutes(long d) { return d/(C4/C3); }
        public long toHours(long d)   { return d/(C5/C3); }
        public long toDays(long d)    { return d/(C6/C3); }
        public long convert(long d, TimeUnit u) { return u.toSeconds(d); }
        int excessNanos(long d, long m) { return 0; }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 398619 "MINUTES"
	public type class_ref 253211 // TimeUnit
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C4/C0, MAX/(C4/C0)); }
        public long toMicros(long d)  { return x(d, C4/C1, MAX/(C4/C1)); }
        public long toMillis(long d)  { return x(d, C4/C2, MAX/(C4/C2)); }
        public long toSeconds(long d) { return x(d, C4/C3, MAX/(C4/C3)); }
        public long toMinutes(long d) { return d; }
        public long toHours(long d)   { return d/(C5/C4); }
        public long toDays(long d)    { return d/(C6/C4); }
        public long convert(long d, TimeUnit u) { return u.toMinutes(d); }
        int excessNanos(long d, long m) { return 0; }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 398747 "HOURS"
	public type class_ref 253211 // TimeUnit
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C5/C0, MAX/(C5/C0)); }
        public long toMicros(long d)  { return x(d, C5/C1, MAX/(C5/C1)); }
        public long toMillis(long d)  { return x(d, C5/C2, MAX/(C5/C2)); }
        public long toSeconds(long d) { return x(d, C5/C3, MAX/(C5/C3)); }
        public long toMinutes(long d) { return x(d, C5/C4, MAX/(C5/C4)); }
        public long toHours(long d)   { return d; }
        public long toDays(long d)    { return d/(C6/C5); }
        public long convert(long d, TimeUnit u) { return u.toHours(d); }
        int excessNanos(long d, long m) { return 0; }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 398875 "DAYS"
	public type class_ref 253211 // TimeUnit
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${@}${name} {
        public long toNanos(long d)   { return x(d, C6/C0, MAX/(C6/C0)); }
        public long toMicros(long d)  { return x(d, C6/C1, MAX/(C6/C1)); }
        public long toMillis(long d)  { return x(d, C6/C2, MAX/(C6/C2)); }
        public long toSeconds(long d) { return x(d, C6/C3, MAX/(C6/C3)); }
        public long toMinutes(long d) { return x(d, C6/C4, MAX/(C6/C4)); }
        public long toHours(long d)   { return x(d, C6/C5, MAX/(C6/C5)); }
        public long toDays(long d)    { return d; }
        public long convert(long d, TimeUnit u) { return u.toDays(d); }
        int excessNanos(long d, long m) { return 0; }
    },${comment}"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 399003 "C0"
	class_attribute const_attribute package explicit_type "long"
	init_value " 1L"
	stereotype "attribute"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Handy constants for conversion methods"
      end

      attribute 399131 "C1"
	class_attribute const_attribute package explicit_type "long"
	init_value " C0 * 1000L"
	stereotype "attribute"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 399259 "C2"
	class_attribute const_attribute package explicit_type "long"
	init_value " C1 * 1000L"
	stereotype "attribute"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 399387 "C3"
	class_attribute const_attribute package explicit_type "long"
	init_value " C2 * 1000L"
	stereotype "attribute"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 399515 "C4"
	class_attribute const_attribute package explicit_type "long"
	init_value " C3 * 60L"
	stereotype "attribute"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 399643 "C5"
	class_attribute const_attribute package explicit_type "long"
	init_value " C4 * 60L"
	stereotype "attribute"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 399771 "C6"
	class_attribute const_attribute package explicit_type "long"
	init_value " C5 * 24L"
	stereotype "attribute"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 399899 "MAX"
	class_attribute const_attribute package explicit_type "long"
	init_value " Long.MAX_VALUE"
	stereotype "attribute"
	cpp_decl "  ${name}${value},${comment}"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1626011 "x"
	class_operation package explicit_return_type "long"
	nparams 3
	  param in name "d" explicit_type "long"
	  param in name "m" explicit_type "long"
	  param in name "over" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Scale d by m, checking for overflow.
This has a short name to make above code more readable."
      end

      operation 1626139 "convert"
	public explicit_return_type "long"
	nparams 2
	  param in name "sourceDuration" explicit_type "long"
	  param inout name "sourceUnit" type class_ref 253211 // TimeUnit
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " To maintain full signature compatibility with 1.5, and to improve the
 clarity of the generated javadoc (see 6287639: Abstract methods in
 enum classes should not be listed as abstract), method convert
 etc. are not declared abstract but otherwise act as abstract methods.

Convert the given time duration in the given unit to this
unit.  Conversions from finer to coarser granularities
truncate, so lose precision. For example converting
<tt>999</tt> milliseconds to seconds results in
<tt>0</tt>. Conversions from coarser to finer granularities
with arguments that would numerically overflow saturate to
<tt>Long.MIN_VALUE</tt> if negative or <tt>Long.MAX_VALUE</tt>
if positive.

<p>For example, to convert 10 minutes to milliseconds, use:
<tt>TimeUnit.MILLISECONDS.convert(10L, TimeUnit.MINUTES)</tt>

@param sourceDuration the time duration in the given <tt>sourceUnit</tt>
@param sourceUnit the unit of the <tt>sourceDuration</tt> argument
@return the converted duration in this unit,
or <tt>Long.MIN_VALUE</tt> if conversion would negatively
overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow."
      end

      operation 1626267 "toNanos"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <tt>NANOSECONDS.convert(duration, this)</tt>.
@param duration the duration
@return the converted duration,
or <tt>Long.MIN_VALUE</tt> if conversion would negatively
overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
@see #convert"
      end

      operation 1626395 "toMicros"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <tt>MICROSECONDS.convert(duration, this)</tt>.
@param duration the duration
@return the converted duration,
or <tt>Long.MIN_VALUE</tt> if conversion would negatively
overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
@see #convert"
      end

      operation 1626523 "toMillis"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <tt>MILLISECONDS.convert(duration, this)</tt>.
@param duration the duration
@return the converted duration,
or <tt>Long.MIN_VALUE</tt> if conversion would negatively
overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
@see #convert"
      end

      operation 1626651 "toSeconds"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <tt>SECONDS.convert(duration, this)</tt>.
@param duration the duration
@return the converted duration,
or <tt>Long.MIN_VALUE</tt> if conversion would negatively
overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
@see #convert"
      end

      operation 1626779 "toMinutes"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <tt>MINUTES.convert(duration, this)</tt>.
@param duration the duration
@return the converted duration,
or <tt>Long.MIN_VALUE</tt> if conversion would negatively
overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
@see #convert
@since 1.6"
      end

      operation 1626907 "toHours"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <tt>HOURS.convert(duration, this)</tt>.
@param duration the duration
@return the converted duration,
or <tt>Long.MIN_VALUE</tt> if conversion would negatively
overflow, or <tt>Long.MAX_VALUE</tt> if it would positively overflow.
@see #convert
@since 1.6"
      end

      operation 1627035 "toDays"
	public explicit_return_type "long"
	nparams 1
	  param in name "duration" explicit_type "long"
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to <tt>DAYS.convert(duration, this)</tt>.
@param duration the duration
@return the converted duration
@see #convert
@since 1.6"
      end

      operation 1627163 "excessNanos"
	abstract package explicit_return_type "int"
	nparams 2
	  param in name "d" explicit_type "long"
	  param in name "m" explicit_type "long"
	
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility to compute the excess-nanosecond argument to wait,
sleep, join.
@param d the duration
@param m the number of milliseconds
@return the number of nanoseconds"
      end

      operation 1627291 "timedWait"
	public explicit_return_type "void"
	nparams 2
	  param inout name "obj" type class_ref 3401484 // Object
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a timed {@link Object#wait(long, int) Object.wait}
using this time unit.
This is a convenience method that converts timeout arguments
into the form required by the <tt>Object.wait</tt> method.

<p>For example, you could implement a blocking <tt>poll</tt>
method (see {@link BlockingQueue#poll BlockingQueue.poll})
using:

 <pre> {@code
public synchronized Object poll(long timeout, TimeUnit unit)
    throws InterruptedException {
  while (empty) {
    unit.timedWait(this, timeout);
    ...
  }
}}</pre>

@param obj the object to wait on
@param timeout the maximum time to wait. If less than
or equal to zero, do not wait at all.
@throws InterruptedException if interrupted while waiting"
      end

      operation 1627419 "timedJoin"
	public explicit_return_type "void"
	nparams 2
	  param inout name "thread" type class_ref 1201420 // Thread
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a timed {@link Thread#join(long, int) Thread.join}
using this time unit.
This is a convenience method that converts time arguments into the
form required by the <tt>Thread.join</tt> method.

@param thread the thread to wait for
@param timeout the maximum time to wait. If less than
or equal to zero, do not wait at all.
@throws InterruptedException if interrupted while waiting"
      end

      operation 1627547 "sleep"
	public explicit_return_type "void"
	nparams 1
	  param in name "timeout" explicit_type "long"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a {@link Thread#sleep(long, int) Thread.sleep} using
this time unit.
This is a convenience method that converts time arguments into the
form required by the <tt>Thread.sleep</tt> method.

@param timeout the minimum time to sleep. If less than
or equal to zero, do not sleep at all.
@throws InterruptedException if interrupted while sleeping"
      end
    end

    class 253339 "Future"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A <tt>Future</tt> represents the result of an asynchronous
computation.  Methods are provided to check if the computation is
complete, to wait for its completion, and to retrieve the result of
the computation.  The result can only be retrieved using method
<tt>get</tt> when the computation has completed, blocking if
necessary until it is ready.  Cancellation is performed by the
<tt>cancel</tt> method.  Additional methods are provided to
determine if the task completed normally or was cancelled. Once a
computation has completed, the computation cannot be cancelled.
If you would like to use a <tt>Future</tt> for the sake
of cancellability but not provide a usable result, you can
declare types of the form {@code Future<?>} and
return <tt>null</tt> as a result of the underlying task.

<p>
<b>Sample Usage</b> (Note that the following classes are all
made-up.) <p>
 <pre> {@code
interface ArchiveSearcher { String search(String target); }
class App {
  ExecutorService executor = ...
  ArchiveSearcher searcher = ...
  void showSearch(final String target)
      throws InterruptedException {
    Future<String> future
      = executor.submit(new Callable<String>() {
        public String call() {
            return searcher.search(target);
        }});
    displayOtherThings(); // do other things while searching
    try {
      displayText(future.get()); // use future
    } catch (ExecutionException ex) { cleanup(); return; }
  }
}}</pre>

The {@link FutureTask} class is an implementation of <tt>Future</tt> that
implements <tt>Runnable</tt>, and so may be executed by an <tt>Executor</tt>.
For example, the above construction with <tt>submit</tt> could be replaced by:
 <pre> {@code
    FutureTask<String> future =
      new FutureTask<String>(new Callable<String>() {
        public String call() {
          return searcher.search(target);
      }});
    executor.execute(future);}</pre>

<p>Memory consistency effects: Actions taken by the asynchronous computation
<a href=\"package-summary.html#MemoryVisibility\"> <i>happen-before</i></a>
actions following the corresponding {@code Future.get()} in another thread.

@see FutureTask
@see Executor
@since 1.5
@author Doug Lea
@param <V> The result type returned by this Future's <tt>get</tt> method"
      operation 1529755 "cancel"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "mayInterruptIfRunning" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to cancel execution of this task.  This attempt will
fail if the task has already completed, has already been cancelled,
or could not be cancelled for some other reason. If successful,
and this task has not started when <tt>cancel</tt> is called,
this task should never run.  If the task has already started,
then the <tt>mayInterruptIfRunning</tt> parameter determines
whether the thread executing this task should be interrupted in
an attempt to stop the task.

<p>After this method returns, subsequent calls to {@link #isDone} will
always return <tt>true</tt>.  Subsequent calls to {@link #isCancelled}
will always return <tt>true</tt> if this method returned <tt>true</tt>.

@param mayInterruptIfRunning <tt>true</tt> if the thread executing this
task should be interrupted; otherwise, in-progress tasks are allowed
to complete
@return <tt>false</tt> if the task could not be cancelled,
typically because it has already completed normally;
<tt>true</tt> otherwise"
      end

      operation 1529883 "isCancelled"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this task was cancelled before it completed
normally.

@return <tt>true</tt> if this task was cancelled before it completed"
      end

      operation 1530011 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this task completed.

Completion may be due to normal termination, an exception, or
cancellation -- in all of these cases, this method will return
<tt>true</tt>.

@return <tt>true</tt> if this task completed"
      end

      operation 1530139 "get"
	public explicit_return_type "V"
	nparams 0
	nexceptions 2
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253595 // ExecutionException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for the computation to complete, and then
retrieves its result.

@return the computed result
@throws CancellationException if the computation was cancelled
@throws ExecutionException if the computation threw an
exception
@throws InterruptedException if the current thread was interrupted
while waiting"
      end

      operation 1530267 "get"
	public explicit_return_type "V"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 3
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253595 // ExecutionException
	  exception class_ref 253723 // TimeoutException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for at most the given time for the computation
to complete, and then retrieves its result, if available.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return the computed result
@throws CancellationException if the computation was cancelled
@throws ExecutionException if the computation threw an
exception
@throws InterruptedException if the current thread was interrupted
while waiting
@throws TimeoutException if the wait timed out"
      end
    end

    class 253467 "Callable"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A task that returns a result and may throw an exception.
Implementors define a single method with no arguments called
<tt>call</tt>.

<p>The <tt>Callable</tt> interface is similar to {@link
java.lang.Runnable}, in that both are designed for classes whose
instances are potentially executed by another thread.  A
<tt>Runnable</tt>, however, does not return a result and cannot
throw a checked exception.

<p> The {@link Executors} class contains utility methods to
convert from other common forms to <tt>Callable</tt> classes.

@see Executor
@since 1.5
@author Doug Lea
@param <V> the result type of method <tt>call</tt>"
      operation 1434267 "call"
	public explicit_return_type "V"
	nparams 0
	nexceptions 1
	  exception class_ref 132251 // Exception
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Computes a result, or throws an exception if unable to do so.

@return computed result
@throws Exception if unable to compute a result"
      end
    end

    class 253595 "ExecutionException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception thrown when attempting to retrieve the result of a task
that aborted by throwing an exception. This exception can be
inspected using the {@link #getCause()} method.

@see Future
@since 1.5
@author Doug Lea"
      classrelation 435995 // <generalisation>
	relation 435995 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 435995 // <generalisation>
	  b parent class_ref 132251 // Exception
      end

      attribute 370203 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7830266012832686185L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1529243 "ExecutionException"
	protected explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <tt>ExecutionException</tt> with no detail message.
The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause(Throwable) initCause}."
      end

      operation 1529371 "ExecutionException"
	protected explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <tt>ExecutionException</tt> with the specified detail
message. The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause(Throwable) initCause}.

@param message the detail message"
      end

      operation 1529499 "ExecutionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <tt>ExecutionException</tt> with the specified detail
message and cause.

@param  message the detail message
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)"
      end

      operation 1529627 "ExecutionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an <tt>ExecutionException</tt> with the specified cause.
The detail message is set to {@code (cause == null ? null :
cause.toString())} (which typically contains the class and
detail message of <tt>cause</tt>).

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)"
      end
    end

    class 253723 "TimeoutException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception thrown when a blocking operation times out.  Blocking
operations for which a timeout is specified need a means to
indicate that the timeout has occurred. For many such operations it
is possible to return a value that indicates timeout; when that is
not possible or desirable then <tt>TimeoutException</tt> should be
declared and thrown.

@since 1.5
@author Doug Lea"
      classrelation 463771 // <generalisation>
	relation 463771 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 463771 // <generalisation>
	  b parent class_ref 132251 // Exception
      end

      attribute 397979 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1900926677490660714L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1625755 "TimeoutException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>TimeoutException</tt> with no specified detail
message."
      end

      operation 1625883 "TimeoutException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>TimeoutException</tt> with the specified detail
message.

@param message the detail message"
      end
    end

    class 253851 "RunnableFuture"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 253339 // Future
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@link Future} that is {@link Runnable}. Successful execution of
the <tt>run</tt> method causes completion of the <tt>Future</tt>
and allows access to its results.
@see FutureTask
@see Executor
@since 1.6
@author Doug Lea
@param <V> The result type returned by this Future's <tt>get</tt> method"
      classrelation 436635 // <generalisation>
	relation 436635 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 436635 // <generalisation>
	  b parent class_ref 151963 // Runnable
      end

      classrelation 436763 // <realization>
	relation 436763 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 436763 // <realization>
	  b parent class_ref 253339 // Future
      end

      operation 1530395 "run"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets this Future to the result of its computation
unless it has been cancelled."
      end
    end

    class 253979 "ArrayBlockingQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 232859 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 254107 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

A bounded {@linkplain BlockingQueue blocking queue} backed by an
array.  This queue orders elements FIFO (first-in-first-out).  The
<em>head</em> of the queue is that element that has been on the
queue the longest time.  The <em>tail</em> of the queue is that
element that has been on the queue the shortest time. New elements
are inserted at the tail of the queue, and the queue retrieval
operations obtain elements at the head of the queue.

<p>This is a classic &quot;bounded buffer&quot;, in which a
fixed-sized array holds elements inserted by producers and
extracted by consumers.  Once created, the capacity cannot be
changed.  Attempts to {@code put} an element into a full queue
will result in the operation blocking; attempts to {@code take} an
element from an empty queue will similarly block.

<p>This class supports an optional fairness policy for ordering
waiting producer and consumer threads.  By default, this ordering
is not guaranteed. However, a queue constructed with fairness set
to {@code true} grants threads access in FIFO order. Fairness
generally decreases throughput but reduces variability and avoids
starvation.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 411291 // <realization>
	relation 411291 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 411291 // <realization>
	  b parent class_ref 232859 // AbstractQueue
      end

      classrelation 411547 // <realization>
	relation 411547 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 411547 // <realization>
	  b parent class_ref 254107 // BlockingQueue
      end

      classrelation 411675 // <realization>
	relation 411675 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 411675 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 352283 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -817911632652898426L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Serialization ID. This class relies on default serialization
even for the items array, which is default-serialized, even if
it is empty. Otherwise it could not be declared final, which is
necessary here.
"
      end

      classrelation 411803 // items (<unidirectional association>)
	relation 411803 --->
	  a role_name "items" multiplicity "[]" const_relation package
	    comment " The queued items 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 411803 // items (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      attribute 352411 "takeIndex"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " items index for next take, poll, peek or remove "
      end

      attribute 352539 "putIndex"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " items index for next put, offer, or add "
      end

      attribute 352667 "count"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of elements in the queue "
      end

      classrelation 411931 // lock (<unidirectional association>)
	relation 411931 --->
	  a role_name "lock" const_relation package
	    comment "
Concurrency control uses the classic two-condition algorithm
found in any textbook.

 Main lock guarding all access 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 411931 // lock (<unidirectional association>)
	  b parent class_ref 254235 // ReentrantLock
      end

      classrelation 412059 // notEmpty (<unidirectional association>)
	relation 412059 --->
	  a role_name "notEmpty" const_relation private
	    comment " Condition for waiting takes 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 412059 // notEmpty (<unidirectional association>)
	  b parent class_ref 254363 // Condition
      end

      classrelation 412187 // notFull (<unidirectional association>)
	relation 412187 --->
	  a role_name "notFull" const_relation private
	    comment " Condition for waiting puts 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 412187 // notFull (<unidirectional association>)
	  b parent class_ref 254363 // Condition
      end

      class 254491 "Itrs"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	class 254619 "Node"
	  visibility private 
	  nactuals 1
	  actual class class_ref 157851 // WeakReference
	    rank 0 explicit_value ""
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 412443 // <realization>
	    relation 412443 -_-|>
	      stereotype "bind"
	      a public
		cpp default "${type}"
		java "${type}"
		classrelation_ref 412443 // <realization>
	      b parent class_ref 157851 // WeakReference
	  end

	  classrelation 412571 // next (<unidirectional association>)
	    relation 412571 --->
	      a role_name "next" package
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 412571 // next (<unidirectional association>)
	      b parent class_ref 254619 // Node
	  end

	  operation 1427483 "Node"
	    package explicit_return_type ""
	    nparams 2
	      param inout name "iterator" type class_ref 254747 // Itr
	      param inout name "next" type class_ref 254619 // Node
	    cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	    cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	attribute 352795 "cycles"
	  package explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Incremented whenever takeIndex wraps around to 0 "
	end

	classrelation 412699 // head (<unidirectional association>)
	  relation 412699 --->
	    a role_name "head" private
	      comment " Linked list of weak iterator references 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 412699 // head (<unidirectional association>)
	    b parent class_ref 254619 // Node
	end

	classrelation 412827 // sweeper (<unidirectional association>)
	  relation 412827 --->
	    a role_name "sweeper" init_value " null" private
	      comment " Used to expunge stale iterators 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 412827 // sweeper (<unidirectional association>)
	    b parent class_ref 254619 // Node
	end

	attribute 352923 "SHORT_SWEEP_PROBES"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 4"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 353051 "LONG_SWEEP_PROBES"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 16"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1427611 "Itrs"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "initial" type class_ref 254747 // Itr
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1427739 "doSomeSweeping"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "tryHarder" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sweeps itrs, looking for and expunging stale iterators.
If at least one was found, tries harder to find more.
Called only from iterating thread.

@param tryHarder whether to start in try-harder mode, because
there is known to be at least one iterator to collect"
	end

	operation 1427867 "register"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "itr" type class_ref 254747 // Itr
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adds a new iterator to the linked list of tracked iterators."
	end

	operation 1427995 "takeIndexWrapped"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever takeIndex wraps around to 0.

Notifies all iterators, and expunges any that are now stale."
	end

	operation 1428123 "removedAt"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "removedIndex" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever an interior remove (not at takeIndex) occured.

Notifies all iterators, and expunges any that are now stale."
	end

	operation 1428251 "queueIsEmpty"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever the queue becomes empty.

Notifies all active iterators that the queue is empty,
clears all weak refs, and unlinks the itrs datastructure."
	end

	operation 1428379 "elementDequeued"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever an element has been dequeued (at takeIndex)."
	end
      end

      classrelation 412315 // itrs (<unidirectional association>)
	relation 412315 --->
	  a role_name "itrs" init_value " null" package
	    comment "
Shared state for currently active iterators, or null if there
are known not to be any.  Allows queue operations to update
iterator state.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 412315 // itrs (<unidirectional association>)
	  b parent class_ref 254491 // Itrs
      end

      operation 1423771 "inc"
	package explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Internal helper methods

Circularly increment i."
      end

      operation 1423899 "dec"
	package explicit_return_type "int"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Circularly decrement i."
      end

      operation 1424027 "itemAt"
	package explicit_return_type "E"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns item at index i."
      end

      operation 1424155 "checkNotNull"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws NullPointerException if argument is null.

@param v the element"
      end

      operation 1424283 "enqueue"
	private explicit_return_type "void"
	nparams 1
	  param inout name "x" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts element at current put position, advances, and signals.
Call only when holding lock."
      end

      operation 1424411 "dequeue"
	private explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Extracts element at current take position, advances, and signals.
Call only when holding lock."
      end

      operation 1424539 "removeAt"
	package explicit_return_type "void"
	nparams 1
	  param in name "removeIndex" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Deletes item at array index removeIndex.
Utility for remove(Object) and iterator.remove.
Call only when holding lock."
      end

      operation 1424667 "ArrayBlockingQueue"
	public explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code ArrayBlockingQueue} with the given (fixed)
capacity and default access policy.

@param capacity the capacity of this queue
@throws IllegalArgumentException if {@code capacity < 1}"
      end

      operation 1424795 "ArrayBlockingQueue"
	public explicit_return_type ""
	nparams 2
	  param in name "capacity" explicit_type "int"
	  param inout name "fair" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code ArrayBlockingQueue} with the given (fixed)
capacity and the specified access policy.

@param capacity the capacity of this queue
@param fair if {@code true} then queue accesses for threads blocked
       on insertion or removal, are processed in FIFO order;
       if {@code false} the access order is unspecified.
@throws IllegalArgumentException if {@code capacity < 1}"
      end

      operation 1424923 "ArrayBlockingQueue"
	public explicit_return_type ""
	nparams 3
	  param in name "capacity" explicit_type "int"
	  param inout name "fair" explicit_type "boolean"
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<? extends E> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an {@code ArrayBlockingQueue} with the given (fixed)
capacity, the specified access policy and initially containing the
elements of the given collection,
added in traversal order of the collection's iterator.

@param capacity the capacity of this queue
@param fair if {@code true} then queue accesses for threads blocked
       on insertion or removal, are processed in FIFO order;
       if {@code false} the access order is unspecified.
@param c the collection of elements to initially contain
@throws IllegalArgumentException if {@code capacity} is less than
        {@code c.size()}, or less than 1.
@throws NullPointerException if the specified collection or any
        of its elements are null"
      end

      operation 1425051 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue if it is
possible to do so immediately without exceeding the queue's capacity,
returning {@code true} upon success and throwing an
{@code IllegalStateException} if this queue is full.

@param e the element to add
@return {@code true} (as specified by {@link Collection#add})
@throws IllegalStateException if this queue is full
@throws NullPointerException if the specified element is null"
      end

      operation 1425179 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue if it is
possible to do so immediately without exceeding the queue's capacity,
returning {@code true} upon success and {@code false} if this queue
is full.  This method is generally preferable to method {@link #add},
which can fail to insert an element only by throwing an exception.

@throws NullPointerException if the specified element is null"
      end

      operation 1425307 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue, waiting
for space to become available if the queue is full.

@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}"
      end

      operation 1425435 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue, waiting
up to the specified wait time for space to become available if
the queue is full.

@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}"
      end

      operation 1425563 "poll"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1425691 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1425819 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1425947 "peek"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1426075 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is overridden to remove the reference to collections
 greater in size than Integer.MAX_VALUE

Returns the number of elements in this queue.

@return the number of elements in this queue"
      end

      operation 1426203 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is a modified copy of the inherited doc comment,
 without the reference to unlimited queues.

Returns the number of additional elements that this queue can ideally
(in the absence of memory or resource constraints) accept without
blocking. This is always equal to the initial capacity of this queue
less the current {@code size} of this queue.

<p>Note that you <em>cannot</em> always tell if an attempt to insert
an element will succeed by inspecting {@code remainingCapacity}
because it may be the case that another thread is about to
insert or remove an element."
      end

      operation 1426331 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element {@code e} such
that {@code o.equals(e)}, if this queue contains one or more such
elements.
Returns {@code true} if this queue contained the specified element
(or equivalently, if this queue changed as a result of the call).

<p>Removal of interior elements in circular array based queues
is an intrinsically slow and disruptive operation, so should
be undertaken only in exceptional circumstances, ideally
only when the queue is known not to be accessible by other
threads.

@param o element to be removed from this queue, if present
@return {@code true} if this queue changed as a result of the call"
      end

      operation 1426459 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains the specified element.
More formally, returns {@code true} if and only if this queue contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this queue
@return {@code true} if this queue contains the specified element"
      end

      operation 1426587 "toArray"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence.

<p>The returned array will be \"safe\" in that no references to it are
maintained by this queue.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this queue"
      end

      operation 1426715 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence; the runtime type of the returned array is that of
the specified array.  If the queue fits in the specified array, it
is returned therein.  Otherwise, a new array is allocated with the
runtime type of the specified array and the size of this queue.

<p>If this queue fits in the specified array with room to spare
(i.e., the array has more elements than this queue), the element in
the array immediately following the end of the queue is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a queue known to contain only strings.
The following code can be used to dump the queue into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the queue are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this queue
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this queue
@throws NullPointerException if the specified array is null"
      end

      operation 1426843 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1426971 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this queue.
The queue will be empty after this call returns."
      end

      operation 1427099 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      operation 1427227 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 160667 // Collection
	  param in name "maxElements" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      operation 1427355 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException
ConcurrentModificationException}, and guarantees to traverse
elements as they existed upon construction of the iterator, and
may (but is not guaranteed to) reflect any modifications
subsequent to construction.

@return an iterator over the elements in this queue in proper sequence"
      end

      class 254747 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 412955 // <realization>
	  relation 412955 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 412955 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	attribute 353179 "cursor"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Index to look for new nextItem; NONE at end "
	end

	attribute 353307 "nextItem"
	  private explicit_type "E"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Element to be returned by next call to next(); null if none "
	end

	attribute 353435 "nextIndex"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Index of nextItem; NONE if none, REMOVED if removed elsewhere "
	end

	attribute 353563 "lastItem"
	  private explicit_type "E"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Last element returned; null if none or not detached. "
	end

	attribute 353691 "lastRet"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Index of lastItem, NONE if none, REMOVED if removed elsewhere "
	end

	attribute 353819 "prevTakeIndex"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Previous value of takeIndex, or DETACHED when detached "
	end

	attribute 353947 "prevCycles"
	  private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Previous value of iters.cycles "
	end

	attribute 354075 "NONE"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " -1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Special index value indicating \"not available\" or \"undefined\" "
	end

	attribute 354203 "REMOVED"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " -2"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Special index value indicating \"removed elsewhere\", that is,
removed by some operation other than a call to this.remove().
"
	end

	attribute 354331 "DETACHED"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " -3"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Special value for prevTakeIndex indicating \"detached mode\" "
	end

	operation 1428507 "Itr"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1428635 "isDetached"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1428763 "incCursor"
	  private explicit_return_type "int"
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1428891 "invalidated"
	  private explicit_return_type "boolean"
	  nparams 4
	    param in name "index" explicit_type "int"
	    param in name "prevTakeIndex" explicit_type "int"
	    param in name "dequeues" explicit_type "long"
	    param in name "length" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if index is invalidated by the given number of
dequeues, starting from prevTakeIndex."
	end

	operation 1429019 "incorporateDequeues"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Adjusts indices to incorporate all dequeues since the last
operation on this iterator.  Call only from iterating thread."
	end

	operation 1429147 "detach"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called when itrs should stop tracking this iterator, either
because there are no more indices to update (cursor < 0 &&
nextIndex < 0 && lastRet < 0) or as a special exception, when
lastRet >= 0, because hasNext() is about to return false for the
first time.  Call only from iterating thread."
	end

	operation 1429275 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "For performance reasons, we would like not to acquire a lock in
hasNext in the common case.  To allow for this, we only access
fields (i.e. nextItem) that are not modified by update operations
triggered by queue modifications."
	end

	operation 1429403 "noNext"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1429531 "next"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1429659 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1429787 "shutdown"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called to notify the iterator that the queue is empty, or that it
has fallen hopelessly behind, so that it should abandon any
further iteration, except possibly to return one more element
from next(), as promised by returning true from hasNext()."
	end

	operation 1429915 "distance"
	  private explicit_return_type "int"
	  nparams 3
	    param in name "index" explicit_type "int"
	    param in name "prevTakeIndex" explicit_type "int"
	    param in name "length" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1430043 "removedAt"
	  package explicit_return_type "boolean"
	  nparams 1
	    param in name "removedIndex" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever an interior remove (not at takeIndex) occured.

@return true if this iterator should be unlinked from itrs"
	end

	operation 1430171 "takeIndexWrapped"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Called whenever takeIndex wraps around to zero.

@return true if this iterator should be unlinked from itrs"
	end
      end
    end

    class 254107 "BlockingQueue"
      visibility public stereotype "interface"
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 232987 // Queue
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

A {@link java.util.Queue} that additionally supports operations
that wait for the queue to become non-empty when retrieving an
element, and wait for space to become available in the queue when
storing an element.

<p><tt>BlockingQueue</tt> methods come in four forms, with different ways
of handling operations that cannot be satisfied immediately, but may be
satisfied at some point in the future:
one throws an exception, the second returns a special value (either
<tt>null</tt> or <tt>false</tt>, depending on the operation), the third
blocks the current thread indefinitely until the operation can succeed,
and the fourth blocks for only a given maximum time limit before giving
up.  These methods are summarized in the following table:

<p>
<table BORDER CELLPADDING=3 CELLSPACING=1>
 <tr>
   <td></td>
   <td ALIGN=CENTER><em>Throws exception</em></td>
   <td ALIGN=CENTER><em>Special value</em></td>
   <td ALIGN=CENTER><em>Blocks</em></td>
   <td ALIGN=CENTER><em>Times out</em></td>
 </tr>
 <tr>
   <td><b>Insert</b></td>
   <td>{@link #add add(e)}</td>
   <td>{@link #offer offer(e)}</td>
   <td>{@link #put put(e)}</td>
   <td>{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</td>
 </tr>
 <tr>
   <td><b>Remove</b></td>
   <td>{@link #remove remove()}</td>
   <td>{@link #poll poll()}</td>
   <td>{@link #take take()}</td>
   <td>{@link #poll(long, TimeUnit) poll(time, unit)}</td>
 </tr>
 <tr>
   <td><b>Examine</b></td>
   <td>{@link #element element()}</td>
   <td>{@link #peek peek()}</td>
   <td><em>not applicable</em></td>
   <td><em>not applicable</em></td>
 </tr>
</table>

<p>A <tt>BlockingQueue</tt> does not accept <tt>null</tt> elements.
Implementations throw <tt>NullPointerException</tt> on attempts
to <tt>add</tt>, <tt>put</tt> or <tt>offer</tt> a <tt>null</tt>.  A
<tt>null</tt> is used as a sentinel value to indicate failure of
<tt>poll</tt> operations.

<p>A <tt>BlockingQueue</tt> may be capacity bounded. At any given
time it may have a <tt>remainingCapacity</tt> beyond which no
additional elements can be <tt>put</tt> without blocking.
A <tt>BlockingQueue</tt> without any intrinsic capacity constraints always
reports a remaining capacity of <tt>Integer.MAX_VALUE</tt>.

<p> <tt>BlockingQueue</tt> implementations are designed to be used
primarily for producer-consumer queues, but additionally support
the {@link java.util.Collection} interface.  So, for example, it is
possible to remove an arbitrary element from a queue using
<tt>remove(x)</tt>. However, such operations are in general
<em>not</em> performed very efficiently, and are intended for only
occasional use, such as when a queued message is cancelled.

<p> <tt>BlockingQueue</tt> implementations are thread-safe.  All
queuing methods achieve their effects atomically using internal
locks or other forms of concurrency control. However, the
<em>bulk</em> Collection operations <tt>addAll</tt>,
<tt>containsAll</tt>, <tt>retainAll</tt> and <tt>removeAll</tt> are
<em>not</em> necessarily performed atomically unless specified
otherwise in an implementation. So it is possible, for example, for
<tt>addAll(c)</tt> to fail (throwing an exception) after adding
only some of the elements in <tt>c</tt>.

<p>A <tt>BlockingQueue</tt> does <em>not</em> intrinsically support
any kind of &quot;close&quot; or &quot;shutdown&quot; operation to
indicate that no more items will be added.  The needs and usage of
such features tend to be implementation-dependent. For example, a
common tactic is for producers to insert special
<em>end-of-stream</em> or <em>poison</em> objects, that are
interpreted accordingly when taken by consumers.

<p>
Usage example, based on a typical producer-consumer scenario.
Note that a <tt>BlockingQueue</tt> can safely be used with multiple
producers and multiple consumers.
 <pre> {@code
class Producer implements Runnable {
  private final BlockingQueue queue;
  Producer(BlockingQueue q) { queue = q; }
  public void run() {
    try {
      while (true) { queue.put(produce()); }
    } catch (InterruptedException ex) { ... handle ...}
  }
  Object produce() { ... }
}

class Consumer implements Runnable {
  private final BlockingQueue queue;
  Consumer(BlockingQueue q) { queue = q; }
  public void run() {
    try {
      while (true) { consume(queue.take()); }
    } catch (InterruptedException ex) { ... handle ...}
  }
  void consume(Object x) { ... }
}

class Setup {
  void main() {
    BlockingQueue q = new SomeQueueImplementation();
    Producer p = new Producer(q);
    Consumer c1 = new Consumer(q);
    Consumer c2 = new Consumer(q);
    new Thread(p).start();
    new Thread(c1).start();
    new Thread(c2).start();
  }
}}</pre>

<p>Memory consistency effects: As with other concurrent
collections, actions in a thread prior to placing an object into a
{@code BlockingQueue}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that element from
the {@code BlockingQueue} in another thread.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 411419 // <realization>
	relation 411419 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 411419 // <realization>
	  b parent class_ref 232987 // Queue
      end

      operation 1422363 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue if it is possible to do
so immediately without violating capacity restrictions, returning
<tt>true</tt> upon success and throwing an
<tt>IllegalStateException</tt> if no space is currently available.
When using a capacity-restricted queue, it is generally preferable to
use {@link #offer(Object) offer}.

@param e the element to add
@return <tt>true</tt> (as specified by {@link Collection#add})
@throws IllegalStateException if the element cannot be added at this
        time due to capacity restrictions
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue"
      end

      operation 1422491 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue if it is possible to do
so immediately without violating capacity restrictions, returning
<tt>true</tt> upon success and <tt>false</tt> if no space is currently
available.  When using a capacity-restricted queue, this method is
generally preferable to {@link #add}, which can fail to insert an
element only by throwing an exception.

@param e the element to add
@return <tt>true</tt> if the element was added to this queue, else
        <tt>false</tt>
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue"
      end

      operation 1422619 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, waiting if necessary
for space to become available.

@param e the element to add
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue"
      end

      operation 1422747 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, waiting up to the
specified wait time if necessary for space to become available.

@param e the element to add
@param timeout how long to wait before giving up, in units of
       <tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
       <tt>timeout</tt> parameter
@return <tt>true</tt> if successful, or <tt>false</tt> if
        the specified waiting time elapses before space is available
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue"
      end

      operation 1422875 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting if necessary
until an element becomes available.

@return the head of this queue
@throws InterruptedException if interrupted while waiting"
      end

      operation 1423003 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting up to the
specified wait time if necessary for an element to become available.

@param timeout how long to wait before giving up, in units of
       <tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
       <tt>timeout</tt> parameter
@return the head of this queue, or <tt>null</tt> if the
        specified waiting time elapses before an element is available
@throws InterruptedException if interrupted while waiting"
      end

      operation 1423131 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of additional elements that this queue can ideally
(in the absence of memory or resource constraints) accept without
blocking, or <tt>Integer.MAX_VALUE</tt> if there is no intrinsic
limit.

<p>Note that you <em>cannot</em> always tell if an attempt to insert
an element will succeed by inspecting <tt>remainingCapacity</tt>
because it may be the case that another thread is about to
insert or remove an element.

@return the remaining capacity"
      end

      operation 1423259 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element <tt>e</tt> such
that <tt>o.equals(e)</tt>, if this queue contains one or more such
elements.
Returns <tt>true</tt> if this queue contained the specified element
(or equivalently, if this queue changed as a result of the call).

@param o element to be removed from this queue, if present
@return <tt>true</tt> if this queue changed as a result of the call
@throws ClassCastException if the class of the specified element
        is incompatible with this queue
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)"
      end

      operation 1423387 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this queue contains the specified element.
More formally, returns <tt>true</tt> if and only if this queue contains
at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.

@param o object to be checked for containment in this queue
@return <tt>true</tt> if this queue contains the specified element
@throws ClassCastException if the class of the specified element
        is incompatible with this queue
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)"
      end

      operation 1423515 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all available elements from this queue and adds them
to the given collection.  This operation may be more
efficient than repeatedly polling this queue.  A failure
encountered while attempting to add elements to
collection <tt>c</tt> may result in elements being in neither,
either or both collections when the associated exception is
thrown.  Attempts to drain a queue to itself result in
<tt>IllegalArgumentException</tt>. Further, the behavior of
this operation is undefined if the specified collection is
modified while the operation is in progress.

@param c the collection to transfer elements into
@return the number of elements transferred
@throws UnsupportedOperationException if addition of elements
        is not supported by the specified collection
@throws ClassCastException if the class of an element of this queue
        prevents it from being added to the specified collection
@throws NullPointerException if the specified collection is null
@throws IllegalArgumentException if the specified collection is this
        queue, or some property of an element of this queue prevents
        it from being added to the specified collection"
      end

      operation 1423643 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 160667 // Collection
	  param in name "maxElements" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes at most the given number of available elements from
this queue and adds them to the given collection.  A failure
encountered while attempting to add elements to
collection <tt>c</tt> may result in elements being in neither,
either or both collections when the associated exception is
thrown.  Attempts to drain a queue to itself result in
<tt>IllegalArgumentException</tt>. Further, the behavior of
this operation is undefined if the specified collection is
modified while the operation is in progress.

@param c the collection to transfer elements into
@param maxElements the maximum number of elements to transfer
@return the number of elements transferred
@throws UnsupportedOperationException if addition of elements
        is not supported by the specified collection
@throws ClassCastException if the class of an element of this queue
        prevents it from being added to the specified collection
@throws NullPointerException if the specified collection is null
@throws IllegalArgumentException if the specified collection is this
        queue, or some property of an element of this queue prevents
        it from being added to the specified collection"
      end
    end

    class 254875 "BlockingDeque"
      visibility public stereotype "interface"
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 254107 // BlockingQueue
        rank 0 explicit_value ""
      actual class class_ref 233371 // Deque
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@link Deque} that additionally supports blocking operations that wait
for the deque to become non-empty when retrieving an element, and wait for
space to become available in the deque when storing an element.

<p><tt>BlockingDeque</tt> methods come in four forms, with different ways
of handling operations that cannot be satisfied immediately, but may be
satisfied at some point in the future:
one throws an exception, the second returns a special value (either
<tt>null</tt> or <tt>false</tt>, depending on the operation), the third
blocks the current thread indefinitely until the operation can succeed,
and the fourth blocks for only a given maximum time limit before giving
up.  These methods are summarized in the following table:

<p>
<table BORDER CELLPADDING=3 CELLSPACING=1>
 <tr>
   <td ALIGN=CENTER COLSPAN = 5> <b>First Element (Head)</b></td>
 </tr>
 <tr>
   <td></td>
   <td ALIGN=CENTER><em>Throws exception</em></td>
   <td ALIGN=CENTER><em>Special value</em></td>
   <td ALIGN=CENTER><em>Blocks</em></td>
   <td ALIGN=CENTER><em>Times out</em></td>
 </tr>
 <tr>
   <td><b>Insert</b></td>
   <td>{@link #addFirst addFirst(e)}</td>
   <td>{@link #offerFirst(Object) offerFirst(e)}</td>
   <td>{@link #putFirst putFirst(e)}</td>
   <td>{@link #offerFirst(Object, long, TimeUnit) offerFirst(e, time, unit)}</td>
 </tr>
 <tr>
   <td><b>Remove</b></td>
   <td>{@link #removeFirst removeFirst()}</td>
   <td>{@link #pollFirst pollFirst()}</td>
   <td>{@link #takeFirst takeFirst()}</td>
   <td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>
 </tr>
 <tr>
   <td><b>Examine</b></td>
   <td>{@link #getFirst getFirst()}</td>
   <td>{@link #peekFirst peekFirst()}</td>
   <td><em>not applicable</em></td>
   <td><em>not applicable</em></td>
 </tr>
 <tr>
   <td ALIGN=CENTER COLSPAN = 5> <b>Last Element (Tail)</b></td>
 </tr>
 <tr>
   <td></td>
   <td ALIGN=CENTER><em>Throws exception</em></td>
   <td ALIGN=CENTER><em>Special value</em></td>
   <td ALIGN=CENTER><em>Blocks</em></td>
   <td ALIGN=CENTER><em>Times out</em></td>
 </tr>
 <tr>
   <td><b>Insert</b></td>
   <td>{@link #addLast addLast(e)}</td>
   <td>{@link #offerLast(Object) offerLast(e)}</td>
   <td>{@link #putLast putLast(e)}</td>
   <td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>
 </tr>
 <tr>
   <td><b>Remove</b></td>
   <td>{@link #removeLast() removeLast()}</td>
   <td>{@link #pollLast() pollLast()}</td>
   <td>{@link #takeLast takeLast()}</td>
   <td>{@link #pollLast(long, TimeUnit) pollLast(time, unit)}</td>
 </tr>
 <tr>
   <td><b>Examine</b></td>
   <td>{@link #getLast getLast()}</td>
   <td>{@link #peekLast peekLast()}</td>
   <td><em>not applicable</em></td>
   <td><em>not applicable</em></td>
 </tr>
</table>

<p>Like any {@link BlockingQueue}, a <tt>BlockingDeque</tt> is thread safe,
does not permit null elements, and may (or may not) be
capacity-constrained.

<p>A <tt>BlockingDeque</tt> implementation may be used directly as a FIFO
<tt>BlockingQueue</tt>. The methods inherited from the
<tt>BlockingQueue</tt> interface are precisely equivalent to
<tt>BlockingDeque</tt> methods as indicated in the following table:

<p>
<table BORDER CELLPADDING=3 CELLSPACING=1>
 <tr>
   <td ALIGN=CENTER> <b><tt>BlockingQueue</tt> Method</b></td>
   <td ALIGN=CENTER> <b>Equivalent <tt>BlockingDeque</tt> Method</b></td>
 </tr>
 <tr>
   <td ALIGN=CENTER COLSPAN = 2> <b>Insert</b></td>
 </tr>
 <tr>
   <td>{@link #add(Object) add(e)}</td>
   <td>{@link #addLast(Object) addLast(e)}</td>
 </tr>
 <tr>
   <td>{@link #offer(Object) offer(e)}</td>
   <td>{@link #offerLast(Object) offerLast(e)}</td>
 </tr>
 <tr>
   <td>{@link #put(Object) put(e)}</td>
   <td>{@link #putLast(Object) putLast(e)}</td>
 </tr>
 <tr>
   <td>{@link #offer(Object, long, TimeUnit) offer(e, time, unit)}</td>
   <td>{@link #offerLast(Object, long, TimeUnit) offerLast(e, time, unit)}</td>
 </tr>
 <tr>
   <td ALIGN=CENTER COLSPAN = 2> <b>Remove</b></td>
 </tr>
 <tr>
   <td>{@link #remove() remove()}</td>
   <td>{@link #removeFirst() removeFirst()}</td>
 </tr>
 <tr>
   <td>{@link #poll() poll()}</td>
   <td>{@link #pollFirst() pollFirst()}</td>
 </tr>
 <tr>
   <td>{@link #take() take()}</td>
   <td>{@link #takeFirst() takeFirst()}</td>
 </tr>
 <tr>
   <td>{@link #poll(long, TimeUnit) poll(time, unit)}</td>
   <td>{@link #pollFirst(long, TimeUnit) pollFirst(time, unit)}</td>
 </tr>
 <tr>
   <td ALIGN=CENTER COLSPAN = 2> <b>Examine</b></td>
 </tr>
 <tr>
   <td>{@link #element() element()}</td>
   <td>{@link #getFirst() getFirst()}</td>
 </tr>
 <tr>
   <td>{@link #peek() peek()}</td>
   <td>{@link #peekFirst() peekFirst()}</td>
 </tr>
</table>

<p>Memory consistency effects: As with other concurrent
collections, actions in a thread prior to placing an object into a
{@code BlockingDeque}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that element from
the {@code BlockingDeque} in another thread.

<p>This interface is a member of the
<a href=\"{@docRoot}/../technotes/guides/collections/index.html\">
Java Collections Framework</a>.

@since 1.6
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 413083 // <realization>
	relation 413083 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 413083 // <realization>
	  b parent class_ref 254107 // BlockingQueue
      end

      classrelation 413211 // <realization>
	relation 413211 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 413211 // <realization>
	  b parent class_ref 233371 // Deque
      end

      operation 1430299 "addFirst"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "We have \"diamond\" multiple interface inheritance here, and that
introduces ambiguities.  Methods might end up with different
specs depending on the branch chosen by javadoc.  Thus a lot of
methods specs here are copied from superinterfaces.


Inserts the specified element at the front of this deque if it is
possible to do so immediately without violating capacity restrictions,
throwing an <tt>IllegalStateException</tt> if no space is currently
available.  When using a capacity-restricted deque, it is generally
preferable to use {@link #offerFirst(Object) offerFirst}.

@param e the element to add
@throws IllegalStateException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1430427 "addLast"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque if it is
possible to do so immediately without violating capacity restrictions,
throwing an <tt>IllegalStateException</tt> if no space is currently
available.  When using a capacity-restricted deque, it is generally
preferable to use {@link #offerLast(Object) offerLast}.

@param e the element to add
@throws IllegalStateException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1430555 "offerFirst"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the front of this deque if it is
possible to do so immediately without violating capacity restrictions,
returning <tt>true</tt> upon success and <tt>false</tt> if no space is
currently available.
When using a capacity-restricted deque, this method is generally
preferable to the {@link #addFirst(Object) addFirst} method, which can
fail to insert an element only by throwing an exception.

@param e the element to add
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1430683 "offerLast"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque if it is
possible to do so immediately without violating capacity restrictions,
returning <tt>true</tt> upon success and <tt>false</tt> if no space is
currently available.
When using a capacity-restricted deque, this method is generally
preferable to the {@link #addLast(Object) addLast} method, which can
fail to insert an element only by throwing an exception.

@param e the element to add
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1430811 "putFirst"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the front of this deque,
waiting if necessary for space to become available.

@param e the element to add
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque"
      end

      operation 1430939 "putLast"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque,
waiting if necessary for space to become available.

@param e the element to add
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque"
      end

      operation 1431067 "offerFirst"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the front of this deque,
waiting up to the specified wait time if necessary for space to
become available.

@param e the element to add
@param timeout how long to wait before giving up, in units of
       <tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
       <tt>timeout</tt> parameter
@return <tt>true</tt> if successful, or <tt>false</tt> if
        the specified waiting time elapses before space is available
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque"
      end

      operation 1431195 "offerLast"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque,
waiting up to the specified wait time if necessary for space to
become available.

@param e the element to add
@param timeout how long to wait before giving up, in units of
       <tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
       <tt>timeout</tt> parameter
@return <tt>true</tt> if successful, or <tt>false</tt> if
        the specified waiting time elapses before space is available
@throws InterruptedException if interrupted while waiting
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque"
      end

      operation 1431323 "takeFirst"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the first element of this deque, waiting
if necessary until an element becomes available.

@return the head of this deque
@throws InterruptedException if interrupted while waiting"
      end

      operation 1431451 "takeLast"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the last element of this deque, waiting
if necessary until an element becomes available.

@return the tail of this deque
@throws InterruptedException if interrupted while waiting"
      end

      operation 1431579 "pollFirst"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the first element of this deque, waiting
up to the specified wait time if necessary for an element to
become available.

@param timeout how long to wait before giving up, in units of
       <tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
       <tt>timeout</tt> parameter
@return the head of this deque, or <tt>null</tt> if the specified
        waiting time elapses before an element is available
@throws InterruptedException if interrupted while waiting"
      end

      operation 1431707 "pollLast"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the last element of this deque, waiting
up to the specified wait time if necessary for an element to
become available.

@param timeout how long to wait before giving up, in units of
       <tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
       <tt>timeout</tt> parameter
@return the tail of this deque, or <tt>null</tt> if the specified
        waiting time elapses before an element is available
@throws InterruptedException if interrupted while waiting"
      end

      operation 1431835 "removeFirstOccurrence"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first occurrence of the specified element from this deque.
If the deque does not contain the element, it is unchanged.
More formally, removes the first element <tt>e</tt> such that
<tt>o.equals(e)</tt> (if such an element exists).
Returns <tt>true</tt> if this deque contained the specified element
(or equivalently, if this deque changed as a result of the call).

@param o element to be removed from this deque, if present
@return <tt>true</tt> if an element was removed as a result of this call
@throws ClassCastException if the class of the specified element
        is incompatible with this deque
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)"
      end

      operation 1431963 "removeLastOccurrence"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the last occurrence of the specified element from this deque.
If the deque does not contain the element, it is unchanged.
More formally, removes the last element <tt>e</tt> such that
<tt>o.equals(e)</tt> (if such an element exists).
Returns <tt>true</tt> if this deque contained the specified element
(or equivalently, if this deque changed as a result of the call).

@param o element to be removed from this deque, if present
@return <tt>true</tt> if an element was removed as a result of this call
@throws ClassCastException if the class of the specified element
        is incompatible with this deque
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)"
      end

      operation 1432091 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** BlockingQueue methods ***

Inserts the specified element into the queue represented by this deque
(in other words, at the tail of this deque) if it is possible to do so
immediately without violating capacity restrictions, returning
<tt>true</tt> upon success and throwing an
<tt>IllegalStateException</tt> if no space is currently available.
When using a capacity-restricted deque, it is generally preferable to
use {@link #offer(Object) offer}.

<p>This method is equivalent to {@link #addLast(Object) addLast}.

@param e the element to add
@throws IllegalStateException {@inheritDoc}
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque"
      end

      operation 1432219 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into the queue represented by this deque
(in other words, at the tail of this deque) if it is possible to do so
immediately without violating capacity restrictions, returning
<tt>true</tt> upon success and <tt>false</tt> if no space is currently
available.  When using a capacity-restricted deque, this method is
generally preferable to the {@link #add} method, which can fail to
insert an element only by throwing an exception.

<p>This method is equivalent to {@link #offerLast(Object) offerLast}.

@param e the element to add
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque"
      end

      operation 1432347 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into the queue represented by this deque
(in other words, at the tail of this deque), waiting if necessary for
space to become available.

<p>This method is equivalent to {@link #putLast(Object) putLast}.

@param e the element to add
@throws InterruptedException {@inheritDoc}
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque"
      end

      operation 1432475 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into the queue represented by this deque
(in other words, at the tail of this deque), waiting up to the
specified wait time if necessary for space to become available.

<p>This method is equivalent to
{@link #offerLast(Object,long,TimeUnit) offerLast}.

@param e the element to add
@return <tt>true</tt> if the element was added to this deque, else
        <tt>false</tt>
@throws InterruptedException {@inheritDoc}
@throws ClassCastException if the class of the specified element
        prevents it from being added to this deque
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this deque"
      end

      operation 1432603 "remove"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of the queue represented by this deque
(in other words, the first element of this deque).
This method differs from {@link #poll poll} only in that it
throws an exception if this deque is empty.

<p>This method is equivalent to {@link #removeFirst() removeFirst}.

@return the head of the queue represented by this deque
@throws NoSuchElementException if this deque is empty"
      end

      operation 1432731 "poll"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of the queue represented by this deque
(in other words, the first element of this deque), or returns
<tt>null</tt> if this deque is empty.

<p>This method is equivalent to {@link #pollFirst()}.

@return the head of this deque, or <tt>null</tt> if this deque is empty"
      end

      operation 1432859 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of the queue represented by this deque
(in other words, the first element of this deque), waiting if
necessary until an element becomes available.

<p>This method is equivalent to {@link #takeFirst() takeFirst}.

@return the head of this deque
@throws InterruptedException if interrupted while waiting"
      end

      operation 1432987 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of the queue represented by this deque
(in other words, the first element of this deque), waiting up to the
specified wait time if necessary for an element to become available.

<p>This method is equivalent to
{@link #pollFirst(long,TimeUnit) pollFirst}.

@return the head of this deque, or <tt>null</tt> if the
        specified waiting time elapses before an element is available
@throws InterruptedException if interrupted while waiting"
      end

      operation 1433115 "element"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of the queue represented by
this deque (in other words, the first element of this deque).
This method differs from {@link #peek peek} only in that it throws an
exception if this deque is empty.

<p>This method is equivalent to {@link #getFirst() getFirst}.

@return the head of this deque
@throws NoSuchElementException if this deque is empty"
      end

      operation 1433243 "peek"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of the queue represented by
this deque (in other words, the first element of this deque), or
returns <tt>null</tt> if this deque is empty.

<p>This method is equivalent to {@link #peekFirst() peekFirst}.

@return the head of this deque, or <tt>null</tt> if this deque is empty"
      end

      operation 1433371 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first occurrence of the specified element from this deque.
If the deque does not contain the element, it is unchanged.
More formally, removes the first element <tt>e</tt> such that
<tt>o.equals(e)</tt> (if such an element exists).
Returns <tt>true</tt> if this deque contained the specified element
(or equivalently, if this deque changed as a result of the call).

<p>This method is equivalent to
{@link #removeFirstOccurrence(Object) removeFirstOccurrence}.

@param o element to be removed from this deque, if present
@return <tt>true</tt> if this deque changed as a result of the call
@throws ClassCastException if the class of the specified element
        is incompatible with this deque
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)"
      end

      operation 1433499 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this deque contains the specified element.
More formally, returns <tt>true</tt> if and only if this deque contains
at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.

@param o object to be checked for containment in this deque
@return <tt>true</tt> if this deque contains the specified element
@throws ClassCastException if the class of the specified element
        is incompatible with this deque
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified element is null
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)"
      end

      operation 1433627 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this deque.

@return the number of elements in this deque"
      end

      operation 1433755 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this deque in proper sequence.
The elements will be returned in order from first (head) to last (tail).

@return an iterator over the elements in this deque in proper sequence"
      end

      operation 1433883 "push"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Stack methods ***

Pushes an element onto the stack represented by this deque.  In other
words, inserts the element at the front of this deque unless it would
violate capacity restrictions.

<p>This method is equivalent to {@link #addFirst(Object) addFirst}.

@throws IllegalStateException {@inheritDoc}
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException {@inheritDoc}"
      end
    end

    class 255003 "BrokenBarrierException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception thrown when a thread tries to wait upon a barrier that is
in a broken state, or which enters the broken state while the thread
is waiting.

@see CyclicBarrier

@since 1.5
@author Doug Lea
"
      classrelation 413339 // <generalisation>
	relation 413339 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 413339 // <generalisation>
	  b parent class_ref 132251 // Exception
      end

      attribute 354459 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7117394618823254244L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1434011 "BrokenBarrierException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>BrokenBarrierException</tt> with no specified detail
message."
      end

      operation 1434139 "BrokenBarrierException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>BrokenBarrierException</tt> with the specified
detail message.

@param message the detail message"
      end
    end

    class 255131 "CancellationException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception indicating that the result of a value-producing task,
such as a {@link FutureTask}, cannot be retrieved because the task
was cancelled.

@since 1.5
@author Doug Lea"
      classrelation 413467 // <generalisation>
	relation 413467 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 413467 // <generalisation>
	  b parent class_ref 154267 // IllegalStateException
      end

      attribute 354587 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -9202173006928992231L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1434395 "CancellationException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>CancellationException</tt> with no detail message."
      end

      operation 1434523 "CancellationException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>CancellationException</tt> with the specified detail
message.

@param message the detail message"
      end
    end

    class 255259 "CompletionService"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A service that decouples the production of new asynchronous tasks
from the consumption of the results of completed tasks.  Producers
<tt>submit</tt> tasks for execution. Consumers <tt>take</tt>
completed tasks and process their results in the order they
complete.  A <tt>CompletionService</tt> can for example be used to
manage asynchronous IO, in which tasks that perform reads are
submitted in one part of a program or system, and then acted upon
in a different part of the program when the reads complete,
possibly in a different order than they were requested.

<p>Typically, a <tt>CompletionService</tt> relies on a separate
{@link Executor} to actually execute the tasks, in which case the
<tt>CompletionService</tt> only manages an internal completion
queue. The {@link ExecutorCompletionService} class provides an
implementation of this approach.

<p>Memory consistency effects: Actions in a thread prior to
submitting a task to a {@code CompletionService}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions taken by that task, which in turn <i>happen-before</i>
actions following a successful return from the corresponding {@code take()}.
"
      operation 1434651 "submit"
	public return_type class_ref 253339 // Future
	nparams 1
	  param inout name "task" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a value-returning task for execution and returns a Future
representing the pending results of the task.  Upon completion,
this task may be taken or polled.

@param task the task to submit
@return a Future representing pending completion of the task
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if the task is null"
      end

      operation 1434779 "submit"
	public return_type class_ref 253339 // Future
	nparams 2
	  param inout name "task" type class_ref 151963 // Runnable
	  param inout name "result" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a Runnable task for execution and returns a Future
representing that task.  Upon completion, this task may be
taken or polled.

@param task the task to submit
@param result the result to return upon successful completion
@return a Future representing pending completion of the task,
        and whose <tt>get()</tt> method will return the given
        result value upon completion
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if the task is null"
      end

      operation 1434907 "take"
	public return_type class_ref 253339 // Future
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the Future representing the next
completed task, waiting if none are yet present.

@return the Future representing the next completed task
@throws InterruptedException if interrupted while waiting"
      end

      operation 1435035 "poll"
	public return_type class_ref 253339 // Future
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the Future representing the next
completed task or <tt>null</tt> if none are present.

@return the Future representing the next completed task, or
        <tt>null</tt> if none are present"
      end

      operation 1435163 "poll"
	public return_type class_ref 253339 // Future
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the Future representing the next
completed task, waiting if necessary up to the specified wait
time if none are yet present.

@param timeout how long to wait before giving up, in units of
       <tt>unit</tt>
@param unit a <tt>TimeUnit</tt> determining how to interpret the
       <tt>timeout</tt> parameter
@return the Future representing the next completed task or
        <tt>null</tt> if the specified waiting time elapses
        before one is present
@throws InterruptedException if interrupted while waiting"
      end
    end

    class 255387 "ConcurrentHashMap"
      visibility public 
      nformals 2
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 160411 // AbstractMap
        rank 0 explicit_value ""
      actual class class_ref 160411 // AbstractMap
        rank 1 explicit_value ""
      actual class class_ref 255515 // ConcurrentMap
        rank 0 explicit_value ""
      actual class class_ref 255515 // ConcurrentMap
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

A hash table supporting full concurrency of retrievals and
adjustable expected concurrency for updates. This class obeys the
same functional specification as {@link java.util.Hashtable}, and
includes versions of methods corresponding to each method of
<tt>Hashtable</tt>. However, even though all operations are
thread-safe, retrieval operations do <em>not</em> entail locking,
and there is <em>not</em> any support for locking the entire table
in a way that prevents all access.  This class is fully
interoperable with <tt>Hashtable</tt> in programs that rely on its
thread safety but not on its synchronization details.

<p> Retrieval operations (including <tt>get</tt>) generally do not
block, so may overlap with update operations (including
<tt>put</tt> and <tt>remove</tt>). Retrievals reflect the results
of the most recently <em>completed</em> update operations holding
upon their onset.  For aggregate operations such as <tt>putAll</tt>
and <tt>clear</tt>, concurrent retrievals may reflect insertion or
removal of only some entries.  Similarly, Iterators and
Enumerations return elements reflecting the state of the hash table
at some point at or since the creation of the iterator/enumeration.
They do <em>not</em> throw {@link ConcurrentModificationException}.
However, iterators are designed to be used by only one thread at a time.

<p> The allowed concurrency among update operations is guided by
the optional <tt>concurrencyLevel</tt> constructor argument
(default <tt>16</tt>), which is used as a hint for internal sizing.  The
table is internally partitioned to try to permit the indicated
number of concurrent updates without contention. Because placement
in hash tables is essentially random, the actual concurrency will
vary.  Ideally, you should choose a value to accommodate as many
threads as will ever concurrently modify the table. Using a
significantly higher value than you need can waste space and time,
and a significantly lower value can lead to thread contention. But
overestimates and underestimates within an order of magnitude do
not usually have much noticeable impact. A value of one is
appropriate when it is known that only one thread will modify and
all others will only read. Also, resizing this or any other kind of
hash table is a relatively slow operation, so, when possible, it is
a good idea to provide estimates of expected table sizes in
constructors.

<p>This class and its views and iterators implement all of the
<em>optional</em> methods of the {@link Map} and {@link Iterator}
interfaces.

<p> Like {@link Hashtable} but unlike {@link HashMap}, this class
does <em>not</em> allow <tt>null</tt> to be used as a key or value.

@since 1.5
@author Doug Lea
@param <K> the type of keys maintained by this map
@param <V> the type of mapped values"
      classrelation 413595 // <realization>
	relation 413595 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 413595 // <realization>
	  b parent class_ref 160411 // AbstractMap
      end

      classrelation 413851 // <realization>
	relation 413851 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 413851 // <realization>
	  b parent class_ref 255515 // ConcurrentMap
      end

      classrelation 413979 // <realization>
	relation 413979 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 413979 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 354715 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 7249069246763182397L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 354843 "DEFAULT_INITIAL_CAPACITY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The basic strategy is to subdivide the table among Segments,
each of which itself is a concurrently readable hash table.  To
reduce footprint, all but one segments are constructed only
when first needed (see ensureSegment). To maintain visibility
in the presence of lazy construction, accesses to segments as
well as elements of segment's table must use volatile access,
which is done via Unsafe within methods segmentAt etc
below. These provide the functionality of AtomicReferenceArrays
but reduce the levels of indirection. Additionally,
volatile-writes of table elements and entry \"next\" fields
within locked operations use the cheaper \"lazySet\" forms of
writes (via putOrderedObject) because these writes are always
followed by lock releases that maintain sequential consistency
of table updates.

Historical note: The previous version of this class relied
heavily on \"final\" fields, which avoided some volatile reads at
the expense of a large initial footprint.  Some remnants of
that design (including forced construction of segment 0) exist
to ensure serialization compatibility.

 ---------------- Constants -------------- 

The default initial capacity for this table,
used when not otherwise specified in a constructor.
"
      end

      attribute 354971 "DEFAULT_LOAD_FACTOR"
	class_attribute const_attribute package explicit_type "float"
	init_value " 0.75f"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default load factor for this table, used when not
otherwise specified in a constructor.
"
      end

      attribute 355099 "DEFAULT_CONCURRENCY_LEVEL"
	class_attribute const_attribute package explicit_type "int"
	init_value " 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The default concurrency level for this table, used when not
otherwise specified in a constructor.
"
      end

      attribute 355227 "MAXIMUM_CAPACITY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1 << 30"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum capacity, used if a higher value is implicitly
specified by either of the constructors with arguments.  MUST
be a power of two <= 1<<30 to ensure that entries are indexable
using ints.
"
      end

      attribute 355355 "MIN_SEGMENT_TABLE_CAPACITY"
	class_attribute const_attribute package explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The minimum capacity for per-segment tables.  Must be a power
of two, at least two to avoid immediate resizing on next use
after lazy construction.
"
      end

      attribute 355483 "MAX_SEGMENTS"
	class_attribute const_attribute package explicit_type "int"
	init_value " 1 << 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum number of segments to allow; used to bound
constructor arguments. Must be power of two less than 1 << 24.

 slightly conservative"
      end

      attribute 355611 "RETRIES_BEFORE_LOCK"
	class_attribute const_attribute package explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Number of unsynchronized retries in size and containsValue
methods before resorting to locking. This is used to avoid
unbounded retries if tables undergo continuous modification
which would make it impossible to obtain an accurate result.
"
      end

      attribute 355739 "segmentMask"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ---------------- Fields -------------- 

Mask value for indexing into segments. The upper bits of a
key's hash code are used to choose the segment.
"
      end

      attribute 355867 "segmentShift"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Shift value for indexing within segments.
"
      end

      class 255643 "Segment"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 417819 // <generalisation>
	  relation 417819 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 417819 // <generalisation>
	    b parent class_ref 254235 // ReentrantLock
	end

	classrelation 417947 // <realization>
	  relation 417947 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 417947 // <realization>
	    b parent class_ref 128155 // Serializable
	end

	attribute 359195 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 2249069246763182397L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Segments maintain a table of entry lists that are always
kept in a consistent state, so can be read (via volatile
reads of segments and tables) without locking.  This
requires replicating nodes when necessary during table
resizing, so the old lists can be traversed by readers
still using old version of table.

This class defines only mutative methods requiring locking.
Except as noted, the methods of this class perform the
per-segment versions of ConcurrentHashMap methods.  (Other
methods are integrated directly into ConcurrentHashMap
methods.) These mutative methods use a form of controlled
spinning on contention via methods scanAndLock and
scanAndLockForPut. These intersperse tryLocks with
traversals to locate nodes.  The main benefit is to absorb
cache misses (which are very common for hash tables) while
obtaining locks so that traversal is faster once
acquired. We do not actually use the found nodes since they
must be re-acquired under lock anyway to ensure sequential
consistency of updates (and in any case may be undetectably
stale), but they will normally be much faster to re-locate.
Also, scanAndLockForPut speculatively creates a fresh node
to use in put if no node is found.
"
	end

	attribute 359323 "MAX_SCAN_RETRIES"
	  class_attribute const_attribute package explicit_type "int"
	  init_value "
            Runtime.getRuntime().availableProcessors() > 1 ? 64 : 1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The maximum number of times to tryLock in a prescan before
possibly blocking on acquire in preparation for a locked
segment operation. On multiprocessors, using a bounded
number of retries maintains cache acquired while locating
nodes.
"
	end

	classrelation 418075 // table (<unidirectional association>)
	  relation 418075 --->
	    a role_name "table" multiplicity "[]" volatile package
	      comment "
The per-segment table. Elements are accessed via
entryAt/setEntryAt providing volatile semantics.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V>${multiplicity} ${name}${value};
"
	      classrelation_ref 418075 // table (<unidirectional association>)
	    b parent class_ref 255771 // HashEntry
	end

	attribute 359451 "count"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The number of elements. Accessed only either within locks
or among other volatile reads that maintain visibility.
"
	end

	attribute 359579 "modCount"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The total number of mutative operations in this segment.
Even though this may overflows 32 bits, it provides
sufficient accuracy for stability checks in CHM isEmpty()
and size() methods.  Accessed only either within locks or
among other volatile reads that maintain visibility.
"
	end

	attribute 359707 "threshold"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The table is rehashed when its size exceeds this threshold.
(The value of this field is always <tt>(int)(capacity *
loadFactor)</tt>.)
"
	end

	attribute 359835 "loadFactor"
	  const_attribute package explicit_type "float"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The load factor for the hash table.  Even though this value
is same for all segments, it is replicated to avoid needing
links to outer object.
@serial
"
	end

	operation 1453211 "Segment"
	  package explicit_return_type ""
	  nparams 3
	    param in name "lf" explicit_type "float"
	    param in name "threshold" explicit_type "int"
	    param inout name "tab" type class_ref 255771 // HashEntry
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<K,V>[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1453339 "put"
	  package explicit_return_type "V"
	  nparams 4
	    param inout name "key" explicit_type "K"
	    param in name "hash" explicit_type "int"
	    param inout name "value" explicit_type "V"
	    param inout name "onlyIfAbsent" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1453467 "rehash"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "node" type class_ref 255771 // HashEntry
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	  comment "Doubles size of table and repacks entries, also adding the
given node to new table"
	end

	operation 1453595 "scanAndLockForPut"
	  private return_type class_ref 255771 // HashEntry
	  nparams 3
	    param inout name "key" explicit_type "K"
	    param in name "hash" explicit_type "int"
	    param inout name "value" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Scans for a node containing given key while trying to
acquire lock, creating and returning one if not found. Upon
return, guarantees that lock is held. Unlike in most
methods, calls to method equals are not screened: Since
traversal speed doesn't matter, we might as well help warm
up the associated code and accesses as well.

@return a new node if key not found, else null"
	end

	operation 1453723 "scanAndLock"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "key" type class_ref 3401484 // Object
	    param in name "hash" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Scans for a node containing the given key while trying to
acquire lock for a remove or replace operation. Upon
return, guarantees that lock is held.  Note that we must
lock even if the key is not found, to ensure sequential
consistency of updates."
	end

	operation 1453851 "remove"
	  package explicit_return_type "V"
	  nparams 3
	    param inout name "key" type class_ref 3401484 // Object
	    param in name "hash" explicit_type "int"
	    param inout name "value" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Remove; match on key only if value null, else match both."
	end

	operation 1453979 "replace"
	  package explicit_return_type "boolean"
	  nparams 4
	    param inout name "key" explicit_type "K"
	    param in name "hash" explicit_type "int"
	    param inout name "oldValue" explicit_type "V"
	    param inout name "newValue" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1454107 "replace"
	  package explicit_return_type "V"
	  nparams 3
	    param inout name "key" explicit_type "K"
	    param in name "hash" explicit_type "int"
	    param inout name "value" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1454235 "clear"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 414107 // segments (<unidirectional association>)
	relation 414107 --->
	  a role_name "segments" multiplicity "[]" const_relation package
	    comment "
The segments, each of which is a specialized hash table.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V>${multiplicity} ${name}${value};
"
	    classrelation_ref 414107 // segments (<unidirectional association>)
	  b parent class_ref 255643 // Segment
      end

      classrelation 414235 // keySet (<unidirectional association>)
	relation 414235 --->
	  a role_name "keySet" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	    classrelation_ref 414235 // keySet (<unidirectional association>)
	  b parent class_ref 129691 // Set
      end

      classrelation 414363 // entrySet (<unidirectional association>)
	relation 414363 --->
	  a role_name "entrySet" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	    classrelation_ref 414363 // entrySet (<unidirectional association>)
	  b parent class_ref 129691 // Set
      end

      classrelation 414491 // values (<unidirectional association>)
	relation 414491 --->
	  a role_name "values" package
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 414491 // values (<unidirectional association>)
	  b parent class_ref 160667 // Collection
      end

      class 255771 "HashEntry"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 355995 "hash"
	  const_attribute package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 356123 "key"
	  const_attribute package explicit_type "K"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 356251 "value"
	  volatile package explicit_type "V"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 414619 // next (<unidirectional association>)
	  relation 414619 --->
	    a role_name "next" volatile package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 414619 // next (<unidirectional association>)
	    b parent class_ref 255771 // HashEntry
	end

	operation 1435803 "HashEntry"
	  package explicit_return_type ""
	  nparams 4
	    param in name "hash" explicit_type "int"
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	    param inout name "next" type class_ref 255771 // HashEntry
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3}<K,V> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1435931 "setNext"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "n" type class_ref 255771 // HashEntry
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets next field with volatile write semantics.  (See above
about use of putOrderedObject.)"
	end

	classrelation 414747 // UNSAFE (<unidirectional association>)
	  relation 414747 --->
	    a role_name "UNSAFE" class_relation const_relation package
	      comment " Unsafe mechanics
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 414747 // UNSAFE (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 356379 "nextOffset"
	  class_attribute const_attribute package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	extra_member 131099 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = HashEntry.class;
                nextOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"next\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	end
      end

      operation 1436059 "entryAt"
	class_operation package return_type class_ref 255771 // HashEntry
	nparams 2
	  param inout name "tab" type class_ref 255771 // HashEntry
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Gets the ith element of given table (if nonnull) with volatile
read semantics. Note: This is manually integrated into a few
performance-sensitive methods to reduce call overhead."
      end

      operation 1436187 "setEntryAt"
	class_operation package explicit_return_type "void"
	nparams 3
	  param inout name "tab" type class_ref 255771 // HashEntry
	  param in name "i" explicit_type "int"
	  param inout name "e" type class_ref 255771 // HashEntry
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type} ${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}, ${t2}<K,V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the ith element of given table, with volatile write
semantics. (See above about use of putOrderedObject.)"
      end

      operation 1436315 "hash"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "h" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Applies a supplemental hash function to a given hashCode, which
defends against poor quality hash functions.  This is critical
because ConcurrentHashMap uses power-of-two length hash tables,
that otherwise encounter collisions for hashCodes that do not
differ in lower or upper bits."
      end

      operation 1454363 "segmentAt"
	class_operation package return_type class_ref 255643 // Segment
	nparams 2
	  param inout name "ss" type class_ref 255643 // Segment
	  param in name "j" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K,V>[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " Accessing segments

Gets the jth element of given segment array (if nonnull) with
volatile element access semantics via Unsafe. (The null check
can trigger harmlessly only during deserialization.) Note:
because each element of segments array is set only once (using
fully ordered writes), some performance-sensitive methods rely
on this method only as a recheck upon null reads."
      end

      operation 1454491 "ensureSegment"
	private return_type class_ref 255643 // Segment
	nparams 1
	  param in name "k" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns the segment for the given index, creating it and
recording in segment table (via CAS) if not already present.

@param k the index
@return the segment"
      end

      operation 1454619 "segmentForHash"
	private return_type class_ref 255643 // Segment
	nparams 1
	  param in name "h" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " Hash-based segment and entry accesses

Gets the segment for the given hash code."
      end

      operation 1454747 "entryForHash"
	class_operation package return_type class_ref 255771 // HashEntry
	nparams 2
	  param inout name "seg" type class_ref 255643 // Segment
	  param in name "h" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<K,V> ${type}<K,V> ${name}${(}${t0}<K,V> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Gets the table entry for the given segment and hash code."
      end

      operation 1454875 "ConcurrentHashMap"
	public explicit_return_type ""
	nparams 3
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	  param in name "concurrencyLevel" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment " ---------------- Public operations -------------- 

Creates a new, empty map with the specified initial
capacity, load factor and concurrency level.

@param initialCapacity the initial capacity. The implementation
performs internal sizing to accommodate this many elements.
@param loadFactor  the load factor threshold, used to control resizing.
Resizing may be performed when the average number of elements per
bin exceeds this threshold.
@param concurrencyLevel the estimated number of concurrently
updating threads. The implementation performs internal sizing
to try to accommodate this many threads.
@throws IllegalArgumentException if the initial capacity is
negative or the load factor or concurrencyLevel are
nonpositive."
      end

      operation 1455003 "ConcurrentHashMap"
	public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param in name "loadFactor" explicit_type "float"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new, empty map with the specified initial capacity
and load factor and with the default concurrencyLevel (16).

@param initialCapacity The implementation performs internal
sizing to accommodate this many elements.
@param loadFactor  the load factor threshold, used to control resizing.
Resizing may be performed when the average number of elements per
bin exceeds this threshold.
@throws IllegalArgumentException if the initial capacity of
elements is negative or the load factor is nonpositive

@since 1.6"
      end

      operation 1455131 "ConcurrentHashMap"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new, empty map with the specified initial capacity,
and with default load factor (0.75) and concurrencyLevel (16).

@param initialCapacity the initial capacity. The implementation
performs internal sizing to accommodate this many elements.
@throws IllegalArgumentException if the initial capacity of
elements is negative."
      end

      operation 1455259 "ConcurrentHashMap"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new, empty map with a default initial capacity (16),
load factor (0.75) and concurrencyLevel (16)."
      end

      operation 1455387 "ConcurrentHashMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 129819 // Map
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new map with the same mappings as the given map.
The map is created with a capacity of 1.5 times the number
of mappings in the given map or 16 (whichever is greater),
and a default load factor (0.75) and concurrencyLevel (16).

@param m the map"
      end

      operation 1455515 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains no key-value mappings.

@return <tt>true</tt> if this map contains no key-value mappings"
      end

      operation 1455643 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of key-value mappings in this map.  If the
map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns
<tt>Integer.MAX_VALUE</tt>.

@return the number of key-value mappings in this map"
      end

      operation 1455771 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the specified key is mapped,
or {@code null} if this map contains no mapping for the key.

<p>More formally, if this map contains a mapping from a key
{@code k} to a value {@code v} such that {@code key.equals(k)},
then this method returns {@code v}; otherwise it returns
{@code null}.  (There can be at most one such mapping.)

@throws NullPointerException if the specified key is null"
      end

      operation 1455899 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Tests if the specified object is a key in this table.

@param  key   possible key
@return <tt>true</tt> if and only if the specified object
        is a key in this table, as determined by the
        <tt>equals</tt> method; <tt>false</tt> otherwise.
@throws NullPointerException if the specified key is null"
      end

      operation 1456027 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map maps one or more keys to the
specified value. Note: This method requires a full internal
traversal of the hash table, and so is much slower than
method <tt>containsKey</tt>.

@param value value whose presence in this map is to be tested
@return <tt>true</tt> if this map maps one or more keys to the
        specified value
@throws NullPointerException if the specified value is null"
      end

      operation 1456155 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Legacy method testing if some key maps into the specified value
in this table.  This method is identical in functionality to
{@link #containsValue}, and exists solely to ensure
full compatibility with class {@link java.util.Hashtable},
which supported this method prior to introduction of the
Java Collections framework.

@param  value a value to search for
@return <tt>true</tt> if and only if some key maps to the
        <tt>value</tt> argument in this table as
        determined by the <tt>equals</tt> method;
        <tt>false</tt> otherwise
@throws NullPointerException if the specified value is null"
      end

      operation 1456283 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Maps the specified key to the specified value in this table.
Neither the key nor the value can be null.

<p> The value can be retrieved by calling the <tt>get</tt> method
with a key that is equal to the original key.

@param key key with which the specified value is to be associated
@param value value to be associated with the specified key
@return the previous value associated with <tt>key</tt>, or
        <tt>null</tt> if there was no mapping for <tt>key</tt>
@throws NullPointerException if the specified key or value is null"
      end

      operation 1456411 "putIfAbsent"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "{@inheritDoc}

@return the previous value associated with the specified key,
        or <tt>null</tt> if there was no mapping for the key
@throws NullPointerException if the specified key or value is null"
      end

      operation 1456539 "putAll"
	public explicit_return_type "void"
	nparams 1
	  param inout name "m" type class_ref 129819 // Map
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Copies all of the mappings from the specified map to this one.
These mappings replace any mappings that this map had for any of the
keys currently in the specified map.

@param m mappings to be stored in this map"
      end

      operation 1456667 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the key (and its corresponding value) from this map.
This method does nothing if the key is not in the map.

@param  key the key that needs to be removed
@return the previous value associated with <tt>key</tt>, or
        <tt>null</tt> if there was no mapping for <tt>key</tt>
@throws NullPointerException if the specified key is null"
      end

      operation 1456795 "remove"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 3401484 // Object
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws NullPointerException if the specified key is null"
      end

      operation 1456923 "replace"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "oldValue" explicit_type "V"
	  param inout name "newValue" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws NullPointerException if any of the arguments are null"
      end

      operation 1457051 "replace"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@return the previous value associated with the specified key,
        or <tt>null</tt> if there was no mapping for the key
@throws NullPointerException if the specified key or value is null"
      end

      operation 1457179 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the mappings from this map."
      end

      operation 1457307 "keySet"
	public return_type class_ref 129691 // Set
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Set} view of the keys contained in this map.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from this map,
via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,
<tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>
operations.  It does not support the <tt>add</tt> or
<tt>addAll</tt> operations.

<p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator
that will never throw {@link ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction."
      end

      operation 1457435 "values"
	public return_type class_ref 160667 // Collection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Collection} view of the values contained in this map.
The collection is backed by the map, so changes to the map are
reflected in the collection, and vice-versa.  The collection
supports element removal, which removes the corresponding
mapping from this map, via the <tt>Iterator.remove</tt>,
<tt>Collection.remove</tt>, <tt>removeAll</tt>,
<tt>retainAll</tt>, and <tt>clear</tt> operations.  It does not
support the <tt>add</tt> or <tt>addAll</tt> operations.

<p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator
that will never throw {@link ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction."
      end

      operation 1457563 "entrySet"
	public return_type class_ref 129691 // Set
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Set} view of the mappings contained in this map.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,
<tt>removeAll</tt>, <tt>retainAll</tt>, and <tt>clear</tt>
operations.  It does not support the <tt>add</tt> or
<tt>addAll</tt> operations.

<p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator
that will never throw {@link ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction."
      end

      operation 1457691 "keys"
	public return_type class_ref 145947 // Enumeration
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the keys in this table.

@return an enumeration of the keys in this table
@see #keySet()"
      end

      operation 1457819 "elements"
	public return_type class_ref 145947 // Enumeration
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an enumeration of the values in this table.

@return an enumeration of the values in this table
@see #values()"
      end

      class 257051 "HashIterator"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 359963 "nextSegmentIndex"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 360091 "nextTableIndex"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 418203 // currentTable (<unidirectional association>)
	  relation 418203 --->
	    a role_name "currentTable" multiplicity "[]" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V>${multiplicity} ${name}${value};
"
	      classrelation_ref 418203 // currentTable (<unidirectional association>)
	    b parent class_ref 255771 // HashEntry
	end

	classrelation 418331 // nextEntry (<unidirectional association>)
	  relation 418331 --->
	    a role_name "nextEntry" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K, V> ${name}${value};
"
	      classrelation_ref 418331 // nextEntry (<unidirectional association>)
	    b parent class_ref 255771 // HashEntry
	end

	classrelation 418459 // lastReturned (<unidirectional association>)
	  relation 418459 --->
	    a role_name "lastReturned" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K, V> ${name}${value};
"
	      classrelation_ref 418459 // lastReturned (<unidirectional association>)
	    b parent class_ref 255771 // HashEntry
	end

	operation 1457947 "HashIterator"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1458075 "advance"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets nextEntry to first node of next non-empty table
(in backwards order, to simplify checks)."
	end

	operation 1458203 "nextEntry"
	  package return_type class_ref 255771 // HashEntry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1458331 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1458459 "hasMoreElements"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1458587 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 257179 "KeyIterator"
	visibility package 
	nactuals 4
	actual class class_ref 255387 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 255387 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	actual class class_ref 145947 // Enumeration
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 418587 // <generalisation>
	  relation 418587 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 418587 // <generalisation>
	    b parent class_ref 257051 // HashIterator
	end

	classrelation 418715 // <realization>
	  relation 418715 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 418715 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 418843 // <realization>
	  relation 418843 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 418843 // <realization>
	    b parent class_ref 145947 // Enumeration
	end

	operation 1458715 "next"
	  public explicit_return_type "K"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1458843 "nextElement"
	  public explicit_return_type "K"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 257307 "ValueIterator"
	visibility package 
	nactuals 4
	actual class class_ref 255387 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 255387 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	actual class class_ref 145947 // Enumeration
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 418971 // <generalisation>
	  relation 418971 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 418971 // <generalisation>
	    b parent class_ref 257051 // HashIterator
	end

	classrelation 419099 // <realization>
	  relation 419099 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 419099 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 419227 // <realization>
	  relation 419227 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 419227 // <realization>
	    b parent class_ref 145947 // Enumeration
	end

	operation 1458971 "next"
	  public explicit_return_type "V"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1459099 "nextElement"
	  public explicit_return_type "V"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 257435 "WriteThroughEntry"
	visibility package 
	nactuals 4
	actual class class_ref 160411 // AbstractMap
	  rank 0 explicit_value ""
	actual class class_ref 160411 // AbstractMap
	  rank 1 explicit_value ""
	actual class class_ref 160923 // SimpleEntry
	  rank 0 explicit_value ""
	actual class class_ref 160923 // SimpleEntry
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 419355 // <realization>
	  relation 419355 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 419355 // <realization>
	    b parent class_ref 160923 // SimpleEntry
	end

	operation 1459227 "WriteThroughEntry"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "k" explicit_type "K"
	    param inout name "v" explicit_type "V"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1459355 "setValue"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "value" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets our entry's value and writes through to the map. The
value to return is somewhat arbitrary here. Since a
WriteThroughEntry does not necessarily track asynchronous
changes, the most recent \"previous\" value could be
different from what we return (or could even have been
removed in which case the put will re-establish). We do not
and cannot guarantee more."
	end
      end

      class 257563 "EntryIterator"
	visibility package 
	nactuals 3
	actual class class_ref 255387 // ConcurrentHashMap
	  rank 0 explicit_value ""
	actual class class_ref 255387 // ConcurrentHashMap
	  rank 1 explicit_value ""
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 419483 // <generalisation>
	  relation 419483 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 419483 // <generalisation>
	    b parent class_ref 257051 // HashIterator
	end

	classrelation 419611 // <realization>
	  relation 419611 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 419611 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	operation 1459483 "next"
	  public return_type class_ref 160539 // Entry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 257691 "KeySet"
	visibility package 
	nactuals 1
	actual class class_ref 198299 // AbstractSet
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 419739 // <realization>
	  relation 419739 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 419739 // <realization>
	    b parent class_ref 198299 // AbstractSet
	end

	operation 1459611 "iterator"
	  public return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1459739 "size"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1459867 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1459995 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1460123 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1460251 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 257819 "Values"
	visibility package 
	nactuals 1
	actual class class_ref 198427 // AbstractCollection
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 419867 // <realization>
	  relation 419867 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 419867 // <realization>
	    b parent class_ref 198427 // AbstractCollection
	end

	operation 1460379 "iterator"
	  public return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1460507 "size"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1460635 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1460763 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1460891 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 257947 "EntrySet"
	visibility package 
	nactuals 1
	actual class class_ref 198299 // AbstractSet
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 419995 // <realization>
	  relation 419995 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 419995 // <realization>
	    b parent class_ref 198299 // AbstractSet
	end

	operation 1461019 "iterator"
	  public return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1461147 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1461275 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1461403 "size"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1461531 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1461659 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1461787 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Serialization Support -------------- 

Saves the state of the <tt>ConcurrentHashMap</tt> instance to a
stream (i.e., serializes it).
@param s the stream
@serialData
the key (Object) and value (Object)
for each key-value mapping, followed by a null pair.
The key-value mappings are emitted in no particular order."
      end

      operation 1461915 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Reconstitutes the <tt>ConcurrentHashMap</tt> instance from a
stream (i.e., deserializes it).
@param s the stream"
      end

      classrelation 420123 // UNSAFE (<unidirectional association>)
	relation 420123 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 420123 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 360219 "SBASE"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 360347 "SSHIFT"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 360475 "TBASE"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 360603 "TSHIFT"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 131355 "initialization"
	
	cpp "" ""
	java "  static {
        int ss, ts;
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> tc = HashEntry[].class;
            Class<?> sc = Segment[].class;
            TBASE = UNSAFE.arrayBaseOffset(tc);
            SBASE = UNSAFE.arrayBaseOffset(sc);
            ts = UNSAFE.arrayIndexScale(tc);
            ss = UNSAFE.arrayIndexScale(sc);
        } catch (Exception e) {
            throw new Error(e);
        }
        if ((ss & (ss-1)) != 0 || (ts & (ts-1)) != 0)
            throw new Error(\"data type scale not a power of two\");
        SSHIFT = 31 - Integer.numberOfLeadingZeros(ss);
        TSHIFT = 31 - Integer.numberOfLeadingZeros(ts);
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 255515 "ConcurrentMap"
      visibility public stereotype "interface"
      nformals 2
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 129819 // Map
        rank 0 explicit_value ""
      actual class class_ref 129819 // Map
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

A {@link java.util.Map} providing additional atomic
<tt>putIfAbsent</tt>, <tt>remove</tt>, and <tt>replace</tt> methods.

<p>Memory consistency effects: As with other concurrent
collections, actions in a thread prior to placing an object into a
{@code ConcurrentMap} as a key or value
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that object from
the {@code ConcurrentMap} in another thread.

@since 1.5
@author Doug Lea
@param <K> the type of keys maintained by this map
@param <V> the type of mapped values"
      classrelation 413723 // <realization>
	relation 413723 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 413723 // <realization>
	  b parent class_ref 129819 // Map
      end

      operation 1435291 "putIfAbsent"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If the specified key is not already associated
with a value, associate it with the given value.
This is equivalent to
 <pre> {@code
if (!map.containsKey(key))
  return map.put(key, value);
else
  return map.get(key);}</pre>

except that the action is performed atomically.

@param key key with which the specified value is to be associated
@param value value to be associated with the specified key
@return the previous value associated with the specified key, or
        <tt>null</tt> if there was no mapping for the key.
        (A <tt>null</tt> return can also indicate that the map
        previously associated <tt>null</tt> with the key,
        if the implementation supports null values.)
@throws UnsupportedOperationException if the <tt>put</tt> operation
        is not supported by this map
@throws ClassCastException if the class of the specified key or value
        prevents it from being stored in this map
@throws NullPointerException if the specified key or value is null,
        and this map does not permit null keys or values
@throws IllegalArgumentException if some property of the specified key
        or value prevents it from being stored in this map
"
      end

      operation 1435419 "remove"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 3401484 // Object
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the entry for a key only if currently mapped to a given value.
This is equivalent to
 <pre> {@code
if (map.containsKey(key) && map.get(key).equals(value)) {
  map.remove(key);
  return true;
} else
  return false;}</pre>

except that the action is performed atomically.

@param key key with which the specified value is associated
@param value value expected to be associated with the specified key
@return <tt>true</tt> if the value was removed
@throws UnsupportedOperationException if the <tt>remove</tt> operation
        is not supported by this map
@throws ClassCastException if the key or value is of an inappropriate
        type for this map
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)
@throws NullPointerException if the specified key or value is null,
        and this map does not permit null keys or values
        (<a href=\"../Collection.html#optional-restrictions\">optional</a>)"
      end

      operation 1435547 "replace"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "oldValue" explicit_type "V"
	  param inout name "newValue" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the entry for a key only if currently mapped to a given value.
This is equivalent to
 <pre> {@code
if (map.containsKey(key) && map.get(key).equals(oldValue)) {
  map.put(key, newValue);
  return true;
} else
  return false;}</pre>

except that the action is performed atomically.

@param key key with which the specified value is associated
@param oldValue value expected to be associated with the specified key
@param newValue value to be associated with the specified key
@return <tt>true</tt> if the value was replaced
@throws UnsupportedOperationException if the <tt>put</tt> operation
        is not supported by this map
@throws ClassCastException if the class of a specified key or value
        prevents it from being stored in this map
@throws NullPointerException if a specified key or value is null,
        and this map does not permit null keys or values
@throws IllegalArgumentException if some property of a specified key
        or value prevents it from being stored in this map"
      end

      operation 1435675 "replace"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Replaces the entry for a key only if currently mapped to some value.
This is equivalent to
 <pre> {@code
if (map.containsKey(key)) {
  return map.put(key, value);
} else
  return null;}</pre>

except that the action is performed atomically.

@param key key with which the specified value is associated
@param value value to be associated with the specified key
@return the previous value associated with the specified key, or
        <tt>null</tt> if there was no mapping for the key.
        (A <tt>null</tt> return can also indicate that the map
        previously associated <tt>null</tt> with the key,
        if the implementation supports null values.)
@throws UnsupportedOperationException if the <tt>put</tt> operation
        is not supported by this map
@throws ClassCastException if the class of the specified key or value
        prevents it from being stored in this map
@throws NullPointerException if the specified key or value is null,
        and this map does not permit null keys or values
@throws IllegalArgumentException if some property of the specified key
        or value prevents it from being stored in this map"
      end
    end

    class 258075 "ConcurrentLinkedDeque"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 198427 // AbstractCollection
        rank 0 explicit_value ""
      actual class class_ref 233371 // Deque
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

An unbounded concurrent {@linkplain Deque deque} based on linked nodes.
Concurrent insertion, removal, and access operations execute safely
across multiple threads.
A {@code ConcurrentLinkedDeque} is an appropriate choice when
many threads will share access to a common collection.
Like most other concurrent collection implementations, this class
does not permit the use of {@code null} elements.

<p>Iterators are <i>weakly consistent</i>, returning elements
reflecting the state of the deque at some point at or since the
creation of the iterator.  They do <em>not</em> throw {@link
java.util.ConcurrentModificationException
ConcurrentModificationException}, and may proceed concurrently with
other operations.

<p>Beware that, unlike in most collections, the {@code size} method
is <em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these deques, determining the current number
of elements requires a traversal of the elements, and so may report
inaccurate results if this collection is modified during traversal.
Additionally, the bulk operations {@code addAll},
{@code removeAll}, {@code retainAll}, {@code containsAll},
{@code equals}, and {@code toArray} are <em>not</em> guaranteed
to be performed atomically. For example, an iterator operating
concurrently with an {@code addAll} operation might view only some
of the added elements.

<p>This class and its iterator implement all of the <em>optional</em>
methods of the {@link Deque} and {@link Iterator} interfaces.

<p>Memory consistency effects: As with other concurrent collections,
actions in a thread prior to placing an object into a
{@code ConcurrentLinkedDeque}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that element from
the {@code ConcurrentLinkedDeque} in another thread.

@hide

@since 1.7
@author Doug Lea
@author Martin Buchholz
@param <E> the type of elements held in this collection"
      classrelation 420251 // <realization>
	relation 420251 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 420251 // <realization>
	  b parent class_ref 198427 // AbstractCollection
      end

      classrelation 420379 // <realization>
	relation 420379 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 420379 // <realization>
	  b parent class_ref 233371 // Deque
      end

      classrelation 420507 // <realization>
	relation 420507 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 420507 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 360731 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 876323262645176354L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This is an implementation of a concurrent lock-free deque
supporting interior removes but not interior insertions, as
required to support the entire Deque interface.

We extend the techniques developed for ConcurrentLinkedQueue and
LinkedTransferQueue (see the internal docs for those classes).
Understanding the ConcurrentLinkedQueue implementation is a
prerequisite for understanding the implementation of this class.

The data structure is a symmetrical doubly-linked \"GC-robust\"
linked list of nodes.  We minimize the number of volatile writes
using two techniques: advancing multiple hops with a single CAS
and mixing volatile and non-volatile writes of the same memory
locations.

A node contains the expected E (\"item\") and links to predecessor
(\"prev\") and successor (\"next\") nodes:

class Node<E> { volatile Node<E> prev, next; volatile E item; }

A node p is considered \"live\" if it contains a non-null item
(p.item != null).  When an item is CASed to null, the item is
atomically logically deleted from the collection.

At any time, there is precisely one \"first\" node with a null
prev reference that terminates any chain of prev references
starting at a live node.  Similarly there is precisely one
\"last\" node terminating any chain of next references starting at
a live node.  The \"first\" and \"last\" nodes may or may not be live.
The \"first\" and \"last\" nodes are always mutually reachable.

A new element is added atomically by CASing the null prev or
next reference in the first or last node to a fresh node
containing the element.  The element's node atomically becomes
\"live\" at that point.

A node is considered \"active\" if it is a live node, or the
first or last node.  Active nodes cannot be unlinked.

A \"self-link\" is a next or prev reference that is the same node:
  p.prev == p  or  p.next == p
Self-links are used in the node unlinking process.  Active nodes
never have self-links.

A node p is active if and only if:

p.item != null ||
(p.prev == null && p.next != p) ||
(p.next == null && p.prev != p)

The deque object has two node references, \"head\" and \"tail\".
The head and tail are only approximations to the first and last
nodes of the deque.  The first node can always be found by
following prev pointers from head; likewise for tail.  However,
it is permissible for head and tail to be referring to deleted
nodes that have been unlinked and so may not be reachable from
any live node.

There are 3 stages of node deletion;
\"logical deletion\", \"unlinking\", and \"gc-unlinking\".

1. \"logical deletion\" by CASing item to null atomically removes
the element from the collection, and makes the containing node
eligible for unlinking.

2. \"unlinking\" makes a deleted node unreachable from active
nodes, and thus eventually reclaimable by GC.  Unlinked nodes
may remain reachable indefinitely from an iterator.

Physical node unlinking is merely an optimization (albeit a
critical one), and so can be performed at our convenience.  At
any time, the set of live nodes maintained by prev and next
links are identical, that is, the live nodes found via next
links from the first node is equal to the elements found via
prev links from the last node.  However, this is not true for
nodes that have already been logically deleted - such nodes may
be reachable in one direction only.

3. \"gc-unlinking\" takes unlinking further by making active
nodes unreachable from deleted nodes, making it easier for the
GC to reclaim future deleted nodes.  This step makes the data
structure \"gc-robust\", as first described in detail by Boehm
(http://portal.acm.org/citation.cfm?doid=503272.503282).

GC-unlinked nodes may remain reachable indefinitely from an
iterator, but unlike unlinked nodes, are never reachable from
head or tail.

Making the data structure GC-robust will eliminate the risk of
unbounded memory retention with conservative GCs and is likely
to improve performance with generational GCs.

When a node is dequeued at either end, e.g. via poll(), we would
like to break any references from the node to active nodes.  We
develop further the use of self-links that was very effective in
other concurrent collection classes.  The idea is to replace
prev and next pointers with special values that are interpreted
to mean off-the-list-at-one-end.  These are approximations, but
good enough to preserve the properties we want in our
traversals, e.g. we guarantee that a traversal will never visit
the same element twice, but we don't guarantee whether a
traversal that runs out of elements will be able to see more
elements later after enqueues at that end.  Doing gc-unlinking
safely is particularly tricky, since any node can be in use
indefinitely (for example by an iterator).  We must ensure that
the nodes pointed at by head/tail never get gc-unlinked, since
head/tail are needed to get \"back on track\" by other nodes that
are gc-unlinked.  gc-unlinking accounts for much of the
implementation complexity.

Since neither unlinking nor gc-unlinking are necessary for
correctness, there are many implementation choices regarding
frequency (eagerness) of these operations.  Since volatile
reads are likely to be much cheaper than CASes, saving CASes by
unlinking multiple adjacent nodes at a time may be a win.
gc-unlinking can be performed rarely and still be effective,
since it is most important that long chains of deleted nodes
are occasionally broken.

The actual representation we use is that p.next == p means to
goto the first node (which in turn is reached by following prev
pointers from head), and p.next == null && p.prev == p means
that the iteration is at an end and that p is a (static final)
dummy node, NEXT_TERMINATOR, and not the last active node.
Finishing the iteration when encountering such a TERMINATOR is
good enough for read-only traversals, so such traversals can use
p.next == null as the termination condition.  When we need to
find the last (active) node, for enqueueing a new node, we need
to check whether we have reached a TERMINATOR node; if so,
restart traversal from tail.

The implementation is completely directionally symmetrical,
except that most public methods that iterate through the list
follow next pointers (\"forward\" direction).

We believe (without full proof) that all single-element deque
operations (e.g., addFirst, peekLast, pollLast) are linearizable
(see Herlihy and Shavit's book).  However, some combinations of
operations are known not to be linearizable.  In particular,
when an addFirst(A) is racing with pollFirst() removing B, it is
possible for an observer iterating over the elements to observe
A B C and subsequently observe A C, even though no interior
removes are ever performed.  Nevertheless, iterators behave
reasonably, providing the \"weakly consistent\" guarantees.

Empirically, microbenchmarks suggest that this class adds about
40% overhead relative to ConcurrentLinkedQueue, which feels as
good as we can hope for.
"
      end

      class 258203 "Node"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 421147 // prev (<unidirectional association>)
	  relation 421147 --->
	    a role_name "prev" volatile package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 421147 // prev (<unidirectional association>)
	    b parent class_ref 258203 // Node
	end

	attribute 360859 "item"
	  volatile package explicit_type "E"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 421275 // next (<unidirectional association>)
	  relation 421275 --->
	    a role_name "next" volatile package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 421275 // next (<unidirectional association>)
	    b parent class_ref 258203 // Node
	end

	operation 1462299 "Node"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1462427 "Node"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "item" explicit_type "E"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new node.  Uses relaxed write because item can
only be seen after publication via casNext or casPrev."
	end

	operation 1462555 "casItem"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" explicit_type "E"
	    param inout name "val" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1462683 "lazySetNext"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "val" type class_ref 258203 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1462811 "casNext"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 258203 // Node
	    param inout name "val" type class_ref 258203 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1462939 "lazySetPrev"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "val" type class_ref 258203 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1463067 "casPrev"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 258203 // Node
	    param inout name "val" type class_ref 258203 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 421403 // UNSAFE (<unidirectional association>)
	  relation 421403 --->
	    a role_name "UNSAFE" class_relation const_relation private
	      comment " Unsafe mechanics
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 421403 // UNSAFE (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 360987 "prevOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 361115 "itemOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 361243 "nextOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	extra_member 131483 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = Node.class;
                prevOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"prev\"));
                itemOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"item\"));
                nextOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"next\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	end
      end

      classrelation 420635 // head (<unidirectional association>)
	relation 420635 --->
	  a role_name "head" volatile private
	    comment "
A node from which the first node on list (that is, the unique node p
with p.prev == null && p.next != p) can be reached in O(1) time.
Invariants:
- the first node is always O(1) reachable from head via prev links
- all live nodes are reachable from the first node via succ()
- head != null
- (tmp = head).next != tmp || tmp != head
- head is never gc-unlinked (but may be unlinked)
Non-invariants:
- head.item may or may not be null
- head may not be reachable from the first or last node, or from tail

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 420635 // head (<unidirectional association>)
	  b parent class_ref 258203 // Node
      end

      classrelation 420763 // tail (<unidirectional association>)
	relation 420763 --->
	  a role_name "tail" volatile private
	    comment "
A node from which the last node on list (that is, the unique node p
with p.next == null && p.prev != p) can be reached in O(1) time.
Invariants:
- the last node is always O(1) reachable from tail via next links
- all live nodes are reachable from the last node via pred()
- tail != null
- tail is never gc-unlinked (but may be unlinked)
Non-invariants:
- tail.item may or may not be null
- tail may not be reachable from the first or last node, or from head

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 420763 // tail (<unidirectional association>)
	  b parent class_ref 258203 // Node
      end

      classrelation 420891 // PREV_TERMINATOR (<unidirectional association>)
	relation 420891 --->
	  a role_name "PREV_TERMINATOR" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 420891 // PREV_TERMINATOR (<unidirectional association>)
	  b parent class_ref 258203 // Node
      end

      classrelation 421019 // NEXT_TERMINATOR (<unidirectional association>)
	relation 421019 --->
	  a role_name "NEXT_TERMINATOR" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 421019 // NEXT_TERMINATOR (<unidirectional association>)
	  b parent class_ref 258203 // Node
      end

      operation 1462043 "prevTerminator"
	package return_type class_ref 258203 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 1462171 "nextTerminator"
	package return_type class_ref 258203 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 1463195 "linkFirst"
	private explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Links e as first element."
      end

      operation 1463323 "linkLast"
	private explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Links e as last element."
      end

      attribute 361371 "HOPS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1463451 "unlink"
	package explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 258203 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks non-null node x."
      end

      operation 1463579 "unlinkFirst"
	private explicit_return_type "void"
	nparams 2
	  param inout name "first" type class_ref 258203 // Node
	  param inout name "next" type class_ref 258203 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks non-null first node."
      end

      operation 1463707 "unlinkLast"
	private explicit_return_type "void"
	nparams 2
	  param inout name "last" type class_ref 258203 // Node
	  param inout name "prev" type class_ref 258203 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks non-null last node."
      end

      operation 1463835 "updateHead"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Guarantees that any node which was unlinked before a call to
this method will be unreachable from head after it returns.
Does not guarantee to eliminate slack, only that head will
point to a node that was active while this method was running."
      end

      operation 1463963 "updateTail"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Guarantees that any node which was unlinked before a call to
this method will be unreachable from tail after it returns.
Does not guarantee to eliminate slack, only that tail will
point to a node that was active while this method was running."
      end

      operation 1464091 "skipDeletedPredecessors"
	private explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 258203 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1464219 "skipDeletedSuccessors"
	private explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 258203 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1464347 "succ"
	package return_type class_ref 258203 // Node
	nparams 1
	  param inout name "p" type class_ref 258203 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the successor of p, or the first node if p.next has been
linked to self, which will only be true if traversing with a
stale pointer that is now off the list."
      end

      operation 1464475 "pred"
	package return_type class_ref 258203 // Node
	nparams 1
	  param inout name "p" type class_ref 258203 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the predecessor of p, or the last node if p.prev has been
linked to self, which will only be true if traversing with a
stale pointer that is now off the list."
      end

      operation 1464603 "first"
	package return_type class_ref 258203 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first node, the unique node p for which:
    p.prev == null && p.next != p
The returned node may or may not be logically deleted.
Guarantees that head is set to the returned node."
      end

      operation 1464731 "last"
	package return_type class_ref 258203 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the last node, the unique node p for which:
    p.next == null && p.prev != p
The returned node may or may not be logically deleted.
Guarantees that tail is set to the returned node."
      end

      operation 1464859 "checkNotNull"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Minor convenience utilities

Throws NullPointerException if argument is null.

@param v the element"
      end

      operation 1464987 "screenNullResult"
	private explicit_return_type "E"
	nparams 1
	  param inout name "v" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns element unless it is null, in which case throws
NoSuchElementException.

@param v the element
@return the element"
      end

      operation 1465115 "toArrayList"
	private return_type class_ref 138267 // ArrayList
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an array list and fills it with elements of this list.
Used by toArray.

@return the arrayList"
      end

      operation 1465243 "ConcurrentLinkedDeque"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs an empty deque."
      end

      operation 1465371 "ConcurrentLinkedDeque"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a deque initially containing the elements of
the given collection, added in traversal order of the
collection's iterator.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null"
      end

      operation 1465499 "initHeadTail"
	private explicit_return_type "void"
	nparams 2
	  param inout name "h" type class_ref 258203 // Node
	  param inout name "t" type class_ref 258203 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes head and tail, ensuring invariants hold."
      end

      operation 1465627 "addFirst"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the front of this deque.
As the deque is unbounded, this method will never throw
{@link IllegalStateException}.

@throws NullPointerException if the specified element is null"
      end

      operation 1465755 "addLast"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque.
As the deque is unbounded, this method will never throw
{@link IllegalStateException}.

<p>This method is equivalent to {@link #add}.

@throws NullPointerException if the specified element is null"
      end

      operation 1465883 "offerFirst"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the front of this deque.
As the deque is unbounded, this method will never return {@code false}.

@return {@code true} (as specified by {@link Deque#offerFirst})
@throws NullPointerException if the specified element is null"
      end

      operation 1466011 "offerLast"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the end of this deque.
As the deque is unbounded, this method will never return {@code false}.

<p>This method is equivalent to {@link #add}.

@return {@code true} (as specified by {@link Deque#offerLast})
@throws NullPointerException if the specified element is null"
      end

      operation 1466139 "peekFirst"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1466267 "peekLast"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1466395 "getFirst"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1466523 "getLast"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1466651 "pollFirst"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1466779 "pollLast"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1466907 "removeFirst"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1467035 "removeLast"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1467163 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " *** Queue and stack methods ***

Inserts the specified element at the tail of this deque.
As the deque is unbounded, this method will never return {@code false}.

@return {@code true} (as specified by {@link Queue#offer})
@throws NullPointerException if the specified element is null"
      end

      operation 1467291 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this deque.
As the deque is unbounded, this method will never throw
{@link IllegalStateException} or return {@code false}.

@return {@code true} (as specified by {@link Collection#add})
@throws NullPointerException if the specified element is null"
      end

      operation 1467419 "poll"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1467547 "remove"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1467675 "peek"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1467803 "element"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1467931 "push"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1468059 "pop"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1468187 "removeFirstOccurrence"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first element {@code e} such that
{@code o.equals(e)}, if such an element exists in this deque.
If the deque does not contain the element, it is unchanged.

@param o element to be removed from this deque, if present
@return {@code true} if the deque contained the specified element
@throws NullPointerException if the specified element is null"
      end

      operation 1468315 "removeLastOccurrence"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the last element {@code e} such that
{@code o.equals(e)}, if such an element exists in this deque.
If the deque does not contain the element, it is unchanged.

@param o element to be removed from this deque, if present
@return {@code true} if the deque contained the specified element
@throws NullPointerException if the specified element is null"
      end

      operation 1468443 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this deque contains at least one
element {@code e} such that {@code o.equals(e)}.

@param o element whose presence in this deque is to be tested
@return {@code true} if this deque contains the specified element"
      end

      operation 1468571 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this collection contains no elements.

@return {@code true} if this collection contains no elements"
      end

      operation 1468699 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this deque.  If this deque
contains more than {@code Integer.MAX_VALUE} elements, it
returns {@code Integer.MAX_VALUE}.

<p>Beware that, unlike in most collections, this method is
<em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these deques, determining the current
number of elements requires traversing them all to count them.
Additionally, it is possible for the size to change during
execution of this method, in which case the returned result
will be inaccurate. Thus, this method is typically not very
useful in concurrent applications.

@return the number of elements in this deque"
      end

      operation 1468827 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the first element {@code e} such that
{@code o.equals(e)}, if such an element exists in this deque.
If the deque does not contain the element, it is unchanged.

@param o element to be removed from this deque, if present
@return {@code true} if the deque contained the specified element
@throws NullPointerException if the specified element is null"
      end

      operation 1468955 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified collection to the end of
this deque, in the order that they are returned by the specified
collection's iterator.  Attempts to {@code addAll} of a deque to
itself result in {@code IllegalArgumentException}.

@param c the elements to be inserted into this deque
@return {@code true} if this deque changed as a result of the call
@throws NullPointerException if the specified collection or any
        of its elements are null
@throws IllegalArgumentException if the collection is this deque"
      end

      operation 1469083 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this deque."
      end

      operation 1469211 "toArray"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this deque, in
proper sequence (from first to last element).

<p>The returned array will be \"safe\" in that no references to it are
maintained by this deque.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this deque"
      end

      operation 1469339 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this deque,
in proper sequence (from first to last element); the runtime
type of the returned array is that of the specified array.  If
the deque fits in the specified array, it is returned therein.
Otherwise, a new array is allocated with the runtime type of
the specified array and the size of this deque.

<p>If this deque fits in the specified array with room to spare
(i.e., the array has more elements than this deque), the element in
the array immediately following the end of the deque is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as
bridge between array-based and collection-based APIs.  Further,
this method allows precise control over the runtime type of the
output array, and may, under certain circumstances, be used to
save allocation costs.

<p>Suppose {@code x} is a deque known to contain only strings.
The following code can be used to dump the deque into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the deque are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this deque
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this deque
@throws NullPointerException if the specified array is null"
      end

      operation 1469467 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this deque in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException
ConcurrentModificationException}, and guarantees to traverse
elements as they existed upon construction of the iterator, and
may (but is not guaranteed to) reflect any modifications
subsequent to construction.

@return an iterator over the elements in this deque in proper sequence"
      end

      operation 1469595 "descendingIterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this deque in reverse
sequential order.  The elements will be returned in order from
last (tail) to first (head).

<p>The returned iterator is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException
ConcurrentModificationException}, and guarantees to traverse
elements as they existed upon construction of the iterator, and
may (but is not guaranteed to) reflect any modifications
subsequent to construction.

@return an iterator over the elements in this deque in reverse order"
      end

      class 258331 "AbstractItr"
	abstract visibility private 
	nactuals 1
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 421531 // <realization>
	  relation 421531 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 421531 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 421659 // nextNode (<unidirectional association>)
	  relation 421659 --->
	    a role_name "nextNode" private
	      comment "
Next node to return item for.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 421659 // nextNode (<unidirectional association>)
	    b parent class_ref 258203 // Node
	end

	attribute 361499 "nextItem"
	  private explicit_type "E"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "nextItem holds on to item fields because once we claim
that an element exists in hasNext(), we must return it in
the following next() call even if it was in the process of
being removed when hasNext() was called.
"
	end

	classrelation 421787 // lastRet (<unidirectional association>)
	  relation 421787 --->
	    a role_name "lastRet" private
	      comment "
Node returned by most recent call to next. Needed by remove.
Reset to null if this element is deleted by a call to remove.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 421787 // lastRet (<unidirectional association>)
	    b parent class_ref 258203 // Node
	end

	operation 1469723 "startNode"
	  abstract package return_type class_ref 258203 // Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1469851 "nextNode"
	  abstract package return_type class_ref 258203 // Node
	  nparams 1
	    param inout name "p" type class_ref 258203 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1469979 "AbstractItr"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1470107 "advance"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets nextNode and nextItem to next valid node, or to null
if no such."
	end

	operation 1470235 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1470363 "next"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1470491 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 258459 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 258075 // ConcurrentLinkedDeque
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 421915 // <generalisation>
	  relation 421915 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 421915 // <generalisation>
	    b parent class_ref 258331 // AbstractItr
	end

	operation 1470619 "startNode"
	  package return_type class_ref 258203 // Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1470747 "nextNode"
	  package return_type class_ref 258203 // Node
	  nparams 1
	    param inout name "p" type class_ref 258203 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 258587 "DescendingItr"
	visibility private 
	nactuals 1
	actual class class_ref 258075 // ConcurrentLinkedDeque
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 422043 // <generalisation>
	  relation 422043 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 422043 // <generalisation>
	    b parent class_ref 258331 // AbstractItr
	end

	operation 1470875 "startNode"
	  package return_type class_ref 258203 // Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1471003 "nextNode"
	  package return_type class_ref 258203 // Node
	  nparams 1
	    param inout name "p" type class_ref 258203 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1471131 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves the state to a stream (that is, serializes it).

@serialData All of the elements (each an {@code E}) in
the proper order, followed by a null
@param s the stream"
      end

      operation 1471259 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes the instance from a stream (that is, deserializes it).
@param s the stream"
      end

      operation 1471387 "casHead"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 258203 // Node
	  param inout name "val" type class_ref 258203 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1471515 "casTail"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 258203 // Node
	  param inout name "val" type class_ref 258203 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 422171 // UNSAFE (<unidirectional association>)
	relation 422171 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 422171 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 361627 "headOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 361755 "tailOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 131611 "initialization"
	
	cpp "" ""
	java "  static {
        PREV_TERMINATOR = new Node<Object>();
        PREV_TERMINATOR.next = PREV_TERMINATOR;
        NEXT_TERMINATOR = new Node<Object>();
        NEXT_TERMINATOR.prev = NEXT_TERMINATOR;
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ConcurrentLinkedDeque.class;
            headOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"head\"));
            tailOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"tail\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 258715 "ConcurrentLinkedQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 232859 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 232987 // Queue
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

An unbounded thread-safe {@linkplain Queue queue} based on linked nodes.
This queue orders elements FIFO (first-in-first-out).
The <em>head</em> of the queue is that element that has been on the
queue the longest time.
The <em>tail</em> of the queue is that element that has been on the
queue the shortest time. New elements
are inserted at the tail of the queue, and the queue retrieval
operations obtain elements at the head of the queue.
A {@code ConcurrentLinkedQueue} is an appropriate choice when
many threads will share access to a common collection.
Like most other concurrent collection implementations, this class
does not permit the use of {@code null} elements.

<p>This implementation employs an efficient &quot;wait-free&quot;
algorithm based on one described in <a
href=\"http://www.cs.rochester.edu/u/michael/PODC96.html\"> Simple,
Fast, and Practical Non-Blocking and Blocking Concurrent Queue
Algorithms</a> by Maged M. Michael and Michael L. Scott.

<p>Iterators are <i>weakly consistent</i>, returning elements
reflecting the state of the queue at some point at or since the
creation of the iterator.  They do <em>not</em> throw {@link
java.util.ConcurrentModificationException}, and may proceed concurrently
with other operations.  Elements contained in the queue since the creation
of the iterator will be returned exactly once.

<p>Beware that, unlike in most collections, the {@code size} method
is <em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these queues, determining the current number
of elements requires a traversal of the elements, and so may report
inaccurate results if this collection is modified during traversal.
Additionally, the bulk operations {@code addAll},
{@code removeAll}, {@code retainAll}, {@code containsAll},
{@code equals}, and {@code toArray} are <em>not</em> guaranteed
to be performed atomically. For example, an iterator operating
concurrently with an {@code addAll} operation might view only some
of the added elements.

<p>This class and its iterator implement all of the <em>optional</em>
methods of the {@link Queue} and {@link Iterator} interfaces.

<p>Memory consistency effects: As with other concurrent
collections, actions in a thread prior to placing an object into a
{@code ConcurrentLinkedQueue}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that element from
the {@code ConcurrentLinkedQueue} in another thread.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 422299 // <realization>
	relation 422299 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 422299 // <realization>
	  b parent class_ref 232859 // AbstractQueue
      end

      classrelation 422427 // <realization>
	relation 422427 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 422427 // <realization>
	  b parent class_ref 232987 // Queue
      end

      classrelation 422555 // <realization>
	relation 422555 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 422555 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 361883 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 196745693267521676L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 258843 "Node"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 362011 "item"
	  volatile package explicit_type "E"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 422683 // next (<unidirectional association>)
	  relation 422683 --->
	    a role_name "next" volatile package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 422683 // next (<unidirectional association>)
	    b parent class_ref 258843 // Node
	end

	operation 1471643 "Node"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "item" explicit_type "E"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new node.  Uses relaxed write because item can
only be seen after publication via casNext."
	end

	operation 1471771 "casItem"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" explicit_type "E"
	    param inout name "val" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1471899 "lazySetNext"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "val" type class_ref 258843 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1472027 "casNext"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 258843 // Node
	    param inout name "val" type class_ref 258843 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 422811 // UNSAFE (<unidirectional association>)
	  relation 422811 --->
	    a role_name "UNSAFE" class_relation const_relation private
	      comment " Unsafe mechanics
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 422811 // UNSAFE (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 362139 "itemOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 362267 "nextOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	extra_member 131739 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = Node.class;
                itemOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"item\"));
                nextOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"next\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	end
      end

      classrelation 422939 // head (<unidirectional association>)
	relation 422939 --->
	  a role_name "head" volatile private
	    comment "
A node from which the first live (non-deleted) node (if any)
can be reached in O(1) time.
Invariants:
- all live nodes are reachable from head via succ()
- head != null
- (tmp = head).next != tmp || tmp != head
Non-invariants:
- head.item may or may not be null.
- it is permitted for tail to lag behind head, that is, for tail
  to not be reachable from head!

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 422939 // head (<unidirectional association>)
	  b parent class_ref 258843 // Node
      end

      classrelation 423067 // tail (<unidirectional association>)
	relation 423067 --->
	  a role_name "tail" volatile private
	    comment "
A node from which the last node on list (that is, the unique
node with node.next == null) can be reached in O(1) time.
Invariants:
- the last node is always reachable from tail via succ()
- tail != null
Non-invariants:
- tail.item may or may not be null.
- it is permitted for tail to lag behind head, that is, for tail
  to not be reachable from head!
- tail.next may or may not be self-pointing to tail.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 423067 // tail (<unidirectional association>)
	  b parent class_ref 258843 // Node
      end

      operation 1472155 "ConcurrentLinkedQueue"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ConcurrentLinkedQueue} that is initially empty."
      end

      operation 1472283 "ConcurrentLinkedQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ConcurrentLinkedQueue}
initially containing the elements of the given collection,
added in traversal order of the collection's iterator.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null"
      end

      operation 1472411 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Have to override just to update the javadoc

Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never throw
{@link IllegalStateException} or return {@code false}.

@return {@code true} (as specified by {@link Collection#add})
@throws NullPointerException if the specified element is null"
      end

      operation 1472539 "updateHead"
	package explicit_return_type "void"
	nparams 2
	  param inout name "h" type class_ref 258843 // Node
	  param inout name "p" type class_ref 258843 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Try to CAS head to p. If successful, repoint old head to itself
as sentinel for succ(), below."
      end

      operation 1472667 "succ"
	package return_type class_ref 258843 // Node
	nparams 1
	  param inout name "p" type class_ref 258843 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the successor of p, or the head node if p.next has been
linked to self, which will only be true if traversing with a
stale pointer that is now off the list."
      end

      operation 1472795 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never return {@code false}.

@return {@code true} (as specified by {@link Queue#offer})
@throws NullPointerException if the specified element is null"
      end

      operation 1472923 "poll"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1473051 "peek"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1473179 "first"
	package return_type class_ref 258843 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first live (non-deleted) node on list, or null if none.
This is yet another variant of poll/peek; here returning the
first node, not element.  We could make peek() a wrapper around
first(), but that would cost an extra volatile read of item,
and the need to add a retry loop to deal with the possibility
of losing a race to a concurrent poll()."
      end

      operation 1473307 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains no elements.

@return {@code true} if this queue contains no elements"
      end

      operation 1473435 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this queue.  If this queue
contains more than {@code Integer.MAX_VALUE} elements, returns
{@code Integer.MAX_VALUE}.

<p>Beware that, unlike in most collections, this method is
<em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these queues, determining the current
number of elements requires an O(n) traversal.
Additionally, if elements are added or removed during execution
of this method, the returned result may be inaccurate.  Thus,
this method is typically not very useful in concurrent
applications.

@return the number of elements in this queue"
      end

      operation 1473563 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains the specified element.
More formally, returns {@code true} if and only if this queue contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this queue
@return {@code true} if this queue contains the specified element"
      end

      operation 1473691 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element {@code e} such
that {@code o.equals(e)}, if this queue contains one or more such
elements.
Returns {@code true} if this queue contained the specified element
(or equivalently, if this queue changed as a result of the call).

@param o element to be removed from this queue, if present
@return {@code true} if this queue changed as a result of the call"
      end

      operation 1473819 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Appends all of the elements in the specified collection to the end of
this queue, in the order that they are returned by the specified
collection's iterator.  Attempts to {@code addAll} of a queue to
itself result in {@code IllegalArgumentException}.

@param c the elements to be inserted into this queue
@return {@code true} if this queue changed as a result of the call
@throws NullPointerException if the specified collection or any
        of its elements are null
@throws IllegalArgumentException if the collection is this queue"
      end

      operation 1473947 "toArray"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence.

<p>The returned array will be \"safe\" in that no references to it are
maintained by this queue.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this queue"
      end

      operation 1474075 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence; the runtime type of the returned array is that of
the specified array.  If the queue fits in the specified array, it
is returned therein.  Otherwise, a new array is allocated with the
runtime type of the specified array and the size of this queue.

<p>If this queue fits in the specified array with room to spare
(i.e., the array has more elements than this queue), the element in
the array immediately following the end of the queue is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a queue known to contain only strings.
The following code can be used to dump the queue into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the queue are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this queue
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this queue
@throws NullPointerException if the specified array is null"
      end

      operation 1474203 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException
ConcurrentModificationException}, and guarantees to traverse
elements as they existed upon construction of the iterator, and
may (but is not guaranteed to) reflect any modifications
subsequent to construction.

@return an iterator over the elements in this queue in proper sequence"
      end

      class 258971 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 423195 // <realization>
	  relation 423195 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 423195 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 423323 // nextNode (<unidirectional association>)
	  relation 423323 --->
	    a role_name "nextNode" private
	      comment "
Next node to return item for.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 423323 // nextNode (<unidirectional association>)
	    b parent class_ref 258843 // Node
	end

	attribute 362395 "nextItem"
	  private explicit_type "E"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "nextItem holds on to item fields because once we claim
that an element exists in hasNext(), we must return it in
the following next() call even if it was in the process of
being removed when hasNext() was called.
"
	end

	classrelation 423451 // lastRet (<unidirectional association>)
	  relation 423451 --->
	    a role_name "lastRet" private
	      comment "
Node of the last returned item, to support remove.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 423451 // lastRet (<unidirectional association>)
	    b parent class_ref 258843 // Node
	end

	operation 1474331 "Itr"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1474459 "advance"
	  private explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Moves to next valid node and returns item to return for
next(), or null if no such."
	end

	operation 1474587 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1474715 "next"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1474843 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1474971 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves the state to a stream (that is, serializes it).

@serialData All of the elements (each an {@code E}) in
the proper order, followed by a null
@param s the stream"
      end

      operation 1475099 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes the instance from a stream (that is, deserializes it).
@param s the stream"
      end

      operation 1475227 "checkNotNull"
	class_operation private explicit_return_type "void"
	nparams 1
	  param inout name "v" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws NullPointerException if argument is null.

@param v the element"
      end

      operation 1475355 "casTail"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 258843 // Node
	  param inout name "val" type class_ref 258843 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1475483 "casHead"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 258843 // Node
	  param inout name "val" type class_ref 258843 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 423579 // UNSAFE (<unidirectional association>)
	relation 423579 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 423579 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 362523 "headOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 362651 "tailOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 131867 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ConcurrentLinkedQueue.class;
            headOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"head\"));
            tailOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"tail\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 259099 "ConcurrentNavigableMap"
      visibility public stereotype "interface"
      nformals 2
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 255515 // ConcurrentMap
        rank 0 explicit_value ""
      actual class class_ref 255515 // ConcurrentMap
        rank 1 explicit_value ""
      actual class class_ref 247323 // NavigableMap
        rank 0 explicit_value ""
      actual class class_ref 247323 // NavigableMap
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

A {@link ConcurrentMap} supporting {@link NavigableMap} operations,
and recursively so for its navigable sub-maps.

@author Doug Lea
@param <K> the type of keys maintained by this map
@param <V> the type of mapped values
@since 1.6"
      classrelation 423707 // <realization>
	relation 423707 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 423707 // <realization>
	  b parent class_ref 255515 // ConcurrentMap
      end

      classrelation 423835 // <realization>
	relation 423835 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 423835 // <realization>
	  b parent class_ref 247323 // NavigableMap
      end

      operation 1475611 "subMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 4
	  param inout name "fromKey" explicit_type "K"
	  param inout name "fromInclusive" explicit_type "boolean"
	  param inout name "toKey" explicit_type "K"
	  param inout name "toInclusive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1475739 "headMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 2
	  param inout name "toKey" explicit_type "K"
	  param inout name "inclusive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1475867 "tailMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 2
	  param inout name "fromKey" explicit_type "K"
	  param inout name "inclusive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1475995 "subMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 2
	  param inout name "fromKey" explicit_type "K"
	  param inout name "toKey" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1476123 "headMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 1
	  param inout name "toKey" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1476251 "tailMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 1
	  param inout name "fromKey" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException       {@inheritDoc}
@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1476379 "descendingMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reverse order view of the mappings contained in this map.
The descending map is backed by this map, so changes to the map are
reflected in the descending map, and vice-versa.

<p>The returned map has an ordering equivalent to
<tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.
The expression {@code m.descendingMap().descendingMap()} returns a
view of {@code m} essentially equivalent to {@code m}.

@return a reverse order view of this map"
      end

      operation 1476507 "navigableKeySet"
	public return_type class_ref 247451 // NavigableSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link NavigableSet} view of the keys contained in this map.
The set's iterator returns the keys in ascending order.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the {@code Iterator.remove}, {@code Set.remove},
{@code removeAll}, {@code retainAll}, and {@code clear}
operations.  It does not support the {@code add} or {@code addAll}
operations.

<p>The view's {@code iterator} is a \"weakly consistent\" iterator
that will never throw {@link ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction.

@return a navigable set view of the keys in this map"
      end

      operation 1476635 "keySet"
	public return_type class_ref 247451 // NavigableSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link NavigableSet} view of the keys contained in this map.
The set's iterator returns the keys in ascending order.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the {@code Iterator.remove}, {@code Set.remove},
{@code removeAll}, {@code retainAll}, and {@code clear}
operations.  It does not support the {@code add} or {@code addAll}
operations.

<p>The view's {@code iterator} is a \"weakly consistent\" iterator
that will never throw {@link ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction.

<p>This method is equivalent to method {@code navigableKeySet}.

@return a navigable set view of the keys in this map"
      end

      operation 1476763 "descendingKeySet"
	public return_type class_ref 247451 // NavigableSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reverse order {@link NavigableSet} view of the keys contained in this map.
The set's iterator returns the keys in descending order.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the {@code Iterator.remove}, {@code Set.remove},
{@code removeAll}, {@code retainAll}, and {@code clear}
operations.  It does not support the {@code add} or {@code addAll}
operations.

<p>The view's {@code iterator} is a \"weakly consistent\" iterator
that will never throw {@link ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction.

@return a reverse order navigable set view of the keys in this map"
      end
    end

    class 259227 "ConcurrentSkipListMap"
      visibility public 
      nformals 2
      formal name "K" type "" explicit_default_value ""
        explicit_extends ""
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 4
      actual class class_ref 160411 // AbstractMap
        rank 0 explicit_value ""
      actual class class_ref 160411 // AbstractMap
        rank 1 explicit_value ""
      actual class class_ref 259099 // ConcurrentNavigableMap
        rank 0 explicit_value ""
      actual class class_ref 259099 // ConcurrentNavigableMap
        rank 1 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

A scalable concurrent {@link ConcurrentNavigableMap} implementation.
The map is sorted according to the {@linkplain Comparable natural
ordering} of its keys, or by a {@link Comparator} provided at map
creation time, depending on which constructor is used.

<p>This class implements a concurrent variant of <a
href=\"http://en.wikipedia.org/wiki/Skip_list\" target=\"_top\">SkipLists</a>
providing expected average <i>log(n)</i> time cost for the
<tt>containsKey</tt>, <tt>get</tt>, <tt>put</tt> and
<tt>remove</tt> operations and their variants.  Insertion, removal,
update, and access operations safely execute concurrently by
multiple threads.  Iterators are <i>weakly consistent</i>, returning
elements reflecting the state of the map at some point at or since
the creation of the iterator.  They do <em>not</em> throw {@link
ConcurrentModificationException}, and may proceed concurrently with
other operations. Ascending key ordered views and their iterators
are faster than descending ones.

<p>All <tt>Map.Entry</tt> pairs returned by methods in this class
and its views represent snapshots of mappings at the time they were
produced. They do <em>not</em> support the <tt>Entry.setValue</tt>
method. (Note however that it is possible to change mappings in the
associated map using <tt>put</tt>, <tt>putIfAbsent</tt>, or
<tt>replace</tt>, depending on exactly which effect you need.)

<p>Beware that, unlike in most collections, the <tt>size</tt>
method is <em>not</em> a constant-time operation. Because of the
asynchronous nature of these maps, determining the current number
of elements requires a traversal of the elements, and so may report
inaccurate results if this collection is modified during traversal.
Additionally, the bulk operations <tt>putAll</tt>, <tt>equals</tt>,
<tt>toArray</tt>, <tt>containsValue</tt>, and <tt>clear</tt> are
<em>not</em> guaranteed to be performed atomically. For example, an
iterator operating concurrently with a <tt>putAll</tt> operation
might view only some of the added elements.

<p>This class and its views and iterators implement all of the
<em>optional</em> methods of the {@link Map} and {@link Iterator}
interfaces. Like most other concurrent collections, this class does
<em>not</em> permit the use of <tt>null</tt> keys or values because some
null return values cannot be reliably distinguished from the absence of
elements.

@author Doug Lea
@param <K> the type of keys maintained by this map
@param <V> the type of mapped values
@since 1.6"
      classrelation 423963 // <realization>
	relation 423963 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 423963 // <realization>
	  b parent class_ref 160411 // AbstractMap
      end

      classrelation 424091 // <realization>
	relation 424091 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 424091 // <realization>
	  b parent class_ref 259099 // ConcurrentNavigableMap
      end

      classrelation 424219 // <realization>
	relation 424219 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 424219 // <realization>
	  b parent class_ref 129435 // Cloneable
      end

      classrelation 424347 // <realization>
	relation 424347 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 424347 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 362779 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -8627078645895051609L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This class implements a tree-like two-dimensionally linked skip
list in which the index levels are represented in separate
nodes from the base nodes holding data.  There are two reasons
for taking this approach instead of the usual array-based
structure: 1) Array based implementations seem to encounter
more complexity and overhead 2) We can use cheaper algorithms
for the heavily-traversed index lists than can be used for the
base lists.  Here's a picture of some of the basics for a
possible list with 2 levels of index:

Head nodes          Index nodes
+-+    right        +-+                      +-+
|2|---------------->| |--------------------->| |->null
+-+                 +-+                      +-+
 | down              |                        |
 v                   v                        v
+-+            +-+  +-+       +-+            +-+       +-+
|1|----------->| |->| |------>| |----------->| |------>| |->null
+-+            +-+  +-+       +-+            +-+       +-+
 v              |    |         |              |         |
Nodes  next     v    v         v              v         v
+-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+
| |->|A|->|B|->|C|->|D|->|E|->|F|->|G|->|H|->|I|->|J|->|K|->null
+-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+  +-+

The base lists use a variant of the HM linked ordered set
algorithm. See Tim Harris, \"A pragmatic implementation of
non-blocking linked lists\"
http://www.cl.cam.ac.uk/~tlh20/publications.html and Maged
Michael \"High Performance Dynamic Lock-Free Hash Tables and
List-Based Sets\"
http://www.research.ibm.com/people/m/michael/pubs.htm.  The
basic idea in these lists is to mark the \"next\" pointers of
deleted nodes when deleting to avoid conflicts with concurrent
insertions, and when traversing to keep track of triples
(predecessor, node, successor) in order to detect when and how
to unlink these deleted nodes.

Rather than using mark-bits to mark list deletions (which can
be slow and space-intensive using AtomicMarkedReference), nodes
use direct CAS'able next pointers.  On deletion, instead of
marking a pointer, they splice in another node that can be
thought of as standing for a marked pointer (indicating this by
using otherwise impossible field values).  Using plain nodes
acts roughly like \"boxed\" implementations of marked pointers,
but uses new nodes only when nodes are deleted, not for every
link.  This requires less space and supports faster
traversal. Even if marked references were better supported by
JVMs, traversal using this technique might still be faster
because any search need only read ahead one more node than
otherwise required (to check for trailing marker) rather than
unmasking mark bits or whatever on each read.

This approach maintains the essential property needed in the HM
algorithm of changing the next-pointer of a deleted node so
that any other CAS of it will fail, but implements the idea by
changing the pointer to point to a different node, not by
marking it.  While it would be possible to further squeeze
space by defining marker nodes not to have key/value fields, it
isn't worth the extra type-testing overhead.  The deletion
markers are rarely encountered during traversal and are
normally quickly garbage collected. (Note that this technique
would not work well in systems without garbage collection.)

In addition to using deletion markers, the lists also use
nullness of value fields to indicate deletion, in a style
similar to typical lazy-deletion schemes.  If a node's value is
null, then it is considered logically deleted and ignored even
though it is still reachable. This maintains proper control of
concurrent replace vs delete operations -- an attempted replace
must fail if a delete beat it by nulling field, and a delete
must return the last non-null value held in the field. (Note:
Null, rather than some special marker, is used for value fields
here because it just so happens to mesh with the Map API
requirement that method get returns null if there is no
mapping, which allows nodes to remain concurrently readable
even when deleted. Using any other marker value here would be
messy at best.)

Here's the sequence of events for a deletion of node n with
predecessor b and successor f, initially:

       +------+       +------+      +------+
  ...  |   b  |------>|   n  |----->|   f  | ...
       +------+       +------+      +------+

1. CAS n's value field from non-null to null.
   From this point on, no public operations encountering
   the node consider this mapping to exist. However, other
   ongoing insertions and deletions might still modify
   n's next pointer.

2. CAS n's next pointer to point to a new marker node.
   From this point on, no other nodes can be appended to n.
   which avoids deletion errors in CAS-based linked lists.

       +------+       +------+      +------+       +------+
  ...  |   b  |------>|   n  |----->|marker|------>|   f  | ...
       +------+       +------+      +------+       +------+

3. CAS b's next pointer over both n and its marker.
   From this point on, no new traversals will encounter n,
   and it can eventually be GCed.
       +------+                                    +------+
  ...  |   b  |----------------------------------->|   f  | ...
       +------+                                    +------+

A failure at step 1 leads to simple retry due to a lost race
with another operation. Steps 2-3 can fail because some other
thread noticed during a traversal a node with null value and
helped out by marking and/or unlinking.  This helping-out
ensures that no thread can become stuck waiting for progress of
the deleting thread.  The use of marker nodes slightly
complicates helping-out code because traversals must track
consistent reads of up to four nodes (b, n, marker, f), not
just (b, n, f), although the next field of a marker is
immutable, and once a next field is CAS'ed to point to a
marker, it never again changes, so this requires less care.

Skip lists add indexing to this scheme, so that the base-level
traversals start close to the locations being found, inserted
or deleted -- usually base level traversals only traverse a few
nodes. This doesn't change the basic algorithm except for the
need to make sure base traversals start at predecessors (here,
b) that are not (structurally) deleted, otherwise retrying
after processing the deletion.

Index levels are maintained as lists with volatile next fields,
using CAS to link and unlink.  Races are allowed in index-list
operations that can (rarely) fail to link in a new index node
or delete one. (We can't do this of course for data nodes.)
However, even when this happens, the index lists remain sorted,
so correctly serve as indices.  This can impact performance,
but since skip lists are probabilistic anyway, the net result
is that under contention, the effective \"p\" value may be lower
than its nominal value. And race windows are kept small enough
that in practice these failures are rare, even under a lot of
contention.

The fact that retries (for both base and index lists) are
relatively cheap due to indexing allows some minor
simplifications of retry logic. Traversal restarts are
performed after most \"helping-out\" CASes. This isn't always
strictly necessary, but the implicit backoffs tend to help
reduce other downstream failed CAS's enough to outweigh restart
cost.  This worsens the worst case, but seems to improve even
highly contended cases.

Unlike most skip-list implementations, index insertion and
deletion here require a separate traversal pass occuring after
the base-level action, to add or remove index nodes.  This adds
to single-threaded overhead, but improves contended
multithreaded performance by narrowing interference windows,
and allows deletion to ensure that all index nodes will be made
unreachable upon return from a public remove operation, thus
avoiding unwanted garbage retention. This is more important
here than in some other data structures because we cannot null
out node fields referencing user keys since they might still be
read by other ongoing traversals.

Indexing uses skip list parameters that maintain good search
performance while using sparser-than-usual indices: The
hardwired parameters k=1, p=0.5 (see method randomLevel) mean
that about one-quarter of the nodes have indices. Of those that
do, half have one level, a quarter have two, and so on (see
Pugh's Skip List Cookbook, sec 3.4).  The expected total space
requirement for a map is slightly less than for the current
implementation of java.util.TreeMap.

Changing the level of the index (i.e, the height of the
tree-like structure) also uses CAS. The head index has initial
level/height of one. Creation of an index with height greater
than the current level adds a level to the head index by
CAS'ing on a new top-most head. To maintain good performance
after a lot of removals, deletion methods heuristically try to
reduce the height if the topmost levels appear to be empty.
This may encounter races in which it possible (but rare) to
reduce and \"lose\" a level just as it is about to contain an
index (that will then never be encountered). This does no
structural harm, and in practice appears to be a better option
than allowing unrestrained growth of levels.

The code for all this is more verbose than you'd like. Most
operations entail locating an element (or position to insert an
element). The code to do this can't be nicely factored out
because subsequent uses require a snapshot of predecessor
and/or successor and/or value fields which can't be returned
all at once, at least not without creating yet another object
to hold them -- creating such little objects is an especially
bad idea for basic internal search operations because it adds
to GC overhead.  (This is one of the few times I've wished Java
had macros.) Instead, some traversal code is interleaved within
insertion and removal operations.  The control logic to handle
all the retry conditions is sometimes twisty. Most search is
broken into 2 parts. findPredecessor() searches index nodes
only, returning a base-level predecessor of the key. findNode()
finishes out the base-level search. Even with this factoring,
there is a fair amount of near-duplication of code to handle
variants.

For explanation of algorithms sharing at least a couple of
features with this one, see Mikhail Fomitchev's thesis
(http://www.cs.yorku.ca/~mikhail/), Keir Fraser's thesis
(http://www.cl.cam.ac.uk/users/kaf24/), and Hakan Sundell's
thesis (http://www.cs.chalmers.se/~phs/).

Given the use of tree-like index nodes, you might wonder why
this doesn't use some kind of search tree instead, which would
support somewhat faster search operations. The reason is that
there are no known efficient lock-free insertion and deletion
algorithms for search trees. The immutability of the \"down\"
links of index nodes (as opposed to mutable \"left\" fields in
true trees) makes this tractable using only CAS operations.

Notation guide for local variables
Node:         b, n, f    for  predecessor, node, successor
Index:        q, r, d    for index node, right, down.
              t          for another index node
Head:         h
Levels:       j
Keys:         k, key
Values:       v, value
Comparisons:  c
"
      end

      classrelation 424475 // seedGenerator (<unidirectional association>)
	relation 424475 --->
	  a role_name "seedGenerator" init_value " new Random()" class_relation const_relation private
	    comment "
Generates the initial random seed for the cheaper per-instance
random number generators used in randomLevel.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 424475 // seedGenerator (<unidirectional association>)
	  b parent class_ref 139803 // Random
      end

      classrelation 424603 // BASE_HEADER (<unidirectional association>)
	relation 424603 --->
	  a role_name "BASE_HEADER" init_value " new Object()" class_relation const_relation private
	    comment "
Special value used to identify base-level header

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 424603 // BASE_HEADER (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      class 259355 "HeadIndex"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 259227 // ConcurrentSkipListMap
	  rank 0 explicit_value ""
	actual class class_ref 259227 // ConcurrentSkipListMap
	  rank 1 explicit_value ""
	actual class class_ref 259995 // Index
	  rank 0 explicit_value ""
	actual class class_ref 259995 // Index
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 426395 // <realization>
	  relation 426395 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 426395 // <realization>
	    b parent class_ref 259995 // Index
	end

	attribute 363547 "level"
	  const_attribute package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1479067 "HeadIndex"
	  package explicit_return_type ""
	  nparams 4
	    param inout name "node" type class_ref 259867 // Node
	    param inout name "down" type class_ref 259995 // Index
	    param inout name "right" type class_ref 259995 // Index
	    param in name "level" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}, ${t2}<K,V> ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 424731 // head (<unidirectional association>)
	relation 424731 --->
	  a role_name "head" volatile private
	    comment "
The topmost head index of the skiplist.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	    classrelation_ref 424731 // head (<unidirectional association>)
	  b parent class_ref 259355 // HeadIndex
      end

      classrelation 424859 // comparator (<unidirectional association>)
	relation 424859 --->
	  a role_name "comparator" const_relation private
	    comment "
The comparator used to maintain order in this map, or null
if using natural ordering.
@serial

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K> ${name}${value};
"
	    classrelation_ref 424859 // comparator (<unidirectional association>)
	  b parent class_ref 3094156 // Comparator
      end

      attribute 362907 "randomSeed"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Seed for simple random number generator.  Not volatile since it
doesn't matter too much if different threads don't see updates.
"
      end

      class 259483 "KeySet"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 198299 // AbstractSet
	  rank 0 explicit_value ""
	actual class class_ref 247451 // NavigableSet
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 427547 // <realization>
	  relation 427547 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 427547 // <realization>
	    b parent class_ref 198299 // AbstractSet
	end

	classrelation 427675 // <realization>
	  relation 427675 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 427675 // <realization>
	    b parent class_ref 247451 // NavigableSet
	end

	classrelation 427803 // m (<unidirectional association>)
	  relation 427803 --->
	    a role_name "m" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E,?> ${name}${value};
"
	      classrelation_ref 427803 // m (<unidirectional association>)
	    b parent class_ref 259099 // ConcurrentNavigableMap
	end

	operation 1489691 "KeySet"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "map" type class_ref 259099 // ConcurrentNavigableMap
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E,?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1489819 "size"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1489947 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1490075 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1490203 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1490331 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1490459 "lower"
	  public explicit_return_type "E"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1490587 "floor"
	  public explicit_return_type "E"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1490715 "ceiling"
	  public explicit_return_type "E"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1490843 "higher"
	  public explicit_return_type "E"
	  nparams 1
	    param inout name "e" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1490971 "comparator"
	  public return_type class_ref 3094156 // Comparator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1491099 "first"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1491227 "last"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1491355 "pollFirst"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1491483 "pollLast"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1491611 "iterator"
	  public return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1491739 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1491867 "toArray"
	  public return_type class_ref 3401484 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1491995 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1492123 "descendingIterator"
	  public return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1492251 "subSet"
	  public return_type class_ref 247451 // NavigableSet
	  nparams 4
	    param inout name "fromElement" explicit_type "E"
	    param inout name "fromInclusive" explicit_type "boolean"
	    param inout name "toElement" explicit_type "E"
	    param inout name "toInclusive" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1492379 "headSet"
	  public return_type class_ref 247451 // NavigableSet
	  nparams 2
	    param inout name "toElement" explicit_type "E"
	    param inout name "inclusive" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1492507 "tailSet"
	  public return_type class_ref 247451 // NavigableSet
	  nparams 2
	    param inout name "fromElement" explicit_type "E"
	    param inout name "inclusive" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1492635 "subSet"
	  public return_type class_ref 247451 // NavigableSet
	  nparams 2
	    param inout name "fromElement" explicit_type "E"
	    param inout name "toElement" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1492763 "headSet"
	  public return_type class_ref 247451 // NavigableSet
	  nparams 1
	    param inout name "toElement" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1492891 "tailSet"
	  public return_type class_ref 247451 // NavigableSet
	  nparams 1
	    param inout name "fromElement" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1493019 "descendingSet"
	  public return_type class_ref 247451 // NavigableSet
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 424987 // keySet (<unidirectional association>)
	relation 424987 --->
	  a role_name "keySet" private
	    comment " Lazily initialized key set 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	    classrelation_ref 424987 // keySet (<unidirectional association>)
	  b parent class_ref 259483 // KeySet
      end

      class 259611 "EntrySet"
	visibility package 
	nformals 2
	formal name "K1" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V1" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 198299 // AbstractSet
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 428187 // <realization>
	  relation 428187 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 428187 // <realization>
	    b parent class_ref 198299 // AbstractSet
	end

	classrelation 428315 // m (<unidirectional association>)
	  relation 428315 --->
	    a role_name "m" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K1, V1> ${name}${value};
"
	      classrelation_ref 428315 // m (<unidirectional association>)
	    b parent class_ref 259099 // ConcurrentNavigableMap
	end

	operation 1494171 "EntrySet"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "map" type class_ref 259099 // ConcurrentNavigableMap
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K1, V1> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1494299 "iterator"
	  public return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K1,V1>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1494427 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1494555 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1494683 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1494811 "size"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1494939 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1495067 "equals"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1495195 "toArray"
	  public return_type class_ref 3401484 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1495323 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 425115 // entrySet (<unidirectional association>)
	relation 425115 --->
	  a role_name "entrySet" private
	    comment " Lazily initialized entry set 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	    classrelation_ref 425115 // entrySet (<unidirectional association>)
	  b parent class_ref 259611 // EntrySet
      end

      class 259739 "Values"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 198427 // AbstractCollection
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 427931 // <realization>
	  relation 427931 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 427931 // <realization>
	    b parent class_ref 198427 // AbstractCollection
	end

	classrelation 428059 // m (<unidirectional association>)
	  relation 428059 --->
	    a role_name "m" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?, E> ${name}${value};
"
	      classrelation_ref 428059 // m (<unidirectional association>)
	    b parent class_ref 259099 // ConcurrentNavigableMap
	end

	operation 1493147 "Values"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "map" type class_ref 259099 // ConcurrentNavigableMap
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?, E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1493275 "iterator"
	  public return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1493403 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1493531 "size"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1493659 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "o" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1493787 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1493915 "toArray"
	  public return_type class_ref 3401484 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1494043 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 425243 // values (<unidirectional association>)
	relation 425243 --->
	  a role_name "values" private
	    comment " Lazily initialized values collection 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 425243 // values (<unidirectional association>)
	  b parent class_ref 259739 // Values
      end

      classrelation 425371 // descendingMap (<unidirectional association>)
	relation 425371 --->
	  a role_name "descendingMap" private
	    comment " Lazily initialized descending key set 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	    classrelation_ref 425371 // descendingMap (<unidirectional association>)
	  b parent class_ref 259099 // ConcurrentNavigableMap
      end

      operation 1476891 "initialize"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initializes or resets state. Needed by constructors, clone,
clear, readObject. and ConcurrentSkipListSet.clone.
(Note that comparator must be separately initialized.)"
      end

      operation 1477019 "casHead"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 259355 // HeadIndex
	  param inout name "val" type class_ref 259355 // HeadIndex
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "compareAndSet head node"
      end

      class 259867 "Node"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 363035 "key"
	  const_attribute package explicit_type "K"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 425499 // value (<unidirectional association>)
	  relation 425499 --->
	    a role_name "value" volatile package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 425499 // value (<unidirectional association>)
	    b parent class_ref 3401484 // Object
	end

	classrelation 425627 // next (<unidirectional association>)
	  relation 425627 --->
	    a role_name "next" volatile package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 425627 // next (<unidirectional association>)
	    b parent class_ref 259867 // Node
	end

	operation 1477147 "Node"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "key" explicit_type "K"
	    param inout name "value" type class_ref 3401484 // Object
	    param inout name "next" type class_ref 259867 // Node
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<K,V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a new regular node."
	end

	operation 1477275 "Node"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "next" type class_ref 259867 // Node
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a new marker node. A marker is distinguished by
having its value field point to itself.  Marker nodes also
have null keys, a fact that is exploited in a few places,
but this doesn't distinguish markers from the base-level
header node (head.node), which also has a null key."
	end

	operation 1477403 "casValue"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 3401484 // Object
	    param inout name "val" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "compareAndSet value field"
	end

	operation 1477531 "casNext"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 259867 // Node
	    param inout name "val" type class_ref 259867 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "compareAndSet next field"
	end

	operation 1477659 "isMarker"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this node is a marker. This method isn't
actually called in any current code checking for markers
because callers will have already read value field and need
to use that read (not another done here) and so directly
test if value points to node.
@param n a possibly null reference to a node
@return true if this node is a marker node"
	end

	operation 1477787 "isBaseHeader"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this node is the header of base-level list.
@return true if this node is header node"
	end

	operation 1477915 "appendMarker"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "f" type class_ref 259867 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to append a deletion marker to this node.
@param f the assumed current successor of this node
@return true if successful"
	end

	operation 1478043 "helpDelete"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "b" type class_ref 259867 // Node
	    param inout name "f" type class_ref 259867 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Helps out a deletion by appending marker or unlinking from
predecessor. This is called during traversals when value
field seen to be null.
@param b predecessor
@param f successor"
	end

	operation 1478171 "getValidValue"
	  package explicit_return_type "V"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns value if this node contains a valid key-value pair,
else null.
@return this node's value if it isn't a marker or header or
is deleted, else null."
	end

	operation 1478299 "createSnapshot"
	  package return_type class_ref 160795 // SimpleImmutableEntry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates and returns a new SimpleImmutableEntry holding current
mapping if this node holds a valid value, else null.
@return new entry or null"
	end

	classrelation 425755 // UNSAFE (<unidirectional association>)
	  relation 425755 --->
	    a role_name "UNSAFE" class_relation const_relation private
	      comment " UNSAFE mechanics
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 425755 // UNSAFE (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 363163 "valueOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 363291 "nextOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	extra_member 131995 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = Node.class;
                valueOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"value\"));
                nextOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"next\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	end
      end

      class 259995 "Index"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 425883 // node (<unidirectional association>)
	  relation 425883 --->
	    a role_name "node" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 425883 // node (<unidirectional association>)
	    b parent class_ref 259867 // Node
	end

	classrelation 426011 // down (<unidirectional association>)
	  relation 426011 --->
	    a role_name "down" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 426011 // down (<unidirectional association>)
	    b parent class_ref 259995 // Index
	end

	classrelation 426139 // right (<unidirectional association>)
	  relation 426139 --->
	    a role_name "right" volatile package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 426139 // right (<unidirectional association>)
	    b parent class_ref 259995 // Index
	end

	operation 1478427 "Index"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "node" type class_ref 259867 // Node
	    param inout name "down" type class_ref 259995 // Index
	    param inout name "right" type class_ref 259995 // Index
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}, ${t2}<K,V> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates index node with given values."
	end

	operation 1478555 "casRight"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 259995 // Index
	    param inout name "val" type class_ref 259995 // Index
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "compareAndSet right field"
	end

	operation 1478683 "indexesDeletedNode"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if the node this indexes has been deleted.
@return true if indexed node is known to be deleted"
	end

	operation 1478811 "link"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "succ" type class_ref 259995 // Index
	    param inout name "newSucc" type class_ref 259995 // Index
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to CAS newSucc as successor.  To minimize races with
unlink that may lose this index node, if the node being
indexed is known to be deleted, it doesn't try to link in.
@param succ the expected current successor
@param newSucc the new successor
@return true if successful"
	end

	operation 1478939 "unlink"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "succ" type class_ref 259995 // Index
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to CAS right field to skip over apparent successor
succ.  Fails (forcing a retraversal by caller) if this node
is known to be deleted.
@param succ the expected current successor
@return true if successful"
	end

	classrelation 426267 // UNSAFE (<unidirectional association>)
	  relation 426267 --->
	    a role_name "UNSAFE" class_relation const_relation private
	      comment " Unsafe mechanics
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 426267 // UNSAFE (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 363419 "rightOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	extra_member 132123 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = Index.class;
                rightOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"right\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	end
      end

      class 260123 "ComparableUsingComparator"
	visibility package 
	nformals 1
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 139675 // Comparable
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 426523 // <realization>
	  relation 426523 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 426523 // <realization>
	    b parent class_ref 139675 // Comparable
	end

	attribute 363675 "actualKey"
	  const_attribute package explicit_type "K"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 426651 // cmp (<unidirectional association>)
	  relation 426651 --->
	    a role_name "cmp" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super K> ${name}${value};
"
	      classrelation_ref 426651 // cmp (<unidirectional association>)
	    b parent class_ref 3094156 // Comparator
	end

	operation 1479195 "ComparableUsingComparator"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "cmp" type class_ref 3094156 // Comparator
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super K> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1479323 "compareTo"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "k2" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1479451 "comparable"
	private return_type class_ref 139675 // Comparable
	nparams 1
	  param inout name "key" type class_ref 3401484 // Object
	nexceptions 1
	  exception class_ref 150683 // ClassCastException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If using comparator, return a ComparableUsingComparator, else
cast key as Comparable, which may cause ClassCastException,
which is propagated back to caller."
      end

      operation 1479579 "compare"
	package explicit_return_type "int"
	nparams 2
	  param inout name "k1" explicit_type "K"
	  param inout name "k2" explicit_type "K"
	nexceptions 1
	  exception class_ref 150683 // ClassCastException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares using comparator or natural ordering. Used when the
ComparableUsingComparator approach doesn't apply."
      end

      operation 1479707 "inHalfOpenRange"
	package explicit_return_type "boolean"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "least" explicit_type "K"
	  param inout name "fence" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if given key greater than or equal to least and
strictly less than fence, bypassing either test if least or
fence are null. Needed mainly in submap operations."
      end

      operation 1479835 "inOpenRange"
	package explicit_return_type "boolean"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "least" explicit_type "K"
	  param inout name "fence" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if given key greater than or equal to least and less
or equal to fence. Needed mainly in submap operations."
      end

      operation 1479963 "findPredecessor"
	private return_type class_ref 259867 // Node
	nparams 1
	  param inout name "key" type class_ref 139675 // Comparable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Traversal -------------- 

Returns a base-level node with key strictly less than given key,
or the base-level header if there is no such node.  Also
unlinks indexes to deleted nodes found along the way.  Callers
rely on this side-effect of clearing indices to deleted nodes.
@param key the key
@return a predecessor of key"
      end

      operation 1480091 "findNode"
	private return_type class_ref 259867 // Node
	nparams 1
	  param inout name "key" type class_ref 139675 // Comparable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns node holding key or null if no such, clearing out any
deleted nodes seen along the way.  Repeatedly traverses at
base-level looking for key starting at predecessor returned
from findPredecessor, processing base-level deletions as
encountered. Some callers rely on this side-effect of clearing
deleted nodes.

Restarts occur, at traversal step centered on node n, if:

  (1) After reading n's next field, n is no longer assumed
      predecessor b's current successor, which means that
      we don't have a consistent 3-node snapshot and so cannot
      unlink any subsequent deleted nodes encountered.

  (2) n's value field is null, indicating n is deleted, in
      which case we help out an ongoing structural deletion
      before retrying.  Even though there are cases where such
      unlinking doesn't require restart, they aren't sorted out
      here because doing so would not usually outweigh cost of
      restarting.

  (3) n is a marker or n's predecessor's value field is null,
      indicating (among other possibilities) that
      findPredecessor returned a deleted node. We can't unlink
      the node because we don't know its predecessor, so rely
      on another call to findPredecessor to notice and return
      some earlier predecessor, which it will do. This check is
      only strictly needed at beginning of loop, (and the
      b.value check isn't strictly needed at all) but is done
      each iteration to help avoid contention with other
      threads by callers that will fail to be able to change
      links, and so will retry anyway.

The traversal loops in doPut, doRemove, and findNear all
include the same three kinds of checks. And specialized
versions appear in findFirst, and findLast and their
variants. They can't easily share code because each uses the
reads of fields held in locals occurring in the orders they
were performed.

@param key the key
@return node holding key, or null if no such"
      end

      operation 1480219 "doGet"
	private explicit_return_type "V"
	nparams 1
	  param inout name "okey" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets value for key using findNode.
@param okey the key
@return the value, or null if absent"
      end

      operation 1480347 "doPut"
	private explicit_return_type "V"
	nparams 3
	  param inout name "kkey" explicit_type "K"
	  param inout name "value" explicit_type "V"
	  param inout name "onlyIfAbsent" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Insertion -------------- 

Main insertion method.  Adds element if not present, or
replaces value if present and onlyIfAbsent is false.
@param kkey the key
@param value  the value that must be associated with key
@param onlyIfAbsent if should not insert if already present
@return the old value, or null if newly inserted"
      end

      operation 1480475 "randomLevel"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a random level for inserting a new node.
Hardwired to k=1, p=0.5, max 31 (see above and
Pugh's \"Skip List Cookbook\", sec 3.4).

This uses the simplest of the generators described in George
Marsaglia's \"Xorshift RNGs\" paper.  This is not a high-quality
generator but is acceptable here."
      end

      operation 1480603 "insertIndex"
	private explicit_return_type "void"
	nparams 2
	  param inout name "z" type class_ref 259867 // Node
	  param in name "level" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and adds index nodes for the given node.
@param z the node
@param level the level of the index"
      end

      operation 1480731 "addIndex"
	private explicit_return_type "void"
	nparams 3
	  param inout name "idx" type class_ref 259995 // Index
	  param inout name "h" type class_ref 259355 // HeadIndex
	  param in name "indexLevel" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}, ${t1}<K,V> ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds given index nodes from given level down to 1.
@param idx the topmost index node being inserted
@param h the value of head to use to insert. This must be
snapshotted by callers to provide correct insertion level
@param indexLevel the level of the index"
      end

      operation 1480859 "doRemove"
	package explicit_return_type "V"
	nparams 2
	  param inout name "okey" type class_ref 3401484 // Object
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Deletion -------------- 

Main deletion method. Locates node, nulls value, appends a
deletion marker, unlinks predecessor, removes associated index
nodes, and possibly reduces head index level.

Index nodes are cleared out simply by calling findPredecessor.
which unlinks indexes to deleted nodes found along path to key,
which will include the indexes to this node.  This is done
unconditionally. We can't check beforehand whether there are
index nodes because it might be the case that some or all
indexes hadn't been inserted yet for this node during initial
search for it, and we'd like to ensure lack of garbage
retention, so must call to be sure.

@param okey the key
@param value if non-null, the value that must be
associated with key
@return the node, or null if not found"
      end

      operation 1480987 "tryReduceLevel"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly reduce head level if it has no nodes.  This method can
(rarely) make mistakes, in which case levels can disappear even
though they are about to contain index nodes. This impacts
performance, not correctness.  To minimize mistakes as well as
to reduce hysteresis, the level is reduced by one only if the
topmost three levels look empty. Also, if the removed level
looks non-empty after CAS, we try to change it back quick
before anyone notices our mistake! (This trick works pretty
well because this method will practically never make mistakes
unless current thread stalls immediately before first CAS, in
which case it is very unlikely to stall again immediately
afterwards, so will recover.)

We put up with all this rather than just let levels grow
because otherwise, even a small map that has undergone a large
number of insertions and removals will have a lot of levels,
slowing down access more than would an occasional unwanted
reduction."
      end

      operation 1481115 "findFirst"
	package return_type class_ref 259867 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Finding and removing first element -------------- 

Specialized variant of findNode to get first valid node.
@return first node or null if empty"
      end

      operation 1481243 "doRemoveFirstEntry"
	package return_type class_ref 160539 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes first entry; returns its snapshot.
@return null if empty, else snapshot of first entry"
      end

      operation 1481371 "clearIndexToFirst"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Clears out index nodes associated with deleted first entry."
      end

      operation 1481499 "findLast"
	package return_type class_ref 259867 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Finding and removing last element -------------- 

Specialized version of find to get last valid node.
@return last node or null if empty"
      end

      operation 1481627 "findPredecessorOfLast"
	private return_type class_ref 259867 // Node
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialized variant of findPredecessor to get predecessor of last
valid node.  Needed when removing the last entry.  It is possible
that all successors of returned node will have been deleted upon
return, in which case this method can be retried.
@return likely predecessor of last node"
      end

      operation 1481755 "doRemoveLastEntry"
	package return_type class_ref 160539 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes last entry; returns its snapshot.
Specialized variant of doRemove.
@return null if empty, else snapshot of last entry"
      end

      attribute 363803 "EQ"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " ---------------- Relational operations -------------- 
 Control values OR'ed as arguments to findNear"
      end

      attribute 363931 "LT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 364059 "GT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Actually checked as !LT"
      end

      operation 1481883 "findNear"
	package return_type class_ref 259867 // Node
	nparams 2
	  param inout name "kkey" explicit_type "K"
	  param in name "rel" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Utility for ceiling, floor, lower, higher methods.
@param kkey the key
@param rel the relation -- OR'ed combination of EQ, LT, GT
@return nearest node fitting relation, or null if no such"
      end

      operation 1482011 "getNear"
	package return_type class_ref 160795 // SimpleImmutableEntry
	nparams 2
	  param inout name "key" explicit_type "K"
	  param in name "rel" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns SimpleImmutableEntry for results of findNear.
@param key the key
@param rel the relation -- OR'ed combination of EQ, LT, GT
@return Entry fitting relation, or null if no such"
      end

      operation 1482139 "ConcurrentSkipListMap"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Constructors -------------- 

Constructs a new, empty map, sorted according to the
{@linkplain Comparable natural ordering} of the keys."
      end

      operation 1482267 "ConcurrentSkipListMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "comparator" type class_ref 3094156 // Comparator
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super K> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty map, sorted according to the specified
comparator.

@param comparator the comparator that will be used to order this map.
       If <tt>null</tt>, the {@linkplain Comparable natural
       ordering} of the keys will be used."
      end

      operation 1482395 "ConcurrentSkipListMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 129819 // Map
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new map containing the same mappings as the given map,
sorted according to the {@linkplain Comparable natural ordering} of
the keys.

@param  m the map whose mappings are to be placed in this map
@throws ClassCastException if the keys in <tt>m</tt> are not
        {@link Comparable}, or are not mutually comparable
@throws NullPointerException if the specified map or any of its keys
        or values are null"
      end

      operation 1482523 "ConcurrentSkipListMap"
	public explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 192539 // SortedMap
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new map containing the same mappings and using the
same ordering as the specified sorted map.

@param m the sorted map whose mappings are to be placed in this
       map, and whose comparator is to be used to sort this map
@throws NullPointerException if the specified sorted map or any of
        its keys or values are null"
      end

      operation 1482651 "clone"
	public return_type class_ref 259227 // ConcurrentSkipListMap
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this <tt>ConcurrentSkipListMap</tt>
instance. (The keys and values themselves are not cloned.)

@return a shallow copy of this map"
      end

      operation 1482779 "buildFromSorted"
	private explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 192539 // SortedMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K, ? extends V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Streamlined bulk insertion to initialize from elements of
given sorted map.  Call only from constructor or clone
method."
      end

      operation 1482907 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Serialization -------------- 

Saves the state of this map to a stream (that is, serializes it).

@serialData The key (Object) and value (Object) for each
key-value mapping represented by the map, followed by
<tt>null</tt>. The key-value mappings are emitted in key-order
(as determined by the Comparator, or by the keys' natural
ordering if no Comparator)."
      end

      operation 1483035 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param in name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes the map from a stream (that is, deserializes it).

@param s the stream"
      end

      operation 1483163 "containsKey"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "key" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------ Map API methods ------ 

Returns <tt>true</tt> if this map contains a mapping for the specified
key.

@param key key whose presence in this map is to be tested
@return <tt>true</tt> if this map contains a mapping for the specified key
@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key is null"
      end

      operation 1483291 "get"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the value to which the specified key is mapped,
or {@code null} if this map contains no mapping for the key.

<p>More formally, if this map contains a mapping from a key
{@code k} to a value {@code v} such that {@code key} compares
equal to {@code k} according to the map's ordering, then this
method returns {@code v}; otherwise it returns {@code null}.
(There can be at most one such mapping.)

@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key is null"
      end

      operation 1483419 "put"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Associates the specified value with the specified key in this map.
If the map previously contained a mapping for the key, the old
value is replaced.

@param key key with which the specified value is to be associated
@param value value to be associated with the specified key
@return the previous value associated with the specified key, or
        <tt>null</tt> if there was no mapping for the key
@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key or value is null"
      end

      operation 1483547 "remove"
	public explicit_return_type "V"
	nparams 1
	  param inout name "key" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the mapping for the specified key from this map if present.

@param  key key for which mapping should be removed
@return the previous value associated with the specified key, or
        <tt>null</tt> if there was no mapping for the key
@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key is null"
      end

      operation 1483675 "containsValue"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map maps one or more keys to the
specified value.  This operation requires time linear in the
map size. Additionally, it is possible for the map to change
during execution of this method, in which case the returned
result may be inaccurate.

@param value value whose presence in this map is to be tested
@return <tt>true</tt> if a mapping to <tt>value</tt> exists;
        <tt>false</tt> otherwise
@throws NullPointerException if the specified value is null"
      end

      operation 1483803 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of key-value mappings in this map.  If this map
contains more than <tt>Integer.MAX_VALUE</tt> elements, it
returns <tt>Integer.MAX_VALUE</tt>.

<p>Beware that, unlike in most collections, this method is
<em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these maps, determining the current
number of elements requires traversing them all to count them.
Additionally, it is possible for the size to change during
execution of this method, in which case the returned result
will be inaccurate. Thus, this method is typically not very
useful in concurrent applications.

@return the number of elements in this map"
      end

      operation 1483931 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this map contains no key-value mappings.
@return <tt>true</tt> if this map contains no key-value mappings"
      end

      operation 1484059 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the mappings from this map."
      end

      operation 1484187 "keySet"
	public return_type class_ref 247451 // NavigableSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- View methods -------------- 

Note: Lazy initialization works for views because view classes
are stateless/immutable so it doesn't matter wrt correctness if
more than one is created (which will only rarely happen).  Even
so, the following idiom conservatively ensures that the method
returns the one it created if it does so, not one created by
another racing thread.


Returns a {@link NavigableSet} view of the keys contained in this map.
The set's iterator returns the keys in ascending order.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the {@code Iterator.remove}, {@code Set.remove},
{@code removeAll}, {@code retainAll}, and {@code clear}
operations.  It does not support the {@code add} or {@code addAll}
operations.

<p>The view's {@code iterator} is a \"weakly consistent\" iterator
that will never throw {@link ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction.

<p>This method is equivalent to method {@code navigableKeySet}.

@return a navigable set view of the keys in this map"
      end

      operation 1484315 "navigableKeySet"
	public return_type class_ref 247451 // NavigableSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1484443 "values"
	public return_type class_ref 160667 // Collection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Collection} view of the values contained in this map.
The collection's iterator returns the values in ascending order
of the corresponding keys.
The collection is backed by the map, so changes to the map are
reflected in the collection, and vice-versa.  The collection
supports element removal, which removes the corresponding
mapping from the map, via the <tt>Iterator.remove</tt>,
<tt>Collection.remove</tt>, <tt>removeAll</tt>,
<tt>retainAll</tt> and <tt>clear</tt> operations.  It does not
support the <tt>add</tt> or <tt>addAll</tt> operations.

<p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator
that will never throw {@link ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction."
      end

      operation 1484571 "entrySet"
	public return_type class_ref 129691 // Set
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Set} view of the mappings contained in this map.
The set's iterator returns the entries in ascending key order.
The set is backed by the map, so changes to the map are
reflected in the set, and vice-versa.  The set supports element
removal, which removes the corresponding mapping from the map,
via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,
<tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt>
operations.  It does not support the <tt>add</tt> or
<tt>addAll</tt> operations.

<p>The view's <tt>iterator</tt> is a \"weakly consistent\" iterator
that will never throw {@link ConcurrentModificationException},
and guarantees to traverse elements as they existed upon
construction of the iterator, and may (but is not guaranteed to)
reflect any modifications subsequent to construction.

<p>The <tt>Map.Entry</tt> elements returned by
<tt>iterator.next()</tt> do <em>not</em> support the
<tt>setValue</tt> operation.

@return a set view of the mappings contained in this map,
        sorted in ascending key order"
      end

      operation 1484699 "descendingMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1484827 "descendingKeySet"
	public return_type class_ref 247451 // NavigableSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1484955 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- AbstractMap Overrides -------------- 

Compares the specified object with this map for equality.
Returns <tt>true</tt> if the given object is also a map and the
two maps represent the same mappings.  More formally, two maps
<tt>m1</tt> and <tt>m2</tt> represent the same mappings if
<tt>m1.entrySet().equals(m2.entrySet())</tt>.  This
operation may return misleading results if either map is
concurrently modified during execution of this method.

@param o object to be compared for equality with this map
@return <tt>true</tt> if the specified object is equal to this map"
      end

      operation 1485083 "putIfAbsent"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------ ConcurrentMap API methods ------ 

{@inheritDoc}

@return the previous value associated with the specified key,
        or <tt>null</tt> if there was no mapping for the key
@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key or value is null"
      end

      operation 1485211 "remove"
	public explicit_return_type "boolean"
	nparams 2
	  param inout name "key" type class_ref 3401484 // Object
	  param inout name "value" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key is null"
      end

      operation 1485339 "replace"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "key" explicit_type "K"
	  param inout name "oldValue" explicit_type "V"
	  param inout name "newValue" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if any of the arguments are null"
      end

      operation 1485467 "replace"
	public explicit_return_type "V"
	nparams 2
	  param inout name "key" explicit_type "K"
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "{@inheritDoc}

@return the previous value associated with the specified key,
        or <tt>null</tt> if there was no mapping for the key
@throws ClassCastException if the specified key cannot be compared
        with the keys currently in the map
@throws NullPointerException if the specified key or value is null"
      end

      operation 1485595 "comparator"
	public return_type class_ref 3094156 // Comparator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ------ SortedMap API methods ------ "
      end

      operation 1485723 "firstKey"
	public explicit_return_type "K"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1485851 "lastKey"
	public explicit_return_type "K"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1485979 "subMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 4
	  param inout name "fromKey" explicit_type "K"
	  param inout name "fromInclusive" explicit_type "boolean"
	  param inout name "toKey" explicit_type "K"
	  param inout name "toInclusive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromKey} or {@code toKey} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1486107 "headMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 2
	  param inout name "toKey" explicit_type "K"
	  param inout name "inclusive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code toKey} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1486235 "tailMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 2
	  param inout name "fromKey" explicit_type "K"
	  param inout name "inclusive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromKey} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1486363 "subMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 2
	  param inout name "fromKey" explicit_type "K"
	  param inout name "toKey" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromKey} or {@code toKey} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1486491 "headMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 1
	  param inout name "toKey" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code toKey} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1486619 "tailMap"
	public return_type class_ref 259099 // ConcurrentNavigableMap
	nparams 1
	  param inout name "fromKey" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromKey} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1486747 "lowerEntry"
	public return_type class_ref 160539 // Entry
	nparams 1
	  param inout name "key" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Relational operations -------------- 

Returns a key-value mapping associated with the greatest key
strictly less than the given key, or <tt>null</tt> if there is
no such key. The returned entry does <em>not</em> support the
<tt>Entry.setValue</tt> method.

@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null"
      end

      operation 1486875 "lowerKey"
	public explicit_return_type "K"
	nparams 1
	  param inout name "key" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null"
      end

      operation 1487003 "floorEntry"
	public return_type class_ref 160539 // Entry
	nparams 1
	  param inout name "key" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a key-value mapping associated with the greatest key
less than or equal to the given key, or <tt>null</tt> if there
is no such key. The returned entry does <em>not</em> support
the <tt>Entry.setValue</tt> method.

@param key the key
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null"
      end

      operation 1487131 "floorKey"
	public explicit_return_type "K"
	nparams 1
	  param inout name "key" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param key the key
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null"
      end

      operation 1487259 "ceilingEntry"
	public return_type class_ref 160539 // Entry
	nparams 1
	  param inout name "key" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a key-value mapping associated with the least key
greater than or equal to the given key, or <tt>null</tt> if
there is no such entry. The returned entry does <em>not</em>
support the <tt>Entry.setValue</tt> method.

@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null"
      end

      operation 1487387 "ceilingKey"
	public explicit_return_type "K"
	nparams 1
	  param inout name "key" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null"
      end

      operation 1487515 "higherEntry"
	public return_type class_ref 160539 // Entry
	nparams 1
	  param inout name "key" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a key-value mapping associated with the least key
strictly greater than the given key, or <tt>null</tt> if there
is no such key. The returned entry does <em>not</em> support
the <tt>Entry.setValue</tt> method.

@param key the key
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null"
      end

      operation 1487643 "higherKey"
	public explicit_return_type "K"
	nparams 1
	  param inout name "key" explicit_type "K"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@param key the key
@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified key is null"
      end

      operation 1487771 "firstEntry"
	public return_type class_ref 160539 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a key-value mapping associated with the least
key in this map, or <tt>null</tt> if the map is empty.
The returned entry does <em>not</em> support
the <tt>Entry.setValue</tt> method."
      end

      operation 1487899 "lastEntry"
	public return_type class_ref 160539 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a key-value mapping associated with the greatest
key in this map, or <tt>null</tt> if the map is empty.
The returned entry does <em>not</em> support
the <tt>Entry.setValue</tt> method."
      end

      operation 1488027 "pollFirstEntry"
	public return_type class_ref 160539 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns a key-value mapping associated with
the least key in this map, or <tt>null</tt> if the map is empty.
The returned entry does <em>not</em> support
the <tt>Entry.setValue</tt> method."
      end

      operation 1488155 "pollLastEntry"
	public return_type class_ref 160539 // Entry
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns a key-value mapping associated with
the greatest key in this map, or <tt>null</tt> if the map is empty.
The returned entry does <em>not</em> support
the <tt>Entry.setValue</tt> method."
      end

      class 260251 "Iter"
	abstract visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 426779 // <realization>
	  relation 426779 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 426779 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 426907 // lastReturned (<unidirectional association>)
	  relation 426907 --->
	    a role_name "lastReturned" package
	      comment " the last node returned by next() 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 426907 // lastReturned (<unidirectional association>)
	    b parent class_ref 259867 // Node
	end

	classrelation 427035 // next (<unidirectional association>)
	  relation 427035 --->
	    a role_name "next" package
	      comment " the next node to return from next(); 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 427035 // next (<unidirectional association>)
	    b parent class_ref 259867 // Node
	end

	attribute 364187 "nextValue"
	  package explicit_type "V"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Cache of next value field to maintain weak consistency "
	end

	operation 1488283 "Iter"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Initializes ascending iterator for entire range. "
	end

	operation 1488411 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1488539 "advance"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Advances next to higher entry. "
	end

	operation 1488667 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 260379 "ValueIterator"
	visibility package 
	nactuals 3
	actual class class_ref 259227 // ConcurrentSkipListMap
	  rank 0 explicit_value ""
	actual class class_ref 259227 // ConcurrentSkipListMap
	  rank 1 explicit_value ""
	actual class class_ref 260251 // Iter
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 427163 // <realization>
	  relation 427163 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 427163 // <realization>
	    b parent class_ref 260251 // Iter
	end

	operation 1488795 "next"
	  public explicit_return_type "V"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 260507 "KeyIterator"
	visibility package 
	nactuals 3
	actual class class_ref 259227 // ConcurrentSkipListMap
	  rank 0 explicit_value ""
	actual class class_ref 259227 // ConcurrentSkipListMap
	  rank 1 explicit_value ""
	actual class class_ref 260251 // Iter
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 427291 // <realization>
	  relation 427291 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 427291 // <realization>
	    b parent class_ref 260251 // Iter
	end

	operation 1488923 "next"
	  public explicit_return_type "K"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 260635 "EntryIterator"
	visibility package 
	nactuals 3
	actual class class_ref 259227 // ConcurrentSkipListMap
	  rank 0 explicit_value ""
	actual class class_ref 259227 // ConcurrentSkipListMap
	  rank 1 explicit_value ""
	actual class class_ref 260251 // Iter
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 427419 // <realization>
	  relation 427419 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 427419 // <realization>
	    b parent class_ref 260251 // Iter
	end

	operation 1489051 "next"
	  public return_type class_ref 160539 // Entry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1489179 "keyIterator"
	package return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Factory methods for iterators needed by ConcurrentSkipListSet etc"
      end

      operation 1489307 "valueIterator"
	package return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1489435 "entryIterator"
	package return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1489563 "toList"
	class_operation package return_type class_ref 131483 // List
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- View Classes -------------- 

View classes are static, delegating to a ConcurrentNavigableMap
to allow use by SubMaps, which outweighs the ugliness of
needing type-tests for Iterator methods."
      end

      class 260763 "SubMap"
	visibility package 
	nformals 2
	formal name "K" type "" explicit_default_value ""
	  explicit_extends ""
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 4
	actual class class_ref 160411 // AbstractMap
	  rank 0 explicit_value ""
	actual class class_ref 160411 // AbstractMap
	  rank 1 explicit_value ""
	actual class class_ref 259099 // ConcurrentNavigableMap
	  rank 0 explicit_value ""
	actual class class_ref 259099 // ConcurrentNavigableMap
	  rank 1 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 428443 // <realization>
	  relation 428443 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 428443 // <realization>
	    b parent class_ref 160411 // AbstractMap
	end

	classrelation 428571 // <realization>
	  relation 428571 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 428571 // <realization>
	    b parent class_ref 259099 // ConcurrentNavigableMap
	end

	classrelation 428699 // <realization>
	  relation 428699 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 428699 // <realization>
	    b parent class_ref 129435 // Cloneable
	end

	classrelation 428827 // <realization>
	  relation 428827 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 428827 // <realization>
	    b parent class_ref 128155 // Serializable
	end

	attribute 364315 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -7647078645895051609L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 428955 // m (<unidirectional association>)
	  relation 428955 --->
	    a role_name "m" const_relation private
	      comment " Underlying map 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
	      classrelation_ref 428955 // m (<unidirectional association>)
	    b parent class_ref 259227 // ConcurrentSkipListMap
	end

	attribute 364443 "lo"
	  const_attribute private explicit_type "K"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " lower bound key, or null if from start "
	end

	attribute 364571 "hi"
	  const_attribute private explicit_type "K"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " upper bound key, or null if to end "
	end

	attribute 364699 "loInclusive"
	  const_attribute private explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " inclusion flag for lo "
	end

	attribute 364827 "hiInclusive"
	  const_attribute private explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " inclusion flag for hi "
	end

	attribute 364955 "isDescending"
	  const_attribute private explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " direction "
	end

	classrelation 429083 // keySetView (<unidirectional association>)
	  relation 429083 --->
	    a role_name "keySetView" private
	      comment " Lazily initialized view holders
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K> ${name}${value};
"
	      classrelation_ref 429083 // keySetView (<unidirectional association>)
	    b parent class_ref 259483 // KeySet
	end

	classrelation 429211 // entrySetView (<unidirectional association>)
	  relation 429211 --->
	    a role_name "entrySetView" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Map.Entry<K,V>> ${name}${value};
"
	      classrelation_ref 429211 // entrySetView (<unidirectional association>)
	    b parent class_ref 129691 // Set
	end

	classrelation 429339 // valuesView (<unidirectional association>)
	  relation 429339 --->
	    a role_name "valuesView" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 429339 // valuesView (<unidirectional association>)
	    b parent class_ref 160667 // Collection
	end

	operation 1495451 "SubMap"
	  package explicit_return_type ""
	  nparams 6
	    param inout name "map" type class_ref 259227 // ConcurrentSkipListMap
	    param inout name "fromKey" explicit_type "K"
	    param inout name "fromInclusive" explicit_type "boolean"
	    param inout name "toKey" explicit_type "K"
	    param inout name "toInclusive" explicit_type "boolean"
	    param inout name "isDescending" explicit_type "boolean"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<K,V> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a new submap, initializing all fields"
	end

	operation 1495579 "tooLow"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------  Utilities -------------- "
	end

	operation 1495707 "tooHigh"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1495835 "inBounds"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1495963 "checkKeyBounds"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  nexceptions 1
	    exception class_ref 128283 // IllegalArgumentException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1496091 "isBeforeEnd"
	  private explicit_return_type "boolean"
	  nparams 1
	    param inout name "n" type class_ref 259867 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<K,V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if node key is less than upper bound of range"
	end

	operation 1496219 "loNode"
	  private return_type class_ref 259867 // Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns lowest node. This node might not be in range, so
most usages need to check bounds"
	end

	operation 1496347 "hiNode"
	  private return_type class_ref 259867 // Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns highest node. This node might not be in range, so
most usages need to check bounds"
	end

	operation 1496475 "lowestKey"
	  private explicit_return_type "K"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns lowest absolute key (ignoring directonality)"
	end

	operation 1496603 "highestKey"
	  private explicit_return_type "K"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns highest absolute key (ignoring directonality)"
	end

	operation 1496731 "lowestEntry"
	  private return_type class_ref 160539 // Entry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1496859 "highestEntry"
	  private return_type class_ref 160539 // Entry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1496987 "removeLowest"
	  private return_type class_ref 160539 // Entry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1497115 "removeHighest"
	  private return_type class_ref 160539 // Entry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1497243 "getNearEntry"
	  private return_type class_ref 160539 // Entry
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param in name "rel" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Submap version of ConcurrentSkipListMap.getNearEntry"
	end

	operation 1497371 "getNearKey"
	  private explicit_return_type "K"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param in name "rel" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Almost the same as getNearEntry, except for keys"
	end

	operation 1497499 "containsKey"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "key" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------  Map API methods -------------- "
	end

	operation 1497627 "get"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "key" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1497755 "put"
	  public explicit_return_type "V"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1497883 "remove"
	  public explicit_return_type "V"
	  nparams 1
	    param inout name "key" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1498011 "size"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1498139 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1498267 "containsValue"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "value" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1498395 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1498523 "putIfAbsent"
	  public explicit_return_type "V"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------  ConcurrentMap API methods -------------- "
	end

	operation 1498651 "remove"
	  public explicit_return_type "boolean"
	  nparams 2
	    param inout name "key" type class_ref 3401484 // Object
	    param inout name "value" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1498779 "replace"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "key" explicit_type "K"
	    param inout name "oldValue" explicit_type "V"
	    param inout name "newValue" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1498907 "replace"
	  public explicit_return_type "V"
	  nparams 2
	    param inout name "key" explicit_type "K"
	    param inout name "value" explicit_type "V"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1499035 "comparator"
	  public return_type class_ref 3094156 // Comparator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------  SortedMap API methods -------------- "
	end

	operation 1499163 "newSubMap"
	  private return_type class_ref 260763 // SubMap
	  nparams 4
	    param inout name "fromKey" explicit_type "K"
	    param inout name "fromInclusive" explicit_type "boolean"
	    param inout name "toKey" explicit_type "K"
	    param inout name "toInclusive" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Utility to create submaps, where given bounds override
unbounded(null) ones and/or are checked against bounded ones."
	end

	operation 1499291 "subMap"
	  public return_type class_ref 260763 // SubMap
	  nparams 4
	    param inout name "fromKey" explicit_type "K"
	    param inout name "fromInclusive" explicit_type "boolean"
	    param inout name "toKey" explicit_type "K"
	    param inout name "toInclusive" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1499419 "headMap"
	  public return_type class_ref 260763 // SubMap
	  nparams 2
	    param inout name "toKey" explicit_type "K"
	    param inout name "inclusive" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1499547 "tailMap"
	  public return_type class_ref 260763 // SubMap
	  nparams 2
	    param inout name "fromKey" explicit_type "K"
	    param inout name "inclusive" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1499675 "subMap"
	  public return_type class_ref 260763 // SubMap
	  nparams 2
	    param inout name "fromKey" explicit_type "K"
	    param inout name "toKey" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1499803 "headMap"
	  public return_type class_ref 260763 // SubMap
	  nparams 1
	    param inout name "toKey" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1499931 "tailMap"
	  public return_type class_ref 260763 // SubMap
	  nparams 1
	    param inout name "fromKey" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1500059 "descendingMap"
	  public return_type class_ref 260763 // SubMap
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1500187 "ceilingEntry"
	  public return_type class_ref 160539 // Entry
	  nparams 1
	    param inout name "key" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ----------------  Relational methods -------------- "
	end

	operation 1500315 "ceilingKey"
	  public explicit_return_type "K"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1500443 "lowerEntry"
	  public return_type class_ref 160539 // Entry
	  nparams 1
	    param inout name "key" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1500571 "lowerKey"
	  public explicit_return_type "K"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1500699 "floorEntry"
	  public return_type class_ref 160539 // Entry
	  nparams 1
	    param inout name "key" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1500827 "floorKey"
	  public explicit_return_type "K"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1500955 "higherEntry"
	  public return_type class_ref 160539 // Entry
	  nparams 1
	    param inout name "key" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1501083 "higherKey"
	  public explicit_return_type "K"
	  nparams 1
	    param inout name "key" explicit_type "K"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1501211 "firstKey"
	  public explicit_return_type "K"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1501339 "lastKey"
	  public explicit_return_type "K"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1501467 "firstEntry"
	  public return_type class_ref 160539 // Entry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1501595 "lastEntry"
	  public return_type class_ref 160539 // Entry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1501723 "pollFirstEntry"
	  public return_type class_ref 160539 // Entry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1501851 "pollLastEntry"
	  public return_type class_ref 160539 // Entry
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1501979 "keySet"
	  public return_type class_ref 247451 // NavigableSet
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " ---------------- Submap Views -------------- "
	end

	operation 1502107 "navigableKeySet"
	  public return_type class_ref 247451 // NavigableSet
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1502235 "values"
	  public return_type class_ref 160667 // Collection
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1502363 "entrySet"
	  public return_type class_ref 129691 // Set
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1502491 "descendingKeySet"
	  public return_type class_ref 247451 // NavigableSet
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1502619 "keyIterator"
	  package return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1502747 "valueIterator"
	  package return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1502875 "entryIterator"
	  package return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Map.Entry<K,V>> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 260891 "SubMapIter"
	  abstract visibility package 
	  nformals 1
	  formal name "T" type "" explicit_default_value ""
	    explicit_extends ""
	  nactuals 1
	  actual class class_ref 155803 // Iterator
	    rank 0 explicit_value ""
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 429467 // <realization>
	    relation 429467 -_-|>
	      stereotype "bind"
	      a public
		cpp default "${type}"
		java "${type}"
		classrelation_ref 429467 // <realization>
	      b parent class_ref 155803 // Iterator
	  end

	  classrelation 429595 // lastReturned (<unidirectional association>)
	    relation 429595 --->
	      a role_name "lastReturned" package
		comment " the last node returned by next() 
"
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
		classrelation_ref 429595 // lastReturned (<unidirectional association>)
	      b parent class_ref 259867 // Node
	  end

	  classrelation 429723 // next (<unidirectional association>)
	    relation 429723 --->
	      a role_name "next" package
		comment " the next node to return from next(); 
"
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<K,V> ${name}${value};
"
		classrelation_ref 429723 // next (<unidirectional association>)
	      b parent class_ref 259867 // Node
	  end

	  attribute 365083 "nextValue"
	    package explicit_type "V"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    comment " Cache of next value field to maintain weak consistency "
	  end

	  operation 1503003 "SubMapIter"
	    package explicit_return_type ""
	    nparams 0
	    cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	    cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1503131 "hasNext"
	    public explicit_return_type "boolean"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1503259 "advance"
	    package explicit_return_type "void"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1503387 "ascend"
	    private explicit_return_type "void"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1503515 "descend"
	    private explicit_return_type "void"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1503643 "remove"
	    public explicit_return_type "void"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	class 261019 "SubMapValueIterator"
	  visibility package 
	  nactuals 5
	  actual class class_ref 259227 // ConcurrentSkipListMap
	    rank 0 explicit_value ""
	  actual class class_ref 259227 // ConcurrentSkipListMap
	    rank 1 explicit_value ""
	  actual class class_ref 260763 // SubMap
	    rank 0 explicit_value ""
	  actual class class_ref 260763 // SubMap
	    rank 1 explicit_value ""
	  actual class class_ref 260891 // SubMapIter
	    rank 0 explicit_value ""
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 429851 // <realization>
	    relation 429851 -_-|>
	      stereotype "bind"
	      a public
		cpp default "${type}"
		java "${type}"
		classrelation_ref 429851 // <realization>
	      b parent class_ref 260891 // SubMapIter
	  end

	  operation 1503771 "next"
	    public explicit_return_type "V"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	class 261147 "SubMapKeyIterator"
	  visibility package 
	  nactuals 5
	  actual class class_ref 259227 // ConcurrentSkipListMap
	    rank 0 explicit_value ""
	  actual class class_ref 259227 // ConcurrentSkipListMap
	    rank 1 explicit_value ""
	  actual class class_ref 260763 // SubMap
	    rank 0 explicit_value ""
	  actual class class_ref 260763 // SubMap
	    rank 1 explicit_value ""
	  actual class class_ref 260891 // SubMapIter
	    rank 0 explicit_value ""
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 429979 // <realization>
	    relation 429979 -_-|>
	      stereotype "bind"
	      a public
		cpp default "${type}"
		java "${type}"
		classrelation_ref 429979 // <realization>
	      b parent class_ref 260891 // SubMapIter
	  end

	  operation 1503899 "next"
	    public explicit_return_type "K"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end

	class 261275 "SubMapEntryIterator"
	  visibility package 
	  nactuals 5
	  actual class class_ref 259227 // ConcurrentSkipListMap
	    rank 0 explicit_value ""
	  actual class class_ref 259227 // ConcurrentSkipListMap
	    rank 1 explicit_value ""
	  actual class class_ref 260763 // SubMap
	    rank 0 explicit_value ""
	  actual class class_ref 260763 // SubMap
	    rank 1 explicit_value ""
	  actual class class_ref 260891 // SubMapIter
	    rank 0 explicit_value ""
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 430107 // <realization>
	    relation 430107 -_-|>
	      stereotype "bind"
	      a public
		cpp default "${type}"
		java "${type}"
		classrelation_ref 430107 // <realization>
	      b parent class_ref 260891 // SubMapIter
	  end

	  operation 1504027 "next"
	    public return_type class_ref 160539 // Entry
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<K,V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end
      end

      classrelation 430235 // UNSAFE (<unidirectional association>)
	relation 430235 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 430235 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 365211 "headOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 132251 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ConcurrentSkipListMap.class;
            headOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"head\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 261403 "ConcurrentSkipListSet"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 198299 // AbstractSet
        rank 0 explicit_value ""
      actual class class_ref 247451 // NavigableSet
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

A scalable concurrent {@link NavigableSet} implementation based on
a {@link ConcurrentSkipListMap}.  The elements of the set are kept
sorted according to their {@linkplain Comparable natural ordering},
or by a {@link Comparator} provided at set creation time, depending
on which constructor is used.

<p>This implementation provides expected average <i>log(n)</i> time
cost for the <tt>contains</tt>, <tt>add</tt>, and <tt>remove</tt>
operations and their variants.  Insertion, removal, and access
operations safely execute concurrently by multiple threads.
Iterators are <i>weakly consistent</i>, returning elements
reflecting the state of the set at some point at or since the
creation of the iterator.  They do <em>not</em> throw {@link
ConcurrentModificationException}, and may proceed concurrently with
other operations.  Ascending ordered views and their iterators are
faster than descending ones.

<p>Beware that, unlike in most collections, the <tt>size</tt>
method is <em>not</em> a constant-time operation. Because of the
asynchronous nature of these sets, determining the current number
of elements requires a traversal of the elements, and so may report
inaccurate results if this collection is modified during traversal.
Additionally, the bulk operations <tt>addAll</tt>,
<tt>removeAll</tt>, <tt>retainAll</tt>, <tt>containsAll</tt>,
<tt>equals</tt>, and <tt>toArray</tt> are <em>not</em> guaranteed
to be performed atomically. For example, an iterator operating
concurrently with an <tt>addAll</tt> operation might view only some
of the added elements.

<p>This class and its iterators implement all of the
<em>optional</em> methods of the {@link Set} and {@link Iterator}
interfaces. Like most other concurrent collection implementations,
this class does not permit the use of <tt>null</tt> elements,
because <tt>null</tt> arguments and return values cannot be reliably
distinguished from the absence of elements.

@author Doug Lea
@param <E> the type of elements maintained by this set
@since 1.6"
      classrelation 430363 // <realization>
	relation 430363 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 430363 // <realization>
	  b parent class_ref 198299 // AbstractSet
      end

      classrelation 430491 // <realization>
	relation 430491 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 430491 // <realization>
	  b parent class_ref 247451 // NavigableSet
      end

      classrelation 430619 // <realization>
	relation 430619 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 430619 // <realization>
	  b parent class_ref 129435 // Cloneable
      end

      classrelation 430747 // <realization>
	relation 430747 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 430747 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 365339 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -2479143111061671589L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 430875 // m (<unidirectional association>)
	relation 430875 --->
	  a role_name "m" const_relation private
	    comment "
The underlying map. Uses Boolean.TRUE as value for each
element.  This field is declared final for the sake of thread
safety, which entails some ugliness in clone()

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E,Object> ${name}${value};
"
	    classrelation_ref 430875 // m (<unidirectional association>)
	  b parent class_ref 259099 // ConcurrentNavigableMap
      end

      operation 1504155 "ConcurrentSkipListSet"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty set that orders its elements according to
their {@linkplain Comparable natural ordering}."
      end

      operation 1504283 "ConcurrentSkipListSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "comparator" type class_ref 3094156 // Comparator
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new, empty set that orders its elements according to
the specified comparator.

@param comparator the comparator that will be used to order this set.
       If <tt>null</tt>, the {@linkplain Comparable natural
       ordering} of the elements will be used."
      end

      operation 1504411 "ConcurrentSkipListSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new set containing the elements in the specified
collection, that orders its elements according to their
{@linkplain Comparable natural ordering}.

@param c The elements that will comprise the new set
@throws ClassCastException if the elements in <tt>c</tt> are
        not {@link Comparable}, or are not mutually comparable
@throws NullPointerException if the specified collection or any
        of its elements are null"
      end

      operation 1504539 "ConcurrentSkipListSet"
	public explicit_return_type ""
	nparams 1
	  param inout name "s" type class_ref 184987 // SortedSet
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new set containing the same elements and using the
same ordering as the specified sorted set.

@param s sorted set whose elements will comprise the new set
@throws NullPointerException if the specified sorted set or any
        of its elements are null"
      end

      operation 1504667 "ConcurrentSkipListSet"
	package explicit_return_type ""
	nparams 1
	  param inout name "m" type class_ref 259099 // ConcurrentNavigableMap
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<E,Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "For use by submaps"
      end

      operation 1504795 "clone"
	public return_type class_ref 261403 // ConcurrentSkipListSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a shallow copy of this <tt>ConcurrentSkipListSet</tt>
instance. (The elements themselves are not cloned.)

@return a shallow copy of this set"
      end

      operation 1504923 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Set operations -------------- 

Returns the number of elements in this set.  If this set
contains more than <tt>Integer.MAX_VALUE</tt> elements, it
returns <tt>Integer.MAX_VALUE</tt>.

<p>Beware that, unlike in most collections, this method is
<em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these sets, determining the current
number of elements requires traversing them all to count them.
Additionally, it is possible for the size to change during
execution of this method, in which case the returned result
will be inaccurate. Thus, this method is typically not very
useful in concurrent applications.

@return the number of elements in this set"
      end

      operation 1505051 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains no elements.
@return <tt>true</tt> if this set contains no elements"
      end

      operation 1505179 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains the specified element.
More formally, returns <tt>true</tt> if and only if this set
contains an element <tt>e</tt> such that <tt>o.equals(e)</tt>.

@param o object to be checked for containment in this set
@return <tt>true</tt> if this set contains the specified element
@throws ClassCastException if the specified element cannot be
        compared with the elements currently in this set
@throws NullPointerException if the specified element is null"
      end

      operation 1505307 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this set if it is not already present.
More formally, adds the specified element <tt>e</tt> to this set if
the set contains no element <tt>e2</tt> such that <tt>e.equals(e2)</tt>.
If this set already contains the element, the call leaves the set
unchanged and returns <tt>false</tt>.

@param e element to be added to this set
@return <tt>true</tt> if this set did not already contain the
        specified element
@throws ClassCastException if <tt>e</tt> cannot be compared
        with the elements currently in this set
@throws NullPointerException if the specified element is null"
      end

      operation 1505435 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified element from this set if it is present.
More formally, removes an element <tt>e</tt> such that
<tt>o.equals(e)</tt>, if this set contains such an element.
Returns <tt>true</tt> if this set contained the element (or
equivalently, if this set changed as a result of the call).
(This set will not contain the element once the call returns.)

@param o object to be removed from this set, if present
@return <tt>true</tt> if this set contained the specified element
@throws ClassCastException if <tt>o</tt> cannot be compared
        with the elements currently in this set
@throws NullPointerException if the specified element is null"
      end

      operation 1505563 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this set."
      end

      operation 1505691 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this set in ascending order.

@return an iterator over the elements in this set in ascending order"
      end

      operation 1505819 "descendingIterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this set in descending order.

@return an iterator over the elements in this set in descending order"
      end

      operation 1505947 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- AbstractSet Overrides -------------- 

Compares the specified object with this set for equality.  Returns
<tt>true</tt> if the specified object is also a set, the two sets
have the same size, and every member of the specified set is
contained in this set (or equivalently, every member of this set is
contained in the specified set).  This definition ensures that the
equals method works properly across different implementations of the
set interface.

@param o the object to be compared for equality with this set
@return <tt>true</tt> if the specified object is equal to this set"
      end

      operation 1506075 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this set all of its elements that are contained in
the specified collection.  If the specified collection is also
a set, this operation effectively modifies this set so that its
value is the <i>asymmetric set difference</i> of the two sets.

@param  c collection containing elements to be removed from this set
@return <tt>true</tt> if this set changed as a result of the call
@throws ClassCastException if the types of one or more elements in this
        set are incompatible with the specified collection
@throws NullPointerException if the specified collection or any
        of its elements are null"
      end

      operation 1506203 "lower"
	public explicit_return_type "E"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- Relational operations -------------- 

@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null"
      end

      operation 1506331 "floor"
	public explicit_return_type "E"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null"
      end

      operation 1506459 "ceiling"
	public explicit_return_type "E"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null"
      end

      operation 1506587 "higher"
	public explicit_return_type "E"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if the specified element is null"
      end

      operation 1506715 "pollFirst"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1506843 "pollLast"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1506971 "comparator"
	public return_type class_ref 3094156 // Comparator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " ---------------- SortedSet operations -------------- "
      end

      operation 1507099 "first"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1507227 "last"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1507355 "subSet"
	public return_type class_ref 247451 // NavigableSet
	nparams 4
	  param inout name "fromElement" explicit_type "E"
	  param inout name "fromInclusive" explicit_type "boolean"
	  param inout name "toElement" explicit_type "E"
	  param inout name "toInclusive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromElement} or
        {@code toElement} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1507483 "headSet"
	public return_type class_ref 247451 // NavigableSet
	nparams 2
	  param inout name "toElement" explicit_type "E"
	  param inout name "inclusive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code toElement} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1507611 "tailSet"
	public return_type class_ref 247451 // NavigableSet
	nparams 2
	  param inout name "fromElement" explicit_type "E"
	  param inout name "inclusive" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromElement} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1507739 "subSet"
	public return_type class_ref 247451 // NavigableSet
	nparams 2
	  param inout name "fromElement" explicit_type "E"
	  param inout name "toElement" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromElement} or
        {@code toElement} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1507867 "headSet"
	public return_type class_ref 247451 // NavigableSet
	nparams 1
	  param inout name "toElement" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code toElement} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1507995 "tailSet"
	public return_type class_ref 247451 // NavigableSet
	nparams 1
	  param inout name "fromElement" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws ClassCastException {@inheritDoc}
@throws NullPointerException if {@code fromElement} is null
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1508123 "descendingSet"
	public return_type class_ref 247451 // NavigableSet
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a reverse order view of the elements contained in this set.
The descending set is backed by this set, so changes to the set are
reflected in the descending set, and vice-versa.

<p>The returned set has an ordering equivalent to
<tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.
The expression {@code s.descendingSet().descendingSet()} returns a
view of {@code s} essentially equivalent to {@code s}.

@return a reverse order view of this set"
      end

      operation 1508251 "setMap"
	private explicit_return_type "void"
	nparams 1
	  param inout name "map" type class_ref 259099 // ConcurrentNavigableMap
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E,Object> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Support for resetting map in clone"
      end

      classrelation 431003 // UNSAFE (<unidirectional association>)
	relation 431003 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 431003 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 365467 "mapOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 132379 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ConcurrentSkipListSet.class;
            mapOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"m\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 261531 "CopyOnWriteArrayList"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 131483 // List
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A thread-safe random-access list.

<p>Read operations (including {@link #get}) do not block and may overlap with
update operations. Reads reflect the results of the most recently completed
operations. Aggregate operations like {@link #addAll} and {@link #clear} are
atomic; they never expose an intermediate state.

<p>Iterators of this list never throw {@link
ConcurrentModificationException}. When an iterator is created, it keeps a
copy of the list's contents. It is always safe to iterate this list, but
iterations may not reflect the latest state of the list.

<p>Iterators returned by this list and its sub lists cannot modify the
underlying list. In particular, {@link Iterator#remove}, {@link
ListIterator#add} and {@link ListIterator#set} all throw {@link
UnsupportedOperationException}.

<p>This class offers extended API beyond the {@link List} interface. It
includes additional overloads for indexed search ({@link #indexOf} and {@link
#lastIndexOf}) and methods for conditional adds ({@link #addIfAbsent} and
{@link #addAllAbsent})."
      classrelation 431131 // <realization>
	relation 431131 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 431131 // <realization>
	  b parent class_ref 131483 // List
      end

      classrelation 431259 // <realization>
	relation 431259 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 431259 // <realization>
	  b parent class_ref 232603 // RandomAccess
      end

      classrelation 431387 // <realization>
	relation 431387 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 431387 // <realization>
	  b parent class_ref 129435 // Cloneable
      end

      classrelation 431515 // <realization>
	relation 431515 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 431515 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 365595 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 8673264195747942595L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 431643 // elements (<unidirectional association>)
	relation 431643 --->
	  a role_name "elements" multiplicity "[]" volatile private
	    comment "
Holds the latest snapshot of the list's data. This field is volatile so
that data can be read without synchronization. As a consequence, all
writes to this field must be atomic; it is an error to modify the
contents of an array after it has been assigned to this field.

Synchronization is required by all update operations. This defends
against one update clobbering the result of another operation. For
example, 100 threads simultaneously calling add() will grow the list's
size by 100 when they have completed. No update operations are lost!

Maintainers should be careful to read this field only once in
non-blocking read methods. Write methods must be synchronized to avoid
clobbering concurrent writes.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 431643 // elements (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      operation 1508379 "CopyOnWriteArrayList"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new empty instance."
      end

      operation 1508507 "CopyOnWriteArrayList"
	public explicit_return_type ""
	nparams 1
	  param inout name "collection" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Creates a new instance containing the elements of {@code collection}."
      end

      operation 1508635 "CopyOnWriteArrayList"
	public explicit_return_type ""
	nparams 1
	  param inout name "array" explicit_type "E"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new instance containing the elements of {@code array}."
      end

      operation 1508763 "clone"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1508891 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1509019 "get"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 1509147 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1509275 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "collection" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1509403 "containsAll"
	class_operation package explicit_return_type "boolean"
	nparams 4
	  param inout name "collection" type class_ref 160667 // Collection
	  param inout name "snapshot" type class_ref 3401484 // Object
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1509531 "indexOf"
	public explicit_return_type "int"
	nparams 2
	  param inout name "object" explicit_type "E"
	  param in name "from" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches this list for {@code object} and returns the index of the first
occurrence that is at or after {@code from}.

@return the index or -1 if the object was not found."
      end

      operation 1509659 "indexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1509787 "lastIndexOf"
	public explicit_return_type "int"
	nparams 2
	  param inout name "object" explicit_type "E"
	  param in name "to" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Searches this list for {@code object} and returns the index of the last
occurrence that is before {@code to}.

@return the index or -1 if the object was not found."
      end

      operation 1509915 "lastIndexOf"
	public explicit_return_type "int"
	nparams 1
	  param inout name "object" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1510043 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1510171 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an {@link Iterator} that iterates over the elements of this list
as they were at the time of this method call. Changes to the list made
after this method call will not be reflected by the iterator, nor will
they trigger a {@link ConcurrentModificationException}.

<p>The returned iterator does not support {@link Iterator#remove()}."
      end

      operation 1510299 "listIterator"
	public return_type class_ref 231963 // ListIterator
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link ListIterator} that iterates over the elements of this
list as they were at the time of this method call. Changes to the list
made after this method call will not be reflected by the iterator, nor
will they trigger a {@link ConcurrentModificationException}.

<p>The returned iterator does not support {@link ListIterator#add},
{@link ListIterator#set} or {@link Iterator#remove()},"
      end

      operation 1510427 "listIterator"
	public return_type class_ref 231963 // ListIterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@code listIterator(0)}."
      end

      operation 1510555 "subList"
	public return_type class_ref 131483 // List
	nparams 2
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1510683 "toArray"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1510811 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "contents" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings({\"unchecked\",\"SuspiciousSystemArraycopy\"})
"
	
	
	
      end

      operation 1510939 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "other" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1511067 "hashCode"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1511195 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1511323 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1511451 "add"
	public explicit_return_type "void"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1511579 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "collection" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1511707 "addAll"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "collection" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1511835 "addAllAbsent"
	public explicit_return_type "int"
	nparams 1
	  param inout name "collection" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the elements of {@code collection} that are not already present in
this list. If {@code collection} includes a repeated value, at most one
occurrence of that value will be added to this list. Elements are added
at the end of this list.

<p>Callers of this method may prefer {@link CopyOnWriteArraySet}, whose
API is more appropriate for set operations."
      end

      operation 1511963 "addIfAbsent"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "object" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds {@code object} to the end of this list if it is not already present.

<p>Callers of this method may prefer {@link CopyOnWriteArraySet}, whose
API is more appropriate for set operations."
      end

      operation 1512091 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
      end

      operation 1512219 "remove"
	public explicit_return_type "E"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1512347 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1512475 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "collection" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1512603 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "collection" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1512731 "removeOrRetain"
	private explicit_return_type "int"
	nparams 4
	  param inout name "collection" type class_ref 160667 // Collection
	  param inout name "retain" explicit_type "boolean"
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes or retains the elements in {@code collection}. Returns the number
of elements removed."
      end

      operation 1512859 "set"
	public explicit_return_type "E"
	nparams 2
	  param in name "index" explicit_type "int"
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1512987 "removeRange"
	private explicit_return_type "void"
	nparams 2
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1513115 "lastIndexOf"
	class_operation package explicit_return_type "int"
	nparams 4
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "data" type class_ref 3401484 // Object
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1513243 "indexOf"
	class_operation package explicit_return_type "int"
	nparams 4
	  param inout name "o" type class_ref 3401484 // Object
	  param inout name "data" type class_ref 3401484 // Object
	  param in name "from" explicit_type "int"
	  param in name "to" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}[] ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1513371 "getArray"
	package return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      class 261659 "CowSubList"
	visibility package 
	nactuals 1
	actual class class_ref 231835 // AbstractList
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 431771 // <realization>
	  relation 431771 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 431771 // <realization>
	    b parent class_ref 231835 // AbstractList
	end

	classrelation 431899 // slice (<unidirectional association>)
	  relation 431899 --->
	    a role_name "slice" volatile private
	      comment "
An immutable snapshot of a sub list's state. By gathering all three
of the sub list's fields in an immutable object,

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 431899 // slice (<unidirectional association>)
	    b parent class_ref 261787 // Slice
	end

	operation 1513499 "CowSubList"
	  public explicit_return_type ""
	  nparams 3
	    param inout name "expectedElements" type class_ref 3401484 // Object
	    param in name "from" explicit_type "int"
	    param in name "to" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1513627 "size"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1513755 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1513883 "get"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
        @Override
"
	  
	  
	  
	end

	operation 1514011 "iterator"
	  public return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1514139 "listIterator"
	  public return_type class_ref 231963 // ListIterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1514267 "listIterator"
	  public return_type class_ref 231963 // ListIterator
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1514395 "indexOf"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "object" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1514523 "lastIndexOf"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "object" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1514651 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "object" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1514779 "containsAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "collection" type class_ref 160667 // Collection
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1514907 "subList"
	  public return_type class_ref 131483 // List
	  nparams 2
	    param in name "from" explicit_type "int"
	    param in name "to" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1515035 "remove"
	  public explicit_return_type "E"
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1515163 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1515291 "add"
	  public explicit_return_type "void"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "object" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1515419 "add"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "object" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1515547 "addAll"
	  public explicit_return_type "boolean"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "collection" type class_ref 160667 // Collection
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<? extends E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1515675 "addAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "collection" type class_ref 160667 // Collection
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1515803 "set"
	  public explicit_return_type "E"
	  nparams 2
	    param in name "index" explicit_type "int"
	    param inout name "object" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1515931 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "object" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1516059 "removeAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "collection" type class_ref 160667 // Collection
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end

	operation 1516187 "retainAll"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "collection" type class_ref 160667 // Collection
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@Override
"
	  
	  
	  
	end
      end

      class 261787 "Slice"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 432027 // expectedElements (<unidirectional association>)
	  relation 432027 --->
	    a role_name "expectedElements" multiplicity "[]" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 432027 // expectedElements (<unidirectional association>)
	    b parent class_ref 3401484 // Object
	end

	attribute 365723 "from"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 365851 "to"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1516315 "Slice"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "expectedElements" type class_ref 3401484 // Object
	    param in name "from" explicit_type "int"
	    param in name "to" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1516443 "checkElementIndex"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Throws if {@code index} doesn't identify an element in the array."
	end

	operation 1516571 "checkPositionIndex"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "index" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Throws if {@code index} doesn't identify an insertion point in the
array. Unlike element index, it's okay to add or iterate at size()."
	end

	operation 1516699 "checkConcurrentModification"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "snapshot" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 261915 "CowIterator"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 231963 // ListIterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 432155 // <realization>
	  relation 432155 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 432155 // <realization>
	    b parent class_ref 231963 // ListIterator
	end

	classrelation 432283 // snapshot (<unidirectional association>)
	  relation 432283 --->
	    a role_name "snapshot" multiplicity "[]" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 432283 // snapshot (<unidirectional association>)
	    b parent class_ref 3401484 // Object
	end

	attribute 365979 "from"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 366107 "to"
	  const_attribute private explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 366235 "index"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1516827 "CowIterator"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "snapshot" type class_ref 3401484 // Object
	    param in name "from" explicit_type "int"
	    param in name "to" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1516955 "add"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "object" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1517083 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1517211 "hasPrevious"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1517339 "next"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 1517467 "nextIndex"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1517595 "previous"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 1517723 "previousIndex"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1517851 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1517979 "set"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "object" explicit_type "E"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1518107 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "out" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1518235 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "in" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent synchronized java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 262043 "CopyOnWriteArraySet"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 198299 // AbstractSet
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

A {@link java.util.Set} that uses an internal {@link CopyOnWriteArrayList}
for all of its operations.  Thus, it shares the same basic properties:
<ul>
 <li>It is best suited for applications in which set sizes generally
      stay small, read-only operations
      vastly outnumber mutative operations, and you need
      to prevent interference among threads during traversal.
 <li>It is thread-safe.
 <li>Mutative operations (<tt>add</tt>, <tt>set</tt>, <tt>remove</tt>, etc.)
     are expensive since they usually entail copying the entire underlying
     array.
 <li>Iterators do not support the mutative <tt>remove</tt> operation.
 <li>Traversal via iterators is fast and cannot encounter
     interference from other threads. Iterators rely on
     unchanging snapshots of the array at the time the iterators were
     constructed.
</ul>

<p> <b>Sample Usage.</b> The following code sketch uses a
copy-on-write set to maintain a set of Handler objects that
perform some action upon state updates.

 <pre> {@code
class Handler { void handle(); ... }

class X {
  private final CopyOnWriteArraySet<Handler> handlers
    = new CopyOnWriteArraySet<Handler>();
  public void addHandler(Handler h) { handlers.add(h); }

  private long internalState;
  private synchronized void changeState() { internalState = ...; }

  public void update() {
    changeState();
    for (Handler handler : handlers)
       handler.handle();
  }
}}</pre>

@see CopyOnWriteArrayList
@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 432411 // <realization>
	relation 432411 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 432411 // <realization>
	  b parent class_ref 198299 // AbstractSet
      end

      classrelation 432539 // <realization>
	relation 432539 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 432539 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 366363 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5457747651344034263L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 432667 // al (<unidirectional association>)
	relation 432667 --->
	  a role_name "al" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 432667 // al (<unidirectional association>)
	  b parent class_ref 261531 // CopyOnWriteArrayList
      end

      operation 1518363 "CopyOnWriteArraySet"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an empty set."
      end

      operation 1518491 "CopyOnWriteArraySet"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a set containing all of the elements of the specified
collection.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection is null"
      end

      operation 1518619 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this set.

@return the number of elements in this set"
      end

      operation 1518747 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains no elements.

@return <tt>true</tt> if this set contains no elements"
      end

      operation 1518875 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains the specified element.
More formally, returns <tt>true</tt> if and only if this set
contains an element <tt>e</tt> such that
<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.

@param o element whose presence in this set is to be tested
@return <tt>true</tt> if this set contains the specified element"
      end

      operation 1519003 "toArray"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this set.
If this set makes any guarantees as to what order its elements
are returned by its iterator, this method must return the
elements in the same order.

<p>The returned array will be \"safe\" in that no references to it
are maintained by this set.  (In other words, this method must
allocate a new array even if this set is backed by an array).
The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all the elements in this set"
      end

      operation 1519131 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this set; the
runtime type of the returned array is that of the specified array.
If the set fits in the specified array, it is returned therein.
Otherwise, a new array is allocated with the runtime type of the
specified array and the size of this set.

<p>If this set fits in the specified array with room to spare
(i.e., the array has more elements than this set), the element in
the array immediately following the end of the set is set to
<tt>null</tt>.  (This is useful in determining the length of this
set <i>only</i> if the caller knows that this set does not contain
any null elements.)

<p>If this set makes any guarantees as to what order its elements
are returned by its iterator, this method must return the elements
in the same order.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose <tt>x</tt> is a set known to contain only strings.
The following code can be used to dump the set into a newly allocated
array of <tt>String</tt>:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that <tt>toArray(new Object[0])</tt> is identical in function to
<tt>toArray()</tt>.

@param a the array into which the elements of this set are to be
       stored, if it is big enough; otherwise, a new array of the same
       runtime type is allocated for this purpose.
@return an array containing all the elements in this set
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in this
        set
@throws NullPointerException if the specified array is null"
      end

      operation 1519259 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all of the elements from this set.
The set will be empty after this call returns."
      end

      operation 1519387 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the specified element from this set if it is present.
More formally, removes an element <tt>e</tt> such that
<tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>,
if this set contains such an element.  Returns <tt>true</tt> if
this set contained the element (or equivalently, if this set
changed as a result of the call).  (This set will not contain the
element once the call returns.)

@param o object to be removed from this set, if present
@return <tt>true</tt> if this set contained the specified element"
      end

      operation 1519515 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this set if it is not already present.
More formally, adds the specified element <tt>e</tt> to this set if
the set contains no element <tt>e2</tt> such that
<tt>(e==null&nbsp;?&nbsp;e2==null&nbsp;:&nbsp;e.equals(e2))</tt>.
If this set already contains the element, the call leaves the set
unchanged and returns <tt>false</tt>.

@param e element to be added to this set
@return <tt>true</tt> if this set did not already contain the specified
        element"
      end

      operation 1519643 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>true</tt> if this set contains all of the elements of the
specified collection.  If the specified collection is also a set, this
method returns <tt>true</tt> if it is a <i>subset</i> of this set.

@param  c collection to be checked for containment in this set
@return <tt>true</tt> if this set contains all of the elements of the
        specified collection
@throws NullPointerException if the specified collection is null
@see #contains(Object)"
      end

      operation 1519771 "addAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds all of the elements in the specified collection to this set if
they're not already present.  If the specified collection is also a
set, the <tt>addAll</tt> operation effectively modifies this set so
that its value is the <i>union</i> of the two sets.  The behavior of
this operation is undefined if the specified collection is modified
while the operation is in progress.

@param  c collection containing elements to be added to this set
@return <tt>true</tt> if this set changed as a result of the call
@throws NullPointerException if the specified collection is null
@see #add(Object)"
      end

      operation 1519899 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes from this set all of its elements that are contained in the
specified collection.  If the specified collection is also a set,
this operation effectively modifies this set so that its value is the
<i>asymmetric set difference</i> of the two sets.

@param  c collection containing elements to be removed from this set
@return <tt>true</tt> if this set changed as a result of the call
@throws ClassCastException if the class of an element of this set
        is incompatible with the specified collection (optional)
@throws NullPointerException if this set contains a null element and the
        specified collection does not permit null elements (optional),
        or if the specified collection is null
@see #remove(Object)"
      end

      operation 1520027 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retains only the elements in this set that are contained in the
specified collection.  In other words, removes from this set all of
its elements that are not contained in the specified collection.  If
the specified collection is also a set, this operation effectively
modifies this set so that its value is the <i>intersection</i> of the
two sets.

@param  c collection containing elements to be retained in this set
@return <tt>true</tt> if this set changed as a result of the call
@throws ClassCastException if the class of an element of this set
        is incompatible with the specified collection (optional)
@throws NullPointerException if this set contains a null element and the
        specified collection does not permit null elements (optional),
        or if the specified collection is null
@see #remove(Object)"
      end

      operation 1520155 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements contained in this set
in the order in which these elements were added.

<p>The returned iterator provides a snapshot of the state of the set
when the iterator was constructed. No synchronization is needed while
traversing the iterator. The iterator does <em>NOT</em> support the
<tt>remove</tt> method.

@return an iterator over the elements in this set"
      end

      operation 1520283 "equals"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Compares the specified object with this set for equality.
Returns {@code true} if the specified object is the same object
as this object, or if it is also a {@link Set} and the elements
returned by an {@linkplain List#iterator() iterator} over the
specified set are the same as the elements returned by an
iterator over this set.  More formally, the two iterators are
considered to return the same elements if they return the same
number of elements and for every element {@code e1} returned by
the iterator over the specified set, there is an element
{@code e2} returned by the iterator over this set such that
{@code (e1==null ? e2==null : e1.equals(e2))}.

@param o object to be compared for equality with this set
@return {@code true} if the specified object is equal to this set"
      end

      operation 1520411 "eq"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "o1" type class_ref 3401484 // Object
	  param inout name "o2" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Test for equality, coping with nulls."
      end
    end

    class 262171 "CountDownLatch"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A synchronization aid that allows one or more threads to wait until
a set of operations being performed in other threads completes.

<p>A {@code CountDownLatch} is initialized with a given <em>count</em>.
The {@link #await await} methods block until the current count reaches
zero due to invocations of the {@link #countDown} method, after which
all waiting threads are released and any subsequent invocations of
{@link #await await} return immediately.  This is a one-shot phenomenon
-- the count cannot be reset.  If you need a version that resets the
count, consider using a {@link CyclicBarrier}.

<p>A {@code CountDownLatch} is a versatile synchronization tool
and can be used for a number of purposes.  A
{@code CountDownLatch} initialized with a count of one serves as a
simple on/off latch, or gate: all threads invoking {@link #await await}
wait at the gate until it is opened by a thread invoking {@link
#countDown}.  A {@code CountDownLatch} initialized to <em>N</em>
can be used to make one thread wait until <em>N</em> threads have
completed some action, or some action has been completed N times.

<p>A useful property of a {@code CountDownLatch} is that it
doesn't require that threads calling {@code countDown} wait for
the count to reach zero before proceeding, it simply prevents any
thread from proceeding past an {@link #await await} until all
threads could pass.

<p><b>Sample usage:</b> Here is a pair of classes in which a group
of worker threads use two countdown latches:
<ul>
<li>The first is a start signal that prevents any worker from proceeding
until the driver is ready for them to proceed;
<li>The second is a completion signal that allows the driver to wait
until all workers have completed.
</ul>

 <pre> {@code
class Driver { // ...
  void main() throws InterruptedException {
    CountDownLatch startSignal = new CountDownLatch(1);
    CountDownLatch doneSignal = new CountDownLatch(N);

    for (int i = 0; i < N; ++i) // create and start threads
      new Thread(new Worker(startSignal, doneSignal)).start();

    doSomethingElse();            // don't let run yet
    startSignal.countDown();      // let all threads proceed
    doSomethingElse();
    doneSignal.await();           // wait for all to finish
  }
}

class Worker implements Runnable {
  private final CountDownLatch startSignal;
  private final CountDownLatch doneSignal;
  Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {
     this.startSignal = startSignal;
     this.doneSignal = doneSignal;
  }
  public void run() {
     try {
       startSignal.await();
       doWork();
       doneSignal.countDown();
     } catch (InterruptedException ex) {} // return;
  }

  void doWork() { ... }
}}</pre>

<p>Another typical usage would be to divide a problem into N parts,
describe each part with a Runnable that executes that portion and
counts down on the latch, and queue all the Runnables to an
Executor.  When all sub-parts are complete, the coordinating thread
will be able to pass through await. (When threads must repeatedly
count down in this way, instead use a {@link CyclicBarrier}.)

 <pre> {@code
class Driver2 { // ...
  void main() throws InterruptedException {
    CountDownLatch doneSignal = new CountDownLatch(N);
    Executor e = ...

    for (int i = 0; i < N; ++i) // create and start threads
      e.execute(new WorkerRunnable(doneSignal, i));

    doneSignal.await();           // wait for all to finish
  }
}

class WorkerRunnable implements Runnable {
  private final CountDownLatch doneSignal;
  private final int i;
  WorkerRunnable(CountDownLatch doneSignal, int i) {
     this.doneSignal = doneSignal;
     this.i = i;
  }
  public void run() {
     try {
       doWork(i);
       doneSignal.countDown();
     } catch (InterruptedException ex) {} // return;
  }

  void doWork() { ... }
}}</pre>

<p>Memory consistency effects: Until the count reaches
zero, actions in a thread prior to calling
{@code countDown()}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions following a successful return from a corresponding
{@code await()} in another thread.

@since 1.5
@author Doug Lea"
      class 262299 "Sync"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 432795 // <generalisation>
	  relation 432795 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 432795 // <generalisation>
	    b parent class_ref 256283 // AbstractQueuedSynchronizer
	end

	attribute 366491 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 4982264981922014374L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1520539 "Sync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "count" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1520667 "getCount"
	  package explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1520795 "tryAcquireShared"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1520923 "tryReleaseShared"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "releases" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 432923 // sync (<unidirectional association>)
	relation 432923 --->
	  a role_name "sync" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 432923 // sync (<unidirectional association>)
	  b parent class_ref 262299 // Sync
      end

      operation 1521051 "CountDownLatch"
	public explicit_return_type ""
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a {@code CountDownLatch} initialized with the given count.

@param count the number of times {@link #countDown} must be invoked
       before threads can pass through {@link #await}
@throws IllegalArgumentException if {@code count} is negative"
      end

      operation 1521179 "await"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the current thread to wait until the latch has counted down to
zero, unless the thread is {@linkplain Thread#interrupt interrupted}.

<p>If the current count is zero then this method returns immediately.

<p>If the current count is greater than zero then the current
thread becomes disabled for thread scheduling purposes and lies
dormant until one of two things happen:
<ul>
<li>The count reaches zero due to invocations of the
{@link #countDown} method; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

@throws InterruptedException if the current thread is interrupted
        while waiting"
      end

      operation 1521307 "await"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes the current thread to wait until the latch has counted down to
zero, unless the thread is {@linkplain Thread#interrupt interrupted},
or the specified waiting time elapses.

<p>If the current count is zero then this method returns immediately
with the value {@code true}.

<p>If the current count is greater than zero then the current
thread becomes disabled for thread scheduling purposes and lies
dormant until one of three things happen:
<ul>
<li>The count reaches zero due to invocations of the
{@link #countDown} method; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>The specified waiting time elapses.
</ul>

<p>If the count reaches zero then the method returns with the
value {@code true}.

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the specified waiting time elapses then the value {@code false}
is returned.  If the time is less than or equal to zero, the method
will not wait at all.

@param timeout the maximum time to wait
@param unit the time unit of the {@code timeout} argument
@return {@code true} if the count reached zero and {@code false}
        if the waiting time elapsed before the count reached zero
@throws InterruptedException if the current thread is interrupted
        while waiting"
      end

      operation 1521435 "countDown"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the count of the latch, releasing all waiting threads if
the count reaches zero.

<p>If the current count is greater than zero then it is decremented.
If the new count is zero then all waiting threads are re-enabled for
thread scheduling purposes.

<p>If the current count equals zero then nothing happens."
      end

      operation 1521563 "getCount"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current count.

<p>This method is typically used for debugging and testing purposes.

@return the current count"
      end

      operation 1521691 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this latch, as well as its state.
The state, in brackets, includes the String {@code \"Count =\"}
followed by the current count.

@return a string identifying this latch, as well as its state"
      end
    end

    class 262427 "CyclicBarrier"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A synchronization aid that allows a set of threads to all wait for
each other to reach a common barrier point.  CyclicBarriers are
useful in programs involving a fixed sized party of threads that
must occasionally wait for each other. The barrier is called
<em>cyclic</em> because it can be re-used after the waiting threads
are released.

<p>A <tt>CyclicBarrier</tt> supports an optional {@link Runnable} command
that is run once per barrier point, after the last thread in the party
arrives, but before any threads are released.
This <em>barrier action</em> is useful
for updating shared-state before any of the parties continue.

<p><b>Sample usage:</b> Here is an example of
 using a barrier in a parallel decomposition design:

 <pre> {@code
class Solver {
  final int N;
  final float[][] data;
  final CyclicBarrier barrier;

  class Worker implements Runnable {
    int myRow;
    Worker(int row) { myRow = row; }
    public void run() {
      while (!done()) {
        processRow(myRow);

        try {
          barrier.await();
        } catch (InterruptedException ex) {
          return;
        } catch (BrokenBarrierException ex) {
          return;
        }
      }
    }
  }

  public Solver(float[][] matrix) {
    data = matrix;
    N = matrix.length;
    barrier = new CyclicBarrier(N,
                                new Runnable() {
                                  public void run() {
                                    mergeRows(...);
                                  }
                                });
    for (int i = 0; i < N; ++i)
      new Thread(new Worker(i)).start();

    waitUntilDone();
  }
}}</pre>

Here, each worker thread processes a row of the matrix then waits at the
barrier until all rows have been processed. When all rows are processed
the supplied {@link Runnable} barrier action is executed and merges the
rows. If the merger
determines that a solution has been found then <tt>done()</tt> will return
<tt>true</tt> and each worker will terminate.

<p>If the barrier action does not rely on the parties being suspended when
it is executed, then any of the threads in the party could execute that
action when it is released. To facilitate this, each invocation of
{@link #await} returns the arrival index of that thread at the barrier.
You can then choose which thread should execute the barrier action, for
example:
 <pre> {@code
if (barrier.await() == 0) {
  // log the completion of this iteration
}}</pre>

<p>The <tt>CyclicBarrier</tt> uses an all-or-none breakage model
for failed synchronization attempts: If a thread leaves a barrier
point prematurely because of interruption, failure, or timeout, all
other threads waiting at that barrier point will also leave
abnormally via {@link BrokenBarrierException} (or
{@link InterruptedException} if they too were interrupted at about
the same time).

<p>Memory consistency effects: Actions in a thread prior to calling
{@code await()}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions that are part of the barrier action, which in turn
<i>happen-before</i> actions following a successful return from the
corresponding {@code await()} in other threads.

@since 1.5
@see CountDownLatch

@author Doug Lea"
      class 262555 "Generation"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 366619 "broken"
	  package explicit_type "boolean"
	  init_value " false"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      classrelation 433051 // lock (<unidirectional association>)
	relation 433051 --->
	  a role_name "lock" init_value " new ReentrantLock()" const_relation private
	    comment " The lock for guarding barrier entry 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 433051 // lock (<unidirectional association>)
	  b parent class_ref 254235 // ReentrantLock
      end

      classrelation 433179 // trip (<unidirectional association>)
	relation 433179 --->
	  a role_name "trip" init_value " lock.newCondition()" const_relation private
	    comment " Condition to wait on until tripped 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 433179 // trip (<unidirectional association>)
	  b parent class_ref 254363 // Condition
      end

      attribute 366747 "parties"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The number of parties "
      end

      classrelation 433307 // barrierCommand (<unidirectional association>)
	relation 433307 --->
	  a role_name "barrierCommand" const_relation private
	    comment " The command to run when tripped 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 433307 // barrierCommand (<unidirectional association>)
	  b parent class_ref 151963 // Runnable
      end

      classrelation 433435 // generation (<unidirectional association>)
	relation 433435 --->
	  a role_name "generation" init_value " new Generation()" private
	    comment " The current generation 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 433435 // generation (<unidirectional association>)
	  b parent class_ref 262555 // Generation
      end

      attribute 366875 "count"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Number of parties still waiting. Counts down from parties to 0
on each generation.  It is reset to parties on each new
generation or when broken.
"
      end

      operation 1521819 "nextGeneration"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Updates state on barrier trip and wakes up everyone.
Called only while holding lock."
      end

      operation 1521947 "breakBarrier"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets current barrier generation as broken and wakes up everyone.
Called only while holding lock."
      end

      operation 1522075 "dowait"
	private explicit_return_type "int"
	nparams 2
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	nexceptions 3
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 255003 // BrokenBarrierException
	  exception class_ref 253723 // TimeoutException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main barrier code, covering the various policies."
      end

      operation 1522203 "CyclicBarrier"
	public explicit_return_type ""
	nparams 2
	  param in name "parties" explicit_type "int"
	  param inout name "barrierAction" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>CyclicBarrier</tt> that will trip when the
given number of parties (threads) are waiting upon it, and which
will execute the given barrier action when the barrier is tripped,
performed by the last thread entering the barrier.

@param parties the number of threads that must invoke {@link #await}
       before the barrier is tripped
@param barrierAction the command to execute when the barrier is
       tripped, or {@code null} if there is no action
@throws IllegalArgumentException if {@code parties} is less than 1"
      end

      operation 1522331 "CyclicBarrier"
	public explicit_return_type ""
	nparams 1
	  param in name "parties" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>CyclicBarrier</tt> that will trip when the
given number of parties (threads) are waiting upon it, and
does not perform a predefined action when the barrier is tripped.

@param parties the number of threads that must invoke {@link #await}
       before the barrier is tripped
@throws IllegalArgumentException if {@code parties} is less than 1"
      end

      operation 1522459 "getParties"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of parties required to trip this barrier.

@return the number of parties required to trip this barrier"
      end

      operation 1522587 "await"
	public explicit_return_type "int"
	nparams 0
	nexceptions 2
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 255003 // BrokenBarrierException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits until all {@linkplain #getParties parties} have invoked
<tt>await</tt> on this barrier.

<p>If the current thread is not the last to arrive then it is
disabled for thread scheduling purposes and lies dormant until
one of the following things happens:
<ul>
<li>The last thread arrives; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
one of the other waiting threads; or
<li>Some other thread times out while waiting for barrier; or
<li>Some other thread invokes {@link #reset} on this barrier.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the barrier is {@link #reset} while any thread is waiting,
or if the barrier {@linkplain #isBroken is broken} when
<tt>await</tt> is invoked, or while any thread is waiting, then
{@link BrokenBarrierException} is thrown.

<p>If any thread is {@linkplain Thread#interrupt interrupted} while waiting,
then all other waiting threads will throw
{@link BrokenBarrierException} and the barrier is placed in the broken
state.

<p>If the current thread is the last thread to arrive, and a
non-null barrier action was supplied in the constructor, then the
current thread runs the action before allowing the other threads to
continue.
If an exception occurs during the barrier action then that exception
will be propagated in the current thread and the barrier is placed in
the broken state.

@return the arrival index of the current thread, where index
        <tt>{@link #getParties()} - 1</tt> indicates the first
        to arrive and zero indicates the last to arrive
@throws InterruptedException if the current thread was interrupted
        while waiting
@throws BrokenBarrierException if <em>another</em> thread was
        interrupted or timed out while the current thread was
        waiting, or the barrier was reset, or the barrier was
        broken when {@code await} was called, or the barrier
        action (if present) failed due an exception."
      end

      operation 1522715 "await"
	public explicit_return_type "int"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 3
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 255003 // BrokenBarrierException
	  exception class_ref 253723 // TimeoutException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits until all {@linkplain #getParties parties} have invoked
<tt>await</tt> on this barrier, or the specified waiting time elapses.

<p>If the current thread is not the last to arrive then it is
disabled for thread scheduling purposes and lies dormant until
one of the following things happens:
<ul>
<li>The last thread arrives; or
<li>The specified timeout elapses; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
one of the other waiting threads; or
<li>Some other thread times out while waiting for barrier; or
<li>Some other thread invokes {@link #reset} on this barrier.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the specified waiting time elapses then {@link TimeoutException}
is thrown. If the time is less than or equal to zero, the
method will not wait at all.

<p>If the barrier is {@link #reset} while any thread is waiting,
or if the barrier {@linkplain #isBroken is broken} when
<tt>await</tt> is invoked, or while any thread is waiting, then
{@link BrokenBarrierException} is thrown.

<p>If any thread is {@linkplain Thread#interrupt interrupted} while
waiting, then all other waiting threads will throw {@link
BrokenBarrierException} and the barrier is placed in the broken
state.

<p>If the current thread is the last thread to arrive, and a
non-null barrier action was supplied in the constructor, then the
current thread runs the action before allowing the other threads to
continue.
If an exception occurs during the barrier action then that exception
will be propagated in the current thread and the barrier is placed in
the broken state.

@param timeout the time to wait for the barrier
@param unit the time unit of the timeout parameter
@return the arrival index of the current thread, where index
        <tt>{@link #getParties()} - 1</tt> indicates the first
        to arrive and zero indicates the last to arrive
@throws InterruptedException if the current thread was interrupted
        while waiting
@throws TimeoutException if the specified timeout elapses
@throws BrokenBarrierException if <em>another</em> thread was
        interrupted or timed out while the current thread was
        waiting, or the barrier was reset, or the barrier was broken
        when {@code await} was called, or the barrier action (if
        present) failed due an exception"
      end

      operation 1522843 "isBroken"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries if this barrier is in a broken state.

@return {@code true} if one or more parties broke out of this
        barrier due to interruption or timeout since
        construction or the last reset, or a barrier action
        failed due to an exception; {@code false} otherwise."
      end

      operation 1522971 "reset"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the barrier to its initial state.  If any parties are
currently waiting at the barrier, they will return with a
{@link BrokenBarrierException}. Note that resets <em>after</em>
a breakage has occurred for other reasons can be complicated to
carry out; threads need to re-synchronize in some other way,
and choose one to perform the reset.  It may be preferable to
instead create a new barrier for subsequent use."
      end

      operation 1523099 "getNumberWaiting"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of parties currently waiting at the barrier.
This method is primarily useful for debugging and assertions.

@return the number of parties currently blocked in {@link #await}"
      end
    end

    class 262683 "Delayed"
      visibility public stereotype "interface"
      nactuals 1
      actual class class_ref 139675 // Comparable
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A mix-in style interface for marking objects that should be
acted upon after a given delay.

<p>An implementation of this interface must define a
<tt>compareTo</tt> method that provides an ordering consistent with
its <tt>getDelay</tt> method.

@since 1.5
@author Doug Lea"
      classrelation 433563 // <realization>
	relation 433563 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 433563 // <realization>
	  b parent class_ref 139675 // Comparable
      end

      operation 1523227 "getDelay"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the remaining delay associated with this object, in the
given time unit.

@param unit the time unit
@return the remaining delay; zero or negative values indicate
that the delay has already elapsed"
      end
    end

    class 262811 "DelayQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 232859 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 254107 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

An unbounded {@linkplain BlockingQueue blocking queue} of
<tt>Delayed</tt> elements, in which an element can only be taken
when its delay has expired.  The <em>head</em> of the queue is that
<tt>Delayed</tt> element whose delay expired furthest in the
past.  If no delay has expired there is no head and <tt>poll</tt>
will return <tt>null</tt>. Expiration occurs when an element's
<tt>getDelay(TimeUnit.NANOSECONDS)</tt> method returns a value less
than or equal to zero.  Even though unexpired elements cannot be
removed using <tt>take</tt> or <tt>poll</tt>, they are otherwise
treated as normal elements. For example, the <tt>size</tt> method
returns the count of both expired and unexpired elements.
This queue does not permit null elements.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.  The Iterator provided in method {@link
#iterator()} is <em>not</em> guaranteed to traverse the elements of
the DelayQueue in any particular order.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 433691 // <realization>
	relation 433691 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 433691 // <realization>
	  b parent class_ref 232859 // AbstractQueue
      end

      classrelation 433819 // <realization>
	relation 433819 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 433819 // <realization>
	  b parent class_ref 254107 // BlockingQueue
      end

      classrelation 433947 // lock (<unidirectional association>)
	relation 433947 --->
	  a role_name "lock" init_value " new ReentrantLock()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 433947 // lock (<unidirectional association>)
	  b parent class_ref 254235 // ReentrantLock
      end

      classrelation 434075 // q (<unidirectional association>)
	relation 434075 --->
	  a role_name "q" init_value " new PriorityQueue<E>()" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 434075 // q (<unidirectional association>)
	  b parent class_ref 247835 // PriorityQueue
      end

      classrelation 434203 // leader (<unidirectional association>)
	relation 434203 --->
	  a role_name "leader" init_value " null" private
	    comment "
Thread designated to wait for the element at the head of
the queue.  This variant of the Leader-Follower pattern
(http://www.cs.wustl.edu/~schmidt/POSA/POSA2/) serves to
minimize unnecessary timed waiting.  When a thread becomes
the leader, it waits only for the next delay to elapse, but
other threads await indefinitely.  The leader thread must
signal some other thread before returning from take() or
poll(...), unless some other thread becomes leader in the
interim.  Whenever the head of the queue is replaced with
an element with an earlier expiration time, the leader
field is invalidated by being reset to null, and some
waiting thread, but not necessarily the current leader, is
signalled.  So waiting threads must be prepared to acquire
and lose leadership while waiting.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 434203 // leader (<unidirectional association>)
	  b parent class_ref 1201420 // Thread
      end

      classrelation 434331 // available (<unidirectional association>)
	relation 434331 --->
	  a role_name "available" init_value " lock.newCondition()" const_relation private
	    comment "
Condition signalled when a newer element becomes available
at the head of the queue or a new thread may need to
become leader.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 434331 // available (<unidirectional association>)
	  b parent class_ref 254363 // Condition
      end

      operation 1523355 "DelayQueue"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new <tt>DelayQueue</tt> that is initially empty."
      end

      operation 1523483 "DelayQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>DelayQueue</tt> initially containing the elements of the
given collection of {@link Delayed} instances.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null"
      end

      operation 1523611 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this delay queue.

@param e the element to add
@return <tt>true</tt> (as specified by {@link Collection#add})
@throws NullPointerException if the specified element is null"
      end

      operation 1523739 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this delay queue.

@param e the element to add
@return <tt>true</tt>
@throws NullPointerException if the specified element is null"
      end

      operation 1523867 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this delay queue. As the queue is
unbounded this method will never block.

@param e the element to add
@throws NullPointerException {@inheritDoc}"
      end

      operation 1523995 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this delay queue. As the queue is
unbounded this method will never block.

@param e the element to add
@param timeout This parameter is ignored as the method never blocks
@param unit This parameter is ignored as the method never blocks
@return <tt>true</tt>
@throws NullPointerException {@inheritDoc}"
      end

      operation 1524123 "poll"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, or returns <tt>null</tt>
if this queue has no elements with an expired delay.

@return the head of this queue, or <tt>null</tt> if this
        queue has no elements with an expired delay"
      end

      operation 1524251 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting if necessary
until an element with an expired delay is available on this queue.

@return the head of this queue
@throws InterruptedException {@inheritDoc}"
      end

      operation 1524379 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting if necessary
until an element with an expired delay is available on this queue,
or the specified wait time expires.

@return the head of this queue, or <tt>null</tt> if the
        specified waiting time elapses before an element with
        an expired delay becomes available
@throws InterruptedException {@inheritDoc}"
      end

      operation 1524507 "peek"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of this queue, or
returns <tt>null</tt> if this queue is empty.  Unlike
<tt>poll</tt>, if no expired elements are available in the queue,
this method returns the element that will expire next,
if one exists.

@return the head of this queue, or <tt>null</tt> if this
        queue is empty."
      end

      operation 1524635 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1524763 "peekExpired"
	private explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Return first element only if it is expired.
Used only by drainTo.  Call only when holding lock."
      end

      operation 1524891 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      operation 1525019 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 160667 // Collection
	  param in name "maxElements" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      operation 1525147 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this delay queue.
The queue will be empty after this call returns.
Elements with an unexpired delay are not waited for; they are
simply discarded from the queue."
      end

      operation 1525275 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>Integer.MAX_VALUE</tt> because
a <tt>DelayQueue</tt> is not capacity constrained.

@return <tt>Integer.MAX_VALUE</tt>"
      end

      operation 1525403 "toArray"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue.
The returned array elements are in no particular order.

<p>The returned array will be \"safe\" in that no references to it are
maintained by this queue.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this queue"
      end

      operation 1525531 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue; the
runtime type of the returned array is that of the specified array.
The returned array elements are in no particular order.
If the queue fits in the specified array, it is returned therein.
Otherwise, a new array is allocated with the runtime type of the
specified array and the size of this queue.

<p>If this queue fits in the specified array with room to spare
(i.e., the array has more elements than this queue), the element in
the array immediately following the end of the queue is set to
<tt>null</tt>.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>The following code can be used to dump a delay queue into a newly
allocated array of <tt>Delayed</tt>:

<pre> {@code Delayed[] a = q.toArray(new Delayed[0]);}</pre>

Note that <tt>toArray(new Object[0])</tt> is identical in function to
<tt>toArray()</tt>.

@param a the array into which the elements of the queue are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this queue
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this queue
@throws NullPointerException if the specified array is null"
      end

      operation 1525659 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this
queue, if it is present, whether or not it has expired."
      end

      operation 1525787 "removeEQ"
	package explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Identity-based version for use in Itr.remove"
      end

      operation 1525915 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over all the elements (both expired and
unexpired) in this queue. The iterator does not return the
elements in any particular order.

<p>The returned iterator is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException
ConcurrentModificationException}, and guarantees to traverse
elements as they existed upon construction of the iterator, and
may (but is not guaranteed to) reflect any modifications
subsequent to construction.

@return an iterator over the elements in this queue"
      end

      class 262939 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 434459 // <realization>
	  relation 434459 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 434459 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 434587 // array (<unidirectional association>)
	  relation 434587 --->
	    a role_name "array" multiplicity "[]" const_relation package
	      comment " Array of all elements"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 434587 // array (<unidirectional association>)
	    b parent class_ref 3401484 // Object
	end

	attribute 367003 "cursor"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " index of next element to return"
	end

	attribute 367131 "lastRet"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " index of last element, or -1 if no such"
	end

	operation 1526043 "Itr"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "array" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1526171 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1526299 "next"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 1526427 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end
    end

    class 263067 "Exchanger"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A synchronization point at which threads can pair and swap elements
within pairs.  Each thread presents some object on entry to the
{@link #exchange exchange} method, matches with a partner thread,
and receives its partner's object on return.  An Exchanger may be
viewed as a bidirectional form of a {@link SynchronousQueue}.
Exchangers may be useful in applications such as genetic algorithms
and pipeline designs.

<p><b>Sample Usage:</b>
Here are the highlights of a class that uses an {@code Exchanger}
to swap buffers between threads so that the thread filling the
buffer gets a freshly emptied one when it needs it, handing off the
filled one to the thread emptying the buffer.
 <pre> {@code
class FillAndEmpty {
  Exchanger<DataBuffer> exchanger = new Exchanger<DataBuffer>();
  DataBuffer initialEmptyBuffer = ... a made-up type
  DataBuffer initialFullBuffer = ...

  class FillingLoop implements Runnable {
    public void run() {
      DataBuffer currentBuffer = initialEmptyBuffer;
      try {
        while (currentBuffer != null) {
          addToBuffer(currentBuffer);
          if (currentBuffer.isFull())
            currentBuffer = exchanger.exchange(currentBuffer);
        }
      } catch (InterruptedException ex) { ... handle ... }
    }
  }

  class EmptyingLoop implements Runnable {
    public void run() {
      DataBuffer currentBuffer = initialFullBuffer;
      try {
        while (currentBuffer != null) {
          takeFromBuffer(currentBuffer);
          if (currentBuffer.isEmpty())
            currentBuffer = exchanger.exchange(currentBuffer);
        }
      } catch (InterruptedException ex) { ... handle ...}
    }
  }

  void start() {
    new Thread(new FillingLoop()).start();
    new Thread(new EmptyingLoop()).start();
  }
}}</pre>

<p>Memory consistency effects: For each pair of threads that
successfully exchange objects via an {@code Exchanger}, actions
prior to the {@code exchange()} in each thread
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
those subsequent to a return from the corresponding {@code exchange()}
in the other thread.

@since 1.5
@author Doug Lea and Bill Scherer and Michael Scott
@param <V> The type of objects that may be exchanged"
      attribute 367259 "NCPU"
	class_attribute const_attribute private explicit_type "int"
	init_value " Runtime.getRuntime().availableProcessors()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Algorithm Description:

The basic idea is to maintain a \"slot\", which is a reference to
a Node containing both an Item to offer and a \"hole\" waiting to
get filled in.  If an incoming \"occupying\" thread sees that the
slot is null, it CAS'es (compareAndSets) a Node there and waits
for another to invoke exchange.  That second \"fulfilling\" thread
sees that the slot is non-null, and so CASes it back to null,
also exchanging items by CASing the hole, plus waking up the
occupying thread if it is blocked.  In each case CAS'es may
fail because a slot at first appears non-null but is null upon
CAS, or vice-versa.  So threads may need to retry these
actions.

This simple approach works great when there are only a few
threads using an Exchanger, but performance rapidly
deteriorates due to CAS contention on the single slot when
there are lots of threads using an exchanger.  So instead we use
an \"arena\"; basically a kind of hash table with a dynamically
varying number of slots, any one of which can be used by
threads performing an exchange.  Incoming threads pick slots
based on a hash of their Thread ids.  If an incoming thread
fails to CAS in its chosen slot, it picks an alternative slot
instead.  And similarly from there.  If a thread successfully
CASes into a slot but no other thread arrives, it tries
another, heading toward the zero slot, which always exists even
if the table shrinks.  The particular mechanics controlling this
are as follows:

Waiting: Slot zero is special in that it is the only slot that
exists when there is no contention.  A thread occupying slot
zero will block if no thread fulfills it after a short spin.
In other cases, occupying threads eventually give up and try
another slot.  Waiting threads spin for a while (a period that
should be a little less than a typical context-switch time)
before either blocking (if slot zero) or giving up (if other
slots) and restarting.  There is no reason for threads to block
unless there are unlikely to be any other threads present.
Occupants are mainly avoiding memory contention so sit there
quietly polling for a shorter period than it would take to
block and then unblock them.  Non-slot-zero waits that elapse
because of lack of other threads waste around one extra
context-switch time per try, which is still on average much
faster than alternative approaches.

Sizing: Usually, using only a few slots suffices to reduce
contention.  Especially with small numbers of threads, using
too many slots can lead to just as poor performance as using
too few of them, and there's not much room for error.  The
variable \"max\" maintains the number of slots actually in
use.  It is increased when a thread sees too many CAS
failures.  (This is analogous to resizing a regular hash table
based on a target load factor, except here, growth steps are
just one-by-one rather than proportional.)  Growth requires
contention failures in each of three tried slots.  Requiring
multiple failures for expansion copes with the fact that some
failed CASes are not due to contention but instead to simple
races between two threads or thread pre-emptions occurring
between reading and CASing.  Also, very transient peak
contention can be much higher than the average sustainable
levels.  An attempt to decrease the max limit is usually made
when a non-slot-zero wait elapses without being fulfilled.
Threads experiencing elapsed waits move closer to zero, so
eventually find existing (or future) threads even if the table
has been shrunk due to inactivity.  The chosen mechanics and
thresholds for growing and shrinking are intrinsically
entangled with indexing and hashing inside the exchange code,
and can't be nicely abstracted out.

Hashing: Each thread picks its initial slot to use in accord
with a simple hashcode.  The sequence is the same on each
encounter by any given thread, but effectively random across
threads.  Using arenas encounters the classic cost vs quality
tradeoffs of all hash tables.  Here, we use a one-step FNV-1a
hash code based on the current thread's Thread.getId(), along
with a cheap approximation to a mod operation to select an
index.  The downside of optimizing index selection in this way
is that the code is hardwired to use a maximum table size of
32.  But this value more than suffices for known platforms and
applications.

Probing: On sensed contention of a selected slot, we probe
sequentially through the table, analogously to linear probing
after collision in a hash table.  (We move circularly, in
reverse order, to mesh best with table growth and shrinkage
rules.)  Except that to minimize the effects of false-alarms
and cache thrashing, we try the first selected slot twice
before moving.

Padding: Even with contention management, slots are heavily
contended, so use cache-padding to avoid poor memory
performance.  Because of this, slots are lazily constructed
only when used, to avoid wasting this space unnecessarily.
While isolation of locations is not much of an issue at first
in an application, as time goes on and garbage-collectors
perform compaction, slots are very likely to be moved adjacent
to each other, which can cause much thrashing of cache lines on
MPs unless padding is employed.

This is an improvement of the algorithm described in the paper
\"A Scalable Elimination-based Exchange Channel\" by William
Scherer, Doug Lea, and Michael Scott in Proceedings of SCOOL05
workshop.  Available at: http://hdl.handle.net/1802/2104

 The number of CPUs, for sizing and spin control "
      end

      attribute 367387 "CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 32"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The capacity of the arena.  Set to a value that provides more
than enough space to handle contention.  On small machines
most slots won't be used, but it is still not wasted because
the extra space provides some machine-level address padding
to minimize interference with heavily CAS'ed Slot locations.
And on very large machines, performance eventually becomes
bounded by memory bandwidth, not numbers of threads/CPUs.
This constant cannot be changed without also modifying
indexing and hashing algorithms.
"
      end

      attribute 367515 "FULL"
	class_attribute const_attribute private explicit_type "int"
	init_value "
        Math.max(0, Math.min(CAPACITY, NCPU / 2) - 1)"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The value of \"max\" that will hold all threads without
contention.  When this value is less than CAPACITY, some
otherwise wasted expansion can be avoided.
"
      end

      attribute 367643 "SPINS"
	class_attribute const_attribute private explicit_type "int"
	init_value " (NCPU == 1) ? 0 : 2000"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times to spin (doing nothing except polling a
memory location) before blocking or giving up while waiting to
be fulfilled.  Should be zero on uniprocessors.  On
multiprocessors, this value should be large enough so that two
threads exchanging items as fast as possible block only when
one of them is stalled (due to GC or preemption), but not much
longer, to avoid wasting CPU resources.  Seen differently, this
value is a little over half the number of cycles of an average
context switch time on most systems.  The value here is
approximately the average of those across a range of tested
systems.
"
      end

      attribute 367771 "TIMED_SPINS"
	class_attribute const_attribute private explicit_type "int"
	init_value " SPINS / 20"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times to spin before blocking in timed waits.
Timed waits spin more slowly because checking the time takes
time.  The best value relies mainly on the relative rate of
System.nanoTime vs memory accesses.  The value is empirically
derived to work well across a variety of systems.
"
      end

      classrelation 434715 // CANCEL (<unidirectional association>)
	relation 434715 --->
	  a role_name "CANCEL" init_value " new Object()" class_relation const_relation private
	    comment "
Sentinel item representing cancellation of a wait due to
interruption, timeout, or elapsed spin-waits.  This value is
placed in holes on cancellation, and used as a return value
from waiting methods to indicate failure to set or get hole.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 434715 // CANCEL (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      classrelation 434843 // NULL_ITEM (<unidirectional association>)
	relation 434843 --->
	  a role_name "NULL_ITEM" init_value " new Object()" class_relation const_relation private
	    comment "
Value representing null arguments/returns from public
methods.  This disambiguates from internal requirement that
holes start out as null to mean they are not yet set.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 434843 // NULL_ITEM (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      class 263195 "Node"
	visibility private 
	nactuals 1
	actual class class_ref 263323 // AtomicReference
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 435227 // <realization>
	  relation 435227 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 435227 // <realization>
	    b parent class_ref 263323 // AtomicReference
	end

	classrelation 435355 // item (<unidirectional association>)
	  relation 435355 --->
	    a role_name "item" const_relation public
	      comment " The element offered by the Thread creating this node. 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 435355 // item (<unidirectional association>)
	    b parent class_ref 3401484 // Object
	end

	classrelation 435483 // waiter (<unidirectional association>)
	  relation 435483 --->
	    a role_name "waiter" volatile public
	      comment " The Thread waiting to be signalled; null until waiting. 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 435483 // waiter (<unidirectional association>)
	    b parent class_ref 1201420 // Thread
	end

	operation 1527707 "Node"
	  public explicit_return_type ""
	  nparams 1
	    param inout name "item" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates node with given item and empty hole.
@param item the item"
	end
      end

      class 263451 "Slot"
	visibility private 
	nactuals 1
	actual class class_ref 263323 // AtomicReference
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 435611 // <realization>
	  relation 435611 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 435611 // <realization>
	    b parent class_ref 263323 // AtomicReference
	end

	attribute 368283 "q0"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 368411 "q1"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 368539 "q2"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 368667 "q3"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 368795 "q4"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 368923 "q5"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 369051 "q6"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 369179 "q7"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 369307 "q8"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 369435 "q9"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 369563 "qa"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 369691 "qb"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 369819 "qc"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 369947 "qd"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end

	attribute 370075 "qe"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Improve likelihood of isolation on <= 128 byte cache lines.
 We used to target 64 byte cache lines, but some x86s (including
 i7 under some BIOSes) actually use 128 byte cache lines."
	end
      end

      classrelation 435739 // arena (<unidirectional association>)
	relation 435739 --->
	  a role_name "arena" multiplicity "[]" init_value " new Slot[CAPACITY]" volatile private
	    comment "
Slot array.  Elements are lazily initialized when needed.
Declared volatile to enable double-checked lazy construction.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 435739 // arena (<unidirectional association>)
	  b parent class_ref 263451 // Slot
      end

      classrelation 435867 // max (<unidirectional association>)
	relation 435867 --->
	  a role_name "max" init_value " new AtomicInteger()" const_relation private
	    comment "
The maximum slot index being used.  The value sometimes
increases when a thread experiences too many CAS contentions,
and sometimes decreases when a spin-wait elapses.  Changes
are performed only via compareAndSet, to avoid stale values
when a thread happens to stall right before setting.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 435867 // max (<unidirectional association>)
	  b parent class_ref 154779 // AtomicInteger
      end

      operation 1527835 "doExchange"
	private return_type class_ref 3401484 // Object
	nparams 3
	  param inout name "item" type class_ref 3401484 // Object
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main exchange function, handling the different policy variants.
Uses Object, not \"V\" as argument and return value to simplify
handling of sentinel values.  Callers from public methods decode
and cast accordingly.

@param item the (non-null) item to exchange
@param timed true if the wait is timed
@param nanos if timed, the maximum wait time
@return the other thread's item, or CANCEL if interrupted or timed out"
      end

      operation 1527963 "hashIndex"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a hash index for the current thread.  Uses a one-step
FNV-1a hash code (http://www.isthe.com/chongo/tech/comp/fnv/)
based on the current thread's Thread.getId().  These hash codes
have more uniform distribution properties with respect to small
moduli (here 1-31) than do other simple hashing functions.

<p>To return an index between 0 and max, we use a cheap
approximation to a mod operation, that also corrects for bias
due to non-power-of-2 remaindering (see {@link
java.util.Random#nextInt}).  Bits of the hashcode are masked
with \"nbits\", the ceiling power of two of table size (looked up
in a table packed into three ints).  If too large, this is
retried after rotating the hash by nbits bits, while forcing new
top bit to 0, which guarantees eventual termination (although
with a non-random-bias).  This requires an average of less than
2 tries for all table sizes, and has a maximum 2% difference
from perfectly uniform slot probabilities when applied to all
possible hash codes for sizes less than 32.

@return a per-thread-random index, 0 <= index < max"
      end

      operation 1528091 "createSlot"
	private explicit_return_type "void"
	nparams 1
	  param in name "index" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new slot at given index.  Called only when the slot
appears to be null.  Relies on double-check using builtin
locks, since they rarely contend.  This in turn relies on the
arena array being declared volatile.

@param index the index to add slot at"
      end

      operation 1528219 "tryCancel"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param inout name "node" type class_ref 263195 // Node
	  param inout name "slot" type class_ref 263451 // Slot
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to cancel a wait for the given node waiting in the given
slot, if so, helping clear the node from its slot to avoid
garbage retention.

@param node the waiting node
@param slot the slot it is waiting in
@return true if successfully cancelled"
      end

      operation 1528347 "spinWait"
	class_operation private return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "node" type class_ref 263195 // Node
	  param inout name "slot" type class_ref 263451 // Slot
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Three forms of waiting. Each just different enough not to merge
 code with others.

Spin-waits for hole for a non-0 slot.  Fails if spin elapses
before hole filled.  Does not check interrupt, relying on check
in public exchange method to abort if interrupted on entry.

@param node the waiting node
@return on success, the hole; on failure, CANCEL"
      end

      operation 1528475 "await"
	class_operation private return_type class_ref 3401484 // Object
	nparams 2
	  param inout name "node" type class_ref 263195 // Node
	  param inout name "slot" type class_ref 263451 // Slot
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits for (by spinning and/or blocking) and gets the hole
filled in by another thread.  Fails if interrupted before
hole filled.

When a node/thread is about to block, it sets its waiter field
and then rechecks state at least one more time before actually
parking, thus covering race vs fulfiller noticing that waiter
is non-null so should be woken.

Thread interruption status is checked only surrounding calls to
park.  The caller is assumed to have checked interrupt status
on entry.

@param node the waiting node
@return on success, the hole; on failure, CANCEL"
      end

      operation 1528603 "awaitNanos"
	private return_type class_ref 3401484 // Object
	nparams 3
	  param inout name "node" type class_ref 263195 // Node
	  param inout name "slot" type class_ref 263451 // Slot
	  param in name "nanos" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits for (at index 0) and gets the hole filled in by another
thread.  Fails if timed out or interrupted before hole filled.
Same basic logic as untimed version, but a bit messier.

@param node the waiting node
@param nanos the wait time
@return on success, the hole; on failure, CANCEL"
      end

      operation 1528731 "scanOnTimeout"
	private return_type class_ref 3401484 // Object
	nparams 1
	  param inout name "node" type class_ref 263195 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sweeps through arena checking for any waiting threads.  Called
only upon return from timeout while waiting in slot 0.  When a
thread gives up on a timed wait, it is possible that a
previously-entered thread is still waiting in some other
slot.  So we scan to check for any.  This is almost always
overkill, but decreases the likelihood of timeouts when there
are other threads present to far less than that in lock-based
exchangers in which earlier-arriving threads may still be
waiting on entry locks.

@param node the waiting node
@return another thread's item, or CANCEL"
      end

      operation 1528859 "Exchanger"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new Exchanger."
      end

      operation 1528987 "exchange"
	public explicit_return_type "V"
	nparams 1
	  param inout name "x" explicit_type "V"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits for another thread to arrive at this exchange point (unless
the current thread is {@linkplain Thread#interrupt interrupted}),
and then transfers the given object to it, receiving its object
in return.

<p>If another thread is already waiting at the exchange point then
it is resumed for thread scheduling purposes and receives the object
passed in by the current thread.  The current thread returns immediately,
receiving the object passed to the exchange by that other thread.

<p>If no other thread is already waiting at the exchange then the
current thread is disabled for thread scheduling purposes and lies
dormant until one of two things happens:
<ul>
<li>Some other thread enters the exchange; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread.
</ul>
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
for the exchange,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

@param x the object to exchange
@return the object provided by the other thread
@throws InterruptedException if the current thread was
        interrupted while waiting"
      end

      operation 1529115 "exchange"
	public explicit_return_type "V"
	nparams 3
	  param inout name "x" explicit_type "V"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 2
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253723 // TimeoutException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits for another thread to arrive at this exchange point (unless
the current thread is {@linkplain Thread#interrupt interrupted} or
the specified waiting time elapses), and then transfers the given
object to it, receiving its object in return.

<p>If another thread is already waiting at the exchange point then
it is resumed for thread scheduling purposes and receives the object
passed in by the current thread.  The current thread returns immediately,
receiving the object passed to the exchange by that other thread.

<p>If no other thread is already waiting at the exchange then the
current thread is disabled for thread scheduling purposes and lies
dormant until one of three things happens:
<ul>
<li>Some other thread enters the exchange; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>The specified waiting time elapses.
</ul>
<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
for the exchange,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the specified waiting time elapses then {@link
TimeoutException} is thrown.  If the time is less than or equal
to zero, the method will not wait at all.

@param x the object to exchange
@param timeout the maximum time to wait
@param unit the time unit of the <tt>timeout</tt> argument
@return the object provided by the other thread
@throws InterruptedException if the current thread was
        interrupted while waiting
@throws TimeoutException if the specified waiting time elapses
        before another thread enters the exchange"
      end
    end

    class 263579 "ExecutorCompletionService"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 255259 // CompletionService
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@link CompletionService} that uses a supplied {@link Executor}
to execute tasks.  This class arranges that submitted tasks are,
upon completion, placed on a queue accessible using {@code take}.
The class is lightweight enough to be suitable for transient use
when processing groups of tasks.

<p>

<b>Usage Examples.</b>

Suppose you have a set of solvers for a certain problem, each
returning a value of some type {@code Result}, and would like to
run them concurrently, processing the results of each of them that
return a non-null value, in some method {@code use(Result r)}. You
could write this as:

<pre> {@code
void solve(Executor e,
           Collection<Callable<Result>> solvers)
    throws InterruptedException, ExecutionException {
    CompletionService<Result> ecs
        = new ExecutorCompletionService<Result>(e);
    for (Callable<Result> s : solvers)
        ecs.submit(s);
    int n = solvers.size();
    for (int i = 0; i < n; ++i) {
        Result r = ecs.take().get();
        if (r != null)
            use(r);
    }
}}</pre>

Suppose instead that you would like to use the first non-null result
of the set of tasks, ignoring any that encounter exceptions,
and cancelling all other tasks when the first one is ready:

<pre> {@code
void solve(Executor e,
           Collection<Callable<Result>> solvers)
    throws InterruptedException {
    CompletionService<Result> ecs
        = new ExecutorCompletionService<Result>(e);
    int n = solvers.size();
    List<Future<Result>> futures
        = new ArrayList<Future<Result>>(n);
    Result result = null;
    try {
        for (Callable<Result> s : solvers)
            futures.add(ecs.submit(s));
        for (int i = 0; i < n; ++i) {
            try {
                Result r = ecs.take().get();
                if (r != null) {
                    result = r;
                    break;
                }
            } catch (ExecutionException ignore) {}
        }
    }
    finally {
        for (Future<Result> f : futures)
            f.cancel(true);
    }

    if (result != null)
        use(result);
}}</pre>"
      classrelation 436123 // <realization>
	relation 436123 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 436123 // <realization>
	  b parent class_ref 255259 // CompletionService
      end

      classrelation 436251 // executor (<unidirectional association>)
	relation 436251 --->
	  a role_name "executor" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 436251 // executor (<unidirectional association>)
	  b parent class_ref 253083 // Executor
      end

      classrelation 436379 // aes (<unidirectional association>)
	relation 436379 --->
	  a role_name "aes" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 436379 // aes (<unidirectional association>)
	  b parent class_ref 252827 // AbstractExecutorService
      end

      classrelation 436507 // completionQueue (<unidirectional association>)
	relation 436507 --->
	  a role_name "completionQueue" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Future<V>> ${name}${value};
"
	    classrelation_ref 436507 // completionQueue (<unidirectional association>)
	  b parent class_ref 254107 // BlockingQueue
      end

      class 263707 "QueueingFuture"
	visibility private 
	nactuals 1
	actual class class_ref 263835 // FutureTask
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 437915 // <realization>
	  relation 437915 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 437915 // <realization>
	    b parent class_ref 263835 // FutureTask
	end

	operation 1532827 "QueueingFuture"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "task" type class_ref 253851 // RunnableFuture
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1532955 "done"
	  protected explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	classrelation 438043 // task (<unidirectional association>)
	  relation 438043 --->
	    a role_name "task" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 438043 // task (<unidirectional association>)
	    b parent class_ref 253339 // Future
	end
      end

      operation 1533083 "newTaskFor"
	private return_type class_ref 253851 // RunnableFuture
	nparams 1
	  param inout name "task" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1533211 "newTaskFor"
	private return_type class_ref 253851 // RunnableFuture
	nparams 2
	  param inout name "task" type class_ref 151963 // Runnable
	  param inout name "result" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1533339 "ExecutorCompletionService"
	public explicit_return_type ""
	nparams 1
	  param inout name "executor" type class_ref 253083 // Executor
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ExecutorCompletionService using the supplied
executor for base task execution and a
{@link LinkedBlockingQueue} as a completion queue.

@param executor the executor to use
@throws NullPointerException if executor is {@code null}"
      end

      operation 1533467 "ExecutorCompletionService"
	public explicit_return_type ""
	nparams 2
	  param inout name "executor" type class_ref 253083 // Executor
	  param inout name "completionQueue" type class_ref 254107 // BlockingQueue
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<Future<V>> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an ExecutorCompletionService using the supplied
executor for base task execution and the supplied queue as its
completion queue.

@param executor the executor to use
@param completionQueue the queue to use as the completion queue
       normally one dedicated for use by this service. This
       queue is treated as unbounded -- failed attempted
       {@code Queue.add} operations for completed taskes cause
       them not to be retrievable.
@throws NullPointerException if executor or completionQueue are {@code null}"
      end

      operation 1533595 "submit"
	public return_type class_ref 253339 // Future
	nparams 1
	  param inout name "task" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1533723 "submit"
	public return_type class_ref 253339 // Future
	nparams 2
	  param inout name "task" type class_ref 151963 // Runnable
	  param inout name "result" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1533851 "take"
	public return_type class_ref 253339 // Future
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1533979 "poll"
	public return_type class_ref 253339 // Future
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1534107 "poll"
	public return_type class_ref 253339 // Future
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 263835 "FutureTask"
      visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 253851 // RunnableFuture
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A cancellable asynchronous computation.  This class provides a base
implementation of {@link Future}, with methods to start and cancel
a computation, query to see if the computation is complete, and
retrieve the result of the computation.  The result can only be
retrieved when the computation has completed; the {@code get}
methods will block if the computation has not yet completed.  Once
the computation has completed, the computation cannot be restarted
or cancelled (unless the computation is invoked using
{@link #runAndReset}).

<p>A {@code FutureTask} can be used to wrap a {@link Callable} or
{@link Runnable} object.  Because {@code FutureTask} implements
{@code Runnable}, a {@code FutureTask} can be submitted to an
{@link Executor} for execution.

<p>In addition to serving as a standalone class, this class provides
{@code protected} functionality that may be useful when creating
customized task classes.

@since 1.5
@author Doug Lea
@param <V> The result type returned by this FutureTask's {@code get} methods"
      classrelation 436891 // <realization>
	relation 436891 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 436891 // <realization>
	  b parent class_ref 253851 // RunnableFuture
      end

      attribute 370331 "state"
	volatile private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Revision notes: This differs from previous versions of this
class that relied on AbstractQueuedSynchronizer, mainly to
avoid surprising users about retaining interrupt status during
cancellation races. Sync control in the current design relies
on a \"state\" field updated via CAS to track completion, along
with a simple Treiber stack to hold waiting threads.

Style note: As usual, we bypass overhead of using
AtomicXFieldUpdaters and instead directly use Unsafe intrinsics.


The run state of this task, initially NEW.  The run state
transitions to a terminal state only in methods set,
setException, and cancel.  During completion, state may take on
transient values of COMPLETING (while outcome is being set) or
INTERRUPTING (only while interrupting the runner to satisfy a
cancel(true)). Transitions from these intermediate to final
states use cheaper ordered/lazy writes because values are unique
and cannot be further modified.

Possible state transitions:
NEW -> COMPLETING -> NORMAL
NEW -> COMPLETING -> EXCEPTIONAL
NEW -> CANCELLED
NEW -> INTERRUPTING -> INTERRUPTED
"
      end

      attribute 370459 "NEW"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 370587 "COMPLETING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 370715 "NORMAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 370843 "EXCEPTIONAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 370971 "CANCELLED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 4"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 371099 "INTERRUPTING"
	class_attribute const_attribute private explicit_type "int"
	init_value " 5"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 371227 "INTERRUPTED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 6"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 437019 // callable (<unidirectional association>)
	relation 437019 --->
	  a role_name "callable" private
	    comment " The underlying callable; nulled out after running 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	    classrelation_ref 437019 // callable (<unidirectional association>)
	  b parent class_ref 253467 // Callable
      end

      classrelation 437147 // outcome (<unidirectional association>)
	relation 437147 --->
	  a role_name "outcome" private
	    comment " The result to return or exception to throw from get() 
 non-volatile, protected by state reads/writes"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 437147 // outcome (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      classrelation 437275 // runner (<unidirectional association>)
	relation 437275 --->
	  a role_name "runner" volatile private
	    comment " The thread running the callable; CASed during run() 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 437275 // runner (<unidirectional association>)
	  b parent class_ref 1201420 // Thread
      end

      class 263963 "WaitNode"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 437531 // thread (<unidirectional association>)
	  relation 437531 --->
	    a role_name "thread" volatile package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 437531 // thread (<unidirectional association>)
	    b parent class_ref 1201420 // Thread
	end

	classrelation 437659 // next (<unidirectional association>)
	  relation 437659 --->
	    a role_name "next" volatile package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 437659 // next (<unidirectional association>)
	    b parent class_ref 263963 // WaitNode
	end

	operation 1532315 "WaitNode"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 437403 // waiters (<unidirectional association>)
	relation 437403 --->
	  a role_name "waiters" volatile private
	    comment " Treiber stack of waiting threads 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 437403 // waiters (<unidirectional association>)
	  b parent class_ref 263963 // WaitNode
      end

      operation 1530523 "report"
	private explicit_return_type "V"
	nparams 1
	  param in name "s" explicit_type "int"
	nexceptions 1
	  exception class_ref 253595 // ExecutionException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns result or throws exception for completed task.

@param s completed state value"
      end

      operation 1530651 "FutureTask"
	public explicit_return_type ""
	nparams 1
	  param inout name "callable" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<V> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code FutureTask} that will, upon running, execute the
given {@code Callable}.

@param  callable the callable task
@throws NullPointerException if the callable is null"
      end

      operation 1530779 "FutureTask"
	public explicit_return_type ""
	nparams 2
	  param inout name "runnable" type class_ref 151963 // Runnable
	  param inout name "result" explicit_type "V"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code FutureTask} that will, upon running, execute the
given {@code Runnable}, and arrange that {@code get} will return the
given result on successful completion.

@param runnable the runnable task
@param result the result to return on successful completion. If
you don't need a particular result, consider using
constructions of the form:
{@code Future<?> f = new FutureTask<Void>(runnable, null)}
@throws NullPointerException if the runnable is null"
      end

      operation 1530907 "isCancelled"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1531035 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1531163 "cancel"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "mayInterruptIfRunning" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1531291 "get"
	public explicit_return_type "V"
	nparams 0
	nexceptions 2
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253595 // ExecutionException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws CancellationException {@inheritDoc}"
      end

      operation 1531419 "get"
	public explicit_return_type "V"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 3
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253595 // ExecutionException
	  exception class_ref 253723 // TimeoutException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws CancellationException {@inheritDoc}"
      end

      operation 1531547 "done"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Protected method invoked when this task transitions to state
{@code isDone} (whether normally or via cancellation). The
default implementation does nothing.  Subclasses may override
this method to invoke completion callbacks or perform
bookkeeping. Note that you can query status inside the
implementation of this method to determine whether this task
has been cancelled."
      end

      operation 1531675 "set"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "v" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the result of this future to the given value unless
this future has already been set or has been cancelled.

<p>This method is invoked internally by the {@link #run} method
upon successful completion of the computation.

@param v the value"
      end

      operation 1531803 "setException"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Causes this future to report an {@link ExecutionException}
with the given throwable as its cause, unless this future has
already been set or has been cancelled.

<p>This method is invoked internally by the {@link #run} method
upon failure of the computation.

@param t the cause of failure"
      end

      operation 1531931 "run"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1532059 "runAndReset"
	protected explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the computation without setting its result, and then
resets this future to initial state, failing to do so if the
computation encounters an exception or is cancelled.  This is
designed for use with tasks that intrinsically execute more
than once.

@return true if successfully run and reset"
      end

      operation 1532187 "handlePossibleCancellationInterrupt"
	private explicit_return_type "void"
	nparams 1
	  param in name "s" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that any interrupt from a possible cancel(true) is only
delivered to a task while in run or runAndReset."
      end

      operation 1532443 "finishCompletion"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and signals all waiting threads, invokes done(), and
nulls out callable."
      end

      operation 1532571 "awaitDone"
	private explicit_return_type "int"
	nparams 2
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Awaits completion or aborts on interrupt or timeout.

@param timed true if use timed waits
@param nanos time to wait, if timed
@return state upon completion"
      end

      operation 1532699 "removeWaiter"
	private explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 263963 // WaitNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to unlink a timed-out or interrupted wait node to avoid
accumulating garbage.  Internal nodes are simply unspliced
without CAS since it is harmless if they are traversed anyway
by releasers.  To avoid effects of unsplicing from already
removed nodes, the list is retraversed in case of an apparent
race.  This is slow when there are a lot of nodes, but we don't
expect lists to be long enough to outweigh higher-overhead
schemes."
      end

      classrelation 437787 // UNSAFE (<unidirectional association>)
	relation 437787 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 437787 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 371355 "stateOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 371483 "runnerOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 371611 "waitersOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 132635 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = FutureTask.class;
            stateOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"state\"));
            runnerOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"runner\"));
            waitersOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"waiters\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 264091 "Executors"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed security manager docs
 END android-note

Factory and utility methods for {@link Executor}, {@link
ExecutorService}, {@link ScheduledExecutorService}, {@link
ThreadFactory}, and {@link Callable} classes defined in this
package. This class supports the following kinds of methods:

<ul>
  <li> Methods that create and return an {@link ExecutorService}
       set up with commonly useful configuration settings.
  <li> Methods that create and return a {@link ScheduledExecutorService}
       set up with commonly useful configuration settings.
  <li> Methods that create and return a \"wrapped\" ExecutorService, that
       disables reconfiguration by making implementation-specific methods
       inaccessible.
  <li> Methods that create and return a {@link ThreadFactory}
       that sets newly created threads to a known state.
  <li> Methods that create and return a {@link Callable}
       out of other closure-like forms, so they can be used
       in execution methods requiring <tt>Callable</tt>.
</ul>

@since 1.5
@author Doug Lea"
      operation 1534235 "newFixedThreadPool"
	class_operation public return_type class_ref 252955 // ExecutorService
	nparams 1
	  param in name "nThreads" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that reuses a fixed number of threads
operating off a shared unbounded queue.  At any point, at most
<tt>nThreads</tt> threads will be active processing tasks.
If additional tasks are submitted when all threads are active,
they will wait in the queue until a thread is available.
If any thread terminates due to a failure during execution
prior to shutdown, a new one will take its place if needed to
execute subsequent tasks.  The threads in the pool will exist
until it is explicitly {@link ExecutorService#shutdown shutdown}.

@param nThreads the number of threads in the pool
@return the newly created thread pool
@throws IllegalArgumentException if {@code nThreads <= 0}"
      end

      operation 1534363 "newFixedThreadPool"
	class_operation public return_type class_ref 252955 // ExecutorService
	nparams 2
	  param in name "nThreads" explicit_type "int"
	  param inout name "threadFactory" type class_ref 264219 // ThreadFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that reuses a fixed number of threads
operating off a shared unbounded queue, using the provided
ThreadFactory to create new threads when needed.  At any point,
at most <tt>nThreads</tt> threads will be active processing
tasks.  If additional tasks are submitted when all threads are
active, they will wait in the queue until a thread is
available.  If any thread terminates due to a failure during
execution prior to shutdown, a new one will take its place if
needed to execute subsequent tasks.  The threads in the pool will
exist until it is explicitly {@link ExecutorService#shutdown
shutdown}.

@param nThreads the number of threads in the pool
@param threadFactory the factory to use when creating new threads
@return the newly created thread pool
@throws NullPointerException if threadFactory is null
@throws IllegalArgumentException if {@code nThreads <= 0}"
      end

      operation 1534491 "newSingleThreadExecutor"
	class_operation public return_type class_ref 252955 // ExecutorService
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Executor that uses a single worker thread operating
off an unbounded queue. (Note however that if this single
thread terminates due to a failure during execution prior to
shutdown, a new one will take its place if needed to execute
subsequent tasks.)  Tasks are guaranteed to execute
sequentially, and no more than one task will be active at any
given time. Unlike the otherwise equivalent
<tt>newFixedThreadPool(1)</tt> the returned executor is
guaranteed not to be reconfigurable to use additional threads.

@return the newly created single-threaded Executor"
      end

      operation 1534619 "newSingleThreadExecutor"
	class_operation public return_type class_ref 252955 // ExecutorService
	nparams 1
	  param inout name "threadFactory" type class_ref 264219 // ThreadFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an Executor that uses a single worker thread operating
off an unbounded queue, and uses the provided ThreadFactory to
create a new thread when needed. Unlike the otherwise
equivalent <tt>newFixedThreadPool(1, threadFactory)</tt> the
returned executor is guaranteed not to be reconfigurable to use
additional threads.

@param threadFactory the factory to use when creating new
threads

@return the newly created single-threaded Executor
@throws NullPointerException if threadFactory is null"
      end

      operation 1534747 "newCachedThreadPool"
	class_operation public return_type class_ref 252955 // ExecutorService
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that creates new threads as needed, but
will reuse previously constructed threads when they are
available.  These pools will typically improve the performance
of programs that execute many short-lived asynchronous tasks.
Calls to <tt>execute</tt> will reuse previously constructed
threads if available. If no existing thread is available, a new
thread will be created and added to the pool. Threads that have
not been used for sixty seconds are terminated and removed from
the cache. Thus, a pool that remains idle for long enough will
not consume any resources. Note that pools with similar
properties but different details (for example, timeout parameters)
may be created using {@link ThreadPoolExecutor} constructors.

@return the newly created thread pool"
      end

      operation 1534875 "newCachedThreadPool"
	class_operation public return_type class_ref 252955 // ExecutorService
	nparams 1
	  param inout name "threadFactory" type class_ref 264219 // ThreadFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that creates new threads as needed, but
will reuse previously constructed threads when they are
available, and uses the provided
ThreadFactory to create new threads when needed.
@param threadFactory the factory to use when creating new threads
@return the newly created thread pool
@throws NullPointerException if threadFactory is null"
      end

      operation 1535003 "newSingleThreadScheduledExecutor"
	class_operation public return_type class_ref 264347 // ScheduledExecutorService
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a single-threaded executor that can schedule commands
to run after a given delay, or to execute periodically.
(Note however that if this single
thread terminates due to a failure during execution prior to
shutdown, a new one will take its place if needed to execute
subsequent tasks.)  Tasks are guaranteed to execute
sequentially, and no more than one task will be active at any
given time. Unlike the otherwise equivalent
<tt>newScheduledThreadPool(1)</tt> the returned executor is
guaranteed not to be reconfigurable to use additional threads.
@return the newly created scheduled executor"
      end

      operation 1535131 "newSingleThreadScheduledExecutor"
	class_operation public return_type class_ref 264347 // ScheduledExecutorService
	nparams 1
	  param inout name "threadFactory" type class_ref 264219 // ThreadFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a single-threaded executor that can schedule commands
to run after a given delay, or to execute periodically.  (Note
however that if this single thread terminates due to a failure
during execution prior to shutdown, a new one will take its
place if needed to execute subsequent tasks.)  Tasks are
guaranteed to execute sequentially, and no more than one task
will be active at any given time. Unlike the otherwise
equivalent <tt>newScheduledThreadPool(1, threadFactory)</tt>
the returned executor is guaranteed not to be reconfigurable to
use additional threads.
@param threadFactory the factory to use when creating new
threads
@return a newly created scheduled executor
@throws NullPointerException if threadFactory is null"
      end

      operation 1535259 "newScheduledThreadPool"
	class_operation public return_type class_ref 264347 // ScheduledExecutorService
	nparams 1
	  param in name "corePoolSize" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that can schedule commands to run after a
given delay, or to execute periodically.
@param corePoolSize the number of threads to keep in the pool,
even if they are idle.
@return a newly created scheduled thread pool
@throws IllegalArgumentException if {@code corePoolSize < 0}"
      end

      operation 1535387 "newScheduledThreadPool"
	class_operation public return_type class_ref 264347 // ScheduledExecutorService
	nparams 2
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "threadFactory" type class_ref 264219 // ThreadFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a thread pool that can schedule commands to run after a
given delay, or to execute periodically.
@param corePoolSize the number of threads to keep in the pool,
even if they are idle.
@param threadFactory the factory to use when the executor
creates a new thread.
@return a newly created scheduled thread pool
@throws IllegalArgumentException if {@code corePoolSize < 0}
@throws NullPointerException if threadFactory is null"
      end

      operation 1535515 "unconfigurableExecutorService"
	class_operation public return_type class_ref 252955 // ExecutorService
	nparams 1
	  param inout name "executor" type class_ref 252955 // ExecutorService
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object that delegates all defined {@link
ExecutorService} methods to the given executor, but not any
other methods that might otherwise be accessible using
casts. This provides a way to safely \"freeze\" configuration and
disallow tuning of a given concrete implementation.
@param executor the underlying implementation
@return an <tt>ExecutorService</tt> instance
@throws NullPointerException if executor null"
      end

      operation 1535643 "unconfigurableScheduledExecutorService"
	class_operation public return_type class_ref 264347 // ScheduledExecutorService
	nparams 1
	  param inout name "executor" type class_ref 264347 // ScheduledExecutorService
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an object that delegates all defined {@link
ScheduledExecutorService} methods to the given executor, but
not any other methods that might otherwise be accessible using
casts. This provides a way to safely \"freeze\" configuration and
disallow tuning of a given concrete implementation.
@param executor the underlying implementation
@return a <tt>ScheduledExecutorService</tt> instance
@throws NullPointerException if executor null"
      end

      operation 1535771 "defaultThreadFactory"
	class_operation public return_type class_ref 264219 // ThreadFactory
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a default thread factory used to create new threads.
This factory creates all new threads used by an Executor in the
same {@link ThreadGroup}. Each new
thread is created as a non-daemon thread with priority set to
the smaller of <tt>Thread.NORM_PRIORITY</tt> and the maximum
priority permitted in the thread group.  New threads have names
accessible via {@link Thread#getName} of
<em>pool-N-thread-M</em>, where <em>N</em> is the sequence
number of this factory, and <em>M</em> is the sequence number
of the thread created by this factory.
@return a thread factory"
      end

      operation 1535899 "privilegedThreadFactory"
	class_operation public return_type class_ref 264219 // ThreadFactory
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Legacy security code; do not use."
      end

      operation 1536027 "callable"
	class_operation public return_type class_ref 253467 // Callable
	nparams 2
	  param inout name "task" type class_ref 151963 // Runnable
	  param inout name "result" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given task and returns the given result.  This
can be useful when applying methods requiring a
<tt>Callable</tt> to an otherwise resultless action.
@param task the task to run
@param result the result to return
@return a callable object
@throws NullPointerException if task null"
      end

      operation 1536155 "callable"
	class_operation public return_type class_ref 253467 // Callable
	nparams 1
	  param inout name "task" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given task and returns <tt>null</tt>.
@param task the task to run
@return a callable object
@throws NullPointerException if task null"
      end

      operation 1536283 "callable"
	class_operation public return_type class_ref 253467 // Callable
	nparams 1
	  param in name "action" type class_ref 194843 // PrivilegedAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}final ${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given privileged action and returns its result.
@param action the privileged action to run
@return a callable object
@throws NullPointerException if action null"
      end

      operation 1536411 "callable"
	class_operation public return_type class_ref 253467 // Callable
	nparams 1
	  param in name "action" type class_ref 194971 // PrivilegedExceptionAction
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Object> ${name}${(}final ${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that, when
called, runs the given privileged exception action and returns
its result.
@param action the privileged exception action to run
@return a callable object
@throws NullPointerException if action null"
      end

      operation 1536539 "privilegedCallable"
	class_operation public return_type class_ref 253467 // Callable
	nparams 1
	  param inout name "callable" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Legacy security code; do not use."
      end

      operation 1536667 "privilegedCallableUsingCurrentClassLoader"
	class_operation public return_type class_ref 253467 // Callable
	nparams 1
	  param inout name "callable" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a {@link Callable} object that will, when
called, execute the given <tt>callable</tt> under the current
with the current context class loader as the context class loader.

@return a callable object
@throws NullPointerException if callable null"
      end

      class 264475 "RunnableAdapter"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 253467 // Callable
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 438171 // <realization>
	  relation 438171 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 438171 // <realization>
	    b parent class_ref 253467 // Callable
	end

	classrelation 438299 // task (<unidirectional association>)
	  relation 438299 --->
	    a role_name "task" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 438299 // task (<unidirectional association>)
	    b parent class_ref 151963 // Runnable
	end

	attribute 371739 "result"
	  const_attribute package explicit_type "T"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1536795 "RunnableAdapter"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "task" type class_ref 151963 // Runnable
	    param inout name "result" explicit_type "T"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1536923 "call"
	  public explicit_return_type "T"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 264603 "PrivilegedCallable"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 253467 // Callable
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 438427 // <realization>
	  relation 438427 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 438427 // <realization>
	    b parent class_ref 253467 // Callable
	end

	classrelation 438555 // task (<unidirectional association>)
	  relation 438555 --->
	    a role_name "task" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 438555 // task (<unidirectional association>)
	    b parent class_ref 253467 // Callable
	end

	classrelation 438683 // acc (<unidirectional association>)
	  relation 438683 --->
	    a role_name "acc" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 438683 // acc (<unidirectional association>)
	    b parent class_ref 194331 // AccessControlContext
	end

	operation 1537051 "PrivilegedCallable"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "task" type class_ref 253467 // Callable
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1537179 "call"
	  public explicit_return_type "T"
	  nparams 0
	  nexceptions 1
	    exception class_ref 132251 // Exception
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 264731 "PrivilegedCallableUsingCurrentClassLoader"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 253467 // Callable
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 438811 // <realization>
	  relation 438811 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 438811 // <realization>
	    b parent class_ref 253467 // Callable
	end

	classrelation 438939 // task (<unidirectional association>)
	  relation 438939 --->
	    a role_name "task" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<T> ${name}${value};
"
	      classrelation_ref 438939 // task (<unidirectional association>)
	    b parent class_ref 253467 // Callable
	end

	classrelation 439067 // acc (<unidirectional association>)
	  relation 439067 --->
	    a role_name "acc" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 439067 // acc (<unidirectional association>)
	    b parent class_ref 194331 // AccessControlContext
	end

	classrelation 439195 // ccl (<unidirectional association>)
	  relation 439195 --->
	    a role_name "ccl" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 439195 // ccl (<unidirectional association>)
	    b parent class_ref 138523 // ClassLoader
	end

	operation 1537307 "PrivilegedCallableUsingCurrentClassLoader"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "task" type class_ref 253467 // Callable
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1537435 "call"
	  public explicit_return_type "T"
	  nparams 0
	  nexceptions 1
	    exception class_ref 132251 // Exception
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 264859 "DefaultThreadFactory"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 439323 // <realization>
	  relation 439323 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 439323 // <realization>
	    b parent class_ref 264219 // ThreadFactory
	end

	classrelation 439451 // poolNumber (<unidirectional association>)
	  relation 439451 --->
	    a role_name "poolNumber" init_value " new AtomicInteger(1)" class_relation const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 439451 // poolNumber (<unidirectional association>)
	    b parent class_ref 154779 // AtomicInteger
	end

	classrelation 439579 // group (<unidirectional association>)
	  relation 439579 --->
	    a role_name "group" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 439579 // group (<unidirectional association>)
	    b parent class_ref 158747 // ThreadGroup
	end

	classrelation 439707 // threadNumber (<unidirectional association>)
	  relation 439707 --->
	    a role_name "threadNumber" init_value " new AtomicInteger(1)" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 439707 // threadNumber (<unidirectional association>)
	    b parent class_ref 154779 // AtomicInteger
	end

	classrelation 439835 // namePrefix (<unidirectional association>)
	  relation 439835 --->
	    a role_name "namePrefix" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 439835 // namePrefix (<unidirectional association>)
	    b parent class_ref 3399692 // String
	end

	operation 1537691 "DefaultThreadFactory"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1537819 "newThread"
	  public return_type class_ref 1201420 // Thread
	  nparams 1
	    param inout name "r" type class_ref 151963 // Runnable
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 264987 "PrivilegedThreadFactory"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 439963 // <generalisation>
	  relation 439963 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 439963 // <generalisation>
	    b parent class_ref 264859 // DefaultThreadFactory
	end

	classrelation 440091 // acc (<unidirectional association>)
	  relation 440091 --->
	    a role_name "acc" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 440091 // acc (<unidirectional association>)
	    b parent class_ref 194331 // AccessControlContext
	end

	classrelation 440219 // ccl (<unidirectional association>)
	  relation 440219 --->
	    a role_name "ccl" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 440219 // ccl (<unidirectional association>)
	    b parent class_ref 138523 // ClassLoader
	end

	operation 1537947 "PrivilegedThreadFactory"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1538075 "newThread"
	  public return_type class_ref 1201420 // Thread
	  nparams 1
	    param in name "r" type class_ref 151963 // Runnable
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 265115 "DelegatedExecutorService"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 440347 // <generalisation>
	  relation 440347 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 440347 // <generalisation>
	    b parent class_ref 252827 // AbstractExecutorService
	end

	classrelation 440475 // e (<unidirectional association>)
	  relation 440475 --->
	    a role_name "e" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 440475 // e (<unidirectional association>)
	    b parent class_ref 252955 // ExecutorService
	end

	operation 1538203 "DelegatedExecutorService"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "executor" type class_ref 252955 // ExecutorService
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1538331 "execute"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "command" type class_ref 151963 // Runnable
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1538459 "shutdown"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1538587 "shutdownNow"
	  public return_type class_ref 131483 // List
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1538715 "isShutdown"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1538843 "isTerminated"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1538971 "awaitTermination"
	  public explicit_return_type "boolean"
	  nparams 2
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 253211 // TimeUnit
	  nexceptions 1
	    exception class_ref 155547 // InterruptedException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1539099 "submit"
	  public return_type class_ref 253339 // Future
	  nparams 1
	    param inout name "task" type class_ref 151963 // Runnable
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1539227 "submit"
	  public return_type class_ref 253339 // Future
	  nparams 1
	    param inout name "task" type class_ref 253467 // Callable
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1539355 "submit"
	  public return_type class_ref 253339 // Future
	  nparams 2
	    param inout name "task" type class_ref 151963 // Runnable
	    param inout name "result" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1539483 "invokeAll"
	  public return_type class_ref 131483 // List
	  nparams 1
	    param inout name "tasks" type class_ref 160667 // Collection
	  nexceptions 1
	    exception class_ref 155547 // InterruptedException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1539611 "invokeAll"
	  public return_type class_ref 131483 // List
	  nparams 3
	    param inout name "tasks" type class_ref 160667 // Collection
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 253211 // TimeUnit
	  nexceptions 1
	    exception class_ref 155547 // InterruptedException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1539739 "invokeAny"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "tasks" type class_ref 160667 // Collection
	  nexceptions 2
	    exception class_ref 155547 // InterruptedException
	    exception class_ref 253595 // ExecutionException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1539867 "invokeAny"
	  public explicit_return_type "T"
	  nparams 3
	    param inout name "tasks" type class_ref 160667 // Collection
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 253211 // TimeUnit
	  nexceptions 3
	    exception class_ref 155547 // InterruptedException
	    exception class_ref 253595 // ExecutionException
	    exception class_ref 253723 // TimeoutException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<? extends Callable<T>> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 265243 "FinalizableDelegatedExecutorService"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 440603 // <generalisation>
	  relation 440603 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 440603 // <generalisation>
	    b parent class_ref 265115 // DelegatedExecutorService
	end

	operation 1539995 "FinalizableDelegatedExecutorService"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "executor" type class_ref 252955 // ExecutorService
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1540123 "finalize"
	  protected explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 265371 "DelegatedScheduledExecutorService"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 440731 // <generalisation>
	  relation 440731 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 440731 // <generalisation>
	    b parent class_ref 265115 // DelegatedExecutorService
	end

	classrelation 440987 // <realization>
	  relation 440987 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 440987 // <realization>
	    b parent class_ref 264347 // ScheduledExecutorService
	end

	classrelation 441115 // e (<unidirectional association>)
	  relation 441115 --->
	    a role_name "e" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 441115 // e (<unidirectional association>)
	    b parent class_ref 264347 // ScheduledExecutorService
	end

	operation 1540763 "DelegatedScheduledExecutorService"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "executor" type class_ref 264347 // ScheduledExecutorService
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1540891 "schedule"
	  public return_type class_ref 265499 // ScheduledFuture
	  nparams 3
	    param inout name "command" type class_ref 151963 // Runnable
	    param in name "delay" explicit_type "long"
	    param inout name "unit" type class_ref 253211 // TimeUnit
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1541019 "schedule"
	  public return_type class_ref 265499 // ScheduledFuture
	  nparams 3
	    param inout name "callable" type class_ref 253467 // Callable
	    param in name "delay" explicit_type "long"
	    param inout name "unit" type class_ref 253211 // TimeUnit
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0}<V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1541147 "scheduleAtFixedRate"
	  public return_type class_ref 265499 // ScheduledFuture
	  nparams 4
	    param inout name "command" type class_ref 151963 // Runnable
	    param in name "initialDelay" explicit_type "long"
	    param in name "period" explicit_type "long"
	    param inout name "unit" type class_ref 253211 // TimeUnit
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1541275 "scheduleWithFixedDelay"
	  public return_type class_ref 265499 // ScheduledFuture
	  nparams 4
	    param inout name "command" type class_ref 151963 // Runnable
	    param in name "initialDelay" explicit_type "long"
	    param in name "delay" explicit_type "long"
	    param inout name "unit" type class_ref 253211 // TimeUnit
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1541403 "Executors"
	private explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Cannot instantiate. "
      end
    end

    class 264219 "ThreadFactory"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An object that creates new threads on demand.  Using thread factories
removes hardwiring of calls to {@link Thread#Thread(Runnable) new Thread},
enabling applications to use special thread subclasses, priorities, etc.

<p>
The simplest implementation of this interface is just:
 <pre> {@code
class SimpleThreadFactory implements ThreadFactory {
  public Thread newThread(Runnable r) {
    return new Thread(r);
  }
}}</pre>

The {@link Executors#defaultThreadFactory} method provides a more
useful simple implementation, that sets the created thread context
to known values before returning it.
@since 1.5
@author Doug Lea"
      operation 1537563 "newThread"
	public return_type class_ref 1201420 // Thread
	nparams 1
	  param inout name "r" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a new {@code Thread}.  Implementations may also initialize
priority, name, daemon status, {@code ThreadGroup}, etc.

@param r a runnable to be executed by new thread instance
@return constructed thread, or {@code null} if the request to
        create a thread is rejected"
      end
    end

    class 264347 "ScheduledExecutorService"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "An {@link ExecutorService} that can schedule commands to run after a given
delay, or to execute periodically.

<p> The <tt>schedule</tt> methods create tasks with various delays
and return a task object that can be used to cancel or check
execution. The <tt>scheduleAtFixedRate</tt> and
<tt>scheduleWithFixedDelay</tt> methods create and execute tasks
that run periodically until cancelled.

<p> Commands submitted using the {@link Executor#execute} and
{@link ExecutorService} <tt>submit</tt> methods are scheduled with
a requested delay of zero. Zero and negative delays (but not
periods) are also allowed in <tt>schedule</tt> methods, and are
treated as requests for immediate execution.

<p>All <tt>schedule</tt> methods accept <em>relative</em> delays and
periods as arguments, not absolute times or dates. It is a simple
matter to transform an absolute time represented as a {@link
java.util.Date} to the required form. For example, to schedule at
a certain future <tt>date</tt>, you can use: <tt>schedule(task,
date.getTime() - System.currentTimeMillis(),
TimeUnit.MILLISECONDS)</tt>. Beware however that expiration of a
relative delay need not coincide with the current <tt>Date</tt> at
which the task is enabled due to network time synchronization
protocols, clock drift, or other factors.

The {@link Executors} class provides convenient factory methods for
the ScheduledExecutorService implementations provided in this package.

<h3>Usage Example</h3>

Here is a class with a method that sets up a ScheduledExecutorService
to beep every ten seconds for an hour:

 <pre> {@code
import static java.util.concurrent.TimeUnit.*;
class BeeperControl {
  private final ScheduledExecutorService scheduler =
    Executors.newScheduledThreadPool(1);

  public void beepForAnHour() {
    final Runnable beeper = new Runnable() {
      public void run() { System.out.println(\"beep\"); }
    };
    final ScheduledFuture<?> beeperHandle =
      scheduler.scheduleAtFixedRate(beeper, 10, 10, SECONDS);
    scheduler.schedule(new Runnable() {
      public void run() { beeperHandle.cancel(true); }
    }, 60 * 60, SECONDS);
  }
}}</pre>

@since 1.5
@author Doug Lea"
      classrelation 440859 // <generalisation>
	relation 440859 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 440859 // <generalisation>
	  b parent class_ref 252955 // ExecutorService
      end

      operation 1540251 "schedule"
	public return_type class_ref 265499 // ScheduledFuture
	nparams 3
	  param inout name "command" type class_ref 151963 // Runnable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a one-shot action that becomes enabled
after the given delay.

@param command the task to execute
@param delay the time from now to delay execution
@param unit the time unit of the delay parameter
@return a ScheduledFuture representing pending completion of
        the task and whose <tt>get()</tt> method will return
        <tt>null</tt> upon completion
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if command is null"
      end

      operation 1540379 "schedule"
	public return_type class_ref 265499 // ScheduledFuture
	nparams 3
	  param inout name "callable" type class_ref 253467 // Callable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0}<V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a ScheduledFuture that becomes enabled after the
given delay.

@param callable the function to execute
@param delay the time from now to delay execution
@param unit the time unit of the delay parameter
@return a ScheduledFuture that can be used to extract result or cancel
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if callable is null"
      end

      operation 1540507 "scheduleAtFixedRate"
	public return_type class_ref 265499 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 151963 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "period" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a periodic action that becomes enabled first
after the given initial delay, and subsequently with the given
period; that is executions will commence after
<tt>initialDelay</tt> then <tt>initialDelay+period</tt>, then
<tt>initialDelay + 2 * period</tt>, and so on.
If any execution of the task
encounters an exception, subsequent executions are suppressed.
Otherwise, the task will only terminate via cancellation or
termination of the executor.  If any execution of this task
takes longer than its period, then subsequent executions
may start late, but will not concurrently execute.

@param command the task to execute
@param initialDelay the time to delay first execution
@param period the period between successive executions
@param unit the time unit of the initialDelay and period parameters
@return a ScheduledFuture representing pending completion of
        the task, and whose <tt>get()</tt> method will throw an
        exception upon cancellation
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if command is null
@throws IllegalArgumentException if period less than or equal to zero"
      end

      operation 1540635 "scheduleWithFixedDelay"
	public return_type class_ref 265499 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 151963 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates and executes a periodic action that becomes enabled first
after the given initial delay, and subsequently with the
given delay between the termination of one execution and the
commencement of the next.  If any execution of the task
encounters an exception, subsequent executions are suppressed.
Otherwise, the task will only terminate via cancellation or
termination of the executor.

@param command the task to execute
@param initialDelay the time to delay first execution
@param delay the delay between the termination of one
execution and the commencement of the next
@param unit the time unit of the initialDelay and delay parameters
@return a ScheduledFuture representing pending completion of
        the task, and whose <tt>get()</tt> method will throw an
        exception upon cancellation
@throws RejectedExecutionException if the task cannot be
        scheduled for execution
@throws NullPointerException if command is null
@throws IllegalArgumentException if delay less than or equal to zero"
      end
    end

    class 265499 "ScheduledFuture"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 253339 // Future
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A delayed result-bearing action that can be cancelled.
Usually a scheduled future is the result of scheduling
a task with a {@link ScheduledExecutorService}.

@since 1.5
@author Doug Lea
@param <V> The result type returned by this Future"
      classrelation 454683 // <generalisation>
	relation 454683 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 454683 // <generalisation>
	  b parent class_ref 262683 // Delayed
      end

      classrelation 454811 // <realization>
	relation 454811 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 454811 // <realization>
	  b parent class_ref 253339 // Future
      end
    end

    class 265627 "ForkJoinPool"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed security manager docs
 END android-note

An {@link ExecutorService} for running {@link ForkJoinTask}s.
A {@code ForkJoinPool} provides the entry point for submissions
from non-{@code ForkJoinTask} clients, as well as management and
monitoring operations.

<p>A {@code ForkJoinPool} differs from other kinds of {@link
ExecutorService} mainly by virtue of employing
<em>work-stealing</em>: all threads in the pool attempt to find and
execute subtasks created by other active tasks (eventually blocking
waiting for work if none exist). This enables efficient processing
when most tasks spawn other subtasks (as do most {@code
ForkJoinTask}s). When setting <em>asyncMode</em> to true in
constructors, {@code ForkJoinPool}s may also be appropriate for use
with event-style tasks that are never joined.

<p>A {@code ForkJoinPool} is constructed with a given target
parallelism level; by default, equal to the number of available
processors. The pool attempts to maintain enough active (or
available) threads by dynamically adding, suspending, or resuming
internal worker threads, even if some tasks are stalled waiting to
join others. However, no such adjustments are guaranteed in the
face of blocked IO or other unmanaged synchronization. The nested
{@link ManagedBlocker} interface enables extension of the kinds of
synchronization accommodated.

<p>In addition to execution and lifecycle control methods, this
class provides status check methods (for example
{@link #getStealCount}) that are intended to aid in developing,
tuning, and monitoring fork/join applications. Also, method
{@link #toString} returns indications of pool state in a
convenient form for informal monitoring.

<p> As is the case with other ExecutorServices, there are three
main task execution methods summarized in the following
table. These are designed to be used by clients not already engaged
in fork/join computations in the current pool.  The main forms of
these methods accept instances of {@code ForkJoinTask}, but
overloaded forms also allow mixed execution of plain {@code
Runnable}- or {@code Callable}- based activities as well.  However,
tasks that are already executing in a pool should normally
<em>NOT</em> use these pool execution methods, but instead use the
within-computation forms listed in the table.

<table BORDER CELLPADDING=3 CELLSPACING=1>
 <tr>
   <td></td>
   <td ALIGN=CENTER> <b>Call from non-fork/join clients</b></td>
   <td ALIGN=CENTER> <b>Call from within fork/join computations</b></td>
 </tr>
 <tr>
   <td> <b>Arrange async execution</td>
   <td> {@link #execute(ForkJoinTask)}</td>
   <td> {@link ForkJoinTask#fork}</td>
 </tr>
 <tr>
   <td> <b>Await and obtain result</td>
   <td> {@link #invoke(ForkJoinTask)}</td>
   <td> {@link ForkJoinTask#invoke}</td>
 </tr>
 <tr>
   <td> <b>Arrange exec and obtain Future</td>
   <td> {@link #submit(ForkJoinTask)}</td>
   <td> {@link ForkJoinTask#fork} (ForkJoinTasks <em>are</em> Futures)</td>
 </tr>
</table>

<p><b>Sample Usage.</b> Normally a single {@code ForkJoinPool} is
used for all parallel task execution in a program or subsystem.
Otherwise, use would not usually outweigh the construction and
bookkeeping overhead of creating a large set of threads. For
example, a common pool could be used for the {@code SortTasks}
illustrated in {@link RecursiveAction}. Because {@code
ForkJoinPool} uses threads in {@linkplain java.lang.Thread#isDaemon
daemon} mode, there is typically no need to explicitly {@link
#shutdown} such a pool upon program exit.

 <pre> {@code
static final ForkJoinPool mainPool = new ForkJoinPool();
...
public void sort(long[] array) {
  mainPool.invoke(new SortTask(array, 0, array.length));
}}</pre>

<p><b>Implementation notes</b>: This implementation restricts the
maximum number of running threads to 32767. Attempts to create
pools with greater than the maximum number result in
{@code IllegalArgumentException}.

<p>This implementation rejects submitted tasks (that is, by throwing
{@link RejectedExecutionException}) only when the pool is shut down
or internal resources have been exhausted.

@since 1.7
@hide
@author Doug Lea"
      classrelation 441243 // <generalisation>
	relation 441243 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 441243 // <generalisation>
	  b parent class_ref 252827 // AbstractExecutorService
      end

      class 265755 "ForkJoinWorkerThreadFactory"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1541531 "newThread"
	  public return_type class_ref 265883 // ForkJoinWorkerThread
	  nparams 1
	    param inout name "pool" type class_ref 265627 // ForkJoinPool
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns a new worker thread operating in the given pool.

@param pool the pool this thread works in
@throws NullPointerException if the pool is null"
	end
      end

      class 266011 "DefaultForkJoinWorkerThreadFactory"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 441371 // <realization>
	  relation 441371 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 441371 // <realization>
	    b parent class_ref 265755 // ForkJoinWorkerThreadFactory
	end

	operation 1541659 "newThread"
	  public return_type class_ref 265883 // ForkJoinWorkerThread
	  nparams 1
	    param inout name "pool" type class_ref 265627 // ForkJoinPool
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 441499 // defaultForkJoinWorkerThreadFactory (<unidirectional association>)
	relation 441499 --->
	  a role_name "defaultForkJoinWorkerThreadFactory" class_relation const_relation public
	    comment "
Creates a new ForkJoinWorkerThread. This factory is used unless
overridden in ForkJoinPool constructors.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 441499 // defaultForkJoinWorkerThreadFactory (<unidirectional association>)
	  b parent class_ref 265755 // ForkJoinWorkerThreadFactory
      end

      classrelation 441627 // modifyThreadPermission (<unidirectional association>)
	relation 441627 --->
	  a role_name "modifyThreadPermission" class_relation const_relation private
	    comment "
Permission required for callers of methods that may start or
kill threads.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 441627 // modifyThreadPermission (<unidirectional association>)
	  b parent class_ref 158491 // RuntimePermission
      end

      operation 1541787 "checkPermission"
	class_operation private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If there is a security manager, makes sure caller has
permission to modify threads."
      end

      classrelation 441755 // poolNumberGenerator (<unidirectional association>)
	relation 441755 --->
	  a role_name "poolNumberGenerator" class_relation const_relation private
	    comment "
Generator for assigning sequence numbers as pool names.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 441755 // poolNumberGenerator (<unidirectional association>)
	  b parent class_ref 154779 // AtomicInteger
      end

      classrelation 441883 // workerSeedGenerator (<unidirectional association>)
	relation 441883 --->
	  a role_name "workerSeedGenerator" class_relation const_relation package
	    comment "
Generator for initial random seeds for worker victim
selection. This is used only to create initial seeds. Random
steals use a cheaper xorshift generator per steal attempt. We
don't expect much contention on seedGenerator, so just use a
plain Random.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 441883 // workerSeedGenerator (<unidirectional association>)
	  b parent class_ref 139803 // Random
      end

      classrelation 442011 // workers (<unidirectional association>)
	relation 442011 --->
	  a role_name "workers" multiplicity "[]" package
	    comment "
Array holding all worker threads in the pool.  Initialized upon
construction. Array size must be a power of two.  Updates and
replacements are protected by scanGuard, but the array is
always kept in a consistent enough state to be randomly
accessed without locking by workers performing work-stealing,
as well as other traversal-based methods in this class, so long
as reads memory-acquire by first reading ctl. All readers must
tolerate that some array slots may be null.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 442011 // workers (<unidirectional association>)
	  b parent class_ref 265883 // ForkJoinWorkerThread
      end

      attribute 371867 "INITIAL_QUEUE_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Initial size for submission queue array. Must be a power of
two.  In many applications, these always stay small so we use a
small initial cap.
"
      end

      attribute 371995 "MAXIMUM_QUEUE_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 24"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Maximum size for submission queue array. Must be a power of two
less than or equal to 1 << (31 - width of array entry) to
ensure lack of index wraparound, but is capped at a lower
value to help users trap runaway computations.

 16M"
      end

      classrelation 442139 // submissionQueue (<unidirectional association>)
	relation 442139 --->
	  a role_name "submissionQueue" multiplicity "[]" private
	    comment "
Array serving as submission queue. Initialized upon construction.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 442139 // submissionQueue (<unidirectional association>)
	  b parent class_ref 266139 // ForkJoinTask
      end

      classrelation 442267 // submissionLock (<unidirectional association>)
	relation 442267 --->
	  a role_name "submissionLock" const_relation private
	    comment "
Lock protecting submissions array for addSubmission

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 442267 // submissionLock (<unidirectional association>)
	  b parent class_ref 254235 // ReentrantLock
      end

      classrelation 442395 // termination (<unidirectional association>)
	relation 442395 --->
	  a role_name "termination" const_relation private
	    comment "
Condition for awaitTermination, using submissionLock for
convenience.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 442395 // termination (<unidirectional association>)
	  b parent class_ref 254363 // Condition
      end

      classrelation 442523 // factory (<unidirectional association>)
	relation 442523 --->
	  a role_name "factory" const_relation private
	    comment "
Creation factory for worker threads.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 442523 // factory (<unidirectional association>)
	  b parent class_ref 265755 // ForkJoinWorkerThreadFactory
      end

      classrelation 442651 // ueh (<unidirectional association>)
	relation 442651 --->
	  a role_name "ueh" const_relation package
	    comment "
The uncaught exception handler used when any worker abruptly
terminates.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 442651 // ueh (<unidirectional association>)
	  b parent class_ref 161435 // UncaughtExceptionHandler
      end

      classrelation 442779 // workerNamePrefix (<unidirectional association>)
	relation 442779 --->
	  a role_name "workerNamePrefix" const_relation private
	    comment "
Prefix for assigning names to worker threads

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 442779 // workerNamePrefix (<unidirectional association>)
	  b parent class_ref 3399692 // String
      end

      attribute 372123 "stealCount"
	volatile private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Sum of per-thread steal counts, updated only when threads are
idle or terminating.
"
      end

      attribute 372251 "ctl"
	volatile package explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Main pool control -- a long packed with:
AC: Number of active running workers minus target parallelism (16 bits)
TC: Number of total workers minus target parallelism (16 bits)
ST: true if pool is terminating (1 bit)
EC: the wait count of top waiting thread (15 bits)
ID: ~poolIndex of top of Treiber stack of waiting threads (16 bits)

When convenient, we can extract the upper 32 bits of counts and
the lower 32 bits of queue state, u = (int)(ctl >>> 32) and e =
(int)ctl.  The ec field is never accessed alone, but always
together with id and st. The offsets of counts by the target
parallelism and the positionings of fields makes it possible to
perform the most common checks via sign tests of fields: When
ac is negative, there are not enough active workers, when tc is
negative, there are not enough total workers, when id is
negative, there is at least one waiting worker, and when e is
negative, the pool is terminating.  To deal with these possibly
negative fields, we use casts in and out of \"short\" and/or
signed shifts to maintain signedness.
"
      end

      attribute 372379 "AC_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 48"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " bit positions/shifts for fields"
      end

      attribute 372507 "TC_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 32"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 372635 "ST_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 31"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 372763 "EC_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 372891 "MAX_ID"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x7fff"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " bounds
 max poolIndex"
      end

      attribute 373019 "SMASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0xffff"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " mask short bits"
      end

      attribute 373147 "SHORT_SIGN"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 15"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 373275 "INT_SIGN"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 31"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 373403 "STOP_BIT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0x0001L << ST_SHIFT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " masks"
      end

      attribute 373531 "AC_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value " ((long)SMASK) << AC_SHIFT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 373659 "TC_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value " ((long)SMASK) << TC_SHIFT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 373787 "TC_UNIT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L << TC_SHIFT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " units for incrementing and decrementing"
      end

      attribute 373915 "AC_UNIT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L << AC_SHIFT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 374043 "UAC_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " AC_SHIFT - 32"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " masks and units for dealing with u = (int)(ctl >>> 32)"
      end

      attribute 374171 "UTC_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " TC_SHIFT - 32"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 374299 "UAC_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " SMASK << UAC_SHIFT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 374427 "UTC_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " SMASK << UTC_SHIFT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 374555 "UAC_UNIT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << UAC_SHIFT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 374683 "UTC_UNIT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << UTC_SHIFT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 374811 "E_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0x7fffffff"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " masks and units for dealing with e = (int)ctl
 no STOP_BIT"
      end

      attribute 374939 "EC_UNIT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << EC_SHIFT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 375067 "parallelism"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The target parallelism level.
"
      end

      attribute 375195 "queueBase"
	volatile package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Index (mod submission queue length) of next element to take
from submission queue. Usage is identical to that for
per-worker queues -- see ForkJoinWorkerThread internal
documentation.
"
      end

      attribute 375323 "queueTop"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Index (mod submission queue length) of next element to add
in submission queue. Usage is identical to that for
per-worker queues -- see ForkJoinWorkerThread internal
documentation.
"
      end

      attribute 375451 "shutdown"
	volatile package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True when shutdown() has been called.
"
      end

      attribute 375579 "locallyFifo"
	const_attribute package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if use local fifo, not default lifo, for local polling.
Read by, and replicated by ForkJoinWorkerThreads.
"
      end

      attribute 375707 "quiescerCount"
	volatile package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of threads in ForkJoinWorkerThreads.helpQuiescePool.
When non-zero, suppresses automatic shutdown when active
counts become zero.
"
      end

      attribute 375835 "blockedCount"
	volatile package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of threads blocked in join.
"
      end

      attribute 375963 "nextWorkerNumber"
	volatile private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Counter for worker Thread names (unrelated to their poolIndex)
"
      end

      attribute 376091 "nextWorkerIndex"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index for the next created worker. Accessed under scanGuard.
"
      end

      attribute 376219 "scanGuard"
	volatile package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "SeqLock and index masking for updates to workers array.  Locked
when SG_UNIT is set. Unlocking clears bit by adding
SG_UNIT. Staleness of read-only operations can be checked by
comparing scanGuard to value before the reads. The low 16 bits
(i.e, anding with SMASK) hold (the smallest power of two
covering all worker indices, minus one, and is used to avoid
dealing with large numbers of null slots when the workers array
is overallocated.
"
      end

      attribute 376347 "SG_UNIT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 376475 "SHRINK_RATE"
	class_attribute const_attribute private explicit_type "long"
	init_value "
        4L * 1000L * 1000L * 1000L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The wakeup interval (in nanoseconds) for a worker waiting for a
task when the pool is quiescent to instead try to shrink the
number of workers.  The exact value does not matter too
much. It must be short enough to release resources during
sustained periods of idleness, but not so short that threads
are continually re-created.

 4 seconds"
      end

      operation 1541915 "work"
	package explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 265883 // ForkJoinWorkerThread
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Top-level loop for worker threads: On each step: if the
previous step swept through all queues and found no tasks, or
there are excess threads, then possibly blocks. Otherwise,
scans for and, if found, executes a task. Returns when pool
and/or worker terminate.

@param w the worker"
      end

      operation 1542043 "signalWork"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Signalling

Wakes up or creates a worker."
      end

      operation 1542171 "tryReleaseWaiter"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Variant of signalWork to help release waiters on rescans.
Tries once to release a waiter if active count < 0.

@return false if failed due to contention, else true"
      end

      operation 1542299 "scan"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "w" type class_ref 265883 // ForkJoinWorkerThread
	  param in name "a" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Scanning for tasks

Scans for and, if found, executes one task. Scans start at a
random index of workers array, and randomly select the first
(2*#workers)-1 probes, and then, if all empty, resort to 2
circular sweeps, which is necessary to check quiescence. and
taking a submission only if no stealable tasks were found.  The
steal code inside the loop is a specialized form of
ForkJoinWorkerThread.deqTask, followed bookkeeping to support
helpJoinTask and signal propagation. The code for submission
queues is almost identical. On each steal, the worker completes
not only the task, but also all local tasks that this task may
have generated. On detecting staleness or contention when
trying to take a task, this method returns without finishing
sweep, which allows global state rechecks before retry.

@param w the worker
@param a the number of active workers
@return true if swept all queues without finding a task"
      end

      operation 1542427 "tryAwaitWork"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "w" type class_ref 265883 // ForkJoinWorkerThread
	  param in name "c" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to enqueue worker w in wait queue and await change in
worker's eventCount.  If the pool is quiescent and there is
more than one worker, possibly terminates worker upon exit.
Otherwise, before blocking, rescans queues to avoid missed
signals.  Upon finding work, releases at least one worker
(which may be the current worker). Rescans restart upon
detected staleness or failure to release due to
contention. Note the unusual conventions about Thread.interrupt
here and elsewhere: Because interrupts are used solely to alert
threads to check termination, which is checked here anyway, we
clear status (using Thread.interrupted) before any call to
park, so that park does not immediately return due to status
being set via some other unrelated call to interrupt in user
code.

@param w the calling worker
@param c the ctl value on entry
@return true if waited or another thread was released upon enq"
      end

      operation 1542555 "idleAwaitWork"
	private explicit_return_type "void"
	nparams 4
	  param inout name "w" type class_ref 265883 // ForkJoinWorkerThread
	  param in name "currentCtl" explicit_type "long"
	  param in name "prevCtl" explicit_type "long"
	  param in name "v" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If inactivating worker w has caused pool to become
quiescent, check for pool termination, and wait for event
for up to SHRINK_RATE nanosecs (rescans are unnecessary in
this case because quiescence reflects consensus about lack
of work). On timeout, if ctl has not changed, terminate the
worker. Upon its termination (see deregisterWorker), it may
wake up another worker to possibly repeat this process.

@param w the calling worker
@param currentCtl the ctl value after enqueuing w
@param prevCtl the ctl value if w terminated
@param v the eventCount w awaits change"
      end

      operation 1542683 "addSubmission"
	private explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Submissions

Enqueues the given task in the submissionQueue.  Same idea as
ForkJoinWorkerThread.pushTask except for use of submissionLock.

@param t the task"
      end

      operation 1542811 "growSubmissionQueue"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "  (pollSubmission is defined below with exported methods)

Creates or doubles submissionQueue array.
Basically identical to ForkJoinWorkerThread version."
      end

      operation 1542939 "tryPreBlock"
	private explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Blocking support

Tries to increment blockedCount, decrement active count
(sometimes implicitly) and possibly release or create a
compensating worker in preparation for blocking. Fails
on contention or termination.

@return true if the caller can block, else should recheck and retry"
      end

      operation 1543067 "postBlock"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements blockedCount and increments active count."
      end

      operation 1543195 "tryAwaitJoin"
	package explicit_return_type "void"
	nparams 1
	  param inout name "joinMe" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly blocks waiting for the given task to complete, or
cancels the task if terminating.  Fails to wait if contended.

@param joinMe the task"
      end

      operation 1543323 "timedAwaitJoin"
	package explicit_return_type "void"
	nparams 2
	  param inout name "joinMe" type class_ref 266139 // ForkJoinTask
	  param in name "nanos" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly blocks the given worker waiting for joinMe to
complete or timeout.

@param joinMe the task
@param nanos the wait time for underlying Object.wait"
      end

      operation 1543451 "awaitBlocker"
	private explicit_return_type "void"
	nparams 1
	  param inout name "blocker" type class_ref 266267 // ManagedBlocker
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If necessary, compensates for blocker, and blocks."
      end

      class 266267 "ManagedBlocker"
	visibility public stereotype "interface"
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1557915 "block"
	  public explicit_return_type "boolean"
	  nparams 0
	  nexceptions 1
	    exception class_ref 155547 // InterruptedException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Possibly blocks the current thread, for example waiting for
a lock or condition.

@return {@code true} if no additional blocking is necessary
(i.e., if isReleasable would return true)
@throws InterruptedException if interrupted while waiting
(the method is not required to do so, but is allowed to)"
	end

	operation 1558043 "isReleasable"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns {@code true} if blocking is unnecessary."
	end
      end

      operation 1543579 "addWorker"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Creating, registering and deregistring workers

Tries to create and start a worker; minimally rolls back counts
on failure."
      end

      operation 1543707 "nextWorkerName"
	package return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Callback from ForkJoinWorkerThread constructor to assign a
public name"
      end

      operation 1543835 "registerWorker"
	package explicit_return_type "int"
	nparams 1
	  param inout name "w" type class_ref 265883 // ForkJoinWorkerThread
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Callback from ForkJoinWorkerThread constructor to
determine its poolIndex and record in workers array.

@param w the worker
@return the worker's pool index"
      end

      operation 1543963 "deregisterWorker"
	package explicit_return_type "void"
	nparams 2
	  param inout name "w" type class_ref 265883 // ForkJoinWorkerThread
	  param inout name "ex" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Final callback from terminating worker.  Removes record of
worker from array, and adjusts counts. If pool is shutting
down, tries to complete termination.

@param w the worker"
      end

      operation 1544091 "tryTerminate"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "now" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Shutdown and termination

Possibly initiates and/or completes termination.

@param now if true, unconditionally terminate, else only
if shutdown and empty queue and no active workers
@return true if now terminating or terminated"
      end

      operation 1544219 "startTerminating"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs up to three passes through workers: (0) Setting
termination status for each worker, followed by wakeups up to
queued workers; (1) helping cancel tasks; (2) interrupting
lagging threads (likely in external tasks, but possibly also
blocked in joins).  Each pass repeats previous steps because of
potential lagging thread creation."
      end

      operation 1544347 "cancelSubmissions"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Polls and cancels all submissions. Called only during termination."
      end

      operation 1544475 "terminateWaiters"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to set the termination status of waiting workers, and
then wakes them up (after which they will terminate)."
      end

      operation 1544603 "addQuiescerCount"
	package explicit_return_type "void"
	nparams 1
	  param in name "delta" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " misc ForkJoinWorkerThread support

Increments or decrements quiescerCount. Needed only to prevent
triggering shutdown if a worker is transiently inactive while
checking quiescence.

@param delta 1 for increment, -1 for decrement"
      end

      operation 1544731 "addActiveCount"
	package explicit_return_type "void"
	nparams 1
	  param in name "delta" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Directly increments or decrements active count without queuing.
This method is used to transiently assert inactivation while
checking quiescence.

@param delta 1 for increment, -1 for decrement"
      end

      operation 1544859 "idlePerActive"
	package explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate (non-atomic) number of idle threads per
active thread."
      end

      operation 1544987 "ForkJoinPool"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Exported methods
 Constructors

Creates a {@code ForkJoinPool} with parallelism equal to {@link
java.lang.Runtime#availableProcessors}, using the {@linkplain
#defaultForkJoinWorkerThreadFactory default thread factory},
no UncaughtExceptionHandler, and non-async LIFO processing mode."
      end

      operation 1545115 "ForkJoinPool"
	public explicit_return_type ""
	nparams 1
	  param in name "parallelism" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ForkJoinPool} with the indicated parallelism
level, the {@linkplain
#defaultForkJoinWorkerThreadFactory default thread factory},
no UncaughtExceptionHandler, and non-async LIFO processing mode.

@param parallelism the parallelism level
@throws IllegalArgumentException if parallelism less than or
        equal to zero, or greater than implementation limit"
      end

      operation 1545243 "ForkJoinPool"
	public explicit_return_type ""
	nparams 4
	  param in name "parallelism" explicit_type "int"
	  param inout name "factory" type class_ref 265755 // ForkJoinWorkerThreadFactory
	  param inout name "handler" type class_ref 161435 // UncaughtExceptionHandler
	  param inout name "asyncMode" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code ForkJoinPool} with the given parameters.

@param parallelism the parallelism level. For default value,
use {@link java.lang.Runtime#availableProcessors}.
@param factory the factory for creating new threads. For default value,
use {@link #defaultForkJoinWorkerThreadFactory}.
@param handler the handler for internal worker threads that
terminate due to unrecoverable errors encountered while executing
tasks. For default value, use {@code null}.
@param asyncMode if true,
establishes local first-in-first-out scheduling mode for forked
tasks that are never joined. This mode may be more appropriate
than default locally stack-based mode in applications in which
worker threads only process event-style asynchronous tasks.
For default value, use {@code false}.
@throws IllegalArgumentException if parallelism less than or
        equal to zero, or greater than implementation limit
@throws NullPointerException if the factory is null"
      end

      operation 1545371 "invoke"
	public explicit_return_type "T"
	nparams 1
	  param inout name "task" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Execution methods

Performs the given task, returning its result upon completion.
If the computation encounters an unchecked Exception or Error,
it is rethrown as the outcome of this invocation.  Rethrown
exceptions behave in the same way as regular exceptions, but,
when possible, contain stack traces (as displayed for example
using {@code ex.printStackTrace()}) of both the current thread
as well as the thread actually encountering the exception;
minimally only the latter.

@param task the task
@return the task's result
@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution"
      end

      operation 1545499 "forkOrSubmit"
	private explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unless terminating, forks task if within an ongoing FJ
computation in the current pool, else submits as external task."
      end

      operation 1545627 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Arranges for (asynchronous) execution of the given task.

@param task the task
@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution"
      end

      operation 1545755 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " AbstractExecutorService methods

@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution"
      end

      operation 1545883 "submit"
	public return_type class_ref 266139 // ForkJoinTask
	nparams 1
	  param inout name "task" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Submits a ForkJoinTask for execution.

@param task the task to submit
@return the task
@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution"
      end

      operation 1546011 "submit"
	public return_type class_ref 266139 // ForkJoinTask
	nparams 1
	  param inout name "task" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution"
      end

      operation 1546139 "submit"
	public return_type class_ref 266139 // ForkJoinTask
	nparams 2
	  param inout name "task" type class_ref 151963 // Runnable
	  param inout name "result" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution"
      end

      operation 1546267 "submit"
	public return_type class_ref 266139 // ForkJoinTask
	nparams 1
	  param inout name "task" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException if the task is null
@throws RejectedExecutionException if the task cannot be
        scheduled for execution"
      end

      operation 1546395 "invokeAll"
	public return_type class_ref 131483 // List
	nparams 1
	  param inout name "tasks" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<Future<T>> ${name}${(}${t0}<? extends Callable<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException       {@inheritDoc}
@throws RejectedExecutionException {@inheritDoc}"
      end

      class 266395 "InvokeAll"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 444955 // <generalisation>
	  relation 444955 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 444955 // <generalisation>
	    b parent class_ref 266523 // RecursiveAction
	end

	classrelation 445083 // tasks (<unidirectional association>)
	  relation 445083 --->
	    a role_name "tasks" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ForkJoinTask<T>> ${name}${value};
"
	      classrelation_ref 445083 // tasks (<unidirectional association>)
	    b parent class_ref 138267 // ArrayList
	end

	operation 1554843 "InvokeAll"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "tasks" type class_ref 138267 // ArrayList
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<ForkJoinTask<T>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1554971 "compute"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 378523 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -7914297376763021607L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1555099 "getFactory"
	public return_type class_ref 265755 // ForkJoinWorkerThreadFactory
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the factory used for constructing new workers.

@return the factory used for constructing new workers"
      end

      operation 1555227 "getUncaughtExceptionHandler"
	public return_type class_ref 161435 // UncaughtExceptionHandler
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the handler for internal worker threads that terminate
due to unrecoverable errors encountered while executing tasks.

@return the handler, or {@code null} if none"
      end

      operation 1555355 "getParallelism"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the targeted parallelism level of this pool.

@return the targeted parallelism level of this pool"
      end

      operation 1555483 "getPoolSize"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of worker threads that have started but not
yet terminated.  The result returned by this method may differ
from {@link #getParallelism} when threads are created to
maintain parallelism when others are cooperatively blocked.

@return the number of worker threads"
      end

      operation 1555611 "getAsyncMode"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this pool uses local first-in-first-out
scheduling mode for forked tasks that are never joined.

@return {@code true} if this pool uses async mode"
      end

      operation 1555739 "getRunningThreadCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of worker threads that are
not blocked waiting to join tasks or for other managed
synchronization. This method may overestimate the
number of running threads.

@return the number of worker threads"
      end

      operation 1555867 "getActiveThreadCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of threads that are currently
stealing or executing tasks. This method may overestimate the
number of active threads.

@return the number of active threads"
      end

      operation 1555995 "isQuiescent"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if all worker threads are currently idle.
An idle worker is one that cannot obtain a task to execute
because none are available to steal from other threads, and
there are no pending submissions to the pool. This method is
conservative; it might not return {@code true} immediately upon
idleness of all threads, but will eventually become true if
threads remain inactive.

@return {@code true} if all threads are currently idle"
      end

      operation 1556123 "getStealCount"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the total number of tasks stolen from
one thread's work queue by another. The reported value
underestimates the actual total number of steals when the pool
is not quiescent. This value may be useful for monitoring and
tuning fork/join programs: in general, steal counts should be
high enough to keep threads busy, but low enough to avoid
overhead and contention across threads.

@return the number of steals"
      end

      operation 1556251 "getQueuedTaskCount"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the total number of tasks currently held
in queues by worker threads (but not including tasks submitted
to the pool that have not begun executing). This value is only
an approximation, obtained by iterating across all threads in
the pool. This method may be useful for tuning task
granularities.

@return the number of queued tasks"
      end

      operation 1556379 "getQueuedSubmissionCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of tasks submitted to this
pool that have not yet begun executing.  This method may take
time proportional to the number of submissions.

@return the number of queued submissions"
      end

      operation 1556507 "hasQueuedSubmissions"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if there are any tasks submitted to this
pool that have not yet begun executing.

@return {@code true} if there are any queued submissions"
      end

      operation 1556635 "pollSubmission"
	protected return_type class_ref 266139 // ForkJoinTask
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns the next unexecuted submission if one is
available.  This method may be useful in extensions to this
class that re-assign work in systems with multiple pools.

@return the next submission, or {@code null} if none"
      end

      operation 1556763 "drainTasksTo"
	protected explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super ForkJoinTask<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes all available unexecuted submitted and forked tasks
from scheduling queues and adds them to the given collection,
without altering their execution status. These may include
artificially generated or wrapped tasks. This method is
designed to be invoked only when the pool is known to be
quiescent. Invocations at other times may not remove all
tasks. A failure encountered while attempting to add elements
to collection {@code c} may result in elements being in
neither, either or both collections when the associated
exception is thrown.  The behavior of this operation is
undefined if the specified collection is modified while the
operation is in progress.

@param c the collection to transfer elements into
@return the number of elements transferred"
      end

      operation 1556891 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this pool, as well as its state,
including indications of run state, parallelism level, and
worker and task counts.

@return a string identifying this pool, as well as its state"
      end

      operation 1557019 "shutdown"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initiates an orderly shutdown in which previously submitted
tasks are executed, but no new tasks will be accepted.
Invocation has no additional effect if already shut down.
Tasks that are in the process of being submitted concurrently
during the course of this method may or may not be rejected."
      end

      operation 1557147 "shutdownNow"
	public return_type class_ref 131483 // List
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to cancel and/or stop all tasks, and reject all
subsequently submitted tasks.  Tasks that are in the process of
being submitted or executed concurrently during the course of
this method may or may not be rejected. This method cancels
both existing and unexecuted tasks, in order to permit
termination in the presence of task dependencies. So the method
always returns an empty list (unlike the case for some other
Executors).

@return an empty list"
      end

      operation 1557275 "isTerminated"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if all tasks have completed following shut down.

@return {@code true} if all tasks have completed following shut down"
      end

      operation 1557403 "isTerminating"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if the process of termination has
commenced but not yet completed.  This method may be useful for
debugging. A return of {@code true} reported a sufficient
period after shutdown may indicate that submitted tasks have
ignored or suppressed interruption, or are waiting for IO,
causing this executor not to properly terminate. (See the
advisory notes for class {@link ForkJoinTask} stating that
tasks should not normally entail blocking operations.  But if
they do, they must abort them on interrupt.)

@return {@code true} if terminating but not yet terminated"
      end

      operation 1557531 "isAtLeastTerminating"
	package explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if terminating or terminated. Used by ForkJoinWorkerThread."
      end

      operation 1557659 "isShutdown"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this pool has been shut down.

@return {@code true} if this pool has been shut down"
      end

      operation 1557787 "awaitTermination"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Blocks until all tasks have completed execution after a shutdown
request, or the timeout occurs, or the current thread is
interrupted, whichever happens first.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return {@code true} if this executor terminated and
        {@code false} if the timeout elapsed before termination
@throws InterruptedException if interrupted while waiting"
      end

      operation 1558171 "managedBlock"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "blocker" type class_ref 266267 // ManagedBlocker
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Blocks in accord with the given blocker.  If the current thread
is a {@link ForkJoinWorkerThread}, this method possibly
arranges for a spare thread to be activated if necessary to
ensure sufficient parallelism while the current thread is blocked.

<p>If the caller is not a {@link ForkJoinTask}, this method is
behaviorally equivalent to
 <pre> {@code
while (!blocker.isReleasable())
  if (blocker.block())
    return;
}</pre>

If the caller is a {@code ForkJoinTask}, then the pool may
first be expanded to ensure parallelism, and later adjusted.

@param blocker the blocker
@throws InterruptedException if blocker.block did so"
      end

      operation 1558299 "newTaskFor"
	protected return_type class_ref 253851 // RunnableFuture
	nparams 2
	  param inout name "runnable" type class_ref 151963 // Runnable
	  param inout name "value" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " AbstractExecutorService overrides.  These rely on undocumented
 fact that ForkJoinTask.adapt returns ForkJoinTasks that also
 implement RunnableFuture."
      end

      operation 1558427 "newTaskFor"
	protected return_type class_ref 253851 // RunnableFuture
	nparams 1
	  param inout name "callable" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 445211 // UNSAFE (<unidirectional association>)
	relation 445211 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 445211 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 378651 "ctlOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 378779 "stealCountOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 378907 "blockedCountOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 379035 "quiescerCountOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 379163 "scanGuardOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 379291 "nextWorkerNumberOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 379419 "ABASE"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 379547 "ASHIFT"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 132891 "initialization"
	
	cpp "" ""
	java "  static {
        poolNumberGenerator = new AtomicInteger();
        workerSeedGenerator = new Random();
        modifyThreadPermission = new RuntimePermission(\"modifyThread\");
        defaultForkJoinWorkerThreadFactory =
            new DefaultForkJoinWorkerThreadFactory();
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = ForkJoinPool.class;
            ctlOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"ctl\"));
            stealCountOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"stealCount\"));
            blockedCountOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"blockedCount\"));
            quiescerCountOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"quiescerCount\"));
            scanGuardOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"scanGuard\"));
            nextWorkerNumberOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"nextWorkerNumber\"));
        } catch (Exception e) {
            throw new Error(e);
        }
        Class<?> a = ForkJoinTask[].class;
        ABASE = UNSAFE.arrayBaseOffset(a);
        int s = UNSAFE.arrayIndexScale(a);
        if ((s & (s-1)) != 0)
            throw new Error(\"data type scale not a power of two\");
        ASHIFT = 31 - Integer.numberOfLeadingZeros(s);
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 265883 "ForkJoinWorkerThread"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A thread managed by a {@link ForkJoinPool}, which executes
{@link ForkJoinTask}s.
This class is subclassable solely for the sake of adding
functionality -- there are no overridable methods dealing with
scheduling or execution.  However, you can override initialization
and termination methods surrounding the main task processing loop.
If you do create such a subclass, you will also need to supply a
custom {@link ForkJoinPool.ForkJoinWorkerThreadFactory} to use it
in a {@code ForkJoinPool}.

@since 1.7
@hide
@author Doug Lea"
      classrelation 445339 // <generalisation>
	relation 445339 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 445339 // <generalisation>
	  b parent class_ref 1201420 // Thread
      end

      attribute 379675 "SMASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0xffff"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Overview:

ForkJoinWorkerThreads are managed by ForkJoinPools and perform
ForkJoinTasks. This class includes bookkeeping in support of
worker activation, suspension, and lifecycle control described
in more detail in the internal documentation of class
ForkJoinPool. And as described further below, this class also
includes special-cased support for some ForkJoinTask
methods. But the main mechanics involve work-stealing:

Work-stealing queues are special forms of Deques that support
only three of the four possible end-operations -- push, pop,
and deq (aka steal), under the further constraints that push
and pop are called only from the owning thread, while deq may
be called from other threads.  (If you are unfamiliar with
them, you probably want to read Herlihy and Shavit's book \"The
Art of Multiprocessor programming\", chapter 16 describing these
in more detail before proceeding.)  The main work-stealing
queue design is roughly similar to those in the papers \"Dynamic
Circular Work-Stealing Deque\" by Chase and Lev, SPAA 2005
(http://research.sun.com/scalable/pubs/index.html) and
\"Idempotent work stealing\" by Michael, Saraswat, and Vechev,
PPoPP 2009 (http://portal.acm.org/citation.cfm?id=1504186).
The main differences ultimately stem from gc requirements that
we null out taken slots as soon as we can, to maintain as small
a footprint as possible even in programs generating huge
numbers of tasks. To accomplish this, we shift the CAS
arbitrating pop vs deq (steal) from being on the indices
(\"queueBase\" and \"queueTop\") to the slots themselves (mainly
via method \"casSlotNull()\"). So, both a successful pop and deq
mainly entail a CAS of a slot from non-null to null.  Because
we rely on CASes of references, we do not need tag bits on
queueBase or queueTop.  They are simple ints as used in any
circular array-based queue (see for example ArrayDeque).
Updates to the indices must still be ordered in a way that
guarantees that queueTop == queueBase means the queue is empty,
but otherwise may err on the side of possibly making the queue
appear nonempty when a push, pop, or deq have not fully
committed. Note that this means that the deq operation,
considered individually, is not wait-free. One thief cannot
successfully continue until another in-progress one (or, if
previously empty, a push) completes.  However, in the
aggregate, we ensure at least probabilistic non-blockingness.
If an attempted steal fails, a thief always chooses a different
random victim target to try next. So, in order for one thief to
progress, it suffices for any in-progress deq or new push on
any empty queue to complete.

This approach also enables support for \"async mode\" where local
task processing is in FIFO, not LIFO order; simply by using a
version of deq rather than pop when locallyFifo is true (as set
by the ForkJoinPool).  This allows use in message-passing
frameworks in which tasks are never joined.  However neither
mode considers affinities, loads, cache localities, etc, so
rarely provide the best possible performance on a given
machine, but portably provide good throughput by averaging over
these factors.  (Further, even if we did try to use such
information, we do not usually have a basis for exploiting
it. For example, some sets of tasks profit from cache
affinities, but others are harmed by cache pollution effects.)

When a worker would otherwise be blocked waiting to join a
task, it first tries a form of linear helping: Each worker
records (in field currentSteal) the most recent task it stole
from some other worker. Plus, it records (in field currentJoin)
the task it is currently actively joining. Method joinTask uses
these markers to try to find a worker to help (i.e., steal back
a task from and execute it) that could hasten completion of the
actively joined task. In essence, the joiner executes a task
that would be on its own local deque had the to-be-joined task
not been stolen. This may be seen as a conservative variant of
the approach in Wagner & Calder \"Leapfrogging: a portable
technique for implementing efficient futures\" SIGPLAN Notices,
1993 (http://portal.acm.org/citation.cfm?id=155354). It differs
in that: (1) We only maintain dependency links across workers
upon steals, rather than use per-task bookkeeping.  This may
require a linear scan of workers array to locate stealers, but
usually doesn't because stealers leave hints (that may become
stale/wrong) of where to locate them. This isolates cost to
when it is needed, rather than adding to per-task overhead.
(2) It is \"shallow\", ignoring nesting and potentially cyclic
mutual steals.  (3) It is intentionally racy: field currentJoin
is updated only while actively joining, which means that we
miss links in the chain during long-lived tasks, GC stalls etc
(which is OK since blocking in such cases is usually a good
idea).  (4) We bound the number of attempts to find work (see
MAX_HELP) and fall back to suspending the worker and if
necessary replacing it with another.

Efficient implementation of these algorithms currently relies
on an uncomfortable amount of \"Unsafe\" mechanics. To maintain
correct orderings, reads and writes of variable queueBase
require volatile ordering.  Variable queueTop need not be
volatile because non-local reads always follow those of
queueBase.  Similarly, because they are protected by volatile
queueBase reads, reads of the queue array and its slots by
other threads do not need volatile load semantics, but writes
(in push) require store order and CASes (in pop and deq)
require (volatile) CAS semantics.  (Michael, Saraswat, and
Vechev's algorithm has similar properties, but without support
for nulling slots.)  Since these combinations aren't supported
using ordinary volatiles, the only way to accomplish these
efficiently is to use direct Unsafe calls. (Using external
AtomicIntegers and AtomicReferenceArrays for the indices and
array is significantly slower because of memory locality and
indirection effects.)

Further, performance on most platforms is very sensitive to
placement and sizing of the (resizable) queue array.  Even
though these queues don't usually become all that big, the
initial size must be large enough to counteract cache
contention effects across multiple queues (especially in the
presence of GC cardmarking). Also, to improve thread-locality,
queues are initialized after starting.


Mask for pool indices encoded as shorts
"
      end

      attribute 379803 "INITIAL_QUEUE_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 13"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Capacity of work-stealing queue array upon initialization.
Must be a power of two. Initial size must be at least 4, but is
padded to minimize cache effects.
"
      end

      attribute 379931 "MAXIMUM_QUEUE_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 24"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Maximum size for queue array. Must be a power of two
less than or equal to 1 << (31 - width of array entry) to
ensure lack of index wraparound, but is capped at a lower
value to help users trap runaway computations.

 16M"
      end

      classrelation 445467 // queue (<unidirectional association>)
	relation 445467 --->
	  a role_name "queue" multiplicity "[]" package
	    comment "
The work-stealing queue array. Size must be a power of two.
Initialized when started (as opposed to when constructed), to
improve memory locality.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	    classrelation_ref 445467 // queue (<unidirectional association>)
	  b parent class_ref 266139 // ForkJoinTask
      end

      classrelation 445595 // pool (<unidirectional association>)
	relation 445595 --->
	  a role_name "pool" const_relation package
	    comment "
The pool this thread works in. Accessed directly by ForkJoinTask.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 445595 // pool (<unidirectional association>)
	  b parent class_ref 265627 // ForkJoinPool
      end

      attribute 380059 "queueTop"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Index (mod queue.length) of next queue slot to push to or pop
from. It is written only by owner thread, and accessed by other
threads only after reading (volatile) queueBase.  Both queueTop
and queueBase are allowed to wrap around on overflow, but
(queueTop - queueBase) still estimates size.
"
      end

      attribute 380187 "queueBase"
	volatile package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Index (mod queue.length) of least valid queue slot, which is
always the next position to steal from if nonempty.
"
      end

      attribute 380315 "stealHint"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The index of most recent stealer, used as a hint to avoid
traversal in method helpJoinTask. This is only a hint because a
worker might have had multiple steals and this only holds one
of them (usually the most current). Declared non-volatile,
relying on other prevailing sync to keep reasonably current.
"
      end

      attribute 380443 "poolIndex"
	const_attribute package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Index of this worker in pool array. Set once by pool before
running, and accessed directly by pool to locate this worker in
its workers array.
"
      end

      attribute 380571 "nextWait"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Encoded record for pool task waits. Usages are always
surrounded by volatile reads/writes
"
      end

      attribute 380699 "eventCount"
	volatile package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Complement of poolIndex, offset by count of entries of task
waits. Accessed by ForkJoinPool to manage event waiters.
"
      end

      attribute 380827 "seed"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Seed for random number generator for choosing steal victims.
Uses Marsaglia xorshift. Must be initialized as nonzero.
"
      end

      attribute 380955 "stealCount"
	package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Number of steals. Directly accessed (and reset) by pool when
idle.
"
      end

      attribute 381083 "terminate"
	volatile package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if this worker should or did terminate
"
      end

      attribute 381211 "parked"
	volatile package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Set to true before LockSupport.park; false on return
"
      end

      attribute 381339 "locallyFifo"
	const_attribute package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if use local fifo, not default lifo, for local polling.
Shadows value from ForkJoinPool.
"
      end

      classrelation 445723 // currentSteal (<unidirectional association>)
	relation 445723 --->
	  a role_name "currentSteal" package
	    comment "
The task most recently stolen from another worker (or
submission queue).  All uses are surrounded by enough volatile
reads/writes to maintain as non-volatile.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 445723 // currentSteal (<unidirectional association>)
	  b parent class_ref 266139 // ForkJoinTask
      end

      classrelation 445851 // currentJoin (<unidirectional association>)
	relation 445851 --->
	  a role_name "currentJoin" package
	    comment "
The task currently being joined, set only when actively trying
to help other stealers in helpJoinTask. All uses are surrounded
by enough volatile reads/writes to maintain as non-volatile.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?> ${name}${value};
"
	    classrelation_ref 445851 // currentJoin (<unidirectional association>)
	  b parent class_ref 266139 // ForkJoinTask
      end

      operation 1558555 "ForkJoinWorkerThread"
	protected explicit_return_type ""
	nparams 1
	  param inout name "pool" type class_ref 265627 // ForkJoinPool
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a ForkJoinWorkerThread operating in the given pool.

@param pool the pool this thread works in
@throws NullPointerException if pool is null"
      end

      operation 1558683 "getPool"
	public return_type class_ref 265627 // ForkJoinPool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Public methods

Returns the pool hosting this thread.

@return the pool"
      end

      operation 1558811 "getPoolIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the index number of this thread in its pool.  The
returned value ranges from zero to the maximum number of
threads (minus one) that have ever been created in the pool.
This method may be useful for applications that track status or
collect results per-worker rather than per-task.

@return the index number"
      end

      operation 1558939 "nextSeed"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Randomization

Computes next value for random victim probes and backoffs.
Scans don't require a very high quality generator, but also not
a crummy one.  Marsaglia xor-shift is cheap and works well
enough.  Note: This is manually inlined in FJP.scan() to avoid
writes inside busy loops."
      end

      operation 1559067 "onStart"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Run State management

Initializes internal state after construction but before
processing any tasks. If you override this method, you must
invoke {@code super.onStart()} at the beginning of the method.
Initialization requires care: Most fields must have legal
default values, to ensure that attempted accesses from other
threads work correctly even before this thread starts
processing tasks."
      end

      operation 1559195 "onTermination"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "exception" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs cleanup associated with termination of this worker
thread.  If you override this method, you must invoke
{@code super.onTermination} at the end of the overridden method.

@param exception the exception causing this thread to abort due
to an unrecoverable error, or {@code null} if completed normally"
      end

      operation 1559323 "run"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method is required to be public, but should never be
called explicitly. It performs the main run loop to execute
{@link ForkJoinTask}s."
      end

      operation 1559451 "casSlotNull"
	class_operation private explicit_return_type "boolean"
	nparams 3
	  param inout name "q" type class_ref 266139 // ForkJoinTask
	  param in name "i" explicit_type "int"
	  param inout name "t" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?>[] ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Intrinsics-based atomic writes for queue slots. These are
basically the same as methods in AtomicReferenceArray, but
specialized for (1) ForkJoinTask elements (2) requirement that
nullness and bounds checks have already been performed by
callers and (3) effective offsets are known not to overflow
from int to long (because of MAXIMUM_QUEUE_CAPACITY). We don't
need corresponding version for reads: plain array reads are OK
because they are protected by other volatile reads and are
confirmed by CASes.

Most uses don't actually call these methods, but instead
contain inlined forms that enable more predictable
optimization.  We don't define the version of write used in
pushTask at all, but instead inline there a store-fenced array
slot write.

Also in most methods, as a performance (not correctness) issue,
we'd like to encourage compilers not to arbitrarily postpone
setting queueTop after writing slot.  Currently there is no
intrinsic for arranging this, but using Unsafe putOrderedInt
may be a preferable strategy on some compilers even though its
main effect is a pre-, not post- fence. To simplify possible
changes, the option is left in comments next to the associated
assignments.


CASes slot i of array q from t to null. Caller must ensure q is
non-null and index is in range."
      end

      operation 1559579 "writeSlot"
	class_operation private explicit_return_type "void"
	nparams 3
	  param inout name "q" type class_ref 266139 // ForkJoinTask
	  param in name "i" explicit_type "int"
	  param inout name "t" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?>[] ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs a volatile write of the given task at given slot of
array q.  Caller must ensure q is non-null and index is in
range. This method is used only during resets and backouts."
      end

      operation 1559707 "pushTask"
	package explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " queue methods

Pushes a task. Call only from this thread.

@param t the task. Caller must ensure non-null."
      end

      operation 1559835 "growQueue"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates or doubles queue array.  Transfers elements by
emulating steals (deqs) from old array and placing, oldest
first, into new array."
      end

      operation 1559963 "deqTask"
	package return_type class_ref 266139 // ForkJoinTask
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to take a task from the base of the queue, failing if
empty or contended. Note: Specializations of this code appear
in locallyDeqTask and elsewhere.

@return a task, or null if none or contended"
      end

      operation 1560091 "locallyDeqTask"
	package return_type class_ref 266139 // ForkJoinTask
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to take a task from the base of own queue.  Called only
by this thread.

@return a task, or null if none"
      end

      operation 1560219 "popTask"
	private return_type class_ref 266139 // ForkJoinTask
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a popped task, or null if empty.
Called only by this thread."
      end

      operation 1560347 "unpushTask"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "t" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Specialized version of popTask to pop only if topmost element
is the given task. Called only by this thread.

@param t the task. Caller must ensure non-null."
      end

      operation 1560475 "peekTask"
	package return_type class_ref 266139 // ForkJoinTask
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns next task, or null if empty or contended."
      end

      operation 1560603 "execTask"
	package explicit_return_type "void"
	nparams 1
	  param inout name "t" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Support methods for ForkJoinPool

Runs the given task, plus any local tasks until queue is empty"
      end

      operation 1560731 "cancelTasks"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and cancels all tasks in queue.  Can be called from any
thread."
      end

      operation 1560859 "drainTasksTo"
	package explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super ForkJoinTask<?>> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Drains tasks to given collection c.

@return the number of tasks drained"
      end

      operation 1560987 "getQueueSize"
	package explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Support methods for ForkJoinTask

Returns an estimate of the number of tasks in the queue."
      end

      operation 1561115 "pollLocalTask"
	package return_type class_ref 266139 // ForkJoinTask
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets and removes a local task.

@return a task, if available"
      end

      operation 1561243 "pollTask"
	package return_type class_ref 266139 // ForkJoinTask
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets and removes a local or stolen task.

@return a task, if available"
      end

      attribute 381467 "MAX_HELP"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum stolen->joining link depth allowed in helpJoinTask,
as well as the maximum number of retries (allowing on average
one staleness retry per level) per attempt to instead try
compensation.  Depths for legitimate chains are unbounded, but
we use a fixed constant to avoid (otherwise unchecked) cycles
and bound staleness of traversal parameters at the expense of
sometimes blocking when we could be helping.
"
      end

      operation 1561371 "joinTask"
	package explicit_return_type "int"
	nparams 1
	  param inout name "joinMe" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly runs some tasks and/or blocks, until joinMe is done.

@param joinMe the task to join
@return completion status on exit"
      end

      operation 1561499 "localHelpJoinTask"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "joinMe" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If present, pops and executes the given task, or any other
cancelled task

@return false if any other non-cancelled task exists in local queue"
      end

      operation 1561627 "helpJoinTask"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "joinMe" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to locate and execute tasks for a stealer of the given
task, or in turn one of its stealers, Traces
currentSteal->currentJoin links looking for a thread working on
a descendant of the given task and with a non-empty queue to
steal back and execute tasks from.  The implementation is very
branchy to cope with potential inconsistencies or loops
encountering chains that are stale, unknown, or of length
greater than MAX_HELP links.  All of these cases are dealt with
by just retrying by caller.

@param joinMe the task to join
@return true if ran a task"
      end

      operation 1561755 "tryDeqAndExec"
	private explicit_return_type "int"
	nparams 1
	  param inout name "t" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs an uncommon case for joinTask: If task t is at base of
some workers queue, steals and executes it.

@param t the task
@return t's status"
      end

      operation 1561883 "getEstimatedSurplusTaskCount"
	package explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements ForkJoinTask.getSurplusQueuedTaskCount().  Returns
an estimate of the number of tasks, offset by a function of
number of idle workers.

This method provides a cheap heuristic guide for task
partitioning when programmers, frameworks, tools, or languages
have little or no idea about task granularity.  In essence by
offering this method, we ask users only about tradeoffs in
overhead vs expected throughput and its variance, rather than
how finely to partition tasks.

In a steady state strict (tree-structured) computation, each
thread makes available for stealing enough tasks for other
threads to remain active. Inductively, if all threads play by
the same rules, each thread should make available only a
constant number of tasks.

The minimum useful constant is just 1. But using a value of 1
would require immediate replenishment upon each steal to
maintain enough tasks, which is infeasible.  Further,
partitionings/granularities of offered tasks should minimize
steal rates, which in general means that threads nearer the top
of computation tree should generate more than those nearer the
bottom. In perfect steady state, each thread is at
approximately the same level of computation tree. However,
producing extra tasks amortizes the uncertainty of progress and
diffusion assumptions.

So, users will want to use values larger, but not much larger
than 1 to both smooth over transient shortages and hedge
against uneven progress; as traded off against the cost of
extra task overhead. We leave the user to pick a threshold
value to compare with the results of this call to guide
decisions, but recommend values such as 3.

When all threads are active, it is on average OK to estimate
surplus strictly locally. In steady-state, if one thread is
maintaining say 2 surplus tasks, then so are others. So we can
just use estimated queue length (although note that (queueTop -
queueBase) can be an overestimate because of stealers lagging
increments of queueBase).  However, this strategy alone leads
to serious mis-estimates in some non-steady-state conditions
(ramp-up, ramp-down, other stalls). We can detect many of these
by further considering the number of \"idle\" threads, that are
known to have zero queued tasks, so compensate by a factor of
(#idle/#active) threads."
      end

      operation 1562011 "helpQuiescePool"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Runs tasks until {@code pool.isQuiescent()}. We piggyback on
pool's active count ctl maintenance, but rather than blocking
when tasks cannot be found, we rescan until all others cannot
find tasks either. The bracketing by pool quiescerCounts
updates suppresses pool auto-shutdown mechanics that could
otherwise prematurely terminate the pool because all threads
appear to be inactive."
      end

      classrelation 445979 // UNSAFE (<unidirectional association>)
	relation 445979 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 445979 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 381595 "ABASE"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 381723 "ASHIFT"
	class_attribute const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 133019 "initialization"
	
	cpp "" ""
	java "  static {
        int s;
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> a = ForkJoinTask[].class;
            ABASE = UNSAFE.arrayBaseOffset(a);
            s = UNSAFE.arrayIndexScale(a);
        } catch (Exception e) {
            throw new Error(e);
        }
        if ((s & (s-1)) != 0)
            throw new Error(\"data type scale not a power of two\");
        ASHIFT = 31 - Integer.numberOfLeadingZeros(s);
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 266139 "ForkJoinTask"
      abstract visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 253339 // Future
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Abstract base class for tasks that run within a {@link ForkJoinPool}.
A {@code ForkJoinTask} is a thread-like entity that is much
lighter weight than a normal thread.  Huge numbers of tasks and
subtasks may be hosted by a small number of actual threads in a
ForkJoinPool, at the price of some usage limitations.

<p>A \"main\" {@code ForkJoinTask} begins execution when submitted
to a {@link ForkJoinPool}.  Once started, it will usually in turn
start other subtasks.  As indicated by the name of this class,
many programs using {@code ForkJoinTask} employ only methods
{@link #fork} and {@link #join}, or derivatives such as {@link
#invokeAll(ForkJoinTask...) invokeAll}.  However, this class also
provides a number of other methods that can come into play in
advanced usages, as well as extension mechanics that allow
support of new forms of fork/join processing.

<p>A {@code ForkJoinTask} is a lightweight form of {@link Future}.
The efficiency of {@code ForkJoinTask}s stems from a set of
restrictions (that are only partially statically enforceable)
reflecting their intended use as computational tasks calculating
pure functions or operating on purely isolated objects.  The
primary coordination mechanisms are {@link #fork}, that arranges
asynchronous execution, and {@link #join}, that doesn't proceed
until the task's result has been computed.  Computations should
avoid {@code synchronized} methods or blocks, and should minimize
other blocking synchronization apart from joining other tasks or
using synchronizers such as Phasers that are advertised to
cooperate with fork/join scheduling. Tasks should also not perform
blocking IO, and should ideally access variables that are
completely independent of those accessed by other running
tasks. Minor breaches of these restrictions, for example using
shared output streams, may be tolerable in practice, but frequent
use may result in poor performance, and the potential to
indefinitely stall if the number of threads not waiting for IO or
other external synchronization becomes exhausted. This usage
restriction is in part enforced by not permitting checked
exceptions such as {@code IOExceptions} to be thrown. However,
computations may still encounter unchecked exceptions, that are
rethrown to callers attempting to join them. These exceptions may
additionally include {@link RejectedExecutionException} stemming
from internal resource exhaustion, such as failure to allocate
internal task queues. Rethrown exceptions behave in the same way as
regular exceptions, but, when possible, contain stack traces (as
displayed for example using {@code ex.printStackTrace()}) of both
the thread that initiated the computation as well as the thread
actually encountering the exception; minimally only the latter.

<p>The primary method for awaiting completion and extracting
results of a task is {@link #join}, but there are several variants:
The {@link Future#get} methods support interruptible and/or timed
waits for completion and report results using {@code Future}
conventions. Method {@link #invoke} is semantically
equivalent to {@code fork(); join()} but always attempts to begin
execution in the current thread. The \"<em>quiet</em>\" forms of
these methods do not extract results or report exceptions. These
may be useful when a set of tasks are being executed, and you need
to delay processing of results or exceptions until all complete.
Method {@code invokeAll} (available in multiple versions)
performs the most common form of parallel invocation: forking a set
of tasks and joining them all.

<p>The execution status of tasks may be queried at several levels
of detail: {@link #isDone} is true if a task completed in any way
(including the case where a task was cancelled without executing);
{@link #isCompletedNormally} is true if a task completed without
cancellation or encountering an exception; {@link #isCancelled} is
true if the task was cancelled (in which case {@link #getException}
returns a {@link java.util.concurrent.CancellationException}); and
{@link #isCompletedAbnormally} is true if a task was either
cancelled or encountered an exception, in which case {@link
#getException} will return either the encountered exception or
{@link java.util.concurrent.CancellationException}.

<p>The ForkJoinTask class is not usually directly subclassed.
Instead, you subclass one of the abstract classes that support a
particular style of fork/join processing, typically {@link
RecursiveAction} for computations that do not return results, or
{@link RecursiveTask} for those that do.  Normally, a concrete
ForkJoinTask subclass declares fields comprising its parameters,
established in a constructor, and then defines a {@code compute}
method that somehow uses the control methods supplied by this base
class. While these methods have {@code public} access (to allow
instances of different task subclasses to call each other's
methods), some of them may only be called from within other
ForkJoinTasks (as may be determined using method {@link
#inForkJoinPool}).  Attempts to invoke them in other contexts
result in exceptions or errors, possibly including
{@code ClassCastException}.

<p>Method {@link #join} and its variants are appropriate for use
only when completion dependencies are acyclic; that is, the
parallel computation can be described as a directed acyclic graph
(DAG). Otherwise, executions may encounter a form of deadlock as
tasks cyclically wait for each other.  However, this framework
supports other methods and techniques (for example the use of
{@link Phaser}, {@link #helpQuiesce}, and {@link #complete}) that
may be of use in constructing custom subclasses for problems that
are not statically structured as DAGs.

<p>Most base support methods are {@code final}, to prevent
overriding of implementations that are intrinsically tied to the
underlying lightweight task scheduling framework.  Developers
creating new basic styles of fork/join processing should minimally
implement {@code protected} methods {@link #exec}, {@link
#setRawResult}, and {@link #getRawResult}, while also introducing
an abstract computational method that can be implemented in its
subclasses, possibly relying on other {@code protected} methods
provided by this class.

<p>ForkJoinTasks should perform relatively small amounts of
computation. Large tasks should be split into smaller subtasks,
usually via recursive decomposition. As a very rough rule of thumb,
a task should perform more than 100 and less than 10000 basic
computational steps, and should avoid indefinite looping. If tasks
are too big, then parallelism cannot improve throughput. If too
small, then memory and internal task maintenance overhead may
overwhelm processing.

<p>This class provides {@code adapt} methods for {@link Runnable}
and {@link Callable}, that may be of use when mixing execution of
{@code ForkJoinTasks} with other kinds of tasks. When all tasks are
of this form, consider using a pool constructed in <em>asyncMode</em>.

<p>ForkJoinTasks are {@code Serializable}, which enables them to be
used in extensions such as remote execution frameworks. It is
sensible to serialize tasks only before or after, but not during,
execution. Serialization is not relied on during execution itself.

@since 1.7
@hide
@author Doug Lea"
      classrelation 442907 // <realization>
	relation 442907 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 442907 // <realization>
	  b parent class_ref 253339 // Future
      end

      classrelation 443035 // <realization>
	relation 443035 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 443035 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 376603 "status"
	volatile package explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "See the internal documentation of class ForkJoinPool for a
general implementation overview.  ForkJoinTasks are mainly
responsible for maintaining their \"status\" field amidst relays
to methods in ForkJoinWorkerThread and ForkJoinPool.

The methods of this class are more-or-less layered into
(1) basic status maintenance
(2) execution and awaiting completion
(3) user-level methods that additionally report results.
This is sometimes hard to see because this file orders exported
methods in a way that flows well in javadocs.


The status field holds run control status bits packed into a
single int to minimize footprint and to ensure atomicity (via
CAS).  Status is initially zero, and takes on nonnegative
values until completed, upon which status holds value
NORMAL, CANCELLED, or EXCEPTIONAL. Tasks undergoing blocking
waits by other threads have the SIGNAL bit set.  Completion of
a stolen task with SIGNAL set awakens any waiters via
notifyAll. Even though suboptimal for some purposes, we use
basic builtin wait/notify to take advantage of \"monitor
inflation\" in JVMs that we would otherwise need to emulate to
avoid adding further per-task bookkeeping overhead.  We want
these monitors to be \"fat\", i.e., not use biasing or thin-lock
techniques, so use some odd coding idioms that tend to avoid
them.

 The run status of this task 
 accessed directly by pool and workers"
      end

      attribute 376731 "NORMAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " -1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 376859 "CANCELLED"
	class_attribute const_attribute private explicit_type "int"
	init_value " -2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 376987 "EXCEPTIONAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " -3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 377115 "SIGNAL"
	class_attribute const_attribute private explicit_type "int"
	init_value "  1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1546523 "setCompletion"
	private explicit_return_type "int"
	nparams 1
	  param in name "completion" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Marks completion and wakes up threads waiting to join this task,
also clearing signal request bits.

@param completion one of NORMAL, CANCELLED, EXCEPTIONAL
@return completion status on exit"
      end

      operation 1546651 "tryAwaitDone"
	package explicit_return_type "void"
	nparams 1
	  param in name "millis" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to block a worker thread until completed or timed out.
Uses Object.wait time argument conventions.
May fail on contention or interrupt.

@param millis if > 0, wait time."
      end

      operation 1546779 "externalAwaitDone"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Blocks a non-worker-thread until completion.
@return status upon completion"
      end

      operation 1546907 "externalInterruptibleAwaitDone"
	private explicit_return_type "int"
	nparams 1
	  param in name "millis" explicit_type "long"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Blocks a non-worker-thread until completion or interruption or timeout."
      end

      operation 1547035 "doExec"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Primary execution method for stolen tasks. Unless done, calls
exec and records status if completed, but doesn't wait for
completion otherwise."
      end

      operation 1547163 "doJoin"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Primary mechanics for join, get, quietlyJoin.
@return status upon completion"
      end

      operation 1547291 "doInvoke"
	private explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Primary mechanics for invoke, quietlyInvoke.
@return status upon completion"
      end

      class 266651 "ExceptionNode"
	visibility package 
	nactuals 1
	actual class class_ref 157851 // WeakReference
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 443547 // <realization>
	  relation 443547 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 443547 // <realization>
	    b parent class_ref 157851 // WeakReference
	end

	classrelation 443675 // ex (<unidirectional association>)
	  relation 443675 --->
	    a role_name "ex" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 443675 // ex (<unidirectional association>)
	    b parent class_ref 134683 // Throwable
	end

	classrelation 443803 // next (<unidirectional association>)
	  relation 443803 --->
	    a role_name "next" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 443803 // next (<unidirectional association>)
	    b parent class_ref 266651 // ExceptionNode
	end

	attribute 377371 "thrower"
	  const_attribute package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " use id not ref to avoid weak cycles"
	end

	operation 1547419 "ExceptionNode"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "task" type class_ref 266139 // ForkJoinTask
	    param inout name "ex" type class_ref 134683 // Throwable
	    param inout name "next" type class_ref 266651 // ExceptionNode
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<?> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 443163 // exceptionTable (<unidirectional association>)
	relation 443163 --->
	  a role_name "exceptionTable" multiplicity "[]" class_relation const_relation private
	    comment " Exception table support

Table of exceptions thrown by tasks, to enable reporting by
callers. Because exceptions are rare, we don't directly keep
them with task objects, but instead use a weak ref table.  Note
that cancellation exceptions don't appear in the table, but are
instead recorded as status values.

Note: These statics are initialized below in static block.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 443163 // exceptionTable (<unidirectional association>)
	  b parent class_ref 266651 // ExceptionNode
      end

      classrelation 443291 // exceptionTableLock (<unidirectional association>)
	relation 443291 --->
	  a role_name "exceptionTableLock" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 443291 // exceptionTableLock (<unidirectional association>)
	  b parent class_ref 254235 // ReentrantLock
      end

      classrelation 443419 // exceptionTableRefQueue (<unidirectional association>)
	relation 443419 --->
	  a role_name "exceptionTableRefQueue" class_relation const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	    classrelation_ref 443419 // exceptionTableRefQueue (<unidirectional association>)
	  b parent class_ref 152475 // ReferenceQueue
      end

      attribute 377243 "EXCEPTION_MAP_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 32"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Fixed capacity for exceptionTable.
"
      end

      operation 1547547 "setExceptionalCompletion"
	private explicit_return_type "int"
	nparams 1
	  param inout name "ex" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Records exception and sets exceptional completion.

@return status on exit"
      end

      operation 1547675 "clearExceptionalCompletion"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes exception node and clears status"
      end

      operation 1547803 "getThrowableException"
	private return_type class_ref 134683 // Throwable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a rethrowable exception for the given task, if
available. To provide accurate stack traces, if the exception
was not thrown by the current thread, we try to create a new
exception of the same type as the one thrown, but with the
recorded exception as its cause. If there is no such
constructor, we instead try to use a no-arg constructor,
followed by initCause, to the same effect. If none of these
apply, or any fail due to other exceptions, we return the
recorded exception, which is still correct, although it may
contain a misleading stack trace.

@return the exception, or null if none"
      end

      operation 1547931 "expungeStaleExceptions"
	class_operation private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Poll stale refs and remove them. Call only while holding lock."
      end

      operation 1548059 "helpExpungeStaleExceptions"
	class_operation package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If lock is available, poll stale refs and remove them.
Called from ForkJoinPool when pools become quiescent."
      end

      operation 1548187 "reportResult"
	private explicit_return_type "V"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Report the result of invoke or join; called only upon
non-normal return of internal versions."
      end

      operation 1548315 "fork"
	public return_type class_ref 266139 // ForkJoinTask
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<V> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " public methods

Arranges to asynchronously execute this task.  While it is not
necessarily enforced, it is a usage error to fork a task more
than once unless it has completed and been reinitialized.
Subsequent modifications to the state of this task or any data
it operates on are not necessarily consistently observable by
any thread other than the one executing it unless preceded by a
call to {@link #join} or related methods, or a call to {@link
#isDone} returning {@code true}.

<p>This method may be invoked only from within {@code
ForkJoinPool} computations (as may be determined using method
{@link #inForkJoinPool}).  Attempts to invoke in other contexts
result in exceptions or errors, possibly including {@code
ClassCastException}.

@return {@code this}, to simplify usage"
      end

      operation 1548443 "join"
	public explicit_return_type "V"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the result of the computation when it {@link #isDone is
done}.  This method differs from {@link #get()} in that
abnormal completion results in {@code RuntimeException} or
{@code Error}, not {@code ExecutionException}, and that
interrupts of the calling thread do <em>not</em> cause the
method to abruptly return by throwing {@code
InterruptedException}.

@return the computed result"
      end

      operation 1548571 "invoke"
	public explicit_return_type "V"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Commences performing this task, awaits its completion if
necessary, and returns its result, or throws an (unchecked)
{@code RuntimeException} or {@code Error} if the underlying
computation did so.

@return the computed result"
      end

      operation 1548699 "invokeAll"
	class_operation public explicit_return_type "void"
	nparams 2
	  param inout name "t1" type class_ref 266139 // ForkJoinTask
	  param inout name "t2" type class_ref 266139 // ForkJoinTask
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forks the given tasks, returning when {@code isDone} holds for
each task or an (unchecked) exception is encountered, in which
case the exception is rethrown. If more than one task
encounters an exception, then this method throws any one of
these exceptions. If any task encounters an exception, the
other may be cancelled. However, the execution status of
individual tasks is not guaranteed upon exceptional return. The
status of each task may be obtained using {@link
#getException()} and related methods to check if they have been
cancelled, completed normally or exceptionally, or left
unprocessed.

<p>This method may be invoked only from within {@code
ForkJoinPool} computations (as may be determined using method
{@link #inForkJoinPool}).  Attempts to invoke in other contexts
result in exceptions or errors, possibly including {@code
ClassCastException}.

@param t1 the first task
@param t2 the second task
@throws NullPointerException if any task is null"
      end

      operation 1548827 "invokeAll"
	class_operation public explicit_return_type "void"
	nparams 1
	  param inout name "tasks" explicit_type "ForkJoinTask<?>..."
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forks the given tasks, returning when {@code isDone} holds for
each task or an (unchecked) exception is encountered, in which
case the exception is rethrown. If more than one task
encounters an exception, then this method throws any one of
these exceptions. If any task encounters an exception, others
may be cancelled. However, the execution status of individual
tasks is not guaranteed upon exceptional return. The status of
each task may be obtained using {@link #getException()} and
related methods to check if they have been cancelled, completed
normally or exceptionally, or left unprocessed.

<p>This method may be invoked only from within {@code
ForkJoinPool} computations (as may be determined using method
{@link #inForkJoinPool}).  Attempts to invoke in other contexts
result in exceptions or errors, possibly including {@code
ClassCastException}.

@param tasks the tasks
@throws NullPointerException if any task is null"
      end

      operation 1548955 "invokeAll"
	class_operation public return_type class_ref 160667 // Collection
	nparams 1
	  param inout name "tasks" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T extends ForkJoinTask<?>> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forks all tasks in the specified collection, returning when
{@code isDone} holds for each task or an (unchecked) exception
is encountered, in which case the exception is rethrown. If
more than one task encounters an exception, then this method
throws any one of these exceptions. If any task encounters an
exception, others may be cancelled. However, the execution
status of individual tasks is not guaranteed upon exceptional
return. The status of each task may be obtained using {@link
#getException()} and related methods to check if they have been
cancelled, completed normally or exceptionally, or left
unprocessed.

<p>This method may be invoked only from within {@code
ForkJoinPool} computations (as may be determined using method
{@link #inForkJoinPool}).  Attempts to invoke in other contexts
result in exceptions or errors, possibly including {@code
ClassCastException}.

@param tasks the collection of tasks
@return the tasks argument, to simplify usage
@throws NullPointerException if tasks or any element are null"
      end

      operation 1549083 "cancel"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "mayInterruptIfRunning" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to cancel execution of this task. This attempt will
fail if the task has already completed or could not be
cancelled for some other reason. If successful, and this task
has not started when {@code cancel} is called, execution of
this task is suppressed. After this method returns
successfully, unless there is an intervening call to {@link
#reinitialize}, subsequent calls to {@link #isCancelled},
{@link #isDone}, and {@code cancel} will return {@code true}
and calls to {@link #join} and related methods will result in
{@code CancellationException}.

<p>This method may be overridden in subclasses, but if so, must
still ensure that these properties hold. In particular, the
{@code cancel} method itself must not throw exceptions.

<p>This method is designed to be invoked by <em>other</em>
tasks. To terminate the current task, you can just return or
throw an unchecked exception from its computation method, or
invoke {@link #completeExceptionally}.

@param mayInterruptIfRunning this value has no effect in the
default implementation because interrupts are not used to
control cancellation.

@return {@code true} if this task is now cancelled"
      end

      operation 1549211 "cancelIgnoringExceptions"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Cancels, ignoring any exceptions thrown by cancel. Used during
worker and pool shutdown. Cancel is spec'ed not to throw any
exceptions, but if it does anyway, we have no recourse during
shutdown, so guard against this case."
      end

      operation 1549339 "isDone"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1549467 "isCancelled"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1549595 "isCompletedAbnormally"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this task threw an exception or was cancelled.

@return {@code true} if this task threw an exception or was cancelled"
      end

      operation 1549723 "isCompletedNormally"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this task completed without throwing an
exception and was not cancelled.

@return {@code true} if this task completed without throwing an
exception and was not cancelled"
      end

      operation 1549851 "getException"
	public return_type class_ref 134683 // Throwable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the exception thrown by the base computation, or a
{@code CancellationException} if cancelled, or {@code null} if
none or if the method has not yet completed.

@return the exception, or {@code null} if none"
      end

      operation 1549979 "completeExceptionally"
	public explicit_return_type "void"
	nparams 1
	  param inout name "ex" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes this task abnormally, and if not already aborted or
cancelled, causes it to throw the given exception upon
{@code join} and related operations. This method may be used
to induce exceptions in asynchronous tasks, or to force
completion of tasks that would not otherwise complete.  Its use
in other situations is discouraged.  This method is
overridable, but overridden versions must invoke {@code super}
implementation to maintain guarantees.

@param ex the exception to throw. If this exception is not a
{@code RuntimeException} or {@code Error}, the actual exception
thrown will be a {@code RuntimeException} with cause {@code ex}."
      end

      operation 1550107 "complete"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Completes this task, and if not already aborted or cancelled,
returning the given value as the result of subsequent
invocations of {@code join} and related operations. This method
may be used to provide results for asynchronous tasks, or to
provide alternative handling for tasks that would not otherwise
complete normally. Its use in other situations is
discouraged. This method is overridable, but overridden
versions must invoke {@code super} implementation to maintain
guarantees.

@param value the result value for this task"
      end

      operation 1550235 "get"
	public explicit_return_type "V"
	nparams 0
	nexceptions 2
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253595 // ExecutionException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for the computation to complete, and then
retrieves its result.

@return the computed result
@throws CancellationException if the computation was cancelled
@throws ExecutionException if the computation threw an
exception
@throws InterruptedException if the current thread is not a
member of a ForkJoinPool and was interrupted while waiting"
      end

      operation 1550363 "get"
	public explicit_return_type "V"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 3
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253595 // ExecutionException
	  exception class_ref 253723 // TimeoutException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Waits if necessary for at most the given time for the computation
to complete, and then retrieves its result, if available.

@param timeout the maximum time to wait
@param unit the time unit of the timeout argument
@return the computed result
@throws CancellationException if the computation was cancelled
@throws ExecutionException if the computation threw an
exception
@throws InterruptedException if the current thread is not a
member of a ForkJoinPool and was interrupted while waiting
@throws TimeoutException if the wait timed out"
      end

      operation 1550491 "quietlyJoin"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Joins this task, without returning its result or throwing its
exception. This method may be useful when processing
collections of tasks when some have been cancelled or otherwise
known to have aborted."
      end

      operation 1550619 "quietlyInvoke"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Commences performing this task and awaits its completion if
necessary, without returning its result or throwing its
exception."
      end

      operation 1550747 "helpQuiesce"
	class_operation public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly executes tasks until the pool hosting the current task
{@link ForkJoinPool#isQuiescent is quiescent}. This method may
be of use in designs in which many tasks are forked, but none
are explicitly joined, instead executing them until all are
processed.

<p>This method may be invoked only from within {@code
ForkJoinPool} computations (as may be determined using method
{@link #inForkJoinPool}).  Attempts to invoke in other contexts
result in exceptions or errors, possibly including {@code
ClassCastException}."
      end

      operation 1550875 "reinitialize"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resets the internal bookkeeping state of this task, allowing a
subsequent {@code fork}. This method allows repeated reuse of
this task, but only if reuse occurs when this task has either
never been forked, or has been forked, then completed and all
outstanding joins of this task have also completed. Effects
under any other usage conditions are not guaranteed.
This method may be useful when executing
pre-constructed trees of subtasks in loops.

<p>Upon completion of this method, {@code isDone()} reports
{@code false}, and {@code getException()} reports {@code
null}. However, the value returned by {@code getRawResult} is
unaffected. To clear this value, you can invoke {@code
setRawResult(null)}."
      end

      operation 1551003 "getPool"
	class_operation public return_type class_ref 265627 // ForkJoinPool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the pool hosting the current task execution, or null
if this task is executing outside of any ForkJoinPool.

@see #inForkJoinPool
@return the pool, or {@code null} if none"
      end

      operation 1551131 "inForkJoinPool"
	class_operation public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if the current thread is a {@link
ForkJoinWorkerThread} executing as a ForkJoinPool computation.

@return {@code true} if the current thread is a {@link
ForkJoinWorkerThread} executing as a ForkJoinPool computation,
or {@code false} otherwise"
      end

      operation 1551259 "tryUnfork"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to unschedule this task for execution. This method will
typically succeed if this task is the most recently forked task
by the current thread, and has not commenced executing in
another thread.  This method may be useful when arranging
alternative local processing of tasks that could have been, but
were not, stolen.

<p>This method may be invoked only from within {@code
ForkJoinPool} computations (as may be determined using method
{@link #inForkJoinPool}).  Attempts to invoke in other contexts
result in exceptions or errors, possibly including {@code
ClassCastException}.

@return {@code true} if unforked"
      end

      operation 1551387 "getQueuedTaskCount"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of tasks that have been
forked by the current worker thread but not yet executed. This
value may be useful for heuristic decisions about whether to
fork other tasks.

<p>This method may be invoked only from within {@code
ForkJoinPool} computations (as may be determined using method
{@link #inForkJoinPool}).  Attempts to invoke in other contexts
result in exceptions or errors, possibly including {@code
ClassCastException}.

@return the number of tasks"
      end

      operation 1551515 "getSurplusQueuedTaskCount"
	class_operation public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of how many more locally queued tasks are
held by the current worker thread than there are other worker
threads that might steal them.  This value may be useful for
heuristic decisions about whether to fork other tasks. In many
usages of ForkJoinTasks, at steady state, each worker should
aim to maintain a small constant surplus (for example, 3) of
tasks, and to process computations locally if this threshold is
exceeded.

<p>This method may be invoked only from within {@code
ForkJoinPool} computations (as may be determined using method
{@link #inForkJoinPool}).  Attempts to invoke in other contexts
result in exceptions or errors, possibly including {@code
ClassCastException}.

@return the surplus number of tasks, which may be negative"
      end

      operation 1551643 "getRawResult"
	abstract public explicit_return_type "V"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Extension methods

Returns the result that would be returned by {@link #join}, even
if this task completed abnormally, or {@code null} if this task
is not known to have been completed.  This method is designed
to aid debugging, as well as to support extensions. Its use in
any other context is discouraged.

@return the result, or {@code null} if not completed"
      end

      operation 1551771 "setRawResult"
	abstract protected explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces the given value to be returned as a result.  This method
is designed to support extensions, and should not in general be
called otherwise.

@param value the value"
      end

      operation 1551899 "exec"
	abstract protected explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Immediately performs the base action of this task.  This method
is designed to support extensions, and should not in general be
called otherwise. The return value controls whether this task
is considered to be done normally. It may return false in
asynchronous actions that require explicit invocations of
{@link #complete} to become joinable. It may also throw an
(unchecked) exception to indicate abnormal exit.

@return {@code true} if completed normally"
      end

      operation 1552027 "peekNextLocalTask"
	class_operation protected return_type class_ref 266139 // ForkJoinTask
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns, but does not unschedule or execute, a task queued by
the current thread but not yet executed, if one is immediately
available. There is no guarantee that this task will actually
be polled or executed next. Conversely, this method may return
null even if a task exists but cannot be accessed without
contention with other threads.  This method is designed
primarily to support extensions, and is unlikely to be useful
otherwise.

<p>This method may be invoked only from within {@code
ForkJoinPool} computations (as may be determined using method
{@link #inForkJoinPool}).  Attempts to invoke in other contexts
result in exceptions or errors, possibly including {@code
ClassCastException}.

@return the next task, or {@code null} if none are available"
      end

      operation 1552155 "pollNextLocalTask"
	class_operation protected return_type class_ref 266139 // ForkJoinTask
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unschedules and returns, without executing, the next task
queued by the current thread but not yet executed.  This method
is designed primarily to support extensions, and is unlikely to
be useful otherwise.

<p>This method may be invoked only from within {@code
ForkJoinPool} computations (as may be determined using method
{@link #inForkJoinPool}).  Attempts to invoke in other contexts
result in exceptions or errors, possibly including {@code
ClassCastException}.

@return the next task, or {@code null} if none are available"
      end

      operation 1552283 "pollTask"
	class_operation protected return_type class_ref 266139 // ForkJoinTask
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unschedules and returns, without executing, the next task
queued by the current thread but not yet executed, if one is
available, or if not available, a task that was forked by some
other thread, if available. Availability may be transient, so a
{@code null} result does not necessarily imply quiescence
of the pool this task is operating in.  This method is designed
primarily to support extensions, and is unlikely to be useful
otherwise.

<p>This method may be invoked only from within {@code
ForkJoinPool} computations (as may be determined using method
{@link #inForkJoinPool}).  Attempts to invoke in other contexts
result in exceptions or errors, possibly including {@code
ClassCastException}.

@return a task, or {@code null} if none are available"
      end

      class 266779 "AdaptedRunnable"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 266139 // ForkJoinTask
	  rank 0 explicit_value ""
	actual class class_ref 253851 // RunnableFuture
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 443931 // <realization>
	  relation 443931 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 443931 // <realization>
	    b parent class_ref 266139 // ForkJoinTask
	end

	classrelation 444059 // <realization>
	  relation 444059 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 444059 // <realization>
	    b parent class_ref 253851 // RunnableFuture
	end

	classrelation 444187 // runnable (<unidirectional association>)
	  relation 444187 --->
	    a role_name "runnable" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 444187 // runnable (<unidirectional association>)
	    b parent class_ref 151963 // Runnable
	end

	attribute 377499 "resultOnCompletion"
	  const_attribute package explicit_type "T"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 377627 "result"
	  package explicit_type "T"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1552411 "AdaptedRunnable"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "runnable" type class_ref 151963 // Runnable
	    param inout name "result" explicit_type "T"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1552539 "getRawResult"
	  public explicit_return_type "T"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1552667 "setRawResult"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1552795 "exec"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1552923 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 377755 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 5232453952276885070L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 266907 "AdaptedCallable"
	visibility package 
	nformals 1
	formal name "T" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 266139 // ForkJoinTask
	  rank 0 explicit_value ""
	actual class class_ref 253851 // RunnableFuture
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 444315 // <realization>
	  relation 444315 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 444315 // <realization>
	    b parent class_ref 266139 // ForkJoinTask
	end

	classrelation 444443 // <realization>
	  relation 444443 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 444443 // <realization>
	    b parent class_ref 253851 // RunnableFuture
	end

	classrelation 444571 // callable (<unidirectional association>)
	  relation 444571 --->
	    a role_name "callable" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? extends T> ${name}${value};
"
	      classrelation_ref 444571 // callable (<unidirectional association>)
	    b parent class_ref 253467 // Callable
	end

	attribute 377883 "result"
	  package explicit_type "T"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1553051 "AdaptedCallable"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "callable" type class_ref 253467 // Callable
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1553179 "getRawResult"
	  public explicit_return_type "T"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1553307 "setRawResult"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "v" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1553435 "exec"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1553563 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	attribute 378011 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 2838392045355241008L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      operation 1553691 "adapt"
	class_operation public return_type class_ref 266139 // ForkJoinTask
	nparams 1
	  param inout name "runnable" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code ForkJoinTask} that performs the {@code run}
method of the given {@code Runnable} as its action, and returns
a null result upon {@link #join}.

@param runnable the runnable action
@return the task"
      end

      operation 1553819 "adapt"
	class_operation public return_type class_ref 266139 // ForkJoinTask
	nparams 2
	  param inout name "runnable" type class_ref 151963 // Runnable
	  param inout name "result" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code ForkJoinTask} that performs the {@code run}
method of the given {@code Runnable} as its action, and returns
the given result upon {@link #join}.

@param runnable the runnable action
@param result the result upon completion
@return the task"
      end

      operation 1553947 "adapt"
	class_operation public return_type class_ref 266139 // ForkJoinTask
	nparams 1
	  param inout name "callable" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<? extends T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a new {@code ForkJoinTask} that performs the {@code call}
method of the given {@code Callable} as its action, and returns
its result upon {@link #join}, translating any checked exceptions
encountered into {@code RuntimeException}.

@param callable the callable action
@return the task"
      end

      attribute 378139 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -7721805057305804111L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Serialization support"
      end

      operation 1554075 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves the state to a stream (that is, serializes it).

@serialData the current run status and the exception thrown
during execution, or {@code null} if none
@param s the stream"
      end

      operation 1554203 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes the instance from a stream (that is, deserializes it).

@param s the stream"
      end

      classrelation 444699 // UNSAFE (<unidirectional association>)
	relation 444699 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 444699 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 378267 "statusOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 132763 "initialization"
	
	cpp "" ""
	java "  static {
        exceptionTableLock = new ReentrantLock();
        exceptionTableRefQueue = new ReferenceQueue<Object>();
        exceptionTable = new ExceptionNode[EXCEPTION_MAP_CAPACITY];
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            statusOffset = UNSAFE.objectFieldOffset
                (ForkJoinTask.class.getDeclaredField(\"status\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 266523 "RecursiveAction"
      abstract visibility public 
      nactuals 1
      actual class class_ref 266139 // ForkJoinTask
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A recursive resultless {@link ForkJoinTask}.  This class
establishes conventions to parameterize resultless actions as
{@code Void} {@code ForkJoinTask}s. Because {@code null} is the
only valid value of type {@code Void}, methods such as {@code join}
always return {@code null} upon completion.

<p><b>Sample Usages.</b> Here is a simple but complete ForkJoin
sort that sorts a given {@code long[]} array:

 <pre> {@code
static class SortTask extends RecursiveAction {
  final long[] array; final int lo, hi;
  SortTask(long[] array, int lo, int hi) {
    this.array = array; this.lo = lo; this.hi = hi;
  }
  SortTask(long[] array) { this(array, 0, array.length); }
  protected void compute() {
    if (hi - lo < THRESHOLD)
      sortSequentially(lo, hi);
    else {
      int mid = (lo + hi) >>> 1;
      invokeAll(new SortTask(array, lo, mid),
                new SortTask(array, mid, hi));
      merge(lo, mid, hi);
    }
  }
  // implementation details follow:
  final static int THRESHOLD = 1000;
  void sortSequentially(int lo, int hi) {
    Arrays.sort(array, lo, hi);
  }
  void merge(int lo, int mid, int hi) {
    long[] buf = Arrays.copyOfRange(array, lo, mid);
    for (int i = 0, j = lo, k = mid; i < buf.length; j++)
      array[j] = (k == hi || buf[i] < array[k]) ?
        buf[i++] : array[k++];
  }
}}</pre>

You could then sort {@code anArray} by creating {@code new
SortTask(anArray)} and invoking it in a ForkJoinPool.  As a more
concrete simple example, the following task increments each element
of an array:
 <pre> {@code
class IncrementTask extends RecursiveAction {
  final long[] array; final int lo, hi;
  IncrementTask(long[] array, int lo, int hi) {
    this.array = array; this.lo = lo; this.hi = hi;
  }
  protected void compute() {
    if (hi - lo < THRESHOLD) {
      for (int i = lo; i < hi; ++i)
        array[i]++;
    }
    else {
      int mid = (lo + hi) >>> 1;
      invokeAll(new IncrementTask(array, lo, mid),
                new IncrementTask(array, mid, hi));
    }
  }
}}</pre>

<p>The following example illustrates some refinements and idioms
that may lead to better performance: RecursiveActions need not be
fully recursive, so long as they maintain the basic
divide-and-conquer approach. Here is a class that sums the squares
of each element of a double array, by subdividing out only the
right-hand-sides of repeated divisions by two, and keeping track of
them with a chain of {@code next} references. It uses a dynamic
threshold based on method {@code getSurplusQueuedTaskCount}, but
counterbalances potential excess partitioning by directly
performing leaf actions on unstolen tasks rather than further
subdividing.

 <pre> {@code
double sumOfSquares(ForkJoinPool pool, double[] array) {
  int n = array.length;
  Applyer a = new Applyer(array, 0, n, null);
  pool.invoke(a);
  return a.result;
}

class Applyer extends RecursiveAction {
  final double[] array;
  final int lo, hi;
  double result;
  Applyer next; // keeps track of right-hand-side tasks
  Applyer(double[] array, int lo, int hi, Applyer next) {
    this.array = array; this.lo = lo; this.hi = hi;
    this.next = next;
  }

  double atLeaf(int l, int h) {
    double sum = 0;
    for (int i = l; i < h; ++i) // perform leftmost base step
      sum += array[i] * array[i];
    return sum;
  }

  protected void compute() {
    int l = lo;
    int h = hi;
    Applyer right = null;
    while (h - l > 1 && getSurplusQueuedTaskCount() <= 3) {
       int mid = (l + h) >>> 1;
       right = new Applyer(array, mid, h, right);
       right.fork();
       h = mid;
    }
    double sum = atLeaf(l, h);
    while (right != null) {
       if (right.tryUnfork()) // directly calculate if not stolen
         sum += right.atLeaf(right.lo, right.hi);
      else {
         right.join();
         sum += right.result;
       }
       right = right.next;
     }
    result = sum;
  }
}}</pre>

@since 1.7
@hide
@author Doug Lea"
      classrelation 444827 // <realization>
	relation 444827 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 444827 // <realization>
	  b parent class_ref 266139 // ForkJoinTask
      end

      attribute 378395 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5232453952276485070L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1554331 "compute"
	abstract protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The main computation performed by this task."
      end

      operation 1554459 "getRawResult"
	public return_type class_ref 162715 // Void
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code null}.

@return {@code null} always"
      end

      operation 1554587 "setRawResult"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "mustBeNull" type class_ref 162715 // Void
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requires null completion value."
      end

      operation 1554715 "exec"
	protected explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements execution conventions for RecursiveActions."
      end
    end

    class 267035 "LinkedBlockingDeque"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 232859 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 254875 // BlockingDeque
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

An optionally-bounded {@linkplain BlockingDeque blocking deque} based on
linked nodes.

<p> The optional capacity bound constructor argument serves as a
way to prevent excessive expansion. The capacity, if unspecified,
is equal to {@link Integer#MAX_VALUE}.  Linked nodes are
dynamically created upon each insertion unless this would bring the
deque above capacity.

<p>Most operations run in constant time (ignoring time spent
blocking).  Exceptions include {@link #remove(Object) remove},
{@link #removeFirstOccurrence removeFirstOccurrence}, {@link
#removeLastOccurrence removeLastOccurrence}, {@link #contains
contains}, {@link #iterator iterator.remove()}, and the bulk
operations, all of which run in linear time.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

@since 1.6
@author  Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 446107 // <realization>
	relation 446107 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 446107 // <realization>
	  b parent class_ref 232859 // AbstractQueue
      end

      classrelation 446235 // <realization>
	relation 446235 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 446235 // <realization>
	  b parent class_ref 254875 // BlockingDeque
      end

      classrelation 446363 // <realization>
	relation 446363 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 446363 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 381851 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -387911632671998426L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Implemented as a simple doubly-linked list protected by a
single lock and using conditions to manage blocking.

To implement weakly consistent iterators, it appears we need to
keep all Nodes GC-reachable from a predecessor dequeued Node.
That would cause two problems:
- allow a rogue Iterator to cause unbounded memory retention
- cause cross-generational linking of old Nodes to new Nodes if
  a Node was tenured while live, which generational GCs have a
  hard time dealing with, causing repeated major collections.
However, only non-deleted Nodes need to be reachable from
dequeued Nodes, and reachability does not necessarily have to
be of the kind understood by the GC.  We use the trick of
linking a Node that has just been dequeued to itself.  Such a
self-link implicitly means to jump to \"first\" (for next links)
or \"last\" (for prev links).


We have \"diamond\" multiple interface/abstract class inheritance
here, and that introduces ambiguities. Often we want the
BlockingDeque javadoc combined with the AbstractQueue
implementation, so a lot of method specs are duplicated here.
"
      end

      class 267163 "Node"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 381979 "item"
	  package explicit_type "E"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "The item, or null if this node has been removed.
"
	end

	classrelation 446491 // prev (<unidirectional association>)
	  relation 446491 --->
	    a role_name "prev" package
	      comment "
One of:
- the real predecessor Node
- this Node, meaning the predecessor is tail
- null, meaning there is no predecessor

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 446491 // prev (<unidirectional association>)
	    b parent class_ref 267163 // Node
	end

	classrelation 446619 // next (<unidirectional association>)
	  relation 446619 --->
	    a role_name "next" package
	      comment "
One of:
- the real successor Node
- this Node, meaning the successor is head
- null, meaning there is no successor

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 446619 // next (<unidirectional association>)
	    b parent class_ref 267163 // Node
	end

	operation 1562139 "Node"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "x" explicit_type "E"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 446747 // first (<unidirectional association>)
	relation 446747 --->
	  a role_name "first" package
	    comment "
Pointer to first node.
Invariant: (first == null && last == null) ||
           (first.prev == null && first.item != null)

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 446747 // first (<unidirectional association>)
	  b parent class_ref 267163 // Node
      end

      classrelation 446875 // last (<unidirectional association>)
	relation 446875 --->
	  a role_name "last" package
	    comment "
Pointer to last node.
Invariant: (first == null && last == null) ||
           (last.next == null && last.item != null)

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 446875 // last (<unidirectional association>)
	  b parent class_ref 267163 // Node
      end

      attribute 382107 "count"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Number of items in the deque "
      end

      attribute 382235 "capacity"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Maximum number of items in the deque "
      end

      classrelation 447003 // lock (<unidirectional association>)
	relation 447003 --->
	  a role_name "lock" init_value " new ReentrantLock()" const_relation package
	    comment " Main lock guarding all access 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 447003 // lock (<unidirectional association>)
	  b parent class_ref 254235 // ReentrantLock
      end

      classrelation 447131 // notEmpty (<unidirectional association>)
	relation 447131 --->
	  a role_name "notEmpty" init_value " lock.newCondition()" const_relation private
	    comment " Condition for waiting takes 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 447131 // notEmpty (<unidirectional association>)
	  b parent class_ref 254363 // Condition
      end

      classrelation 447259 // notFull (<unidirectional association>)
	relation 447259 --->
	  a role_name "notFull" init_value " lock.newCondition()" const_relation private
	    comment " Condition for waiting puts 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 447259 // notFull (<unidirectional association>)
	  b parent class_ref 254363 // Condition
      end

      operation 1562267 "LinkedBlockingDeque"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedBlockingDeque} with a capacity of
{@link Integer#MAX_VALUE}."
      end

      operation 1562395 "LinkedBlockingDeque"
	public explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedBlockingDeque} with the given (fixed) capacity.

@param capacity the capacity of this deque
@throws IllegalArgumentException if {@code capacity} is less than 1"
      end

      operation 1562523 "LinkedBlockingDeque"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedBlockingDeque} with a capacity of
{@link Integer#MAX_VALUE}, initially containing the elements of
the given collection, added in traversal order of the
collection's iterator.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null"
      end

      operation 1562651 "linkFirst"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "node" type class_ref 267163 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Basic linking and unlinking operations, called only while holding lock

Links node as first element, or returns false if full."
      end

      operation 1562779 "linkLast"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "node" type class_ref 267163 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Links node as last element, or returns false if full."
      end

      operation 1562907 "unlinkFirst"
	private explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns first element, or null if empty."
      end

      operation 1563035 "unlinkLast"
	private explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes and returns last element, or null if empty."
      end

      operation 1563163 "unlink"
	package explicit_return_type "void"
	nparams 1
	  param inout name "x" type class_ref 267163 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks x."
      end

      operation 1563291 "addFirst"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " BlockingDeque methods

@throws IllegalStateException {@inheritDoc}
@throws NullPointerException  {@inheritDoc}"
      end

      operation 1563419 "addLast"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws IllegalStateException {@inheritDoc}
@throws NullPointerException  {@inheritDoc}"
      end

      operation 1563547 "offerFirst"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}"
      end

      operation 1563675 "offerLast"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}"
      end

      operation 1563803 "putFirst"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}"
      end

      operation 1563931 "putLast"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}"
      end

      operation 1564059 "offerFirst"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}"
      end

      operation 1564187 "offerLast"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}"
      end

      operation 1564315 "removeFirst"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1564443 "removeLast"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1564571 "pollFirst"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1564699 "pollLast"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1564827 "takeFirst"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1564955 "takeLast"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1565083 "pollFirst"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1565211 "pollLast"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1565339 "getFirst"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1565467 "getLast"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1565595 "peekFirst"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1565723 "peekLast"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1565851 "removeFirstOccurrence"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1565979 "removeLastOccurrence"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1566107 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " BlockingQueue methods

Inserts the specified element at the end of this deque unless it would
violate capacity restrictions.  When using a capacity-restricted deque,
it is generally preferable to use method {@link #offer(Object) offer}.

<p>This method is equivalent to {@link #addLast}.

@throws IllegalStateException if the element cannot be added at this
        time due to capacity restrictions
@throws NullPointerException if the specified element is null"
      end

      operation 1566235 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException if the specified element is null"
      end

      operation 1566363 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}"
      end

      operation 1566491 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException {@inheritDoc}
@throws InterruptedException {@inheritDoc}"
      end

      operation 1566619 "remove"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of the queue represented by this deque.
This method differs from {@link #poll poll} only in that it throws an
exception if this deque is empty.

<p>This method is equivalent to {@link #removeFirst() removeFirst}.

@return the head of the queue represented by this deque
@throws NoSuchElementException if this deque is empty"
      end

      operation 1566747 "poll"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1566875 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1567003 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1567131 "element"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves, but does not remove, the head of the queue represented by
this deque.  This method differs from {@link #peek peek} only in that
it throws an exception if this deque is empty.

<p>This method is equivalent to {@link #getFirst() getFirst}.

@return the head of the queue represented by this deque
@throws NoSuchElementException if this deque is empty"
      end

      operation 1567259 "peek"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1567387 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of additional elements that this deque can ideally
(in the absence of memory or resource constraints) accept without
blocking. This is always equal to the initial capacity of this deque
less the current {@code size} of this deque.

<p>Note that you <em>cannot</em> always tell if an attempt to insert
an element will succeed by inspecting {@code remainingCapacity}
because it may be the case that another thread is about to
insert or remove an element."
      end

      operation 1567515 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      operation 1567643 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 160667 // Collection
	  param in name "maxElements" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      operation 1567771 "push"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Stack methods

@throws IllegalStateException {@inheritDoc}
@throws NullPointerException  {@inheritDoc}"
      end

      operation 1567899 "pop"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NoSuchElementException {@inheritDoc}"
      end

      operation 1568027 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Collection methods

Removes the first occurrence of the specified element from this deque.
If the deque does not contain the element, it is unchanged.
More formally, removes the first element {@code e} such that
{@code o.equals(e)} (if such an element exists).
Returns {@code true} if this deque contained the specified element
(or equivalently, if this deque changed as a result of the call).

<p>This method is equivalent to
{@link #removeFirstOccurrence(Object) removeFirstOccurrence}.

@param o element to be removed from this deque, if present
@return {@code true} if this deque changed as a result of the call"
      end

      operation 1568155 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this deque.

@return the number of elements in this deque"
      end

      operation 1568283 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this deque contains the specified element.
More formally, returns {@code true} if and only if this deque contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this deque
@return {@code true} if this deque contains the specified element"
      end

      operation 1568411 "toArray"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "TODO: Add support for more efficient bulk operations.

We don't want to acquire the lock for every iteration, but we
also want other threads a chance to interact with the
collection, especially when count is close to capacity.

     /**
      * Adds all of the elements in the specified collection to this
      * queue.  Attempts to addAll of a queue to itself result in
      * {@code IllegalArgumentException}. Further, the behavior of
      * this operation is undefined if the specified collection is
      * modified while the operation is in progress.
      *
      * @param c collection containing elements to be added to this queue
      * @return {@code true} if this queue changed as a result of the call
      * @throws ClassCastException            {@inheritDoc}
      * @throws NullPointerException          {@inheritDoc}
      * @throws IllegalArgumentException      {@inheritDoc}
      * @throws IllegalStateException         {@inheritDoc}
      * @see #add(Object)
      */
     public boolean addAll(Collection<? extends E> c) {
         if (c == null)
             throw new NullPointerException();
         if (c == this)
             throw new IllegalArgumentException();
         final ReentrantLock lock = this.lock;
         lock.lock();
         try {
             boolean modified = false;
             for (E e : c)
                 if (linkLast(e))
                     modified = true;
             return modified;
         } finally {
             lock.unlock();
         }
     }

Returns an array containing all of the elements in this deque, in
proper sequence (from first to last element).

<p>The returned array will be \"safe\" in that no references to it are
maintained by this deque.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this deque"
      end

      operation 1568539 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an array containing all of the elements in this deque, in
proper sequence; the runtime type of the returned array is that of
the specified array.  If the deque fits in the specified array, it
is returned therein.  Otherwise, a new array is allocated with the
runtime type of the specified array and the size of this deque.

<p>If this deque fits in the specified array with room to spare
(i.e., the array has more elements than this deque), the element in
the array immediately following the end of the deque is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a deque known to contain only strings.
The following code can be used to dump the deque into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the deque are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this deque
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this deque
@throws NullPointerException if the specified array is null"
      end

      operation 1568667 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1568795 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this deque.
The deque will be empty after this call returns."
      end

      operation 1568923 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this deque in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException
ConcurrentModificationException}, and guarantees to traverse
elements as they existed upon construction of the iterator, and
may (but is not guaranteed to) reflect any modifications
subsequent to construction.

@return an iterator over the elements in this deque in proper sequence"
      end

      operation 1569051 "descendingIterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this deque in reverse
sequential order.  The elements will be returned in order from
last (tail) to first (head).

<p>The returned iterator is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException
ConcurrentModificationException}, and guarantees to traverse
elements as they existed upon construction of the iterator, and
may (but is not guaranteed to) reflect any modifications
subsequent to construction.

@return an iterator over the elements in this deque in reverse order"
      end

      class 267291 "AbstractItr"
	abstract visibility private 
	nactuals 1
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 447387 // <realization>
	  relation 447387 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 447387 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 447515 // next (<unidirectional association>)
	  relation 447515 --->
	    a role_name "next" package
	      comment "
The next node to return in next()

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 447515 // next (<unidirectional association>)
	    b parent class_ref 267163 // Node
	end

	attribute 382363 "nextItem"
	  package explicit_type "E"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "nextItem holds on to item fields because once we claim that
an element exists in hasNext(), we must return item read
under lock (in advance()) even if it was in the process of
being removed when hasNext() was called.
"
	end

	classrelation 447643 // lastRet (<unidirectional association>)
	  relation 447643 --->
	    a role_name "lastRet" private
	      comment "
Node returned by most recent call to next. Needed by remove.
Reset to null if this element is deleted by a call to remove.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 447643 // lastRet (<unidirectional association>)
	    b parent class_ref 267163 // Node
	end

	operation 1569179 "firstNode"
	  abstract package return_type class_ref 267163 // Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1569307 "nextNode"
	  abstract package return_type class_ref 267163 // Node
	  nparams 1
	    param inout name "n" type class_ref 267163 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1569435 "AbstractItr"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1569563 "succ"
	  private return_type class_ref 267163 // Node
	  nparams 1
	    param inout name "n" type class_ref 267163 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the successor node of the given non-null, but
possibly previously deleted, node."
	end

	operation 1569691 "advance"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Advances next."
	end

	operation 1569819 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1569947 "next"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1570075 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 267419 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 267035 // LinkedBlockingDeque
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 447771 // <generalisation>
	  relation 447771 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 447771 // <generalisation>
	    b parent class_ref 267291 // AbstractItr
	end

	operation 1570203 "firstNode"
	  package return_type class_ref 267163 // Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1570331 "nextNode"
	  package return_type class_ref 267163 // Node
	  nparams 1
	    param inout name "n" type class_ref 267163 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 267547 "DescendingItr"
	visibility private 
	nactuals 1
	actual class class_ref 267035 // LinkedBlockingDeque
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 447899 // <generalisation>
	  relation 447899 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 447899 // <generalisation>
	    b parent class_ref 267291 // AbstractItr
	end

	operation 1570459 "firstNode"
	  package return_type class_ref 267163 // Node
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1570587 "nextNode"
	  package return_type class_ref 267163 // Node
	  nparams 1
	    param inout name "n" type class_ref 267163 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1570715 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves the state of this deque to a stream (that is, serializes it).

@serialData The capacity (int), followed by elements (each an
{@code Object}) in the proper order, followed by a null
@param s the stream"
      end

      operation 1570843 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this deque from a stream (that is, deserializes it).

@param s the stream"
      end
    end

    class 267675 "LinkedBlockingQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 232859 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 254107 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

An optionally-bounded {@linkplain BlockingQueue blocking queue} based on
linked nodes.
This queue orders elements FIFO (first-in-first-out).
The <em>head</em> of the queue is that element that has been on the
queue the longest time.
The <em>tail</em> of the queue is that element that has been on the
queue the shortest time. New elements
are inserted at the tail of the queue, and the queue retrieval
operations obtain elements at the head of the queue.
Linked queues typically have higher throughput than array-based queues but
less predictable performance in most concurrent applications.

<p> The optional capacity bound constructor argument serves as a
way to prevent excessive queue expansion. The capacity, if unspecified,
is equal to {@link Integer#MAX_VALUE}.  Linked nodes are
dynamically created upon each insertion unless this would bring the
queue above capacity.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection
"
      classrelation 448027 // <realization>
	relation 448027 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 448027 // <realization>
	  b parent class_ref 232859 // AbstractQueue
      end

      classrelation 448155 // <realization>
	relation 448155 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 448155 // <realization>
	  b parent class_ref 254107 // BlockingQueue
      end

      classrelation 448283 // <realization>
	relation 448283 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 448283 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 382491 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -6903933977591709194L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 267803 "Node"
	visibility package 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 382619 "item"
	  package explicit_type "E"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 448411 // next (<unidirectional association>)
	  relation 448411 --->
	    a role_name "next" package
	      comment "
One of:
- the real successor Node
- this Node, meaning the successor is head.next
- null, meaning there is no successor (this is the last node)

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 448411 // next (<unidirectional association>)
	    b parent class_ref 267803 // Node
	end

	operation 1570971 "Node"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "x" explicit_type "E"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      attribute 382747 "capacity"
	const_attribute private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The capacity bound, or Integer.MAX_VALUE if none "
      end

      classrelation 448539 // count (<unidirectional association>)
	relation 448539 --->
	  a role_name "count" init_value " new AtomicInteger()" const_relation private
	    comment " Current number of elements 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 448539 // count (<unidirectional association>)
	  b parent class_ref 154779 // AtomicInteger
      end

      classrelation 448667 // head (<unidirectional association>)
	relation 448667 --->
	  a role_name "head" package
	    comment "
Head of linked list.
Invariant: head.item == null

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 448667 // head (<unidirectional association>)
	  b parent class_ref 267803 // Node
      end

      classrelation 448795 // last (<unidirectional association>)
	relation 448795 --->
	  a role_name "last" private
	    comment "
Tail of linked list.
Invariant: last.next == null

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 448795 // last (<unidirectional association>)
	  b parent class_ref 267803 // Node
      end

      classrelation 448923 // takeLock (<unidirectional association>)
	relation 448923 --->
	  a role_name "takeLock" init_value " new ReentrantLock()" const_relation private
	    comment " Lock held by take, poll, etc 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 448923 // takeLock (<unidirectional association>)
	  b parent class_ref 254235 // ReentrantLock
      end

      classrelation 449051 // notEmpty (<unidirectional association>)
	relation 449051 --->
	  a role_name "notEmpty" init_value " takeLock.newCondition()" const_relation private
	    comment " Wait queue for waiting takes 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 449051 // notEmpty (<unidirectional association>)
	  b parent class_ref 254363 // Condition
      end

      classrelation 449179 // putLock (<unidirectional association>)
	relation 449179 --->
	  a role_name "putLock" init_value " new ReentrantLock()" const_relation private
	    comment " Lock held by put, offer, etc 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 449179 // putLock (<unidirectional association>)
	  b parent class_ref 254235 // ReentrantLock
      end

      classrelation 449307 // notFull (<unidirectional association>)
	relation 449307 --->
	  a role_name "notFull" init_value " putLock.newCondition()" const_relation private
	    comment " Wait queue for waiting puts 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 449307 // notFull (<unidirectional association>)
	  b parent class_ref 254363 // Condition
      end

      operation 1571099 "signalNotEmpty"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signals a waiting take. Called only from put/offer (which do not
otherwise ordinarily lock takeLock.)"
      end

      operation 1571227 "signalNotFull"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Signals a waiting put. Called only from take/poll."
      end

      operation 1571355 "enqueue"
	private explicit_return_type "void"
	nparams 1
	  param inout name "node" type class_ref 267803 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Links node at end of queue.

@param node the node"
      end

      operation 1571483 "dequeue"
	private explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a node from head of queue.

@return the node"
      end

      operation 1571611 "fullyLock"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Lock to prevent both puts and takes."
      end

      operation 1571739 "fullyUnlock"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlock to allow both puts and takes."
      end

      operation 1571867 "LinkedBlockingQueue"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "     /**
      * Tells whether both locks are held by current thread.
      */
     boolean isFullyLocked() {
         return (putLock.isHeldByCurrentThread() &&
                 takeLock.isHeldByCurrentThread());
     }

Creates a {@code LinkedBlockingQueue} with a capacity of
{@link Integer#MAX_VALUE}."
      end

      operation 1571995 "LinkedBlockingQueue"
	public explicit_return_type ""
	nparams 1
	  param in name "capacity" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedBlockingQueue} with the given (fixed) capacity.

@param capacity the capacity of this queue
@throws IllegalArgumentException if {@code capacity} is not greater
        than zero"
      end

      operation 1572123 "LinkedBlockingQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedBlockingQueue} with a capacity of
{@link Integer#MAX_VALUE}, initially containing the elements of the
given collection,
added in traversal order of the collection's iterator.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null"
      end

      operation 1572251 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is overridden to remove the reference to collections
 greater in size than Integer.MAX_VALUE

Returns the number of elements in this queue.

@return the number of elements in this queue"
      end

      operation 1572379 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " this doc comment is a modified copy of the inherited doc comment,
 without the reference to unlimited queues.

Returns the number of additional elements that this queue can ideally
(in the absence of memory or resource constraints) accept without
blocking. This is always equal to the initial capacity of this queue
less the current {@code size} of this queue.

<p>Note that you <em>cannot</em> always tell if an attempt to insert
an element will succeed by inspecting {@code remainingCapacity}
because it may be the case that another thread is about to
insert or remove an element."
      end

      operation 1572507 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue, waiting if
necessary for space to become available.

@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}"
      end

      operation 1572635 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue, waiting if
necessary up to the specified wait time for space to become available.

@return {@code true} if successful, or {@code false} if
        the specified waiting time elapses before space is available.
@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}"
      end

      operation 1572763 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue if it is
possible to do so immediately without exceeding the queue's capacity,
returning {@code true} upon success and {@code false} if this queue
is full.
When using a capacity-restricted queue, this method is generally
preferable to method {@link BlockingQueue#add add}, which can fail to
insert an element only by throwing an exception.

@throws NullPointerException if the specified element is null"
      end

      operation 1572891 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1573019 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1573147 "poll"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1573275 "peek"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1573403 "unlink"
	package explicit_return_type "void"
	nparams 2
	  param inout name "p" type class_ref 267803 // Node
	  param inout name "trail" type class_ref 267803 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<E> ${p0}, ${t1}<E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks interior Node p with predecessor trail."
      end

      operation 1573531 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element {@code e} such
that {@code o.equals(e)}, if this queue contains one or more such
elements.
Returns {@code true} if this queue contained the specified element
(or equivalently, if this queue changed as a result of the call).

@param o element to be removed from this queue, if present
@return {@code true} if this queue changed as a result of the call"
      end

      operation 1573659 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains the specified element.
More formally, returns {@code true} if and only if this queue contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this queue
@return {@code true} if this queue contains the specified element"
      end

      operation 1573787 "toArray"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence.

<p>The returned array will be \"safe\" in that no references to it are
maintained by this queue.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this queue"
      end

      operation 1573915 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an array containing all of the elements in this queue, in
proper sequence; the runtime type of the returned array is that of
the specified array.  If the queue fits in the specified array, it
is returned therein.  Otherwise, a new array is allocated with the
runtime type of the specified array and the size of this queue.

<p>If this queue fits in the specified array with room to spare
(i.e., the array has more elements than this queue), the element in
the array immediately following the end of the queue is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a queue known to contain only strings.
The following code can be used to dump the queue into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the queue are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this queue
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this queue
@throws NullPointerException if the specified array is null"
      end

      operation 1574043 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1574171 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this queue.
The queue will be empty after this call returns."
      end

      operation 1574299 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      operation 1574427 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 160667 // Collection
	  param in name "maxElements" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      operation 1574555 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException
ConcurrentModificationException}, and guarantees to traverse
elements as they existed upon construction of the iterator, and
may (but is not guaranteed to) reflect any modifications
subsequent to construction.

@return an iterator over the elements in this queue in proper sequence"
      end

      class 267931 "Itr"
	visibility private 
	nactuals 1
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 449435 // <realization>
	  relation 449435 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 449435 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 449563 // current (<unidirectional association>)
	  relation 449563 --->
	    a role_name "current" private
	      comment "
Basic weakly-consistent iterator.  At all times hold the next
item to hand out so that if hasNext() reports true, we will
still have it to return even if lost race with a take etc.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 449563 // current (<unidirectional association>)
	    b parent class_ref 267803 // Node
	end

	classrelation 449691 // lastRet (<unidirectional association>)
	  relation 449691 --->
	    a role_name "lastRet" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	      classrelation_ref 449691 // lastRet (<unidirectional association>)
	    b parent class_ref 267803 // Node
	end

	attribute 382875 "currentElement"
	  private explicit_type "E"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1574683 "Itr"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1574811 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1574939 "nextNode"
	  private return_type class_ref 267803 // Node
	  nparams 1
	    param inout name "p" type class_ref 267803 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${t0}<E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns the next live successor of p, or null if no such.

Unlike other traversal methods, iterators need to handle both:
- dequeued nodes (p.next == p)
- (possibly multiple) interior removed nodes (p.item == null)"
	end

	operation 1575067 "next"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1575195 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1575323 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves the state to a stream (that is, serializes it).

@serialData The capacity is emitted (int), followed by all of
its elements (each an {@code Object}) in the proper order,
followed by a null
@param s the stream"
      end

      operation 1575451 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes this queue from a stream (that is, deserializes it).

@param s the stream"
      end
    end

    class 268059 "LinkedTransferQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 232859 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 268187 // TransferQueue
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

An unbounded {@link TransferQueue} based on linked nodes.
This queue orders elements FIFO (first-in-first-out) with respect
to any given producer.  The <em>head</em> of the queue is that
element that has been on the queue the longest time for some
producer.  The <em>tail</em> of the queue is that element that has
been on the queue the shortest time for some producer.

<p>Beware that, unlike in most collections, the {@code size} method
is <em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these queues, determining the current number
of elements requires a traversal of the elements, and so may report
inaccurate results if this collection is modified during traversal.
Additionally, the bulk operations {@code addAll},
{@code removeAll}, {@code retainAll}, {@code containsAll},
{@code equals}, and {@code toArray} are <em>not</em> guaranteed
to be performed atomically. For example, an iterator operating
concurrently with an {@code addAll} operation might view only some
of the added elements.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

<p>Memory consistency effects: As with other concurrent
collections, actions in a thread prior to placing an object into a
{@code LinkedTransferQueue}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions subsequent to the access or removal of that element from
the {@code LinkedTransferQueue} in another thread.

@since 1.7
@hide
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 449819 // <realization>
	relation 449819 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 449819 // <realization>
	  b parent class_ref 232859 // AbstractQueue
      end

      classrelation 450075 // <realization>
	relation 450075 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 450075 // <realization>
	  b parent class_ref 268187 // TransferQueue
      end

      classrelation 450203 // <realization>
	relation 450203 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 450203 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 383003 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3223113410248163686L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 383131 "MP"
	class_attribute const_attribute private explicit_type "boolean"
	init_value "
        Runtime.getRuntime().availableProcessors() > 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "*** Overview of Dual Queues with Slack ***

Dual Queues, introduced by Scherer and Scott
(http://www.cs.rice.edu/~wns1/papers/2004-DISC-DDS.pdf) are
(linked) queues in which nodes may represent either data or
requests.  When a thread tries to enqueue a data node, but
encounters a request node, it instead \"matches\" and removes it;
and vice versa for enqueuing requests. Blocking Dual Queues
arrange that threads enqueuing unmatched requests block until
other threads provide the match. Dual Synchronous Queues (see
Scherer, Lea, & Scott
http://www.cs.rochester.edu/u/scott/papers/2009_Scherer_CACM_SSQ.pdf)
additionally arrange that threads enqueuing unmatched data also
block.  Dual Transfer Queues support all of these modes, as
dictated by callers.

A FIFO dual queue may be implemented using a variation of the
Michael & Scott (M&S) lock-free queue algorithm
(http://www.cs.rochester.edu/u/scott/papers/1996_PODC_queues.pdf).
It maintains two pointer fields, \"head\", pointing to a
(matched) node that in turn points to the first actual
(unmatched) queue node (or null if empty); and \"tail\" that
points to the last node on the queue (or again null if
empty). For example, here is a possible queue with four data
elements:

 head                tail
   |                   |
   v                   v
   M -> U -> U -> U -> U

The M&S queue algorithm is known to be prone to scalability and
overhead limitations when maintaining (via CAS) these head and
tail pointers. This has led to the development of
contention-reducing variants such as elimination arrays (see
Moir et al http://portal.acm.org/citation.cfm?id=1074013) and
optimistic back pointers (see Ladan-Mozes & Shavit
http://people.csail.mit.edu/edya/publications/OptimisticFIFOQueue-journal.pdf).
However, the nature of dual queues enables a simpler tactic for
improving M&S-style implementations when dual-ness is needed.

In a dual queue, each node must atomically maintain its match
status. While there are other possible variants, we implement
this here as: for a data-mode node, matching entails CASing an
\"item\" field from a non-null data value to null upon match, and
vice-versa for request nodes, CASing from null to a data
value. (Note that the linearization properties of this style of
queue are easy to verify -- elements are made available by
linking, and unavailable by matching.) Compared to plain M&S
queues, this property of dual queues requires one additional
successful atomic operation per enq/deq pair. But it also
enables lower cost variants of queue maintenance mechanics. (A
variation of this idea applies even for non-dual queues that
support deletion of interior elements, such as
j.u.c.ConcurrentLinkedQueue.)

Once a node is matched, its match status can never again
change.  We may thus arrange that the linked list of them
contain a prefix of zero or more matched nodes, followed by a
suffix of zero or more unmatched nodes. (Note that we allow
both the prefix and suffix to be zero length, which in turn
means that we do not use a dummy header.)  If we were not
concerned with either time or space efficiency, we could
correctly perform enqueue and dequeue operations by traversing
from a pointer to the initial node; CASing the item of the
first unmatched node on match and CASing the next field of the
trailing node on appends. (Plus some special-casing when
initially empty).  While this would be a terrible idea in
itself, it does have the benefit of not requiring ANY atomic
updates on head/tail fields.

We introduce here an approach that lies between the extremes of
never versus always updating queue (head and tail) pointers.
This offers a tradeoff between sometimes requiring extra
traversal steps to locate the first and/or last unmatched
nodes, versus the reduced overhead and contention of fewer
updates to queue pointers. For example, a possible snapshot of
a queue is:

 head           tail
   |              |
   v              v
   M -> M -> U -> U -> U -> U

The best value for this \"slack\" (the targeted maximum distance
between the value of \"head\" and the first unmatched node, and
similarly for \"tail\") is an empirical matter. We have found
that using very small constants in the range of 1-3 work best
over a range of platforms. Larger values introduce increasing
costs of cache misses and risks of long traversal chains, while
smaller values increase CAS contention and overhead.

Dual queues with slack differ from plain M&S dual queues by
virtue of only sometimes updating head or tail pointers when
matching, appending, or even traversing nodes; in order to
maintain a targeted slack.  The idea of \"sometimes\" may be
operationalized in several ways. The simplest is to use a
per-operation counter incremented on each traversal step, and
to try (via CAS) to update the associated queue pointer
whenever the count exceeds a threshold. Another, that requires
more overhead, is to use random number generators to update
with a given probability per traversal step.

In any strategy along these lines, because CASes updating
fields may fail, the actual slack may exceed targeted
slack. However, they may be retried at any time to maintain
targets.  Even when using very small slack values, this
approach works well for dual queues because it allows all
operations up to the point of matching or appending an item
(hence potentially allowing progress by another thread) to be
read-only, thus not introducing any further contention. As
described below, we implement this by performing slack
maintenance retries only after these points.

As an accompaniment to such techniques, traversal overhead can
be further reduced without increasing contention of head
pointer updates: Threads may sometimes shortcut the \"next\" link
path from the current \"head\" node to be closer to the currently
known first unmatched node, and similarly for tail. Again, this
may be triggered with using thresholds or randomization.

These ideas must be further extended to avoid unbounded amounts
of costly-to-reclaim garbage caused by the sequential \"next\"
links of nodes starting at old forgotten head nodes: As first
described in detail by Boehm
(http://portal.acm.org/citation.cfm?doid=503272.503282) if a GC
delays noticing that any arbitrarily old node has become
garbage, all newer dead nodes will also be unreclaimed.
(Similar issues arise in non-GC environments.)  To cope with
this in our implementation, upon CASing to advance the head
pointer, we set the \"next\" link of the previous head to point
only to itself; thus limiting the length of connected dead lists.
(We also take similar care to wipe out possibly garbage
retaining values held in other Node fields.)  However, doing so
adds some further complexity to traversal: If any \"next\"
pointer links to itself, it indicates that the current thread
has lagged behind a head-update, and so the traversal must
continue from the \"head\".  Traversals trying to find the
current tail starting from \"tail\" may also encounter
self-links, in which case they also continue at \"head\".

It is tempting in slack-based scheme to not even use CAS for
updates (similarly to Ladan-Mozes & Shavit). However, this
cannot be done for head updates under the above link-forgetting
mechanics because an update may leave head at a detached node.
And while direct writes are possible for tail updates, they
increase the risk of long retraversals, and hence long garbage
chains, which can be much more costly than is worthwhile
considering that the cost difference of performing a CAS vs
write is smaller when they are not triggered on each operation
(especially considering that writes and CASes equally require
additional GC bookkeeping (\"write barriers\") that are sometimes
more costly than the writes themselves because of contention).

*** Overview of implementation ***

We use a threshold-based approach to updates, with a slack
threshold of two -- that is, we update head/tail when the
current pointer appears to be two or more steps away from the
first/last node. The slack value is hard-wired: a path greater
than one is naturally implemented by checking equality of
traversal pointers except when the list has only one element,
in which case we keep slack threshold at one. Avoiding tracking
explicit counts across method calls slightly simplifies an
already-messy implementation. Using randomization would
probably work better if there were a low-quality dirt-cheap
per-thread one available, but even ThreadLocalRandom is too
heavy for these purposes.

With such a small slack threshold value, it is not worthwhile
to augment this with path short-circuiting (i.e., unsplicing
interior nodes) except in the case of cancellation/removal (see
below).

We allow both the head and tail fields to be null before any
nodes are enqueued; initializing upon first append.  This
simplifies some other logic, as well as providing more
efficient explicit control paths instead of letting JVMs insert
implicit NullPointerExceptions when they are null.  While not
currently fully implemented, we also leave open the possibility
of re-nulling these fields when empty (which is complicated to
arrange, for little benefit.)

All enqueue/dequeue operations are handled by the single method
\"xfer\" with parameters indicating whether to act as some form
of offer, put, poll, take, or transfer (each possibly with
timeout). The relative complexity of using one monolithic
method outweighs the code bulk and maintenance problems of
using separate methods for each case.

Operation consists of up to three phases. The first is
implemented within method xfer, the second in tryAppend, and
the third in method awaitMatch.

1. Try to match an existing node

   Starting at head, skip already-matched nodes until finding
   an unmatched node of opposite mode, if one exists, in which
   case matching it and returning, also if necessary updating
   head to one past the matched node (or the node itself if the
   list has no other unmatched nodes). If the CAS misses, then
   a loop retries advancing head by two steps until either
   success or the slack is at most two. By requiring that each
   attempt advances head by two (if applicable), we ensure that
   the slack does not grow without bound. Traversals also check
   if the initial head is now off-list, in which case they
   start at the new head.

   If no candidates are found and the call was untimed
   poll/offer, (argument \"how\" is NOW) return.

2. Try to append a new node (method tryAppend)

   Starting at current tail pointer, find the actual last node
   and try to append a new node (or if head was null, establish
   the first node). Nodes can be appended only if their
   predecessors are either already matched or are of the same
   mode. If we detect otherwise, then a new node with opposite
   mode must have been appended during traversal, so we must
   restart at phase 1. The traversal and update steps are
   otherwise similar to phase 1: Retrying upon CAS misses and
   checking for staleness.  In particular, if a self-link is
   encountered, then we can safely jump to a node on the list
   by continuing the traversal at current head.

   On successful append, if the call was ASYNC, return.

3. Await match or cancellation (method awaitMatch)

   Wait for another thread to match node; instead cancelling if
   the current thread was interrupted or the wait timed out. On
   multiprocessors, we use front-of-queue spinning: If a node
   appears to be the first unmatched node in the queue, it
   spins a bit before blocking. In either case, before blocking
   it tries to unsplice any nodes between the current \"head\"
   and the first unmatched node.

   Front-of-queue spinning vastly improves performance of
   heavily contended queues. And so long as it is relatively
   brief and \"quiet\", spinning does not much impact performance
   of less-contended queues.  During spins threads check their
   interrupt status and generate a thread-local random number
   to decide to occasionally perform a Thread.yield. While
   yield has underdefined specs, we assume that it might help,
   and will not hurt, in limiting impact of spinning on busy
   systems.  We also use smaller (1/2) spins for nodes that are
   not known to be front but whose predecessors have not
   blocked -- these \"chained\" spins avoid artifacts of
   front-of-queue rules which otherwise lead to alternating
   nodes spinning vs blocking. Further, front threads that
   represent phase changes (from data to request node or vice
   versa) compared to their predecessors receive additional
   chained spins, reflecting longer paths typically required to
   unblock threads during phase changes.


** Unlinking removed interior nodes **

In addition to minimizing garbage retention via self-linking
described above, we also unlink removed interior nodes. These
may arise due to timed out or interrupted waits, or calls to
remove(x) or Iterator.remove.  Normally, given a node that was
at one time known to be the predecessor of some node s that is
to be removed, we can unsplice s by CASing the next field of
its predecessor if it still points to s (otherwise s must
already have been removed or is now offlist). But there are two
situations in which we cannot guarantee to make node s
unreachable in this way: (1) If s is the trailing node of list
(i.e., with null next), then it is pinned as the target node
for appends, so can only be removed later after other nodes are
appended. (2) We cannot necessarily unlink s given a
predecessor node that is matched (including the case of being
cancelled): the predecessor may already be unspliced, in which
case some previous reachable node may still point to s.
(For further explanation see Herlihy & Shavit \"The Art of
Multiprocessor Programming\" chapter 9).  Although, in both
cases, we can rule out the need for further action if either s
or its predecessor are (or can be made to be) at, or fall off
from, the head of list.

Without taking these into account, it would be possible for an
unbounded number of supposedly removed nodes to remain
reachable.  Situations leading to such buildup are uncommon but
can occur in practice; for example when a series of short timed
calls to poll repeatedly time out but never otherwise fall off
the list because of an untimed call to take at the front of the
queue.

When these cases arise, rather than always retraversing the
entire list to find an actual predecessor to unlink (which
won't help for case (1) anyway), we record a conservative
estimate of possible unsplice failures (in \"sweepVotes\").
We trigger a full sweep when the estimate exceeds a threshold
(\"SWEEP_THRESHOLD\") indicating the maximum number of estimated
removal failures to tolerate before sweeping through, unlinking
cancelled nodes that were not unlinked upon initial removal.
We perform sweeps by the thread hitting threshold (rather than
background threads or by spreading work to other threads)
because in the main contexts in which removal occurs, the
caller is already timed-out, cancelled, or performing a
potentially O(n) operation (e.g. remove(x)), none of which are
time-critical enough to warrant the overhead that alternatives
would impose on other threads.

Because the sweepVotes estimate is conservative, and because
nodes become unlinked \"naturally\" as they fall off the head of
the queue, and because we allow votes to accumulate even while
sweeps are in progress, there are typically significantly fewer
such nodes than estimated.  Choice of a threshold value
balances the likelihood of wasted effort and contention, versus
providing a worst-case bound on retention of interior nodes in
quiescent queues. The value defined below was chosen
empirically to balance these under various timeout scenarios.

Note that we cannot self-link unlinked interior nodes during
sweeps. However, the associated garbage chains terminate when
some successor ultimately falls off the head of the list and is
self-linked.

 True if on multiprocessor "
      end

      attribute 383259 "FRONT_SPINS"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << 7"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times to spin (with randomly interspersed calls
to Thread.yield) on multiprocessor before blocking when a node
is apparently the first waiter in the queue.  See above for
explanation. Must be a power of two. The value is empirically
derived -- it works pretty well across a variety of processors,
numbers of CPUs, and OSes.
"
      end

      attribute 383387 "CHAINED_SPINS"
	class_attribute const_attribute private explicit_type "int"
	init_value " FRONT_SPINS >>> 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times to spin before blocking when a node is
preceded by another node that is apparently spinning.  Also
serves as an increment to FRONT_SPINS on phase changes, and as
base average frequency for yielding during spins. Must be a
power of two.
"
      end

      attribute 383515 "SWEEP_THRESHOLD"
	class_attribute const_attribute package explicit_type "int"
	init_value " 32"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum number of estimated removal failures (sweepVotes)
to tolerate before sweeping through the queue unlinking
cancelled nodes that were not unlinked upon initial
removal. See above for explanation. The value must be at least
two to avoid useless sweeps when removing trailing nodes.
"
      end

      class 268315 "Node"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	attribute 383643 "isData"
	  const_attribute package explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " false if this is a request node"
	end

	classrelation 450331 // item (<unidirectional association>)
	  relation 450331 --->
	    a role_name "item" volatile package
	      comment " initially non-null if isData; CASed to match"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 450331 // item (<unidirectional association>)
	    b parent class_ref 3401484 // Object
	end

	classrelation 450459 // next (<unidirectional association>)
	  relation 450459 --->
	    a role_name "next" volatile package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 450459 // next (<unidirectional association>)
	    b parent class_ref 268315 // Node
	end

	classrelation 450587 // waiter (<unidirectional association>)
	  relation 450587 --->
	    a role_name "waiter" volatile package
	      comment " null until waiting"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 450587 // waiter (<unidirectional association>)
	    b parent class_ref 1201420 // Thread
	end

	operation 1576219 "casNext"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 268315 // Node
	    param inout name "val" type class_ref 268315 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " CAS methods for fields"
	end

	operation 1576347 "casItem"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 3401484 // Object
	    param inout name "val" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1576475 "Node"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "item" type class_ref 3401484 // Object
	    param inout name "isData" explicit_type "boolean"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Constructs a new node.  Uses relaxed write because item can
only be seen after publication via casNext."
	end

	operation 1576603 "forgetNext"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Links node to itself to avoid garbage retention.  Called
only after CASing head field, so uses relaxed write."
	end

	operation 1576731 "forgetContents"
	  package explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets item to self and waiter to null, to avoid garbage
retention after matching or cancelling. Uses relaxed writes
because order is already constrained in the only calling
contexts: item is forgotten only after volatile/atomic
mechanics that extract items.  Similarly, clearing waiter
follows either CAS or return from park (if ever parked;
else we don't care)."
	end

	operation 1576859 "isMatched"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this node has been matched, including the
case of artificial matches due to cancellation."
	end

	operation 1576987 "isUnmatchedRequest"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this is an unmatched request node."
	end

	operation 1577115 "cannotPrecede"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "haveData" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if a node with the given mode cannot be
appended to this node because this node is unmatched and
has opposite data mode."
	end

	operation 1577243 "tryMatchData"
	  package explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to artificially match a data node -- used by remove."
	end

	attribute 383771 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -3375979862319811754L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 450715 // UNSAFE (<unidirectional association>)
	  relation 450715 --->
	    a role_name "UNSAFE" class_relation const_relation private
	      comment " Unsafe mechanics
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 450715 // UNSAFE (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 383899 "itemOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 384027 "nextOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 384155 "waiterOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	extra_member 133147 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = Node.class;
                itemOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"item\"));
                nextOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"next\"));
                waiterOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"waiter\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	end
      end

      classrelation 450843 // head (<unidirectional association>)
	relation 450843 --->
	  a role_name "head" volatile package
	    comment " head of the queue; null until first enqueue 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 450843 // head (<unidirectional association>)
	  b parent class_ref 268315 // Node
      end

      classrelation 450971 // tail (<unidirectional association>)
	relation 450971 --->
	  a role_name "tail" volatile private
	    comment " tail of the queue; null until first append 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 450971 // tail (<unidirectional association>)
	  b parent class_ref 268315 // Node
      end

      attribute 384283 "sweepVotes"
	volatile private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The number of apparent failures to unsplice removed nodes "
      end

      operation 1577371 "casTail"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 268315 // Node
	  param inout name "val" type class_ref 268315 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " CAS methods for fields"
      end

      operation 1577499 "casHead"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "cmp" type class_ref 268315 // Node
	  param inout name "val" type class_ref 268315 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1577627 "casSweepVotes"
	private explicit_return_type "boolean"
	nparams 2
	  param in name "cmp" explicit_type "int"
	  param in name "val" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      attribute 384411 "NOW"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Possible values for \"how\" argument in xfer method.

 for untimed poll, tryTransfer"
      end

      attribute 384539 "ASYNC"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " for offer, put, add"
      end

      attribute 384667 "SYNC"
	class_attribute const_attribute private explicit_type "int"
	init_value " 2"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " for transfer, take"
      end

      attribute 384795 "TIMED"
	class_attribute const_attribute private explicit_type "int"
	init_value " 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " for timed poll, tryTransfer"
      end

      operation 1577755 "cast"
	class_operation package explicit_return_type "E"
	nparams 1
	  param inout name "item" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<E> ${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
      end

      operation 1577883 "xfer"
	private explicit_return_type "E"
	nparams 4
	  param inout name "e" explicit_type "E"
	  param inout name "haveData" explicit_type "boolean"
	  param in name "how" explicit_type "int"
	  param in name "nanos" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements all queuing methods. See above for explanation.

@param e the item or null for take
@param haveData true if this is a put, else a take
@param how NOW, ASYNC, SYNC, or TIMED
@param nanos timeout in nanosecs, used only if mode is TIMED
@return an item if matched, else e
@throws NullPointerException if haveData mode but e is null"
      end

      operation 1578011 "tryAppend"
	private return_type class_ref 268315 // Node
	nparams 2
	  param inout name "s" type class_ref 268315 // Node
	  param inout name "haveData" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to append node s as tail.

@param s the node to append
@param haveData true if appending in data mode
@return null on failure due to losing race with append in
different mode, else s's predecessor, or s itself if no
predecessor"
      end

      operation 1578139 "awaitMatch"
	private explicit_return_type "E"
	nparams 5
	  param inout name "s" type class_ref 268315 // Node
	  param inout name "pred" type class_ref 268315 // Node
	  param inout name "e" explicit_type "E"
	  param inout name "timed" explicit_type "boolean"
	  param in name "nanos" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Spins/yields/blocks until node s is matched or caller gives up.

@param s the waiting node
@param pred the predecessor of s, or s itself if it has no
predecessor, or null if unknown (the null case does not occur
in any current calls but may in possible future extensions)
@param e the comparison value for checking match
@param timed if true, wait only until timeout elapses
@param nanos timeout in nanosecs, used only if timed is true
@return matched item, or e if unmatched on interrupt or timeout"
      end

      operation 1578267 "spinsFor"
	class_operation private explicit_return_type "int"
	nparams 2
	  param inout name "pred" type class_ref 268315 // Node
	  param inout name "haveData" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns spin/yield value for a node with given predecessor and
data mode. See above for explanation."
      end

      operation 1578395 "succ"
	package return_type class_ref 268315 // Node
	nparams 1
	  param inout name "p" type class_ref 268315 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -------------- Traversal methods -------------- 

Returns the successor of p, or the head node if p.next has been
linked to self, which will only be true if traversing with a
stale pointer that is now off the list."
      end

      operation 1578523 "firstOfMode"
	private return_type class_ref 268315 // Node
	nparams 1
	  param inout name "isData" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the first unmatched node of the given mode, or null if
none.  Used by methods isEmpty, hasWaitingConsumer."
      end

      operation 1578651 "firstDataItem"
	private explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the item in the first unmatched node with isData; or
null if none.  Used by peek."
      end

      operation 1578779 "countOfMode"
	private explicit_return_type "int"
	nparams 1
	  param inout name "data" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Traverses and counts unmatched nodes of the given mode.
Used by methods size and getWaitingConsumerCount."
      end

      class 268443 "Itr"
	visibility package 
	nactuals 1
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 451099 // <realization>
	  relation 451099 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 451099 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 451227 // nextNode (<unidirectional association>)
	  relation 451227 --->
	    a role_name "nextNode" private
	      comment " next node to return item for"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 451227 // nextNode (<unidirectional association>)
	    b parent class_ref 268315 // Node
	end

	attribute 384923 "nextItem"
	  private explicit_type "E"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " the corresponding item"
	end

	classrelation 451355 // lastRet (<unidirectional association>)
	  relation 451355 --->
	    a role_name "lastRet" private
	      comment " last returned node, to support remove"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 451355 // lastRet (<unidirectional association>)
	    b parent class_ref 268315 // Node
	end

	classrelation 451483 // lastPred (<unidirectional association>)
	  relation 451483 --->
	    a role_name "lastPred" private
	      comment " predecessor to unlink lastRet"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 451483 // lastPred (<unidirectional association>)
	    b parent class_ref 268315 // Node
	end

	operation 1578907 "advance"
	  private explicit_return_type "void"
	  nparams 1
	    param inout name "prev" type class_ref 268315 // Node
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Moves to next node after prev, or first node if prev null."
	end

	operation 1579035 "Itr"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1579163 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1579291 "next"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1579419 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1579547 "unsplice"
	package explicit_return_type "void"
	nparams 2
	  param inout name "pred" type class_ref 268315 // Node
	  param inout name "s" type class_ref 268315 // Node
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " -------------- Removal methods -------------- 

Unsplices (now or later) the given deleted/cancelled node with
the given predecessor.

@param pred a node that was at one time known to be the
predecessor of s, or null or s itself if s is/was at head
@param s the node to be unspliced"
      end

      operation 1579675 "sweep"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Unlinks matched (typically cancelled) nodes encountered in a
traversal from head."
      end

      operation 1579803 "findAndRemove"
	private explicit_return_type "boolean"
	nparams 1
	  param inout name "e" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main implementation of remove(Object)"
      end

      operation 1579931 "LinkedTransferQueue"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates an initially empty {@code LinkedTransferQueue}."
      end

      operation 1580059 "LinkedTransferQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code LinkedTransferQueue}
initially containing the elements of the given collection,
added in traversal order of the collection's iterator.

@param c the collection of elements to initially contain
@throws NullPointerException if the specified collection or any
        of its elements are null"
      end

      operation 1580187 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never block.

@throws NullPointerException if the specified element is null"
      end

      operation 1580315 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never block or
return {@code false}.

@return {@code true} (as specified by
 {@link java.util.concurrent.BlockingQueue#offer(Object,long,TimeUnit)
 BlockingQueue.offer})
@throws NullPointerException if the specified element is null"
      end

      operation 1580443 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never return {@code false}.

@return {@code true} (as specified by {@link Queue#offer})
@throws NullPointerException if the specified element is null"
      end

      operation 1580571 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element at the tail of this queue.
As the queue is unbounded, this method will never throw
{@link IllegalStateException} or return {@code false}.

@return {@code true} (as specified by {@link Collection#add})
@throws NullPointerException if the specified element is null"
      end

      operation 1580699 "tryTransfer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a waiting consumer immediately, if possible.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
otherwise returning {@code false} without enqueuing the element.

@throws NullPointerException if the specified element is null"
      end

      operation 1580827 "transfer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a consumer, waiting if necessary to do so.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
else inserts the specified element at the tail of this queue
and waits until the element is received by a consumer.

@throws NullPointerException if the specified element is null"
      end

      operation 1580955 "tryTransfer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a consumer if it is possible to do so
before the timeout elapses.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
else inserts the specified element at the tail of this queue
and waits until the element is received by a consumer,
returning {@code false} if the specified wait time elapses
before the element can be transferred.

@throws NullPointerException if the specified element is null"
      end

      operation 1581083 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1581211 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1581339 "poll"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1581467 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1581595 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 160667 // Collection
	  param in name "maxElements" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws NullPointerException     {@inheritDoc}
@throws IllegalArgumentException {@inheritDoc}"
      end

      operation 1581723 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue in proper sequence.
The elements will be returned in order from first (head) to last (tail).

<p>The returned iterator is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException
ConcurrentModificationException}, and guarantees to traverse
elements as they existed upon construction of the iterator, and
may (but is not guaranteed to) reflect any modifications
subsequent to construction.

@return an iterator over the elements in this queue in proper sequence"
      end

      operation 1581851 "peek"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1581979 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains no elements.

@return {@code true} if this queue contains no elements"
      end

      operation 1582107 "hasWaitingConsumer"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1582235 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of elements in this queue.  If this queue
contains more than {@code Integer.MAX_VALUE} elements, returns
{@code Integer.MAX_VALUE}.

<p>Beware that, unlike in most collections, this method is
<em>NOT</em> a constant-time operation. Because of the
asynchronous nature of these queues, determining the current
number of elements requires an O(n) traversal.

@return the number of elements in this queue"
      end

      operation 1582363 "getWaitingConsumerCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1582491 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element {@code e} such
that {@code o.equals(e)}, if this queue contains one or more such
elements.
Returns {@code true} if this queue contained the specified element
(or equivalently, if this queue changed as a result of the call).

@param o element to be removed from this queue, if present
@return {@code true} if this queue changed as a result of the call"
      end

      operation 1582619 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains the specified element.
More formally, returns {@code true} if and only if this queue contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this queue
@return {@code true} if this queue contains the specified element"
      end

      operation 1582747 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code Integer.MAX_VALUE} because a
{@code LinkedTransferQueue} is not capacity constrained.

@return {@code Integer.MAX_VALUE} (as specified by
        {@link java.util.concurrent.BlockingQueue#remainingCapacity()
        BlockingQueue.remainingCapacity})"
      end

      operation 1582875 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves the state to a stream (that is, serializes it).

@serialData All of the elements (each an {@code E}) in
the proper order, followed by a null
@param s the stream"
      end

      operation 1583003 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes the Queue instance from a stream (that is,
deserializes it).

@param s the stream"
      end

      classrelation 451611 // UNSAFE (<unidirectional association>)
	relation 451611 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 451611 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 385051 "headOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 385179 "tailOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 385307 "sweepVotesOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 133275 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = LinkedTransferQueue.class;
            headOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"head\"));
            tailOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"tail\"));
            sweepVotesOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"sweepVotes\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 268187 "TransferQueue"
      visibility public stereotype "interface"
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 254107 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

A {@link BlockingQueue} in which producers may wait for consumers
to receive elements.  A {@code TransferQueue} may be useful for
example in message passing applications in which producers
sometimes (using method {@link #transfer}) await receipt of
elements by consumers invoking {@code take} or {@code poll}, while
at other times enqueue elements (via method {@code put}) without
waiting for receipt.
{@linkplain #tryTransfer(Object) Non-blocking} and
{@linkplain #tryTransfer(Object,long,TimeUnit) time-out} versions of
{@code tryTransfer} are also available.
A {@code TransferQueue} may also be queried, via {@link
#hasWaitingConsumer}, whether there are any threads waiting for
items, which is a converse analogy to a {@code peek} operation.

<p>Like other blocking queues, a {@code TransferQueue} may be
capacity bounded.  If so, an attempted transfer operation may
initially block waiting for available space, and/or subsequently
block waiting for reception by a consumer.  Note that in a queue
with zero capacity, such as {@link SynchronousQueue}, {@code put}
and {@code transfer} are effectively synonymous.

@since 1.7
@hide
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 449947 // <realization>
	relation 449947 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 449947 // <realization>
	  b parent class_ref 254107 // BlockingQueue
      end

      operation 1575579 "tryTransfer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a waiting consumer immediately, if possible.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
otherwise returning {@code false} without enqueuing the element.

@param e the element to transfer
@return {@code true} if the element was transferred, else
        {@code false}
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue"
      end

      operation 1575707 "transfer"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a consumer, waiting if necessary to do so.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
else waits until the element is received by a consumer.

@param e the element to transfer
@throws InterruptedException if interrupted while waiting,
        in which case the element is not left enqueued
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue"
      end

      operation 1575835 "tryTransfer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transfers the element to a consumer if it is possible to do so
before the timeout elapses.

<p>More precisely, transfers the specified element immediately
if there exists a consumer already waiting to receive it (in
{@link #take} or timed {@link #poll(long,TimeUnit) poll}),
else waits until the element is received by a consumer,
returning {@code false} if the specified wait time elapses
before the element can be transferred.

@param e the element to transfer
@param timeout how long to wait before giving up, in units of
       {@code unit}
@param unit a {@code TimeUnit} determining how to interpret the
       {@code timeout} parameter
@return {@code true} if successful, or {@code false} if
        the specified waiting time elapses before completion,
        in which case the element is not left enqueued
@throws InterruptedException if interrupted while waiting,
        in which case the element is not left enqueued
@throws ClassCastException if the class of the specified element
        prevents it from being added to this queue
@throws NullPointerException if the specified element is null
@throws IllegalArgumentException if some property of the specified
        element prevents it from being added to this queue"
      end

      operation 1575963 "hasWaitingConsumer"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if there is at least one consumer waiting
to receive an element via {@link #take} or
timed {@link #poll(long,TimeUnit) poll}.
The return value represents a momentary state of affairs.

@return {@code true} if there is at least one waiting consumer"
      end

      operation 1576091 "getWaitingConsumerCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of consumers waiting to
receive elements via {@link #take} or timed
{@link #poll(long,TimeUnit) poll}.  The return value is an
approximation of a momentary state of affairs, that may be
inaccurate if consumers have completed or given up waiting.
The value may be useful for monitoring and heuristics, but
not for synchronization control.  Implementations of this
method are likely to be noticeably slower than those for
{@link #hasWaitingConsumer}.

@return the number of consumers waiting to receive elements"
      end
    end

    class 268571 "Phaser"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A reusable synchronization barrier, similar in functionality to
{@link java.util.concurrent.CyclicBarrier CyclicBarrier} and
{@link java.util.concurrent.CountDownLatch CountDownLatch}
but supporting more flexible usage.

<p> <b>Registration.</b> Unlike the case for other barriers, the
number of parties <em>registered</em> to synchronize on a phaser
may vary over time.  Tasks may be registered at any time (using
methods {@link #register}, {@link #bulkRegister}, or forms of
constructors establishing initial numbers of parties), and
optionally deregistered upon any arrival (using {@link
#arriveAndDeregister}).  As is the case with most basic
synchronization constructs, registration and deregistration affect
only internal counts; they do not establish any further internal
bookkeeping, so tasks cannot query whether they are registered.
(However, you can introduce such bookkeeping by subclassing this
class.)

<p> <b>Synchronization.</b> Like a {@code CyclicBarrier}, a {@code
Phaser} may be repeatedly awaited.  Method {@link
#arriveAndAwaitAdvance} has effect analogous to {@link
java.util.concurrent.CyclicBarrier#await CyclicBarrier.await}. Each
generation of a phaser has an associated phase number. The phase
number starts at zero, and advances when all parties arrive at the
phaser, wrapping around to zero after reaching {@code
Integer.MAX_VALUE}. The use of phase numbers enables independent
control of actions upon arrival at a phaser and upon awaiting
others, via two kinds of methods that may be invoked by any
registered party:

<ul>

  <li> <b>Arrival.</b> Methods {@link #arrive} and
      {@link #arriveAndDeregister} record arrival.  These methods
      do not block, but return an associated <em>arrival phase
      number</em>; that is, the phase number of the phaser to which
      the arrival applied. When the final party for a given phase
      arrives, an optional action is performed and the phase
      advances.  These actions are performed by the party
      triggering a phase advance, and are arranged by overriding
      method {@link #onAdvance(int, int)}, which also controls
      termination. Overriding this method is similar to, but more
      flexible than, providing a barrier action to a {@code
      CyclicBarrier}.

  <li> <b>Waiting.</b> Method {@link #awaitAdvance} requires an
      argument indicating an arrival phase number, and returns when
      the phaser advances to (or is already at) a different phase.
      Unlike similar constructions using {@code CyclicBarrier},
      method {@code awaitAdvance} continues to wait even if the
      waiting thread is interrupted. Interruptible and timeout
      versions are also available, but exceptions encountered while
      tasks wait interruptibly or with timeout do not change the
      state of the phaser. If necessary, you can perform any
      associated recovery within handlers of those exceptions,
      often after invoking {@code forceTermination}.  Phasers may
      also be used by tasks executing in a {@link ForkJoinPool},
      which will ensure sufficient parallelism to execute tasks
      when others are blocked waiting for a phase to advance.

</ul>

<p> <b>Termination.</b> A phaser may enter a <em>termination</em>
state, that may be checked using method {@link #isTerminated}. Upon
termination, all synchronization methods immediately return without
waiting for advance, as indicated by a negative return value.
Similarly, attempts to register upon termination have no effect.
Termination is triggered when an invocation of {@code onAdvance}
returns {@code true}. The default implementation returns {@code
true} if a deregistration has caused the number of registered
parties to become zero.  As illustrated below, when phasers control
actions with a fixed number of iterations, it is often convenient
to override this method to cause termination when the current phase
number reaches a threshold. Method {@link #forceTermination} is
also available to abruptly release waiting threads and allow them
to terminate.

<p> <b>Tiering.</b> Phasers may be <em>tiered</em> (i.e.,
constructed in tree structures) to reduce contention. Phasers with
large numbers of parties that would otherwise experience heavy
synchronization contention costs may instead be set up so that
groups of sub-phasers share a common parent.  This may greatly
increase throughput even though it incurs greater per-operation
overhead.

<p>In a tree of tiered phasers, registration and deregistration of
child phasers with their parent are managed automatically.
Whenever the number of registered parties of a child phaser becomes
non-zero (as established in the {@link #Phaser(Phaser,int)}
constructor, {@link #register}, or {@link #bulkRegister}), the
child phaser is registered with its parent.  Whenever the number of
registered parties becomes zero as the result of an invocation of
{@link #arriveAndDeregister}, the child phaser is deregistered
from its parent.

<p><b>Monitoring.</b> While synchronization methods may be invoked
only by registered parties, the current state of a phaser may be
monitored by any caller.  At any given moment there are {@link
#getRegisteredParties} parties in total, of which {@link
#getArrivedParties} have arrived at the current phase ({@link
#getPhase}).  When the remaining ({@link #getUnarrivedParties})
parties arrive, the phase advances.  The values returned by these
methods may reflect transient states and so are not in general
useful for synchronization control.  Method {@link #toString}
returns snapshots of these state queries in a form convenient for
informal monitoring.

<p><b>Sample usages:</b>

<p>A {@code Phaser} may be used instead of a {@code CountDownLatch}
to control a one-shot action serving a variable number of parties.
The typical idiom is for the method setting this up to first
register, then start the actions, then deregister, as in:

 <pre> {@code
void runTasks(List<Runnable> tasks) {
  final Phaser phaser = new Phaser(1); // \"1\" to register self
  // create and start threads
  for (final Runnable task : tasks) {
    phaser.register();
    new Thread() {
      public void run() {
        phaser.arriveAndAwaitAdvance(); // await all creation
        task.run();
      }
    }.start();
  }

  // allow threads to start and deregister self
  phaser.arriveAndDeregister();
}}</pre>

<p>One way to cause a set of threads to repeatedly perform actions
for a given number of iterations is to override {@code onAdvance}:

 <pre> {@code
void startTasks(List<Runnable> tasks, final int iterations) {
  final Phaser phaser = new Phaser() {
    protected boolean onAdvance(int phase, int registeredParties) {
      return phase >= iterations || registeredParties == 0;
    }
  };
  phaser.register();
  for (final Runnable task : tasks) {
    phaser.register();
    new Thread() {
      public void run() {
        do {
          task.run();
          phaser.arriveAndAwaitAdvance();
        } while (!phaser.isTerminated());
      }
    }.start();
  }
  phaser.arriveAndDeregister(); // deregister self, don't wait
}}</pre>

If the main task must later await termination, it
may re-register and then execute a similar loop:
 <pre> {@code
  // ...
  phaser.register();
  while (!phaser.isTerminated())
    phaser.arriveAndAwaitAdvance();}</pre>

<p>Related constructions may be used to await particular phase numbers
in contexts where you are sure that the phase will never wrap around
{@code Integer.MAX_VALUE}. For example:

 <pre> {@code
void awaitPhase(Phaser phaser, int phase) {
  int p = phaser.register(); // assumes caller not already registered
  while (p < phase) {
    if (phaser.isTerminated())
      // ... deal with unexpected termination
    else
      p = phaser.arriveAndAwaitAdvance();
  }
  phaser.arriveAndDeregister();
}}</pre>


<p>To create a set of {@code n} tasks using a tree of phasers, you
could use code of the following form, assuming a Task class with a
constructor accepting a {@code Phaser} that it registers with upon
construction. After invocation of {@code build(new Task[n], 0, n,
new Phaser())}, these tasks could then be started, for example by
submitting to a pool:

 <pre> {@code
void build(Task[] tasks, int lo, int hi, Phaser ph) {
  if (hi - lo > TASKS_PER_PHASER) {
    for (int i = lo; i < hi; i += TASKS_PER_PHASER) {
      int j = Math.min(i + TASKS_PER_PHASER, hi);
      build(tasks, i, j, new Phaser(ph));
    }
  } else {
    for (int i = lo; i < hi; ++i)
      tasks[i] = new Task(ph);
      // assumes new Task(ph) performs ph.register()
  }
}}</pre>

The best value of {@code TASKS_PER_PHASER} depends mainly on
expected synchronization rates. A value as low as four may
be appropriate for extremely small per-phase task bodies (thus
high rates), or up to hundreds for extremely large ones.

<p><b>Implementation notes</b>: This implementation restricts the
maximum number of parties to 65535. Attempts to register additional
parties result in {@code IllegalStateException}. However, you can and
should create tiered phasers to accommodate arbitrarily large sets
of participants.

@since 1.7
@hide
@author Doug Lea"
      attribute 385435 "state"
	volatile private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This class implements an extension of X10 \"clocks\".  Thanks to
Vijay Saraswat for the idea, and to Vivek Sarkar for
enhancements to extend functionality.


Primary state representation, holding four bit-fields:

unarrived  -- the number of parties yet to hit barrier (bits  0-15)
parties    -- the number of parties to wait            (bits 16-31)
phase      -- the generation of the barrier            (bits 32-62)
terminated -- set if barrier is terminated             (bit  63 / sign)

Except that a phaser with no registered parties is
distinguished by the otherwise illegal state of having zero
parties and one unarrived parties (encoded as EMPTY below).

To efficiently maintain atomicity, these values are packed into
a single (atomic) long. Good performance relies on keeping
state decoding and encoding simple, and keeping race windows
short.

All state updates are performed via CAS except initial
registration of a sub-phaser (i.e., one with a non-null
parent).  In this (relatively rare) case, we use built-in
synchronization to lock while first registering with its
parent.

The phase of a subphaser is allowed to lag that of its
ancestors until it is actually accessed -- see method
reconcileState.
"
      end

      attribute 385563 "MAX_PARTIES"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0xffff"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 385691 "MAX_PHASE"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.MAX_VALUE"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 385819 "PARTIES_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 385947 "PHASE_SHIFT"
	class_attribute const_attribute private explicit_type "int"
	init_value " 32"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 386075 "UNARRIVED_MASK"
	class_attribute const_attribute private explicit_type "int"
	init_value " 0xffff"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " to mask ints"
      end

      attribute 386203 "PARTIES_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0xffff0000L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " to mask longs"
      end

      attribute 386331 "COUNTS_MASK"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0xffffffffL"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 386459 "TERMINATION_BIT"
	class_attribute const_attribute private explicit_type "long"
	init_value " 1L << 63"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 386587 "ONE_ARRIVAL"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " some special values"
      end

      attribute 386715 "ONE_PARTY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1 << PARTIES_SHIFT"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 386843 "ONE_DEREGISTER"
	class_attribute const_attribute private explicit_type "int"
	init_value " ONE_ARRIVAL|ONE_PARTY"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 386971 "EMPTY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1583131 "unarrivedOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "s" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " The following unpacking methods are usually manually inlined"
      end

      operation 1583259 "partiesOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "s" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1583387 "phaseOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "s" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1583515 "arrivedOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "s" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      classrelation 451739 // parent (<unidirectional association>)
	relation 451739 --->
	  a role_name "parent" const_relation private
	    comment "
The parent of this phaser, or null if none

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 451739 // parent (<unidirectional association>)
	  b parent class_ref 268571 // Phaser
      end

      classrelation 451867 // root (<unidirectional association>)
	relation 451867 --->
	  a role_name "root" const_relation private
	    comment "
The root of phaser tree. Equals this if not in a tree.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 451867 // root (<unidirectional association>)
	  b parent class_ref 268571 // Phaser
      end

      class 268699 "QNode"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 452251 // <realization>
	  relation 452251 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 452251 // <realization>
	    b parent class_ref 266267 // ManagedBlocker
	end

	classrelation 452379 // phaser (<unidirectional association>)
	  relation 452379 --->
	    a role_name "phaser" const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 452379 // phaser (<unidirectional association>)
	    b parent class_ref 268571 // Phaser
	end

	attribute 387355 "phase"
	  const_attribute package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 387483 "interruptible"
	  const_attribute package explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 387611 "timed"
	  const_attribute package explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 387739 "wasInterrupted"
	  package explicit_type "boolean"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 387867 "nanos"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 387995 "lastTime"
	  package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 452507 // thread (<unidirectional association>)
	  relation 452507 --->
	    a role_name "thread" volatile package
	      comment " nulled to cancel wait"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 452507 // thread (<unidirectional association>)
	    b parent class_ref 1201420 // Thread
	end

	classrelation 452635 // next (<unidirectional association>)
	  relation 452635 --->
	    a role_name "next" package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 452635 // next (<unidirectional association>)
	    b parent class_ref 268699 // QNode
	end

	operation 1587739 "QNode"
	  package explicit_return_type ""
	  nparams 5
	    param inout name "phaser" type class_ref 268571 // Phaser
	    param in name "phase" explicit_type "int"
	    param inout name "interruptible" explicit_type "boolean"
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4} ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1587867 "isReleasable"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1587995 "block"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 451995 // evenQ (<unidirectional association>)
	relation 451995 --->
	  a role_name "evenQ" const_relation private
	    comment "
Heads of Treiber stacks for waiting threads. To eliminate
contention when releasing some threads while adding others, we
use two of them, alternating across even and odd phases.
Subphasers share queues with root to speed up releases.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<QNode> ${name}${value};
"
	    classrelation_ref 451995 // evenQ (<unidirectional association>)
	  b parent class_ref 263323 // AtomicReference
      end

      classrelation 452123 // oddQ (<unidirectional association>)
	relation 452123 --->
	  a role_name "oddQ" const_relation private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<QNode> ${name}${value};
"
	    classrelation_ref 452123 // oddQ (<unidirectional association>)
	  b parent class_ref 263323 // AtomicReference
      end

      operation 1583643 "queueFor"
	private return_type class_ref 263323 // AtomicReference
	nparams 1
	  param in name "phase" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<QNode> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1583771 "badArrive"
	private return_type class_ref 3399692 // String
	nparams 1
	  param in name "s" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns message string for bounds exceptions on arrival."
      end

      operation 1583899 "badRegister"
	private return_type class_ref 3399692 // String
	nparams 1
	  param in name "s" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns message string for bounds exceptions on registration."
      end

      operation 1584027 "doArrive"
	private explicit_return_type "int"
	nparams 1
	  param in name "adjust" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main implementation for methods arrive and arriveAndDeregister.
Manually tuned to speed up and minimize race windows for the
common case of just decrementing unarrived field.

@param adjust value to subtract from state;
              ONE_ARRIVAL for arrive,
              ONE_DEREGISTER for arriveAndDeregister"
      end

      operation 1584155 "doRegister"
	private explicit_return_type "int"
	nparams 1
	  param in name "registrations" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation of register, bulkRegister

@param registrations number to add to both parties and
unarrived fields. Must be greater than zero."
      end

      operation 1584283 "reconcileState"
	private explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Resolves lagged phase propagation from root if necessary.
Reconciliation normally occurs when root has advanced but
subphasers have not yet done so, in which case they must finish
their own advance by setting unarrived to parties (or if
parties is zero, resetting to unregistered EMPTY state).

@return reconciled state"
      end

      operation 1584411 "Phaser"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new phaser with no initially registered parties, no
parent, and initial phase number 0. Any thread using this
phaser will need to first register for it."
      end

      operation 1584539 "Phaser"
	public explicit_return_type ""
	nparams 1
	  param in name "parties" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new phaser with the given number of registered
unarrived parties, no parent, and initial phase number 0.

@param parties the number of parties required to advance to the
next phase
@throws IllegalArgumentException if parties less than zero
or greater than the maximum number of parties supported"
      end

      operation 1584667 "Phaser"
	public explicit_return_type ""
	nparams 1
	  param inout name "parent" type class_ref 268571 // Phaser
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Equivalent to {@link #Phaser(Phaser, int) Phaser(parent, 0)}.

@param parent the parent phaser"
      end

      operation 1584795 "Phaser"
	public explicit_return_type ""
	nparams 2
	  param inout name "parent" type class_ref 268571 // Phaser
	  param in name "parties" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new phaser with the given parent and number of
registered unarrived parties.  When the given parent is non-null
and the given number of parties is greater than zero, this
child phaser is registered with its parent.

@param parent the parent phaser
@param parties the number of parties required to advance to the
next phase
@throws IllegalArgumentException if parties less than zero
or greater than the maximum number of parties supported"
      end

      operation 1584923 "register"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds a new unarrived party to this phaser.  If an ongoing
invocation of {@link #onAdvance} is in progress, this method
may await its completion before returning.  If this phaser has
a parent, and this phaser previously had no registered parties,
this child phaser is also registered with its parent. If
this phaser is terminated, the attempt to register has
no effect, and a negative value is returned.

@return the arrival phase number to which this registration
applied.  If this value is negative, then this phaser has
terminated, in which case registration has no effect.
@throws IllegalStateException if attempting to register more
than the maximum supported number of parties"
      end

      operation 1585051 "bulkRegister"
	public explicit_return_type "int"
	nparams 1
	  param in name "parties" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the given number of new unarrived parties to this phaser.
If an ongoing invocation of {@link #onAdvance} is in progress,
this method may await its completion before returning.  If this
phaser has a parent, and the given number of parties is greater
than zero, and this phaser previously had no registered
parties, this child phaser is also registered with its parent.
If this phaser is terminated, the attempt to register has no
effect, and a negative value is returned.

@param parties the number of additional parties required to
advance to the next phase
@return the arrival phase number to which this registration
applied.  If this value is negative, then this phaser has
terminated, in which case registration has no effect.
@throws IllegalStateException if attempting to register more
than the maximum supported number of parties
@throws IllegalArgumentException if {@code parties < 0}"
      end

      operation 1585179 "arrive"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Arrives at this phaser, without waiting for others to arrive.

<p>It is a usage error for an unregistered party to invoke this
method.  However, this error may result in an {@code
IllegalStateException} only upon some subsequent operation on
this phaser, if ever.

@return the arrival phase number, or a negative value if terminated
@throws IllegalStateException if not terminated and the number
of unarrived parties would become negative"
      end

      operation 1585307 "arriveAndDeregister"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Arrives at this phaser and deregisters from it without waiting
for others to arrive. Deregistration reduces the number of
parties required to advance in future phases.  If this phaser
has a parent, and deregistration causes this phaser to have
zero parties, this phaser is also deregistered from its parent.

<p>It is a usage error for an unregistered party to invoke this
method.  However, this error may result in an {@code
IllegalStateException} only upon some subsequent operation on
this phaser, if ever.

@return the arrival phase number, or a negative value if terminated
@throws IllegalStateException if not terminated and the number
of registered or unarrived parties would become negative"
      end

      operation 1585435 "arriveAndAwaitAdvance"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Arrives at this phaser and awaits others. Equivalent in effect
to {@code awaitAdvance(arrive())}.  If you need to await with
interruption or timeout, you can arrange this with an analogous
construction using one of the other forms of the {@code
awaitAdvance} method.  If instead you need to deregister upon
arrival, use {@code awaitAdvance(arriveAndDeregister())}.

<p>It is a usage error for an unregistered party to invoke this
method.  However, this error may result in an {@code
IllegalStateException} only upon some subsequent operation on
this phaser, if ever.

@return the arrival phase number, or the (negative)
{@linkplain #getPhase() current phase} if terminated
@throws IllegalStateException if not terminated and the number
of unarrived parties would become negative"
      end

      operation 1585563 "awaitAdvance"
	public explicit_return_type "int"
	nparams 1
	  param in name "phase" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Awaits the phase of this phaser to advance from the given phase
value, returning immediately if the current phase is not equal
to the given phase value or this phaser is terminated.

@param phase an arrival phase number, or negative value if
terminated; this argument is normally the value returned by a
previous call to {@code arrive} or {@code arriveAndDeregister}.
@return the next arrival phase number, or the argument if it is
negative, or the (negative) {@linkplain #getPhase() current phase}
if terminated"
      end

      operation 1585691 "awaitAdvanceInterruptibly"
	public explicit_return_type "int"
	nparams 1
	  param in name "phase" explicit_type "int"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Awaits the phase of this phaser to advance from the given phase
value, throwing {@code InterruptedException} if interrupted
while waiting, or returning immediately if the current phase is
not equal to the given phase value or this phaser is
terminated.

@param phase an arrival phase number, or negative value if
terminated; this argument is normally the value returned by a
previous call to {@code arrive} or {@code arriveAndDeregister}.
@return the next arrival phase number, or the argument if it is
negative, or the (negative) {@linkplain #getPhase() current phase}
if terminated
@throws InterruptedException if thread interrupted while waiting"
      end

      operation 1585819 "awaitAdvanceInterruptibly"
	public explicit_return_type "int"
	nparams 3
	  param in name "phase" explicit_type "int"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 2
	  exception class_ref 155547 // InterruptedException
	  exception class_ref 253723 // TimeoutException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Awaits the phase of this phaser to advance from the given phase
value or the given timeout to elapse, throwing {@code
InterruptedException} if interrupted while waiting, or
returning immediately if the current phase is not equal to the
given phase value or this phaser is terminated.

@param phase an arrival phase number, or negative value if
terminated; this argument is normally the value returned by a
previous call to {@code arrive} or {@code arriveAndDeregister}.
@param timeout how long to wait before giving up, in units of
       {@code unit}
@param unit a {@code TimeUnit} determining how to interpret the
       {@code timeout} parameter
@return the next arrival phase number, or the argument if it is
negative, or the (negative) {@linkplain #getPhase() current phase}
if terminated
@throws InterruptedException if thread interrupted while waiting
@throws TimeoutException if timed out while waiting"
      end

      operation 1585947 "forceTermination"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Forces this phaser to enter termination state.  Counts of
registered parties are unaffected.  If this phaser is a member
of a tiered set of phasers, then all of the phasers in the set
are terminated.  If this phaser is already terminated, this
method has no effect.  This method may be useful for
coordinating recovery after one or more tasks encounter
unexpected exceptions."
      end

      operation 1586075 "getPhase"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current phase number. The maximum phase number is
{@code Integer.MAX_VALUE}, after which it restarts at
zero. Upon termination, the phase number is negative,
in which case the prevailing phase prior to termination
may be obtained via {@code getPhase() + Integer.MIN_VALUE}.

@return the phase number, or a negative value if terminated"
      end

      operation 1586203 "getRegisteredParties"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of parties registered at this phaser.

@return the number of parties"
      end

      operation 1586331 "getArrivedParties"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of registered parties that have arrived at
the current phase of this phaser. If this phaser has terminated,
the returned value is meaningless and arbitrary.

@return the number of arrived parties"
      end

      operation 1586459 "getUnarrivedParties"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the number of registered parties that have not yet
arrived at the current phase of this phaser. If this phaser has
terminated, the returned value is meaningless and arbitrary.

@return the number of unarrived parties"
      end

      operation 1586587 "getParent"
	public return_type class_ref 268571 // Phaser
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the parent of this phaser, or {@code null} if none.

@return the parent of this phaser, or {@code null} if none"
      end

      operation 1586715 "getRoot"
	public return_type class_ref 268571 // Phaser
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the root ancestor of this phaser, which is the same as
this phaser if it has no parent.

@return the root ancestor of this phaser"
      end

      operation 1586843 "isTerminated"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this phaser has been terminated.

@return {@code true} if this phaser has been terminated"
      end

      operation 1586971 "onAdvance"
	protected explicit_return_type "boolean"
	nparams 2
	  param in name "phase" explicit_type "int"
	  param in name "registeredParties" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Overridable method to perform an action upon impending phase
advance, and to control termination. This method is invoked
upon arrival of the party advancing this phaser (when all other
waiting parties are dormant).  If this method returns {@code
true}, this phaser will be set to a final termination state
upon advance, and subsequent calls to {@link #isTerminated}
will return true. Any (unchecked) Exception or Error thrown by
an invocation of this method is propagated to the party
attempting to advance this phaser, in which case no advance
occurs.

<p>The arguments to this method provide the state of the phaser
prevailing for the current transition.  The effects of invoking
arrival, registration, and waiting methods on this phaser from
within {@code onAdvance} are unspecified and should not be
relied on.

<p>If this phaser is a member of a tiered set of phasers, then
{@code onAdvance} is invoked only for its root phaser on each
advance.

<p>To support the most common use cases, the default
implementation of this method returns {@code true} when the
number of registered parties has become zero as the result of a
party invoking {@code arriveAndDeregister}.  You can disable
this behavior, thus enabling continuation upon future
registrations, by overriding this method to always return
{@code false}:

<pre> {@code
Phaser phaser = new Phaser() {
  protected boolean onAdvance(int phase, int parties) { return false; }
}}</pre>

@param phase the current phase number on entry to this method,
before this phaser is advanced
@param registeredParties the current number of registered parties
@return {@code true} if this phaser should terminate"
      end

      operation 1587099 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this phaser, as well as its
state.  The state, in brackets, includes the String {@code
\"phase = \"} followed by the phase number, {@code \"parties = \"}
followed by the number of registered parties, and {@code
\"arrived = \"} followed by the number of arrived parties.

@return a string identifying this phaser, as well as its state"
      end

      operation 1587227 "stateToString"
	private return_type class_ref 3399692 // String
	nparams 1
	  param in name "s" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implementation of toString and string-based error messages"
      end

      operation 1587355 "releaseWaiters"
	private explicit_return_type "void"
	nparams 1
	  param in name "phase" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Waiting mechanics

Removes and signals threads from queue for phase."
      end

      operation 1587483 "abortWait"
	private explicit_return_type "int"
	nparams 1
	  param in name "phase" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Variant of releaseWaiters that additionally tries to remove any
nodes no longer waiting for advance due to timeout or
interrupt. Currently, nodes are removed only if they are at
head of queue, which suffices to reduce memory footprint in
most usages.

@return current phase on exit"
      end

      attribute 387099 "NCPU"
	class_attribute const_attribute private explicit_type "int"
	init_value " Runtime.getRuntime().availableProcessors()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The number of CPUs, for spin control "
      end

      attribute 387227 "SPINS_PER_ARRIVAL"
	class_attribute const_attribute package explicit_type "int"
	init_value " (NCPU < 2) ? 1 : 1 << 8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times to spin before blocking while waiting for
advance, per arrival while waiting. On multiprocessors, fully
blocking and waking up a large number of threads all at once is
usually a very slow process, so we use rechargeable spins to
avoid it when threads regularly arrive: When a thread in
internalAwaitAdvance notices another arrival before blocking,
and there appear to be enough CPUs available, it spins
SPINS_PER_ARRIVAL more times before blocking. The value trades
off good-citizenship vs big unnecessary slowdowns.
"
      end

      operation 1587611 "internalAwaitAdvance"
	private explicit_return_type "int"
	nparams 2
	  param in name "phase" explicit_type "int"
	  param inout name "node" type class_ref 268699 // QNode
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Possibly blocks and waits for phase to advance unless aborted.
Call only on root phaser.

@param phase current phase
@param node if non-null, the wait node to track interrupt and timeout;
if null, denotes noninterruptible wait
@return current phase"
      end

      classrelation 452763 // UNSAFE (<unidirectional association>)
	relation 452763 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 452763 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 388123 "stateOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 133403 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = Phaser.class;
            stateOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"state\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 268827 "PriorityBlockingQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 232859 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 254107 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

An unbounded {@linkplain BlockingQueue blocking queue} that uses
the same ordering rules as class {@link PriorityQueue} and supplies
blocking retrieval operations.  While this queue is logically
unbounded, attempted additions may fail due to resource exhaustion
(causing {@code OutOfMemoryError}). This class does not permit
{@code null} elements.  A priority queue relying on {@linkplain
Comparable natural ordering} also does not permit insertion of
non-comparable objects (doing so results in
{@code ClassCastException}).

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.  The Iterator provided in method {@link
#iterator()} is <em>not</em> guaranteed to traverse the elements of
the PriorityBlockingQueue in any particular order. If you need
ordered traversal, consider using
{@code Arrays.sort(pq.toArray())}.  Also, method {@code drainTo}
can be used to <em>remove</em> some or all elements in priority
order and place them in another collection.

<p>Operations on this class make no guarantees about the ordering
of elements with equal priority. If you need to enforce an
ordering, you can define custom classes or comparators that use a
secondary key to break ties in primary priority values.  For
example, here is a class that applies first-in-first-out
tie-breaking to comparable elements. To use it, you would insert a
{@code new FIFOEntry(anEntry)} instead of a plain entry object.

 <pre> {@code
class FIFOEntry<E extends Comparable<? super E>>
    implements Comparable<FIFOEntry<E>> {
  static final AtomicLong seq = new AtomicLong(0);
  final long seqNum;
  final E entry;
  public FIFOEntry(E entry) {
    seqNum = seq.getAndIncrement();
    this.entry = entry;
  }
  public E getEntry() { return entry; }
  public int compareTo(FIFOEntry<E> other) {
    int res = entry.compareTo(other.entry);
    if (res == 0 && other.entry != this.entry)
      res = (seqNum < other.seqNum ? -1 : 1);
    return res;
  }
}}</pre>

@since 1.5
@author Doug Lea
@param <E> the type of elements held in this collection"
      classrelation 452891 // <realization>
	relation 452891 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 452891 // <realization>
	  b parent class_ref 232859 // AbstractQueue
      end

      classrelation 453019 // <realization>
	relation 453019 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 453019 // <realization>
	  b parent class_ref 254107 // BlockingQueue
      end

      classrelation 453147 // <realization>
	relation 453147 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 453147 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 388251 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5595510919245408276L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 388379 "DEFAULT_INITIAL_CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " 11"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The implementation uses an array-based binary heap, with public
operations protected with a single lock. However, allocation
during resizing uses a simple spinlock (used only while not
holding main lock) in order to allow takes to operate
concurrently with allocation.  This avoids repeated
postponement of waiting consumers and consequent element
build-up. The need to back away from lock during allocation
makes it impossible to simply wrap delegated
java.util.PriorityQueue operations within a lock, as was done
in a previous version of this class. To maintain
interoperability, a plain PriorityQueue is still used during
serialization, which maintains compatibility at the expense of
transiently doubling overhead.


Default array capacity.
"
      end

      attribute 388507 "MAX_ARRAY_SIZE"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.MAX_VALUE - 8"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The maximum size of array to allocate.
Some VMs reserve some header words in an array.
Attempts to allocate larger arrays may result in
OutOfMemoryError: Requested array size exceeds VM limit
"
      end

      classrelation 453275 // queue (<unidirectional association>)
	relation 453275 --->
	  a role_name "queue" multiplicity "[]" private
	    comment "
Priority queue represented as a balanced binary heap: the two
children of queue[n] are queue[2*n+1] and queue[2*(n+1)].  The
priority queue is ordered by comparator, or by the elements'
natural ordering, if comparator is null: For each node n in the
heap and each descendant d of n, n <= d.  The element with the
lowest value is in queue[0], assuming the queue is nonempty.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	    classrelation_ref 453275 // queue (<unidirectional association>)
	  b parent class_ref 3401484 // Object
      end

      attribute 388635 "size"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of elements in the priority queue.
"
      end

      classrelation 453403 // comparator (<unidirectional association>)
	relation 453403 --->
	  a role_name "comparator" private
	    comment "
The comparator, or null if priority queue uses elements'
natural ordering.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<? super E> ${name}${value};
"
	    classrelation_ref 453403 // comparator (<unidirectional association>)
	  b parent class_ref 3094156 // Comparator
      end

      classrelation 453531 // lock (<unidirectional association>)
	relation 453531 --->
	  a role_name "lock" const_relation private
	    comment "
Lock used for all public operations

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 453531 // lock (<unidirectional association>)
	  b parent class_ref 254235 // ReentrantLock
      end

      classrelation 453659 // notEmpty (<unidirectional association>)
	relation 453659 --->
	  a role_name "notEmpty" const_relation private
	    comment "
Condition for blocking when empty

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 453659 // notEmpty (<unidirectional association>)
	  b parent class_ref 254363 // Condition
      end

      attribute 388763 "allocationSpinLock"
	volatile private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	transient java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Spinlock for allocation, acquired via CAS.
"
      end

      classrelation 453787 // q (<unidirectional association>)
	relation 453787 --->
	  a role_name "q" private
	    comment "
A plain PriorityQueue used only for serialization,
to maintain compatibility with previous versions
of this class. Non-null only during serialization/deserialization.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<E> ${name}${value};
"
	    classrelation_ref 453787 // q (<unidirectional association>)
	  b parent class_ref 247835 // PriorityQueue
      end

      operation 1588123 "PriorityBlockingQueue"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code PriorityBlockingQueue} with the default
initial capacity (11) that orders its elements according to
their {@linkplain Comparable natural ordering}."
      end

      operation 1588251 "PriorityBlockingQueue"
	public explicit_return_type ""
	nparams 1
	  param in name "initialCapacity" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code PriorityBlockingQueue} with the specified
initial capacity that orders its elements according to their
{@linkplain Comparable natural ordering}.

@param initialCapacity the initial capacity for this priority queue
@throws IllegalArgumentException if {@code initialCapacity} is less
        than 1"
      end

      operation 1588379 "PriorityBlockingQueue"
	public explicit_return_type ""
	nparams 2
	  param in name "initialCapacity" explicit_type "int"
	  param inout name "comparator" type class_ref 3094156 // Comparator
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1}<? super E> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code PriorityBlockingQueue} with the specified initial
capacity that orders its elements according to the specified
comparator.

@param initialCapacity the initial capacity for this priority queue
@param  comparator the comparator that will be used to order this
        priority queue.  If {@code null}, the {@linkplain Comparable
        natural ordering} of the elements will be used.
@throws IllegalArgumentException if {@code initialCapacity} is less
        than 1"
      end

      operation 1588507 "PriorityBlockingQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<? extends E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code PriorityBlockingQueue} containing the elements
in the specified collection.  If the specified collection is a
{@link SortedSet} or a {@link PriorityQueue},  this
priority queue will be ordered according to the same ordering.
Otherwise, this priority queue will be ordered according to the
{@linkplain Comparable natural ordering} of its elements.

@param  c the collection whose elements are to be placed
        into this priority queue
@throws ClassCastException if elements of the specified collection
        cannot be compared to one another according to the priority
        queue's ordering
@throws NullPointerException if the specified collection or any
        of its elements are null"
      end

      operation 1588635 "tryGrow"
	private explicit_return_type "void"
	nparams 2
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "oldCap" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}[] ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to grow array to accommodate at least one more element
(but normally expand by about 50%), giving up (allowing retry)
on contention (which we expect to be rare). Call only while
holding lock.

@param array the heap array
@param oldCap the length of the array"
      end

      operation 1588763 "dequeue"
	private explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Mechanics for poll().  Call only while holding lock."
      end

      operation 1588891 "siftUpComparable"
	class_operation private explicit_return_type "void"
	nparams 3
	  param in name "k" explicit_type "int"
	  param inout name "x" explicit_type "T"
	  param inout name "array" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts item x at position k, maintaining heap invariant by
promoting x up the tree until it is greater than or equal to
its parent, or is the root.

To simplify and speed up coercions and comparisons. the
Comparable and Comparator versions are separated into different
methods that are otherwise identical. (Similarly for siftDown.)
These methods are static, with heap state as arguments, to
simplify use in light of possible comparator exceptions.

@param k the position to fill
@param x the item to insert
@param array the heap array
@param n heap size"
      end

      operation 1589019 "siftUpUsingComparator"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "k" explicit_type "int"
	  param inout name "x" explicit_type "T"
	  param inout name "array" type class_ref 3401484 // Object
	  param inout name "cmp" type class_ref 3094156 // Comparator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3}<? super T> ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1589147 "siftDownComparable"
	class_operation private explicit_return_type "void"
	nparams 4
	  param in name "k" explicit_type "int"
	  param inout name "x" explicit_type "T"
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "n" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts item x at position k, maintaining heap invariant by
demoting x down the tree repeatedly until it is less than or
equal to its children or is a leaf.

@param k the position to fill
@param x the item to insert
@param array the heap array
@param n heap size"
      end

      operation 1589275 "siftDownUsingComparator"
	class_operation private explicit_return_type "void"
	nparams 5
	  param in name "k" explicit_type "int"
	  param inout name "x" explicit_type "T"
	  param inout name "array" type class_ref 3401484 // Object
	  param in name "n" explicit_type "int"
	  param inout name "cmp" type class_ref 3094156 // Comparator
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}[] ${p2}, ${t3} ${p3}, ${t4}<? super T> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1589403 "heapify"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Establishes the heap invariant (described above) in the entire tree,
assuming nothing about the order of the elements prior to the call."
      end

      operation 1589531 "add"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this priority queue.

@param e the element to add
@return {@code true} (as specified by {@link Collection#add})
@throws ClassCastException if the specified element cannot be compared
        with elements currently in the priority queue according to the
        priority queue's ordering
@throws NullPointerException if the specified element is null"
      end

      operation 1589659 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this priority queue.
As the queue is unbounded, this method will never return {@code false}.

@param e the element to add
@return {@code true} (as specified by {@link Queue#offer})
@throws ClassCastException if the specified element cannot be compared
        with elements currently in the priority queue according to the
        priority queue's ordering
@throws NullPointerException if the specified element is null"
      end

      operation 1589787 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this priority queue.
As the queue is unbounded, this method will never block.

@param e the element to add
@throws ClassCastException if the specified element cannot be compared
        with elements currently in the priority queue according to the
        priority queue's ordering
@throws NullPointerException if the specified element is null"
      end

      operation 1589915 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "e" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this priority queue.
As the queue is unbounded, this method will never block or
return {@code false}.

@param e the element to add
@param timeout This parameter is ignored as the method never blocks
@param unit This parameter is ignored as the method never blocks
@return {@code true} (as specified by
 {@link BlockingQueue#offer(Object,long,TimeUnit) BlockingQueue.offer})
@throws ClassCastException if the specified element cannot be compared
        with elements currently in the priority queue according to the
        priority queue's ordering
@throws NullPointerException if the specified element is null"
      end

      operation 1590043 "poll"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1590171 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1590299 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1590427 "peek"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1590555 "comparator"
	public return_type class_ref 3094156 // Comparator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<? super E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the comparator used to order the elements in this queue,
or {@code null} if this queue uses the {@linkplain Comparable
natural ordering} of its elements.

@return the comparator used to order the elements in this queue,
        or {@code null} if this queue uses the natural
        ordering of its elements"
      end

      operation 1590683 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1590811 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns {@code Integer.MAX_VALUE} because
a {@code PriorityBlockingQueue} is not capacity constrained.
@return {@code Integer.MAX_VALUE} always"
      end

      operation 1590939 "indexOf"
	private explicit_return_type "int"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1591067 "removeAt"
	private explicit_return_type "void"
	nparams 1
	  param in name "i" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes the ith element from queue."
      end

      operation 1591195 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes a single instance of the specified element from this queue,
if it is present.  More formally, removes an element {@code e} such
that {@code o.equals(e)}, if this queue contains one or more such
elements.  Returns {@code true} if and only if this queue contained
the specified element (or equivalently, if this queue changed as a
result of the call).

@param o element to be removed from this queue, if present
@return {@code true} if this queue changed as a result of the call"
      end

      operation 1591323 "removeEQ"
	package explicit_return_type "void"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Identity-based version for use in Itr.remove"
      end

      operation 1591451 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this queue contains the specified element.
More formally, returns {@code true} if and only if this queue contains
at least one element {@code e} such that {@code o.equals(e)}.

@param o object to be checked for containment in this queue
@return {@code true} if this queue contains the specified element"
      end

      operation 1591579 "toArray"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue.
The returned array elements are in no particular order.

<p>The returned array will be \"safe\" in that no references to it are
maintained by this queue.  (In other words, this method must allocate
a new array).  The caller is thus free to modify the returned array.

<p>This method acts as bridge between array-based and collection-based
APIs.

@return an array containing all of the elements in this queue"
      end

      operation 1591707 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1591835 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      operation 1591963 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 160667 // Collection
	  param in name "maxElements" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      operation 1592091 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Atomically removes all of the elements from this queue.
The queue will be empty after this call returns."
      end

      operation 1592219 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an array containing all of the elements in this queue; the
runtime type of the returned array is that of the specified array.
The returned array elements are in no particular order.
If the queue fits in the specified array, it is returned therein.
Otherwise, a new array is allocated with the runtime type of the
specified array and the size of this queue.

<p>If this queue fits in the specified array with room to spare
(i.e., the array has more elements than this queue), the element in
the array immediately following the end of the queue is set to
{@code null}.

<p>Like the {@link #toArray()} method, this method acts as bridge between
array-based and collection-based APIs.  Further, this method allows
precise control over the runtime type of the output array, and may,
under certain circumstances, be used to save allocation costs.

<p>Suppose {@code x} is a queue known to contain only strings.
The following code can be used to dump the queue into a newly
allocated array of {@code String}:

 <pre> {@code String[] y = x.toArray(new String[0]);}</pre>

Note that {@code toArray(new Object[0])} is identical in function to
{@code toArray()}.

@param a the array into which the elements of the queue are to
         be stored, if it is big enough; otherwise, a new array of the
         same runtime type is allocated for this purpose
@return an array containing all of the elements in this queue
@throws ArrayStoreException if the runtime type of the specified array
        is not a supertype of the runtime type of every element in
        this queue
@throws NullPointerException if the specified array is null"
      end

      operation 1592347 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an iterator over the elements in this queue. The
iterator does not return the elements in any particular order.

<p>The returned iterator is a \"weakly consistent\" iterator that
will never throw {@link java.util.ConcurrentModificationException
ConcurrentModificationException}, and guarantees to traverse
elements as they existed upon construction of the iterator, and
may (but is not guaranteed to) reflect any modifications
subsequent to construction.

@return an iterator over the elements in this queue"
      end

      class 268955 "Itr"
	visibility package 
	nactuals 1
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 453915 // <realization>
	  relation 453915 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 453915 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 454043 // array (<unidirectional association>)
	  relation 454043 --->
	    a role_name "array" multiplicity "[]" const_relation package
	      comment " Array of all elements"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
	      classrelation_ref 454043 // array (<unidirectional association>)
	    b parent class_ref 3401484 // Object
	end

	attribute 388891 "cursor"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " index of next element to return"
	end

	attribute 389019 "lastRet"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " index of last element, or -1 if no such"
	end

	operation 1592475 "Itr"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "array" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1592603 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1592731 "next"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1592859 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1592987 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves the state to a stream (that is, serializes it).  For
compatibility with previous version of this class,
elements are first copied to a java.util.PriorityQueue,
which is then serialized."
      end

      operation 1593115 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Reconstitutes the {@code PriorityBlockingQueue} instance from a stream
(that is, deserializes it).

@param s the stream"
      end

      classrelation 454171 // UNSAFE (<unidirectional association>)
	relation 454171 --->
	  a role_name "UNSAFE" class_relation const_relation private
	    comment " Unsafe mechanics
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 454171 // UNSAFE (<unidirectional association>)
	  b parent class_ref 255899 // Unsafe
      end

      attribute 389147 "allocationSpinLockOffset"
	class_attribute const_attribute private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      extra_member 133531 "initialization"
	
	cpp "" ""
	java "  static {
        try {
            UNSAFE = sun.misc.Unsafe.getUnsafe();
            Class<?> k = PriorityBlockingQueue.class;
            allocationSpinLockOffset = UNSAFE.objectFieldOffset
                (k.getDeclaredField(\"allocationSpinLock\"));
        } catch (Exception e) {
            throw new Error(e);
        }
    }"
	php ""
	python ""
	idl ""
      end
    end

    class 269083 "RecursiveTask"
      abstract visibility public 
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 1
      actual class class_ref 266139 // ForkJoinTask
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A recursive result-bearing {@link ForkJoinTask}.

<p>For a classic example, here is a task computing Fibonacci numbers:

 <pre> {@code
class Fibonacci extends RecursiveTask<Integer> {
  final int n;
  Fibonacci(int n) { this.n = n; }
  Integer compute() {
    if (n <= 1)
       return n;
    Fibonacci f1 = new Fibonacci(n - 1);
    f1.fork();
    Fibonacci f2 = new Fibonacci(n - 2);
    return f2.compute() + f1.join();
  }
}}</pre>

However, besides being a dumb way to compute Fibonacci functions
(there is a simple fast linear algorithm that you'd use in
practice), this is likely to perform poorly because the smallest
subtasks are too small to be worthwhile splitting up. Instead, as
is the case for nearly all fork/join applications, you'd pick some
minimum granularity size (for example 10 here) for which you always
sequentially solve rather than subdividing.

@since 1.7
@hide
@author Doug Lea"
      classrelation 454299 // <realization>
	relation 454299 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 454299 // <realization>
	  b parent class_ref 266139 // ForkJoinTask
      end

      attribute 389275 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " 5232453952276485270L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 389403 "result"
	package explicit_type "V"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The result of the computation.
"
      end

      operation 1593243 "compute"
	abstract protected explicit_return_type "V"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "The main computation performed by this task."
      end

      operation 1593371 "getRawResult"
	public explicit_return_type "V"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1593499 "setRawResult"
	protected explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "V"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1593627 "exec"
	protected explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Implements execution conventions for RecursiveTask."
      end
    end

    class 269211 "RejectedExecutionException"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "Exception thrown by an {@link Executor} when a task cannot be
accepted for execution.

@since 1.5
@author Doug Lea"
      classrelation 454427 // <generalisation>
	relation 454427 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 454427 // <generalisation>
	  b parent class_ref 806284 // RuntimeException
      end

      attribute 389531 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -375805702767069545L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1593755 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>RejectedExecutionException</tt> with no detail message.
The cause is not initialized, and may subsequently be
initialized by a call to {@link #initCause(Throwable) initCause}."
      end

      operation 1593883 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "message" type class_ref 3399692 // String
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>RejectedExecutionException</tt> with the
specified detail message. The cause is not initialized, and may
subsequently be initialized by a call to {@link
#initCause(Throwable) initCause}.

@param message the detail message"
      end

      operation 1594011 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 2
	  param inout name "message" type class_ref 3399692 // String
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>RejectedExecutionException</tt> with the
specified detail message and cause.

@param  message the detail message
@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)"
      end

      operation 1594139 "RejectedExecutionException"
	public explicit_return_type ""
	nparams 1
	  param inout name "cause" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructs a <tt>RejectedExecutionException</tt> with the
specified cause.  The detail message is set to {@code (cause ==
null ? null : cause.toString())} (which typically contains
the class and detail message of <tt>cause</tt>).

@param  cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method)"
      end
    end

    class 269339 "RejectedExecutionHandler"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A handler for tasks that cannot be executed by a {@link ThreadPoolExecutor}.

@since 1.5
@author Doug Lea"
      operation 1594267 "rejectedExecution"
	public explicit_return_type "void"
	nparams 2
	  param inout name "r" type class_ref 151963 // Runnable
	  param inout name "executor" type class_ref 269467 // ThreadPoolExecutor
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method that may be invoked by a {@link ThreadPoolExecutor} when
{@link ThreadPoolExecutor#execute execute} cannot accept a
task.  This may occur when no more threads or queue slots are
available because their bounds would be exceeded, or upon
shutdown of the Executor.

<p>In the absence of other alternatives, the method may throw
an unchecked {@link RejectedExecutionException}, which will be
propagated to the caller of {@code execute}.

@param r the runnable task requested to be executed
@param executor the executor attempting to execute this task
@throws RejectedExecutionException if there is no remedy"
      end
    end

    class 269467 "ThreadPoolExecutor"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed security manager docs
 END android-note

An {@link ExecutorService} that executes each submitted task using
one of possibly several pooled threads, normally configured
using {@link Executors} factory methods.

<p>Thread pools address two different problems: they usually
provide improved performance when executing large numbers of
asynchronous tasks, due to reduced per-task invocation overhead,
and they provide a means of bounding and managing the resources,
including threads, consumed when executing a collection of tasks.
Each {@code ThreadPoolExecutor} also maintains some basic
statistics, such as the number of completed tasks.

<p>To be useful across a wide range of contexts, this class
provides many adjustable parameters and extensibility
hooks. However, programmers are urged to use the more convenient
{@link Executors} factory methods {@link
Executors#newCachedThreadPool} (unbounded thread pool, with
automatic thread reclamation), {@link Executors#newFixedThreadPool}
(fixed size thread pool) and {@link
Executors#newSingleThreadExecutor} (single background thread), that
preconfigure settings for the most common usage
scenarios. Otherwise, use the following guide when manually
configuring and tuning this class:

<dl>

<dt>Core and maximum pool sizes</dt>

<dd>A {@code ThreadPoolExecutor} will automatically adjust the
pool size (see {@link #getPoolSize})
according to the bounds set by
corePoolSize (see {@link #getCorePoolSize}) and
maximumPoolSize (see {@link #getMaximumPoolSize}).

When a new task is submitted in method {@link #execute}, and fewer
than corePoolSize threads are running, a new thread is created to
handle the request, even if other worker threads are idle.  If
there are more than corePoolSize but less than maximumPoolSize
threads running, a new thread will be created only if the queue is
full.  By setting corePoolSize and maximumPoolSize the same, you
create a fixed-size thread pool. By setting maximumPoolSize to an
essentially unbounded value such as {@code Integer.MAX_VALUE}, you
allow the pool to accommodate an arbitrary number of concurrent
tasks. Most typically, core and maximum pool sizes are set only
upon construction, but they may also be changed dynamically using
{@link #setCorePoolSize} and {@link #setMaximumPoolSize}. </dd>

<dt>On-demand construction</dt>

<dd> By default, even core threads are initially created and
started only when new tasks arrive, but this can be overridden
dynamically using method {@link #prestartCoreThread} or {@link
#prestartAllCoreThreads}.  You probably want to prestart threads if
you construct the pool with a non-empty queue. </dd>

<dt>Creating new threads</dt>

<dd>New threads are created using a {@link ThreadFactory}.  If not
otherwise specified, a {@link Executors#defaultThreadFactory} is
used, that creates threads to all be in the same {@link
ThreadGroup} and with the same {@code NORM_PRIORITY} priority and
non-daemon status. By supplying a different ThreadFactory, you can
alter the thread's name, thread group, priority, daemon status,
etc. If a {@code ThreadFactory} fails to create a thread when asked
by returning null from {@code newThread}, the executor will
continue, but might not be able to execute any tasks.</dd>

<dt>Keep-alive times</dt>

<dd>If the pool currently has more than corePoolSize threads,
excess threads will be terminated if they have been idle for more
than the keepAliveTime (see {@link #getKeepAliveTime}). This
provides a means of reducing resource consumption when the pool is
not being actively used. If the pool becomes more active later, new
threads will be constructed. This parameter can also be changed
dynamically using method {@link #setKeepAliveTime}. Using a value
of {@code Long.MAX_VALUE} {@link TimeUnit#NANOSECONDS} effectively
disables idle threads from ever terminating prior to shut down. By
default, the keep-alive policy applies only when there are more
than corePoolSizeThreads. But method {@link
#allowCoreThreadTimeOut(boolean)} can be used to apply this
time-out policy to core threads as well, so long as the
keepAliveTime value is non-zero. </dd>

<dt>Queuing</dt>

<dd>Any {@link BlockingQueue} may be used to transfer and hold
submitted tasks.  The use of this queue interacts with pool sizing:

<ul>

<li> If fewer than corePoolSize threads are running, the Executor
always prefers adding a new thread
rather than queuing.</li>

<li> If corePoolSize or more threads are running, the Executor
always prefers queuing a request rather than adding a new
thread.</li>

<li> If a request cannot be queued, a new thread is created unless
this would exceed maximumPoolSize, in which case, the task will be
rejected.</li>

</ul>

There are three general strategies for queuing:
<ol>

<li> <em> Direct handoffs.</em> A good default choice for a work
queue is a {@link SynchronousQueue} that hands off tasks to threads
without otherwise holding them. Here, an attempt to queue a task
will fail if no threads are immediately available to run it, so a
new thread will be constructed. This policy avoids lockups when
handling sets of requests that might have internal dependencies.
Direct handoffs generally require unbounded maximumPoolSizes to
avoid rejection of new submitted tasks. This in turn admits the
possibility of unbounded thread growth when commands continue to
arrive on average faster than they can be processed.  </li>

<li><em> Unbounded queues.</em> Using an unbounded queue (for
example a {@link LinkedBlockingQueue} without a predefined
capacity) will cause new tasks to wait in the queue when all
corePoolSize threads are busy. Thus, no more than corePoolSize
threads will ever be created. (And the value of the maximumPoolSize
therefore doesn't have any effect.)  This may be appropriate when
each task is completely independent of others, so tasks cannot
affect each others execution; for example, in a web page server.
While this style of queuing can be useful in smoothing out
transient bursts of requests, it admits the possibility of
unbounded work queue growth when commands continue to arrive on
average faster than they can be processed.  </li>

<li><em>Bounded queues.</em> A bounded queue (for example, an
{@link ArrayBlockingQueue}) helps prevent resource exhaustion when
used with finite maximumPoolSizes, but can be more difficult to
tune and control.  Queue sizes and maximum pool sizes may be traded
off for each other: Using large queues and small pools minimizes
CPU usage, OS resources, and context-switching overhead, but can
lead to artificially low throughput.  If tasks frequently block (for
example if they are I/O bound), a system may be able to schedule
time for more threads than you otherwise allow. Use of small queues
generally requires larger pool sizes, which keeps CPUs busier but
may encounter unacceptable scheduling overhead, which also
decreases throughput.  </li>

</ol>

</dd>

<dt>Rejected tasks</dt>

<dd> New tasks submitted in method {@link #execute} will be
<em>rejected</em> when the Executor has been shut down, and also
when the Executor uses finite bounds for both maximum threads and
work queue capacity, and is saturated.  In either case, the {@code
execute} method invokes the {@link
RejectedExecutionHandler#rejectedExecution} method of its {@link
RejectedExecutionHandler}.  Four predefined handler policies are
provided:

<ol>

<li> In the default {@link ThreadPoolExecutor.AbortPolicy}, the
handler throws a runtime {@link RejectedExecutionException} upon
rejection. </li>

<li> In {@link ThreadPoolExecutor.CallerRunsPolicy}, the thread
that invokes {@code execute} itself runs the task. This provides a
simple feedback control mechanism that will slow down the rate that
new tasks are submitted. </li>

<li> In {@link ThreadPoolExecutor.DiscardPolicy}, a task that
cannot be executed is simply dropped.  </li>

<li>In {@link ThreadPoolExecutor.DiscardOldestPolicy}, if the
executor is not shut down, the task at the head of the work queue
is dropped, and then execution is retried (which can fail again,
causing this to be repeated.) </li>

</ol>

It is possible to define and use other kinds of {@link
RejectedExecutionHandler} classes. Doing so requires some care
especially when policies are designed to work only under particular
capacity or queuing policies. </dd>

<dt>Hook methods</dt>

<dd>This class provides {@code protected} overridable {@link
#beforeExecute} and {@link #afterExecute} methods that are called
before and after execution of each task.  These can be used to
manipulate the execution environment; for example, reinitializing
ThreadLocals, gathering statistics, or adding log
entries. Additionally, method {@link #terminated} can be overridden
to perform any special processing that needs to be done once the
Executor has fully terminated.

<p>If hook or callback methods throw exceptions, internal worker
threads may in turn fail and abruptly terminate.</dd>

<dt>Queue maintenance</dt>

<dd> Method {@link #getQueue} allows access to the work queue for
purposes of monitoring and debugging.  Use of this method for any
other purpose is strongly discouraged.  Two supplied methods,
{@link #remove} and {@link #purge} are available to assist in
storage reclamation when large numbers of queued tasks become
cancelled.</dd>

<dt>Finalization</dt>

<dd> A pool that is no longer referenced in a program <em>AND</em>
has no remaining threads will be {@code shutdown} automatically. If
you would like to ensure that unreferenced pools are reclaimed even
if users forget to call {@link #shutdown}, then you must arrange
that unused threads eventually die, by setting appropriate
keep-alive times, using a lower bound of zero core threads and/or
setting {@link #allowCoreThreadTimeOut(boolean)}.  </dd>

</dl>

<p> <b>Extension example</b>. Most extensions of this class
override one or more of the protected hook methods. For example,
here is a subclass that adds a simple pause/resume feature:

 <pre> {@code
class PausableThreadPoolExecutor extends ThreadPoolExecutor {
  private boolean isPaused;
  private ReentrantLock pauseLock = new ReentrantLock();
  private Condition unpaused = pauseLock.newCondition();

  public PausableThreadPoolExecutor(...) { super(...); }

  protected void beforeExecute(Thread t, Runnable r) {
    super.beforeExecute(t, r);
    pauseLock.lock();
    try {
      while (isPaused) unpaused.await();
    } catch (InterruptedException ie) {
      t.interrupt();
    } finally {
      pauseLock.unlock();
    }
  }

  public void pause() {
    pauseLock.lock();
    try {
      isPaused = true;
    } finally {
      pauseLock.unlock();
    }
  }

  public void resume() {
    pauseLock.lock();
    try {
      isPaused = false;
      unpaused.signalAll();
    } finally {
      pauseLock.unlock();
    }
  }
}}</pre>

@since 1.5
@author Doug Lea"
      classrelation 455067 // <generalisation>
	relation 455067 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 455067 // <generalisation>
	  b parent class_ref 252827 // AbstractExecutorService
      end

      classrelation 455195 // ctl (<unidirectional association>)
	relation 455195 --->
	  a role_name "ctl" init_value " new AtomicInteger(ctlOf(RUNNING, 0))" const_relation private
	    comment "
The main pool control state, ctl, is an atomic integer packing
two conceptual fields
  workerCount, indicating the effective number of threads
  runState,    indicating whether running, shutting down etc

In order to pack them into one int, we limit workerCount to
(2^29)-1 (about 500 million) threads rather than (2^31)-1 (2
billion) otherwise representable. If this is ever an issue in
the future, the variable can be changed to be an AtomicLong,
and the shift/mask constants below adjusted. But until the need
arises, this code is a bit faster and simpler using an int.

The workerCount is the number of workers that have been
permitted to start and not permitted to stop.  The value may be
transiently different from the actual number of live threads,
for example when a ThreadFactory fails to create a thread when
asked, and when exiting threads are still performing
bookkeeping before terminating. The user-visible pool size is
reported as the current size of the workers set.

The runState provides the main lifecyle control, taking on values:

  RUNNING:  Accept new tasks and process queued tasks
  SHUTDOWN: Don't accept new tasks, but process queued tasks
  STOP:     Don't accept new tasks, don't process queued tasks,
            and interrupt in-progress tasks
  TIDYING:  All tasks have terminated, workerCount is zero,
            the thread transitioning to state TIDYING
            will run the terminated() hook method
  TERMINATED: terminated() has completed

The numerical order among these values matters, to allow
ordered comparisons. The runState monotonically increases over
time, but need not hit each state. The transitions are:

RUNNING -> SHUTDOWN
   On invocation of shutdown(), perhaps implicitly in finalize()
(RUNNING or SHUTDOWN) -> STOP
   On invocation of shutdownNow()
SHUTDOWN -> TIDYING
   When both queue and pool are empty
STOP -> TIDYING
   When pool is empty
TIDYING -> TERMINATED
   When the terminated() hook method has completed

Threads waiting in awaitTermination() will return when the
state reaches TERMINATED.

Detecting the transition from SHUTDOWN to TIDYING is less
straightforward than you'd like because the queue may become
empty after non-empty and vice versa during SHUTDOWN state, but
we can only terminate if, after seeing that it is empty, we see
that workerCount is 0 (which sometimes entails a recheck -- see
below).

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 455195 // ctl (<unidirectional association>)
	  b parent class_ref 154779 // AtomicInteger
      end

      attribute 389659 "COUNT_BITS"
	class_attribute const_attribute private explicit_type "int"
	init_value " Integer.SIZE - 3"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 389787 "CAPACITY"
	class_attribute const_attribute private explicit_type "int"
	init_value " (1 << COUNT_BITS) - 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 389915 "RUNNING"
	class_attribute const_attribute private explicit_type "int"
	init_value " -1 << COUNT_BITS"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " runState is stored in the high-order bits"
      end

      attribute 390043 "SHUTDOWN"
	class_attribute const_attribute private explicit_type "int"
	init_value "  0 << COUNT_BITS"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 390171 "STOP"
	class_attribute const_attribute private explicit_type "int"
	init_value "  1 << COUNT_BITS"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 390299 "TIDYING"
	class_attribute const_attribute private explicit_type "int"
	init_value "  2 << COUNT_BITS"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 390427 "TERMINATED"
	class_attribute const_attribute private explicit_type "int"
	init_value "  3 << COUNT_BITS"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1594523 "runStateOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Packing and unpacking ctl"
      end

      operation 1594651 "workerCountOf"
	class_operation private explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1594779 "ctlOf"
	class_operation private explicit_return_type "int"
	nparams 2
	  param in name "rs" explicit_type "int"
	  param in name "wc" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1594907 "runStateLessThan"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "c" explicit_type "int"
	  param in name "s" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Bit field accessors that don't require unpacking ctl.
These depend on the bit layout and on workerCount being never negative."
      end

      operation 1595035 "runStateAtLeast"
	class_operation private explicit_return_type "boolean"
	nparams 2
	  param in name "c" explicit_type "int"
	  param in name "s" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1595163 "isRunning"
	class_operation private explicit_return_type "boolean"
	nparams 1
	  param in name "c" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1595291 "compareAndIncrementWorkerCount"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "expect" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempt to CAS-increment the workerCount field of ctl."
      end

      operation 1595419 "compareAndDecrementWorkerCount"
	private explicit_return_type "boolean"
	nparams 1
	  param in name "expect" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempt to CAS-decrement the workerCount field of ctl."
      end

      operation 1595547 "decrementWorkerCount"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Decrements the workerCount field of ctl. This is called only on
abrupt termination of a thread (see processWorkerExit). Other
decrements are performed within getTask."
      end

      classrelation 455323 // workQueue (<unidirectional association>)
	relation 455323 --->
	  a role_name "workQueue" const_relation private
	    comment "
The queue used for holding tasks and handing off to worker
threads.  We do not require that workQueue.poll() returning
null necessarily means that workQueue.isEmpty(), so rely
solely on isEmpty to see if the queue is empty (which we must
do for example when deciding whether to transition from
SHUTDOWN to TIDYING).  This accommodates special-purpose
queues such as DelayQueues for which poll() is allowed to
return null even if it may later return non-null when delays
expire.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Runnable> ${name}${value};
"
	    classrelation_ref 455323 // workQueue (<unidirectional association>)
	  b parent class_ref 254107 // BlockingQueue
      end

      classrelation 455451 // mainLock (<unidirectional association>)
	relation 455451 --->
	  a role_name "mainLock" init_value " new ReentrantLock()" const_relation private
	    comment "
Lock held on access to workers set and related bookkeeping.
While we could use a concurrent set of some sort, it turns out
to be generally preferable to use a lock. Among the reasons is
that this serializes interruptIdleWorkers, which avoids
unnecessary interrupt storms, especially during shutdown.
Otherwise exiting threads would concurrently interrupt those
that have not yet interrupted. It also simplifies some of the
associated statistics bookkeeping of largestPoolSize etc. We
also hold mainLock on shutdown and shutdownNow, for the sake of
ensuring workers set is stable while separately checking
permission to interrupt and actually interrupting.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 455451 // mainLock (<unidirectional association>)
	  b parent class_ref 254235 // ReentrantLock
      end

      class 269851 "Worker"
	visibility private 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 456347 // <generalisation>
	  relation 456347 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 456347 // <generalisation>
	    b parent class_ref 256283 // AbstractQueuedSynchronizer
	end

	classrelation 456475 // <realization>
	  relation 456475 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 456475 // <realization>
	    b parent class_ref 151963 // Runnable
	end

	attribute 391323 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 6138294804551838833L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "This class will never be serialized, but we provide a
serialVersionUID to suppress a javac warning.
"
	end

	classrelation 456603 // thread (<unidirectional association>)
	  relation 456603 --->
	    a role_name "thread" const_relation package
	      comment " Thread this worker is running in.  Null if factory fails. 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 456603 // thread (<unidirectional association>)
	    b parent class_ref 1201420 // Thread
	end

	classrelation 456731 // firstTask (<unidirectional association>)
	  relation 456731 --->
	    a role_name "firstTask" package
	      comment " Initial task to run.  Possibly null. 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 456731 // firstTask (<unidirectional association>)
	    b parent class_ref 151963 // Runnable
	end

	attribute 391451 "completedTasks"
	  volatile package explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Per-thread task counter "
	end

	operation 1595675 "Worker"
	  package explicit_return_type ""
	  nparams 1
	    param inout name "firstTask" type class_ref 151963 // Runnable
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates with given first task and thread from ThreadFactory.
@param firstTask the first task (null if none)"
	end

	operation 1595803 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Delegates main run loop to outer runWorker  "
	end

	operation 1595931 "isHeldExclusively"
	  protected explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Lock methods

 The value 0 represents the unlocked state.
 The value 1 represents the locked state."
	end

	operation 1596059 "tryAcquire"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "unused" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1596187 "tryRelease"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "unused" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1596315 "lock"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1596443 "tryLock"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1596571 "unlock"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1596699 "isLocked"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 455579 // workers (<unidirectional association>)
	relation 455579 --->
	  a role_name "workers" init_value " new HashSet<Worker>()" const_relation private
	    comment "
Set containing all worker threads in pool. Accessed only when
holding mainLock.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Worker> ${name}${value};
"
	    classrelation_ref 455579 // workers (<unidirectional association>)
	  b parent class_ref 192411 // HashSet
      end

      classrelation 455707 // termination (<unidirectional association>)
	relation 455707 --->
	  a role_name "termination" init_value " mainLock.newCondition()" const_relation private
	    comment "
Wait condition to support awaitTermination

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 455707 // termination (<unidirectional association>)
	  b parent class_ref 254363 // Condition
      end

      attribute 390555 "largestPoolSize"
	private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Tracks largest attained pool size. Accessed only under
mainLock.
"
      end

      attribute 390683 "completedTaskCount"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Counter for completed tasks. Updated only on termination of
worker threads. Accessed only under mainLock.
"
      end

      classrelation 455835 // threadFactory (<unidirectional association>)
	relation 455835 --->
	  a role_name "threadFactory" volatile private
	    comment "
All user control parameters are declared as volatiles so that
ongoing actions are based on freshest values, but without need
for locking, since no internal invariants depend on them
changing synchronously with respect to other actions.


Factory for new threads. All threads are created using this
factory (via method addWorker).  All callers must be prepared
for addWorker to fail, which may reflect a system or user's
policy limiting the number of threads.  Even though it is not
treated as an error, failure to create threads may result in
new tasks being rejected or existing ones remaining stuck in
the queue. On the other hand, no special precautions exist to
handle OutOfMemoryErrors that might be thrown while trying to
create threads, since there is generally no recourse from
within this class.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 455835 // threadFactory (<unidirectional association>)
	  b parent class_ref 264219 // ThreadFactory
      end

      classrelation 455963 // handler (<unidirectional association>)
	relation 455963 --->
	  a role_name "handler" volatile private
	    comment "
Handler called when saturated or shutdown in execute.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 455963 // handler (<unidirectional association>)
	  b parent class_ref 269339 // RejectedExecutionHandler
      end

      attribute 390811 "keepAliveTime"
	volatile private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Timeout in nanoseconds for idle threads waiting for work.
Threads use this timeout when there are more than corePoolSize
present or if allowCoreThreadTimeOut. Otherwise they wait
forever for new work.
"
      end

      attribute 390939 "allowCoreThreadTimeOut"
	volatile private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "If false (default), core threads stay alive even when idle.
If true, core threads use keepAliveTime to time out waiting
for work.
"
      end

      attribute 391067 "corePoolSize"
	volatile private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Core pool size is the minimum number of workers to keep alive
(and not allow to time out etc) unless allowCoreThreadTimeOut
is set, in which case the minimum is zero.
"
      end

      attribute 391195 "maximumPoolSize"
	volatile private explicit_type "int"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Maximum pool size. Note that the actual maximum is internally
bounded by CAPACITY.
"
      end

      classrelation 456091 // defaultHandler (<unidirectional association>)
	relation 456091 --->
	  a role_name "defaultHandler" init_value "
        new AbortPolicy()" class_relation const_relation private
	    comment "
The default rejected execution handler

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 456091 // defaultHandler (<unidirectional association>)
	  b parent class_ref 269339 // RejectedExecutionHandler
      end

      classrelation 456219 // shutdownPerm (<unidirectional association>)
	relation 456219 --->
	  a role_name "shutdownPerm" init_value "
        new RuntimePermission(\"modifyThread\")" class_relation const_relation private
	    comment "
Permission required for callers of shutdown and shutdownNow.
We additionally require (see checkShutdownAccess) that callers
have permission to actually interrupt threads in the worker set
(as governed by Thread.interrupt, which relies on
ThreadGroup.checkAccess, which in turn relies on
SecurityManager.checkAccess). Shutdowns are attempted only if
these checks pass.

All actual invocations of Thread.interrupt (see
interruptIdleWorkers and interruptWorkers) ignore
SecurityExceptions, meaning that the attempted interrupts
silently fail. In the case of shutdown, they should not fail
unless the SecurityManager has inconsistent policies, sometimes
allowing access to a thread and sometimes not. In such cases,
failure to actually interrupt threads may disable or delay full
termination. Other uses of interruptIdleWorkers are advisory,
and failure to actually interrupt will merely delay response to
configuration changes so is not handled exceptionally.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 456219 // shutdownPerm (<unidirectional association>)
	  b parent class_ref 158491 // RuntimePermission
      end

      operation 1596827 "advanceRunState"
	private explicit_return_type "void"
	nparams 1
	  param in name "targetState" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Methods for setting control state


Transitions runState to given target, or leaves it alone if
already at least the given target.

@param targetState the desired state, either SHUTDOWN or STOP
       (but not TIDYING or TERMINATED -- use tryTerminate for that)"
      end

      operation 1596955 "tryTerminate"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Transitions to TERMINATED state if either (SHUTDOWN and pool
and queue empty) or (STOP and pool empty).  If otherwise
eligible to terminate but workerCount is nonzero, interrupts an
idle worker to ensure that shutdown signals propagate. This
method must be called following any action that might make
termination possible -- reducing worker count or removing tasks
from the queue during shutdown. The method is non-private to
allow access from ScheduledThreadPoolExecutor."
      end

      operation 1597083 "checkShutdownAccess"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Methods for controlling interrupts to worker threads.


If there is a security manager, makes sure caller has
permission to shut down threads in general (see shutdownPerm).
If this passes, additionally makes sure the caller is allowed
to interrupt each worker thread. This might not be true even if
first check passed, if the SecurityManager treats some threads
specially."
      end

      operation 1597211 "interruptWorkers"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Interrupts all threads, even if active. Ignores SecurityExceptions
(in which case some threads may remain uninterrupted)."
      end

      operation 1597339 "interruptIdleWorkers"
	private explicit_return_type "void"
	nparams 1
	  param inout name "onlyOne" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Interrupts threads that might be waiting for tasks (as
indicated by not being locked) so they can check for
termination or configuration changes. Ignores
SecurityExceptions (in which case some threads may remain
uninterrupted).

@param onlyOne If true, interrupt at most one worker. This is
called only from tryTerminate when termination is otherwise
enabled but there are still other workers.  In this case, at
most one waiting worker is interrupted to propagate shutdown
signals in case all threads are currently waiting.
Interrupting any arbitrary thread ensures that newly arriving
workers since shutdown began will also eventually exit.
To guarantee eventual termination, it suffices to always
interrupt only one idle worker, but shutdown() interrupts all
idle workers so that redundant workers exit promptly, not
waiting for a straggler task to finish."
      end

      operation 1597467 "interruptIdleWorkers"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Common form of interruptIdleWorkers, to avoid having to
remember what the boolean argument means."
      end

      attribute 391579 "ONLY_ONE"
	class_attribute const_attribute private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      operation 1597595 "clearInterruptsForTaskRun"
	private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Ensures that unless the pool is stopping, the current thread
does not have its interrupt set. This requires a double-check
of state in case the interrupt was cleared concurrently with a
shutdownNow -- if so, the interrupt is re-enabled."
      end

      operation 1597723 "reject"
	package explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Misc utilities, most of which are also exported to
ScheduledThreadPoolExecutor


Invokes the rejected execution handler for the given command.
Package-protected for use by ScheduledThreadPoolExecutor."
      end

      operation 1597851 "onShutdown"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs any further cleanup following run state transition on
invocation of shutdown.  A no-op here, but used by
ScheduledThreadPoolExecutor to cancel delayed tasks."
      end

      operation 1597979 "isRunningOrShutdown"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "shutdownOK" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "State check needed by ScheduledThreadPoolExecutor to
enable running tasks during shutdown.

@param shutdownOK true if should return true if SHUTDOWN"
      end

      operation 1598107 "drainQueue"
	private return_type class_ref 131483 // List
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Drains the task queue into a new list, normally using
drainTo. But if the queue is a DelayQueue or any other kind of
queue for which poll or drainTo may fail to remove some
elements, it deletes them one by one."
      end

      operation 1598235 "addWorker"
	private explicit_return_type "boolean"
	nparams 2
	  param inout name "firstTask" type class_ref 151963 // Runnable
	  param inout name "core" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Methods for creating, running and cleaning up after workers


Checks if a new worker can be added with respect to current
pool state and the given bound (either core or maximum). If so,
the worker count is adjusted accordingly, and, if possible, a
new worker is created and started running firstTask as its
first task. This method returns false if the pool is stopped or
eligible to shut down. It also returns false if the thread
factory fails to create a thread when asked, which requires a
backout of workerCount, and a recheck for termination, in case
the existence of this worker was holding up termination.

@param firstTask the task the new thread should run first (or
null if none). Workers are created with an initial first task
(in method execute()) to bypass queuing when there are fewer
than corePoolSize threads (in which case we always start one),
or when the queue is full (in which case we must bypass queue).
Initially idle threads are usually created via
prestartCoreThread or to replace other dying workers.

@param core if true use corePoolSize as bound, else
maximumPoolSize. (A boolean indicator is used here rather than a
value to ensure reads of fresh values after checking other pool
state).
@return true if successful"
      end

      operation 1598363 "processWorkerExit"
	private explicit_return_type "void"
	nparams 2
	  param inout name "w" type class_ref 269851 // Worker
	  param inout name "completedAbruptly" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs cleanup and bookkeeping for a dying worker. Called
only from worker threads. Unless completedAbruptly is set,
assumes that workerCount has already been adjusted to account
for exit.  This method removes thread from worker set, and
possibly terminates the pool or replaces the worker if either
it exited due to user task exception or if fewer than
corePoolSize workers are running or queue is non-empty but
there are no workers.

@param w the worker
@param completedAbruptly if the worker died due to user exception"
      end

      operation 1598491 "getTask"
	private return_type class_ref 151963 // Runnable
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Performs blocking or timed wait for a task, depending on
current configuration settings, or returns null if this worker
must exit because of any of:
1. There are more than maximumPoolSize workers (due to
   a call to setMaximumPoolSize).
2. The pool is stopped.
3. The pool is shutdown and the queue is empty.
4. This worker timed out waiting for a task, and timed-out
   workers are subject to termination (that is,
   {@code allowCoreThreadTimeOut || workerCount > corePoolSize})
   both before and after the timed wait.

@return task, or null if the worker must exit, in which case
        workerCount is decremented"
      end

      operation 1598619 "runWorker"
	package explicit_return_type "void"
	nparams 1
	  param inout name "w" type class_ref 269851 // Worker
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main worker run loop.  Repeatedly gets tasks from queue and
executes them, while coping with a number of issues:

1. We may start out with an initial task, in which case we
don't need to get the first one. Otherwise, as long as pool is
running, we get tasks from getTask. If it returns null then the
worker exits due to changed pool state or configuration
parameters.  Other exits result from exception throws in
external code, in which case completedAbruptly holds, which
usually leads processWorkerExit to replace this thread.

2. Before running any task, the lock is acquired to prevent
other pool interrupts while the task is executing, and
clearInterruptsForTaskRun called to ensure that unless pool is
stopping, this thread does not have its interrupt set.

3. Each task run is preceded by a call to beforeExecute, which
might throw an exception, in which case we cause thread to die
(breaking loop with completedAbruptly true) without processing
the task.

4. Assuming beforeExecute completes normally, we run the task,
gathering any of its thrown exceptions to send to
afterExecute. We separately handle RuntimeException, Error
(both of which the specs guarantee that we trap) and arbitrary
Throwables.  Because we cannot rethrow Throwables within
Runnable.run, we wrap them within Errors on the way out (to the
thread's UncaughtExceptionHandler).  Any thrown exception also
conservatively causes thread to die.

5. After task.run completes, we call afterExecute, which may
also throw an exception, which will also cause thread to
die. According to JLS Sec 14.20, this exception is the one that
will be in effect even if task.run throws.

The net effect of the exception mechanics is that afterExecute
and the thread's UncaughtExceptionHandler have as accurate
information as we can provide about any problems encountered by
user code.

@param w the worker"
      end

      operation 1598747 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 5
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	  param inout name "workQueue" type class_ref 254107 // BlockingQueue
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Public constructors and methods

Creates a new {@code ThreadPoolExecutor} with the given initial
parameters and default thread factory and rejected execution handler.
It may be more convenient to use one of the {@link Executors} factory
methods instead of this general purpose constructor.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param maximumPoolSize the maximum number of threads to allow in the
       pool
@param keepAliveTime when the number of threads is greater than
       the core, this is the maximum time that excess idle threads
       will wait for new tasks before terminating.
@param unit the time unit for the {@code keepAliveTime} argument
@param workQueue the queue to use for holding tasks before they are
       executed.  This queue will hold only the {@code Runnable}
       tasks submitted by the {@code execute} method.
@throws IllegalArgumentException if one of the following holds:<br>
        {@code corePoolSize < 0}<br>
        {@code keepAliveTime < 0}<br>
        {@code maximumPoolSize <= 0}<br>
        {@code maximumPoolSize < corePoolSize}
@throws NullPointerException if {@code workQueue} is null"
      end

      operation 1598875 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 6
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	  param inout name "workQueue" type class_ref 254107 // BlockingQueue
	  param inout name "threadFactory" type class_ref 264219 // ThreadFactory
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ThreadPoolExecutor} with the given initial
parameters and default rejected execution handler.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param maximumPoolSize the maximum number of threads to allow in the
       pool
@param keepAliveTime when the number of threads is greater than
       the core, this is the maximum time that excess idle threads
       will wait for new tasks before terminating.
@param unit the time unit for the {@code keepAliveTime} argument
@param workQueue the queue to use for holding tasks before they are
       executed.  This queue will hold only the {@code Runnable}
       tasks submitted by the {@code execute} method.
@param threadFactory the factory to use when the executor
       creates a new thread
@throws IllegalArgumentException if one of the following holds:<br>
        {@code corePoolSize < 0}<br>
        {@code keepAliveTime < 0}<br>
        {@code maximumPoolSize <= 0}<br>
        {@code maximumPoolSize < corePoolSize}
@throws NullPointerException if {@code workQueue}
        or {@code threadFactory} is null"
      end

      operation 1599003 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 6
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	  param inout name "workQueue" type class_ref 254107 // BlockingQueue
	  param inout name "handler" type class_ref 269339 // RejectedExecutionHandler
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}, ${t5} ${p5}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ThreadPoolExecutor} with the given initial
parameters and default thread factory.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param maximumPoolSize the maximum number of threads to allow in the
       pool
@param keepAliveTime when the number of threads is greater than
       the core, this is the maximum time that excess idle threads
       will wait for new tasks before terminating.
@param unit the time unit for the {@code keepAliveTime} argument
@param workQueue the queue to use for holding tasks before they are
       executed.  This queue will hold only the {@code Runnable}
       tasks submitted by the {@code execute} method.
@param handler the handler to use when execution is blocked
       because the thread bounds and queue capacities are reached
@throws IllegalArgumentException if one of the following holds:<br>
        {@code corePoolSize < 0}<br>
        {@code keepAliveTime < 0}<br>
        {@code maximumPoolSize <= 0}<br>
        {@code maximumPoolSize < corePoolSize}
@throws NullPointerException if {@code workQueue}
        or {@code handler} is null"
      end

      operation 1599131 "ThreadPoolExecutor"
	public explicit_return_type ""
	nparams 7
	  param in name "corePoolSize" explicit_type "int"
	  param in name "maximumPoolSize" explicit_type "int"
	  param in name "keepAliveTime" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	  param inout name "workQueue" type class_ref 254107 // BlockingQueue
	  param inout name "threadFactory" type class_ref 264219 // ThreadFactory
	  param inout name "handler" type class_ref 269339 // RejectedExecutionHandler
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}, ${t4}<Runnable> ${p4}, ${t5} ${p5}, ${t6} ${p6}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ThreadPoolExecutor} with the given initial
parameters.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param maximumPoolSize the maximum number of threads to allow in the
       pool
@param keepAliveTime when the number of threads is greater than
       the core, this is the maximum time that excess idle threads
       will wait for new tasks before terminating.
@param unit the time unit for the {@code keepAliveTime} argument
@param workQueue the queue to use for holding tasks before they are
       executed.  This queue will hold only the {@code Runnable}
       tasks submitted by the {@code execute} method.
@param threadFactory the factory to use when the executor
       creates a new thread
@param handler the handler to use when execution is blocked
       because the thread bounds and queue capacities are reached
@throws IllegalArgumentException if one of the following holds:<br>
        {@code corePoolSize < 0}<br>
        {@code keepAliveTime < 0}<br>
        {@code maximumPoolSize <= 0}<br>
        {@code maximumPoolSize < corePoolSize}
@throws NullPointerException if {@code workQueue}
        or {@code threadFactory} or {@code handler} is null"
      end

      operation 1599259 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes the given task sometime in the future.  The task
may execute in a new thread or in an existing pooled thread.

If the task cannot be submitted for execution, either because this
executor has been shutdown or because its capacity has been reached,
the task is handled by the current {@code RejectedExecutionHandler}.

@param command the task to execute
@throws RejectedExecutionException at discretion of
        {@code RejectedExecutionHandler}, if the task
        cannot be accepted for execution
@throws NullPointerException if {@code command} is null"
      end

      operation 1599387 "shutdown"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initiates an orderly shutdown in which previously submitted
tasks are executed, but no new tasks will be accepted.
Invocation has no additional effect if already shut down.

<p>This method does not wait for previously submitted tasks to
complete execution.  Use {@link #awaitTermination awaitTermination}
to do that."
      end

      operation 1599515 "shutdownNow"
	public return_type class_ref 131483 // List
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to stop all actively executing tasks, halts the
processing of waiting tasks, and returns a list of the tasks
that were awaiting execution. These tasks are drained (removed)
from the task queue upon return from this method.

<p>This method does not wait for actively executing tasks to
terminate.  Use {@link #awaitTermination awaitTermination} to
do that.

<p>There are no guarantees beyond best-effort attempts to stop
processing actively executing tasks.  This implementation
cancels tasks via {@link Thread#interrupt}, so any task that
fails to respond to interrupts may never terminate."
      end

      operation 1599643 "isShutdown"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1599771 "isTerminating"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this executor is in the process of terminating
after {@link #shutdown} or {@link #shutdownNow} but has not
completely terminated.  This method may be useful for
debugging. A return of {@code true} reported a sufficient
period after shutdown may indicate that submitted tasks have
ignored or suppressed interruption, causing this executor not
to properly terminate.

@return true if terminating but not yet terminated"
      end

      operation 1599899 "isTerminated"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1600027 "awaitTermination"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1600155 "finalize"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Invokes {@code shutdown} when this executor is no longer
referenced and it has no threads."
      end

      operation 1600283 "setThreadFactory"
	public explicit_return_type "void"
	nparams 1
	  param inout name "threadFactory" type class_ref 264219 // ThreadFactory
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the thread factory used to create new threads.

@param threadFactory the new thread factory
@throws NullPointerException if threadFactory is null
@see #getThreadFactory"
      end

      operation 1600411 "getThreadFactory"
	public return_type class_ref 264219 // ThreadFactory
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thread factory used to create new threads.

@return the current thread factory
@see #setThreadFactory"
      end

      operation 1600539 "setRejectedExecutionHandler"
	public explicit_return_type "void"
	nparams 1
	  param inout name "handler" type class_ref 269339 // RejectedExecutionHandler
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets a new handler for unexecutable tasks.

@param handler the new handler
@throws NullPointerException if handler is null
@see #getRejectedExecutionHandler"
      end

      operation 1600667 "getRejectedExecutionHandler"
	public return_type class_ref 269339 // RejectedExecutionHandler
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current handler for unexecutable tasks.

@return the current handler
@see #setRejectedExecutionHandler"
      end

      operation 1600795 "setCorePoolSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "corePoolSize" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the core number of threads.  This overrides any value set
in the constructor.  If the new value is smaller than the
current value, excess existing threads will be terminated when
they next become idle.  If larger, new threads will, if needed,
be started to execute any queued tasks.

@param corePoolSize the new core size
@throws IllegalArgumentException if {@code corePoolSize < 0}
@see #getCorePoolSize"
      end

      operation 1600923 "getCorePoolSize"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the core number of threads.

@return the core number of threads
@see #setCorePoolSize"
      end

      operation 1601051 "prestartCoreThread"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts a core thread, causing it to idly wait for work. This
overrides the default policy of starting core threads only when
new tasks are executed. This method will return {@code false}
if all core threads have already been started.

@return {@code true} if a thread was started"
      end

      operation 1601179 "ensurePrestart"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Same as prestartCoreThread except arranges that at least one
thread is started even if corePoolSize is 0."
      end

      operation 1601307 "prestartAllCoreThreads"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Starts all core threads, causing them to idly wait for work. This
overrides the default policy of starting core threads only when
new tasks are executed.

@return the number of threads started"
      end

      operation 1601435 "allowsCoreThreadTimeOut"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this pool allows core threads to time out and
terminate if no tasks arrive within the keepAlive time, being
replaced if needed when new tasks arrive. When true, the same
keep-alive policy applying to non-core threads applies also to
core threads. When false (the default), core threads are never
terminated due to lack of incoming tasks.

@return {@code true} if core threads are allowed to time out,
        else {@code false}

@since 1.6"
      end

      operation 1601563 "allowCoreThreadTimeOut"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the policy governing whether core threads may time out and
terminate if no tasks arrive within the keep-alive time, being
replaced if needed when new tasks arrive. When false, core
threads are never terminated due to lack of incoming
tasks. When true, the same keep-alive policy applying to
non-core threads applies also to core threads. To avoid
continual thread replacement, the keep-alive time must be
greater than zero when setting {@code true}. This method
should in general be called before the pool is actively used.

@param value {@code true} if should time out, else {@code false}
@throws IllegalArgumentException if value is {@code true}
        and the current keep-alive time is not greater than zero

@since 1.6"
      end

      operation 1601691 "setMaximumPoolSize"
	public explicit_return_type "void"
	nparams 1
	  param in name "maximumPoolSize" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the maximum allowed number of threads. This overrides any
value set in the constructor. If the new value is smaller than
the current value, excess existing threads will be
terminated when they next become idle.

@param maximumPoolSize the new maximum
@throws IllegalArgumentException if the new maximum is
        less than or equal to zero, or
        less than the {@linkplain #getCorePoolSize core pool size}
@see #getMaximumPoolSize"
      end

      operation 1601819 "getMaximumPoolSize"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the maximum allowed number of threads.

@return the maximum allowed number of threads
@see #setMaximumPoolSize"
      end

      operation 1601947 "setKeepAliveTime"
	public explicit_return_type "void"
	nparams 2
	  param in name "time" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the time limit for which threads may remain idle before
being terminated.  If there are more than the core number of
threads currently in the pool, after waiting this amount of
time without processing a task, excess threads will be
terminated.  This overrides any value set in the constructor.

@param time the time to wait.  A time value of zero will cause
       excess threads to terminate immediately after executing tasks.
@param unit the time unit of the {@code time} argument
@throws IllegalArgumentException if {@code time} less than zero or
        if {@code time} is zero and {@code allowsCoreThreadTimeOut}
@see #getKeepAliveTime"
      end

      operation 1602075 "getKeepAliveTime"
	public explicit_return_type "long"
	nparams 1
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the thread keep-alive time, which is the amount of time
that threads in excess of the core pool size may remain
idle before being terminated.

@param unit the desired time unit of the result
@return the time limit
@see #setKeepAliveTime"
      end

      operation 1602203 "getQueue"
	public return_type class_ref 254107 // BlockingQueue
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " User-level queue utilities 

Returns the task queue used by this executor. Access to the
task queue is intended primarily for debugging and monitoring.
This queue may be in active use.  Retrieving the task queue
does not prevent queued tasks from executing.

@return the task queue"
      end

      operation 1602331 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "task" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Removes this task from the executor's internal queue if it is
present, thus causing it not to be run if it has not already
started.

<p> This method may be useful as one part of a cancellation
scheme.  It may fail to remove tasks that have been converted
into other forms before being placed on the internal queue. For
example, a task entered using {@code submit} might be
converted into a form that maintains {@code Future} status.
However, in such cases, method {@link #purge} may be used to
remove those Futures that have been cancelled.

@param task the task to remove
@return true if the task was removed"
      end

      operation 1602459 "purge"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Tries to remove from the work queue all {@link Future}
tasks that have been cancelled. This method can be useful as a
storage reclamation operation, that has no other impact on
functionality. Cancelled tasks are never executed, but may
accumulate in work queues until worker threads can actively
remove them. Invoking this method instead tries to remove them now.
However, this method may fail to remove tasks in
the presence of interference by other threads."
      end

      operation 1602587 "getPoolSize"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Statistics 

Returns the current number of threads in the pool.

@return the number of threads"
      end

      operation 1602715 "getActiveCount"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate number of threads that are actively
executing tasks.

@return the number of threads"
      end

      operation 1602843 "getLargestPoolSize"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the largest number of threads that have ever
simultaneously been in the pool.

@return the number of threads"
      end

      operation 1602971 "getTaskCount"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate total number of tasks that have ever been
scheduled for execution. Because the states of tasks and
threads may change dynamically during computation, the returned
value is only an approximation.

@return the number of tasks"
      end

      operation 1603099 "getCompletedTaskCount"
	public explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the approximate total number of tasks that have
completed execution. Because the states of tasks and threads
may change dynamically during computation, the returned value
is only an approximation, but one that does not ever decrease
across successive calls.

@return the number of tasks"
      end

      operation 1603227 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this pool, as well as its state,
including indications of run state and estimated worker and
task counts.

@return a string identifying this pool, as well as its state"
      end

      operation 1603355 "beforeExecute"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "t" type class_ref 1201420 // Thread
	  param inout name "r" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Extension hooks 

Method invoked prior to executing the given Runnable in the
given thread.  This method is invoked by thread {@code t} that
will execute task {@code r}, and may be used to re-initialize
ThreadLocals, or to perform logging.

<p>This implementation does nothing, but may be customized in
subclasses. Note: To properly nest multiple overridings, subclasses
should generally invoke {@code super.beforeExecute} at the end of
this method.

@param t the thread that will run task {@code r}
@param r the task that will be executed"
      end

      operation 1603483 "afterExecute"
	protected explicit_return_type "void"
	nparams 2
	  param inout name "r" type class_ref 151963 // Runnable
	  param inout name "t" type class_ref 134683 // Throwable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method invoked upon completion of execution of the given Runnable.
This method is invoked by the thread that executed the task. If
non-null, the Throwable is the uncaught {@code RuntimeException}
or {@code Error} that caused execution to terminate abruptly.

<p>This implementation does nothing, but may be customized in
subclasses. Note: To properly nest multiple overridings, subclasses
should generally invoke {@code super.afterExecute} at the
beginning of this method.

<p><b>Note:</b> When actions are enclosed in tasks (such as
{@link FutureTask}) either explicitly or via methods such as
{@code submit}, these task objects catch and maintain
computational exceptions, and so they do not cause abrupt
termination, and the internal exceptions are <em>not</em>
passed to this method. If you would like to trap both kinds of
failures in this method, you can further probe for such cases,
as in this sample subclass that prints either the direct cause
or the underlying exception if a task has been aborted:

 <pre> {@code
class ExtendedExecutor extends ThreadPoolExecutor {
  // ...
  protected void afterExecute(Runnable r, Throwable t) {
    super.afterExecute(r, t);
    if (t == null && r instanceof Future<?>) {
      try {
        Object result = ((Future<?>) r).get();
      } catch (CancellationException ce) {
          t = ce;
      } catch (ExecutionException ee) {
          t = ee.getCause();
      } catch (InterruptedException ie) {
          Thread.currentThread().interrupt(); // ignore/reset
      }
    }
    if (t != null)
      System.out.println(t);
  }
}}</pre>

@param r the runnable that has completed
@param t the exception that caused termination, or null if
execution completed normally"
      end

      operation 1603611 "terminated"
	protected explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Method invoked when the Executor has terminated.  Default
implementation does nothing. Note: To properly nest multiple
overridings, subclasses should generally invoke
{@code super.terminated} within this method."
      end

      class 269979 "CallerRunsPolicy"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 456859 // <realization>
	  relation 456859 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 456859 // <realization>
	    b parent class_ref 269339 // RejectedExecutionHandler
	end

	operation 1603739 "CallerRunsPolicy"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a {@code CallerRunsPolicy}."
	end

	operation 1603867 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 151963 // Runnable
	    param inout name "e" type class_ref 269467 // ThreadPoolExecutor
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Executes task r in the caller's thread, unless the executor
has been shut down, in which case the task is discarded.

@param r the runnable task requested to be executed
@param e the executor attempting to execute this task"
	end
      end

      class 270107 "AbortPolicy"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 456987 // <realization>
	  relation 456987 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 456987 // <realization>
	    b parent class_ref 269339 // RejectedExecutionHandler
	end

	operation 1603995 "AbortPolicy"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates an {@code AbortPolicy}."
	end

	operation 1604123 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 151963 // Runnable
	    param inout name "e" type class_ref 269467 // ThreadPoolExecutor
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Always throws RejectedExecutionException.

@param r the runnable task requested to be executed
@param e the executor attempting to execute this task
@throws RejectedExecutionException always."
	end
      end

      class 270235 "DiscardPolicy"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 457115 // <realization>
	  relation 457115 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 457115 // <realization>
	    b parent class_ref 269339 // RejectedExecutionHandler
	end

	operation 1604251 "DiscardPolicy"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a {@code DiscardPolicy}."
	end

	operation 1604379 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 151963 // Runnable
	    param inout name "e" type class_ref 269467 // ThreadPoolExecutor
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Does nothing, which has the effect of discarding task r.

@param r the runnable task requested to be executed
@param e the executor attempting to execute this task"
	end
      end

      class 270363 "DiscardOldestPolicy"
	visibility public 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 457243 // <realization>
	  relation 457243 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 457243 // <realization>
	    b parent class_ref 269339 // RejectedExecutionHandler
	end

	operation 1604507 "DiscardOldestPolicy"
	  public explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a {@code DiscardOldestPolicy} for the given executor."
	end

	operation 1604635 "rejectedExecution"
	  public explicit_return_type "void"
	  nparams 2
	    param inout name "r" type class_ref 151963 // Runnable
	    param inout name "e" type class_ref 269467 // ThreadPoolExecutor
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Obtains and ignores the next task that the executor
would otherwise execute, if one is immediately available,
and then retries execution of task r, unless the executor
is shut down, in which case task r is instead discarded.

@param r the runnable task requested to be executed
@param e the executor attempting to execute this task"
	end
      end
    end

    class 269595 "RunnableScheduledFuture"
      visibility public stereotype "interface"
      nformals 1
      formal name "V" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 253851 // RunnableFuture
        rank 0 explicit_value ""
      actual class class_ref 265499 // ScheduledFuture
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A {@link ScheduledFuture} that is {@link Runnable}. Successful
execution of the <tt>run</tt> method causes completion of the
<tt>Future</tt> and allows access to its results.
@see FutureTask
@see Executor
@since 1.6
@author Doug Lea
@param <V> The result type returned by this Future's <tt>get</tt> method"
      classrelation 454555 // <realization>
	relation 454555 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 454555 // <realization>
	  b parent class_ref 253851 // RunnableFuture
      end

      classrelation 454939 // <realization>
	relation 454939 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 454939 // <realization>
	  b parent class_ref 265499 // ScheduledFuture
      end

      operation 1594395 "isPeriodic"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if this is a periodic task. A periodic task may
re-run according to some schedule. A non-periodic task can be
run only once.

@return true if this task is periodic"
      end
    end

    class 269723 "ScheduledThreadPoolExecutor"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 omit class-level docs on setRemoveOnCancelPolicy()
 removed security manager docs
 END android-note

A {@link ThreadPoolExecutor} that can additionally schedule
commands to run after a given delay, or to execute
periodically. This class is preferable to {@link java.util.Timer}
when multiple worker threads are needed, or when the additional
flexibility or capabilities of {@link ThreadPoolExecutor} (which
this class extends) are required.

<p>Delayed tasks execute no sooner than they are enabled, but
without any real-time guarantees about when, after they are
enabled, they will commence. Tasks scheduled for exactly the same
execution time are enabled in first-in-first-out (FIFO) order of
submission.

<p>When a submitted task is cancelled before it is run, execution
is suppressed. Such a cancelled task is not
automatically removed from the work queue until its delay
elapses. While this enables further inspection and monitoring, it
may also cause unbounded retention of cancelled tasks.

<p>Successive executions of a task scheduled via
{@code scheduleAtFixedRate} or
{@code scheduleWithFixedDelay} do not overlap. While different
executions may be performed by different threads, the effects of
prior executions <a
href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
those of subsequent ones.

<p>While this class inherits from {@link ThreadPoolExecutor}, a few
of the inherited tuning methods are not useful for it. In
particular, because it acts as a fixed-sized pool using
{@code corePoolSize} threads and an unbounded queue, adjustments
to {@code maximumPoolSize} have no useful effect. Additionally, it
is almost never a good idea to set {@code corePoolSize} to zero or
use {@code allowCoreThreadTimeOut} because this may leave the pool
without threads to handle tasks once they become eligible to run.

<p><b>Extension notes:</b> This class overrides the
{@link ThreadPoolExecutor#execute execute} and
{@link AbstractExecutorService#submit(Runnable) submit}
methods to generate internal {@link ScheduledFuture} objects to
control per-task delays and scheduling.  To preserve
functionality, any further overrides of these methods in
subclasses must invoke superclass versions, which effectively
disables additional task customization.  However, this class
provides alternative protected extension method
{@code decorateTask} (one version each for {@code Runnable} and
{@code Callable}) that can be used to customize the concrete task
types used to execute commands entered via {@code execute},
{@code submit}, {@code schedule}, {@code scheduleAtFixedRate},
and {@code scheduleWithFixedDelay}.  By default, a
{@code ScheduledThreadPoolExecutor} uses a task type extending
{@link FutureTask}. However, this may be modified or replaced using
subclasses of the form:

 <pre> {@code
public class CustomScheduledExecutor extends ScheduledThreadPoolExecutor {

  static class CustomTask<V> implements RunnableScheduledFuture<V> { ... }

  protected <V> RunnableScheduledFuture<V> decorateTask(
               Runnable r, RunnableScheduledFuture<V> task) {
      return new CustomTask<V>(r, task);
  }

  protected <V> RunnableScheduledFuture<V> decorateTask(
               Callable<V> c, RunnableScheduledFuture<V> task) {
      return new CustomTask<V>(c, task);
  }
  // ... add constructors, etc.
}}</pre>

@since 1.5
@author Doug Lea"
      classrelation 457371 // <generalisation>
	relation 457371 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 457371 // <generalisation>
	  b parent class_ref 269467 // ThreadPoolExecutor
      end

      classrelation 457499 // <realization>
	relation 457499 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 457499 // <realization>
	  b parent class_ref 264347 // ScheduledExecutorService
      end

      attribute 391707 "continueExistingPeriodicTasksAfterShutdown"
	volatile private explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "This class specializes ThreadPoolExecutor implementation by

1. Using a custom task type, ScheduledFutureTask for
   tasks, even those that don't require scheduling (i.e.,
   those submitted using ExecutorService execute, not
   ScheduledExecutorService methods) which are treated as
   delayed tasks with a delay of zero.

2. Using a custom queue (DelayedWorkQueue), a variant of
   unbounded DelayQueue. The lack of capacity constraint and
   the fact that corePoolSize and maximumPoolSize are
   effectively identical simplifies some execution mechanics
   (see delayedExecute) compared to ThreadPoolExecutor.

3. Supporting optional run-after-shutdown parameters, which
   leads to overrides of shutdown methods to remove and cancel
   tasks that should NOT be run after shutdown, as well as
   different recheck logic when task (re)submission overlaps
   with a shutdown.

4. Task decoration methods to allow interception and
   instrumentation, which are needed because subclasses cannot
   otherwise override submit methods to get this effect. These
   don't have any impact on pool control logic though.


False if should cancel/suppress periodic tasks on shutdown.
"
      end

      attribute 391835 "executeExistingDelayedTasksAfterShutdown"
	volatile private explicit_type "boolean"
	init_value " true"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "False if should cancel non-periodic tasks on shutdown.
"
      end

      attribute 391963 "removeOnCancel"
	volatile private explicit_type "boolean"
	init_value " false"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "True if ScheduledFutureTask.cancel should remove from queue
"
      end

      classrelation 457627 // sequencer (<unidirectional association>)
	relation 457627 --->
	  a role_name "sequencer" init_value " new AtomicLong()" class_relation const_relation private
	    comment "
Sequence number to break scheduling ties, and in turn to
guarantee FIFO order among tied entries.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 457627 // sequencer (<unidirectional association>)
	  b parent class_ref 270491 // AtomicLong
      end

      operation 1604763 "now"
	package explicit_return_type "long"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns current nanosecond time."
      end

      class 270619 "ScheduledFutureTask"
	visibility private 
	nformals 1
	formal name "V" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 2
	actual class class_ref 263835 // FutureTask
	  rank 0 explicit_value ""
	actual class class_ref 269595 // RunnableScheduledFuture
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 457755 // <realization>
	  relation 457755 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 457755 // <realization>
	    b parent class_ref 263835 // FutureTask
	end

	classrelation 457883 // <realization>
	  relation 457883 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 457883 // <realization>
	    b parent class_ref 269595 // RunnableScheduledFuture
	end

	attribute 392091 "sequenceNumber"
	  const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Sequence number to break ties FIFO "
	end

	attribute 392219 "time"
	  private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " The time the task is enabled to execute in nanoTime units "
	end

	attribute 392347 "period"
	  const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Period in nanoseconds for repeating tasks.  A positive
value indicates fixed-rate execution.  A negative value
indicates fixed-delay execution.  A value of 0 indicates a
non-repeating task.
"
	end

	classrelation 458011 // outerTask (<unidirectional association>)
	  relation 458011 --->
	    a role_name "outerTask" init_value " this" package
	      comment " The actual task to be re-enqueued by reExecutePeriodic 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<V> ${name}${value};
"
	      classrelation_ref 458011 // outerTask (<unidirectional association>)
	    b parent class_ref 269595 // RunnableScheduledFuture
	end

	attribute 392475 "heapIndex"
	  package explicit_type "int"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "Index into delay queue, to support faster cancellation.
"
	end

	operation 1604891 "ScheduledFutureTask"
	  package explicit_return_type ""
	  nparams 3
	    param inout name "r" type class_ref 151963 // Runnable
	    param inout name "result" explicit_type "V"
	    param in name "ns" explicit_type "long"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a one-shot action with given nanoTime-based trigger time."
	end

	operation 1605019 "ScheduledFutureTask"
	  package explicit_return_type ""
	  nparams 4
	    param inout name "r" type class_ref 151963 // Runnable
	    param inout name "result" explicit_type "V"
	    param in name "ns" explicit_type "long"
	    param in name "period" explicit_type "long"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a periodic action with given nano time and period."
	end

	operation 1605147 "ScheduledFutureTask"
	  package explicit_return_type ""
	  nparams 2
	    param inout name "callable" type class_ref 253467 // Callable
	    param in name "ns" explicit_type "long"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}<V> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates a one-shot action with given nanoTime-based trigger."
	end

	operation 1605275 "getDelay"
	  public explicit_return_type "long"
	  nparams 1
	    param inout name "unit" type class_ref 253211 // TimeUnit
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1605403 "compareTo"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "other" type class_ref 262683 // Delayed
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1605531 "isPeriodic"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if this is a periodic (not a one-shot) action.

@return true if periodic"
	end

	operation 1605659 "setNextRunTime"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sets the next time to run for a periodic task."
	end

	operation 1605787 "cancel"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "mayInterruptIfRunning" explicit_type "boolean"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1605915 "run"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Overrides FutureTask version so as to reset/requeue if periodic."
	end
      end

      operation 1606043 "canRunInCurrentRunState"
	package explicit_return_type "boolean"
	nparams 1
	  param inout name "periodic" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns true if can run a task given current run state
and run-after-shutdown parameters.

@param periodic true if this task periodic, false if delayed"
      end

      operation 1606171 "delayedExecute"
	private explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 269595 // RunnableScheduledFuture
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Main execution method for delayed or periodic tasks.  If pool
is shut down, rejects the task. Otherwise adds task to queue
and starts a thread, if necessary, to run it.  (We cannot
prestart the thread to run the task because the task (probably)
shouldn't be run yet,) If the pool is shut down while the task
is being added, cancel and remove it if required by state and
run-after-shutdown parameters.

@param task the task"
      end

      operation 1606299 "reExecutePeriodic"
	package explicit_return_type "void"
	nparams 1
	  param inout name "task" type class_ref 269595 // RunnableScheduledFuture
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Requeues a periodic task unless current run state precludes it.
Same idea as delayedExecute except drops task rather than rejecting.

@param task the task"
      end

      operation 1606427 "onShutdown"
	package explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@Override
"
	
	
	
	comment "Cancels and clears the queue of all tasks that should not be run
due to shutdown policy.  Invoked within super.shutdown."
      end

      operation 1606555 "decorateTask"
	protected return_type class_ref 269595 // RunnableScheduledFuture
	nparams 2
	  param inout name "runnable" type class_ref 151963 // Runnable
	  param inout name "task" type class_ref 269595 // RunnableScheduledFuture
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0} ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modifies or replaces the task used to execute a runnable.
This method can be used to override the concrete
class used for managing internal tasks.
The default implementation simply returns the given task.

@param runnable the submitted Runnable
@param task the task created to execute the runnable
@return a task that can execute the runnable
@since 1.6"
      end

      operation 1606683 "decorateTask"
	protected return_type class_ref 269595 // RunnableScheduledFuture
	nparams 2
	  param inout name "callable" type class_ref 253467 // Callable
	  param inout name "task" type class_ref 269595 // RunnableScheduledFuture
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0}<V> ${p0}, ${t1}<V> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Modifies or replaces the task used to execute a callable.
This method can be used to override the concrete
class used for managing internal tasks.
The default implementation simply returns the given task.

@param callable the submitted Callable
@param task the task created to execute the callable
@return a task that can execute the callable
@since 1.6"
      end

      operation 1606811 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 1
	  param in name "corePoolSize" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ScheduledThreadPoolExecutor} with the
given core pool size.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@throws IllegalArgumentException if {@code corePoolSize < 0}"
      end

      operation 1606939 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 2
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "threadFactory" type class_ref 264219 // ThreadFactory
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new {@code ScheduledThreadPoolExecutor} with the
given initial parameters.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param threadFactory the factory to use when the executor
       creates a new thread
@throws IllegalArgumentException if {@code corePoolSize < 0}
@throws NullPointerException if {@code threadFactory} is null"
      end

      operation 1607067 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 2
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "handler" type class_ref 269339 // RejectedExecutionHandler
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ScheduledThreadPoolExecutor with the given
initial parameters.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param handler the handler to use when execution is blocked
       because the thread bounds and queue capacities are reached
@throws IllegalArgumentException if {@code corePoolSize < 0}
@throws NullPointerException if {@code handler} is null"
      end

      operation 1607195 "ScheduledThreadPoolExecutor"
	public explicit_return_type ""
	nparams 3
	  param in name "corePoolSize" explicit_type "int"
	  param inout name "threadFactory" type class_ref 264219 // ThreadFactory
	  param inout name "handler" type class_ref 269339 // RejectedExecutionHandler
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a new ScheduledThreadPoolExecutor with the given
initial parameters.

@param corePoolSize the number of threads to keep in the pool, even
       if they are idle, unless {@code allowCoreThreadTimeOut} is set
@param threadFactory the factory to use when the executor
       creates a new thread
@param handler the handler to use when execution is blocked
       because the thread bounds and queue capacities are reached
@throws IllegalArgumentException if {@code corePoolSize < 0}
@throws NullPointerException if {@code threadFactory} or
        {@code handler} is null"
      end

      operation 1607323 "triggerTime"
	private explicit_return_type "long"
	nparams 2
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the trigger time of a delayed action."
      end

      operation 1607451 "triggerTime"
	package explicit_return_type "long"
	nparams 1
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the trigger time of a delayed action."
      end

      operation 1607579 "overflowFree"
	private explicit_return_type "long"
	nparams 1
	  param in name "delay" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constrains the values of all delays in the queue to be within
Long.MAX_VALUE of each other, to avoid overflow in compareTo.
This may occur if a task is eligible to be dequeued, but has
not yet been, while some other task is added with a delay of
Long.MAX_VALUE."
      end

      operation 1607707 "schedule"
	public return_type class_ref 265499 // ScheduledFuture
	nparams 3
	  param inout name "command" type class_ref 151963 // Runnable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}"
      end

      operation 1607835 "schedule"
	public return_type class_ref 265499 // ScheduledFuture
	nparams 3
	  param inout name "callable" type class_ref 253467 // Callable
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<V> ${type}<V> ${name}${(}${t0}<V> ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}"
      end

      operation 1607963 "scheduleAtFixedRate"
	public return_type class_ref 265499 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 151963 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "period" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
@throws IllegalArgumentException   {@inheritDoc}"
      end

      operation 1608091 "scheduleWithFixedDelay"
	public return_type class_ref 265499 // ScheduledFuture
	nparams 4
	  param inout name "command" type class_ref 151963 // Runnable
	  param in name "initialDelay" explicit_type "long"
	  param in name "delay" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}
@throws IllegalArgumentException   {@inheritDoc}"
      end

      operation 1608219 "execute"
	public explicit_return_type "void"
	nparams 1
	  param inout name "command" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Executes {@code command} with zero required delay.
This has effect equivalent to
{@link #schedule(Runnable,long,TimeUnit) schedule(command, 0, anyUnit)}.
Note that inspections of the queue and of the list returned by
{@code shutdownNow} will access the zero-delayed
{@link ScheduledFuture}, not the {@code command} itself.

<p>A consequence of the use of {@code ScheduledFuture} objects is
that {@link ThreadPoolExecutor#afterExecute afterExecute} is always
called with a null second {@code Throwable} argument, even if the
{@code command} terminated abruptly.  Instead, the {@code Throwable}
thrown by such a task can be obtained via {@link Future#get}.

@throws RejectedExecutionException at discretion of
        {@code RejectedExecutionHandler}, if the task
        cannot be accepted for execution because the
        executor has been shut down
@throws NullPointerException {@inheritDoc}"
      end

      operation 1608347 "submit"
	public return_type class_ref 253339 // Future
	nparams 1
	  param inout name "task" type class_ref 151963 // Runnable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Override AbstractExecutorService methods

@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}"
      end

      operation 1608475 "submit"
	public return_type class_ref 253339 // Future
	nparams 2
	  param inout name "task" type class_ref 151963 // Runnable
	  param inout name "result" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}"
      end

      operation 1608603 "submit"
	public return_type class_ref 253339 // Future
	nparams 1
	  param inout name "task" type class_ref 253467 // Callable
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}<T> ${name}${(}${t0}<T> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws RejectedExecutionException {@inheritDoc}
@throws NullPointerException       {@inheritDoc}"
      end

      operation 1608731 "setContinueExistingPeriodicTasksAfterShutdownPolicy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the policy on whether to continue executing existing
periodic tasks even when this executor has been {@code shutdown}.
In this case, these tasks will only terminate upon
{@code shutdownNow} or after setting the policy to
{@code false} when already shutdown.
This value is by default {@code false}.

@param value if {@code true}, continue after shutdown, else don't.
@see #getContinueExistingPeriodicTasksAfterShutdownPolicy"
      end

      operation 1608859 "getContinueExistingPeriodicTasksAfterShutdownPolicy"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the policy on whether to continue executing existing
periodic tasks even when this executor has been {@code shutdown}.
In this case, these tasks will only terminate upon
{@code shutdownNow} or after setting the policy to
{@code false} when already shutdown.
This value is by default {@code false}.

@return {@code true} if will continue after shutdown
@see #setContinueExistingPeriodicTasksAfterShutdownPolicy"
      end

      operation 1608987 "setExecuteExistingDelayedTasksAfterShutdownPolicy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the policy on whether to execute existing delayed
tasks even when this executor has been {@code shutdown}.
In this case, these tasks will only terminate upon
{@code shutdownNow}, or after setting the policy to
{@code false} when already shutdown.
This value is by default {@code true}.

@param value if {@code true}, execute after shutdown, else don't.
@see #getExecuteExistingDelayedTasksAfterShutdownPolicy"
      end

      operation 1609115 "getExecuteExistingDelayedTasksAfterShutdownPolicy"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the policy on whether to execute existing delayed
tasks even when this executor has been {@code shutdown}.
In this case, these tasks will only terminate upon
{@code shutdownNow}, or after setting the policy to
{@code false} when already shutdown.
This value is by default {@code true}.

@return {@code true} if will execute after shutdown
@see #setExecuteExistingDelayedTasksAfterShutdownPolicy"
      end

      operation 1609243 "setRemoveOnCancelPolicy"
	public explicit_return_type "void"
	nparams 1
	  param inout name "value" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the policy on whether cancelled tasks should be immediately
removed from the work queue at time of cancellation.  This value is
by default {@code false}.

@param value if {@code true}, remove on cancellation, else don't
@see #getRemoveOnCancelPolicy
@since 1.7
@hide"
      end

      operation 1609371 "getRemoveOnCancelPolicy"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Gets the policy on whether cancelled tasks should be immediately
removed from the work queue at time of cancellation.  This value is
by default {@code false}.

@return {@code true} if cancelled tasks are immediately removed
        from the queue
@see #setRemoveOnCancelPolicy
@since 1.7
@hide"
      end

      operation 1609499 "shutdown"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Initiates an orderly shutdown in which previously submitted
tasks are executed, but no new tasks will be accepted.
Invocation has no additional effect if already shut down.

<p>This method does not wait for previously submitted tasks to
complete execution.  Use {@link #awaitTermination awaitTermination}
to do that.

<p>If the {@code ExecuteExistingDelayedTasksAfterShutdownPolicy}
has been set {@code false}, existing delayed tasks whose delays
have not yet elapsed are cancelled.  And unless the {@code
ContinueExistingPeriodicTasksAfterShutdownPolicy} has been set
{@code true}, future executions of existing periodic tasks will
be cancelled."
      end

      operation 1609627 "shutdownNow"
	public return_type class_ref 131483 // List
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Attempts to stop all actively executing tasks, halts the
processing of waiting tasks, and returns a list of the tasks
that were awaiting execution.

<p>This method does not wait for actively executing tasks to
terminate.  Use {@link #awaitTermination awaitTermination} to
do that.

<p>There are no guarantees beyond best-effort attempts to stop
processing actively executing tasks.  This implementation
cancels tasks via {@link Thread#interrupt}, so any task that
fails to respond to interrupts may never terminate.

@return list of tasks that never commenced execution.
        Each element of this list is a {@link ScheduledFuture},
        including those tasks submitted using {@code execute},
        which are for scheduling purposes used as the basis of a
        zero-delay {@code ScheduledFuture}."
      end

      operation 1609755 "getQueue"
	public return_type class_ref 254107 // BlockingQueue
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the task queue used by this executor.  Each element of
this queue is a {@link ScheduledFuture}, including those
tasks submitted using {@code execute} which are for scheduling
purposes used as the basis of a zero-delay
{@code ScheduledFuture}.  Iteration over this queue is
<em>not</em> guaranteed to traverse tasks in the order in
which they will execute.

@return the task queue"
      end

      class 270747 "DelayedWorkQueue"
	visibility package 
	nactuals 2
	actual class class_ref 232859 // AbstractQueue
	  rank 0 explicit_value ""
	actual class class_ref 254107 // BlockingQueue
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 458139 // <realization>
	  relation 458139 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 458139 // <realization>
	    b parent class_ref 232859 // AbstractQueue
	end

	classrelation 458267 // <realization>
	  relation 458267 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 458267 // <realization>
	    b parent class_ref 254107 // BlockingQueue
	end

	attribute 392603 "INITIAL_CAPACITY"
	  class_attribute const_attribute private explicit_type "int"
	  init_value " 16"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "A DelayedWorkQueue is based on a heap-based data structure
like those in DelayQueue and PriorityQueue, except that
every ScheduledFutureTask also records its index into the
heap array. This eliminates the need to find a task upon
cancellation, greatly speeding up removal (down from O(n)
to O(log n)), and reducing garbage retention that would
otherwise occur by waiting for the element to rise to top
before clearing. But because the queue may also hold
RunnableScheduledFutures that are not ScheduledFutureTasks,
we are not guaranteed to have such indices available, in
which case we fall back to linear search. (We expect that
most tasks will not be decorated, and that the faster cases
will be much more common.)

All heap operations must record index changes -- mainly
within siftUp and siftDown. Upon removal, a task's
heapIndex is set to -1. Note that ScheduledFutureTasks can
appear at most once in the queue (this need not be true for
other kinds of tasks or work queues), so are uniquely
identified by heapIndex.
"
	end

	classrelation 458395 // queue (<unidirectional association>)
	  relation 458395 --->
	    a role_name "queue" multiplicity "[]" init_value "
            new RunnableScheduledFuture<?>[INITIAL_CAPACITY]" private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<?>${multiplicity} ${name}${value};
"
	      classrelation_ref 458395 // queue (<unidirectional association>)
	    b parent class_ref 269595 // RunnableScheduledFuture
	end

	classrelation 458523 // lock (<unidirectional association>)
	  relation 458523 --->
	    a role_name "lock" init_value " new ReentrantLock()" const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 458523 // lock (<unidirectional association>)
	    b parent class_ref 254235 // ReentrantLock
	end

	attribute 392731 "size"
	  private explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	classrelation 458651 // leader (<unidirectional association>)
	  relation 458651 --->
	    a role_name "leader" init_value " null" private
	      comment "
Thread designated to wait for the task at the head of the
queue.  This variant of the Leader-Follower pattern
(http://www.cs.wustl.edu/~schmidt/POSA/POSA2/) serves to
minimize unnecessary timed waiting.  When a thread becomes
the leader, it waits only for the next delay to elapse, but
other threads await indefinitely.  The leader thread must
signal some other thread before returning from take() or
poll(...), unless some other thread becomes leader in the
interim.  Whenever the head of the queue is replaced with a
task with an earlier expiration time, the leader field is
invalidated by being reset to null, and some waiting
thread, but not necessarily the current leader, is
signalled.  So waiting threads must be prepared to acquire
and lose leadership while waiting.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 458651 // leader (<unidirectional association>)
	    b parent class_ref 1201420 // Thread
	end

	classrelation 458779 // available (<unidirectional association>)
	  relation 458779 --->
	    a role_name "available" init_value " lock.newCondition()" const_relation private
	      comment "
Condition signalled when a newer task becomes available at the
head of the queue or a new thread may need to become leader.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 458779 // available (<unidirectional association>)
	    b parent class_ref 254363 // Condition
	end

	operation 1609883 "setIndex"
	  private explicit_return_type "void"
	  nparams 2
	    param inout name "f" type class_ref 269595 // RunnableScheduledFuture
	    param in name "idx" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Set f's heapIndex if it is a ScheduledFutureTask."
	end

	operation 1610011 "siftUp"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "k" explicit_type "int"
	    param inout name "key" type class_ref 269595 // RunnableScheduledFuture
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sift element added at bottom up to its heap-ordered spot.
Call only when holding lock."
	end

	operation 1610139 "siftDown"
	  private explicit_return_type "void"
	  nparams 2
	    param in name "k" explicit_type "int"
	    param inout name "key" type class_ref 269595 // RunnableScheduledFuture
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1}<?> ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Sift element added at top down to its heap-ordered spot.
Call only when holding lock."
	end

	operation 1610267 "grow"
	  private explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Resize the heap array.  Call only when holding lock."
	end

	operation 1610395 "indexOf"
	  private explicit_return_type "int"
	  nparams 1
	    param inout name "x" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Find index of given object, or -1 if absent"
	end

	operation 1610523 "contains"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1610651 "remove"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" type class_ref 3401484 // Object
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1610779 "size"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1610907 "isEmpty"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1611035 "remainingCapacity"
	  public explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1611163 "peek"
	  public return_type class_ref 269595 // RunnableScheduledFuture
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1611291 "offer"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "x" type class_ref 151963 // Runnable
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1611419 "put"
	  public explicit_return_type "void"
	  nparams 1
	    param inout name "e" type class_ref 151963 // Runnable
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1611547 "add"
	  public explicit_return_type "boolean"
	  nparams 1
	    param inout name "e" type class_ref 151963 // Runnable
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1611675 "offer"
	  public explicit_return_type "boolean"
	  nparams 3
	    param inout name "e" type class_ref 151963 // Runnable
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 253211 // TimeUnit
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1611803 "finishPoll"
	  private return_type class_ref 269595 // RunnableScheduledFuture
	  nparams 1
	    param inout name "f" type class_ref 269595 // RunnableScheduledFuture
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Performs common bookkeeping for poll and take: Replaces
first element with last and sifts it down.  Call only when
holding lock.
@param f the task to remove and return"
	end

	operation 1611931 "poll"
	  public return_type class_ref 269595 // RunnableScheduledFuture
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1612059 "take"
	  public return_type class_ref 269595 // RunnableScheduledFuture
	  nparams 0
	  nexceptions 1
	    exception class_ref 155547 // InterruptedException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1612187 "poll"
	  public return_type class_ref 269595 // RunnableScheduledFuture
	  nparams 2
	    param in name "timeout" explicit_type "long"
	    param inout name "unit" type class_ref 253211 // TimeUnit
	  nexceptions 1
	    exception class_ref 155547 // InterruptedException
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1612315 "clear"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1612443 "peekExpired"
	  private return_type class_ref 269595 // RunnableScheduledFuture
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<?> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Return first element only if it is expired.
Used only by drainTo.  Call only when holding lock."
	end

	operation 1612571 "drainTo"
	  public explicit_return_type "int"
	  nparams 1
	    param inout name "c" type class_ref 160667 // Collection
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Runnable> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1612699 "drainTo"
	  public explicit_return_type "int"
	  nparams 2
	    param inout name "c" type class_ref 160667 // Collection
	    param in name "maxElements" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super Runnable> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1612827 "toArray"
	  public return_type class_ref 3401484 // Object
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1612955 "toArray"
	  public explicit_return_type "T"
	  nparams 1
	    param inout name "a" explicit_type "T"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  java_annotation "@SuppressWarnings(\"unchecked\")
"
	  
	  
	  
	end

	operation 1613083 "iterator"
	  public return_type class_ref 155803 // Iterator
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Runnable> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	class 270875 "Itr"
	  visibility private 
	  nactuals 1
	  actual class class_ref 155803 // Iterator
	    rank 0 explicit_value ""
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 458907 // <realization>
	    relation 458907 -_-|>
	      stereotype "bind"
	      a public
		cpp default "${type}"
		java "${type}"
		classrelation_ref 458907 // <realization>
	      b parent class_ref 155803 // Iterator
	  end

	  classrelation 459035 // array (<unidirectional association>)
	    relation 459035 --->
	      a role_name "array" multiplicity "[]" const_relation package
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}${multiplicity} ${name}${value};
"
		classrelation_ref 459035 // array (<unidirectional association>)
	      b parent class_ref 269595 // RunnableScheduledFuture
	  end

	  attribute 392859 "cursor"
	    package explicit_type "int"
	    init_value " 0"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    comment " index of next element to return"
	  end

	  attribute 392987 "lastRet"
	    package explicit_type "int"
	    init_value " -1"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	    comment " index of last element, or -1 if no such"
	  end

	  operation 1613211 "Itr"
	    package explicit_return_type ""
	    nparams 1
	      param inout name "array" type class_ref 269595 // RunnableScheduledFuture
	    cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	    cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1613339 "hasNext"
	    public explicit_return_type "boolean"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1613467 "next"
	    public return_type class_ref 151963 // Runnable
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1613595 "remove"
	    public explicit_return_type "void"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end
	end
      end
    end

    class 271003 "Semaphore"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A counting semaphore.  Conceptually, a semaphore maintains a set of
permits.  Each {@link #acquire} blocks if necessary until a permit is
available, and then takes it.  Each {@link #release} adds a permit,
potentially releasing a blocking acquirer.
However, no actual permit objects are used; the {@code Semaphore} just
keeps a count of the number available and acts accordingly.

<p>Semaphores are often used to restrict the number of threads than can
access some (physical or logical) resource. For example, here is
a class that uses a semaphore to control access to a pool of items:
 <pre> {@code
class Pool {
  private static final int MAX_AVAILABLE = 100;
  private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);

  public Object getItem() throws InterruptedException {
    available.acquire();
    return getNextAvailableItem();
  }

  public void putItem(Object x) {
    if (markAsUnused(x))
      available.release();
  }

  // Not a particularly efficient data structure; just for demo

  protected Object[] items = ... whatever kinds of items being managed
  protected boolean[] used = new boolean[MAX_AVAILABLE];

  protected synchronized Object getNextAvailableItem() {
    for (int i = 0; i < MAX_AVAILABLE; ++i) {
      if (!used[i]) {
         used[i] = true;
         return items[i];
      }
    }
    return null; // not reached
  }

  protected synchronized boolean markAsUnused(Object item) {
    for (int i = 0; i < MAX_AVAILABLE; ++i) {
      if (item == items[i]) {
         if (used[i]) {
           used[i] = false;
           return true;
         } else
           return false;
      }
    }
    return false;
  }
}}</pre>

<p>Before obtaining an item each thread must acquire a permit from
the semaphore, guaranteeing that an item is available for use. When
the thread has finished with the item it is returned back to the
pool and a permit is returned to the semaphore, allowing another
thread to acquire that item.  Note that no synchronization lock is
held when {@link #acquire} is called as that would prevent an item
from being returned to the pool.  The semaphore encapsulates the
synchronization needed to restrict access to the pool, separately
from any synchronization needed to maintain the consistency of the
pool itself.

<p>A semaphore initialized to one, and which is used such that it
only has at most one permit available, can serve as a mutual
exclusion lock.  This is more commonly known as a <em>binary
semaphore</em>, because it only has two states: one permit
available, or zero permits available.  When used in this way, the
binary semaphore has the property (unlike many {@link Lock}
implementations), that the &quot;lock&quot; can be released by a
thread other than the owner (as semaphores have no notion of
ownership).  This can be useful in some specialized contexts, such
as deadlock recovery.

<p> The constructor for this class optionally accepts a
<em>fairness</em> parameter. When set false, this class makes no
guarantees about the order in which threads acquire permits. In
particular, <em>barging</em> is permitted, that is, a thread
invoking {@link #acquire} can be allocated a permit ahead of a
thread that has been waiting - logically the new thread places itself at
the head of the queue of waiting threads. When fairness is set true, the
semaphore guarantees that threads invoking any of the {@link
#acquire() acquire} methods are selected to obtain permits in the order in
which their invocation of those methods was processed
(first-in-first-out; FIFO). Note that FIFO ordering necessarily
applies to specific internal points of execution within these
methods.  So, it is possible for one thread to invoke
{@code acquire} before another, but reach the ordering point after
the other, and similarly upon return from the method.
Also note that the untimed {@link #tryAcquire() tryAcquire} methods do not
honor the fairness setting, but will take any permits that are
available.

<p>Generally, semaphores used to control resource access should be
initialized as fair, to ensure that no thread is starved out from
accessing a resource. When using semaphores for other kinds of
synchronization control, the throughput advantages of non-fair
ordering often outweigh fairness considerations.

<p>This class also provides convenience methods to {@link
#acquire(int) acquire} and {@link #release(int) release} multiple
permits at a time.  Beware of the increased risk of indefinite
postponement when these methods are used without fairness set true.

<p>Memory consistency effects: Actions in a thread prior to calling
a \"release\" method such as {@code release()}
<a href=\"package-summary.html#MemoryVisibility\"><i>happen-before</i></a>
actions following a successful \"acquire\" method such as {@code acquire()}
in another thread.

@since 1.5
@author Doug Lea
"
      classrelation 459163 // <realization>
	relation 459163 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 459163 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 393115 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3222578661600680210L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 271131 "Sync"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 459419 // <generalisation>
	  relation 459419 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 459419 // <generalisation>
	    b parent class_ref 256283 // AbstractQueuedSynchronizer
	end

	attribute 393243 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 1192457210091910933L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1613723 "Sync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "permits" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1613851 "getPermits"
	  package explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1613979 "nonfairTryAcquireShared"
	  package explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1614107 "tryReleaseShared"
	  protected explicit_return_type "boolean"
	  nparams 1
	    param in name "releases" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1614235 "reducePermits"
	  package explicit_return_type "void"
	  nparams 1
	    param in name "reductions" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1614363 "drainPermits"
	  package explicit_return_type "int"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      classrelation 459291 // sync (<unidirectional association>)
	relation 459291 --->
	  a role_name "sync" const_relation private
	    comment " All mechanics via AbstractQueuedSynchronizer subclass 
"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 459291 // sync (<unidirectional association>)
	  b parent class_ref 271131 // Sync
      end

      class 271259 "NonfairSync"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 459547 // <generalisation>
	  relation 459547 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 459547 // <generalisation>
	    b parent class_ref 271131 // Sync
	end

	attribute 393371 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -2694183684443567898L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1614491 "NonfairSync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "permits" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1614619 "tryAcquireShared"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      class 271387 "FairSync"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 459675 // <generalisation>
	  relation 459675 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 459675 // <generalisation>
	    b parent class_ref 271131 // Sync
	end

	attribute 393499 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " 2014338818796000944L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	operation 1614747 "FairSync"
	  package explicit_return_type ""
	  nparams 1
	    param in name "permits" explicit_type "int"
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1614875 "tryAcquireShared"
	  protected explicit_return_type "int"
	  nparams 1
	    param in name "acquires" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1615003 "Semaphore"
	public explicit_return_type ""
	nparams 1
	  param in name "permits" explicit_type "int"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code Semaphore} with the given number of
permits and nonfair fairness setting.

@param permits the initial number of permits available.
       This value may be negative, in which case releases
       must occur before any acquires will be granted."
      end

      operation 1615131 "Semaphore"
	public explicit_return_type ""
	nparams 2
	  param in name "permits" explicit_type "int"
	  param inout name "fair" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a {@code Semaphore} with the given number of
permits and the given fairness setting.

@param permits the initial number of permits available.
       This value may be negative, in which case releases
       must occur before any acquires will be granted.
@param fair {@code true} if this semaphore will guarantee
       first-in first-out granting of permits under contention,
       else {@code false}"
      end

      operation 1615259 "acquire"
	public explicit_return_type "void"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, blocking until one is
available, or the thread is {@linkplain Thread#interrupt interrupted}.

<p>Acquires a permit, if one is available and returns immediately,
reducing the number of available permits by one.

<p>If no permit is available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
one of two things happens:
<ul>
<li>Some other thread invokes the {@link #release} method for this
semaphore and the current thread is next to be assigned a permit; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
for a permit,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

@throws InterruptedException if the current thread is interrupted"
      end

      operation 1615387 "acquireUninterruptibly"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, blocking until one is
available.

<p>Acquires a permit, if one is available and returns immediately,
reducing the number of available permits by one.

<p>If no permit is available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
some other thread invokes the {@link #release} method for this
semaphore and the current thread is next to be assigned a permit.

<p>If the current thread is {@linkplain Thread#interrupt interrupted}
while waiting for a permit then it will continue to wait, but the
time at which the thread is assigned a permit may change compared to
the time it would have received the permit had no interruption
occurred.  When the thread does return from this method its interrupt
status will be set."
      end

      operation 1615515 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, only if one is available at the
time of invocation.

<p>Acquires a permit, if one is available and returns immediately,
with the value {@code true},
reducing the number of available permits by one.

<p>If no permit is available then this method will return
immediately with the value {@code false}.

<p>Even when this semaphore has been set to use a
fair ordering policy, a call to {@code tryAcquire()} <em>will</em>
immediately acquire a permit if one is available, whether or not
other threads are currently waiting.
This &quot;barging&quot; behavior can be useful in certain
circumstances, even though it breaks fairness. If you want to honor
the fairness setting, then use
{@link #tryAcquire(long, TimeUnit) tryAcquire(0, TimeUnit.SECONDS) }
which is almost equivalent (it also detects interruption).

@return {@code true} if a permit was acquired and {@code false}
        otherwise"
      end

      operation 1615643 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires a permit from this semaphore, if one becomes available
within the given waiting time and the current thread has not
been {@linkplain Thread#interrupt interrupted}.

<p>Acquires a permit, if one is available and returns immediately,
with the value {@code true},
reducing the number of available permits by one.

<p>If no permit is available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
one of three things happens:
<ul>
<li>Some other thread invokes the {@link #release} method for this
semaphore and the current thread is next to be assigned a permit; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>The specified waiting time elapses.
</ul>

<p>If a permit is acquired then the value {@code true} is returned.

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
to acquire a permit,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.

<p>If the specified waiting time elapses then the value {@code false}
is returned.  If the time is less than or equal to zero, the method
will not wait at all.

@param timeout the maximum time to wait for a permit
@param unit the time unit of the {@code timeout} argument
@return {@code true} if a permit was acquired and {@code false}
        if the waiting time elapsed before a permit was acquired
@throws InterruptedException if the current thread is interrupted"
      end

      operation 1615771 "release"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases a permit, returning it to the semaphore.

<p>Releases a permit, increasing the number of available permits by
one.  If any threads are trying to acquire a permit, then one is
selected and given the permit that was just released.  That thread
is (re)enabled for thread scheduling purposes.

<p>There is no requirement that a thread that releases a permit must
have acquired that permit by calling {@link #acquire}.
Correct usage of a semaphore is established by programming convention
in the application."
      end

      operation 1615899 "acquire"
	public explicit_return_type "void"
	nparams 1
	  param in name "permits" explicit_type "int"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore,
blocking until all are available,
or the thread is {@linkplain Thread#interrupt interrupted}.

<p>Acquires the given number of permits, if they are available,
and returns immediately, reducing the number of available permits
by the given amount.

<p>If insufficient permits are available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
one of two things happens:
<ul>
<li>Some other thread invokes one of the {@link #release() release}
methods for this semaphore, the current thread is next to be assigned
permits and the number of available permits satisfies this request; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread.
</ul>

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
for a permit,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.
Any permits that were to be assigned to this thread are instead
assigned to other threads trying to acquire permits, as if
permits had been made available by a call to {@link #release()}.

@param permits the number of permits to acquire
@throws InterruptedException if the current thread is interrupted
@throws IllegalArgumentException if {@code permits} is negative"
      end

      operation 1616027 "acquireUninterruptibly"
	public explicit_return_type "void"
	nparams 1
	  param in name "permits" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore,
blocking until all are available.

<p>Acquires the given number of permits, if they are available,
and returns immediately, reducing the number of available permits
by the given amount.

<p>If insufficient permits are available then the current thread becomes
disabled for thread scheduling purposes and lies dormant until
some other thread invokes one of the {@link #release() release}
methods for this semaphore, the current thread is next to be assigned
permits and the number of available permits satisfies this request.

<p>If the current thread is {@linkplain Thread#interrupt interrupted}
while waiting for permits then it will continue to wait and its
position in the queue is not affected.  When the thread does return
from this method its interrupt status will be set.

@param permits the number of permits to acquire
@throws IllegalArgumentException if {@code permits} is negative
"
      end

      operation 1616155 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "permits" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore, only
if all are available at the time of invocation.

<p>Acquires the given number of permits, if they are available, and
returns immediately, with the value {@code true},
reducing the number of available permits by the given amount.

<p>If insufficient permits are available then this method will return
immediately with the value {@code false} and the number of available
permits is unchanged.

<p>Even when this semaphore has been set to use a fair ordering
policy, a call to {@code tryAcquire} <em>will</em>
immediately acquire a permit if one is available, whether or
not other threads are currently waiting.  This
&quot;barging&quot; behavior can be useful in certain
circumstances, even though it breaks fairness. If you want to
honor the fairness setting, then use {@link #tryAcquire(int,
long, TimeUnit) tryAcquire(permits, 0, TimeUnit.SECONDS) }
which is almost equivalent (it also detects interruption).

@param permits the number of permits to acquire
@return {@code true} if the permits were acquired and
        {@code false} otherwise
@throws IllegalArgumentException if {@code permits} is negative"
      end

      operation 1616283 "tryAcquire"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "permits" explicit_type "int"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires the given number of permits from this semaphore, if all
become available within the given waiting time and the current
thread has not been {@linkplain Thread#interrupt interrupted}.

<p>Acquires the given number of permits, if they are available and
returns immediately, with the value {@code true},
reducing the number of available permits by the given amount.

<p>If insufficient permits are available then
the current thread becomes disabled for thread scheduling
purposes and lies dormant until one of three things happens:
<ul>
<li>Some other thread invokes one of the {@link #release() release}
methods for this semaphore, the current thread is next to be assigned
permits and the number of available permits satisfies this request; or
<li>Some other thread {@linkplain Thread#interrupt interrupts}
the current thread; or
<li>The specified waiting time elapses.
</ul>

<p>If the permits are acquired then the value {@code true} is returned.

<p>If the current thread:
<ul>
<li>has its interrupted status set on entry to this method; or
<li>is {@linkplain Thread#interrupt interrupted} while waiting
to acquire the permits,
</ul>
then {@link InterruptedException} is thrown and the current thread's
interrupted status is cleared.
Any permits that were to be assigned to this thread, are instead
assigned to other threads trying to acquire permits, as if
the permits had been made available by a call to {@link #release()}.

<p>If the specified waiting time elapses then the value {@code false}
is returned.  If the time is less than or equal to zero, the method
will not wait at all.  Any permits that were to be assigned to this
thread, are instead assigned to other threads trying to acquire
permits, as if the permits had been made available by a call to
{@link #release()}.

@param permits the number of permits to acquire
@param timeout the maximum time to wait for the permits
@param unit the time unit of the {@code timeout} argument
@return {@code true} if all permits were acquired and {@code false}
        if the waiting time elapsed before all permits were acquired
@throws InterruptedException if the current thread is interrupted
@throws IllegalArgumentException if {@code permits} is negative"
      end

      operation 1616411 "release"
	public explicit_return_type "void"
	nparams 1
	  param in name "permits" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Releases the given number of permits, returning them to the semaphore.

<p>Releases the given number of permits, increasing the number of
available permits by that amount.
If any threads are trying to acquire permits, then one
is selected and given the permits that were just released.
If the number of available permits satisfies that thread's request
then that thread is (re)enabled for thread scheduling purposes;
otherwise the thread will wait until sufficient permits are available.
If there are still permits available
after this thread's request has been satisfied, then those permits
are assigned in turn to other threads trying to acquire permits.

<p>There is no requirement that a thread that releases a permit must
have acquired that permit by calling {@link Semaphore#acquire acquire}.
Correct usage of a semaphore is established by programming convention
in the application.

@param permits the number of permits to release
@throws IllegalArgumentException if {@code permits} is negative"
      end

      operation 1616539 "availablePermits"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current number of permits available in this semaphore.

<p>This method is typically used for debugging and testing purposes.

@return the number of permits available in this semaphore"
      end

      operation 1616667 "drainPermits"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Acquires and returns all permits that are immediately available.

@return the number of permits acquired"
      end

      operation 1616795 "reducePermits"
	protected explicit_return_type "void"
	nparams 1
	  param in name "reduction" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Shrinks the number of available permits by the indicated
reduction. This method can be useful in subclasses that use
semaphores to track resources that become unavailable. This
method differs from {@code acquire} in that it does not block
waiting for permits to become available.

@param reduction the number of permits to remove
@throws IllegalArgumentException if {@code reduction} is negative"
      end

      operation 1616923 "isFair"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns {@code true} if this semaphore has fairness set true.

@return {@code true} if this semaphore has fairness set true"
      end

      operation 1617051 "hasQueuedThreads"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Queries whether any threads are waiting to acquire. Note that
because cancellations may occur at any time, a {@code true}
return does not guarantee that any other thread will ever
acquire.  This method is designed primarily for use in
monitoring of the system state.

@return {@code true} if there may be other threads waiting to
        acquire the lock"
      end

      operation 1617179 "getQueueLength"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent final java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns an estimate of the number of threads waiting to acquire.
The value is only an estimate because the number of threads may
change dynamically while this method traverses internal data
structures.  This method is designed for use in monitoring of the
system state, not for synchronization control.

@return the estimated number of threads waiting for this lock"
      end

      operation 1617307 "getQueuedThreads"
	protected return_type class_ref 160667 // Collection
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<Thread> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a collection containing threads that may be waiting to acquire.
Because the actual set of threads may change dynamically while
constructing this result, the returned collection is only a best-effort
estimate.  The elements of the returned collection are in no particular
order.  This method is designed to facilitate construction of
subclasses that provide more extensive monitoring facilities.

@return the collection of threads"
      end

      operation 1617435 "toString"
	public return_type class_ref 3399692 // String
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a string identifying this semaphore, as well as its state.
The state, in brackets, includes the String {@code \"Permits =\"}
followed by the number of permits.

@return a string identifying this semaphore, as well as its state"
      end
    end

    class 271515 "SynchronousQueue"
      visibility public 
      nformals 1
      formal name "E" type "" explicit_default_value ""
        explicit_extends ""
      nactuals 2
      actual class class_ref 232859 // AbstractQueue
        rank 0 explicit_value ""
      actual class class_ref 254107 // BlockingQueue
        rank 0 explicit_value ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " BEGIN android-note
 removed link to collections framework docs
 END android-note

A {@linkplain BlockingQueue blocking queue} in which each insert
operation must wait for a corresponding remove operation by another
thread, and vice versa.  A synchronous queue does not have any
internal capacity, not even a capacity of one.  You cannot
<tt>peek</tt> at a synchronous queue because an element is only
present when you try to remove it; you cannot insert an element
(using any method) unless another thread is trying to remove it;
you cannot iterate as there is nothing to iterate.  The
<em>head</em> of the queue is the element that the first queued
inserting thread is trying to add to the queue; if there is no such
queued thread then no element is available for removal and
<tt>poll()</tt> will return <tt>null</tt>.  For purposes of other
<tt>Collection</tt> methods (for example <tt>contains</tt>), a
<tt>SynchronousQueue</tt> acts as an empty collection.  This queue
does not permit <tt>null</tt> elements.

<p>Synchronous queues are similar to rendezvous channels used in
CSP and Ada. They are well suited for handoff designs, in which an
object running in one thread must sync up with an object running
in another thread in order to hand it some information, event, or
task.

<p> This class supports an optional fairness policy for ordering
waiting producer and consumer threads.  By default, this ordering
is not guaranteed. However, a queue constructed with fairness set
to <tt>true</tt> grants threads access in FIFO order.

<p>This class and its iterator implement all of the
<em>optional</em> methods of the {@link Collection} and {@link
Iterator} interfaces.

@since 1.5
@author Doug Lea and Bill Scherer and Michael Scott
@param <E> the type of elements held in this collection"
      classrelation 459803 // <realization>
	relation 459803 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 459803 // <realization>
	  b parent class_ref 232859 // AbstractQueue
      end

      classrelation 459931 // <realization>
	relation 459931 -_-|>
	  stereotype "bind"
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 459931 // <realization>
	  b parent class_ref 254107 // BlockingQueue
      end

      classrelation 460059 // <realization>
	relation 460059 -_-|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 460059 // <realization>
	  b parent class_ref 128155 // Serializable
      end

      attribute 393627 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -3223113410248163686L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      class 271643 "Transferer"
	abstract visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	operation 1617563 "transfer"
	  abstract package return_type class_ref 3401484 // Object
	  nparams 3
	    param inout name "e" type class_ref 3401484 // Object
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Performs a put or take.

@param e if non-null, the item to be handed to a consumer;
         if null, requests that transfer return an item
         offered by producer.
@param timed if this operation should timeout
@param nanos the timeout, in nanoseconds
@return if non-null, the item provided or received; if null,
        the operation failed due to timeout or interrupt --
        the caller can distinguish which of these occurred
        by checking Thread.interrupted."
	end
      end

      attribute 393755 "NCPUS"
	class_attribute const_attribute package explicit_type "int"
	init_value " Runtime.getRuntime().availableProcessors()"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " The number of CPUs, for spin control "
      end

      attribute 393883 "maxTimedSpins"
	class_attribute const_attribute package explicit_type "int"
	init_value " (NCPUS < 2) ? 0 : 32"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times to spin before blocking in timed waits.
The value is empirically derived -- it works well across a
variety of processors and OSes. Empirically, the best value
seems not to vary with number of CPUs (beyond 2) so is just
a constant.
"
      end

      attribute 394011 "maxUntimedSpins"
	class_attribute const_attribute package explicit_type "int"
	init_value " maxTimedSpins * 16"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of times to spin before blocking in untimed waits.
This is greater than timed value because untimed waits spin
faster since they don't need to check times on each spin.
"
      end

      attribute 394139 "spinForTimeoutThreshold"
	class_attribute const_attribute package explicit_type "long"
	init_value " 1000L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The number of nanoseconds for which it is faster to spin
rather than to use timed park. A rough estimate suffices.
"
      end

      class 271771 "TransferStack"
	visibility package 
	nactuals 1
	actual class class_ref 271515 // SynchronousQueue
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 460187 // <generalisation>
	  relation 460187 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 460187 // <generalisation>
	    b parent class_ref 271643 // Transferer
	end

	attribute 394267 "REQUEST"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 0"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment "This extends Scherer-Scott dual stack algorithm, differing,
among other ways, by using \"covering\" nodes rather than
bit-marked pointers: Fulfilling operations push on marker
nodes (with FULFILLING bit set in mode) to reserve a spot
to match a waiting node.

 Modes for SNodes, ORed together in node fields 
 Node represents an unfulfilled consumer "
	end

	attribute 394395 "DATA"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 1"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Node represents an unfulfilled producer "
	end

	attribute 394523 "FULFILLING"
	  class_attribute const_attribute package explicit_type "int"
	  init_value " 2"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	  comment " Node is fulfilling another unfulfilled DATA or REQUEST "
	end

	operation 1617691 "isFulfilling"
	  class_operation package explicit_return_type "boolean"
	  nparams 1
	    param in name "m" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment " Return true if m has fulfilling bit set "
	end

	class 271899 "SNode"
	  visibility package 
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 460315 // next (<unidirectional association>)
	    relation 460315 --->
	      a role_name "next" volatile package
		comment " next node in stack"
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 460315 // next (<unidirectional association>)
	      b parent class_ref 271899 // SNode
	  end

	  classrelation 460443 // match (<unidirectional association>)
	    relation 460443 --->
	      a role_name "match" volatile package
		comment " the node matched to this"
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 460443 // match (<unidirectional association>)
	      b parent class_ref 271899 // SNode
	  end

	  classrelation 460571 // waiter (<unidirectional association>)
	    relation 460571 --->
	      a role_name "waiter" volatile package
		comment " to control park/unpark"
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 460571 // waiter (<unidirectional association>)
	      b parent class_ref 1201420 // Thread
	  end

	  classrelation 460699 // item (<unidirectional association>)
	    relation 460699 --->
	      a role_name "item" package
		comment " data; or null for REQUESTs"
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 460699 // item (<unidirectional association>)
	      b parent class_ref 3401484 // Object
	  end

	  attribute 394651 "mode"
	    package explicit_type "int"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  operation 1617819 "SNode"
	    package explicit_return_type ""
	    nparams 1
	      param inout name "item" type class_ref 3401484 // Object
	    cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	    cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment " Note: item and mode fields don't need to be volatile
 since they are always written before, and read after,
 other volatile/atomic operations."
	  end

	  operation 1617947 "casNext"
	    package explicit_return_type "boolean"
	    nparams 2
	      param inout name "cmp" type class_ref 271899 // SNode
	      param inout name "val" type class_ref 271899 // SNode
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1618075 "tryMatch"
	    package explicit_return_type "boolean"
	    nparams 1
	      param inout name "s" type class_ref 271899 // SNode
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "Tries to match node s to this node, if so, waking up thread.
Fulfillers call tryMatch to identify their waiters.
Waiters block until they have been matched.

@param s the node to match
@return true if successfully matched to s"
	  end

	  operation 1618203 "tryCancel"
	    package explicit_return_type "void"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "Tries to cancel a wait by matching node to itself."
	  end

	  operation 1618331 "isCancelled"
	    package explicit_return_type "boolean"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  classrelation 460827 // UNSAFE (<unidirectional association>)
	    relation 460827 --->
	      a role_name "UNSAFE" class_relation const_relation private
		comment " Unsafe mechanics
"
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 460827 // UNSAFE (<unidirectional association>)
	      b parent class_ref 255899 // Unsafe
	  end

	  attribute 394779 "matchOffset"
	    class_attribute const_attribute private explicit_type "long"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 394907 "nextOffset"
	    class_attribute const_attribute private explicit_type "long"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  extra_member 133659 "initialization"
	    
	    cpp "" ""
	    java "  static {
                try {
                    UNSAFE = sun.misc.Unsafe.getUnsafe();
                    Class<?> k = SNode.class;
                    matchOffset = UNSAFE.objectFieldOffset
                        (k.getDeclaredField(\"match\"));
                    nextOffset = UNSAFE.objectFieldOffset
                        (k.getDeclaredField(\"next\"));
                } catch (Exception e) {
                    throw new Error(e);
                }
            }"
	    php ""
	    python ""
	    idl ""
	  end
	end

	classrelation 460955 // head (<unidirectional association>)
	  relation 460955 --->
	    a role_name "head" volatile package
	      comment " The head (top) of the stack 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 460955 // head (<unidirectional association>)
	    b parent class_ref 271899 // SNode
	end

	operation 1618459 "casHead"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "h" type class_ref 271899 // SNode
	    param inout name "nh" type class_ref 271899 // SNode
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1618587 "snode"
	  class_operation package return_type class_ref 271899 // SNode
	  nparams 4
	    param inout name "s" type class_ref 271899 // SNode
	    param inout name "e" type class_ref 3401484 // Object
	    param inout name "next" type class_ref 271899 // SNode
	    param in name "mode" explicit_type "int"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Creates or resets fields of a node. Called only from transfer
where the node to push on stack is lazily created and
reused when possible to help reduce intervals between reads
and CASes of head and to avoid surges of garbage when CASes
to push nodes fail due to contention."
	end

	operation 1618715 "transfer"
	  package return_type class_ref 3401484 // Object
	  nparams 3
	    param inout name "e" type class_ref 3401484 // Object
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts or takes an item."
	end

	operation 1618843 "awaitFulfill"
	  package return_type class_ref 271899 // SNode
	  nparams 3
	    param inout name "s" type class_ref 271899 // SNode
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Spins/blocks until node s is matched by a fulfill operation.

@param s the waiting node
@param timed true if timed wait
@param nanos timeout value
@return matched node, or s if cancelled"
	end

	operation 1618971 "shouldSpin"
	  package explicit_return_type "boolean"
	  nparams 1
	    param inout name "s" type class_ref 271899 // SNode
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Returns true if node s is at head or there is an active
fulfiller."
	end

	operation 1619099 "clean"
	  package explicit_return_type "void"
	  nparams 1
	    param inout name "s" type class_ref 271899 // SNode
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Unlinks s from the stack."
	end

	classrelation 461083 // UNSAFE (<unidirectional association>)
	  relation 461083 --->
	    a role_name "UNSAFE" class_relation const_relation private
	      comment " Unsafe mechanics
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 461083 // UNSAFE (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 395035 "headOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	extra_member 133787 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = TransferStack.class;
                headOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"head\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	end
      end

      class 272027 "TransferQueue"
	visibility package 
	nactuals 1
	actual class class_ref 271515 // SynchronousQueue
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 461211 // <generalisation>
	  relation 461211 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 461211 // <generalisation>
	    b parent class_ref 271643 // Transferer
	end

	class 272155 "QNode"
	  visibility package 
	  cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	  final java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	  php_decl ""
	  python_2_2 python_decl ""
	  idl_decl ""
	  explicit_switch_type ""
	  
	  classrelation 461339 // next (<unidirectional association>)
	    relation 461339 --->
	      a role_name "next" volatile package
		comment " next node in queue"
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 461339 // next (<unidirectional association>)
	      b parent class_ref 272155 // QNode
	  end

	  classrelation 461467 // item (<unidirectional association>)
	    relation 461467 --->
	      a role_name "item" volatile package
		comment " CAS'ed to or from null"
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 461467 // item (<unidirectional association>)
	      b parent class_ref 3401484 // Object
	  end

	  classrelation 461595 // waiter (<unidirectional association>)
	    relation 461595 --->
	      a role_name "waiter" volatile package
		comment " to control park/unpark"
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 461595 // waiter (<unidirectional association>)
	      b parent class_ref 1201420 // Thread
	  end

	  attribute 395163 "isData"
	    const_attribute package explicit_type "boolean"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  operation 1619227 "QNode"
	    package explicit_return_type ""
	    nparams 2
	      param inout name "item" type class_ref 3401484 // Object
	      param inout name "isData" explicit_type "boolean"
	    cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	    cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1619355 "casNext"
	    package explicit_return_type "boolean"
	    nparams 2
	      param inout name "cmp" type class_ref 272155 // QNode
	      param inout name "val" type class_ref 272155 // QNode
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1619483 "casItem"
	    package explicit_return_type "boolean"
	    nparams 2
	      param inout name "cmp" type class_ref 3401484 // Object
	      param inout name "val" type class_ref 3401484 // Object
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1619611 "tryCancel"
	    package explicit_return_type "void"
	    nparams 1
	      param inout name "cmp" type class_ref 3401484 // Object
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "Tries to cancel by CAS'ing ref to this as item."
	  end

	  operation 1619739 "isCancelled"
	    package explicit_return_type "boolean"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	  end

	  operation 1619867 "isOffList"
	    package explicit_return_type "boolean"
	    nparams 0
	    cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	    cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	    preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	    
	    
	    
	    comment "Returns true if this node is known to be off the queue
because its next pointer has been forgotten due to
an advanceHead operation."
	  end

	  classrelation 461723 // UNSAFE (<unidirectional association>)
	    relation 461723 --->
	      a role_name "UNSAFE" class_relation const_relation private
		comment " Unsafe mechanics
"
		cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
		java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
		classrelation_ref 461723 // UNSAFE (<unidirectional association>)
	      b parent class_ref 255899 // Unsafe
	  end

	  attribute 395291 "itemOffset"
	    class_attribute const_attribute private explicit_type "long"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  attribute 395419 "nextOffset"
	    class_attribute const_attribute private explicit_type "long"
	    cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    php_decl ""
	    python_decl ""
	    idl_decl ""
	  end

	  extra_member 133915 "initialization"
	    
	    cpp "" ""
	    java "  static {
                try {
                    UNSAFE = sun.misc.Unsafe.getUnsafe();
                    Class<?> k = QNode.class;
                    itemOffset = UNSAFE.objectFieldOffset
                        (k.getDeclaredField(\"item\"));
                    nextOffset = UNSAFE.objectFieldOffset
                        (k.getDeclaredField(\"next\"));
                } catch (Exception e) {
                    throw new Error(e);
                }
            }"
	    php ""
	    python ""
	    idl ""
	  end
	end

	classrelation 461851 // head (<unidirectional association>)
	  relation 461851 --->
	    a role_name "head" volatile package
	      comment " Head of queue 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 461851 // head (<unidirectional association>)
	    b parent class_ref 272155 // QNode
	end

	classrelation 461979 // tail (<unidirectional association>)
	  relation 461979 --->
	    a role_name "tail" volatile package
	      comment " Tail of queue 
"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 461979 // tail (<unidirectional association>)
	    b parent class_ref 272155 // QNode
	end

	classrelation 462107 // cleanMe (<unidirectional association>)
	  relation 462107 --->
	    a role_name "cleanMe" volatile package
	      comment "
Reference to a cancelled node that might not yet have been
unlinked from queue because it was the last inserted node
when it cancelled.

"
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      transient
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 462107 // cleanMe (<unidirectional association>)
	    b parent class_ref 272155 // QNode
	end

	operation 1619995 "TransferQueue"
	  package explicit_return_type ""
	  nparams 0
	  cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	  cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1620123 "advanceHead"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "h" type class_ref 272155 // QNode
	    param inout name "nh" type class_ref 272155 // QNode
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to cas nh as new head; if successful, unlink
old head's next node to avoid garbage retention."
	end

	operation 1620251 "advanceTail"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "t" type class_ref 272155 // QNode
	    param inout name "nt" type class_ref 272155 // QNode
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to cas nt as new tail."
	end

	operation 1620379 "casCleanMe"
	  package explicit_return_type "boolean"
	  nparams 2
	    param inout name "cmp" type class_ref 272155 // QNode
	    param inout name "val" type class_ref 272155 // QNode
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Tries to CAS cleanMe slot."
	end

	operation 1620507 "transfer"
	  package return_type class_ref 3401484 // Object
	  nparams 3
	    param inout name "e" type class_ref 3401484 // Object
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Puts or takes an item."
	end

	operation 1620635 "awaitFulfill"
	  package return_type class_ref 3401484 // Object
	  nparams 4
	    param inout name "s" type class_ref 272155 // QNode
	    param inout name "e" type class_ref 3401484 // Object
	    param inout name "timed" explicit_type "boolean"
	    param in name "nanos" explicit_type "long"
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}, ${t3} ${p3}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Spins/blocks until node s is fulfilled.

@param s the waiting node
@param e the comparison value for checking match
@param timed true if timed wait
@param nanos timeout value
@return matched item, or s if cancelled"
	end

	operation 1620763 "clean"
	  package explicit_return_type "void"
	  nparams 2
	    param inout name "pred" type class_ref 272155 // QNode
	    param inout name "s" type class_ref 272155 // QNode
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	  comment "Gets rid of cancelled node s with original predecessor pred."
	end

	classrelation 462235 // UNSAFE (<unidirectional association>)
	  relation 462235 --->
	    a role_name "UNSAFE" class_relation const_relation private
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	      classrelation_ref 462235 // UNSAFE (<unidirectional association>)
	    b parent class_ref 255899 // Unsafe
	end

	attribute 395547 "headOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 395675 "tailOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	attribute 395803 "cleanMeOffset"
	  class_attribute const_attribute private explicit_type "long"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end

	extra_member 134043 "initialization"
	  
	  cpp "" ""
	  java "  static {
            try {
                UNSAFE = sun.misc.Unsafe.getUnsafe();
                Class<?> k = TransferQueue.class;
                headOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"head\"));
                tailOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"tail\"));
                cleanMeOffset = UNSAFE.objectFieldOffset
                    (k.getDeclaredField(\"cleanMe\"));
            } catch (Exception e) {
                throw new Error(e);
            }
        }"
	  php ""
	  python ""
	  idl ""
	end
      end

      classrelation 462363 // transferer (<unidirectional association>)
	relation 462363 --->
	  a role_name "transferer" volatile private
	    comment "
The transferer. Set only in constructor, but cannot be declared
as final without further complicating serialization.  Since
this is accessed only at most once per public method, there
isn't a noticeable performance penalty for using volatile
instead of final here.

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    transient
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 462363 // transferer (<unidirectional association>)
	  b parent class_ref 271643 // Transferer
      end

      operation 1620891 "SynchronousQueue"
	public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>SynchronousQueue</tt> with nonfair access policy."
      end

      operation 1621019 "SynchronousQueue"
	public explicit_return_type ""
	nparams 1
	  param inout name "fair" explicit_type "boolean"
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Creates a <tt>SynchronousQueue</tt> with the specified fairness policy.

@param fair if true, waiting threads contend in FIFO order for
       access; otherwise the order is unspecified."
      end

      operation 1621147 "put"
	public explicit_return_type "void"
	nparams 1
	  param inout name "o" explicit_type "E"
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Adds the specified element to this queue, waiting if necessary for
another thread to receive it.

@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}"
      end

      operation 1621275 "offer"
	public explicit_return_type "boolean"
	nparams 3
	  param inout name "o" explicit_type "E"
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, waiting if necessary
up to the specified wait time for another thread to receive it.

@return <tt>true</tt> if successful, or <tt>false</tt> if the
        specified waiting time elapses before a consumer appears.
@throws InterruptedException {@inheritDoc}
@throws NullPointerException {@inheritDoc}"
      end

      operation 1621403 "offer"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "e" explicit_type "E"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Inserts the specified element into this queue, if another thread is
waiting to receive it.

@param e the element to add
@return <tt>true</tt> if the element was added to this queue, else
        <tt>false</tt>
@throws NullPointerException if the specified element is null"
      end

      operation 1621531 "take"
	public explicit_return_type "E"
	nparams 0
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting if necessary
for another thread to insert it.

@return the head of this queue
@throws InterruptedException {@inheritDoc}"
      end

      operation 1621659 "poll"
	public explicit_return_type "E"
	nparams 2
	  param in name "timeout" explicit_type "long"
	  param inout name "unit" type class_ref 253211 // TimeUnit
	nexceptions 1
	  exception class_ref 155547 // InterruptedException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, waiting
if necessary up to the specified wait time, for another thread
to insert it.

@return the head of this queue, or <tt>null</tt> if the
        specified waiting time elapses before an element is present.
@throws InterruptedException {@inheritDoc}"
      end

      operation 1621787 "poll"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Retrieves and removes the head of this queue, if another thread
is currently making an element available.

@return the head of this queue, or <tt>null</tt> if no
        element is available."
      end

      operation 1621915 "isEmpty"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>true</tt>.
A <tt>SynchronousQueue</tt> has no internal capacity.

@return <tt>true</tt>"
      end

      operation 1622043 "size"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns zero.
A <tt>SynchronousQueue</tt> has no internal capacity.

@return zero."
      end

      operation 1622171 "remainingCapacity"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns zero.
A <tt>SynchronousQueue</tt> has no internal capacity.

@return zero."
      end

      operation 1622299 "clear"
	public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Does nothing.
A <tt>SynchronousQueue</tt> has no internal capacity."
      end

      operation 1622427 "contains"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>false</tt>.
A <tt>SynchronousQueue</tt> has no internal capacity.

@param o the element
@return <tt>false</tt>"
      end

      operation 1622555 "remove"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "o" type class_ref 3401484 // Object
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>false</tt>.
A <tt>SynchronousQueue</tt> has no internal capacity.

@param o the element to remove
@return <tt>false</tt>"
      end

      operation 1622683 "containsAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns <tt>false</tt> unless the given collection is empty.
A <tt>SynchronousQueue</tt> has no internal capacity.

@param c the collection
@return <tt>false</tt> unless given collection is empty"
      end

      operation 1622811 "removeAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>false</tt>.
A <tt>SynchronousQueue</tt> has no internal capacity.

@param c the collection
@return <tt>false</tt>"
      end

      operation 1622939 "retainAll"
	public explicit_return_type "boolean"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<?> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>false</tt>.
A <tt>SynchronousQueue</tt> has no internal capacity.

@param c the collection
@return <tt>false</tt>"
      end

      operation 1623067 "peek"
	public explicit_return_type "E"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Always returns <tt>null</tt>.
A <tt>SynchronousQueue</tt> does not return elements
unless actively waited on.

@return <tt>null</tt>"
      end

      operation 1623195 "iterator"
	public return_type class_ref 155803 // Iterator
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}<E> ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	java_annotation "@SuppressWarnings(\"unchecked\")
"
	
	
	
	comment "Returns an empty iterator in which <tt>hasNext</tt> always returns
<tt>false</tt>.

@return an empty iterator"
      end

      class 272283 "EmptyIterator"
	visibility private 
	nformals 1
	formal name "E" type "" explicit_default_value ""
	  explicit_extends ""
	nactuals 1
	actual class class_ref 155803 // Iterator
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 462491 // <realization>
	  relation 462491 -_-|>
	    stereotype "bind"
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 462491 // <realization>
	    b parent class_ref 155803 // Iterator
	end

	classrelation 462619 // EMPTY_ITERATOR (<unidirectional association>)
	  relation 462619 --->
	    a role_name "EMPTY_ITERATOR" init_value " new EmptyIterator<Object>()" class_relation const_relation package
	      cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	      java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<Object> ${name}${value};
"
	      classrelation_ref 462619 // EMPTY_ITERATOR (<unidirectional association>)
	    b parent class_ref 272283 // EmptyIterator
	end

	operation 1623323 "hasNext"
	  public explicit_return_type "boolean"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1623451 "next"
	  public explicit_return_type "E"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end

	operation 1623579 "remove"
	  public explicit_return_type "void"
	  nparams 0
	  cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	  cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	  preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	  
	  
	  
	end
      end

      operation 1623707 "toArray"
	public return_type class_ref 3401484 // Object
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type}[] ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a zero-length array.
@return a zero-length array"
      end

      operation 1623835 "toArray"
	public explicit_return_type "T"
	nparams 1
	  param inout name "a" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}<T> ${type}[] ${name}${(}${t0}[] ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Sets the zeroeth element of the specified array to <tt>null</tt>
(if the array has non-zero length) and returns it.

@param a the array
@return the specified array
@throws NullPointerException if the specified array is null"
      end

      operation 1623963 "drainTo"
	public explicit_return_type "int"
	nparams 1
	  param inout name "c" type class_ref 160667 // Collection
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      operation 1624091 "drainTo"
	public explicit_return_type "int"
	nparams 2
	  param inout name "c" type class_ref 160667 // Collection
	  param in name "maxElements" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0}<? super E> ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "@throws UnsupportedOperationException {@inheritDoc}
@throws ClassCastException            {@inheritDoc}
@throws NullPointerException          {@inheritDoc}
@throws IllegalArgumentException      {@inheritDoc}"
      end

      class 272411 "WaitQueue"
	visibility package 
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 462747 // <realization>
	  relation 462747 -_-|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 462747 // <realization>
	    b parent class_ref 128155 // Serializable
	end
      end

      class 272539 "LifoWaitQueue"
	visibility package 
	nactuals 1
	actual class class_ref 271515 // SynchronousQueue
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 462875 // <generalisation>
	  relation 462875 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 462875 // <generalisation>
	    b parent class_ref 272411 // WaitQueue
	end

	attribute 395931 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -3633113410248163686L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      class 272667 "FifoWaitQueue"
	visibility package 
	nactuals 1
	actual class class_ref 271515 // SynchronousQueue
	  rank 0 explicit_value ""
	cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
	classrelation 463003 // <generalisation>
	  relation 463003 ---|>
	    a public
	      cpp default "${type}"
	      java "${type}"
	      classrelation_ref 463003 // <generalisation>
	    b parent class_ref 272411 // WaitQueue
	end

	attribute 396059 "serialVersionUID"
	  class_attribute const_attribute private explicit_type "long"
	  init_value " -3623113410248163686L"
	  cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	  java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	  php_decl ""
	  python_decl ""
	  idl_decl ""
	end
      end

      classrelation 463131 // qlock (<unidirectional association>)
	relation 463131 --->
	  a role_name "qlock" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 463131 // qlock (<unidirectional association>)
	  b parent class_ref 254235 // ReentrantLock
      end

      classrelation 463259 // waitingProducers (<unidirectional association>)
	relation 463259 --->
	  a role_name "waitingProducers" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 463259 // waitingProducers (<unidirectional association>)
	  b parent class_ref 272411 // WaitQueue
      end

      classrelation 463387 // waitingConsumers (<unidirectional association>)
	relation 463387 --->
	  a role_name "waitingConsumers" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 463387 // waitingConsumers (<unidirectional association>)
	  b parent class_ref 272411 // WaitQueue
      end

      operation 1624219 "writeObject"
	private explicit_return_type "void"
	nparams 1
	  param inout name "s" type class_ref 128411 // ObjectOutputStream
	nexceptions 1
	  exception class_ref 128539 // IOException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Saves the state to a stream (that is, serializes it).

@param s the stream"
      end

      operation 1624347 "readObject"
	private explicit_return_type "void"
	nparams 1
	  param in name "s" type class_ref 128667 // ObjectInputStream
	nexceptions 2
	  exception class_ref 128539 // IOException
	  exception class_ref 128795 // ClassNotFoundException
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}final ${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1624475 "objectFieldOffset"
	class_operation package explicit_return_type "long"
	nparams 3
	  param inout name "UNSAFE" type class_ref 255899 // Unsafe
	  param inout name "field" type class_ref 3399692 // String
	  param inout name "klazz" type class_ref 3421708 // Class
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2}<?> ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Unsafe mechanics"
      end
    end

    class 272795 "ThreadLocalRandom"
      visibility public 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "A random number generator isolated to the current thread.  Like the
global {@link java.util.Random} generator used by the {@link
java.lang.Math} class, a {@code ThreadLocalRandom} is initialized
with an internally generated seed that may not otherwise be
modified. When applicable, use of {@code ThreadLocalRandom} rather
than shared {@code Random} objects in concurrent programs will
typically encounter much less overhead and contention.  Use of
{@code ThreadLocalRandom} is particularly appropriate when multiple
tasks (for example, each a {@link ForkJoinTask}) use random numbers
in parallel in thread pools.

<p>Usages of this class should typically be of the form:
{@code ThreadLocalRandom.current().nextX(...)} (where
{@code X} is {@code Int}, {@code Long}, etc).
When all usages are of this form, it is never possible to
accidently share a {@code ThreadLocalRandom} across multiple threads.

<p>This class also provides additional commonly used bounded random
generation methods.

@since 1.7
@hide
@author Doug Lea"
      classrelation 463515 // <generalisation>
	relation 463515 ---|>
	  a public
	    cpp default "${type}"
	    java "${type}"
	    classrelation_ref 463515 // <generalisation>
	  b parent class_ref 139803 // Random
      end

      attribute 396187 "multiplier"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0x5DEECE66DL"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " same constants as Random, but must be redeclared because private"
      end

      attribute 396315 "addend"
	class_attribute const_attribute private explicit_type "long"
	init_value " 0xBL"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 396443 "mask"
	class_attribute const_attribute private explicit_type "long"
	init_value " (1L << 48) - 1"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      attribute 396571 "rnd"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "The random seed. We can't use super.seed.
"
      end

      attribute 396699 "initialized"
	package explicit_type "boolean"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment "Initialization flag to permit calls to setSeed to succeed only
while executing the Random constructor.  We can't allow others
since it would cause setting seed in one part of a program to
unintentionally impact other usages by the thread.
"
      end

      attribute 396827 "pad0"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Padding to help avoid memory contention among seed updates in
 different TLRs in the common case that they are located near
 each other."
      end

      attribute 396955 "pad1"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Padding to help avoid memory contention among seed updates in
 different TLRs in the common case that they are located near
 each other."
      end

      attribute 397083 "pad2"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Padding to help avoid memory contention among seed updates in
 different TLRs in the common case that they are located near
 each other."
      end

      attribute 397211 "pad3"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Padding to help avoid memory contention among seed updates in
 different TLRs in the common case that they are located near
 each other."
      end

      attribute 397339 "pad4"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Padding to help avoid memory contention among seed updates in
 different TLRs in the common case that they are located near
 each other."
      end

      attribute 397467 "pad5"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Padding to help avoid memory contention among seed updates in
 different TLRs in the common case that they are located near
 each other."
      end

      attribute 397595 "pad6"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Padding to help avoid memory contention among seed updates in
 different TLRs in the common case that they are located near
 each other."
      end

      attribute 397723 "pad7"
	private explicit_type "long"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
	comment " Padding to help avoid memory contention among seed updates in
 different TLRs in the common case that they are located near
 each other."
      end

      classrelation 463643 // localRandom (<unidirectional association>)
	relation 463643 --->
	  a role_name "localRandom" init_value "
        new ThreadLocal<ThreadLocalRandom>() {
            protected ThreadLocalRandom initialValue() {
                return new ThreadLocalRandom();
            }
    }" class_relation const_relation private
	    comment "
The actual ThreadLocal

"
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type}<ThreadLocalRandom> ${name}${value};
"
	    classrelation_ref 463643 // localRandom (<unidirectional association>)
	  b parent class_ref 144539 // ThreadLocal
      end

      operation 1624603 "ThreadLocalRandom"
	package explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${name}${(}${)}${volatile}${throw};
"
	cpp_def "${comment}${inline}${class}::${name}${(}${)}${volatile}${throw} {
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${synchronized}${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Constructor called only by localRandom.initialValue."
      end

      operation 1624731 "current"
	class_operation public return_type class_ref 272795 // ThreadLocalRandom
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns the current thread's {@code ThreadLocalRandom}.

@return the current thread's {@code ThreadLocalRandom}"
      end

      operation 1624859 "setSeed"
	public explicit_return_type "void"
	nparams 1
	  param in name "seed" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Throws {@code UnsupportedOperationException}.  Setting seeds in
this generator is not supported.

@throws UnsupportedOperationException always"
      end

      operation 1624987 "next"
	protected explicit_return_type "int"
	nparams 1
	  param in name "bits" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 1625115 "nextInt"
	public explicit_return_type "int"
	nparams 2
	  param in name "least" explicit_type "int"
	  param in name "bound" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom, uniformly distributed value between the
given least value (inclusive) and bound (exclusive).

@param least the least value returned
@param bound the upper bound (exclusive)
@throws IllegalArgumentException if least greater than or equal
to bound
@return the next value"
      end

      operation 1625243 "nextLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "n" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom, uniformly distributed value
between 0 (inclusive) and the specified value (exclusive).

@param n the bound on the random number to be returned.  Must be
       positive.
@return the next value
@throws IllegalArgumentException if n is not positive"
      end

      operation 1625371 "nextLong"
	public explicit_return_type "long"
	nparams 2
	  param in name "least" explicit_type "long"
	  param in name "bound" explicit_type "long"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom, uniformly distributed value between the
given least value (inclusive) and bound (exclusive).

@param least the least value returned
@param bound the upper bound (exclusive)
@return the next value
@throws IllegalArgumentException if least greater than or equal
to bound"
      end

      operation 1625499 "nextDouble"
	public explicit_return_type "double"
	nparams 1
	  param in name "n" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom, uniformly distributed {@code double} value
between 0 (inclusive) and the specified value (exclusive).

@param n the bound on the random number to be returned.  Must be
       positive.
@return the next value
@throws IllegalArgumentException if n is not positive"
      end

      operation 1625627 "nextDouble"
	public explicit_return_type "double"
	nparams 2
	  param in name "least" explicit_type "double"
	  param in name "bound" explicit_type "double"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	preserve_java_body_indent java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Returns a pseudorandom, uniformly distributed value between the
given least value (inclusive) and bound (exclusive).

@param least the least value returned
@param bound the upper bound (exclusive)
@return the next value
@throws IllegalArgumentException if least greater than or equal
to bound"
      end

      attribute 397851 "serialVersionUID"
	class_attribute const_attribute private explicit_type "long"
	init_value " -5851777807851030925L"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end
    end
  end

  deploymentview 131355 "concurrent"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 223387 "Executor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 253083 // Executor
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 223515 "ExecutorService"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.List;
import java.util.Collection;
${definition}"
      associated_classes
	class_ref 252955 // ExecutorService
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 223643 "AbstractExecutorService"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_classes
	class_ref 252827 // AbstractExecutorService
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 223771 "BlockingQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.Queue;
${definition}"
      associated_classes
	class_ref 254107 // BlockingQueue
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 223899 "ArrayBlockingQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.AbstractQueue;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.lang.ref.WeakReference;
${definition}"
      associated_classes
	class_ref 253979 // ArrayBlockingQueue
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 224027 "BlockingDeque"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_classes
	class_ref 254875 // BlockingDeque
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 224155 "BrokenBarrierException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 255003 // BrokenBarrierException
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 224283 "Callable"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 253467 // Callable
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 224411 "CancellationException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 255131 // CancellationException
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 224539 "CompletionService"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 255259 // CompletionService
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 224667 "ConcurrentMap"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Map;
${definition}"
      associated_classes
	class_ref 255515 // ConcurrentMap
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 225435 "ConcurrentHashMap"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
import java.util.*;
import java.io.Serializable;
${definition}"
      associated_classes
	class_ref 255387 // ConcurrentHashMap
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 225563 "ConcurrentLinkedDeque"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.AbstractCollection;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Deque;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Queue;
${definition}"
      associated_classes
	class_ref 258075 // ConcurrentLinkedDeque
      end
      comment "Written by Doug Lea and Martin Buchholz with assistance from members of
JCP JSR-166 Expert Group and released to the public domain, as explained
at http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 225691 "ConcurrentLinkedQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.AbstractQueue;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Queue;
${definition}"
      associated_classes
	class_ref 258715 // ConcurrentLinkedQueue
      end
      comment "Written by Doug Lea and Martin Buchholz with assistance from members of
JCP JSR-166 Expert Group and released to the public domain, as explained
at http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 225819 "ConcurrentNavigableMap"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_classes
	class_ref 259099 // ConcurrentNavigableMap
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 225947 "ConcurrentSkipListMap"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_classes
	class_ref 259227 // ConcurrentSkipListMap
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 226075 "ConcurrentSkipListSet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_classes
	class_ref 261403 // ConcurrentSkipListSet
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 226203 "CopyOnWriteArrayList"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.AbstractList;
import java.util.Arrays;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.RandomAccess;
import libcore.util.EmptyArray;
import libcore.util.Objects;
${definition}"
      associated_classes
	class_ref 261531 // CopyOnWriteArrayList
      end
      comment "Copyright (C) 2010 The Android Open Source Project

Licensed under the Apache License, Version 2.0 (the \"License\");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an \"AS IS\" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License."
    end

    artifact 226331 "CopyOnWriteArraySet"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.*;
${definition}"
      associated_classes
	class_ref 262043 // CopyOnWriteArraySet
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 226459 "CountDownLatch"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
${definition}"
      associated_classes
	class_ref 262171 // CountDownLatch
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 226587 "CyclicBarrier"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
${definition}"
      associated_classes
	class_ref 262427 // CyclicBarrier
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 226715 "Delayed"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 262683 // Delayed
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 226843 "DelayQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.*;
import static java.util.concurrent.TimeUnit.NANOSECONDS;
${definition}"
      associated_classes
	class_ref 262811 // DelayQueue
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 227099 "Exchanger"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.*;
import java.util.concurrent.locks.LockSupport;
${definition}"
      associated_classes
	class_ref 263067 // Exchanger
      end
      comment "Written by Doug Lea, Bill Scherer, and Michael Scott with
assistance from members of JCP JSR-166 Expert Group and released to
the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 227227 "ExecutionException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 253595 // ExecutionException
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 227355 "Future"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 253339 // Future
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 227483 "RunnableFuture"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 253851 // RunnableFuture
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 227611 "FutureTask"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.LockSupport;
${definition}"
      associated_classes
	class_ref 263835 // FutureTask
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 227739 "ExecutorCompletionService"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 263579 // ExecutorCompletionService
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 227867 "ThreadFactory"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 264219 // ThreadFactory
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 227995 "ScheduledExecutorService"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 264347 // ScheduledExecutorService
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 228123 "Executors"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.security.AccessControlContext;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.security.PrivilegedExceptionAction;
import java.security.PrivilegedActionException;
${definition}"
      associated_classes
	class_ref 264091 // Executors
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 228251 "ForkJoinTask"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.io.Serializable;
import java.util.Collection;
import java.util.List;
import java.util.RandomAccess;
import java.lang.ref.WeakReference;
import java.lang.ref.ReferenceQueue;
import java.util.concurrent.Callable;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.RunnableFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.locks.ReentrantLock;
import java.lang.reflect.Constructor;
import libcore.util.SneakyThrow;
${definition}"
      associated_classes
	class_ref 266139 // ForkJoinTask
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 228379 "RecursiveAction"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 266523 // RecursiveAction
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 228507 "ForkJoinPool"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.concurrent.AbstractExecutorService;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Future;
import java.util.concurrent.RejectedExecutionException;
import java.util.concurrent.RunnableFuture;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.LockSupport;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Condition;
import libcore.util.SneakyThrow;
${definition}"
      associated_classes
	class_ref 265627 // ForkJoinPool
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 228635 "ForkJoinWorkerThread"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Collection;
import java.util.concurrent.RejectedExecutionException;
import libcore.util.SneakyThrow;
${definition}"
      associated_classes
	class_ref 265883 // ForkJoinWorkerThread
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 228763 "LinkedBlockingDeque"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.AbstractQueue;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
${definition}"
      associated_classes
	class_ref 267035 // LinkedBlockingDeque
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 228891 "LinkedBlockingQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.AbstractQueue;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
${definition}"
      associated_classes
	class_ref 267675 // LinkedBlockingQueue
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 229019 "TransferQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 268187 // TransferQueue
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 229147 "LinkedTransferQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.AbstractQueue;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Queue;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.LockSupport;
${definition}"
      associated_classes
	class_ref 268059 // LinkedTransferQueue
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 229275 "Phaser"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.LockSupport;
${definition}"
      associated_classes
	class_ref 268571 // Phaser
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 229403 "PriorityBlockingQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 268827 // PriorityBlockingQueue
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 229531 "RecursiveTask"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 269083 // RecursiveTask
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 229659 "RejectedExecutionException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 269211 // RejectedExecutionException
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 229787 "RejectedExecutionHandler"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 269339 // RejectedExecutionHandler
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 229915 "ScheduledFuture"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 265499 // ScheduledFuture
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 230043 "RunnableScheduledFuture"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 269595 // RunnableScheduledFuture
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 230171 "ThreadPoolExecutor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
import java.util.concurrent.atomic.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 269467 // ThreadPoolExecutor
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 230299 "ScheduledThreadPoolExecutor"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;
import java.util.*;
${definition}"
      associated_classes
	class_ref 269723 // ScheduledThreadPoolExecutor
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 230427 "Semaphore"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.*;
import java.util.concurrent.locks.*;
${definition}"
      associated_classes
	class_ref 271003 // Semaphore
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 230555 "SynchronousQueue"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.concurrent.locks.*;
import java.util.*;
${definition}"
      associated_classes
	class_ref 271515 // SynchronousQueue
      end
      comment "Written by Doug Lea, Bill Scherer, and Michael Scott with
assistance from members of JCP JSR-166 Expert Group and released to
the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 230683 "ThreadLocalRandom"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import java.util.Random;
${definition}"
      associated_classes
	class_ref 272795 // ThreadLocalRandom
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 230811 "TimeoutException"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 253723 // TimeoutException
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end

    artifact 230939 "TimeUnit"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 253211 // TimeUnit
      end
      comment "Written by Doug Lea with assistance from members of JCP JSR-166
Expert Group and released to the public domain, as explained at
http://creativecommons.org/publicdomain/zero/1.0/"
    end
  end

  package_ref 133787 // locks
end
