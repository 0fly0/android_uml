class HighRegisterPrefix
!!!14918412.java!!!	HighRegisterPrefix(inout position : SourcePosition, inout registers : RegisterSpecList)
        super(position, registers);

        if (registers.size() == 0) {
            throw new IllegalArgumentException("registers.size() == 0");
        }

        insns = null;
!!!14918540.java!!!	codeSize() : int
        int result = 0;

        calculateInsnsIfNecessary();

        for (SimpleInsn insn : insns) {
            result += insn.codeSize();
        }

        return result;
!!!14918668.java!!!	writeTo(inout out : AnnotatedOutput) : void
        calculateInsnsIfNecessary();

        for (SimpleInsn insn : insns) {
            insn.writeTo(out);
        }
!!!14918796.java!!!	calculateInsnsIfNecessary() : void
        if (insns != null) {
            return;
        }

        RegisterSpecList registers = getRegisters();
        int sz = registers.size();

        insns = new SimpleInsn[sz];

        for (int i = 0, outAt = 0; i < sz; i++) {
            RegisterSpec src = registers.get(i);
            insns[i] = moveInsnFor(src, outAt);
            outAt += src.getCategory();
        }
!!!14918924.java!!!	withRegisters(inout registers : RegisterSpecList) : DalvInsn
        return new HighRegisterPrefix(getPosition(), registers);
!!!14919052.java!!!	argString() : String
        return null;
!!!14919180.java!!!	listingString0(inout noteIndices : boolean) : String
        RegisterSpecList registers = getRegisters();
        int sz = registers.size();
        StringBuffer sb = new StringBuffer(100);

        for (int i = 0, outAt = 0; i < sz; i++) {
            RegisterSpec src = registers.get(i);
            SimpleInsn insn = moveInsnFor(src, outAt);

            if (i != 0) {
                sb.append('\n');
            }

            sb.append(insn.listingString0(noteIndices));

            outAt += src.getCategory();
        }

        return sb.toString();
!!!14919308.java!!!	moveInsnFor(inout src : RegisterSpec, in destIndex : int) : SimpleInsn
        return DalvInsn.makeMove(SourcePosition.NO_INFO,
                RegisterSpec.make(destIndex, src.getType()),
                src);
