format 74
"cdm" // vendor::tv::chrome::plugins::drmserver_adapter::jni::cdm
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  cpp_h_dir "/home/shchen/work/jellybean/vendor/tv/chrome/plugins/drmserver_adapter/jni/cdm/"
  cpp_src_dir "/home/shchen/work/jellybean/vendor/tv/chrome/plugins/drmserver_adapter/jni/cdm/"
  classview 261900 "cdm"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 2345996 "uint32_t"
      visibility package stereotype "typedef" explicit_base_type "unsigned int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* This value represents a guaranteed unsigned 32 bit integer. "
    end

    class 2347532 "uint8_t"
      visibility package stereotype "typedef" explicit_base_type "unsigned char"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* This value represents a guaranteed unsigned 8 bit integer. "
    end

    class 2409996 "int32_t"
      visibility package stereotype "typedef" explicit_base_type "int"
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "* This value represents a guaranteed signed 32 bit integer. "
    end

    class 2603788 "int64_t"
      visibility package stereotype "typedef" base_type class_ref 2677516 // __int64
      cpp_decl "${comment}typedef ${type} ${name};
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      classrelation 5180556 // <dependency>
	relation 5180428 -_->
	  a default
	    cpp default "#include in source"
	    classrelation_ref 5180556 // <dependency>
	  b parent class_ref 2677516 // __int64
      end
    end

    class 2734476 "linked_ptr_internal"
      visibility package 
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " This is used internally by all instances of linked_ptr<>.  It needs to be
 a non-template class because different types of linked_ptr<> can refer to
 the same object (linked_ptr<Superclass>(obj) vs linked_ptr<Subclass>(obj)).
 So, it needs to be possible for different types of linked_ptr to participate
 in the same circular linked list, so we need a single class type here.

 DO NOT USE THIS CLASS DIRECTLY YOURSELF.  Use linked_ptr<T>."
      operation 11370764 "join_new"
	cpp_inline public explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    next_ = this;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Create a new circle that includes only this instance."
      end

      operation 11370892 "join"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param in name "ptr" type class_ref 2734476 // linked_ptr_internal
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    next_ = ptr->next_;
    ptr->next_ = this;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Join an existing circle."
      end

      operation 11371020 "depart"
	cpp_inline public return_type class_ref 2322828 // bool
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    if (next_ == this) return true;
    linked_ptr_internal const* p = next_;
    while (p->next_ != this) p = p->next_;
    p->next_ = next_;
    return false;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Leave whatever circle we're part of.  Returns true iff we were the
 last member of the circle.  Once this is done, you can join() another."
      end

      classrelation 5180044 // next_ (<unidirectional association>)
	relation 5179916 --->
	  a role_name "next_" const_relation private
	    cpp mutable default "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5180044 // next_ (<unidirectional association>)
	  b parent class_ref 2734476 // linked_ptr_internal
      end
    end

    class 2734604 "linked_ptr"
      visibility package 
      nformals 1
      formal name "T" type "typename" explicit_default_value ""
        explicit_extends ""
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      class 2734732 "element_type"
	visibility package stereotype "typedef" explicit_base_type "T"
	cpp_decl "${comment}typedef ${type} ${name};
"
	java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
	php_decl ""
	python_2_2 python_decl ""
	idl_decl ""
	explicit_switch_type ""
	
      end

      operation 11371148 "linked_ptr"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param inout name "ptr" explicit_type "T"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${inline}explicit ${name}${(}${t0} * ${p0}${v0}${)}${volatile}${throw} { capture(ptr); };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Take over ownership of a raw pointer.  This should happen as soon as
 possible after the object is created."
      end

      operation 11371276 "~linked_ptr"
	cpp_inline public explicit_return_type ""
	nparams 0
	cpp_decl "    ${comment}${inline}${virtual}${name}${(}${)}${volatile}${throw} { depart(); };
"
	
	
	
	
      end

      operation 11371404 "linked_ptr"
	stereotype "template"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "ptr" explicit_type "linked_ptr<U>"
	cpp_decl "    ${comment}template<typename U>
  ${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} { copy(&ptr); };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
	comment " Copy an existing linked_ptr<>, adding ourselves to the list of references."
      end

      operation 11371532 "linked_ptr"
	cpp_inline public explicit_return_type ""
	nparams 1
	  param in name "ptr" type class_ref 2734604 // linked_ptr
	cpp_decl "    ${comment}${inline}${name}${(}const ${t0} & ${p0}${v0}${)}${volatile}${throw} {
    PP_DCHECK(&ptr != this);
    copy(&ptr);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${synchronized}${name}${(}${)}${throws} {
  ${body}}
"
	
	
	
      end

      operation 11371660 "operator ="
	stereotype "template"
	cpp_inline public return_type class_ref 2734604 // linked_ptr
	nparams 1
	  param in name "ptr" explicit_type "linked_ptr<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    depart();
    copy(&ptr);
    return *this;
  };
"
	
	
	
	
	comment " Assignment releases the old value and acquires the new."
      end

      operation 11371788 "operator ="
	cpp_inline public return_type class_ref 2734604 // linked_ptr
	nparams 1
	  param in name "ptr" type class_ref 2734604 // linked_ptr
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    if (&ptr != this) {
      depart();
      copy(&ptr);
    }
    return *this;
  };
"
	
	
	
	
      end

      operation 11371916 "reset"
	cpp_inline public explicit_return_type "void"
	nparams 1
	  param inout name "ptr" explicit_type "T"
	    defaultvalue "NULL"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    depart();
    capture(ptr);
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Smart pointer members."
      end

      operation 11372044 "get"
	const cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return value_; };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11372172 "operator ->"
	const cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} { return value_; };
"
	
	
	
	
      end

      operation 11372300 "operator *"
	const cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} & ${name}${(}${)}${const}${volatile}${throw}${abstract} { return *value_; };
"
	
	
	
	
      end

      operation 11372428 "release"
	cpp_inline public explicit_return_type "T"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} * ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    bool last = link_.depart();
    PP_DCHECK(last);
    (void)last;
    T* v = value_;
    value_ = NULL;
    return v;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment " Release ownership of the pointed object and returns it.
 Sole ownership by this linked_ptr object is required."
      end

      operation 11372556 "operator =="
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "p" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return value_ == p; };
"
	
	
	
	
      end

      operation 11372684 "operator !="
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "p" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} { return value_ != p; };
"
	
	
	
	
      end

      operation 11372812 "operator =="
	stereotype "template"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "ptr" explicit_type "linked_ptr<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return value_ == ptr.get();
  };
"
	
	
	
	
      end

      operation 11372940 "operator !="
	stereotype "template"
	const cpp_inline public return_type class_ref 2322828 // bool
	nparams 1
	  param in name "ptr" explicit_type "linked_ptr<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} & ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    return value_ != ptr.get();
  };
"
	
	
	
	
      end

      classrelation 5180172 // <dependency>
	relation 5180044 -_->
	  stereotype "friend"
	  a default
	    cpp default "Generated"
	    classrelation_ref 5180172 // <dependency>
	  b parent class_ref 2734604 // linked_ptr
      end

      attribute 9868940 "value_"
	private explicit_type "T"
	cpp_decl "    ${comment}${static}${mutable}${volatile}${const}${type} * ${name}${value};
"
	java_decl "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	php_decl ""
	python_decl ""
	idl_decl ""
      end

      classrelation 5180300 // link_ (<directional composition>)
	relation 5180172 *-->
	  a role_name "link_" private
	    cpp default "    ${comment}${static}${mutable}${volatile}${const}${type} ${name}${value};
"
	    java "  ${comment}${@}${visibility}${static}${final}${transient}${volatile}${type} ${name}${value};
"
	    classrelation_ref 5180300 // link_ (<directional composition>)
	  b parent class_ref 2734476 // linked_ptr_internal
      end

      operation 11373068 "depart"
	cpp_inline private explicit_return_type "void"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract} {
    if (link_.depart()) delete value_;
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11373196 "capture"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param inout name "ptr" explicit_type "T"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    value_ = ptr;
    link_.join_new();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end

      operation 11373324 "copy"
	stereotype "template"
	cpp_inline private explicit_return_type "void"
	nparams 1
	  param in name "ptr" explicit_type "linked_ptr<U>"
	cpp_decl "    ${comment}template<typename U>
  ${friend}${static}${inline}${virtual}${type} ${name}${(}const ${t0} * ${p0}${v0}${)}${const}${volatile}${throw}${abstract} {
    value_ = ptr->get();
    if (value_)
      link_.join(&ptr->link_);
    else
      link_.join_new();
  };
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
      end
    end

    class 2736268 "GetCdmHostFunc"
      visibility package stereotype "typedef" explicit_base_type "void"
      cpp_decl "${comment}typedef ${type}* (* ${name})(int host_interface_version, void* user_data);
"
      java_decl "${comment}${@}${visibility}${final}${abstract}class ${name}${extends}${implements} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment " Returns a pointer to the requested CDM Host interface upon success.
 Returns NULL if the requested CDM Host interface is not supported.
 The caller should cast the returned pointer to the type matching
 |host_interface_version|."
    end
  end

  deploymentview 260236 "cdm"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1032972 "linked_ptr"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2734476 // linked_ptr_internal
	class_ref 2734604 // linked_ptr
      end
    end

    artifact 1033228 "content_decryption_module"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 2347532 // uint8_t
	class_ref 2345996 // uint32_t
	class_ref 2409996 // int32_t
	class_ref 2603788 // int64_t
	class_ref 2736268 // GetCdmHostFunc
      end
    end
  end

  package_ref 314764 // cdm
end
