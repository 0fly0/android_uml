class Path_Delegate
!!!9446412.java!!!	getDelegate(in nPath : int) : Path_Delegate
        return sManager.getDelegate(nPath);
!!!9446540.java!!!	getJavaShape() : Shape
        return mPath;
!!!9446668.java!!!	setJavaShape(inout shape : Shape) : void
        mPath.reset();
        mPath.append(shape, false /*connect*/);
!!!9446796.java!!!	reset() : void
        mPath.reset();
!!!9446924.java!!!	setPathIterator(inout iterator : PathIterator) : void
        mPath.reset();
        mPath.append(iterator, false /*connect*/);
!!!9447052.java!!!	init1() : int
        // create the delegate
        Path_Delegate newDelegate = new Path_Delegate();

        return sManager.addNewDelegate(newDelegate);
!!!9447180.java!!!	init2(in nPath : int) : int
        // create the delegate
        Path_Delegate newDelegate = new Path_Delegate();

        // get the delegate to copy, which could be null if nPath is 0
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate != null) {
            newDelegate.set(pathDelegate);
        }

        return sManager.addNewDelegate(newDelegate);
!!!9447308.java!!!	native_reset(in nPath : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.mPath.reset();
!!!9447436.java!!!	native_rewind(in nPath : int) : void
        // call out to reset since there's nothing to optimize in
        // terms of data structs.
        native_reset(nPath);
!!!9447564.java!!!	native_set(in native_dst : int, in native_src : int) : void
        Path_Delegate pathDstDelegate = sManager.getDelegate(native_dst);
        if (pathDstDelegate == null) {
            return;
        }

        Path_Delegate pathSrcDelegate = sManager.getDelegate(native_src);
        if (pathSrcDelegate == null) {
            return;
        }

        pathDstDelegate.set(pathSrcDelegate);
!!!9447692.java!!!	native_getFillType(in nPath : int) : int
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return 0;
        }

        return pathDelegate.mFillType.nativeInt;
!!!9447820.java!!!	native_setFillType(in nPath : int, in ft : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.mFillType = Path.sFillTypeArray[ft];
!!!9447948.java!!!	native_isEmpty(in nPath : int) : boolean
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return true;
        }

        return pathDelegate.isEmpty();
!!!9448076.java!!!	native_isRect(in nPath : int, inout rect : RectF) : boolean
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return false;
        }

        // create an Area that can test if the path is a rect
        Area area = new Area(pathDelegate.mPath);
        if (area.isRectangular()) {
            if (rect != null) {
                pathDelegate.fillBounds(rect);
            }

            return true;
        }

        return false;
!!!9448204.java!!!	native_computeBounds(in nPath : int, inout bounds : RectF) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.fillBounds(bounds);
!!!9448332.java!!!	native_incReserve(in nPath : int, in extraPtCount : int) : void
        // since we use a java2D path, there's no way to pre-allocate new points,
        // so we do nothing.
!!!9448460.java!!!	native_moveTo(in nPath : int, in x : float, in y : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.moveTo(x, y);
!!!9448588.java!!!	native_rMoveTo(in nPath : int, in dx : float, in dy : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.rMoveTo(dx, dy);
!!!9448716.java!!!	native_lineTo(in nPath : int, in x : float, in y : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.lineTo(x, y);
!!!9448844.java!!!	native_rLineTo(in nPath : int, in dx : float, in dy : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.rLineTo(dx, dy);
!!!9448972.java!!!	native_quadTo(in nPath : int, in x1 : float, in y1 : float, in x2 : float, in y2 : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.quadTo(x1, y1, x2, y2);
!!!9449100.java!!!	native_rQuadTo(in nPath : int, in dx1 : float, in dy1 : float, in dx2 : float, in dy2 : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.rQuadTo(dx1, dy1, dx2, dy2);
!!!9449228.java!!!	native_cubicTo(in nPath : int, in x1 : float, in y1 : float, in x2 : float, in y2 : float, in x3 : float, in y3 : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.cubicTo(x1, y1, x2, y2, x3, y3);
!!!9449356.java!!!	native_rCubicTo(in nPath : int, in x1 : float, in y1 : float, in x2 : float, in y2 : float, in x3 : float, in y3 : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.rCubicTo(x1, y1, x2, y2, x3, y3);
!!!9449484.java!!!	native_arcTo(in nPath : int, inout oval : RectF, in startAngle : float, in sweepAngle : float, inout forceMoveTo : boolean) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.arcTo(oval, startAngle, sweepAngle, forceMoveTo);
!!!9449612.java!!!	native_close(in nPath : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.close();
!!!9449740.java!!!	native_addRect(in nPath : int, inout rect : RectF, in dir : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.addRect(rect.left, rect.top, rect.right, rect.bottom, dir);
!!!9449868.java!!!	native_addRect(in nPath : int, in left : float, in top : float, in right : float, in bottom : float, in dir : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.addRect(left, top, right, bottom, dir);
!!!9449996.java!!!	native_addOval(in nPath : int, inout oval : RectF, in dir : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.mPath.append(new Ellipse2D.Float(
                oval.left, oval.top, oval.width(), oval.height()), false);
!!!9450124.java!!!	native_addCircle(in nPath : int, in x : float, in y : float, in radius : float, in dir : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        // because x/y is the center of the circle, need to offset this by the radius
        pathDelegate.mPath.append(new Ellipse2D.Float(
                x - radius, y - radius, radius * 2, radius * 2), false);
!!!9450252.java!!!	native_addArc(in nPath : int, inout oval : RectF, in startAngle : float, in sweepAngle : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        // because x/y is the center of the circle, need to offset this by the radius
        pathDelegate.mPath.append(new Arc2D.Float(
                oval.left, oval.top, oval.width(), oval.height(),
                -startAngle, -sweepAngle, Arc2D.OPEN), false);
!!!9450380.java!!!	native_addRoundRect(in nPath : int, inout rect : RectF, in rx : float, in ry : float, in dir : int) : void

        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.mPath.append(new RoundRectangle2D.Float(
                rect.left, rect.top, rect.width(), rect.height(), rx * 2, ry * 2), false);
!!!9450508.java!!!	native_addRoundRect(in nPath : int, inout rect : RectF, inout radii : float, in dir : int) : void
        // Java2D doesn't support different rounded corners in each corner, so just use the
        // first value.
        native_addRoundRect(nPath, rect, radii[0], radii[1], dir);

        // there can be a case where this API is used but with similar values for all corners, so
        // in that case we don't warn.
        // we only care if 2 corners are different so just compare to the next one.
        for (int i = 0 ; i < 3 ; i++) {
            if (radii[i * 2] != radii[(i + 1) * 2] || radii[i * 2 + 1] != radii[(i + 1) * 2 + 1]) {
                Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                        "Different corner sizes are not supported in Path.addRoundRect.",
                        null, null /*data*/);
                break;
            }
        }
!!!9450636.java!!!	native_addPath(in nPath : int, in src : int, in dx : float, in dy : float) : void
        addPath(nPath, src, AffineTransform.getTranslateInstance(dx, dy));
!!!9450764.java!!!	native_addPath(in nPath : int, in src : int) : void
        addPath(nPath, src, null /*transform*/);
!!!9450892.java!!!	native_addPath(in nPath : int, in src : int, in matrix : int) : void
        Matrix_Delegate matrixDelegate = Matrix_Delegate.getDelegate(matrix);
        if (matrixDelegate == null) {
            return;
        }

        addPath(nPath, src, matrixDelegate.getAffineTransform());
!!!9451020.java!!!	native_offset(in nPath : int, in dx : float, in dy : float, in dst_path : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        // could be null if the int is 0;
        Path_Delegate dstDelegate = sManager.getDelegate(dst_path);

        pathDelegate.offset(dx, dy, dstDelegate);
!!!9451148.java!!!	native_offset(in nPath : int, in dx : float, in dy : float) : void
        native_offset(nPath, dx, dy, 0);
!!!9451276.java!!!	native_setLastPoint(in nPath : int, in dx : float, in dy : float) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        pathDelegate.mLastX = dx;
        pathDelegate.mLastY = dy;
!!!9451404.java!!!	native_transform(in nPath : int, in matrix : int, in dst_path : int) : void
        Path_Delegate pathDelegate = sManager.getDelegate(nPath);
        if (pathDelegate == null) {
            return;
        }

        Matrix_Delegate matrixDelegate = Matrix_Delegate.getDelegate(matrix);
        if (matrixDelegate == null) {
            return;
        }

        // this can be null if dst_path is 0
        Path_Delegate dstDelegate = sManager.getDelegate(dst_path);

        pathDelegate.transform(matrixDelegate, dstDelegate);
!!!9451532.java!!!	native_transform(in nPath : int, in matrix : int) : void
        native_transform(nPath, matrix, 0);
!!!9451660.java!!!	finalizer(in nPath : int) : void
        sManager.removeJavaReferenceFor(nPath);
!!!9451788.java!!!	set(inout delegate : Path_Delegate) : void
        mPath.reset();
        setFillType(delegate.mFillType);
        mPath.append(delegate.mPath, false /*connect*/);
!!!9451916.java!!!	setFillType(inout fillType : FillType) : void
        mFillType = fillType;
        mPath.setWindingRule(getWindingRule(fillType));
!!!9452044.java!!!	getWindingRule(inout type : FillType) : int
        switch (type) {
            case WINDING:
            case INVERSE_WINDING:
                return GeneralPath.WIND_NON_ZERO;
            case EVEN_ODD:
            case INVERSE_EVEN_ODD:
                return GeneralPath.WIND_EVEN_ODD;
        }

        assert false;
        throw new IllegalArgumentException();
!!!9452172.java!!!	getDirection(in direction : int) : Direction
        for (Direction d : Direction.values()) {
            if (direction == d.nativeInt) {
                return d;
            }
        }

        assert false;
        return null;
!!!9452300.java!!!	addPath(in destPath : int, in srcPath : int, inout transform : AffineTransform) : void
        Path_Delegate destPathDelegate = sManager.getDelegate(destPath);
        if (destPathDelegate == null) {
            return;
        }

        Path_Delegate srcPathDelegate = sManager.getDelegate(srcPath);
        if (srcPathDelegate == null) {
            return;
        }

        if (transform != null) {
            destPathDelegate.mPath.append(
                    srcPathDelegate.mPath.getPathIterator(transform), false);
        } else {
            destPathDelegate.mPath.append(srcPathDelegate.mPath, false);
        }
!!!9452428.java!!!	isEmpty() : boolean
        return mPath.getCurrentPoint() == null;
!!!9452556.java!!!	fillBounds(inout bounds : RectF) : void
        Rectangle2D rect = mPath.getBounds2D();
        bounds.left = (float)rect.getMinX();
        bounds.right = (float)rect.getMaxX();
        bounds.top = (float)rect.getMinY();
        bounds.bottom = (float)rect.getMaxY();
!!!9452684.java!!!	moveTo(in x : float, in y : float) : void
        mPath.moveTo(mLastX = x, mLastY = y);
!!!9452812.java!!!	rMoveTo(in dx : float, in dy : float) : void
        dx += mLastX;
        dy += mLastY;
        mPath.moveTo(mLastX = dx, mLastY = dy);
!!!9452940.java!!!	lineTo(in x : float, in y : float) : void
        mPath.lineTo(mLastX = x, mLastY = y);
!!!9453068.java!!!	rLineTo(in dx : float, in dy : float) : void
        if (isEmpty()) {
            mPath.moveTo(mLastX = 0, mLastY = 0);
        }
        dx += mLastX;
        dy += mLastY;
        mPath.lineTo(mLastX = dx, mLastY = dy);
!!!9453196.java!!!	quadTo(in x1 : float, in y1 : float, in x2 : float, in y2 : float) : void
        mPath.quadTo(x1, y1, mLastX = x2, mLastY = y2);
!!!9453324.java!!!	rQuadTo(in dx1 : float, in dy1 : float, in dx2 : float, in dy2 : float) : void
        if (isEmpty()) {
            mPath.moveTo(mLastX = 0, mLastY = 0);
        }
        dx1 += mLastX;
        dy1 += mLastY;
        dx2 += mLastX;
        dy2 += mLastY;
        mPath.quadTo(dx1, dy1, mLastX = dx2, mLastY = dy2);
!!!9453452.java!!!	cubicTo(in x1 : float, in y1 : float, in x2 : float, in y2 : float, in x3 : float, in y3 : float) : void
        mPath.curveTo(x1, y1, x2, y2, mLastX = x3, mLastY = y3);
!!!9453580.java!!!	rCubicTo(in dx1 : float, in dy1 : float, in dx2 : float, in dy2 : float, in dx3 : float, in dy3 : float) : void
        if (isEmpty()) {
            mPath.moveTo(mLastX = 0, mLastY = 0);
        }
        dx1 += mLastX;
        dy1 += mLastY;
        dx2 += mLastX;
        dy2 += mLastY;
        dx3 += mLastX;
        dy3 += mLastY;
        mPath.curveTo(dx1, dy1, dx2, dy2, mLastX = dx3, mLastY = dy3);
!!!9453708.java!!!	arcTo(inout oval : RectF, in startAngle : float, in sweepAngle : float, inout forceMoveTo : boolean) : void
        Arc2D arc = new Arc2D.Float(oval.left, oval.top, oval.width(), oval.height(), -startAngle,
                -sweepAngle, Arc2D.OPEN);
        mPath.append(arc, true /*connect*/);

        resetLastPointFromPath();
!!!9453836.java!!!	close() : void
        mPath.closePath();
!!!9453964.java!!!	resetLastPointFromPath() : void
        Point2D last = mPath.getCurrentPoint();
        mLastX = (float) last.getX();
        mLastY = (float) last.getY();
!!!9454092.java!!!	addRect(in left : float, in top : float, in right : float, in bottom : float, in dir : int) : void
        moveTo(left, top);

        Direction direction = getDirection(dir);

        switch (direction) {
            case CW:
                lineTo(right, top);
                lineTo(right, bottom);
                lineTo(left, bottom);
                break;
            case CCW:
                lineTo(left, bottom);
                lineTo(right, bottom);
                lineTo(right, top);
                break;
        }

        close();

        resetLastPointFromPath();
!!!9454220.java!!!	offset(in dx : float, in dy : float, inout dst : Path_Delegate) : void
        GeneralPath newPath = new GeneralPath();

        PathIterator iterator = mPath.getPathIterator(new AffineTransform(0, 0, dx, 0, 0, dy));

        newPath.append(iterator, false /*connect*/);

        if (dst != null) {
            dst.mPath = newPath;
        } else {
            mPath = newPath;
        }
!!!9454348.java!!!	transform(inout matrix : Matrix_Delegate, inout dst : Path_Delegate) : void
        if (matrix.hasPerspective()) {
            assert false;
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_MATRIX_AFFINE,
                    "android.graphics.Path#transform() only " +
                    "supports affine transformations.", null, null /*data*/);
        }

        GeneralPath newPath = new GeneralPath();

        PathIterator iterator = mPath.getPathIterator(matrix.getAffineTransform());

        newPath.append(iterator, false /*connect*/);

        if (dst != null) {
            dst.mPath = newPath;
        } else {
            mPath = newPath;
        }
