class TunerTypeSelectionFragment
!!!14217612.java!!!	TunerTypeSelectionFragment(inout context : Context)
        super(context);
!!!14217740.java!!!	onCreateView(inout inflater : LayoutInflater, inout container : ViewGroup, inout savedInstanceState : Bundle) : View
        if (container == null) return null;

        View view = inflater.inflate(R.layout.tuner_type_selection, null);

        mProgressBar = (ProgressBar) view.findViewById(R.id.progress_bar);
        mTunerTypeSelection = view.findViewById(R.id.tuner_type_selection);
        mRadioGroup = (RadioGroup) view.findViewById(R.id.radio_group);

        mRadioListener = new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    focusNext();
                }
            };

        mExternalTunerRadioButton = (RadioButton) view.findViewById(
                R.id.external_tuner_radio_button);
        mExternalTunerRadioButton.setOnClickListener(mRadioListener);

        mInternalTunerRadioButton = (RadioButton) view.findViewById(
                R.id.internal_tuner_radio_button);
        mInternalTunerRadioButton.setOnClickListener(mRadioListener);

        mNoTunerRadioButton = (RadioButton) view.findViewById(
                R.id.no_tuner_radio_button);
        mNoTunerRadioButton.setOnClickListener(mRadioListener);

        return view;
!!!14217868.java!!!	onAccept() : boolean
        int checkedId = mRadioGroup.getCheckedRadioButtonId();

        switch (checkedId) {
            case R.id.external_tuner_radio_button:
                setProperty(SetupProperties.DEVICE_PROPERTY, mIrBlasterDevice);
                break;

            case R.id.internal_tuner_radio_button:
                setProperty(SetupProperties.DEVICE_PROPERTY, mInternalTunerDevice);
                break;

            case R.id.no_tuner_radio_button:
                setStartupIntentBootToHome();
                setProperty(SetupProperties.DEVICE_PROPERTY, null);
                break;

            default:
                Log.e(TAG, "Selecting no existing id: " + checkedId);
                return false;
        }

        return true;
!!!14217996.java!!!	onCancel() : void
        stopDeviceScan();
        cancelRunnable();
!!!14218124.java!!!	onResume() : void
        super.onResume();

        setTitleText(getActivity().getString(R.string.live_tv_title));
        setSubtitleText(getActivity().getString(R.string.live_tv_subtitle));

        setNextEnabled(false);

        mAfterScanRunnable = new Runnable() {
                @Override
                public void run() {
                    stopDeviceScan();
                    afterScan();
                }
            };

        // TODO: We should redo the UI to allow simultaneous scanning and selection. Currently we
        // always have an IR blaster and internal tuner, so the user should never have to wait for
        // the full 30 seconds.
        getHandler().postDelayed(mAfterScanRunnable, 30000);
        startDeviceScan();
!!!14218252.java!!!	afterScan() : void
        cancelRunnable();
        mProgressBar.setVisibility(View.GONE);
        mTunerTypeSelection.setVisibility(View.VISIBLE);

        setNextEnabled(true);

        final boolean hasInternalTuner = (mInternalTunerDevice != null);
        final boolean hasIrBlaster = (mIrBlasterDevice != null);

        mInternalTunerRadioButton.setVisibility(hasInternalTuner ? View.VISIBLE : View.GONE);
        mExternalTunerRadioButton.setVisibility(hasIrBlaster ? View.VISIBLE : View.GONE);

        if (hasIrBlaster) {
            mExternalTunerRadioButton.setChecked(true);
            requestFocusOnView(mExternalTunerRadioButton);
        } else if (hasInternalTuner) {
            mInternalTunerRadioButton.setChecked(true);
            requestFocusOnView(mInternalTunerRadioButton);
        } else {
            mNoTunerRadioButton.setChecked(true);
            requestFocusOnView(mNoTunerRadioButton);
        }
!!!14218380.java!!!	startDeviceScan() : void
        stopDeviceScan();
        if (DEBUG) Log.d(TAG, "startDeviceScan()");

        mProgressBar.setVisibility(View.VISIBLE);
        mTunerTypeSelection.setVisibility(View.GONE);

        mInternalTunerDevice = null;
        mIrBlasterDevice = null;

        mDeviceLocator = new DeviceLocator(getActivity(), new DeviceLocator.Listener() {

                @Override
                public void onDeviceOnline(final Device device) {
                    if (DEBUG) Log.d(TAG, "onDeviceOnline: " + device);
                    if (TextUtils.isEmpty(device.getId())) {
                        // Ignore any device that has a bad ID.
                        return;
                    }

                    if ((device.getType() == DeviceType.OTA_TUNER)
                            && device.hasCapability(Capability.IS_INTERNAL)
                            && (mInternalTunerDevice == null)) {
                        if (DEBUG) Log.d(TAG, "Found an internal tuner!");
                        mInternalTunerDevice = device;
                    } else if ((device.getType() == DeviceType.IR_BLASTER)
                            && (mIrBlasterDevice == null)) {
                        if (DEBUG) Log.d(TAG, "Found an IR blaster!");
                        mIrBlasterDevice = device;
                    }

                    // If we've found both an IR blaster device and a built-in tuner
                    // device, we can stop the scan early.
                    if ((mIrBlasterDevice != null) && (mInternalTunerDevice != null)) {
                        stopDeviceScan();
                        afterScan();
                    }
                }

                @Override
                public void onDeviceOffline(final Device device) {
                    if (DEBUG) Log.d(TAG, "onDeviceOffline: " + device);
                    if ((mInternalTunerDevice != null)
                            && mInternalTunerDevice.getId().equals(device.getId())) {
                        mInternalTunerDevice = null;
                    }
                    if ((mIrBlasterDevice != null)
                            && mIrBlasterDevice.getId().equals(device.getId())) {
                        mIrBlasterDevice = null;
                    }
                }
            });
        mDeviceLocator.start();
!!!14218508.java!!!	stopDeviceScan() : void
        if (DEBUG) Log.d(TAG, "stopDeviceScan()");
        if (mDeviceLocator != null) {
            mDeviceLocator.stop();
            mDeviceLocator = null;
        }
!!!14218636.java!!!	cancelRunnable() : void
        if (mAfterScanRunnable != null) {
            getHandler().removeCallbacks(mAfterScanRunnable);
            mAfterScanRunnable = null;
        }
!!!14218764.java!!!	setStartupIntentBootToHome() : void
        Intent startupIntent = new Intent(Intent.ACTION_MAIN)
                .addCategory(Intent.CATEGORY_HOME);
        Settings.System.putString(getContext().getContentResolver(),
                TvSettings.System.BOOT_INTENT, startupIntent.toUri(Intent.URI_INTENT_SCHEME));
