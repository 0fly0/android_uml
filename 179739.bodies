class MemoryBlock
!!!743707.java!!!	mmap(inout fd : FileDescriptor, in offset : long, in size : long, inout mapMode : MapMode) : MemoryBlock
        if (size == 0) {
            // You can't mmap(2) a zero-length region, but Java allows it.
            return new MemoryBlock(0, 0);
        }
        // Check just those errors mmap(2) won't detect.
        if (offset < 0 || size < 0 || offset > Integer.MAX_VALUE || size > Integer.MAX_VALUE) {
            throw new IllegalArgumentException("offset=" + offset + " size=" + size);
        }
        int prot;
        int flags;
        if (mapMode == MapMode.PRIVATE) {
            prot = PROT_READ|PROT_WRITE;
            flags = MAP_PRIVATE;
        } else if (mapMode == MapMode.READ_ONLY) {
            prot = PROT_READ;
            flags = MAP_SHARED;
        } else { // mapMode == MapMode.READ_WRITE
            prot = PROT_READ|PROT_WRITE;
            flags = MAP_SHARED;
        }
        try {
            long address = Libcore.os.mmap(0L, size, prot, flags, fd, offset);
            return new MemoryMappedBlock(address, size);
        } catch (ErrnoException errnoException) {
            throw errnoException.rethrowAsIOException();
        }
!!!743835.java!!!	allocate(in byteCount : int) : MemoryBlock
        VMRuntime runtime = VMRuntime.getRuntime();
        byte[] array = (byte[]) runtime.newNonMovableArray(byte.class, byteCount);
        long address = runtime.addressOf(array);
        return new NonMovableHeapBlock(array, address, byteCount);
!!!743963.java!!!	wrapFromJni(in address : long, in byteCount : long) : MemoryBlock
        return new UnmanagedBlock(address, byteCount);
!!!744091.java!!!	MemoryBlock(in address : long, in size : long)
        this.address = address;
        this.size = size;
!!!744219.java!!!	array() : byte
        return null;
!!!744475.java!!!	pokeByte(in offset : int, in value : byte) : void
        Memory.pokeByte(address + offset, value);
!!!744603.java!!!	pokeByteArray(in offset : int, inout src : byte, in srcOffset : int, in byteCount : int) : void
        Memory.pokeByteArray(address + offset, src, srcOffset, byteCount);
!!!744731.java!!!	pokeCharArray(in offset : int, inout src : char, in srcOffset : int, in charCount : int, inout swap : boolean) : void
        Memory.pokeCharArray(address + offset, src, srcOffset, charCount, swap);
!!!744859.java!!!	pokeDoubleArray(in offset : int, inout src : double, in srcOffset : int, in doubleCount : int, inout swap : boolean) : void
        Memory.pokeDoubleArray(address + offset, src, srcOffset, doubleCount, swap);
!!!744987.java!!!	pokeFloatArray(in offset : int, inout src : float, in srcOffset : int, in floatCount : int, inout swap : boolean) : void
        Memory.pokeFloatArray(address + offset, src, srcOffset, floatCount, swap);
!!!745115.java!!!	pokeIntArray(in offset : int, inout src : int, in srcOffset : int, in intCount : int, inout swap : boolean) : void
        Memory.pokeIntArray(address + offset, src, srcOffset, intCount, swap);
!!!745243.java!!!	pokeLongArray(in offset : int, inout src : long, in srcOffset : int, in longCount : int, inout swap : boolean) : void
        Memory.pokeLongArray(address + offset, src, srcOffset, longCount, swap);
!!!745371.java!!!	pokeShortArray(in offset : int, inout src : short, in srcOffset : int, in shortCount : int, inout swap : boolean) : void
        Memory.pokeShortArray(address + offset, src, srcOffset, shortCount, swap);
!!!745499.java!!!	peekByte(in offset : int) : byte
        return Memory.peekByte(address + offset);
!!!745627.java!!!	peekByteArray(in offset : int, inout dst : byte, in dstOffset : int, in byteCount : int) : void
        Memory.peekByteArray(address + offset, dst, dstOffset, byteCount);
!!!745755.java!!!	peekCharArray(in offset : int, inout dst : char, in dstOffset : int, in charCount : int, inout swap : boolean) : void
        Memory.peekCharArray(address + offset, dst, dstOffset, charCount, swap);
!!!745883.java!!!	peekDoubleArray(in offset : int, inout dst : double, in dstOffset : int, in doubleCount : int, inout swap : boolean) : void
        Memory.peekDoubleArray(address + offset, dst, dstOffset, doubleCount, swap);
!!!746011.java!!!	peekFloatArray(in offset : int, inout dst : float, in dstOffset : int, in floatCount : int, inout swap : boolean) : void
        Memory.peekFloatArray(address + offset, dst, dstOffset, floatCount, swap);
!!!746139.java!!!	peekIntArray(in offset : int, inout dst : int, in dstOffset : int, in intCount : int, inout swap : boolean) : void
        Memory.peekIntArray(address + offset, dst, dstOffset, intCount, swap);
!!!746267.java!!!	peekLongArray(in offset : int, inout dst : long, in dstOffset : int, in longCount : int, inout swap : boolean) : void
        Memory.peekLongArray(address + offset, dst, dstOffset, longCount, swap);
!!!746395.java!!!	peekShortArray(in offset : int, inout dst : short, in dstOffset : int, in shortCount : int, inout swap : boolean) : void
        Memory.peekShortArray(address + offset, dst, dstOffset, shortCount, swap);
!!!746523.java!!!	pokeShort(in offset : int, in value : short, inout order : ByteOrder) : void
        Memory.pokeShort(address + offset, value, order.needsSwap);
!!!746651.java!!!	peekShort(in offset : int, inout order : ByteOrder) : short
        return Memory.peekShort(address + offset, order.needsSwap);
!!!746779.java!!!	pokeInt(in offset : int, in value : int, inout order : ByteOrder) : void
        Memory.pokeInt(address + offset, value, order.needsSwap);
!!!746907.java!!!	peekInt(in offset : int, inout order : ByteOrder) : int
        return Memory.peekInt(address + offset, order.needsSwap);
!!!747035.java!!!	pokeLong(in offset : int, in value : long, inout order : ByteOrder) : void
        Memory.pokeLong(address + offset, value, order.needsSwap);
!!!747163.java!!!	peekLong(in offset : int, inout order : ByteOrder) : long
        return Memory.peekLong(address + offset, order.needsSwap);
!!!747291.java!!!	toLong() : long
        return address;
!!!747419.java!!!	toString() : String
        return getClass().getName() + "[" + address + "]";
!!!747547.java!!!	getSize() : long
        return size;
