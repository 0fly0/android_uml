class Deflater
!!!1765659.java!!!	Deflater()
        this(DEFAULT_COMPRESSION, false);
!!!1765787.java!!!	Deflater(in level : int)
        this(level, false);
!!!1765915.java!!!	Deflater(in level : int, inout noHeader : boolean)
        if (level < DEFAULT_COMPRESSION || level > BEST_COMPRESSION) {
            throw new IllegalArgumentException("Bad level: " + level);
        }
        compressLevel = level;
        streamHandle = createStream(compressLevel, strategy, noHeader);
        guard.open("end");
!!!1766043.java!!!	deflate(inout buf : byte) : int
        return deflate(buf, 0, buf.length);
!!!1766171.java!!!	deflate(inout buf : byte, in offset : int, in byteCount : int) : int
        return deflateImpl(buf, offset, byteCount, flushParm);
!!!1766299.java!!!	deflate(inout buf : byte, in offset : int, in byteCount : int, in flush : int) : int
        if (flush != NO_FLUSH && flush != SYNC_FLUSH && flush != FULL_FLUSH) {
            throw new IllegalArgumentException("Bad flush value: " + flush);
        }
        return deflateImpl(buf, offset, byteCount, flush);
!!!1766427.java!!!	deflateImpl(inout buf : byte, in offset : int, in byteCount : int, in flush : int) : int
        checkOpen();
        Arrays.checkOffsetAndCount(buf.length, offset, byteCount);
        if (inputBuffer == null) {
            setInput(EmptyArray.BYTE);
        }
        return deflateImpl(buf, offset, byteCount, streamHandle, flush);
!!!1766683.java!!!	end() : void
        guard.close();
        endImpl();
!!!1766811.java!!!	endImpl() : void
        if (streamHandle != -1) {
            endImpl(streamHandle);
            inputBuffer = null;
            streamHandle = -1;
        }
!!!1767067.java!!!	finalize() : void
        try {
            if (guard != null) {
                guard.warnIfOpen();
            }
            synchronized (this) {
                end(); // to allow overriding classes to clean up
                endImpl(); // in case those classes don't call super.end()
            }
        } finally {
            try {
                super.finalize();
            } catch (Throwable t) {
                throw new AssertionError(t);
            }
        }
!!!1767195.java!!!	finish() : void
        flushParm = FINISH;
!!!1767323.java!!!	finished() : boolean
        return finished;
!!!1767451.java!!!	getAdler() : int
        checkOpen();
        return getAdlerImpl(streamHandle);
!!!1767707.java!!!	getTotalIn() : int
        checkOpen();
        return (int) getTotalInImpl(streamHandle);
!!!1767963.java!!!	getTotalOut() : int
        checkOpen();
        return (int) getTotalOutImpl(streamHandle);
!!!1768219.java!!!	needsInput() : boolean
        if (inputBuffer == null) {
            return true;
        }
        return inRead == inLength;
!!!1768347.java!!!	reset() : void
        checkOpen();
        flushParm = NO_FLUSH;
        finished = false;
        resetImpl(streamHandle);
        inputBuffer = null;
!!!1768603.java!!!	setDictionary(inout dictionary : byte) : void
        setDictionary(dictionary, 0, dictionary.length);
!!!1768731.java!!!	setDictionary(inout buf : byte, in offset : int, in byteCount : int) : void
        checkOpen();
        Arrays.checkOffsetAndCount(buf.length, offset, byteCount);
        setDictionaryImpl(buf, offset, byteCount, streamHandle);
!!!1768987.java!!!	setInput(inout buf : byte) : void
        setInput(buf, 0, buf.length);
!!!1769115.java!!!	setInput(inout buf : byte, in offset : int, in byteCount : int) : void
        checkOpen();
        Arrays.checkOffsetAndCount(buf.length, offset, byteCount);
        inLength = byteCount;
        inRead = 0;
        if (inputBuffer == null) {
            setLevelsImpl(compressLevel, strategy, streamHandle);
        }
        inputBuffer = buf;
        setInputImpl(buf, offset, byteCount, streamHandle);
!!!1769499.java!!!	setLevel(in level : int) : void
        if (level < DEFAULT_COMPRESSION || level > BEST_COMPRESSION) {
            throw new IllegalArgumentException("Bad level: " + level);
        }
        if (inputBuffer != null) {
            throw new IllegalStateException("setLevel cannot be called after setInput");
        }
        compressLevel = level;
!!!1769627.java!!!	setStrategy(in strategy : int) : void
        if (strategy < DEFAULT_STRATEGY || strategy > HUFFMAN_ONLY) {
            throw new IllegalArgumentException("Bad strategy: " + strategy);
        }
        if (inputBuffer != null) {
            throw new IllegalStateException("setStrategy cannot be called after setInput");
        }
        this.strategy = strategy;
!!!1769755.java!!!	getBytesRead() : long
        checkOpen();
        return getTotalInImpl(streamHandle);
!!!1769883.java!!!	getBytesWritten() : long
        checkOpen();
        return getTotalOutImpl(streamHandle);
!!!1770139.java!!!	checkOpen() : void
        if (streamHandle == -1) {
            throw new IllegalStateException("attempt to use Deflater after calling end");
        }
