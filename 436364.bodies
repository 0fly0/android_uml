class PathCache
!!!1111948.cpp!!!	get(inout path : SkPath, inout paint : SkPaint) : PathTexture
    const SkPath* sourcePath = path->getSourcePath();
    if (sourcePath && sourcePath->getGenerationID() == path->getGenerationID()) {
        path = const_cast<SkPath*>(sourcePath);
    }

    PathCacheEntry entry(path, paint);
    PathTexture* texture = mCache.get(entry);

    float left, top, offset;
    uint32_t width, height;

    if (!texture) {
        texture = addTexture(entry, path, paint);
    } else if (path->getGenerationID() != texture->generation) {
        mCache.remove(entry);
        texture = addTexture(entry, path, paint);
    }

    return texture;
!!!1112076.cpp!!!	remove(inout path : SkPath) : void
    // TODO: Linear search...
    Vector<size_t> pathsToRemove;
    for (size_t i = 0; i < mCache.size(); i++) {
        if (mCache.getKeyAt(i).path == path) {
            pathsToRemove.push(i);
            removeTexture(mCache.getValueAt(i));
        }
    }

    mCache.setOnEntryRemovedListener(NULL);
    for (size_t i = 0; i < pathsToRemove.size(); i++) {
        // This will work because pathsToRemove is sorted
        // and because the cache is a sorted keyed vector
        mCache.removeAt(pathsToRemove.itemAt(i) - i);
    }
    mCache.setOnEntryRemovedListener(this);
!!!1112204.cpp!!!	removeDeferred(inout path : SkPath) : void
    Mutex::Autolock _l(mLock);
    mGarbage.push(path);
!!!1112332.cpp!!!	clearGarbage() : void
    Mutex::Autolock _l(mLock);
    size_t count = mGarbage.size();
    for (size_t i = 0; i < count; i++) {
        remove(mGarbage.itemAt(i));
    }
    mGarbage.clear();
