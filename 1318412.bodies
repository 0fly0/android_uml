class KeyguardAbsKeyInputView
!!!7831180.java!!!	KeyguardAbsKeyInputView(inout context : Context)
        this(context, null);
!!!7831308.java!!!	KeyguardAbsKeyInputView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
!!!7831436.java!!!	setKeyguardCallback(inout callback : KeyguardSecurityCallback) : void
        mCallback = callback;
!!!7831564.java!!!	setLockPatternUtils(inout utils : LockPatternUtils) : void
        mLockPatternUtils = utils;
        mEnableHaptics = mLockPatternUtils.isTactileFeedbackEnabled();
!!!7831692.java!!!	onWindowFocusChanged(inout hasWindowFocus : boolean) : void
        if (hasWindowFocus) {
            reset();
        }
!!!7831820.java!!!	reset() : void
        // start fresh
        mPasswordEntry.setText("");
        mPasswordEntry.requestFocus();

        // if the user is currently locked out, enforce it.
        long deadline = mLockPatternUtils.getLockoutAttemptDeadline();
        if (deadline != 0) {
            handleAttemptLockout(deadline);
        } else {
            resetState();
        }
!!!7832204.java!!!	onFinishInflate() : void
        mLockPatternUtils = new LockPatternUtils(mContext);

        mPasswordEntry = (TextView) findViewById(getPasswordTextViewId());
        mPasswordEntry.setOnEditorActionListener(this);
        mPasswordEntry.addTextChangedListener(this);

        // Set selected property on so the view can send accessibility events.
        mPasswordEntry.setSelected(true);

        // Poke the wakelock any time the text is selected or modified
        mPasswordEntry.setOnClickListener(new OnClickListener() {
            public void onClick(View v) {
                mCallback.userActivity(0); // TODO: customize timeout for text?
            }
        });

        mPasswordEntry.addTextChangedListener(new TextWatcher() {
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            public void afterTextChanged(Editable s) {
                if (mCallback != null) {
                    mCallback.userActivity(0);
                }
            }
        });
        mSecurityMessageDisplay = new KeyguardMessageArea.Helper(this);
        mEcaView = findViewById(R.id.keyguard_selector_fade_container);
        View bouncerFrameView = findViewById(R.id.keyguard_bouncer_frame);
        if (bouncerFrameView != null) {
            mBouncerFrame = bouncerFrameView.getBackground();
        }
!!!7832332.java!!!	onRequestFocusInDescendants(in direction : int, inout previouslyFocusedRect : Rect) : boolean
        // send focus to the password field
        return mPasswordEntry.requestFocus(direction, previouslyFocusedRect);
!!!7832460.java!!!	getWrongPasswordStringId() : int
        return R.string.kg_wrong_password;
!!!7832588.java!!!	verifyPasswordAndUnlock() : void
        String entry = mPasswordEntry.getText().toString();
        if (mLockPatternUtils.checkPassword(entry)) {
            mCallback.reportSuccessfulUnlockAttempt();
            mCallback.dismiss(true);
        } else if (entry.length() > MINIMUM_PASSWORD_LENGTH_BEFORE_REPORT ) {
            // to avoid accidental lockout, only count attempts that are long enough to be a
            // real password. This may require some tweaking.
            mCallback.reportFailedUnlockAttempt();
            if (0 == (mCallback.getFailedAttempts()
                    % LockPatternUtils.FAILED_ATTEMPTS_BEFORE_TIMEOUT)) {
                long deadline = mLockPatternUtils.setLockoutAttemptDeadline();
                handleAttemptLockout(deadline);
            }
            mSecurityMessageDisplay.setMessage(getWrongPasswordStringId(), true);
        }
        mPasswordEntry.setText("");
!!!7832716.java!!!	handleAttemptLockout(in elapsedRealtimeDeadline : long) : void
        mPasswordEntry.setEnabled(false);
        long elapsedRealtime = SystemClock.elapsedRealtime();
        new CountDownTimer(elapsedRealtimeDeadline - elapsedRealtime, 1000) {

            @Override
            public void onTick(long millisUntilFinished) {
                int secondsRemaining = (int) (millisUntilFinished / 1000);
                mSecurityMessageDisplay.setMessage(
                        R.string.kg_too_many_failed_attempts_countdown, true, secondsRemaining);
            }

            @Override
            public void onFinish() {
                mSecurityMessageDisplay.setMessage("", false);
                resetState();
            }
        }.start();
!!!7832844.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        mCallback.userActivity(0);
        return false;
!!!7832972.java!!!	onEditorAction(inout v : TextView, in actionId : int, inout event : KeyEvent) : boolean
        // Check if this was the result of hitting the enter key
        if (actionId == EditorInfo.IME_NULL || actionId == EditorInfo.IME_ACTION_DONE
                || actionId == EditorInfo.IME_ACTION_NEXT) {
            verifyPasswordAndUnlock();
            return true;
        }
        return false;
!!!7833100.java!!!	needsInput() : boolean
        return false;
!!!7833228.java!!!	onPause() : void

!!!7833356.java!!!	onResume(in reason : int) : void
        reset();
!!!7833484.java!!!	getCallback() : KeyguardSecurityCallback
        return mCallback;
!!!7833612.java!!!	beforeTextChanged(inout s : CharSequence, in start : int, in count : int, in after : int) : void
        if (mCallback != null) {
            mCallback.userActivity(KeyguardViewManager.DIGIT_PRESS_WAKE_MILLIS);
        }
!!!7833996.java!!!	doHapticKeyClick() : void
        if (mEnableHaptics) {
            performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY,
                    HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING
                    | HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
        }
!!!7834124.java!!!	showBouncer(in duration : int) : void
        KeyguardSecurityViewHelper.
                showBouncer(mSecurityMessageDisplay, mEcaView, mBouncerFrame, duration);
!!!7834252.java!!!	hideBouncer(in duration : int) : void
        KeyguardSecurityViewHelper.
                hideBouncer(mSecurityMessageDisplay, mEcaView, mBouncerFrame, duration);
