class Rop
!!!15123852.java!!!	Rop(in opcode : int, inout result : Type, inout sources : TypeList, inout exceptions : TypeList, in branchingness : int, inout isCallLike : boolean, inout nickname : String)
        if (result == null) {
            throw new NullPointerException("result == null");
        }

        if (sources == null) {
            throw new NullPointerException("sources == null");
        }

        if (exceptions == null) {
            throw new NullPointerException("exceptions == null");
        }

        if ((branchingness < BRANCH_MIN) || (branchingness > BRANCH_MAX)) {
            throw new IllegalArgumentException("bogus branchingness");
        }

        if ((exceptions.size() != 0) && (branchingness != BRANCH_THROW)) {
            throw new IllegalArgumentException("exceptions / branchingness " +
                                               "mismatch");
        }

        this.opcode = opcode;
        this.result = result;
        this.sources = sources;
        this.exceptions = exceptions;
        this.branchingness = branchingness;
        this.isCallLike = isCallLike;
        this.nickname = nickname;
!!!15123980.java!!!	Rop(in opcode : int, inout result : Type, inout sources : TypeList, inout exceptions : TypeList, in branchingness : int, inout nickname : String)
        this(opcode, result, sources, exceptions, branchingness, false,
             nickname);
!!!15124108.java!!!	Rop(in opcode : int, inout result : Type, inout sources : TypeList, in branchingness : int, inout nickname : String)
        this(opcode, result, sources, StdTypeList.EMPTY, branchingness, false,
             nickname);
!!!15124236.java!!!	Rop(in opcode : int, inout result : Type, inout sources : TypeList, inout nickname : String)
        this(opcode, result, sources, StdTypeList.EMPTY, Rop.BRANCH_NONE,
             false, nickname);
!!!15124364.java!!!	Rop(in opcode : int, inout result : Type, inout sources : TypeList, inout exceptions : TypeList, inout nickname : String)
        this(opcode, result, sources, exceptions, Rop.BRANCH_THROW, false,
             nickname);
!!!15124492.java!!!	Rop(in opcode : int, inout sources : TypeList, inout exceptions : TypeList)
        this(opcode, Type.VOID, sources, exceptions, Rop.BRANCH_THROW, true,
             null);
!!!15124620.java!!!	equals(inout other : Object) : boolean
        if (this == other) {
            // Easy out.
            return true;
        }

        if (!(other instanceof Rop)) {
            return false;
        }

        Rop rop = (Rop) other;

        return (opcode == rop.opcode) &&
            (branchingness == rop.branchingness) &&
            (result == rop.result) &&
            sources.equals(rop.sources) &&
            exceptions.equals(rop.exceptions);
!!!15124748.java!!!	hashCode() : int
        int h = (opcode * 31) + branchingness;
        h = (h * 31) + result.hashCode();
        h = (h * 31) + sources.hashCode();
        h = (h * 31) + exceptions.hashCode();

        return h;
!!!15124876.java!!!	toString() : String
        StringBuffer sb = new StringBuffer(40);

        sb.append("Rop{");

        sb.append(RegOps.opName(opcode));

        if (result != Type.VOID) {
            sb.append(" ");
            sb.append(result);
        } else {
            sb.append(" .");
        }

        sb.append(" <-");

        int sz = sources.size();
        if (sz == 0) {
            sb.append(" .");
        } else {
            for (int i = 0; i < sz; i++) {
                sb.append(' ');
                sb.append(sources.getType(i));
            }
        }

        if (isCallLike) {
            sb.append(" call");
        }

        sz = exceptions.size();
        if (sz != 0) {
            sb.append(" throws");
            for (int i = 0; i < sz; i++) {
                sb.append(' ');
                Type one = exceptions.getType(i);
                if (one == Type.THROWABLE) {
                    sb.append("<any>");
                } else {
                    sb.append(exceptions.getType(i));
                }
            }
        } else {
            switch (branchingness) {
                case BRANCH_NONE:   sb.append(" flows"); break;
                case BRANCH_RETURN: sb.append(" returns"); break;
                case BRANCH_GOTO:   sb.append(" gotos"); break;
                case BRANCH_IF:     sb.append(" ifs"); break;
                case BRANCH_SWITCH: sb.append(" switches"); break;
                default: sb.append(" " + Hex.u1(branchingness)); break;
            }
        }

        sb.append('}');

        return sb.toString();
!!!15125004.java!!!	getOpcode() : int
        return opcode;
!!!15125132.java!!!	getResult() : Type
        return result;
!!!15125260.java!!!	getSources() : TypeList
        return sources;
!!!15125388.java!!!	getExceptions() : TypeList
        return exceptions;
!!!15125516.java!!!	getBranchingness() : int
        return branchingness;
!!!15125644.java!!!	isCallLike() : boolean
        return isCallLike;
!!!15125772.java!!!	isCommutative() : boolean
        switch (opcode) {
            case RegOps.AND:
            case RegOps.OR:
            case RegOps.XOR:
            case RegOps.ADD:
            case RegOps.MUL:
                return true;
            default:
                return false;
        }
!!!15125900.java!!!	getNickname() : String
        if (nickname != null) {
            return nickname;
        }

        return toString();
!!!15126028.java!!!	canThrow() : boolean
        return (exceptions.size() != 0);
