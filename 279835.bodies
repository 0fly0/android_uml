class StreamHandler
!!!1704091.java!!!	StreamHandler()
        initProperties("INFO", null, "java.util.logging.SimpleFormatter", null);
        this.os = null;
        this.writer = null;
        this.writerNotInitialized = true;
!!!1704219.java!!!	StreamHandler(inout os : OutputStream)
        this();
        this.os = os;
!!!1704347.java!!!	StreamHandler(inout defaultLevel : String, inout defaultFilter : String, inout defaultFormatter : String, inout defaultEncoding : String)
        initProperties(defaultLevel, defaultFilter, defaultFormatter,
                defaultEncoding);
        this.os = null;
        this.writer = null;
        this.writerNotInitialized = true;
!!!1704475.java!!!	StreamHandler(inout os : OutputStream, inout formatter : Formatter)
        this();
        if (os == null) {
            throw new NullPointerException("os == null");
        }
        if (formatter == null) {
            throw new NullPointerException("formatter == null");
        }
        this.os = os;
        internalSetFormatter(formatter);
!!!1704603.java!!!	initializeWriter() : void
        this.writerNotInitialized = false;
        if (getEncoding() == null) {
            this.writer = new OutputStreamWriter(this.os);
        } else {
            try {
                this.writer = new OutputStreamWriter(this.os, getEncoding());
            } catch (UnsupportedEncodingException e) {
                /*
                 * Should not happen because it's checked in
                 * super.initProperties().
                 */
            }
        }
        write(getFormatter().getHead(this));
!!!1704731.java!!!	write(inout s : String) : void
        try {
            this.writer.write(s);
        } catch (Exception e) {
            getErrorManager().error("Exception occurred when writing to the output stream", e,
                    ErrorManager.WRITE_FAILURE);
        }
!!!1704859.java!!!	internalSetOutputStream(inout newOs : OutputStream) : void
        this.os = newOs;
!!!1704987.java!!!	setOutputStream(inout os : OutputStream) : void
        if (os == null) {
            throw new NullPointerException("os == null");
        }
        LogManager.getLogManager().checkAccess();
        close(true);
        this.writer = null;
        this.os = os;
        this.writerNotInitialized = true;
!!!1705115.java!!!	setEncoding(inout charsetName : String) : void
        // Flush any existing data first.
        this.flush();
        super.setEncoding(charsetName);
        // renew writer only if the writer exists
        if (this.writer != null) {
            if (getEncoding() == null) {
                this.writer = new OutputStreamWriter(this.os);
            } else {
                try {
                    this.writer = new OutputStreamWriter(this.os, getEncoding());
                } catch (UnsupportedEncodingException e) {
                    /*
                     * Should not happen because it's checked in
                     * super.initProperties().
                     */
                    throw new AssertionError(e);
                }
            }
        }
!!!1705243.java!!!	close(inout closeStream : boolean) : void
        if (this.os != null) {
            if (this.writerNotInitialized) {
                initializeWriter();
            }
            write(getFormatter().getTail(this));
            try {
                this.writer.flush();
                if (closeStream) {
                    this.writer.close();
                    this.writer = null;
                    this.os = null;
                }
            } catch (Exception e) {
                getErrorManager().error("Exception occurred when closing the output stream", e,
                        ErrorManager.CLOSE_FAILURE);
            }
        }
!!!1705371.java!!!	close() : void
        LogManager.getLogManager().checkAccess();
        close(true);
!!!1705499.java!!!	flush() : void
        if (this.os != null) {
            try {
                if (this.writer != null) {
                    this.writer.flush();
                } else {
                    this.os.flush();
                }
            } catch (Exception e) {
                getErrorManager().error("Exception occurred when flushing the output stream",
                        e, ErrorManager.FLUSH_FAILURE);
            }
        }
!!!1705627.java!!!	publish(inout record : LogRecord) : void
        try {
            if (this.isLoggable(record)) {
                if (this.writerNotInitialized) {
                    initializeWriter();
                }
                String msg = null;
                try {
                    msg = getFormatter().format(record);
                } catch (Exception e) {
                    getErrorManager().error("Exception occurred when formatting the log record",
                            e, ErrorManager.FORMAT_FAILURE);
                }
                write(msg);
            }
        } catch (Exception e) {
            getErrorManager().error("Exception occurred when logging the record", e,
                    ErrorManager.GENERIC_FAILURE);
        }
!!!1705755.java!!!	isLoggable(inout record : LogRecord) : boolean
        if (record == null) {
            return false;
        }
        if (this.os != null && super.isLoggable(record)) {
            return true;
        }
        return false;
