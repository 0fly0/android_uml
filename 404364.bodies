class GraphicsJNI
!!!941324.cpp!!!	hasException(inout env : JNIEnv) : bool
    if (env->ExceptionCheck() != 0) {
        ALOGE("*** Uncaught exception returned from Java call!\n");
        env->ExceptionDescribe();
        return true;
    }
    return false;
!!!941452.cpp!!!	get_jrect(inout env : JNIEnv, in obj : jobject, inout L : int, inout T : int, inout R : int, inout B : int) : void
    SkASSERT(env->IsInstanceOf(obj, gRect_class));

    *L = env->GetIntField(obj, gRect_leftFieldID);
    *T = env->GetIntField(obj, gRect_topFieldID);
    *R = env->GetIntField(obj, gRect_rightFieldID);
    *B = env->GetIntField(obj, gRect_bottomFieldID);
!!!941580.cpp!!!	set_jrect(inout env : JNIEnv, in obj : jobject, in L : int, in T : int, in R : int, in B : int) : void
    SkASSERT(env->IsInstanceOf(obj, gRect_class));

    env->SetIntField(obj, gRect_leftFieldID, L);
    env->SetIntField(obj, gRect_topFieldID, T);
    env->SetIntField(obj, gRect_rightFieldID, R);
    env->SetIntField(obj, gRect_bottomFieldID, B);
!!!941708.cpp!!!	jrect_to_irect(inout env : JNIEnv, in obj : jobject, inout ir : SkIRect) : SkIRect
    SkASSERT(env->IsInstanceOf(obj, gRect_class));

    ir->set(env->GetIntField(obj, gRect_leftFieldID),
            env->GetIntField(obj, gRect_topFieldID),
            env->GetIntField(obj, gRect_rightFieldID),
            env->GetIntField(obj, gRect_bottomFieldID));
    return ir;
!!!941836.cpp!!!	irect_to_jrect(in ir : SkIRect, inout env : JNIEnv, in obj : jobject) : void
    SkASSERT(env->IsInstanceOf(obj, gRect_class));

    env->SetIntField(obj, gRect_leftFieldID, ir.fLeft);
    env->SetIntField(obj, gRect_topFieldID, ir.fTop);
    env->SetIntField(obj, gRect_rightFieldID, ir.fRight);
    env->SetIntField(obj, gRect_bottomFieldID, ir.fBottom);
!!!941964.cpp!!!	jrectf_to_rect(inout env : JNIEnv, in obj : jobject, inout r : SkRect) : SkRect
    SkASSERT(env->IsInstanceOf(obj, gRectF_class));

    r->set(SkFloatToScalar(env->GetFloatField(obj, gRectF_leftFieldID)),
           SkFloatToScalar(env->GetFloatField(obj, gRectF_topFieldID)),
           SkFloatToScalar(env->GetFloatField(obj, gRectF_rightFieldID)),
           SkFloatToScalar(env->GetFloatField(obj, gRectF_bottomFieldID)));
    return r;
!!!942092.cpp!!!	jrect_to_rect(inout env : JNIEnv, in obj : jobject, inout r : SkRect) : SkRect
    SkASSERT(env->IsInstanceOf(obj, gRect_class));

    r->set(SkIntToScalar(env->GetIntField(obj, gRect_leftFieldID)),
           SkIntToScalar(env->GetIntField(obj, gRect_topFieldID)),
           SkIntToScalar(env->GetIntField(obj, gRect_rightFieldID)),
           SkIntToScalar(env->GetIntField(obj, gRect_bottomFieldID)));
    return r;
!!!942220.cpp!!!	rect_to_jrectf(in r : SkRect, inout env : JNIEnv, in obj : jobject) : void
    SkASSERT(env->IsInstanceOf(obj, gRectF_class));

    env->SetFloatField(obj, gRectF_leftFieldID, SkScalarToFloat(r.fLeft));
    env->SetFloatField(obj, gRectF_topFieldID, SkScalarToFloat(r.fTop));
    env->SetFloatField(obj, gRectF_rightFieldID, SkScalarToFloat(r.fRight));
    env->SetFloatField(obj, gRectF_bottomFieldID, SkScalarToFloat(r.fBottom));
!!!942476.cpp!!!	jpoint_to_ipoint(inout env : JNIEnv, in obj : jobject, inout point : SkIPoint) : SkIPoint
    SkASSERT(env->IsInstanceOf(obj, gPoint_class));

    point->set(env->GetIntField(obj, gPoint_xFieldID),
               env->GetIntField(obj, gPoint_yFieldID));
    return point;
!!!942604.cpp!!!	ipoint_to_jpoint(in ir : SkIPoint, inout env : JNIEnv, in obj : jobject) : void
    SkASSERT(env->IsInstanceOf(obj, gPoint_class));

    env->SetIntField(obj, gPoint_xFieldID, ir.fX);
    env->SetIntField(obj, gPoint_yFieldID, ir.fY);
!!!942732.cpp!!!	jpointf_to_point(inout env : JNIEnv, in obj : jobject, inout point : SkPoint) : SkPoint
    SkASSERT(env->IsInstanceOf(obj, gPointF_class));

    point->set(SkFloatToScalar(env->GetIntField(obj, gPointF_xFieldID)),
               SkFloatToScalar(env->GetIntField(obj, gPointF_yFieldID)));
    return point;
!!!942860.cpp!!!	point_to_jpointf(in r : SkPoint, inout env : JNIEnv, in obj : jobject) : void
    SkASSERT(env->IsInstanceOf(obj, gPointF_class));

    env->SetFloatField(obj, gPointF_xFieldID, SkScalarToFloat(r.fX));
    env->SetFloatField(obj, gPointF_yFieldID, SkScalarToFloat(r.fY));
!!!942988.cpp!!!	getNativeCanvas(inout env : JNIEnv, in canvas : jobject) : SkCanvas
    SkASSERT(env);
    SkASSERT(canvas);
    SkASSERT(env->IsInstanceOf(canvas, gCanvas_class));
    SkCanvas* c = (SkCanvas*)env->GetIntField(canvas, gCanvas_nativeInstanceID);
    SkASSERT(c);
    return c;
!!!943116.cpp!!!	getNativePaint(inout env : JNIEnv, in paint : jobject) : SkPaint
    SkASSERT(env);
    SkASSERT(paint);
    SkASSERT(env->IsInstanceOf(paint, gPaint_class));
    SkPaint* p = (SkPaint*)env->GetIntField(paint, gPaint_nativeInstanceID);
    SkASSERT(p);
    return p;
!!!943244.cpp!!!	getNativeBitmap(inout env : JNIEnv, in bitmap : jobject) : SkBitmap
    SkASSERT(env);
    SkASSERT(bitmap);
    SkASSERT(env->IsInstanceOf(bitmap, gBitmap_class));
    SkBitmap* b = (SkBitmap*)env->GetIntField(bitmap, gBitmap_nativeInstanceID);
    SkASSERT(b);
    return b;
!!!943372.cpp!!!	getNativePicture(inout env : JNIEnv, in picture : jobject) : SkPicture
    SkASSERT(env);
    SkASSERT(picture);
    SkASSERT(env->IsInstanceOf(picture, gPicture_class));
    SkPicture* p = (SkPicture*)env->GetIntField(picture, gPicture_nativeInstanceID);
    SkASSERT(p);
    return p;
!!!943500.cpp!!!	getNativeRegion(inout env : JNIEnv, in region : jobject) : SkRegion
    SkASSERT(env);
    SkASSERT(region);
    SkASSERT(env->IsInstanceOf(region, gRegion_class));
    SkRegion* r = (SkRegion*)env->GetIntField(region, gRegion_nativeInstanceID);
    SkASSERT(r);
    return r;
!!!943628.cpp!!!	getNativeBitmapConfig(inout env : JNIEnv, in jconfig : jobject) : SkBitmap::Config
    SkASSERT(env);
    if (NULL == jconfig) {
        return SkBitmap::kNo_Config;
    }
    SkASSERT(env->IsInstanceOf(jconfig, gBitmapConfig_class));
    int c = env->GetIntField(jconfig, gBitmapConfig_nativeInstanceID);
    if (c < 0 || c >= SkBitmap::kConfigCount) {
        c = SkBitmap::kNo_Config;
    }
    return static_cast<SkBitmap::Config>(c);
!!!943756.cpp!!!	createBitmap(inout env : JNIEnv, inout bitmap : SkBitmap, in buffer : jbyteArray, in isMutable : bool, in ninepatch : jbyteArray, in layoutbounds : jintArray, in density : int = -1) : jobject
    SkASSERT(bitmap);
    SkASSERT(bitmap->pixelRef());
    jobject obj = env->NewObject(gBitmap_class, gBitmap_constructorMethodID,
            static_cast<jint>(reinterpret_cast<uintptr_t>(bitmap)),
            buffer, isMutable, ninepatch, layoutbounds, density);
    hasException(env); // For the side effect of logging.
    return obj;
!!!943884.cpp!!!	createBitmap(inout env : JNIEnv, inout bitmap : SkBitmap, in isMutable : bool, in ninepatch : jbyteArray, in density : int = -1) : jobject
    return createBitmap(env, bitmap, NULL, isMutable, ninepatch, NULL, density);
!!!944012.cpp!!!	createRegion(inout env : JNIEnv, inout region : SkRegion) : jobject
    SkASSERT(region != NULL);
    jobject obj = env->NewObject(gRegion_class, gRegion_constructorMethodID,
            static_cast<jint>(reinterpret_cast<uintptr_t>(region)), 0);
    hasException(env); // For the side effect of logging.
    return obj;
!!!944140.cpp!!!	createBitmapRegionDecoder(inout env : JNIEnv, inout bitmap : SkBitmapRegionDecoder) : jobject
    SkASSERT(bitmap != NULL);

    jobject obj = env->NewObject(gBitmapRegionDecoder_class,
            gBitmapRegionDecoder_constructorMethodID,
            static_cast<jint>(reinterpret_cast<uintptr_t>(bitmap)));
    hasException(env); // For the side effect of logging.
    return obj;
!!!944268.cpp!!!	allocateJavaPixelRef(inout env : JNIEnv, inout bitmap : SkBitmap, inout ctable : SkColorTable) : jbyteArray
    Sk64 size64 = bitmap->getSize64();
    if (size64.isNeg() || !size64.is32()) {
        jniThrowException(env, "java/lang/IllegalArgumentException",
                          "bitmap size exceeds 32bits");
        return NULL;
    }

    size_t size = size64.get32();
    jbyteArray arrayObj = env->NewByteArray(size);
    if (arrayObj) {
        // TODO: make this work without jniGetNonMovableArrayElements
        jbyte* addr = jniGetNonMovableArrayElements(&env->functions, arrayObj);
        if (addr) {
            SkPixelRef* pr = new AndroidPixelRef(env, (void*) addr, size, arrayObj, ctable);
            bitmap->setPixelRef(pr)->unref();
            // since we're already allocated, we lockPixels right away
            // HeapAllocator behaves this way too
            bitmap->lockPixels();
        }
    }

    return arrayObj;
!!!944396.cpp!!!	SetPixels(inout env : JNIEnv, in srcColors : jintArray, in srcOffset : int, in srcStride : int, in x : int, in y : int, in width : int, in height : int, in dstBitmap : SkBitmap) : bool

    SkAutoLockPixels alp(dstBitmap);
    void* dst = dstBitmap.getPixels();
    FromColorProc proc = ChooseFromColorProc(dstBitmap.config());

    if (NULL == dst || NULL == proc) {
        return false;
    }

    const jint* array = env->GetIntArrayElements(srcColors, NULL);
    const SkColor* src = (const SkColor*)array + srcOffset;

    // reset to to actual choice from caller
    dst = dstBitmap.getAddr(x, y);
    // now copy/convert each scanline
    for (int y = 0; y < height; y++) {
        proc(dst, src, width, x, y);
        src += srcStride;
        dst = (char*)dst + dstBitmap.rowBytes();
    }

    dstBitmap.notifyPixelsChanged();

    env->ReleaseIntArrayElements(srcColors, const_cast<jint*>(array),
                                 JNI_ABORT);
    return true;
