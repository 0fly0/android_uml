class Renderable
!!!9271564.java!!!	Renderable()
        mSourceParams = new HashMap<String, ShaderParam>();
        mData = new ScriptField_Renderable_s.Item();
!!!9271692.java!!!	setCullType(in cull : int) : void
        mData.cullType = cull;
!!!9271820.java!!!	setRenderState(inout renderState : RenderState) : void
        mRenderState = renderState;
        if (mField != null) {
            RenderScriptGL rs = SceneManager.getRS();
            updateFieldItem(rs);
            mField.set(mData, 0, true);
        }
!!!9271948.java!!!	setMesh(inout mesh : Mesh) : void
        mData.mesh = mesh;
        if (mField != null) {
            mField.set_mesh(0, mData.mesh, true);
        }
!!!9272076.java!!!	setMesh(in mesh : String, in indexName : String) : void
        mMeshName = mesh;
        mMeshIndexName = indexName;
!!!9272204.java!!!	setMaterialName(in name : String) : void
        mMaterialName = name;
!!!9272332.java!!!	getTransform() : Transform
        return mTransform;
!!!9272460.java!!!	setTransform(inout t : Transform) : void
        mTransform = t;
        if (mField != null) {
            RenderScriptGL rs = SceneManager.getRS();
            updateFieldItem(rs);
            mField.set(mData, 0, true);
        }
!!!9272588.java!!!	appendSourceParams(inout p : ShaderParam) : void
        mSourceParams.put(p.getParamName(), p);
        // Possibly lift this restriction later
        if (mField != null) {
            throw new RuntimeException("Can't add source params to objects that are rendering");
        }
!!!9272716.java!!!	resolveMeshData(inout mesh : Mesh) : void
        mData.mesh = mesh;
        if (mData.mesh == null) {
            Log.v("DRAWABLE: ", "*** NO MESH *** " + mMeshName);
            return;
        }
        int subIndexCount = mData.mesh.getPrimitiveCount();
        if (subIndexCount == 1 || mMeshIndexName == null) {
            mData.meshIndex = 0;
        } else {
            for (int i = 0; i < subIndexCount; i ++) {
                if (mData.mesh.getIndexSetAllocation(i).getName().equals(mMeshIndexName)) {
                    mData.meshIndex = i;
                    break;
                }
            }
        }
        if (mField != null) {
            mField.set(mData, 0, true);
        }
!!!9272844.java!!!	updateTextures(inout rs : RenderScriptGL) : void
        Iterator<ShaderParam> allParamsIter = mSourceParams.values().iterator();
        int paramIndex = 0;
        while (allParamsIter.hasNext()) {
            ShaderParam sp = allParamsIter.next();
            if (sp instanceof TextureParam) {
                TextureParam p = (TextureParam)sp;
                TextureBase tex = p.getTexture();
                if (tex != null) {
                    mData.pf_textures[paramIndex++] = tex.getRsData(false).getAllocation();
                }
            }
        }
        ProgramFragment pf = mRenderState.mFragment.mProgram;
        mData.pf_num_textures = pf != null ? Math.min(pf.getTextureCount(), paramIndex) : 0;
        if (mField != null) {
            mField.set_pf_textures(0, mData.pf_textures, true);
            mField.set_pf_num_textures(0, mData.pf_num_textures, true);
        }
!!!9272972.java!!!	setVisible(inout vis : boolean) : void
        mData.cullType = vis ? 0 : 2;
        if (mField != null) {
            mField.set_cullType(0, mData.cullType, true);
        }
!!!9273100.java!!!	getRsField(inout rs : RenderScriptGL, inout res : Resources) : ScriptField_Renderable_s
        if (mField != null) {
            return mField;
        }
        updateFieldItem(rs);
        updateTextures(rs);

        mField = new ScriptField_Renderable_s(rs, 1);
        mField.set(mData, 0, true);

        return mField;
!!!9273228.java!!!	updateVertexConstants(inout rs : RenderScriptGL) : void
        Allocation pvParams = null, vertexConstants = null;
        VertexShader pv = mRenderState.mVertex;
        if (pv != null && pv.getObjectConstants() != null) {
            vertexConstants = Allocation.createTyped(rs, pv.getObjectConstants());
            Element vertexConst = vertexConstants.getType().getElement();
            pvParams = ShaderParam.fillInParams(vertexConst, mSourceParams,
                                                mTransform).getAllocation();
        }
        mData.pv_const = vertexConstants;
        mData.pv_constParams = pvParams;
!!!9273356.java!!!	updateFragmentConstants(inout rs : RenderScriptGL) : void
        Allocation pfParams = null, fragmentConstants = null;
        FragmentShader pf = mRenderState.mFragment;
        if (pf != null && pf.getObjectConstants() != null) {
            fragmentConstants = Allocation.createTyped(rs, pf.getObjectConstants());
            Element fragmentConst = fragmentConstants.getType().getElement();
            pfParams = ShaderParam.fillInParams(fragmentConst, mSourceParams,
                                                mTransform).getAllocation();
        }
        mData.pf_const = fragmentConstants;
        mData.pf_constParams = pfParams;
!!!9273484.java!!!	updateFieldItem(inout rs : RenderScriptGL) : void
        if (mRenderState == null) {
            mRenderState = SceneManager.getDefaultState();
        }
        if (mTransform == null) {
            mTransform = SceneManager.getDefaultTransform();
        }
        updateVertexConstants(rs);
        updateFragmentConstants(rs);

        mData.transformMatrix = mTransform.getRSData().getAllocation();

        mData.name = getNameAlloc(rs);
        mData.render_state = mRenderState.getRSData().getAllocation();
        mData.bVolInitialized = 0;
