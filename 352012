format 74
"api" // vendor::tv::external::android-ndt::java::net::sf::mmm::util::scanner::api
  revision 1
  modified_by 12 "shchen"
  // class settings
  //class diagram settings
  draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
  //use case diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default class_drawing_mode default shadow default show_stereotype_properties default
  //sequence diagram settings
  show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
  //collaboration diagram settings
  show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
  //object diagram settings
   write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
  //component diagram settings
  package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //deployment diagram settings
  package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
  draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
  //state diagram settings
  package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
  show_activities default region_horizontally default drawing_language default show_stereotype_properties default
  //activity diagram settings
  package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
  show_infonote default drawing_language default show_stereotype_properties default
  
  java_dir "/home/shchen/work/jellybean/vendor/tv/external/mmm/mmm-util-core/src/net/sf/mmm/util/scanner/api/"
  java_package "net.sf.mmm.util.scanner.api"
  classview 303244 "api"
    //class diagram settings
    draw_all_relations default hide_attributes default hide_operations default hide_getset_operations default show_members_full_definition default show_members_visibility default show_members_stereotype default show_members_context default show_members_multiplicity default show_members_initialization default show_attribute_modifiers default member_max_width 0 show_parameter_dir default show_parameter_name default package_name_in_tab default class_drawing_mode default drawing_language default show_context_mode default auto_label_position default show_relation_modifiers default show_relation_visibility default show_infonote default shadow default show_stereotype_properties default
    //collaboration diagram settings
    show_full_operations_definition default show_hierarchical_rank default write_horizontally default drawing_language default package_name_in_tab default show_context default show_msg_context default draw_all_relations default shadow default show_stereotype_properties default
    //object diagram settings
     write_horizontally default package_name_in_tab default show_context default auto_label_position default draw_all_relations default shadow default show_stereotype_properties default
    //sequence diagram settings
    show_full_operations_definition default write_horizontally default class_drawing_mode default drawing_language default draw_all_relations default shadow default show_stereotype_properties default show_class_context_mode default show_msg_context_mode default
    //state diagram settings
    package_name_in_tab default show_context default auto_label_position default write_trans_label_horizontally default show_trans_definition default draw_all_relations default shadow default
    show_activities default region_horizontally default drawing_language default show_stereotype_properties default
    //class settings
    //activity diagram settings
    package_name_in_tab default show_context default show_opaque_action_definition default auto_label_position default write_flow_label_horizontally default draw_all_relations default shadow default
    show_infonote default drawing_language default show_stereotype_properties default
    class 3119884 "CharScannerSyntax"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the interface used to define the syntax to scan characters.

@see CharStreamScanner#readUntil(char, boolean, CharScannerSyntax)

@author Joerg Hohwiller (hohwille at users.sourceforge.net)"
      operation 13111820 "getEscape"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets the character used as escape. The escape itself is omitted
in the decoded output while the next character is taken as is without any
special interpretation. This allows to encode special characters like a
{@link CharStreamScanner#readUntil(char, boolean, CharScannerSyntax) stop-character},
{@link #getQuoteStart() quote-start},
{@link #getAltQuoteStart() alt-quote-start}, as well as the
{@link #getEscape() escape} itself.<br>
A very common example for an escape character is the backslash (<code>\\</code>).<br>
Here are some examples: <table border=\"1\">
<tr>
<th>{@link #getEscape() escape}</th>
<th>input</th>
<th>output</th>
</tr>
<tr>
<td>\\</td>
<td>a\\b\\\\c</td>
<td>ab\\c</td>
</tr>
<tr>
<td>~</td>
<td>a~b~~~c</td>
<td>ab~c</td>
</tr>
</table><br>
<b>ATTENTION:</b><br>
The {@link #getEscape() escape} is disabled within
{@link #getQuoteStart() quotations}.

@see #getEntityStart()

@return the escape character or <code>0</code> (<code>'\\0'</code>)
        for no escaping."
      end

      operation 13111948 "getQuoteStart"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets the character used to start a quotation that should be
terminated by a {@link #getQuoteEnd() quote-end} character. The text inside
the quote is taken as is (without the quote characters).<br>
Common examples for quote characters are the single quotes (<code>'</code>)
and double quotes (<code>\"</code>).

@return the character used to start a quotation or <code>0</code> (<code>'\\0'</code>)
        to disable."
      end

      operation 13112076 "getQuoteEnd"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets the character used to end a quotation.

@see #getQuoteStart()

@return the character used to end a quotation."
      end

      operation 13112204 "getQuoteEscape"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets the character used to escape the
{@link #getQuoteEnd() quote-end} character within a quotation. This may be
the {@link #getQuoteEnd() quote-end} itself so a duplicate
{@link #getQuoteEnd() quote-end} represents a single occurrence of that
character within a quotation. Otherwise the escape may be any other
character.<br>
Please note that this escaping is only active within a quotation opened by
{@link #getQuoteStart() quote-start} and only escapes the
{@link #getQuoteEnd() quote-end} character and nothing else so in any other
case the {@link #getQuoteEscape() quote-escape} is treated as a regular
character.<br>
<table border=\"1\">
<tr>
<th>{@link #getQuoteStart() quote-start}</th>
<th>{@link #getQuoteEnd() quote-end}</th>
<th>{@link #getQuoteEscape() quote-escape}</th>
<th>input</th>
<th>output</th>
</tr>
<tr>
<td>'</td>
<td>'</td>
<td>'</td>
<td>a'bc'd</td>
<td>abcd</td>
</tr>
<tr>
<td>'</td>
<td>'</td>
<td>'</td>
<td>a'b''c'd</td>
<td>ab'cd</td>
</tr>
<tr>
<td>'</td>
<td>'</td>
<td>\\</td>
<td>a'b\\c\\'d\\\\'e'f</td>
<td>ab\\c'd\\'ef</td>
</tr>
</table>

@return the character used to escape the {@link #getQuoteEnd() quote-end}
        character or <code>0</code> (<code>'\\0'</code>) to disable."
      end

      operation 13112332 "isQuoteEscapeLazy"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If {@link #getQuoteStart() quote-start}, {@link #getQuoteEnd() quote-end}
and {@link #getQuoteEscape() quote-escape} all point to the same character
(which is NOT <code>'\\0'</code>), then this method determines if
{@link #getQuoteEscape() quotation escaping} is <em>lazy</em>. This
means that outside a quotation a double occurrence of the quote character
is NOT treated as quotation but as escaped quote character. Otherwise if
NOT lazy, the double quote character is treated as quotation representing
the empty sequence.<br>
Here are some examples: <code><table border=\"1\">
<tr>
<th>{@link #getQuoteStart() quote-start}</th>
<th>{@link #getQuoteEnd() quote-end}</th>
<th>{@link #getQuoteEscape() quote-escape}</th>
<th>{@link #isQuoteEscapeLazy() quote-escape-lazy}</th>
<th>input</th>
<th>output</th>
</tr>
<tr>
<td>'</td>
<td>'</td>
<td>'</td>
<td>true</td>
<td>''</td>
<td>'</td>
</tr>
<tr>
<td>'</td>
<td>'</td>
<td>'</td>
<td>false</td>
<td>''</td>
<td>&nbsp;</td>
</tr>
<tr>
<td>'</td>
<td>'</td>
<td>'</td>
<td>true</td>
<td>''''</td>
<td>''</td>
</tr>
<tr>
<td>'</td>
<td>'</td>
<td>'</td>
<td>false</td>
<td>''''</td>
<td>'</td>
</tr>
<tr>
<td>'</td>
<td>'</td>
<td>'</td>
<td>true</td>
<td>'''a'</td>
<td>'a</td>
</tr>
<tr>
<td>'</td>
<td>'</td>
<td>'</td>
<td>false</td>
<td>'''a'</td>
<td>'a</td>
</tr>
</table>
</code><br>
Please note that for <code>'''a'</code> the complete sequence is treated
as quote if {@link #isQuoteEscapeLazy() quote-escape-lazy} is
<code>false</code> and otherwise just the trailing <code>'a'</code>.

@return <code>true</code> if quote-escaping is lazy, <code>false</code>
        otherwise."
      end

      operation 13112460 "getAltQuoteStart"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets the alternative character used to start a quotation that
should be terminated by a {@link #getAltQuoteEnd() alt-quote-end}
character. The text inside the quote is taken as is (without the quote
characters).

@see #getQuoteStart()

@return the alternative character used to start a quotation or
        <code>0</code> (<code>'\\0'</code>) to disable."
      end

      operation 13112588 "getAltQuoteEnd"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets the alternative character used to end a quotation.

@see #getAltQuoteStart()

@return the alternative character used to end a quotation."
      end

      operation 13112716 "getAltQuoteEscape"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets the character used to escape the
{@link #getAltQuoteEnd() alt-quote-end} character within an quotation
opened by {@link #getAltQuoteStart() alt-quote-start}.

@see #getQuoteEscape()

@return the character used to escape the {@link #getQuoteEnd() quote-end}
        character or <code>0</code> (<code>'\\0'</code>) to disable."
      end

      operation 13112844 "isAltQuoteEscapeLazy"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "If {@link #getAltQuoteStart() alt-quote-start},
{@link #getAltQuoteEnd() alt-quote-end} and
{@link #getAltQuoteEscape() alt-quote-escape} all point to the same
character (which is NOT <code>'\\0'</code>), then this method determines
if {@link #getAltQuoteEscape() alt-quotation escaping} is <em>lazy</em>.

@see #isQuoteEscapeLazy()

@return <code>true</code> if alt-quote-escaping is lazy,
        <code>false</code> otherwise."
      end

      operation 13112972 "getEntityStart"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets the character used to start an entity. An entity is a
specific encoded string surrounded with
{@link #getEntityStart() entity-start} and
{@link #getEntityEnd() entity-end}. It will be decoded by
{@link #resolveEntity(String)}.

@return the character used to start an entity or <code>0</code> (<code>'\\0'</code>)
        to disable."
      end

      operation 13113100 "getEntityEnd"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets the character used to end an entity.

@see #getEntityStart()

@return the character used to end an entity."
      end

      operation 13113228 "resolveEntity"
	public explicit_return_type "String"
	nparams 1
	  param in name "entity" explicit_type "String"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method resolves the given <code>entity</code>.<br>
E.g. if {@link #getEntityStart() entity-start} is <code>'&'</code> and
{@link #getEntityEnd()} is ';' then if the string <code>\"&lt;\"</code> is
scanned, this method is called with <code>\"lt\"</code> as
<code>entity</code> argument and may return <code>\"<\"</code>.

@param entity is the entity string that was found surrounded by
       {@link #getEntityStart() entity-start} and
       {@link #getEntityEnd() entity-end} excluding these characters.
@return the decoded entity."
      end
    end

    class 3120012 "CharStreamScanner"
      visibility public stereotype "interface"
      cpp_decl "${comment}${template}class ${name}${inherit} {
${members}};
${inlines}
"
      java_decl "${comment}${@}${visibility}interface ${name}${extends} {
${members}}
"
      php_decl ""
      python_2_2 python_decl ""
      idl_decl ""
      explicit_switch_type ""
      
      comment "This is the interface for a scanner that can be used to parse a stream or
sequence of characters.

@author Joerg Hohwiller (hohwille at users.sourceforge.net)"
      operation 13113356 "getCurrentIndex"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method gets the current position in the stream to scan. It will
initially be <code>0</code>. In other words this method returns the
number of characters that have already been {@link #next() consumed}.

@return the current index position."
      end

      operation 13113484 "hasNext"
	public explicit_return_type "boolean"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method determines if there is at least one more character available.

@return <code>true</code> if there is at least one character available,
        <code>false</code> if the end has been reached."
      end

      operation 13113612 "next"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads the current character and increments the
{@link #getCurrentIndex() index} stepping to the next character. You need
to {@link #hasNext() check} if a character is available before calling this
method.

@return the current character."
      end

      operation 13113740 "forceNext"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "Like {@link #next()} this method reads the
{@link #getCurrentIndex() current} character and increments the
{@link #getCurrentIndex() index}. If there is no character
{@link #hasNext() available} this method will do nothing and returns
<code>0</code> (the NULL character and NOT <code>'0'</code>).

@return the current character or <code>0</code> if none is
        {@link #hasNext() available}."
      end

      operation 13113868 "peek"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads the current character without incrementing the
{@link #getCurrentIndex() index}. You need to {@link #hasNext() check} if
a character is available before calling this method.

@return the current character."
      end

      operation 13113996 "forcePeek"
	public explicit_return_type "char"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads the {@link #getCurrentIndex() current} character without
incrementing the {@link #getCurrentIndex() index}. If there is no
character {@link #hasNext() available} this method will return
<code>0</code> (the NULL character and NOT <code>'0'</code>).

@return the current character or <code>0</code> if none is
        {@link #hasNext() available}."
      end

      operation 13114124 "readDigit"
	public explicit_return_type "int"
	nparams 0
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads the {@link #next() next character} if it is a digit. Else
the state remains unchanged.

@return the numeric value of the next Latin digit (e.g. <code>0</code> if
        <code>'0'</code>) or <code>-1</code> if the
        {@link #peek() current character} is no Latin digit."
      end

      operation 13114252 "readLong"
	public explicit_return_type "long"
	nparams 1
	  param in name "maxDigits" explicit_type "int"
	nexceptions 1
	  explicit_exception "NumberFormatException"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads the long starting at the
{@link #getCurrentIndex() current position} by reading as many Latin digits
as available but at maximum the given <code>maxDigits</code> and returns
its {@link Long#parseLong(String) parsed} value.<br>
<b>ATTENTION:</b><br>
This method does NOT treat signs (<code>+</code> or <code>-</code>)
to do so, scan them yourself before and negate the result as needed.

@param maxDigits is the maximum number of digits that will be read. The
       value has to be positive (greater than zero).
@return the parsed number.
@throws NumberFormatException if the current
        {@link #getCurrentIndex() current position} does NOT point to a
        number."
      end

      operation 13114380 "read"
	public explicit_return_type "String"
	nparams 1
	  param in name "count" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads the number of {@link #next() next characters} given by
<code>count</code> and returns them as string. If there are less
characters {@link #hasNext() available} the returned string will be shorter
than <code>count</code> and only contain the available characters.

@param count is the number of characters to read. You may use
       {@link Integer#MAX_VALUE} to read until the end of data if the
       data-size is suitable.
@return a string with the given number of characters or all available
        characters if less than <code>count</code>. Will be the empty
        string if no character is {@link #hasNext() available} at all."
      end

      operation 13114508 "expect"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "exprected" explicit_type "String"
	  param inout name "ignoreCase" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method skips all {@link #next() next characters} as long as they equal
to the according character of the <code>expected</code> string.<br>
If a character differs this method stops and the parser points to the first
character that differs from <code>expected</code>. Except for the latter
circumstance, this method behaves like the following code:

<pre>
{@link #read(int) read}(expected.length).equals[IgnoreCase](expected)
</pre>

<b>ATTENTION:</b><br>
Be aware that if already the first character differs, this method will NOT
change the state of the scanner. So take care NOT to produce infinity
loops.

@param exprected is the expected string.
@param ignoreCase - if <code>true</code> the case of the characters is
       ignored when compared.
@return <code>true</code> if the <code>expected</code> string was
        successfully consumed from this scanner, <code>false</code>
        otherwise."
      end

      operation 13114636 "expect"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "expected" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method checks that the {@link #next() current character} is equal to
the given <code>expected</code> character.<br>
If the current character was as expected, the parser points to the next
character. Otherwise its position will remain unchanged.

@param expected is the expected character.
@return <code>true</code> if the current character is the same as
        <code>expected</code>, <code>false</code> otherwise."
      end

      operation 13114764 "skipUntil"
	public explicit_return_type "boolean"
	nparams 1
	  param in name "stop" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method skips all {@link #next() next characters} until the given
<code>stop</code> character or the end is reached. If the
<code>stop</code> character was reached, this scanner will point to the
next character after <code>stop</code> when this method returns.

@param stop is the character to read until.
@return <code>true</code> if the first occurrence of the given
        <code>stop</code> character has been passed, <code>false</code>
        if there is no such character."
      end

      operation 13114892 "skipUntil"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "stop" explicit_type "char"
	  param in name "escape" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads all {@link #next() next characters} until the given
<code>stop</code> character or the end of the string to parse is reached.
In advance to {@link #skipUntil(char)}, this method will read over the
<code>stop</code> character if it is escaped with the given
<code>escape</code> character.

@param stop is the character to read until.
@param escape is the character used to escape the stop character (e.g.
       '\\').
@return <code>true</code> if the first occurrence of the given
        <code>stop</code> character has been passed, <code>false</code>
        if there is no such character."
      end

      operation 13115020 "readUntil"
	public explicit_return_type "String"
	nparams 2
	  param in name "stop" explicit_type "char"
	  param inout name "acceptEof" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads all {@link #next() next characters} until the given
<code>stop</code> character or the end is reached.<br>
After the call of this method, the {@link #getCurrentIndex() current index}
will point to the next character after the (first) <code>stop</code>
character or to the end if NO such character exists.

@param stop is the character to read until.
@param acceptEof if <code>true</code> EOF will be treated as
       <code>stop</code>, too.
@return the string with all read characters excluding the <code>stop</code>
        character or <code>null</code> if there was no <code>stop</code>
        character and <code>acceptEof</code> is <code>false</code>."
      end

      operation 13115148 "readUntil"
	public explicit_return_type "String"
	nparams 3
	  param in name "stop" explicit_type "char"
	  param inout name "acceptEof" explicit_type "boolean"
	  param inout name "syntax" type class_ref 3119884 // CharScannerSyntax
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads all {@link #next() next characters} until the given
<code>stop</code> character or the end of the string to parse is reached.
In advance to {@link #readUntil(char, boolean)}, this method will scan the
input using the given <code>syntax</code> which e.g. allows to
{@link CharScannerSyntax#getEscape() escape} the stop character. <br>
After the call of this method, the {@link #getCurrentIndex() current index}
will point to the next character after the (first) <code>stop</code>
character or to the end of the string if NO such character exists.

@param stop is the character to read until.
@param acceptEof if <code>true</code> EOF will be treated as
       <code>stop</code>, too.
@param syntax contains the characters specific for the syntax to read.
@return the string with all read characters excluding the <code>stop</code>
        character or <code>null</code> if there was no <code>stop</code>
        character."
      end

      operation 13115276 "readWhile"
	public explicit_return_type "String"
	nparams 1
	  param inout name "filter" type class_ref 3117580 // CharFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads all {@link #next() next characters} that are
{@link CharFilter#accept(char) accepted} by the given <code>filter</code>.<br>
After the call of this method, the {@link #getCurrentIndex() current index}
will point to the next character that was NOT
{@link CharFilter#accept(char) accepted} by the given <code>filter</code>
or to the end if NO such character exists.

@see #skipWhile(CharFilter)

@param filter is used to {@link CharFilter#accept(char) decide} which
       characters should be accepted.
@return a string with all characters
        {@link CharFilter#accept(char) accepted} by the given
        <code>filter</code>."
      end

      operation 13115404 "readWhile"
	public explicit_return_type "String"
	nparams 2
	  param inout name "filter" type class_ref 3117580 // CharFilter
	  param in name "max" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads all {@link #next() next characters} that are
{@link CharFilter#accept(char) accepted} by the given <code>filter</code>.<br>
After the call of this method, the {@link #getCurrentIndex() current index}
will point to the next character that was NOT
{@link CharFilter#accept(char) accepted} by the given <code>filter</code>.
If the next <code>max</code> characters or the characters left until the
{@link #hasNext() end} of this scanner are
{@link CharFilter#accept(char) accepted}, only that amount of characters
are skipped.

@see #skipWhile(char)

@param filter is used to {@link CharFilter#accept(char) decide} which
       characters should be accepted.
@param max is the maximum number of characters that should be read.
@return a string with all characters
        {@link CharFilter#accept(char) accepted} by the given
        <code>filter</code> limited to the length of <code>max</code>
        and the {@link #hasNext() end} of this scanner."
      end

      operation 13115532 "skipOver"
	public explicit_return_type "boolean"
	nparams 2
	  param in name "substring" explicit_type "String"
	  param inout name "ignoreCase" explicit_type "boolean"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads all {@link #next() next characters} until the given
<code>substring</code> has been detected.<br>
After the call of this method, the {@link #getCurrentIndex() current index}
will point to the next character after the first occurrence of
<code>substring</code> or to the end of the string if the given
<code>substring</code> was NOT found.<br>

@param substring is the substring to search and skip over starting at the
       {@link #getCurrentIndex() current index}.
@param ignoreCase - if <code>true</code> the case of the characters is
       ignored when compared with characters from <code>substring</code>.
@return <code>true</code> if the given <code>substring</code> occurred
        and has been passed and <code>false</code> if the end of the
        string has been reached without any occurrence of the given
        <code>substring</code>."
      end

      operation 13115660 "skipOver"
	public explicit_return_type "boolean"
	nparams 3
	  param in name "substring" explicit_type "String"
	  param inout name "ignoreCase" explicit_type "boolean"
	  param inout name "stopFilter" type class_ref 3117580 // CharFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}, ${t2} ${p2}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads all {@link #next() next characters} until the given
<code>substring</code> has been detected.<br>
If a {@link CharFilter#accept(char) stop character} is detected by the
given <code>stopFilter</code> this method returns <code>false</code>
pointing to the character next to that stop character. Otherwise after this
method, the {@link #getCurrentIndex() current index} will point to the next
character after the first occurrence of <code>substring</code> or to the
end of the string if the given <code>substring</code> was NOT found.<br>

@param substring is the substring to search and skip over starting at the
       {@link #getCurrentIndex() current index}.
@param ignoreCase - if <code>true</code> the case of the characters is
       ignored when compared with characters from <code>substring</code>.
@param stopFilter is the filter used to
       {@link CharFilter#accept(char) detect} stop characters. If such
       character was detected, the skip is stopped and the parser points to
       the character after the stop character. The <code>substring</code>
       should NOT contain a {@link CharFilter#accept(char) stop character}.
@return <code>true</code> if the given <code>substring</code> occurred
        and has been passed and <code>false</code> if a stop character
        has been detected or the end of the string has been reached without
        any occurrence of the given <code>substring</code> or stop
        character."
      end

      operation 13115788 "skipWhile"
	public explicit_return_type "int"
	nparams 1
	  param in name "c" explicit_type "char"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads all {@link #next() next characters} that are identical to
the character given by <code>c</code>.<br>
E.g. use <code>{@link #skipWhile(char) readWhile}(' ')</code> to skip
all blanks from the {@link #getCurrentIndex() current index}. After the
call of this method, the {@link #getCurrentIndex() current index} will
point to the next character that is different to <code>c</code> or to the
end if NO such character exists.

@param c is the character to read over.
@return the number of characters that have been skipped."
      end

      operation 13115916 "skipWhile"
	public explicit_return_type "int"
	nparams 1
	  param inout name "filter" type class_ref 3117580 // CharFilter
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads all {@link #next() next characters} that are
{@link CharFilter#accept(char) accepted} by the given <code>filter</code>.<br>
After the call of this method, the {@link #getCurrentIndex() current index}
will point to the next character that was NOT
{@link CharFilter#accept(char) accepted} by the given <code>filter</code>
or to the end if NO such character exists.

@see #skipWhile(char)

@param filter is used to {@link CharFilter#accept(char) decide} which
       characters should be accepted.
@return the number of characters {@link CharFilter#accept(char) accepted}
        by the given <code>filter</code> that have been skipped."
      end

      operation 13116044 "skipWhile"
	public explicit_return_type "int"
	nparams 2
	  param inout name "filter" type class_ref 3117580 // CharFilter
	  param in name "max" explicit_type "int"
	cpp_decl "    ${comment}${friend}${static}${inline}${virtual}${type} ${name}${(}${)}${const}${volatile}${throw}${abstract};
"
	cpp_def "${comment}${inline}${type} ${class}::${name}${(}${)}${const}${volatile}${throw}${staticnl}{
  ${body}}
"
	java_def "  ${comment}${@}${visibility}${final}${static}${abstract}${synchronized}${type} ${name}${(}${t0} ${p0}, ${t1} ${p1}${)}${throws}${staticnl}{
  ${body}}
"
	
	
	
	comment "This method reads all {@link #next() next characters} that are
{@link CharFilter#accept(char) accepted} by the given <code>filter</code>.<br>
After the call of this method, the {@link #getCurrentIndex() current index}
will point to the next character that was NOT
{@link CharFilter#accept(char) accepted} by the given <code>filter</code>.
If the next <code>max</code> characters or the characters left until the
{@link #hasNext() end} of this scanner are
{@link CharFilter#accept(char) accepted}, only that amount of characters
are skipped.

@see #skipWhile(char)

@param filter is used to {@link CharFilter#accept(char) decide} which
       characters should be accepted.
@param max is the maximum number of characters that should be skipped.
@return the number of skipped characters."
      end
    end
  end

  deploymentview 289676 "api"
    //deployment diagram settings
    package_name_in_tab default show_context default write_horizontally default auto_label_position default draw_all_relations default shadow default
    draw_component_as_icon default show_component_req_prov default show_component_rea default show_stereotype_properties default
    artifact 1212300 "CharScannerSyntax"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
${definition}"
      associated_classes
	class_ref 3119884 // CharScannerSyntax
      end
      comment " $Id: CharScannerSyntax.java 576 2008-08-28 18:49:09Z hohwille $
Copyright (c) The m-m-m Team, Licensed under the Apache License, Version 2.0
http://www.apache.org/licenses/LICENSE-2.0 "
    end

    artifact 1212428 "CharStreamScanner"
      stereotype "source"
      cpp_h "#ifndef ${NAMESPACE}_${NAME}_H
#define ${NAMESPACE}_${NAME}_H

${comment}
${includes}
${declarations}
${namespace_start}
${definition}
${namespace_end}
#endif
"
      cpp_src "${comment}
${includes}
${namespace_start}
${members}
${namespace_end}"
      java_src "${comment}
${package}
${imports}
import net.sf.mmm.util.filter.api.CharFilter;
${definition}"
      associated_classes
	class_ref 3120012 // CharStreamScanner
      end
      comment " $Id: CharStreamScanner.java 576 2008-08-28 18:49:09Z hohwille $
Copyright (c) The m-m-m Team, Licensed under the Apache License, Version 2.0
http://www.apache.org/licenses/LICENSE-2.0 "
    end
  end
end
