class LayerBase
!!!1751564.cpp!!!	setName(in name : String8) : void
    mName = name;
!!!1751692.cpp!!!	getName() : String8
    return mName;
!!!1751820.cpp!!!	setPosition(in x : float, in y : float) : bool
    if (mCurrentState.transform.tx() == x && mCurrentState.transform.ty() == y)
        return false;
    mCurrentState.sequence++;
    mCurrentState.transform.set(x, y);
    requestTransaction();
    return true;
!!!1751948.cpp!!!	setLayer(in z : uint32_t) : bool
    if (mCurrentState.z == z)
        return false;
    mCurrentState.sequence++;
    mCurrentState.z = z;
    requestTransaction();
    return true;
!!!1752076.cpp!!!	setSize(in w : uint32_t, in h : uint32_t) : bool
    if (mCurrentState.requested.w == w && mCurrentState.requested.h == h)
        return false;
    mCurrentState.requested.w = w;
    mCurrentState.requested.h = h;
    requestTransaction();
    return true;
!!!1752204.cpp!!!	setAlpha(in alpha : uint8_t) : bool
    if (mCurrentState.alpha == alpha)
        return false;
    mCurrentState.sequence++;
    mCurrentState.alpha = alpha;
    requestTransaction();
    return true;
!!!1752332.cpp!!!	setMatrix(in matrix : matrix22_t) : bool
    mCurrentState.sequence++;
    mCurrentState.transform.set(
            matrix.dsdx, matrix.dsdy, matrix.dtdx, matrix.dtdy);
    requestTransaction();
    return true;
!!!1752460.cpp!!!	setTransparentRegionHint(in transparent : Region) : bool
    mCurrentState.sequence++;
    mCurrentState.transparentRegion = transparent;
    requestTransaction();
    return true;
!!!1752588.cpp!!!	setFlags(in flags : uint8_t, in mask : uint8_t) : bool
    const uint32_t newFlags = (mCurrentState.flags & ~mask) | (flags & mask);
    if (mCurrentState.flags == newFlags)
        return false;
    mCurrentState.sequence++;
    mCurrentState.flags = newFlags;
    requestTransaction();
    return true;
!!!1752716.cpp!!!	setCrop(in crop : Rect) : bool
    if (mCurrentState.requested.crop == crop)
        return false;
    mCurrentState.sequence++;
    mCurrentState.requested.crop = crop;
    requestTransaction();
    return true;
!!!1752844.cpp!!!	setLayerStack(in layerStack : uint32_t) : bool
    if (mCurrentState.layerStack == layerStack)
        return false;
    mCurrentState.sequence++;
    mCurrentState.layerStack = layerStack;
    requestTransaction();
    return true;
!!!1752972.cpp!!!	commitTransaction() : void
    mDrawingState = mCurrentState;
!!!1753100.cpp!!!	requestTransaction() : bool
    int32_t old = setTransactionFlags(eTransactionNeeded);
    return ((old & eTransactionNeeded) == 0);
!!!1753228.cpp!!!	forceVisibilityTransaction() : void
    // this can be called without SurfaceFlinger.mStateLock, but if we
    // can atomically increment the sequence number, it doesn't matter.
    android_atomic_inc(&mCurrentState.sequence);
    requestTransaction();
!!!1753356.cpp!!!	getTransactionFlags(in flags : uint32_t) : uint32_t
    return android_atomic_and(~flags, &mTransactionFlags) & flags;
!!!1753484.cpp!!!	setTransactionFlags(in flags : uint32_t) : uint32_t
    return android_atomic_or(flags, &mTransactionFlags);
!!!1753612.cpp!!!	computeGeometry(in hw : sp<const DisplayDevice>, inout mesh : LayerMesh) : void
    const Layer::State& s(drawingState());
    const Transform tr(hw->getTransform() * s.transform);
    const uint32_t hw_h = hw->getHeight();
    Rect win(s.active.w, s.active.h);
    if (!s.active.crop.isEmpty()) {
        win.intersect(s.active.crop, &win);
    }
    if (mesh) {
        tr.transform(mesh->mVertices[0], win.left,  win.top);
        tr.transform(mesh->mVertices[1], win.left,  win.bottom);
        tr.transform(mesh->mVertices[2], win.right, win.bottom);
        tr.transform(mesh->mVertices[3], win.right, win.top);
        for (size_t i=0 ; i<4 ; i++) {
            mesh->mVertices[i][1] = hw_h - mesh->mVertices[i][1];
        }
    }
!!!1753740.cpp!!!	computeBounds() : Rect
    const Layer::State& s(drawingState());
    Rect win(s.active.w, s.active.h);
    if (!s.active.crop.isEmpty()) {
        win.intersect(s.active.crop, &win);
    }
    return s.transform.transform(win);
!!!1753868.cpp!!!	getLayerBaseClient() : sp<LayerBaseClient>
    return 0;
!!!1753996.cpp!!!	getLayer() : sp<Layer>
    return 0;
!!!1754252.cpp!!!	setGeometry(in hw : sp<const DisplayDevice>, inout layer : HWCLayerInterface) : void
    layer.setDefaultState();

    // this gives us only the "orientation" component of the transform
    const State& s(drawingState());
    const uint32_t finalTransform = s.transform.getOrientation();
    // we can only handle simple transformation
    if (finalTransform & Transform::ROT_INVALID) {
        layer.setTransform(0);
    } else {
        layer.setTransform(finalTransform);
    }

    if (!isOpaque()) {
        layer.setBlending(mPremultipliedAlpha ?
                HWC_BLENDING_PREMULT :
                HWC_BLENDING_COVERAGE);
    }

    const Transform& tr = hw->getTransform();
    Rect transformedBounds(computeBounds());
    transformedBounds = tr.transform(transformedBounds);

    // scaling is already applied in transformedBounds
    layer.setFrame(transformedBounds);
    layer.setCrop(transformedBounds.getBounds());
!!!1754380.cpp!!!	setPerFrameData(in hw : sp<const DisplayDevice>, inout layer : HWCLayerInterface) : void
    layer.setPerFrameDefaultState();
    // we have to set the visible region on every frame because
    // we currently free it during onLayerDisplayed(), which is called
    // after HWComposer::commit() -- every frame.
    const Transform& tr = hw->getTransform();
    layer.setVisibleRegionScreen(tr.transform(visibleRegion));
!!!1754508.cpp!!!	setAcquireFence(in hw : sp<const DisplayDevice>, inout layer : HWCLayerInterface) : void
    layer.setAcquireFenceFd(-1);
!!!1754636.cpp!!!	draw(in hw : sp<const DisplayDevice>, in clip : Region) : void
    onDraw(hw, clip);
!!!1754764.cpp!!!	draw(in hw : sp<const DisplayDevice>) : void
    onDraw( hw, Region(hw->bounds()) );
!!!1755020.cpp!!!	initStates(in w : uint32_t, in h : uint32_t, in flags : uint32_t) : void
    uint32_t layerFlags = 0;
    if (flags & ISurfaceComposerClient::eHidden)
        layerFlags = layer_state_t::eLayerHidden;

    if (flags & ISurfaceComposerClient::eNonPremultiplied)
        mPremultipliedAlpha = false;

    mCurrentState.active.w = w;
    mCurrentState.active.h = h;
    mCurrentState.active.crop.makeInvalid();
    mCurrentState.z = 0;
    mCurrentState.alpha = 0xFF;
    mCurrentState.layerStack = 0;
    mCurrentState.flags = layerFlags;
    mCurrentState.sequence = 0;
    mCurrentState.transform.set(0, 0);
    mCurrentState.requested = mCurrentState.active;

    // drawing state & current state are identical
    mDrawingState = mCurrentState;
!!!1755148.cpp!!!	doTransaction(in flags : uint32_t) : uint32_t
    const Layer::State& front(drawingState());
    const Layer::State& temp(currentState());

    // always set active to requested, unless we're asked not to
    // this is used by Layer, which special cases resizes.
    if (flags & eDontUpdateGeometryState)  {
    } else {
        Layer::State& editTemp(currentState());
        editTemp.active = temp.requested;
    }

    if (front.active != temp.active) {
        // invalidate and recompute the visible regions if needed
        flags |= Layer::eVisibleRegion;
    }

    if (temp.sequence != front.sequence) {
        // invalidate and recompute the visible regions if needed
        flags |= eVisibleRegion;
        this->contentDirty = true;

        // we may use linear filtering, if the matrix scales us
        const uint8_t type = temp.transform.getType();
        mNeedsFiltering = (!temp.transform.preserveRects() ||
                (type >= Transform::SCALE));
    }

    // Commit the transaction
    commitTransaction();
    return flags;
!!!1755276.cpp!!!	setVisibleRegion(in visibleRegion : Region) : void
    // always called from main thread
    this->visibleRegion = visibleRegion;
!!!1755404.cpp!!!	setCoveredRegion(in coveredRegion : Region) : void
    // always called from main thread
    this->coveredRegion = coveredRegion;
!!!1755532.cpp!!!	setVisibleNonTransparentRegion(in setVisibleNonTransparentRegion : Region) : void
    // always called from main thread
    this->visibleNonTransparentRegion = setVisibleNonTransparentRegion;
!!!1755660.cpp!!!	latchBuffer(inout recomputeVisibleRegions : bool) : Region
    Region result;
    return result;
!!!1756044.cpp!!!	needsFiltering(in hw : sp<const DisplayDevice>) : bool
    return mNeedsFiltering || hw->needsFiltering();
!!!1756428.cpp!!!	isVisible() : bool
    const Layer::State& s(mDrawingState);
    return !(s.flags & layer_state_t::eLayerHidden) && s.alpha;
!!!1756684.cpp!!!	onLayerDisplayed(in hw : sp<const DisplayDevice>, inout layer : HWCLayerInterface) : void
    if (layer) {
        layer->onDisplayed();
    }
!!!1757196.cpp!!!	dump(inout result : String8, inout buffer : char, in SIZE : size_t) : void
    const Layer::State& s(drawingState());

    snprintf(buffer, SIZE,
            "+ %s %p (%s)\n",
            getTypeId(), this, getName().string());
    result.append(buffer);

    s.transparentRegion.dump(result, "transparentRegion");
    visibleRegion.dump(result, "visibleRegion");

    snprintf(buffer, SIZE,
            "      "
            "layerStack=%4d, z=%9d, pos=(%g,%g), size=(%4d,%4d), crop=(%4d,%4d,%4d,%4d), "
            "isOpaque=%1d, needsDithering=%1d, invalidate=%1d, "
            "alpha=0x%02x, flags=0x%08x, tr=[%.2f, %.2f][%.2f, %.2f]\n",
            s.layerStack, s.z, s.transform.tx(), s.transform.ty(), s.active.w, s.active.h,
            s.active.crop.left, s.active.crop.top,
            s.active.crop.right, s.active.crop.bottom,
            isOpaque(), needsDithering(), contentDirty,
            s.alpha, s.flags,
            s.transform[0][0], s.transform[0][1],
            s.transform[1][0], s.transform[1][1]);
    result.append(buffer);
!!!1757324.cpp!!!	shortDump(inout result : String8, inout scratch : char, in size : size_t) : void
    LayerBase::dump(result, scratch, size);
!!!1758092.cpp!!!	clearWithOpenGL(in hw : sp<const DisplayDevice>, in clip : Region) : void
    clearWithOpenGL(hw, clip, 0,0,0,0);
!!!1758220.cpp!!!	setFiltering(in filtering : bool) : void
    mFiltering = filtering;
!!!1758348.cpp!!!	getFiltering() : bool
    return mFiltering;
!!!1758476.cpp!!!	clearWithOpenGL(in hw : sp<const DisplayDevice>, in clip : Region, in red : GLclampf, in green : GLclampf, in blue : GLclampf, in alpha : GLclampf) : void
    const uint32_t fbHeight = hw->getHeight();
    glColor4f(red,green,blue,alpha);

    glDisable(GL_TEXTURE_EXTERNAL_OES);
    glDisable(GL_TEXTURE_2D);
    glDisable(GL_BLEND);

    LayerMesh mesh;
    computeGeometry(hw, &mesh);

    glVertexPointer(2, GL_FLOAT, 0, mesh.getVertices());
    glDrawArrays(GL_TRIANGLE_FAN, 0, mesh.getVertexCount());
!!!1758604.cpp!!!	drawWithOpenGL(in hw : sp<const DisplayDevice>, in clip : Region) : void
    const uint32_t fbHeight = hw->getHeight();
    const State& s(drawingState());

    GLenum src = mPremultipliedAlpha ? GL_ONE : GL_SRC_ALPHA;
    if (CC_UNLIKELY(s.alpha < 0xFF)) {
        const GLfloat alpha = s.alpha * (1.0f/255.0f);
        if (mPremultipliedAlpha) {
            glColor4f(alpha, alpha, alpha, alpha);
        } else {
            glColor4f(1, 1, 1, alpha);
        }
        glEnable(GL_BLEND);
        glBlendFunc(src, GL_ONE_MINUS_SRC_ALPHA);
        glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_MODULATE);
    } else {
        glColor4f(1, 1, 1, 1);
        glTexEnvx(GL_TEXTURE_ENV, GL_TEXTURE_ENV_MODE, GL_REPLACE);
        if (!isOpaque()) {
            glEnable(GL_BLEND);
            glBlendFunc(src, GL_ONE_MINUS_SRC_ALPHA);
        } else {
            glDisable(GL_BLEND);
        }
    }

    LayerMesh mesh;
    computeGeometry(hw, &mesh);

    // TODO: we probably want to generate the texture coords with the mesh
    // here we assume that we only have 4 vertices

    struct TexCoords {
        GLfloat u;
        GLfloat v;
    };

    Rect win(s.active.w, s.active.h);
    if (!s.active.crop.isEmpty()) {
        win.intersect(s.active.crop, &win);
    }

    GLfloat left   = GLfloat(win.left)   / GLfloat(s.active.w);
    GLfloat top    = GLfloat(win.top)    / GLfloat(s.active.h);
    GLfloat right  = GLfloat(win.right)  / GLfloat(s.active.w);
    GLfloat bottom = GLfloat(win.bottom) / GLfloat(s.active.h);

    TexCoords texCoords[4];
    texCoords[0].u = left;
    texCoords[0].v = top;
    texCoords[1].u = left;
    texCoords[1].v = bottom;
    texCoords[2].u = right;
    texCoords[2].v = bottom;
    texCoords[3].u = right;
    texCoords[3].v = top;
    for (int i = 0; i < 4; i++) {
        texCoords[i].v = 1.0f - texCoords[i].v;
    }

    glEnableClientState(GL_TEXTURE_COORD_ARRAY);
    glTexCoordPointer(2, GL_FLOAT, 0, texCoords);
    glVertexPointer(2, GL_FLOAT, 0, mesh.getVertices());
    glDrawArrays(GL_TRIANGLE_FAN, 0, mesh.getVertexCount());

    glDisableClientState(GL_TEXTURE_COORD_ARRAY);
    glDisable(GL_BLEND);
