class BerlinVideoSourceContext
!!!10949260.cpp!!!	BerlinVideoSourceContext(in source_handler : sp<BerlinSourceHandler>)
    video_rect_.clear();
    source_rect_.clear();
    ui_rect_.clear();
    overscan_rect_.clear();
    global_scaling_mode_.clear();
    // TODO: setScale notifySourceVideoInfo
!!!10949516.cpp!!!	setParameter(in key : int32_t, in request : Parcel) : status_t
    ALOGV("setParameter, key %d", key);
    if (key == SET_SOURCE) {
        int video_channel = request.readInt32();
        ALOGD("setSource: source uri %s, channel %d",
                attr_.uri.string(), video_channel);
        SetChannel(video_channel);
        video_info_.channel_id = channel_id_;
        return android::OK;
    } else if (key == SET_SUB_SOURCE) {
        int sub_source = request.readInt32();
        ALOGD("setSubSource: uri %s, sub source %d",
                attr_.uri.string(), sub_source);
        sub_source_ = sub_source;
        return android::OK;
    } else if (key == NOTIFY_VIDEO_REC) {
        int32_t src_x = request.readInt32();
        int32_t src_y = request.readInt32();
        int32_t src_width = request.readInt32();
        int32_t src_height = request.readInt32();
        int32_t dst_x = request.readInt32();
        int32_t dst_y = request.readInt32();
        int32_t dst_width = request.readInt32();
        int32_t dst_height = request.readInt32();
        ALOGD("notifyVideoRect: uri %s, src %dx%d@(%d, %d), dst %dx%d@(%d, %d)",
                attr_.uri.string(),
                src_width, src_height, src_x, src_y,
                dst_width, dst_height, dst_x, dst_y);

        video_rect_.x = dst_x;
        video_rect_.y = dst_y;
        video_rect_.width = dst_width;
        video_rect_.height = dst_height;
        ((BerlinOutputHandler*)(source_handler_->GetOutputSettings()->GetHandler()))
            ->GetVideoOutput()->SetVideoScale(source_id_);
        return android::OK;
    } else if (key == NOTIFY_SOURCE_VIDEO_INFO) {
        int32_t width = request.readInt32();
        int32_t height = request.readInt32();
        bool mode_3d = request.readInt32() != 0;
        bool is_interlaced = request.readInt32() != 0;
        int32_t frame_rate = request.readInt32();
        int32_t aspect_width = request.readInt32();
        int32_t aspect_height = request.readInt32();
        video_changed_ = false;
        if( video_info_.active_width != width || video_info_.active_height != height ||
            video_info_.mode_3d != mode_3d || video_info_.is_interlaced != is_interlaced ||
            video_info_.frame_rate != frame_rate ||
            video_info_.aspect_width != aspect_width ||
            video_info_.aspect_height != aspect_height) {
            video_changed_ = true;
        }
        ALOGD("notifySourceVideoInfo[%d], source %d, size: %dx%d, 3D: %d, interlaced: %d,\
                frame_rate %d, aspect_width %d, aspect_height %d",
                video_changed_, source_id_, width, height, mode_3d, is_interlaced,
                frame_rate, aspect_width, aspect_height);
        // TODO:  handle source info updated
        video_info_.channel_id = channel_id_;
        video_info_.active_width = width;
        video_info_.active_height = height;
        video_info_.mode_3d = mode_3d;
        video_info_.is_interlaced = is_interlaced;
        video_info_.frame_rate = frame_rate;
        video_info_.aspect_width = aspect_width;
        video_info_.aspect_height = aspect_height;
        //notify event
        Parcel event;
        event.writeInt32(source_id_);
        event.writeInt32(width);
        event.writeInt32(height);
        event.writeInt32(mode_3d);
        event.writeInt32(is_interlaced);
        event.writeInt32(frame_rate);
        event.writeInt32(aspect_width);
        event.writeInt32(aspect_height);
        source_handler_->notifyHandlerObservers(TV_VIDEO_INFO_UPDATE, &event);
        return android::OK;
    } else if (key == NOTIFY_SOURCE_AUDIO_INFO) {
        int32_t audio_format = request.readInt32();
        int32_t sample_rate = request.readInt32();
        int32_t channels = request.readInt32();
        int32_t lfe_channels = request.readInt32();
        int32_t dual_mono = request.readInt32();
        audio_changed_ = false;
        if(audio_info_.audio_format != audio_format) {
            audio_changed_ = true;
        }
        ALOGD("notifySourceAudioInfo[%d], source %d, audio_format %d,\
                sample_rate %d channels %d lfe_channels %d dual_mono %d",
                audio_changed_, source_id_, audio_format, sample_rate,
                channels, lfe_channels, dual_mono);
        // TODO:  handle source audio info updated
        audio_info_.audio_format = audio_format;
        audio_info_.sample_rate = sample_rate;
        audio_info_.channels = channels;
        audio_info_.lfe_channels = lfe_channels;
        audio_info_.dual_mono = dual_mono;
        //notify event
        Parcel event;
        event.writeInt32(source_id_);
        event.writeInt32(audio_format);
        event.writeInt32(sample_rate);
        event.writeInt32(channels);
        event.writeInt32(lfe_channels);
        event.writeInt32(dual_mono);
        source_handler_->notifyHandlerObservers(TV_AUDIO_INFO_UPDATE, &event);
        return android::OK;
    /*} else if (key == NOTIFY_SOURCE_INPUT_LOCK) {
        int32_t input_lock_enabled = request.readInt32();
        ALOGD("notifySourceInputLock, source %s, input_lock_enabled: %d",
                attr_.uri.string(), input_lock_enabled);
        // Notify handler observers
        Parcel data;
        data.writeInt32(source_id_);
        data.writeInt32(input_lock_enabled);
        source_handler_->notifyHandlerObservers(TV_AVIN_INPUT_LOCK, &data);
        return android::OK;*/
    } else if (key == APPLY_AQ) {
        request.setDataPosition(0);
        if(!audio_changed_) {
            ALOGD("skip apply aq for the same audio info [%d]", audio_changed_);
            return android::OK;
        }
        return source_handler_->GetOutputSettings()->GetHandler()->setParameter(key, request);
    } else if (key == APPLY_PQ) {;
        request.setDataPosition(0);
        if(!video_changed_) {
            ALOGD("skip apply pq for the same video info [%d]", video_changed_);
            return android::OK;
        }
        return source_handler_->GetOutputSettings()->GetHandler()->setParameter(key, request);
    } else if (key == EXIT_SOURCE) {
        Reset();
        return android::OK;
    }
    // Handled by parent
    return BerlinSourceContext::setParameter(key, request);
!!!10949644.cpp!!!	getParameter(in key : int32_t, inout reply : Parcel) : status_t
    ALOGV("getParameter, key %d", key);
    return android::INVALID_OPERATION ;
!!!10949772.cpp!!!	invoke(in request : Parcel, inout reply : Parcel) : status_t
    int origin_data_pos = request.dataPosition();
    int key = request.readInt32();
    int source_id = request.readInt32();
    status_t status = android::OK;
    if (key == TV_GET_VIDEO_INFO) {
        video_info_.WriteToParcel(reply);
        return status;
    } else if (key == TV_GET_VIDEO_RECT) {
        video_rect_.WriteToParcel(reply);
        return status;
    } else if (key == TV_GET_AUDIO_INFO) {
        audio_info_.WriteToParcel(reply);
        return status;
    } else if (GET_SUB_SOURCE == key) {
        ALOGD("getSubSource: source_id %d sub_source %d", source_id, sub_source_);
        if(sub_source_ == -1)
            reply->writeInt32(source_id);
        else
            reply->writeInt32(sub_source_);
        return android::OK;
    } else if(GET_DRC_MODE == key) {
        String8 avkey = AVSettingsHelper::GetPropertyKey(MRVL_AVSETTINGS_SOURCE_PREFIX,
            source_id, kAudioProperty, TV_AUDIO_PhyDrcMode);
        AVSettingValue avValue;
        status_t status = source_handler_->GetOutputSettings()->GetHandler()->ReadSetting(
            avkey.string(), &avValue, true);
        if(android::OK == status) {
            reply->writeInt32(avValue.getInt());
        }
        return status;
    } else if(GET_SOURCE_GAIN == key) {
        String8 avkey = AVSettingsHelper::GetPropertyKey(MRVL_AVSETTINGS_SOURCE_PREFIX,
            source_id, kAudioProperty, TV_AUDIO_PhySourceGain);
        AVSettingValue avValue;
        status_t status = source_handler_->GetOutputSettings()->GetHandler()->ReadSetting(
            avkey.string(), &avValue, true);
        if(android::OK == status) {
            reply->writeInt32(avValue.getInt());
        }
        return status;
    } else if(GET_CHANNEL_MAP == key) {
        String8 avkey = AVSettingsHelper::GetPropertyKey(MRVL_AVSETTINGS_SOURCE_PREFIX,
            source_id, kAudioProperty, TV_AUDIO_ChannelMap);
        AVSettingValue avValue;
        status_t status = source_handler_->GetOutputSettings()->GetHandler()->ReadSetting(
            avkey.string(), &avValue, true);
        if(android::OK == status) {
            reply->writeInt32(avValue.getInt());
        }
        return status;
    } else if(GET_STEREO_MODE == key) {
        String8 avkey = AVSettingsHelper::GetPropertyKey(MRVL_AVSETTINGS_SOURCE_PREFIX,
            source_id, kAudioProperty, TV_AUDIO_PhyStereoMode);
        AVSettingValue avValue;
        status_t status = source_handler_->GetOutputSettings()->GetHandler()->ReadSetting(
            avkey.string(), &avValue, true);
        if(android::OK == status) {
            reply->writeInt32(avValue.getInt());
        }
        return status;
    } else if(GET_DUAL_MODE == key) {
        String8 avkey = AVSettingsHelper::GetPropertyKey(MRVL_AVSETTINGS_SOURCE_PREFIX,
            source_id, kAudioProperty, TV_AUDIO_PhyDualMode);
        AVSettingValue avValue;
        status_t status = source_handler_->GetOutputSettings()->GetHandler()->ReadSetting(
            avkey.string(), &avValue, true);
        if(android::OK == status) {
            reply->writeInt32(avValue.getInt());
        }
        return status;
    }
    // Handled by parent
    request.setDataPosition(origin_data_pos);
    return BerlinSourceContext::invoke(request, reply);
!!!10949900.cpp!!!	Reset() : void
    channel_id_ = -1;
    // No need to reset video rect
    // GFX may not notify video rect when player ExitSource/SetSource
    // We keep using the stored one
    video_info_.Reset();
    video_changed_ = true;
    audio_info_.Reset();
    audio_changed_ = true;
!!!10950028.cpp!!!	ToString() : String8
    char desc[200];
    sprintf(desc,
        "source: %d attr: %s channel: %d video_rect: (%d %d %d %d)",
        source_id_,
        attr_.uri.string(),
        channel_id_,
        video_rect_.x,
        video_rect_.y,
        video_rect_.width,
        video_rect_.height);
    return String8(desc);
!!!10950284.cpp!!!	SetChannel(in channel_id : int32_t) : void
    if (!is_inited_) {
        initVideoSourceContext();
    }
    channel_id_ = channel_id;
    ALOGD("SetChannel source:%d channel:%d", source_id_, channel_id_);
!!!10950668.cpp!!!	notifyOutputDisplayMode(in mode : DisplayMode) : void
    ALOGD("notifyOutputDisplayMode, %s", mode.ToString().string());
    if (display_mode_ != mode) {
        display_mode_.SetTo(mode);
        handleVideoScalingLocked();
    } else {
        ALOGD("notifyOutputDisplayMode, duplicate");
    }
!!!10950796.cpp!!!	notifyOverscanRect(in rect : android::Rect) : void
    ALOGD("notifyOverscanRect, (%d %d %d %d)",
            rect.left,
            rect.top,
            rect.right,
            rect.bottom);
    if (overscan_rect_ != rect) {
        overscan_rect_ = rect;
        handleVideoScalingLocked();
    } else {
        ALOGD("notifyOverscanRect, duplicate");
    }
!!!10950924.cpp!!!	notifyGlobalScalingMode(inout mode : String8) : void
    ALOGD("notifyGlobalScalingMode, %s", mode.string());
    if (global_scaling_mode_ != mode) {
        global_scaling_mode_ = mode;
        handleVideoScalingLocked();
    } else {
        ALOGD("notifyGlobalScalingMode, duplicate");
    }
!!!10951052.cpp!!!	notifySourceScalingMode(in mode : int32_t) : void
    ALOGD("notifySourceScalingMode, %d", mode);
    if (source_scaling_mode_ != mode) {
        source_scaling_mode_ = mode;
        handleVideoScalingLocked();
    } else {
        ALOGD("notifySourceScalingMode, duplicate");
    }
!!!10951180.cpp!!!	isFullScreen() : bool
    // Check fullscreen: compare ui rect with video rect (before adjustment)
    ALOGV("isFullScreen, ui_rect_ (%d %d %d %d)",
            ui_rect_.left, ui_rect_.top,
            ui_rect_.right, ui_rect_.bottom);
    ALOGV("isFullScreen, video_rect_ (%d %d %d %d)",
            video_rect_.left, video_rect_.top,
            video_rect_.right, video_rect_.bottom);
    bool is_fullscreen = video_rect_.width() == ui_rect_.width() &&
            video_rect_.height() == ui_rect_.height();
    ALOGD("isFullScreen, %d", is_fullscreen);
    return is_fullscreen;
!!!10951564.cpp!!!	Init() : void
    // Init cannot be executed in construction because overscan handler
    // may not be set yet
    AVS_FUNC_ENTER
    String8 key;
    AVSettingValue value;
    // Initialize overscan rect
    int overscan_x, overscan_y, overscan_w, overscan_h;
    pSourceHandler_->GetOverscanHandler()->getOverscanRectangle(
            &overscan_x, &overscan_y, &overscan_w, &overscan_h);
    overscan_rect_.left = overscan_x;
    overscan_rect_.top = overscan_y;
    overscan_rect_.right = overscan_x + overscan_w;
    overscan_rect_.bottom = overscan_y + overscan_h;
    ALOGD("Init, overscan_rect_ (%d %d %d %d)",
            overscan_rect_.left, overscan_rect_.top,
            overscan_rect_.right, overscan_rect_.bottom);

    // Initialize UI rect
    Parcel ui_rec;
    status_t status = pSourceHandler_->GetOutputHandler()->getParameter(
            GET_UI_REC, &ui_rec);
    if (status != android::OK) {
        ALOGE("Init, get ui rect fail");
        return;
    }
    ui_rec.setDataPosition(0);
    ui_rect_.left = ui_rec.readInt32();
    ui_rect_.top = ui_rec.readInt32();
    ui_rect_.right = ui_rec.readInt32();
    ui_rect_.bottom = ui_rec.readInt32();
    ALOGD("Init, ui_rect_ (%d %d %d %d)",
            ui_rect_.left,
            ui_rect_.top,
            ui_rect_.right,
            ui_rect_.bottom);

    // Initialize global scaling mode
    key = AVSettingsHelper::GetFullKey(
            marvell::kVideoOutputSettingsPrefix,
            marvell::kGlobalScalingMode);
    status = pSourceHandler_->GetOutputHandler()->ReadSetting(
            key, &value, false);
    if (android::OK == status) {
        global_scaling_mode_ = value.getString();
    } else {
        ALOGE("Init, get global scaling mode fail");
        global_scaling_mode_ = marvell::vGlobalScalingModeDefault;
    }

    // Initialize source scaling mode
    key = AVSettingsHelper::GetPropertyKey(
            MRVL_AVSETTINGS_SOURCE_PREFIX,
            attr_.id,
            marvell::kGenericProperty,
            marvell::kScalingMode);
    status = pSourceHandler_->ReadSetting(key, &value, false);
    if (android::OK == status) {
        source_scaling_mode_ = value.getInt();
    } else {
        ALOGE("Init, get scaling mode fail for source %s",
                attr_.ToString().string());
        source_scaling_mode_ = marvell::vScalingModeDefault;
    }

    // Initialize display mode
    key = AVSettingsHelper::GetFullKey(
            marvell::kVideoOutputSettingsPrefix,
            marvell::kHDMIDisplayMode);
    status = pSourceHandler_->GetOutputHandler()->ReadSetting(
            key, &value, false);
    if (android::OK == status) {
        DisplayMode::FromString(value.getString().string(), &display_mode_);
    } else {
        ALOGE("Init, get display mode fail");
    }
    is_inited_ = true;
    AVS_FUNC_LEAVE
!!!10951692.cpp!!!	adjustVideoRect(in window : android::Rect, in source : android::Rect, inout target : android::Rect) : void
    if (!target || window.width() <= 0 || window.height() <= 0
            || source.width() <= 0 || source.height() <= 0
            || window.left < 0 || window.top < 0) {
        return;
    }

    ALOGD("adjustVideoRect, window (%d %d %d %d) source (%d %d %d %d)",
            window.left, window.top, window.right, window.bottom,
            source.left, source.top, source.right, source.bottom);

    if (window.width() * source.height() == window.height() * source.width()) {
        // Scale to fit.
        target->left = window.left;
        target->top = window.top;
        target->right = window.right;
        target->bottom = window.bottom;
    } else if (window.width() * source.height() > window.height() * source.width()) {
        // Pillarboxing mode.
        int adjusted_width = source.width() * window.height() / source.height();
        target->left = window.left + (window.width() - adjusted_width) / 2;
        target->top = window.top;
        target->right = target->left + adjusted_width;
        target->bottom = window.bottom;
    } else {
        // Letterboxing mode.
        int adjusted_height = source.height() * window.width() / source.width();
        target->left = window.left;
        target->top = window.top + (window.height() - adjusted_height) / 2;
        target->right = window.right;
        target->bottom = target->top + adjusted_height;
    }
    ALOGD("adjustVideoRect, target (%d %d %d %d)",
            target->left, target->top, target->right, target->bottom);
    return;
!!!10951820.cpp!!!	handleVideoScalingLocked() : status_t
    android::AutoMutex lock(oper_lock_);
    status_t status = android::OK;
    android::Rect src, dst, output_rect;

    if (channel_id_ < AMP_DISP_PLANE_FIRST || channel_id_ >= AMP_DISP_PLANE_MAX) {
        ALOGW("handleVideoScalingLocked, ignore, channel %d)", channel_id_);
        return android::UNKNOWN_ERROR;
    }

    // For some network source
    // They may use native surface without proper video hole
    // Then GFX cannot notify correct video rect to avsettings
    // We force the scaling src/dst to be empty: fullscreen display
    if (!strcmp(attr_.type.string(), "network")) {
        ALOGD("handleVideoScalingLocked, network source");
        src.clear();
        dst.clear();
        return pSourceHandler_->GetOutputHandler()->GetVideoOutput()->SetScale(
            channel_id_, src, dst);
    }

    if (video_rect_.isEmpty()) {
        ALOGW("handleVideoScalingLocked, ignore, vrect (%d %d %d %d)",
                video_rect_.left,
                video_rect_.top,
                video_rect_.right,
                video_rect_.bottom);
        return android::UNKNOWN_ERROR;
    }

    output_rect = video_rect_;
    // Adjust video output rect according to source info
    adjustVideoRect(video_rect_, source_rect_, &output_rect);
    ALOGD("handleVideoScalingLocked, output_rect (%d %d %d %d)",
            output_rect.left, output_rect.top,
            output_rect.right, output_rect.bottom);
    ALOGV("handleVideoScalingLocked, overscan_rect_ (%d %d %d %d)",
            overscan_rect_.left, overscan_rect_.top,
            overscan_rect_.right, overscan_rect_.bottom);

    double overscan_factor_x = (double)overscan_rect_.width() /
            (double) ui_rect_.width();
    double overscan_factor_y = (double)overscan_rect_.height() /
            (double) ui_rect_.height();
    ALOGD("handleVideoScalingLocked, overscan_factor (%f %f)",
            overscan_factor_x, overscan_factor_y);

    if (!isFullScreen()) {
        Parcel scale_factor;
        status = pSourceHandler_->GetOutputHandler()->getParameter(
                GET_VIDEO_SCALE_FACTOR, &scale_factor);
        if (status != android::OK) {
            ALOGE("handleVideoScalingLocked, get video scale factor fail");
            return status;
        }
        // Reset data position
        scale_factor.setDataPosition(0);
        double scale_factor_x = scale_factor.readDouble();
        double scale_factor_y = scale_factor.readDouble();
        ALOGD("handleVideoScalingLocked, scale_factor_x %f, scale_factor_y %f",
                scale_factor_x, scale_factor_y);

        dst.left = (output_rect.left * overscan_factor_x + overscan_rect_.left
                ) * scale_factor_x + 0.5;
        dst.top = (output_rect.top * overscan_factor_y + overscan_rect_.top
                ) * scale_factor_y + 0.5;
        dst.right = (output_rect.right * overscan_factor_x + overscan_rect_.left
                ) * scale_factor_x + 0.5;
        dst.bottom = (output_rect.bottom * overscan_factor_y + overscan_rect_.top
                ) * scale_factor_y + 0.5;
        // Print warning message if dst is scaled to < 1/8 of src
        // We may ignore such kind of request after detailed verification
        if (dst.width() < (int32_t)(source_rect_.width() / 8) ||
                dst.height() < (int32_t)(source_rect_.height() / 8)) {
            ALOGW("handleVideoScalingLocked, scale LIMITED");
        }
    } else {
        ALOGV("handleVideoScalingLocked, fullscreen");
        ALOGD("handleVideoScalingLocked, scaling mode, global %s, source %d",
                global_scaling_mode_.string(), source_scaling_mode_);
        // Source scaling mode have higher priority than global scaling mode
        if (source_scaling_mode_ == marvell::vScalingModeStretch) {
            // For stretch mode, pass output screen size (current display mode)
            dst.left = 0;
            dst.top = 0;
            dst.right = display_mode_.width;
            dst.bottom = display_mode_.height;
        } else if (source_scaling_mode_ == marvell::vScalingModeAuto) {
            // For auto (keep aspect) mode, just pass empty dst rect
            dst.clear();
        } else {
            // Source scaling mode is not set
            if (!strcmp(global_scaling_mode_.string(),
                    marvell::vGlobalScalingModeStretch)) {
                dst.left = 0;
                dst.top = 0;
                dst.right = display_mode_.width;
                dst.bottom = display_mode_.height;
            } else {
                dst.clear();
            }
        }
    }
    // TODO: handle video truncate if source position is negative (partly out of screen)
    src.clear();
    status = pSourceHandler_->GetOutputHandler()->GetVideoOutput()->SetScale(
            channel_id_, src, dst);
    return status;
!!!10951948.cpp!!!	updatePQProfile(in is_3D : bool, in width : int32_t, in height : int32_t) : status_t
    ALOGD("updatePQProfile, 3D %d, size %dx%d", is_3D, width, height);
    ALOGV("updatePQProfile, IN pq_profile_ %d", pq_profile_);
    status_t status = android::OK;
    bool is_HD = width >= 1280 && height >= 720;
    if (!strcmp(attr_.type.string(), "hdmi")) {
        if (is_HD) {
            pq_profile_ = is_3D ?
                    PQ_PROFILE_HDMI_3D_HD : PQ_PROFILE_HDMI_2D_HD;
        } else {
            pq_profile_ = PQ_PROFILE_HDMI_2D_SD;
        }
    } else if (!strcmp(attr_.type.string(), "file") ||
            !strcmp(attr_.type.string(), "network")) {
        if (is_HD) {
            pq_profile_ = is_3D ?
                    PQ_PROFILE_STREAM_3D_HD : PQ_PROFILE_STREAM_2D_HD;
        } else {
            pq_profile_ = PQ_PROFILE_STREAM_2D_SD;
        }
    } else {
        ALOGW("getPQProfile, invalid source type: %s", attr_.type.string());
        status = android::BAD_VALUE;
    }
    ALOGV("updatePQProfile, OUT pq_profile_ %d", pq_profile_);
    return status;
!!!10952076.cpp!!!	isVideoInfoValid(in width : int32_t, in height : int32_t, in stereo_mode : int32_t) : bool
    // Frame rate is not checked for now
    return width >= 0 && width <= VIDEO_INFO_WIDTH_MAX &&
            height >= 0 && height <= VIDEO_INFO_HEIGHT_MAX &&
            stereo_mode >= marvell::kStereoNone &&
            stereo_mode <= marvell::kStereoFrameSequential;
