class Sqlite3RawDatabase
!!!10961164.cpp!!!	~Sqlite3RawDatabase()
    closeDB();
!!!10961292.cpp!!!	loadFromPath(in path : char) : bool
    sqlite3* db;
    if (sqlite3_open_v2(path, &db, SQLITE_OPEN_READWRITE, NULL) !=
        SQLITE_OK) {
        // TODO: database recovery
        if (!createDB(path, &db)) {
            ALOGE("Cannot open %s", path);
            return false;
        }
    }
    db_ = db;
    return true;
!!!10961420.cpp!!!	closeDB() : void
    if (db_) {
        sqlite3_close(db_);
        db_ = NULL;
    }
!!!10961548.cpp!!!	getEntry(in name : String8, inout value : AVSettingValue) : bool
    if (!db_ || !value)
        return false;
    char buf[512];
    sqlite3_snprintf(sizeof(buf), buf,
                     "SELECT * from settings WHERE name='%q';",
                     name.string());
    char* db_err = 0;
    SQLAutoFree _sqlfree(&db_err);
    SQLValueResult result(*value);
    // sqlite3_exec does not fail for non matching queries.
    // Rather, no callback in invoked.
    if (sqlite3_exec(db_, buf, sql_value_callback, &result, &db_err) !=
        SQLITE_OK) {
        ALOGE("Failure to execute statement %s, error = %s", buf, db_err);
        return false;
    }
    return result.has_results;
!!!10961804.cpp!!!	putEntry(in name : String8, in value : AVSettingValue) : bool
    if (!db_)
        return false;

    String8 data;
    if (!ConvertToString(value, &data))
        return false;
    // Use INSERT OR REPLACE to update fields. We validate up above
    // whether data type is trying to change.
    char* zSql = sqlite3_mprintf("INSERT OR REPLACE INTO settings (name, type, value) "
                                 "VALUES ('%q', %d, '%q');",
                                 name.string(), value.getType(), data.string());
    SQLAutoFree _zsqlfree(&zSql);
    char* db_err = 0;
    SQLAutoFree _sqlfree(&db_err);
    if (sqlite3_exec(db_, zSql, NULL, NULL, &db_err)) {
        ALOGE("putEntry: Failure to execute statement %s, error = %s",
             zSql, db_err);
        return false;
    }
    return true;
!!!10962060.cpp!!!	removeEntry(in name : String8) : bool
    if (!db_)
        return false;
    char *zSql = sqlite3_mprintf("DELETE FROM settings WHERE name='%q'",
                                 name.string());
    SQLAutoFree _zsqlfree(&zSql);
    char* db_err = 0;
    SQLAutoFree _sqlfree(&db_err);
    if (sqlite3_exec(db_, zSql, NULL, NULL, &db_err)) {
        ALOGE("deleteEntry: Failure to execute statement %s, error = %s",
             zSql, db_err);
        return false;
    }
    return true;
!!!10962316.cpp!!!	createDB(in path : char, inout db : sqlite3) : bool
    assert(db != NULL);
    if (sqlite3_open_v2(path, db, SQLITE_OPEN_READWRITE | SQLITE_OPEN_CREATE,
                        NULL) !=
        SQLITE_OK) {
        ALOGE("Cannot create db %s", path);
        return false;
    }
    assert(*db != NULL);
    char* db_err = 0;
    SQLAutoFree _sqlfree(&db_err);
    // Create main settings table.
    if (sqlite3_exec(
                *db, "CREATE TABLE 'settings' "
                "(name TEXT PRIMARY KEY, type TINYINT, value TEXT);",
                NULL, NULL, &db_err) != SQLITE_OK) {
        ALOGE("Failure to create settings table, err %s", db_err);
        sqlite3_close(*db);
        return false;
    }
    return true;
!!!10962444.cpp!!!	sql_value_callback(inout data : void, in argc : int, inout argv : char, inout azColName : char) : int
    if (argc != 3) {
        ALOGE("Wrong number of returned values: %d", argc);
        return -1;
    }
    int type = -1; // default to invalid
    String8 strValue;
    for (int i = 0; i < argc; ++i) {
        if (!strcmp(azColName[i], "type"))
            type = ParseType(argv[i]);
        else if (!strcmp(azColName[i], "value"))
            strValue.setTo(argv[i]);
    }
    SQLValueResult* result = reinterpret_cast<SQLValueResult*>(data);
    if (!ConvertFromString(strValue, type, result->value)) {
        ALOGE("Cannot convert from string (%s, %d)", strValue.string(), type);
        return -1;
    }
    result->has_results = true;
    return 0;
