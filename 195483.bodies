class SecureRandom
!!!878619.java!!!	SecureRandom()
        super(0);
        Provider.Service service = Services.getSecureRandomService();
        if (service == null) {
            this.provider = null;
            this.secureRandomSpi = new SHA1PRNG_SecureRandomImpl();
            this.algorithm = "SHA1PRNG";
        } else {
            try {
                this.provider = service.getProvider();
                this.secureRandomSpi = (SecureRandomSpi)service.newInstance(null);
                this.algorithm = service.getAlgorithm();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
!!!878747.java!!!	SecureRandom(inout seed : byte)
        this();
        setSeed(seed);
!!!878875.java!!!	SecureRandom(inout secureRandomSpi : SecureRandomSpi, inout provider : Provider)
        this(secureRandomSpi, provider, "unknown");
!!!879003.java!!!	SecureRandom(inout secureRandomSpi : SecureRandomSpi, inout provider : Provider, inout algorithm : String)
        super(0);
        this.provider = provider;
        this.algorithm = algorithm;
        this.secureRandomSpi = secureRandomSpi;
!!!879131.java!!!	getInstance(inout algorithm : String) : SecureRandom
        if (algorithm == null) {
            throw new NullPointerException("algorithm == null");
        }
        Engine.SpiAndProvider sap = ENGINE.getInstance(algorithm, null);
        return new SecureRandom((SecureRandomSpi) sap.spi, sap.provider,
                                algorithm);
!!!879259.java!!!	getInstance(inout algorithm : String, inout provider : String) : SecureRandom
        if (provider == null || provider.isEmpty()) {
            throw new IllegalArgumentException();
        }
        Provider p = Security.getProvider(provider);
        if (p == null) {
            throw new NoSuchProviderException(provider);
        }
        return getInstance(algorithm, p);
!!!879387.java!!!	getInstance(inout algorithm : String, inout provider : Provider) : SecureRandom
        if (provider == null) {
            throw new IllegalArgumentException("provider == null");
        }
        if (algorithm == null) {
            throw new NullPointerException("algorithm == null");
        }
        Object spi = ENGINE.getInstance(algorithm, provider, null);
        return new SecureRandom((SecureRandomSpi) spi, provider, algorithm);
!!!879515.java!!!	getProvider() : Provider
        return provider;
!!!879643.java!!!	getAlgorithm() : String
        return algorithm;
!!!879771.java!!!	setSeed(inout seed : byte) : void
        secureRandomSpi.engineSetSeed(seed);
!!!879899.java!!!	setSeed(in seed : long) : void
        if (seed == 0) {    // skip call from Random
            return;
        }
        byte[] byteSeed = new byte[SizeOf.LONG];
        Memory.pokeLong(byteSeed, 0, seed, ByteOrder.BIG_ENDIAN);
        setSeed(byteSeed);
!!!880027.java!!!	nextBytes(inout bytes : byte) : void
        secureRandomSpi.engineNextBytes(bytes);
!!!880155.java!!!	next(in numBits : int) : int
        if (numBits < 0) {
            numBits = 0;
        } else {
            if (numBits > 32) {
                numBits = 32;
            }
        }
        int bytes = (numBits+7)/8;
        byte[] next = new byte[bytes];
        int ret = 0;

        nextBytes(next);
        for (int i = 0; i < bytes; i++) {
            ret = (next[i] & 0xFF) | (ret << 8);
        }
        ret = ret >>> (bytes*8 - numBits);
        return ret;
!!!880283.java!!!	getSeed(in numBytes : int) : byte
        SecureRandom result = internalSecureRandom;
        if (result == null) {
            // single-check idiom
            internalSecureRandom = result = new SecureRandom();
        }
        return result.generateSeed(numBytes);
!!!880411.java!!!	generateSeed(in numBytes : int) : byte
        return secureRandomSpi.engineGenerateSeed(numBytes);
