class SizeAdaptiveLayoutTest
!!!6320524.java!!!	setUp() : void
        super.setUp();

        // inflate the layout
        final Context context = getContext();
        mInflater = LayoutInflater.from(context);
        mOneU = 64;
        mFourU = 4 * mOneU;
!!!6320652.java!!!	inflate(in resource : int) : void
        mSizeAdaptiveLayout = (SizeAdaptiveLayout) mInflater.inflate(resource, null);
        mSizeAdaptiveLayout.onAttachedToWindow();

        mSmallView = mSizeAdaptiveLayout.findViewById(R.id.one_u);
        mMediumView = mSizeAdaptiveLayout.findViewById(R.id.two_u);
        mLargeView = mSizeAdaptiveLayout.findViewById(R.id.four_u);
!!!6320780.java!!!	testPreconditions() : void
        assertNotNull(mInflater);

        inflate(R.layout.size_adaptive);
        assertNotNull(mSizeAdaptiveLayout);
        assertNotNull(mSmallView);
        assertNotNull(mLargeView);
!!!6320908.java!!!	testOpenLarge() : void
        inflate(R.layout.size_adaptive);
        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        int height = (int) lp.minHeight + 10;

        measureAndLayout(height);

        assertEquals("4U should be visible",
                View.VISIBLE,
                mLargeView.getVisibility());
        assertEquals("1U should be gone",
                View.GONE,
                mSmallView.getVisibility());
!!!6321036.java!!!	testOpenSmall() : void
        inflate(R.layout.size_adaptive);
        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mSmallView.getLayoutParams();
        int height = (int) lp.minHeight;

        measureAndLayout(height);

        assertEquals("1U should be visible",
                View.VISIBLE,
                mSmallView.getVisibility());
        assertEquals("4U should be gone",
                View.GONE,
                mLargeView.getVisibility());
!!!6321164.java!!!	testOpenTooSmall() : void
        inflate(R.layout.size_adaptive);
        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mSmallView.getLayoutParams();
        int height = (int) lp.minHeight - 10;

        measureAndLayout(height);

        assertEquals("1U should be visible",
                View.VISIBLE,
                mSmallView.getVisibility());
        assertEquals("4U should be gone",
                View.GONE,
                mLargeView.getVisibility());
!!!6321292.java!!!	testOpenTooBig() : void
        inflate(R.layout.size_adaptive);
        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        lp.maxHeight = 500;
        mLargeView.setLayoutParams(lp);
        int height = (int) (lp.minHeight + 10);

        measureAndLayout(height);

        assertEquals("4U should be visible",
                View.VISIBLE,
                mLargeView.getVisibility());
        assertEquals("1U should be gone",
                View.GONE,
                mSmallView.getVisibility());
!!!6321420.java!!!	testOpenWrapContent() : void
        inflate(R.layout.size_adaptive_text);
        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        int height = (int) lp.minHeight + 10;

        // manually measure it, and lay it out
        int measureSpec = View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.AT_MOST);
        mSizeAdaptiveLayout.measure(500, measureSpec);
        assertTrue("should not be forced to 4U",
                mSizeAdaptiveLayout.getMeasuredHeight() < mFourU);
!!!6321548.java!!!	testOpenOneUOnlySmall() : void
        inflate(R.layout.size_adaptive_singleton);
        assertNull("largeView should be NULL in the singleton layout", mLargeView);

        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mSmallView.getLayoutParams();
        int height = (int) lp.minHeight - 10;

        measureAndLayout(height);

        assertEquals("1U should be visible",
                View.VISIBLE,
                mSmallView.getVisibility());
!!!6321676.java!!!	testOpenOneUOnlyLarge() : void
        inflate(R.layout.size_adaptive_singleton);
        assertNull("largeView should be NULL in the singleton layout", mLargeView);

        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mSmallView.getLayoutParams();
        int height = (int) lp.maxHeight + 10;

        measureAndLayout(height);

        assertEquals("1U should be visible",
                View.VISIBLE,
                mSmallView.getVisibility());
!!!6321804.java!!!	testOpenOneUOnlyJustRight() : void
        inflate(R.layout.size_adaptive_singleton);
        assertNull("largeView should be NULL in the singleton layout", mLargeView);

        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mSmallView.getLayoutParams();
        int height = (int) lp.minHeight;

        measureAndLayout(height);

        assertEquals("1U should be visible",
                View.VISIBLE,
                mSmallView.getVisibility());
!!!6321932.java!!!	testOpenFourUOnlySmall() : void
        inflate(R.layout.size_adaptive_large_only);
        assertNull("smallView should be NULL in the singleton layout", mSmallView);

        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        int height = (int) lp.minHeight - 10;

        measureAndLayout(height);

        assertEquals("4U should be visible",
                View.VISIBLE,
                mLargeView.getVisibility());
!!!6322060.java!!!	testOpenFourUOnlyLarge() : void
        inflate(R.layout.size_adaptive_large_only);
        assertNull("smallView should be NULL in the singleton layout", mSmallView);

        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        int height = (int) lp.maxHeight + 10;

        measureAndLayout(height);

        assertEquals("4U should be visible",
                View.VISIBLE,
                mLargeView.getVisibility());
!!!6322188.java!!!	testOpenFourUOnlyJustRight() : void
        inflate(R.layout.size_adaptive_large_only);
        assertNull("smallView should be NULL in the singleton layout", mSmallView);

        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        int height = (int) lp.minHeight;

        measureAndLayout(height);

        assertEquals("4U should be visible",
                View.VISIBLE,
                mLargeView.getVisibility());
!!!6322316.java!!!	testOpenIntoAGap() : void
        inflate(R.layout.size_adaptive_gappy);

        SizeAdaptiveLayout.LayoutParams smallParams =
          (SizeAdaptiveLayout.LayoutParams) mSmallView.getLayoutParams();
        SizeAdaptiveLayout.LayoutParams largeParams =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        assertTrue("gappy layout should have a gap",
                smallParams.maxHeight + 10 < largeParams.minHeight);
        int height = (int) smallParams.maxHeight + 10;

        measureAndLayout(height);

        assertTrue("one and only one view should be visible",
                mLargeView.getVisibility() != mSmallView.getVisibility());
        // behavior is undefined in this case.
!!!6322444.java!!!	testOpenIntoAnOverlap() : void
        inflate(R.layout.size_adaptive_overlapping);

        SizeAdaptiveLayout.LayoutParams smallParams =
          (SizeAdaptiveLayout.LayoutParams) mSmallView.getLayoutParams();
        SizeAdaptiveLayout.LayoutParams largeParams =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        assertEquals("overlapping layout should overlap",
                smallParams.minHeight,
                largeParams.minHeight);
        int height = (int) smallParams.maxHeight;

        measureAndLayout(height);

        assertTrue("one and only one view should be visible",
                mLargeView.getVisibility() != mSmallView.getVisibility());
        assertEquals("1U should get priority in an overlap because it is first",
                View.VISIBLE,
                mSmallView.getVisibility());
!!!6322572.java!!!	testOpenThreeWayViewSmall() : void
        inflate(R.layout.size_adaptive_three_way);
        assertNotNull("mMediumView should not be NULL in the three view layout", mMediumView);

        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mSmallView.getLayoutParams();
        int height = (int) lp.minHeight;

        measureAndLayout(height);

        assertEquals("1U should be visible",
                View.VISIBLE,
                mSmallView.getVisibility());
        assertEquals("2U should be gone",
                View.GONE,
                mMediumView.getVisibility());
        assertEquals("4U should be gone",
                View.GONE,
                mLargeView.getVisibility());
!!!6322700.java!!!	testOpenThreeWayViewMedium() : void
        inflate(R.layout.size_adaptive_three_way);
        assertNotNull("mMediumView should not be NULL in the three view layout", mMediumView);

        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mMediumView.getLayoutParams();
        int height = (int) lp.minHeight;

        measureAndLayout(height);

        assertEquals("1U should be gone",
                View.GONE,
                mSmallView.getVisibility());
        assertEquals("2U should be visible",
                View.VISIBLE,
                mMediumView.getVisibility());
        assertEquals("4U should be gone",
                View.GONE,
                mLargeView.getVisibility());
!!!6322828.java!!!	testOpenThreeWayViewLarge() : void
        inflate(R.layout.size_adaptive_three_way);
        assertNotNull("mMediumView should not be NULL in the three view layout", mMediumView);

        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        int height = (int) lp.minHeight;

        measureAndLayout(height);

        assertEquals("1U should be gone",
                View.GONE,
                mSmallView.getVisibility());
        assertEquals("2U should be gone",
                View.GONE,
                mMediumView.getVisibility());
        assertEquals("4U should be visible",
                View.VISIBLE,
                mLargeView.getVisibility());
!!!6322956.java!!!	testResizeWithoutAnimation() : void
        inflate(R.layout.size_adaptive);

        SizeAdaptiveLayout.LayoutParams largeParams =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        int startHeight = (int) largeParams.minHeight + 10;
        int endHeight = (int) largeParams.minHeight + 10;

        measureAndLayout(startHeight);

        assertEquals("4U should be visible",
                View.VISIBLE,
                mLargeView.getVisibility());
        assertFalse("There should be no animation on initial rendering.",
                    mSizeAdaptiveLayout.getTransitionAnimation().isRunning());

        measureAndLayout(endHeight);

        assertEquals("4U should still be visible",
                View.VISIBLE,
                mLargeView.getVisibility());
        assertFalse("There should be no animation on scale within a view.",
                    mSizeAdaptiveLayout.getTransitionAnimation().isRunning());
!!!6323084.java!!!	testResizeWithAnimation() : void
        inflate(R.layout.size_adaptive);

        SizeAdaptiveLayout.LayoutParams smallParams =
          (SizeAdaptiveLayout.LayoutParams) mSmallView.getLayoutParams();
        SizeAdaptiveLayout.LayoutParams largeParams =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        int startHeight = (int) largeParams.minHeight + 10;
        int endHeight = (int) smallParams.maxHeight;

        measureAndLayout(startHeight);

        assertEquals("4U should be visible",
                View.VISIBLE,
                mLargeView.getVisibility());
        assertFalse("There should be no animation on initial rendering.",
                    mSizeAdaptiveLayout.getTransitionAnimation().isRunning());

        measureAndLayout(endHeight);

        assertEquals("1U should now be visible",
                View.VISIBLE,
                mSmallView.getVisibility());
        assertTrue("There should be an animation on scale between views.",
                   mSizeAdaptiveLayout.getTransitionAnimation().isRunning());
!!!6323212.java!!!	testModestyPanelChangesColorWhite() : void
        inflate(R.layout.size_adaptive_color);
        View panel = mSizeAdaptiveLayout.getModestyPanel();
        assertTrue("ModestyPanel should have a ColorDrawable background",
                   panel.getBackground() instanceof ColorDrawable);
        ColorDrawable panelColor = (ColorDrawable) panel.getBackground();
        ColorDrawable salColor = (ColorDrawable) mSizeAdaptiveLayout.getBackground();
        assertEquals("ModestyPanel color should match the SizeAdaptiveLayout",
                     panelColor.getColor(), salColor.getColor());
!!!6323340.java!!!	testModestyPanelTracksStateListColor() : void
        inflate(R.layout.size_adaptive_color_statelist);
        View panel = mSizeAdaptiveLayout.getModestyPanel();
        assertEquals("ModestyPanel should have a ColorDrawable background" ,
                     panel.getBackground().getClass(), ColorDrawable.class);
        ColorDrawable panelColor = (ColorDrawable) panel.getBackground();
        assertEquals("ModestyPanel color should match the SizeAdaptiveLayout",
                     panelColor.getColor(), Color.RED);
!!!6323468.java!!!	testModestyPanelHasDefault() : void
        inflate(R.layout.size_adaptive);
        View panel = mSizeAdaptiveLayout.getModestyPanel();
        assertNull("SizeAdaptiveLayout should have no background for this test",
                     mSizeAdaptiveLayout.getBackground());
        assertTrue("ModestyPanel should have a ColorDrawable background",
                   panel.getBackground() instanceof ColorDrawable);
!!!6323596.java!!!	testOpenSmallEvenWhenLargeIsActuallySmall() : void
        inflate(R.layout.size_adaptive_lies);
        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mSmallView.getLayoutParams();
        int height = (int) lp.minHeight;

        measureAndLayout(height);

        assertEquals("1U should be visible",
                View.VISIBLE,
                mSmallView.getVisibility());
        assertTrue("1U should also have been measured",
                   mSmallView.getMeasuredHeight() > 0);
!!!6323724.java!!!	testOpenLargeEvenWhenLargeIsActuallySmall() : void
        inflate(R.layout.size_adaptive_lies);
        SizeAdaptiveLayout.LayoutParams lp =
          (SizeAdaptiveLayout.LayoutParams) mLargeView.getLayoutParams();
        int height = (int) lp.minHeight;

        measureAndLayout(height);

        assertEquals("4U should be visible",
                View.VISIBLE,
                mLargeView.getVisibility());
        assertTrue("4U should also have been measured",
                   mLargeView.getMeasuredHeight() > 0);
!!!6323852.java!!!	measureAndLayout(in height : int) : void
        // manually measure it, and lay it out
        int measureSpec = View.MeasureSpec.makeMeasureSpec(height, View.MeasureSpec.AT_MOST);
        mSizeAdaptiveLayout.measure(500, measureSpec);
        mSizeAdaptiveLayout.layout(0, 0, 500, mSizeAdaptiveLayout.getMeasuredHeight());
