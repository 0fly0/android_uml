class ByteBufferAsCharBuffer
!!!666395.java!!!	asCharBuffer(inout byteBuffer : ByteBuffer) : CharBuffer
        ByteBuffer slice = byteBuffer.slice();
        slice.order(byteBuffer.order());
        return new ByteBufferAsCharBuffer(slice);
!!!666523.java!!!	ByteBufferAsCharBuffer(inout byteBuffer : ByteBuffer)
        super(byteBuffer.capacity() / SizeOf.CHAR);
        this.byteBuffer = byteBuffer;
        this.byteBuffer.clear();
        this.effectiveDirectAddress = byteBuffer.effectiveDirectAddress;
!!!666651.java!!!	asReadOnlyBuffer() : CharBuffer
        ByteBufferAsCharBuffer buf = new ByteBufferAsCharBuffer(byteBuffer.asReadOnlyBuffer());
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        buf.byteBuffer.order = byteBuffer.order;
        return buf;
!!!666779.java!!!	compact() : CharBuffer
        if (byteBuffer.isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        byteBuffer.limit(limit * SizeOf.CHAR);
        byteBuffer.position(position * SizeOf.CHAR);
        byteBuffer.compact();
        byteBuffer.clear();
        position = limit - position;
        limit = capacity;
        mark = UNSET_MARK;
        return this;
!!!666907.java!!!	duplicate() : CharBuffer
        ByteBuffer bb = byteBuffer.duplicate().order(byteBuffer.order());
        ByteBufferAsCharBuffer buf = new ByteBufferAsCharBuffer(bb);
        buf.limit = limit;
        buf.position = position;
        buf.mark = mark;
        return buf;
!!!667035.java!!!	get() : char
        if (position == limit) {
            throw new BufferUnderflowException();
        }
        return byteBuffer.getChar(position++ * SizeOf.CHAR);
!!!667163.java!!!	get(in index : int) : char
        checkIndex(index);
        return byteBuffer.getChar(index * SizeOf.CHAR);
!!!667291.java!!!	get(inout dst : char, in dstOffset : int, in charCount : int) : CharBuffer
        byteBuffer.limit(limit * SizeOf.CHAR);
        byteBuffer.position(position * SizeOf.CHAR);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).get(dst, dstOffset, charCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).get(dst, dstOffset, charCount);
        }
        this.position += charCount;
        return this;
!!!667419.java!!!	isDirect() : boolean
        return byteBuffer.isDirect();
!!!667547.java!!!	isReadOnly() : boolean
        return byteBuffer.isReadOnly();
!!!667675.java!!!	order() : ByteOrder
        return byteBuffer.order();
!!!667803.java!!!	protectedArray() : char
        throw new UnsupportedOperationException();
!!!667931.java!!!	protectedArrayOffset() : int
        throw new UnsupportedOperationException();
!!!668059.java!!!	protectedHasArray() : boolean
        return false;
!!!668187.java!!!	put(in c : char) : CharBuffer
        if (position == limit) {
            throw new BufferOverflowException();
        }
        byteBuffer.putChar(position++ * SizeOf.CHAR, c);
        return this;
!!!668315.java!!!	put(in index : int, in c : char) : CharBuffer
        checkIndex(index);
        byteBuffer.putChar(index * SizeOf.CHAR, c);
        return this;
!!!668443.java!!!	put(inout src : char, in srcOffset : int, in charCount : int) : CharBuffer
        byteBuffer.limit(limit * SizeOf.CHAR);
        byteBuffer.position(position * SizeOf.CHAR);
        if (byteBuffer instanceof DirectByteBuffer) {
            ((DirectByteBuffer) byteBuffer).put(src, srcOffset, charCount);
        } else {
            ((ByteArrayBuffer) byteBuffer).put(src, srcOffset, charCount);
        }
        this.position += charCount;
        return this;
!!!668571.java!!!	slice() : CharBuffer
        byteBuffer.limit(limit * SizeOf.CHAR);
        byteBuffer.position(position * SizeOf.CHAR);
        ByteBuffer bb = byteBuffer.slice().order(byteBuffer.order());
        CharBuffer result = new ByteBufferAsCharBuffer(bb);
        byteBuffer.clear();
        return result;
!!!668699.java!!!	subSequence(in start : int, in end : int) : CharSequence
        checkStartEndRemaining(start, end);
        CharBuffer result = duplicate();
        result.limit(position + end);
        result.position(position + start);
        return result;
