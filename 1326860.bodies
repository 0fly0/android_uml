class KeyguardUpdateMonitor
!!!7961612.java!!!	KeyguardUpdateMonitor(inout context : Context)
        mContext = context;

        mDeviceProvisioned = Settings.Global.getInt(
                mContext.getContentResolver(), Settings.Global.DEVICE_PROVISIONED, 0) != 0;

        // Since device can't be un-provisioned, we only need to register a content observer
        // to update mDeviceProvisioned when we are...
        if (!mDeviceProvisioned) {
            watchForDeviceProvisioning();
        }

        // Take a guess at initial SIM state, battery status and PLMN until we get an update
        mSimState = IccCardConstants.State.NOT_READY;
        mBatteryStatus = new BatteryStatus(BATTERY_STATUS_UNKNOWN, 100, 0, 0);
        mTelephonyPlmn = getDefaultPlmn();

        // Watch for interesting updates
        final IntentFilter filter = new IntentFilter();
        filter.addAction(Intent.ACTION_TIME_TICK);
        filter.addAction(Intent.ACTION_TIME_CHANGED);
        filter.addAction(Intent.ACTION_BATTERY_CHANGED);
        filter.addAction(Intent.ACTION_TIMEZONE_CHANGED);
        filter.addAction(TelephonyIntents.ACTION_SIM_STATE_CHANGED);
        filter.addAction(TelephonyManager.ACTION_PHONE_STATE_CHANGED);
        filter.addAction(TelephonyIntents.SPN_STRINGS_UPDATED_ACTION);
        filter.addAction(AudioManager.RINGER_MODE_CHANGED_ACTION);
        filter.addAction(DevicePolicyManager.ACTION_DEVICE_POLICY_MANAGER_STATE_CHANGED);
        filter.addAction(Intent.ACTION_USER_SWITCHED);
        filter.addAction(Intent.ACTION_USER_REMOVED);
        context.registerReceiver(mBroadcastReceiver, filter);
!!!7961740.java!!!	watchForDeviceProvisioning() : void
        mContentObserver = new ContentObserver(mHandler) {
            @Override
            public void onChange(boolean selfChange) {
                super.onChange(selfChange);
                mDeviceProvisioned = Settings.Global.getInt(mContext.getContentResolver(),
                    Settings.Global.DEVICE_PROVISIONED, 0) != 0;
                if (mDeviceProvisioned) {
                    mHandler.sendMessage(mHandler.obtainMessage(MSG_DEVICE_PROVISIONED));
                }
                if (DEBUG) Log.d(TAG, "DEVICE_PROVISIONED state = " + mDeviceProvisioned);
            }
        };

        mContext.getContentResolver().registerContentObserver(
                Settings.Global.getUriFor(Settings.Global.DEVICE_PROVISIONED),
                false, mContentObserver);

        // prevent a race condition between where we check the flag and where we register the
        // observer by grabbing the value once again...
        boolean provisioned = Settings.Global.getInt(mContext.getContentResolver(),
            Settings.Global.DEVICE_PROVISIONED, 0) != 0;
        if (provisioned != mDeviceProvisioned) {
            mDeviceProvisioned = provisioned;
            if (mDeviceProvisioned) {
                mHandler.sendMessage(mHandler.obtainMessage(MSG_DEVICE_PROVISIONED));
            }
        }
!!!7961868.java!!!	handleDevicePolicyManagerStateChanged() : void
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onDevicePolicyManagerStateChanged();
        }
!!!7961996.java!!!	handleUserSwitched(in userId : int) : void
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onUserSwitched(userId);
        }
!!!7962124.java!!!	handleUserRemoved(in userId : int) : void
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onUserRemoved(userId);
        }
!!!7962252.java!!!	handleDeviceProvisioned() : void
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onDeviceProvisioned();
        }
        if (mContentObserver != null) {
            // We don't need the observer anymore...
            mContext.getContentResolver().unregisterContentObserver(mContentObserver);
            mContentObserver = null;
        }
!!!7962380.java!!!	handlePhoneStateChanged(in newState : String) : void
        if (DEBUG) Log.d(TAG, "handlePhoneStateChanged(" + newState + ")");
        if (TelephonyManager.EXTRA_STATE_IDLE.equals(newState)) {
            mPhoneState = TelephonyManager.CALL_STATE_IDLE;
        } else if (TelephonyManager.EXTRA_STATE_OFFHOOK.equals(newState)) {
            mPhoneState = TelephonyManager.CALL_STATE_OFFHOOK;
        } else if (TelephonyManager.EXTRA_STATE_RINGING.equals(newState)) {
            mPhoneState = TelephonyManager.CALL_STATE_RINGING;
        }
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onPhoneStateChanged(mPhoneState);
        }
!!!7962508.java!!!	handleRingerModeChange(in mode : int) : void
        if (DEBUG) Log.d(TAG, "handleRingerModeChange(" + mode + ")");
        mRingMode = mode;
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onRingerModeChanged(mode);
        }
!!!7962636.java!!!	handleTimeUpdate() : void
        if (DEBUG) Log.d(TAG, "handleTimeUpdate");
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onTimeChanged();
        }
!!!7962764.java!!!	handleBatteryUpdate(inout status : BatteryStatus) : void
        if (DEBUG) Log.d(TAG, "handleBatteryUpdate");
        final boolean batteryUpdateInteresting = isBatteryUpdateInteresting(mBatteryStatus, status);
        mBatteryStatus = status;
        if (batteryUpdateInteresting) {
            for (int i = 0; i < mCallbacks.size(); i++) {
                mCallbacks.get(i).onRefreshBatteryInfo(status);
            }
        }
!!!7962892.java!!!	handleCarrierInfoUpdate() : void
        if (DEBUG) Log.d(TAG, "handleCarrierInfoUpdate: plmn = " + mTelephonyPlmn
            + ", spn = " + mTelephonySpn);

        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onRefreshCarrierInfo(mTelephonyPlmn, mTelephonySpn);
        }
!!!7963020.java!!!	handleSimStateChange(inout simArgs : SimArgs) : void
        final IccCardConstants.State state = simArgs.simState;

        if (DEBUG) {
            Log.d(TAG, "handleSimStateChange: intentValue = " + simArgs + " "
                    + "state resolved to " + state.toString());
        }

        if (state != IccCardConstants.State.UNKNOWN && state != mSimState) {
            mSimState = state;
            for (int i = 0; i < mCallbacks.size(); i++) {
                mCallbacks.get(i).onSimStateChanged(state);
            }
        }
!!!7963148.java!!!	handleClockVisibilityChanged() : void
        if (DEBUG) Log.d(TAG, "handleClockVisibilityChanged()");
        for (int i = 0; i < mCallbacks.size(); i++) {
            mCallbacks.get(i).onClockVisibilityChanged();
        }
!!!7963276.java!!!	isBatteryUpdateInteresting(inout old : BatteryStatus, inout current : BatteryStatus) : boolean
        final boolean nowPluggedIn = current.isPluggedIn();
        final boolean wasPluggedIn = old.isPluggedIn();
        final boolean stateChangedWhilePluggedIn =
            wasPluggedIn == true && nowPluggedIn == true
            && (old.status != current.status);

        // change in plug state is always interesting
        if (wasPluggedIn != nowPluggedIn || stateChangedWhilePluggedIn) {
            return true;
        }

        // change in battery level while plugged in
        if (nowPluggedIn && old.level != current.level) {
            return true;
        }

        // change where battery needs charging
        if (!nowPluggedIn && current.isBatteryLow() && current.level != old.level) {
            return true;
        }
        return false;
!!!7963404.java!!!	getTelephonyPlmnFrom(inout intent : Intent) : CharSequence
        if (intent.getBooleanExtra(TelephonyIntents.EXTRA_SHOW_PLMN, false)) {
            final String plmn = intent.getStringExtra(TelephonyIntents.EXTRA_PLMN);
            return (plmn != null) ? plmn : getDefaultPlmn();
        }
        return null;
!!!7963532.java!!!	getDefaultPlmn() : CharSequence
        return mContext.getResources().getText(R.string.lockscreen_carrier_default);
!!!7963660.java!!!	getTelephonySpnFrom(inout intent : Intent) : CharSequence
        if (intent.getBooleanExtra(TelephonyIntents.EXTRA_SHOW_SPN, false)) {
            final String spn = intent.getStringExtra(TelephonyIntents.EXTRA_SPN);
            if (spn != null) {
                return spn;
            }
        }
        return null;
!!!7963788.java!!!	removeCallback(inout observer : Object) : void
        mCallbacks.remove(observer);
!!!7963916.java!!!	registerCallback(inout callback : KeyguardUpdateMonitorCallback) : void
        if (!mCallbacks.contains(callback)) {
            mCallbacks.add(callback);
            // Notify listener of the current state
            callback.onRefreshBatteryInfo(mBatteryStatus);
            callback.onTimeChanged();
            callback.onRingerModeChanged(mRingMode);
            callback.onPhoneStateChanged(mPhoneState);
            callback.onRefreshCarrierInfo(mTelephonyPlmn, mTelephonySpn);
            callback.onClockVisibilityChanged();
            callback.onSimStateChanged(mSimState);
        } else {
            if (DEBUG) Log.e(TAG, "Object tried to add another callback",
                    new Exception("Called by"));
        }
!!!7964044.java!!!	reportClockVisible(inout visible : boolean) : void
        mClockVisible = visible;
        mHandler.obtainMessage(MSG_CLOCK_VISIBILITY_CHANGED).sendToTarget();
!!!7964172.java!!!	getSimState() : State
        return mSimState;
!!!7964300.java!!!	reportSimUnlocked() : void
        handleSimStateChange(new SimArgs(IccCardConstants.State.READY));
!!!7964428.java!!!	getTelephonyPlmn() : CharSequence
        return mTelephonyPlmn;
!!!7964556.java!!!	getTelephonySpn() : CharSequence
        return mTelephonySpn;
!!!7964684.java!!!	isDeviceProvisioned() : boolean
        return mDeviceProvisioned;
!!!7964812.java!!!	getFailedAttempts() : int
        return mFailedAttempts;
!!!7964940.java!!!	clearFailedAttempts() : void
        mFailedAttempts = 0;
        mFailedBiometricUnlockAttempts = 0;
!!!7965068.java!!!	reportFailedAttempt() : void
        mFailedAttempts++;
!!!7965196.java!!!	isClockVisible() : boolean
        return mClockVisible;
!!!7965324.java!!!	getPhoneState() : int
        return mPhoneState;
!!!7965452.java!!!	reportFailedBiometricUnlockAttempt() : void
        mFailedBiometricUnlockAttempts++;
!!!7965580.java!!!	getMaxBiometricUnlockAttemptsReached() : boolean
        return mFailedBiometricUnlockAttempts >= FAILED_BIOMETRIC_UNLOCK_ATTEMPTS_BEFORE_BACKUP;
!!!7965708.java!!!	isSimLocked() : boolean
        return mSimState == IccCardConstants.State.PIN_REQUIRED
            || mSimState == IccCardConstants.State.PUK_REQUIRED
            || mSimState == IccCardConstants.State.PERM_DISABLED;
