class ShortBuffer
!!!692379.java!!!	allocate(in capacity : int) : ShortBuffer
        if (capacity < 0) {
            throw new IllegalArgumentException("capacity < 0: " + capacity);
        }
        return new ShortArrayBuffer(new short[capacity]);
!!!692507.java!!!	wrap(inout array : short) : ShortBuffer
        return wrap(array, 0, array.length);
!!!692635.java!!!	wrap(inout array : short, in start : int, in shortCount : int) : ShortBuffer
        Arrays.checkOffsetAndCount(array.length, start, shortCount);
        ShortBuffer buf = new ShortArrayBuffer(array);
        buf.position = start;
        buf.limit = start + shortCount;
        return buf;
!!!692763.java!!!	ShortBuffer(in capacity : int)
        super(1, capacity, null);
!!!692891.java!!!	array() : short
        return protectedArray();
!!!693019.java!!!	arrayOffset() : int
        return protectedArrayOffset();
!!!693403.java!!!	compareTo(inout otherBuffer : ShortBuffer) : int
        int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining()
                : otherBuffer.remaining();
        int thisPos = position;
        int otherPos = otherBuffer.position;
        short thisByte, otherByte;
        while (compareRemaining > 0) {
            thisByte = get(thisPos);
            otherByte = otherBuffer.get(otherPos);
            if (thisByte != otherByte) {
                return thisByte < otherByte ? -1 : 1;
            }
            thisPos++;
            otherPos++;
            compareRemaining--;
        }
        return remaining() - otherBuffer.remaining();
!!!693659.java!!!	equals(inout other : Object) : boolean
        if (!(other instanceof ShortBuffer)) {
            return false;
        }
        ShortBuffer otherBuffer = (ShortBuffer) other;

        if (remaining() != otherBuffer.remaining()) {
            return false;
        }

        int myPosition = position;
        int otherPosition = otherBuffer.position;
        boolean equalSoFar = true;
        while (equalSoFar && (myPosition < limit)) {
            equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);
        }

        return equalSoFar;
!!!693915.java!!!	get(inout dst : short) : ShortBuffer
        return get(dst, 0, dst.length);
!!!694043.java!!!	get(inout dst : short, in dstOffset : int, in shortCount : int) : ShortBuffer
        Arrays.checkOffsetAndCount(dst.length, dstOffset, shortCount);
        if (shortCount > remaining()) {
            throw new BufferUnderflowException();
        }
        for (int i = dstOffset; i < dstOffset + shortCount; ++i) {
            dst[i] = get();
        }
        return this;
!!!694299.java!!!	hasArray() : boolean
        return protectedHasArray();
!!!694427.java!!!	hashCode() : int
        int myPosition = position;
        int hash = 0;
        while (myPosition < limit) {
            hash = hash + get(myPosition++);
        }
        return hash;
!!!695323.java!!!	put(inout src : short) : ShortBuffer
        return put(src, 0, src.length);
!!!695451.java!!!	put(inout src : short, in srcOffset : int, in shortCount : int) : ShortBuffer
        Arrays.checkOffsetAndCount(src.length, srcOffset, shortCount);
        if (shortCount > remaining()) {
            throw new BufferOverflowException();
        }
        for (int i = srcOffset; i < srcOffset + shortCount; ++i) {
            put(src[i]);
        }
        return this;
!!!695579.java!!!	put(inout src : ShortBuffer) : ShortBuffer
        if (isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        if (src == this) {
            throw new IllegalArgumentException("src == this");
        }
        if (src.remaining() > remaining()) {
            throw new BufferOverflowException();
        }
        short[] contents = new short[src.remaining()];
        src.get(contents);
        put(contents);
        return this;
