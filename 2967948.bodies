class CecManager
!!!12042252.java!!!	CecManager(inout context : Context)
        mContext = context;
        if (null == mContext) {
            Log.e(TAG, "FATAL ERROR!!! the context passed in is null!");
        }
!!!12042380.java!!!	connect() : boolean
        if (mConnected) {
            return false;
        }
        Intent bindCECIntent = new Intent(HdmiCecUtils.ACTION_BIND_HDMI_CEC_SERVICE);
        synchronized (this) {
            if (!mContext.bindService(bindCECIntent, this, Context.BIND_AUTO_CREATE)) {
                return false;
            }
            mConnected = true;
            return true;
        }
!!!12042508.java!!!	disconnect() : void
        if (!mConnected) {
            return;
        }
        synchronized (this) {
            mContext.unbindService(this);
            mConnected = false;
        }
!!!12042636.java!!!	getSettingItem(inout context : Context, in key : String, in defValue : int) : boolean
        if (null == context || null == key) {
            return false;
        } else {
            return (Settings.System.getInt(context.getContentResolver(), key, defValue) == 1);
        }
!!!12042764.java!!!	isCECEnabled() : boolean
        return getSettingItem(mContext, HdmiCecUtils.HDMI_CEC_ENABLE_KEY, 0);
!!!12042892.java!!!	isCECEnabled(inout context : Context) : boolean
        return getSettingItem(context, HdmiCecUtils.HDMI_CEC_ENABLE_KEY, 0);
!!!12043020.java!!!	enableCECInternal(inout enable : boolean) : void
        Settings.System.putInt(mContext.getContentResolver(),
            HdmiCecUtils.HDMI_CEC_ENABLE_KEY, enable ? 1 : 0);
!!!12043148.java!!!	enableCEC() : void
        enableCECInternal(true);
!!!12043276.java!!!	disableCEC() : void
        enableCECInternal(false);
!!!12043404.java!!!	enableSystemAudioModeInternal(inout on : boolean) : void
        Settings.System.putInt(mContext.getContentResolver(),
            HdmiCecUtils.HDMI_CEC_SAC_KEY, on ? 1 : 0);
!!!12043532.java!!!	isSystemAudioModeEnabled() : boolean
        return getSettingItem(mContext, HdmiCecUtils.HDMI_CEC_SAC_KEY, 0);
!!!12043660.java!!!	isSystemAudioModeEnabled(inout context : Context) : boolean
        return getSettingItem(context, HdmiCecUtils.HDMI_CEC_SAC_KEY, 0);
!!!12043788.java!!!	enableSystemAudioMode() : void
        enableSystemAudioModeInternal(true);
!!!12043916.java!!!	disableSystemAudioMode() : void
        enableSystemAudioModeInternal(false);
!!!12044044.java!!!	enableTVAutoPowerOnInternal(inout on : boolean) : void
        Settings.System.putInt(mContext.getContentResolver(),
            HdmiCecUtils.HDMI_CEC_AUTO_POWER_ON_KEY, on ? 1 : 0);
!!!12044172.java!!!	isTVAutoPowerOnEnabled() : boolean
        return getSettingItem(mContext,
                              HdmiCecUtils.HDMI_CEC_AUTO_POWER_ON_KEY,
                              0);
!!!12044300.java!!!	isTVAutoPowerOnEnabled(inout context : Context) : boolean
        return getSettingItem(context, HdmiCecUtils.HDMI_CEC_AUTO_POWER_ON_KEY, 0);
!!!12044428.java!!!	enableTVAutoPowerOn() : void
        enableTVAutoPowerOnInternal(true);
!!!12044556.java!!!	disableTVAutoPowerOn() : void
        enableTVAutoPowerOnInternal(false);
!!!12044684.java!!!	enableDeviceAutoPowerOffInternal(inout on : boolean) : void
        Settings.System.putInt(mContext.getContentResolver(),
            HdmiCecUtils.HDMI_CEC_DEVICE_AUTO_POWER_OFF_KEY, on ? 1 : 0);
!!!12044812.java!!!	isDeviceAutoPowerOffEnabled() : boolean
        return getSettingItem(mContext,
                              HdmiCecUtils.HDMI_CEC_DEVICE_AUTO_POWER_OFF_KEY,
                              0);
!!!12044940.java!!!	isDeviceAutoPowerOffEnabled(inout context : Context) : boolean
        return getSettingItem(context, HdmiCecUtils.HDMI_CEC_DEVICE_AUTO_POWER_OFF_KEY, 0);
!!!12045068.java!!!	enableDeviceAutoPowerOff() : void
        enableDeviceAutoPowerOffInternal(true);
!!!12045196.java!!!	disableDeviceAutoPowerOff() : void
        enableDeviceAutoPowerOffInternal(false);
!!!12045324.java!!!	registerCecSrvConnectionListener(inout clientListener : CecSrvConnectionListener) : void
        mCecSrvConnectionListener = clientListener;
!!!12045452.java!!!	unregisterCecSrvConnectionListener(inout clientListener : CecSrvConnectionListener) : void
        if (clientListener != null && mCecSrvConnectionListener == clientListener) {
            if (DEBUG) {
                Log.d(TAG, "The previously registerred listener(" + mCecSrvConnectionListener + ")"
                    + " is unregisterred!");
            }
            mCecSrvConnectionListener = null;
        } else {
            Log.e(TAG, "The CecSrvConnectionListener(" + clientListener +
                ")  to be unregisterred is different from the previously registerred" +
                "(" + mCecSrvConnectionListener + ")");
        }
!!!12045580.java!!!	onServiceConnected(inout name : ComponentName, inout service : IBinder) : void
        if (DEBUG) {
            Log.d(TAG, "onServiceConnected");
        }
        if (null == service) {
            Log.e(TAG, "Remote CEC service connected, return a null IBinder object!");
            return;
        }
        mCecServiceHub = ICecServiceHub.Stub.asInterface(service);
        if (null == mCecServiceHub) {
            Log.e(TAG, "Construct BP binder from remote binder error!");
            return;
        }
        try {
            if (null != mCecSrvConnectionListener) {
                mCecSrvConnectionListener.onCecServiceConnected(mCecServiceHub.getCecService(),
                    mCecServiceHub.getCecDeviceType());
            }
        } catch (RemoteException re) {
            Log.e(TAG, "Error occurred when do binder call!");
        }
!!!12045708.java!!!	onServiceDisconnected(inout name : ComponentName) : void
        if (DEBUG) {
            Log.d(TAG, "onServiceDisconnected");
        }
        if (null != mCecSrvConnectionListener) {
            mCecSrvConnectionListener.onCecServiceDisconnected();
        }
        mCecServiceHub = null;
