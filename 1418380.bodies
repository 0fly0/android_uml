class UserManagerTest
!!!8789900.java!!!	setUp() : void
        mUserManager = (UserManager) getContext().getSystemService(Context.USER_SERVICE);
        IntentFilter filter = new IntentFilter(Intent.ACTION_USER_REMOVED);
        getContext().registerReceiver(new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                synchronized (mUserLock) {
                    mUserLock.notifyAll();
                }
            }
        }, filter);
!!!8790028.java!!!	testHasPrimary() : void
        assertTrue(findUser(0));
!!!8790156.java!!!	testAddUser() : void
        UserInfo userInfo = mUserManager.createUser("Guest 1", UserInfo.FLAG_GUEST);
        assertTrue(userInfo != null);

        List<UserInfo> list = mUserManager.getUsers();
        boolean found = false;
        for (UserInfo user : list) {
            if (user.id == userInfo.id && user.name.equals("Guest 1")
                    && user.isGuest()
                    && !user.isAdmin()
                    && !user.isPrimary()) {
                found = true;
            }
        }
        assertTrue(found);
        removeUser(userInfo.id);
!!!8790284.java!!!	testAdd2Users() : void
        UserInfo user1 = mUserManager.createUser("Guest 1", UserInfo.FLAG_GUEST);
        UserInfo user2 = mUserManager.createUser("User 2", UserInfo.FLAG_ADMIN);

        assertTrue(user1 != null);
        assertTrue(user2 != null);

        assertTrue(findUser(0));
        assertTrue(findUser(user1.id));
        assertTrue(findUser(user2.id));
        removeUser(user1.id);
        removeUser(user2.id);
!!!8790412.java!!!	testRemoveUser() : void
        UserInfo userInfo = mUserManager.createUser("Guest 1", UserInfo.FLAG_GUEST);
        removeUser(userInfo.id);

        assertFalse(findUser(userInfo.id));
!!!8790540.java!!!	findUser(in id : int) : boolean
        List<UserInfo> list = mUserManager.getUsers();

        for (UserInfo user : list) {
            if (user.id == id) {
                return true;
            }
        }
        return false;
!!!8790668.java!!!	testSerialNumber() : void
        UserInfo user1 = mUserManager.createUser("User 1", UserInfo.FLAG_RESTRICTED);
        int serialNumber1 = user1.serialNumber;
        assertEquals(serialNumber1, mUserManager.getUserSerialNumber(user1.id));
        assertEquals(user1.id, mUserManager.getUserHandle(serialNumber1));
        removeUser(user1.id);
        UserInfo user2 = mUserManager.createUser("User 2", UserInfo.FLAG_RESTRICTED);
        int serialNumber2 = user2.serialNumber;
        assertFalse(serialNumber1 == serialNumber2);
        assertEquals(serialNumber2, mUserManager.getUserSerialNumber(user2.id));
        assertEquals(user2.id, mUserManager.getUserHandle(serialNumber2));
        removeUser(user2.id);
!!!8790796.java!!!	testMaxUsers() : void
        int N = UserManager.getMaxSupportedUsers();
        int count = mUserManager.getUsers().size();
        List<UserInfo> created = new ArrayList<UserInfo>();
        // Create as many users as permitted and make sure creation passes
        while (count < N) {
            UserInfo ui = mUserManager.createUser("User " + count, 0);
            assertNotNull(ui);
            created.add(ui);
            count++;
        }
        // Try to create one more user and make sure it fails
        UserInfo extra = null;
        assertNull(extra = mUserManager.createUser("One more", 0));
        if (extra != null) {
            removeUser(extra.id);
        }
        while (!created.isEmpty()) {
            UserInfo user = created.remove(0);
            removeUser(user.id);
        }
!!!8790924.java!!!	removeUser(in userId : int) : void
        synchronized (mUserLock) {
            mUserManager.removeUser(userId);
            while (mUserManager.getUserInfo(userId) != null) {
                try {
                    mUserLock.wait(1000);
                } catch (InterruptedException ie) {
                }
            }
        }
