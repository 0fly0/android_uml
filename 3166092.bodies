class QuickListItemView
!!!13446796.java!!!	QuickListItemView(inout context : Context)
        this(context, null);
!!!13446924.java!!!	QuickListItemView(inout context : Context, inout attrs : AttributeSet)
        super(context, attrs);
        mState = State.NORMAL;
        mQuickListIndex = -1;
!!!13447052.java!!!	getContextMenuInfo() : ContextMenuInfo
        LauncherItemContextMenuInfo info = new LauncherItemContextMenuInfo(
                LauncherItemContextMenuInfo.Source.QUICKLIST, mInfo);
        info.setQuickListIndex(mQuickListIndex);
        info.setTargetView(this);
        return info;
!!!13447180.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        if (getState() == State.MOVING && isMoveKey(keyCode)) {
            boolean forward = keyCode == KeyEvent.KEYCODE_DPAD_RIGHT;
            int delta = mMoveDelta + (forward ? 1 : -1);
            if (mListener != null) {
                mListener.onMoveViewRequested(this, delta, forward);
            }
            return true;
        } else if (Keys.shouldTriggerEdit(keyCode, event)) {
            showContextMenu();
            return true;
        }
        return super.onKeyDown(keyCode, event);
!!!13447308.java!!!	onFocusLost() : void
        if (getState() == State.MOVING) {
            boolean editing = true;
            if (getParent() instanceof DockView) {
                // Check if the parent is in editing state or if it's normal.
                // If normal, this was triggered by a long press and we should return to normal
                // not editing.
                editing = ((DockView) getParent()).isEditing();
            }            
            setState(editing ? State.EDITING : State.NORMAL);
        }
        super.onFocusLost();
!!!13447436.java!!!	setIconCache(inout iconCache : IconCache) : void
        mIconCache = iconCache;
!!!13447564.java!!!	setItem(inout info : LauncherItemInfo) : void
        mInfo = info;
        updateButtonItem();
!!!13447692.java!!!	getItem() : LauncherItemInfo
        return mInfo;
!!!13447820.java!!!	setState(inout state : State) : void
        mState = state;
        int level = 0;
        boolean focusableInTouchMode = false;
        if (mState == State.MOVING) {
            level = 2;
        } else if (mState == State.EDITING) {
            level = 1;
            // In editing mode, set focusable in touch mode so that transition to moving works from
            // a click.
            focusableInTouchMode = true;
        }
        getBackground().setLevel(level);
        setFocusableInTouchMode(focusableInTouchMode);
!!!13447948.java!!!	getState() : State
        return mState;
!!!13448076.java!!!	setQuickListIndex(in index : int) : void
        mQuickListIndex = index;
!!!13448204.java!!!	getQuickListIndex() : int
        return mQuickListIndex;
!!!13448332.java!!!	setListener(inout listener : Listener) : void
        mListener = listener;
!!!13448460.java!!!	getMoveDelta() : int
        return mMoveDelta;
!!!13448588.java!!!	setMoveDelta(in delta : int) : void
        mMoveDelta = delta;
!!!13448716.java!!!	updateButtonItem() : void
        if (mInfo == null) {
            setImageDrawable(null);
            setContentDescription(getContext().getResources().getString(
                    R.string.content_description_empty_slot));
        } else {
            LauncherItemDrawable drawable = new LauncherItemDrawable();
            drawable.setLauncherItemInfo(mInfo, mIconCache);
            drawable.setOutlineDisabled(true);
            if (drawable.getIntrinsicHeight() == 0) {
                setImageDrawable(mIconCache.getDefaultIcon());
            } else {
                setImageDrawable(drawable);
            }
            setContentDescription(mInfo.getTitle());
        }
!!!13448844.java!!!	isMoveKey(in keyCode : int) : boolean
        return keyCode == KeyEvent.KEYCODE_DPAD_LEFT || keyCode == KeyEvent.KEYCODE_DPAD_RIGHT;
