class Type
!!!1421580.cpp!!!	Type(in name : string, in kind : int, in canWriteToParcel : bool, in canWriteToRpcData : bool, in canBeOut : bool)
    m_qualifiedName = name;
!!!1421708.cpp!!!	Type(in package : string, in name : string, in kind : int, in canWriteToParcel : bool, in canWriteToRpcData : bool, in canBeOut : bool, in declFile : string = "", in declLine : int = -1)
    if (package.length() > 0) {
        m_qualifiedName = package;
        m_qualifiedName += '.';
    }
    m_qualifiedName += name;
!!!1423116.cpp!!!	ImportType() : string
    return m_qualifiedName;
!!!1423244.cpp!!!	CreatorName() : string
    return "";
!!!1423372.cpp!!!	RpcCreatorName() : string
    return "";
!!!1423500.cpp!!!	InstantiableName() : string
    return QualifiedName();
!!!1423628.cpp!!!	WriteToParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, in flags : int) : void
    fprintf(stderr, "aidl:internal error %s:%d qualifiedName=%sn",
            __FILE__, __LINE__, m_qualifiedName.c_str());
    addTo->Add(new LiteralExpression("/* WriteToParcel error "
                + m_qualifiedName + " */"));
!!!1423756.cpp!!!	CreateFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    fprintf(stderr, "aidl:internal error %s:%d qualifiedName=%s\n",
            __FILE__, __LINE__, m_qualifiedName.c_str());
    addTo->Add(new LiteralExpression("/* CreateFromParcel error "
                + m_qualifiedName + " */"));
!!!1423884.cpp!!!	ReadFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    fprintf(stderr, "aidl:internal error %s:%d qualifiedName=%s\n",
            __FILE__, __LINE__, m_qualifiedName.c_str());
    addTo->Add(new LiteralExpression("/* ReadFromParcel error "
                + m_qualifiedName + " */"));
!!!1424012.cpp!!!	CanBeArray() : bool
    return false;
!!!1424140.cpp!!!	WriteArrayToParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, in flags : int) : void
    fprintf(stderr, "aidl:internal error %s:%d qualifiedName=%s\n",
            __FILE__, __LINE__, m_qualifiedName.c_str());
    addTo->Add(new LiteralExpression("/* WriteArrayToParcel error "
                + m_qualifiedName + " */"));
!!!1424268.cpp!!!	CreateArrayFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    fprintf(stderr, "aidl:internal error %s:%d qualifiedName=%s\n",
            __FILE__, __LINE__, m_qualifiedName.c_str());
    addTo->Add(new LiteralExpression("/* CreateArrayFromParcel error "
                + m_qualifiedName + " */"));
!!!1424396.cpp!!!	ReadArrayFromParcel(inout addTo : StatementBlock, inout v : Variable, inout parcel : Variable, inout cl : Variable) : void
    fprintf(stderr, "aidl:internal error %s:%d qualifiedName=%s\n",
            __FILE__, __LINE__, m_qualifiedName.c_str());
    addTo->Add(new LiteralExpression("/* ReadArrayFromParcel error "
                + m_qualifiedName + " */"));
!!!1424524.cpp!!!	WriteToRpcData(inout addTo : StatementBlock, inout k : Expression, inout v : Variable, inout data : Variable, in flags : int) : void
    fprintf(stderr, "aidl:internal error %s:%d qualifiedName=%s\n",
            __FILE__, __LINE__, m_qualifiedName.c_str());
    addTo->Add(new LiteralExpression("/* WriteToRpcData error "
                + m_qualifiedName + " */"));
!!!1424652.cpp!!!	CreateFromRpcData(inout addTo : StatementBlock, inout k : Expression, inout v : Variable, inout data : Variable, inout cl : Variable) : void
    fprintf(stderr, "aidl:internal error %s:%d qualifiedName=%s\n",
            __FILE__, __LINE__, m_qualifiedName.c_str());
    addTo->Add(new LiteralExpression("/* ReadFromRpcData error "
                + m_qualifiedName + " */"));
!!!1424780.cpp!!!	SetQualifiedName(in qualified : string) : void
    m_qualifiedName = qualified;
!!!1424908.cpp!!!	BuildWriteToParcelFlags(in flags : int) : Expression
    if (flags == 0) {
        return new LiteralExpression("0");
    }
    if ((flags&PARCELABLE_WRITE_RETURN_VALUE) != 0) {
        return new FieldVariable(PARCELABLE_INTERFACE_TYPE,
                "PARCELABLE_WRITE_RETURN_VALUE");
    }
    return new LiteralExpression("0");
