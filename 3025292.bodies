class CecUtils
!!!12383372.java!!!	initHdmiEdid(inout is : InputStream, inout hdmi_edid : int) : boolean
        int size = 0;
        byte[] buffer = new byte[256];
        if (is != null) {
            try {
                size = is.available();
                if (size != 256) {
                    Log.e(TAG, "hdmi edid size is not correct, size=" + size);
                    return false;
                }
                try {
                    is.read(buffer);
                    for (size = 0; size < 256; size++) {
                        hdmi_edid[size] = buffer[size] & 0xff;
                    }
                } catch (IOException e) {
                    Log.e(TAG, "exception happens when read hdmi edid.");
                    return false;
                }
            } catch (IOException e) {
                Log.e(TAG, "exception happens when get hdmi edid length.");
                return false;
            }

        } else {
            Log.e(TAG, "open file hdmi edid failed.");
            return false;
        }
        return true;
!!!12383500.java!!!	verifyHdmiEdid(inout hdmi_edid : int) : int
        int[] edid_read = new int[256];
        int[] checksum = {
                0x00, 0x00
        };
        int port, ret = 0;
        /*
         * Since Trestles mapped HDMI physical port 1/2/3/4 to logical HDMI
         * 3/4/2/1, we have to map CEC address
         */
        int[] portmap = {
                2, 3, 1, 0
        };
        for (port = 0; port < 4; port++) {
            FacFunctionImpl.getInstance().readEdid(port, edid_read);
            checksum = getChecksum(edid_read);

            if (hdmi_edid[127] != checksum[0]
                    || ((hdmi_edid[255] - 0x10 * portmap[port]) & 0xff) != checksum[1]) {
                ret = port + 1;
                Log.e(TAG, "Edid write failed, checksum error at port " + ret);
                Log.e(TAG, "hdmi_edid[127]=" + hdmi_edid[127] + ","
                        + ((hdmi_edid[255] - 0x10 * portmap[port]) & 0xff));
                break;
            }

        }

        return ret;
!!!12383628.java!!!	getChecksum(inout edid : int) : int
        int[] checksum = {
                0x00, 0x00
        };
        int i, total = 0x00;

        for (i = 0; i < 127; i++) {
            // Log.d(TAG,"edid="+edid[i]);
            total = edid[i] + total;
        }
        checksum[0] = 256 - total % 256;

        total = 0x00;
        for (i = 128; i < 255; i++) {
            total = edid[i] + total;
        }
        checksum[1] = 256 - total % 256;
        Log.d(TAG, "checksum:" + checksum[0] + "," + checksum[1]);
        return checksum;
!!!12383756.java!!!	initVGAEdid(inout is : InputStream, inout vga_edid : int) : boolean
        int size = 0;
        int validsize = 128;
        byte[] buffer = new byte[256];

        if (is != null) {
            try {
                size = is.available();
                if (size != validsize) {
                    Log.e(TAG, "vga edid size is not correct, size=" + size);
                    return false;
                }
                try {
                    is.read(buffer);
                    for (size = 0; size < validsize; size++) {
                        vga_edid[size] = buffer[size] & 0xff;
                    }
                } catch (IOException e) {
                    Log.e(TAG, "exception happens when read hdmi edid.");
                    return false;
                }
            } catch (IOException e) {
                Log.e(TAG, "exception happens when get hdmi edid length.");
                return false;
            }

        } else {
            Log.e(TAG, "open file hdmi edid failed.");
            return false;
        }
        return true;
!!!12383884.java!!!	verifyVGAEdid(inout vga_edid : int) : int
        int[] edid_read = new int[256];
        int checksum = 0;
        int i, ret = 0;
        int total = 0;

        FacFunctionImpl.getInstance().readEdid(4, edid_read);

        for (i = 0; i < 127; i++) {
            // Log.d(TAG,"edid="+edid_read[i]);
            total = edid_read[i] + total;
        }
        checksum = 256 - total % 256;

        if (vga_edid[127] != checksum) {
            Log.e(TAG, "Edid write failed, checksum error");
            ret = -1;
        }

        return ret;
