class ClassLoader
!!!317851.java!!!	createSystemClassLoader() : ClassLoader
        String classPath = System.getProperty("java.class.path", ".");

        // String[] paths = classPath.split(":");
        // URL[] urls = new URL[paths.length];
        // for (int i = 0; i < paths.length; i++) {
        // try {
        // urls[i] = new URL("file://" + paths[i]);
        // }
        // catch (Exception ex) {
        // ex.printStackTrace();
        // }
        // }
        //
        // return new java.net.URLClassLoader(urls, null);

        // TODO Make this a java.net.URLClassLoader once we have those?
        return new PathClassLoader(classPath, BootClassLoader.getInstance());
!!!317979.java!!!	getSystemClassLoader() : ClassLoader
        return SystemClassLoader.loader;
!!!318107.java!!!	getSystemResource(inout resName : String) : URL
        return SystemClassLoader.loader.getResource(resName);
!!!318235.java!!!	getSystemResources(inout resName : String) : Enumeration
        return SystemClassLoader.loader.getResources(resName);
!!!318363.java!!!	getSystemResourceAsStream(inout resName : String) : InputStream
        return SystemClassLoader.loader.getResourceAsStream(resName);
!!!318491.java!!!	ClassLoader()
        this(getSystemClassLoader(), false);
!!!318619.java!!!	ClassLoader(inout parentLoader : ClassLoader)
        this(parentLoader, false);
!!!318747.java!!!	ClassLoader(inout parentLoader : ClassLoader, inout nullAllowed : boolean)
        if (parentLoader == null && !nullAllowed) {
            throw new NullPointerException("parentLoader == null && !nullAllowed");
        }
        parent = parentLoader;
!!!318875.java!!!	defineClass(inout classRep : byte, in offset : int, in length : int) : Class

        return VMClassLoader.defineClass(this, classRep, offset, length);
!!!319003.java!!!	defineClass(inout className : String, inout classRep : byte, in offset : int, in length : int) : Class

        // TODO Define a default ProtectionDomain on first use
        return defineClass(className, classRep, offset, length, null);
!!!319131.java!!!	defineClass(inout className : String, inout classRep : byte, in offset : int, in length : int, inout protectionDomain : ProtectionDomain) : Class

        return VMClassLoader.defineClass(this, className, classRep, offset, length);
!!!319259.java!!!	defineClass(inout name : String, inout b : ByteBuffer, inout protectionDomain : ProtectionDomain) : Class

        byte[] temp = new byte[b.remaining()];
        b.get(temp);
        return defineClass(name, temp, 0, temp.length, protectionDomain);
!!!319387.java!!!	findClass(inout className : String) : Class
        throw new ClassNotFoundException(className);
!!!319515.java!!!	findLoadedClass(inout className : String) : Class
        ClassLoader loader;
        if (this == BootClassLoader.getInstance())
            loader = null;
        else
            loader = this;
        return VMClassLoader.findLoadedClass(loader, className);
!!!319643.java!!!	findSystemClass(inout className : String) : Class
        return Class.forName(className, false, getSystemClassLoader());
!!!319771.java!!!	getParent() : ClassLoader
        return parent;
!!!319899.java!!!	getResource(inout resName : String) : URL
        URL resource = parent.getResource(resName);
        if (resource == null) {
            resource = findResource(resName);
        }
        return resource;
!!!320027.java!!!	getResources(inout resName : String) : Enumeration

        Enumeration first = parent.getResources(resName);
        Enumeration second = findResources(resName);

        return new TwoEnumerationsInOne(first, second);
!!!320155.java!!!	getResourceAsStream(inout resName : String) : InputStream
        try {
            URL url = getResource(resName);
            if (url != null) {
                return url.openStream();
            }
        } catch (IOException ex) {
            // Don't want to see the exception.
        }

        return null;
!!!320283.java!!!	loadClass(inout className : String) : Class
        return loadClass(className, false);
!!!320411.java!!!	loadClass(inout className : String, inout resolve : boolean) : Class
        Class<?> clazz = findLoadedClass(className);

        if (clazz == null) {
            try {
                clazz = parent.loadClass(className, false);
            } catch (ClassNotFoundException e) {
                // Don't want to see this.
            }

            if (clazz == null) {
                clazz = findClass(className);
            }
        }

        return clazz;
!!!320539.java!!!	resolveClass(inout clazz : Class) : void
        // no-op, doesn't make sense on android.
!!!320667.java!!!	findResource(inout resName : String) : URL
        return null;
!!!320795.java!!!	findResources(inout resName : String) : Enumeration
        return Collections.emptyEnumeration();
!!!320923.java!!!	findLibrary(inout libName : String) : String
        return null;
!!!321051.java!!!	getPackage(inout name : String) : Package
        synchronized (packages) {
            return packages.get(name);
        }
!!!321179.java!!!	getPackages() : Package
        synchronized (packages) {
            Collection<Package> col = packages.values();
            Package[] result = new Package[col.size()];
            col.toArray(result);
            return result;
        }
!!!321307.java!!!	definePackage(inout name : String, inout specTitle : String, inout specVersion : String, inout specVendor : String, inout implTitle : String, inout implVersion : String, inout implVendor : String, inout sealBase : URL) : Package

        synchronized (packages) {
            if (packages.containsKey(name)) {
                throw new IllegalArgumentException("Package " + name + " already defined");
            }

            Package newPackage = new Package(name, specTitle, specVersion, specVendor, implTitle,
                    implVersion, implVendor, sealBase);

            packages.put(name, newPackage);

            return newPackage;
        }
