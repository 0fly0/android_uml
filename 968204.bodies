class AutoCompletePopup
!!!4801420.java!!!	AutoCompletePopup(inout webView : WebViewClassic, inout inputConnection : WebViewInputConnection)
        mInputConnection = inputConnection;
        mWebView = webView;
        mHandler = new Handler() {
            @Override
            public void handleMessage(Message msg) {
                switch (msg.what) {
                case AUTOFILL_FORM:
                    mWebView.autoFillForm(mQueryId);
                    break;
                }
            }
        };
!!!4801548.java!!!	onKeyPreIme(in keyCode : int, inout event : KeyEvent) : boolean
        if (mPopup == null) {
            return false;
        }
        if (keyCode == KeyEvent.KEYCODE_BACK && mPopup.isShowing()) {
            // special case for the back key, we do not even try to send it
            // to the drop down list but instead, consume it immediately
            if (event.getAction() == KeyEvent.ACTION_DOWN && event.getRepeatCount() == 0) {
                KeyEvent.DispatcherState state = mAnchor.getKeyDispatcherState();
                if (state != null) {
                    state.startTracking(event, this);
                }
                return true;
            } else if (event.getAction() == KeyEvent.ACTION_UP) {
                KeyEvent.DispatcherState state = mAnchor.getKeyDispatcherState();
                if (state != null) {
                    state.handleUpEvent(event);
                }
                if (event.isTracking() && !event.isCanceled()) {
                    mPopup.dismiss();
                    return true;
                }
            }
        }
        if (mPopup.isShowing()) {
            return mPopup.onKeyPreIme(keyCode, event);
        }
        return false;
!!!4801676.java!!!	setText(inout text : CharSequence) : void
        mText = text;
        if (mFilter != null) {
            mFilter.filter(text, this);
        }
!!!4801804.java!!!	setAutoFillQueryId(in queryId : int) : void
        mQueryId = queryId;
!!!4801932.java!!!	clearAdapter() : void
        mAdapter = null;
        mFilter = null;
        if (mPopup != null) {
            mPopup.dismiss();
            mPopup.setAdapter(null);
        }
!!!4802060.java!!!	setAdapter(inout adapter : T) : void
        ensurePopup();
        mPopup.setAdapter(adapter);
        mAdapter = adapter;
        if (adapter != null) {
            mFilter = adapter.getFilter();
            mFilter.filter(mText, this);
        } else {
            mFilter = null;
        }
        resetRect();
!!!4802188.java!!!	resetRect() : void
        ensurePopup();
        int left = mWebView.contentToViewX(mWebView.mEditTextContentBounds.left);
        int right = mWebView.contentToViewX(mWebView.mEditTextContentBounds.right);
        int width = right - left;
        mPopup.setWidth(width);

        int bottom = mWebView.contentToViewY(mWebView.mEditTextContentBounds.bottom);
        int top = mWebView.contentToViewY(mWebView.mEditTextContentBounds.top);
        int height = bottom - top;

        AbsoluteLayout.LayoutParams lp =
                (AbsoluteLayout.LayoutParams) mAnchor.getLayoutParams();
        boolean needsUpdate = false;
        if (null == lp) {
            lp = new AbsoluteLayout.LayoutParams(width, height, left, top);
        } else {
            if ((lp.x != left) || (lp.y != top) || (lp.width != width)
                    || (lp.height != height)) {
                needsUpdate = true;
                lp.x = left;
                lp.y = top;
                lp.width = width;
                lp.height = height;
            }
        }
        if (needsUpdate) {
            mAnchor.setLayoutParams(lp);
        }
        if (mPopup.isShowing()) {
            mPopup.show(); // update its position
        }
!!!4802316.java!!!	onItemClick(inout parent : AdapterView, inout view : View, in position : int, in id : long) : void
        if (mPopup == null) {
            return;
        }
        if (id == 0 && position == 0 && mInputConnection.getIsAutoFillable()) {
            mText = "";
            pushTextToInputConnection();
            // Blank out the text box while we wait for WebCore to fill the form.
            if (mIsAutoFillProfileSet) {
                // Call a webview method to tell WebCore to autofill the form.
                mWebView.autoFillForm(mQueryId);
            } else {
                // There is no autofill profile setup yet and the user has
                // elected to try and set one up. Call through to the
                // embedder to action that.
                WebChromeClient webChromeClient = mWebView.getWebChromeClient();
                if (webChromeClient != null) {
                    webChromeClient.setupAutoFill(
                        mHandler.obtainMessage(AUTOFILL_FORM));
                }
            }
        } else {
            Object selectedItem;
            if (position < 0) {
                selectedItem = mPopup.getSelectedItem();
            } else {
                selectedItem = mAdapter.getItem(position);
            }
            if (selectedItem != null) {
                setText(mFilter.convertResultToString(selectedItem));
                pushTextToInputConnection();
            }
        }
        mPopup.dismiss();
!!!4802444.java!!!	setIsAutoFillProfileSet(inout isAutoFillProfileSet : boolean) : void
        mIsAutoFillProfileSet = isAutoFillProfileSet;
!!!4802572.java!!!	pushTextToInputConnection() : void
        Editable oldText = mInputConnection.getEditable();
        mInputConnection.setSelection(0, oldText.length());
        mInputConnection.replaceSelection(mText);
        mInputConnection.setSelection(mText.length(), mText.length());
!!!4802700.java!!!	onFilterComplete(in count : int) : void
        ensurePopup();
        boolean showDropDown = (count > 0) &&
                (mInputConnection.getIsAutoFillable() || mText.length() > 0);
        if (showDropDown) {
            if (!mPopup.isShowing()) {
                // Make sure the list does not obscure the IME when shown for the first time.
                mPopup.setInputMethodMode(ListPopupWindow.INPUT_METHOD_NEEDED);
            }
            mPopup.show();
            mPopup.getListView().setOverScrollMode(View.OVER_SCROLL_ALWAYS);
        } else {
            mPopup.dismiss();
        }
!!!4802828.java!!!	onDismiss() : void
        mWebView.getWebView().removeView(mAnchor);
!!!4802956.java!!!	ensurePopup() : void
        if (mPopup == null) {
            mPopup = new ListPopupWindow(mWebView.getContext());
            mAnchor = new AnchorView(mWebView.getContext());
            mWebView.getWebView().addView(mAnchor);
            mPopup.setOnItemClickListener(this);
            mPopup.setAnchorView(mAnchor);
            mPopup.setPromptPosition(ListPopupWindow.POSITION_PROMPT_BELOW);
        } else if (mWebView.getWebView().indexOfChild(mAnchor) < 0) {
            mWebView.getWebView().addView(mAnchor);
        }
