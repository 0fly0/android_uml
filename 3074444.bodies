class AccessibilityUtils
!!!12750604.java!!!	init(inout inputMethod : InputMethodService) : void
        if (!ENABLE_ACCESSIBILITY)
            return;

        // These only need to be initialized if the kill switch is off.
        sInstance.initInternal(inputMethod);
        KeyCodeDescriptionMapper.init();
        AccessibleKeyboardViewProxy.init(inputMethod);
!!!12750732.java!!!	getInstance() : AccessibilityUtils
        return sInstance;
!!!12750860.java!!!	AccessibilityUtils()
        // This class is not publicly instantiable.
!!!12750988.java!!!	initInternal(inout context : Context) : void
        mContext = context;
        mAccessibilityManager = (AccessibilityManager) context
                .getSystemService(Context.ACCESSIBILITY_SERVICE);

        final AudioManager audioManager = (AudioManager) context
                .getSystemService(Context.AUDIO_SERVICE);
        mAudioManager = new AudioManagerCompatWrapper(audioManager);
!!!12751116.java!!!	isTouchExplorationEnabled() : boolean
        return ENABLE_ACCESSIBILITY
                && mAccessibilityManager.isEnabled()
                && mAccessibilityManager.isTouchExplorationEnabled();
!!!12751244.java!!!	isTouchExplorationEvent(inout event : MotionEvent) : boolean
        final int action = event.getAction();

        return action == MotionEvent.ACTION_HOVER_ENTER
                || action == MotionEvent.ACTION_HOVER_EXIT
                || action == MotionEvent.ACTION_HOVER_MOVE;
!!!12751372.java!!!	shouldObscureInput(inout editorInfo : EditorInfo) : boolean
        if (editorInfo == null)
            return false;

        // The user can optionally force speaking passwords.
        if (SettingsSecureCompatUtils.ACCESSIBILITY_SPEAK_PASSWORD != null) {
            final boolean speakPassword = Settings.Secure.getInt(mContext.getContentResolver(),
                    SettingsSecureCompatUtils.ACCESSIBILITY_SPEAK_PASSWORD, 0) != 0;
            if (speakPassword)
                return false;
        }

        // Always speak if the user is listening through headphones.
        if (mAudioManager.isWiredHeadsetOn() || mAudioManager.isBluetoothA2dpOn())
            return false;

        // Don't speak if the IME is connected to a password field.
        return InputTypeUtils.isPasswordInputType(editorInfo.inputType);
!!!12751500.java!!!	speak(inout text : CharSequence) : void
        if (!mAccessibilityManager.isEnabled()) {
            Log.e(TAG, "Attempted to speak when accessibility was disabled!");
            return;
        }

        // The following is a hack to avoid using the heavy-weight TextToSpeech
        // class. Instead, we're just forcing a fake AccessibilityEvent into
        // the screen reader to make it speak.
        final AccessibilityEvent event = AccessibilityEvent
                .obtain(AccessibilityEvent.TYPE_VIEW_FOCUSED);

        event.setPackageName(PACKAGE);
        event.setClassName(CLASS);
        event.setEventTime(SystemClock.uptimeMillis());
        event.setEnabled(true);
        event.getText().add(text);

        mAccessibilityManager.sendAccessibilityEvent(event);
!!!12751628.java!!!	onStartInputViewInternal(inout editorInfo : EditorInfo, inout restarting : boolean) : void
        if (shouldObscureInput(editorInfo)) {
            final CharSequence text = mContext.getText(R.string.spoken_use_headphones);
            speak(text);
        }
!!!12751756.java!!!	requestSendAccessibilityEvent(inout event : AccessibilityEvent) : void
        if (mAccessibilityManager.isEnabled()) {
            mAccessibilityManager.sendAccessibilityEvent(event);
        }
