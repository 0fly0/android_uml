class LauncherDataProviderTest
!!!13492108.java!!!	LauncherDataProviderTest()
        super(LauncherProviderInTest.class, LauncherProvider.AUTHORITY);
!!!13492620.java!!!	setUp() : void
        super.setUp();
        mDataProvider = new LauncherDataProvider(new MockContextWithPackageManager(
                getMockContext()), false /* no updates */);
        getProvider().setMockPackageManager(getContext().getPackageManager());
!!!13492748.java!!!	testQueryItems() : void
        List<LauncherItemInfo> list = mDataProvider.getMoreItems();
        assertNotNull(list);
        assertTrue(list.size() > 1);
!!!13492876.java!!!	testAddAndRemoveShortcut() : void
        ShortcutInfo info = getTestShortcutInfo();

        mDataProvider.addShortcut(info);
        MoreAsserts.assertNotEqual(-1, info.getId());

        // Now read from database.
        List<LauncherItemInfo> list = mDataProvider.getMoreItems();
        boolean found = false;
        for (LauncherItemInfo loopInfo : list) {
            if (loopInfo.getLauncherId().equals(info.getLauncherId())) {
                assertTrue(loopInfo instanceof ShortcutInfo);
                ShortcutInfo info2 = (ShortcutInfo) loopInfo;
                assertEquals(info.getId(), info2.getId());
                assertEquals(info.getTitle(), info2.getTitle());
                assertEquals(info.getIntent().toUri(Intent.URI_INTENT_SCHEME),
                        info2.getIntent().toUri(Intent.URI_INTENT_SCHEME));
                found = true;
            }
        }
        assertTrue("Did not find info.", found);

        // Now delete.
        mDataProvider.removeShortcut(info);
        // Now read from database.
        list = mDataProvider.getMoreItems();
        found = false;
        for (LauncherItemInfo loopInfo : list) {
            if (loopInfo.getLauncherId().equals(info.getLauncherId())) {
                assertTrue(loopInfo instanceof ShortcutInfo);
                ShortcutInfo info2 = (ShortcutInfo) loopInfo;
                assertEquals(info.getId(), info2.getId());
                assertEquals(info.getTitle(), info2.getTitle());
                assertEquals(info.getIntent().toUri(Intent.URI_INTENT_SCHEME),
                        info2.getIntent().toUri(Intent.URI_INTENT_SCHEME));
                found = true;
            }
        }
        assertTrue("Did not delete info.", !found);
!!!13493004.java!!!	testQuickList_addAndDelete() : void
        List<LauncherItemInfo> quickList = mDataProvider.getQuickListItems(0);
        assertEquals(0, quickList.size());
        ShortcutInfo info = getTestShortcutInfo();
        mDataProvider.addShortcut(info);
        mDataProvider.setQuickListItem(0, 0, info);
        quickList = mDataProvider.getQuickListItems(0);
        assertEquals(1, quickList.size());
        assertNotNull(quickList.get(0));
        assertTrue(quickList.get(0) instanceof ShortcutInfo);
        ShortcutInfo info2 = (ShortcutInfo) quickList.get(0);
        assertEquals(info.getId(), info2.getId());
        assertEquals(info.getTitle(), info2.getTitle());
        assertEquals(info.getIntent().toUri(Intent.URI_INTENT_SCHEME),
                info2.getIntent().toUri(Intent.URI_INTENT_SCHEME));
        mDataProvider.setQuickListItem(0, 0, null);
        quickList = mDataProvider.getQuickListItems(0);
        assertEquals(0, quickList.size());
!!!13493132.java!!!	testCanvasContents_addAndDelete() : void
        List<CanvasItemInfo> items = mDataProvider.getCanvasItems(0);
        assertEquals(0, items.size());

        WidgetInfo info = new WidgetInfo(23);
        info.setCellX(1);
        info.setCellY(2);
        info.setSpanX(3);
        info.setSpanY(4);

        // Add
        assertEquals(CanvasItemInfo.NOT_SET, info.getDatabaseId());
        mDataProvider.addCanvasItem(0, info);
        long databaseId = info.getDatabaseId();
        MoreAsserts.assertNotEqual(CanvasItemInfo.NOT_SET, databaseId);

        // Query
        items = mDataProvider.getCanvasItems(0);
        assertEquals(1, items.size());
        CanvasItemInfo loadedInfo = items.get(0);
        assertEquals(info.getDatabaseId(), loadedInfo.getDatabaseId());
        assertEquals(info.getCellX(), loadedInfo.getCellX());
        assertEquals(info.getCellY(), loadedInfo.getCellY());
        assertEquals(info.getSpanX(), loadedInfo.getSpanX());
        assertEquals(info.getSpanY(), loadedInfo.getSpanY());
        assertTrue(loadedInfo instanceof WidgetInfo);
        WidgetInfo info2 = (WidgetInfo) loadedInfo;
        assertEquals(info2.getAppWidgetId(), info.getAppWidgetId());

        // Update
        info.setCellX(2);
        info.setCellY(3);
        info.setSpanX(4);
        info.setSpanY(5);
        mDataProvider.updateCanvasItem(info);

        // Query
        items = mDataProvider.getCanvasItems(0);
        assertEquals(1, items.size());
        loadedInfo = items.get(0);
        assertEquals(info.getCellX(), loadedInfo.getCellX());
        assertEquals(info.getCellY(), loadedInfo.getCellY());
        assertEquals(info.getSpanX(), loadedInfo.getSpanX());
        assertEquals(info.getSpanY(), loadedInfo.getSpanY());

        // Delete
        mDataProvider.removeCanvasItem(info);
        items = mDataProvider.getCanvasItems(0);
        assertEquals(0, items.size());
!!!13493260.java!!!	testShortcutExists() : void
        ShortcutInfo info = getTestShortcutInfo();

        mDataProvider.addShortcut(info);
        MoreAsserts.assertNotEqual(-1, info.getId());

        assertTrue("shortcut doesn't exist", mDataProvider.shortcutExists(info));

        ShortcutInfo info2 = getTestShortcutInfo();
        info2.setTitle("different title");
        assertFalse("shortcut should not exist when title is different",
                mDataProvider.shortcutExists(info2));

        ShortcutInfo info3 = getTestShortcutInfo();
        info3.setIntent(new Intent(Intent.ACTION_VIEW, Uri.parse("http://www.google.com/maps")));
        assertFalse("shortcut should not exist when intent is different",
                mDataProvider.shortcutExists(info3));
!!!13493388.java!!!	getTestShortcutInfo() : ShortcutInfo
        ShortcutInfo info = new ShortcutInfo();
        assertEquals(-1, info.getId());
        String testTitle = "testTitle";
        info.setTitle(testTitle);
        ShortcutIconResource testResource = new ShortcutIconResource();
        testResource.packageName = "testPackageName";
        testResource.resourceName = "testResourceName";
        Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse("http://www.google.com"));
        info.setIntent(intent);
        return info;
