class EnumSet
!!!1272603.java!!!	EnumSet(inout cls : Class)
        elementClass = cls;
!!!1272731.java!!!	noneOf(inout elementType : Class) : EnumSet
        if (!elementType.isEnum()) {
            throw new ClassCastException(elementType.getClass().getName() + " is not an Enum");
        }
        E[] enums = Enum.getSharedConstants(elementType);
        if (enums.length <= 64) {
            return new MiniEnumSet<E>(elementType, enums);
        }
        return new HugeEnumSet<E>(elementType, enums);
!!!1272859.java!!!	allOf(inout elementType : Class) : EnumSet
        EnumSet<E> set = noneOf(elementType);
        set.complement();
        return set;
!!!1272987.java!!!	copyOf(inout s : EnumSet) : EnumSet
        EnumSet<E> set = EnumSet.noneOf(s.elementClass);
        set.addAll(s);
        return set;
!!!1273115.java!!!	copyOf(inout c : Collection) : EnumSet
        if (c instanceof EnumSet) {
            return copyOf((EnumSet<E>) c);
        }
        if (c.isEmpty()) {
            throw new IllegalArgumentException("empty collection");
        }
        Iterator<E> iterator = c.iterator();
        E element = iterator.next();
        EnumSet<E> set = EnumSet.noneOf(element.getDeclaringClass());
        set.add(element);
        while (iterator.hasNext()) {
            set.add(iterator.next());
        }
        return set;
!!!1273243.java!!!	complementOf(inout s : EnumSet) : EnumSet
        EnumSet<E> set = EnumSet.noneOf(s.elementClass);
        set.addAll(s);
        set.complement();
        return set;
!!!1273499.java!!!	of(inout e : E) : EnumSet
        EnumSet<E> set = EnumSet.noneOf(e.getDeclaringClass());
        set.add(e);
        return set;
!!!1273627.java!!!	of(inout e1 : E, inout e2 : E) : EnumSet
        EnumSet<E> set = of(e1);
        set.add(e2);
        return set;
!!!1273755.java!!!	of(inout e1 : E, inout e2 : E, inout e3 : E) : EnumSet
        EnumSet<E> set = of(e1, e2);
        set.add(e3);
        return set;
!!!1273883.java!!!	of(inout e1 : E, inout e2 : E, inout e3 : E, inout e4 : E) : EnumSet
        EnumSet<E> set = of(e1, e2, e3);
        set.add(e4);
        return set;
!!!1274011.java!!!	of(inout e1 : E, inout e2 : E, inout e3 : E, inout e4 : E, inout e5 : E) : EnumSet
        EnumSet<E> set = of(e1, e2, e3, e4);
        set.add(e5);
        return set;
!!!1274139.java!!!	of(inout start : E, inout  : E...others) : EnumSet
        EnumSet<E> set = of(start);
        for (E e : others) {
            set.add(e);
        }
        return set;
!!!1274267.java!!!	range(inout start : E, inout end : E) : EnumSet
        if (start.compareTo(end) > 0) {
            throw new IllegalArgumentException("start is behind end");
        }
        EnumSet<E> set = EnumSet.noneOf(start.getDeclaringClass());
        set.setRange(start, end);
        return set;
!!!1274523.java!!!	clone() : EnumSet
        try {
            return (EnumSet<E>) super.clone();
        } catch (CloneNotSupportedException e) {
            throw new AssertionError(e);
        }
!!!1274651.java!!!	isValidType(inout cls : Class) : boolean
        return cls == elementClass || cls.getSuperclass() == elementClass;
!!!1274907.java!!!	writeReplace() : Object
        SerializationProxy proxy = new SerializationProxy();
        proxy.elements = toArray(new Enum[0]);
        proxy.elementType = elementClass;
        return proxy;
