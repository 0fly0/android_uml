class DreamManagerService
!!!8516876.java!!!	DreamManagerService(inout context : Context, inout mainHandler : Handler)
        mContext = context;
        mHandler = new DreamHandler(mainHandler.getLooper());
        mController = new DreamController(context, mHandler, mControllerListener);

        mPowerManager = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
!!!8517004.java!!!	systemReady() : void
        mContext.registerReceiver(new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                synchronized (mLock) {
                    stopDreamLocked();
                }
            }
        }, new IntentFilter(Intent.ACTION_USER_SWITCHED), null, mHandler);
!!!8517132.java!!!	dump(inout fd : FileDescriptor, inout pw : PrintWriter, inout args : String) : void
        mContext.enforceCallingOrSelfPermission(android.Manifest.permission.DUMP, TAG);

        pw.println("DREAM MANAGER (dumpsys dreams)");
        pw.println();

        pw.println("mCurrentDreamToken=" + mCurrentDreamToken);
        pw.println("mCurrentDreamName=" + mCurrentDreamName);
        pw.println("mCurrentDreamUserId=" + mCurrentDreamUserId);
        pw.println("mCurrentDreamIsTest=" + mCurrentDreamIsTest);
        pw.println();

        DumpUtils.dumpAsync(mHandler, new DumpUtils.Dump() {
            @Override
            public void dump(PrintWriter pw) {
                mController.dump(pw);
            }
        }, pw, 200);
!!!8517260.java!!!	getDreamComponents() : ComponentName
        checkPermission(android.Manifest.permission.READ_DREAM_STATE);

        final int userId = UserHandle.getCallingUserId();
        final long ident = Binder.clearCallingIdentity();
        try {
            return getDreamComponentsForUser(userId);
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
!!!8517388.java!!!	setDreamComponents(inout componentNames : ComponentName) : void
        checkPermission(android.Manifest.permission.WRITE_DREAM_STATE);

        final int userId = UserHandle.getCallingUserId();
        final long ident = Binder.clearCallingIdentity();
        try {
            Settings.Secure.putStringForUser(mContext.getContentResolver(),
                    Settings.Secure.SCREENSAVER_COMPONENTS,
                    componentsToString(componentNames),
                    userId);
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
!!!8517516.java!!!	getDefaultDreamComponent() : ComponentName
        checkPermission(android.Manifest.permission.READ_DREAM_STATE);

        final int userId = UserHandle.getCallingUserId();
        final long ident = Binder.clearCallingIdentity();
        try {
            String name = Settings.Secure.getStringForUser(mContext.getContentResolver(),
                    Settings.Secure.SCREENSAVER_DEFAULT_COMPONENT,
                    userId);
            return name == null ? null : ComponentName.unflattenFromString(name);
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
!!!8517644.java!!!	isDreaming() : boolean
        checkPermission(android.Manifest.permission.READ_DREAM_STATE);

        synchronized (mLock) {
            return mCurrentDreamToken != null && !mCurrentDreamIsTest;
        }
!!!8517772.java!!!	dream() : void
        checkPermission(android.Manifest.permission.WRITE_DREAM_STATE);

        final long ident = Binder.clearCallingIdentity();
        try {
            // Ask the power manager to nap.  It will eventually call back into
            // startDream() if/when it is appropriate to start dreaming.
            // Because napping could cause the screen to turn off immediately if the dream
            // cannot be started, we keep one eye open and gently poke user activity.
            long time = SystemClock.uptimeMillis();
            mPowerManager.userActivity(time, true /*noChangeLights*/);
            mPowerManager.nap(time);
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
!!!8517900.java!!!	testDream(inout dream : ComponentName) : void
        checkPermission(android.Manifest.permission.WRITE_DREAM_STATE);

        if (dream == null) {
            throw new IllegalArgumentException("dream must not be null");
        }

        final int callingUserId = UserHandle.getCallingUserId();
        final int currentUserId = ActivityManager.getCurrentUser();
        if (callingUserId != currentUserId) {
            // This check is inherently prone to races but at least it's something.
            Slog.w(TAG, "Aborted attempt to start a test dream while a different "
                    + " user is active: callingUserId=" + callingUserId
                    + ", currentUserId=" + currentUserId);
            return;
        }
        final long ident = Binder.clearCallingIdentity();
        try {
            synchronized (mLock) {
                startDreamLocked(dream, true /*isTest*/, callingUserId);
            }
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
!!!8518028.java!!!	awaken() : void
        checkPermission(android.Manifest.permission.WRITE_DREAM_STATE);

        final long ident = Binder.clearCallingIdentity();
        try {
            // Treat an explicit request to awaken as user activity so that the
            // device doesn't immediately go to sleep if the timeout expired,
            // for example when being undocked.
            long time = SystemClock.uptimeMillis();
            mPowerManager.userActivity(time, false /*noChangeLights*/);
            stopDream();
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
!!!8518156.java!!!	finishSelf(inout token : IBinder) : void
        // Requires no permission, called by Dream from an arbitrary process.
        if (token == null) {
            throw new IllegalArgumentException("token must not be null");
        }

        final long ident = Binder.clearCallingIdentity();
        try {
            if (DEBUG) {
                Slog.d(TAG, "Dream finished: " + token);
            }

            // Note that a dream finishing and self-terminating is not
            // itself considered user activity.  If the dream is ending because
            // the user interacted with the device then user activity will already
            // have been poked so the device will stay awake a bit longer.
            // If the dream is ending on its own for other reasons and no wake
            // locks are held and the user activity timeout has expired then the
            // device may simply go to sleep.
            synchronized (mLock) {
                if (mCurrentDreamToken == token) {
                    stopDreamLocked();
                }
            }
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
!!!8518284.java!!!	startDream() : void
        int userId = ActivityManager.getCurrentUser();
        ComponentName dream = chooseDreamForUser(userId);
        if (dream != null) {
            synchronized (mLock) {
                startDreamLocked(dream, false /*isTest*/, userId);
            }
        }
!!!8518412.java!!!	stopDream() : void
        synchronized (mLock) {
            stopDreamLocked();
        }
!!!8518540.java!!!	chooseDreamForUser(in userId : int) : ComponentName
        ComponentName[] dreams = getDreamComponentsForUser(userId);
        return dreams != null && dreams.length != 0 ? dreams[0] : null;
!!!8518668.java!!!	getDreamComponentsForUser(in userId : int) : ComponentName
        String names = Settings.Secure.getStringForUser(mContext.getContentResolver(),
                Settings.Secure.SCREENSAVER_COMPONENTS,
                userId);
        ComponentName[] components = componentsFromString(names);

        // first, ensure components point to valid services
        List<ComponentName> validComponents = new ArrayList<ComponentName>();
        if (components != null) {
            for (ComponentName component : components) {
                if (serviceExists(component)) {
                    validComponents.add(component);
                } else {
                    Slog.w(TAG, "Dream " + component + " does not exist");
                }
            }
        }

        // fallback to the default dream component if necessary
        if (validComponents.isEmpty()) {
            ComponentName defaultDream = getDefaultDreamComponent();
            if (defaultDream != null) {
                Slog.w(TAG, "Falling back to default dream " + defaultDream);
                validComponents.add(defaultDream);
            }
        }
        return validComponents.toArray(new ComponentName[validComponents.size()]);
!!!8518796.java!!!	serviceExists(inout name : ComponentName) : boolean
        try {
            return name != null && mContext.getPackageManager().getServiceInfo(name, 0) != null;
        } catch (NameNotFoundException e) {
            return false;
        }
!!!8518924.java!!!	startDreamLocked(in name : ComponentName, in isTest : boolean, in userId : int) : void
        if (Objects.equal(mCurrentDreamName, name)
                && mCurrentDreamIsTest == isTest
                && mCurrentDreamUserId == userId) {
            return;
        }

        stopDreamLocked();

        if (DEBUG) Slog.i(TAG, "Entering dreamland.");

        final Binder newToken = new Binder();
        mCurrentDreamToken = newToken;
        mCurrentDreamName = name;
        mCurrentDreamIsTest = isTest;
        mCurrentDreamUserId = userId;

        mHandler.post(new Runnable() {
            @Override
            public void run() {
                mController.startDream(newToken, name, isTest, userId);
            }
        });
!!!8519052.java!!!	stopDreamLocked() : void
        if (mCurrentDreamToken != null) {
            if (DEBUG) Slog.i(TAG, "Leaving dreamland.");

            cleanupDreamLocked();

            mHandler.post(new Runnable() {
                @Override
                public void run() {
                    mController.stopDream();
                }
            });
        }
!!!8519180.java!!!	cleanupDreamLocked() : void
        mCurrentDreamToken = null;
        mCurrentDreamName = null;
        mCurrentDreamIsTest = false;
        mCurrentDreamUserId = 0;
!!!8519308.java!!!	checkPermission(in permission : String) : void
        if (mContext.checkCallingOrSelfPermission(permission)
                != PackageManager.PERMISSION_GRANTED) {
            throw new SecurityException("Access denied to process: " + Binder.getCallingPid()
                    + ", must have permission " + permission);
        }
!!!8519436.java!!!	componentsToString(inout componentNames : ComponentName) : String
        StringBuilder names = new StringBuilder();
        if (componentNames != null) {
            for (ComponentName componentName : componentNames) {
                if (names.length() > 0) {
                    names.append(',');
                }
                names.append(componentName.flattenToString());
            }
        }
        return names.toString();
!!!8519564.java!!!	componentsFromString(in names : String) : ComponentName
        if (names == null) {
            return null;
        }
        String[] namesArray = names.split(",");
        ComponentName[] componentNames = new ComponentName[namesArray.length];
        for (int i = 0; i < namesArray.length; i++) {
            componentNames[i] = ComponentName.unflattenFromString(namesArray[i]);
        }
        return componentNames;
