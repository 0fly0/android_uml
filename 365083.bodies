class OpenSSLECPublicKey
!!!2424859.java!!!	OpenSSLECPublicKey(inout group : OpenSSLECGroupContext, inout key : OpenSSLKey)
        this.group = group;
        this.key = key;
!!!2424987.java!!!	OpenSSLECPublicKey(inout key : OpenSSLKey)
        final long origGroup = NativeCrypto.EC_KEY_get0_group(key.getPkeyContext());
        this.group = new OpenSSLECGroupContext(NativeCrypto.EC_GROUP_dup(origGroup));
        this.key = key;
!!!2425115.java!!!	OpenSSLECPublicKey(inout ecKeySpec : ECPublicKeySpec)
        try {
            group = OpenSSLECGroupContext.getInstance(ecKeySpec.getParams());
            OpenSSLECPointContext pubKey = OpenSSLECPointContext.getInstance(
                    NativeCrypto.get_EC_GROUP_type(group.getContext()), group, ecKeySpec.getW());
            key = new OpenSSLKey(NativeCrypto.EVP_PKEY_new_EC_KEY(group.getContext(),
                    pubKey.getContext(), null));
        } catch (Exception e) {
            throw new InvalidKeySpecException(e);
        }
!!!2425243.java!!!	getInstance(inout ecPublicKey : ECPublicKey) : OpenSSLKey
        try {
            OpenSSLECGroupContext group = OpenSSLECGroupContext
                    .getInstance(ecPublicKey.getParams());
            OpenSSLECPointContext pubKey = OpenSSLECPointContext.getInstance(
                    NativeCrypto.get_EC_GROUP_type(group.getContext()), group, ecPublicKey.getW());
            return new OpenSSLKey(NativeCrypto.EVP_PKEY_new_EC_KEY(group.getContext(),
                    pubKey.getContext(), null));
        } catch (Exception e) {
            throw new InvalidKeyException(e);
        }
!!!2425371.java!!!	getAlgorithm() : String
        return ALGORITHM;
!!!2425499.java!!!	getFormat() : String
        return "X.509";
!!!2425627.java!!!	getEncoded() : byte
        return NativeCrypto.i2d_PUBKEY(key.getPkeyContext());
!!!2425755.java!!!	getParams() : ECParameterSpec
        return group.getECParameterSpec();
!!!2425883.java!!!	getPublicKey() : ECPoint
        final OpenSSLECPointContext pubKey = new OpenSSLECPointContext(group,
                NativeCrypto.EC_KEY_get_public_key(key.getPkeyContext()));

        return pubKey.getECPoint();
!!!2426011.java!!!	getW() : ECPoint
        return getPublicKey();
!!!2426139.java!!!	getOpenSSLKey() : OpenSSLKey
        return key;
!!!2426267.java!!!	equals(inout o : Object) : boolean
        if (o == this) {
            return true;
        }

        if (o instanceof OpenSSLECPrivateKey) {
            OpenSSLECPrivateKey other = (OpenSSLECPrivateKey) o;
            return key.equals(other.key);
        }

        if (!(o instanceof ECPublicKey)) {
            return false;
        }

        final ECPublicKey other = (ECPublicKey) o;
        if (!getPublicKey().equals(other.getW())) {
            return false;
        }

        final ECParameterSpec spec = getParams();
        final ECParameterSpec otherSpec = other.getParams();

        return spec.getCurve().equals(otherSpec.getCurve())
                && spec.getGenerator().equals(otherSpec.getGenerator())
                && spec.getOrder().equals(otherSpec.getOrder())
                && spec.getCofactor() == otherSpec.getCofactor();
!!!2426395.java!!!	hashCode() : int
        return Arrays.hashCode(NativeCrypto.i2d_PUBKEY(key.getPkeyContext()));
!!!2426523.java!!!	toString() : String
        return NativeCrypto.EVP_PKEY_print_public(key.getPkeyContext());
!!!2426651.java!!!	readObject(inout stream : ObjectInputStream) : void
        stream.defaultReadObject();

        byte[] encoded = (byte[]) stream.readObject();

        key = new OpenSSLKey(NativeCrypto.d2i_PUBKEY(encoded));

        final long origGroup = NativeCrypto.EC_KEY_get0_group(key.getPkeyContext());
        group = new OpenSSLECGroupContext(NativeCrypto.EC_GROUP_dup(origGroup));
!!!2426779.java!!!	writeObject(inout stream : ObjectOutputStream) : void
        if (key.isEngineBased()) {
            throw new NotSerializableException("engine-based keys can not be serialized");
        }

        stream.defaultWriteObject();
        stream.writeObject(getEncoded());
