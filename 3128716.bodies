class ProtobufWireAdapter
!!!13182732.java!!!	ProtobufWireAdapter(inout input : InputStream, inout output : OutputStream)
        mInputStream = input;
        mOutputStream = output;
!!!13182860.java!!!	fromContext(inout context : PairingContext) : ProtobufWireAdapter
        return new ProtobufWireAdapter(
                context.getPeerInputStream(), context.getPeerOutputStream());
!!!13182988.java!!!	getNextMessage() : PoloMessage
        return protoToPoloMessage(readNextInnerMessage());
!!!13183116.java!!!	getNextMessage(inout type : PoloMessageType) : PoloMessage
        PoloMessage message = getNextMessage();
        if (message.getType() != type) {
            throw new PoloException(
                    "Wrong message type (wanted " + type + ", got "
                            + message.getType() + ")");
        }
        return message;
!!!13183244.java!!!	readNextOuterMessage() : OuterMessage
        // Read the preamble (length of payload)
        byte[] preambleBuffer = readBytesBlocking(4);
        int messageLen = (int) PoloUtil.intBigEndianBytesToLong(preambleBuffer);

        // Read the payload (serialized PoloMessage)
        byte[] messageBuffer = readBytesBlocking(messageLen);

        // Decode and return the payload
        OuterMessage message = OuterMessage.parseFrom(messageBuffer);

        OuterMessage.Status status = message.getStatus();
        if (status != OuterMessage.Status.STATUS_OK) {
            throw new ProtocolErrorException();
        }

        return message;
!!!13183372.java!!!	readNextInnerMessage() : GeneratedMessageLite
        OuterMessage message = readNextOuterMessage();
        MessageType type = message.getType();

        ByteString payload = message.getPayload();

        if (type == MessageType.MESSAGE_TYPE_OPTIONS) {
            return PoloProto.Options.parseFrom(payload);
        } else if (type == MessageType.MESSAGE_TYPE_PAIRING_REQUEST) {
            return PoloProto.PairingRequest.parseFrom(payload);
        } else if (type == MessageType.MESSAGE_TYPE_PAIRING_REQUEST_ACK) {
            return PoloProto.PairingRequestAck.parseFrom(payload);
        } else if (type == MessageType.MESSAGE_TYPE_CONFIGURATION) {
            return PoloProto.Configuration.parseFrom(payload);
        } else if (type == MessageType.MESSAGE_TYPE_CONFIGURATION_ACK) {
            return PoloProto.ConfigurationAck.parseFrom(payload);
        } else if (type == MessageType.MESSAGE_TYPE_SECRET) {
            return PoloProto.Secret.parseFrom(payload);
        } else if (type == MessageType.MESSAGE_TYPE_SECRET_ACK) {
            return PoloProto.SecretAck.parseFrom(payload);
        }

        throw new IOException("Could not unparse message");
!!!13183500.java!!!	readBytesBlocking(in numBytes : int) : byte
        byte[] buf = new byte[numBytes];
        int bytesRead = 0;

        // For an SSLSocket, read() can frequently return zero bytes,
        // or fewer bytes than desired, due to SSL unwrapping and other
        // non-application-data events.
        while (bytesRead < numBytes) {
            int inc = mInputStream.read(buf, bytesRead, numBytes - bytesRead);
            if (inc < 0) {
                throw new IOException("Stream closed while reading.");
            }
            bytesRead += inc;
        }
        return buf;
!!!13183628.java!!!	wrapInnerMessage(inout message : GeneratedMessageLite) : OuterMessage
        MessageType type;
        if (message instanceof PoloProto.Options) {
            type = MessageType.MESSAGE_TYPE_OPTIONS;
        } else if (message instanceof PoloProto.PairingRequest) {
            type = MessageType.MESSAGE_TYPE_PAIRING_REQUEST;
        } else if (message instanceof PoloProto.PairingRequestAck) {
            type = MessageType.MESSAGE_TYPE_PAIRING_REQUEST_ACK;
        } else if (message instanceof PoloProto.Configuration) {
            type = MessageType.MESSAGE_TYPE_CONFIGURATION;
        } else if (message instanceof PoloProto.ConfigurationAck) {
            type = MessageType.MESSAGE_TYPE_CONFIGURATION_ACK;
        } else if (message instanceof PoloProto.Secret) {
            type = MessageType.MESSAGE_TYPE_SECRET;
        } else if (message instanceof PoloProto.SecretAck) {
            type = MessageType.MESSAGE_TYPE_SECRET_ACK;
        } else {
            throw new PoloException("Bad inner message type.");
        }

        // compose outer message
        OuterMessage.Builder builder = OuterMessage.newBuilder();
        builder.setStatus(OuterMessage.Status.STATUS_OK);
        builder.setProtocolVersion(1);
        builder.setType(type);
        builder.setPayload(message.toByteString());

        return builder.build();
!!!13183756.java!!!	writeMessage(inout message : OuterMessage) : void
        byte[] messageBytes = message.toByteArray();
        int messageLength = messageBytes.length;

        mOutputStream.write(PoloUtil.intToBigEndianIntBytes(messageLength));
        mOutputStream.write(messageBytes);
!!!13183884.java!!!	sendMessage(inout message : PoloMessage) : void
        GeneratedMessageLite pb = poloMessageToProto(message);
        OuterMessage outerMessage = wrapInnerMessage(pb);
        writeMessage(outerMessage);
!!!13184012.java!!!	sendErrorMessage(inout e : Exception) : void
        OuterMessage.Builder builder = OuterMessage.newBuilder();
        builder.setProtocolVersion(1);

        if (e instanceof NoConfigurationException) {
            builder.setStatus(OuterMessage.Status.STATUS_BAD_CONFIGURATION);
        } else if (e instanceof BadSecretException) {
            builder.setStatus(OuterMessage.Status.STATUS_BAD_SECRET);
        } else {
            builder.setStatus(OuterMessage.Status.STATUS_ERROR);
        }

        OuterMessage message = builder.build();
        writeMessage(message);
!!!13184140.java!!!	poloMessageToProto(inout poloMessage : PoloMessage) : GeneratedMessageLite
        if (poloMessage instanceof PairingRequestMessage) {
            return toProto((PairingRequestMessage) poloMessage);
        } else if (poloMessage instanceof PairingRequestAckMessage) {
            return toProto((PairingRequestAckMessage) poloMessage);
        } else if (poloMessage instanceof OptionsMessage) {
            return toProto((OptionsMessage) poloMessage);
        } else if (poloMessage instanceof ConfigurationMessage) {
            return toProto((ConfigurationMessage) poloMessage);
        } else if (poloMessage instanceof ConfigurationAckMessage) {
            return toProto((ConfigurationAckMessage) poloMessage);
        } else if (poloMessage instanceof SecretMessage) {
            return toProto((SecretMessage) poloMessage);
        } else if (poloMessage instanceof SecretAckMessage) {
            return toProto((SecretAckMessage) poloMessage);
        }
        return null;
!!!13184268.java!!!	toProto(inout poloMessage : PairingRequestMessage) : PoloProto.PairingRequest
        PoloProto.PairingRequest.Builder builder = PoloProto.PairingRequest
                .newBuilder();
        builder.setServiceName(poloMessage.getServiceName());
        if (poloMessage.hasClientName()) {
            builder.setClientName(poloMessage.getClientName());
        }
        return builder.build();
!!!13184396.java!!!	toProto(inout poloMessage : PairingRequestAckMessage) : PoloProto.PairingRequestAck
                PoloProto.PairingRequestAck.Builder builder = PoloProto.PairingRequestAck.newBuilder();
        if (poloMessage.hasServerName()) {
            builder.setServerName(poloMessage.getServerName());
        }
        return builder.build();
!!!13184524.java!!!	toProto(inout poloMessage : OptionsMessage) : PoloProto.Options
        PoloProto.Options.Builder builder = PoloProto.Options.newBuilder();

        switch (poloMessage.getProtocolRolePreference()) {
            case DISPLAY_DEVICE:
                builder.setPreferredRole(
                        PoloProto.Options.RoleType.ROLE_TYPE_INPUT);
                break;
            case INPUT_DEVICE:
                builder.setPreferredRole(
                        PoloProto.Options.RoleType.ROLE_TYPE_OUTPUT);
                break;
        }

        for (EncodingOption enc : poloMessage.getOutputEncodingSet()) {
            builder.addOutputEncodings(toProto(enc));
        }

        for (EncodingOption enc : poloMessage.getInputEncodingSet()) {
            builder.addInputEncodings(toProto(enc));
        }

        return builder.build();
!!!13184652.java!!!	toProto(inout poloMessage : ConfigurationMessage) : PoloProto.Configuration
        PoloProto.Configuration.Builder builder = PoloProto.Configuration
                .newBuilder();
        builder.setEncoding(toProto(poloMessage.getEncoding()));
        builder.setClientRole(toProto(poloMessage.getClientRole()));
        return builder.build();
!!!13184780.java!!!	toProto(inout enc : EncodingOption) : PoloProto.Options.Encoding
        PoloProto.Options.Encoding.Builder builder = PoloProto.Options.Encoding
                .newBuilder();

        PoloProto.Options.Encoding.EncodingType type;

        switch (enc.getType()) {
            case ENCODING_ALPHANUMERIC:
                type = EncodingType.ENCODING_TYPE_ALPHANUMERIC;
                break;
            case ENCODING_HEXADECIMAL:
                type = EncodingType.ENCODING_TYPE_HEXADECIMAL;
                break;
            case ENCODING_NUMERIC:
                type = EncodingType.ENCODING_TYPE_NUMERIC;
                break;
            case ENCODING_QRCODE:
                type = EncodingType.ENCODING_TYPE_QRCODE;
                break;
            default:
                type = EncodingType.ENCODING_TYPE_UNKNOWN;
                break;
        }

        builder.setType(type);
        builder.setSymbolLength(enc.getSymbolLength());
        return builder.build();
!!!13184908.java!!!	toProto(inout role : ProtocolRole) : PoloProto.Options.RoleType
        switch (role) {
            case DISPLAY_DEVICE:
                return RoleType.ROLE_TYPE_OUTPUT;
            case INPUT_DEVICE:
                return RoleType.ROLE_TYPE_INPUT;
            default:
                return RoleType.ROLE_TYPE_UNKNOWN;
        }
!!!13185036.java!!!	toProto(inout poloMessage : ConfigurationAckMessage) : PoloProto.ConfigurationAck
        PoloProto.ConfigurationAck.Builder builder = PoloProto.ConfigurationAck
                .newBuilder();
        return builder.build();
!!!13185164.java!!!	toProto(inout poloMessage : SecretMessage) : PoloProto.Secret
        PoloProto.Secret.Builder builder = PoloProto.Secret.newBuilder();
        builder.setSecret(ByteString.copyFrom(poloMessage.getSecret()));
        return builder.build();
!!!13185292.java!!!	toProto(inout poloMessage : SecretAckMessage) : PoloProto.SecretAck
        PoloProto.SecretAck.Builder builder = PoloProto.SecretAck.newBuilder();
        builder.setSecret(ByteString.copyFrom(poloMessage.getSecret()));
        return builder.build();
!!!13185420.java!!!	protoToPoloMessage(inout protoMessage : GeneratedMessageLite) : PoloMessage
        if (protoMessage instanceof PoloProto.PairingRequest) {
            return fromProto((PoloProto.PairingRequest) protoMessage);
        } else if (protoMessage instanceof PoloProto.PairingRequestAck) {
            return fromProto((PoloProto.PairingRequestAck) protoMessage);
        } else if (protoMessage instanceof PoloProto.Options) {
            return fromProto((PoloProto.Options) protoMessage);
        } else if (protoMessage instanceof PoloProto.Configuration) {
            return fromProto((PoloProto.Configuration) protoMessage);
        } else if (protoMessage instanceof PoloProto.ConfigurationAck) {
            return fromProto((PoloProto.ConfigurationAck) protoMessage);
        } else if (protoMessage instanceof PoloProto.Secret) {
            return fromProto((PoloProto.Secret) protoMessage);
        } else if (protoMessage instanceof PoloProto.SecretAck) {
            return fromProto((PoloProto.SecretAck) protoMessage);
        }
        return null;
!!!13185548.java!!!	fromProto(inout protoMessage : PoloProto.PairingRequest) : PairingRequestMessage
        return new PairingRequestMessage(protoMessage.getServiceName(),
                protoMessage.hasClientName() ? protoMessage.getClientName()
                        : null);
!!!13185676.java!!!	fromProto(inout protoMessage : PoloProto.PairingRequestAck) : PairingRequestAckMessage
        return new PairingRequestAckMessage(
                protoMessage.hasServerName() ? protoMessage.getServerName()
                        : null);
!!!13185804.java!!!	fromProto(inout protoMessage : PoloProto.Options) : OptionsMessage
        OptionsMessage optionsMessage = new OptionsMessage();

        System.out.println("Read options: " + protoMessage);

        switch (protoMessage.getPreferredRole()) {
            case ROLE_TYPE_INPUT:
                optionsMessage.setProtocolRolePreference(
                        OptionsMessage.ProtocolRole.INPUT_DEVICE);
                break;
            case ROLE_TYPE_OUTPUT:
                optionsMessage.setProtocolRolePreference(
                        OptionsMessage.ProtocolRole.DISPLAY_DEVICE);
                break;
        }

        for (PoloProto.Options.Encoding e :
                protoMessage.getInputEncodingsList()) {
            optionsMessage.addInputEncoding(fromProto(e));
        }

        for (PoloProto.Options.Encoding e :
                protoMessage.getOutputEncodingsList()) {
            optionsMessage.addOutputEncoding(fromProto(e));
        }

        return optionsMessage;
!!!13185932.java!!!	fromProto(inout protoMessage : PoloProto.Configuration) : ConfigurationMessage
        EncodingOption enc = fromProto(protoMessage.getEncoding());
        OptionsMessage.ProtocolRole role = OptionsMessage.ProtocolRole.UNKNOWN;

        switch (protoMessage.getClientRole()) {
            case ROLE_TYPE_INPUT:
                role = OptionsMessage.ProtocolRole.INPUT_DEVICE;
                break;
            case ROLE_TYPE_OUTPUT:
                role = OptionsMessage.ProtocolRole.DISPLAY_DEVICE;
                break;
        }

        return new ConfigurationMessage(enc, role);
!!!13186060.java!!!	fromProto(inout protoMessage : PoloProto.ConfigurationAck) : ConfigurationAckMessage
        return new ConfigurationAckMessage();
!!!13186188.java!!!	fromProto(inout protoMessage : PoloProto.Secret) : SecretMessage
        return new SecretMessage(protoMessage.getSecret().toByteArray());
!!!13186316.java!!!	fromProto(inout protoMessage : PoloProto.SecretAck) : SecretAckMessage
        return new SecretAckMessage(protoMessage.getSecret().toByteArray());
!!!13186444.java!!!	fromProto(inout enc : PoloProto.Options.Encoding) : EncodingOption
        EncodingOption.EncodingType type;

        switch (enc.getType()) {
            case ENCODING_TYPE_ALPHANUMERIC:
                type = EncodingOption.EncodingType.ENCODING_ALPHANUMERIC;
                break;
            case ENCODING_TYPE_HEXADECIMAL:
                type = EncodingOption.EncodingType.ENCODING_HEXADECIMAL;
                break;
            case ENCODING_TYPE_NUMERIC:
                type = EncodingOption.EncodingType.ENCODING_NUMERIC;
                break;
            case ENCODING_TYPE_QRCODE:
                type = EncodingOption.EncodingType.ENCODING_QRCODE;
                break;
            default:
                type = EncodingOption.EncodingType.ENCODING_UNKNOWN;
        }

        return new EncodingOption(type, enc.getSymbolLength());

