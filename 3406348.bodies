class PlainInsn
!!!14695436.java!!!	PlainInsn(inout opcode : Rop, inout position : SourcePosition, inout result : RegisterSpec, inout sources : RegisterSpecList)
        super(opcode, position, result, sources);

        switch (opcode.getBranchingness()) {
            case Rop.BRANCH_SWITCH:
            case Rop.BRANCH_THROW: {
                throw new IllegalArgumentException("bogus branchingness");
            }
        }

        if (result != null && opcode.getBranchingness() != Rop.BRANCH_NONE) {
            // move-result-pseudo is required here
            throw new IllegalArgumentException
                    ("can't mix branchingness with result");
        }
!!!14695564.java!!!	PlainInsn(inout opcode : Rop, inout position : SourcePosition, inout result : RegisterSpec, inout source : RegisterSpec)
        this(opcode, position, result, RegisterSpecList.make(source));
!!!14695692.java!!!	getCatches() : TypeList
        return StdTypeList.EMPTY;
!!!14695820.java!!!	accept(inout visitor : Visitor) : void
        visitor.visitPlainInsn(this);
!!!14695948.java!!!	withAddedCatch(inout type : Type) : Insn
        throw new UnsupportedOperationException("unsupported");
!!!14696076.java!!!	withRegisterOffset(in delta : int) : Insn
        return new PlainInsn(getOpcode(), getPosition(),
                             getResult().withOffset(delta),
                             getSources().withOffset(delta));
!!!14696204.java!!!	withLastSourceLiteral() : Insn
        RegisterSpecList sources = getSources();
        int szSources = sources.size();

        if (szSources == 0) {
            return this;
        }

        TypeBearer lastType = sources.get(szSources - 1).getTypeBearer();

        if (!lastType.isConstant()) {
            return this;
        }

        Constant cst = (Constant) lastType;

        RegisterSpecList newSources = sources.withoutLast();

        Rop newRop;
        try {
            newRop = Rops.ropFor(getOpcode().getOpcode(),
                    getResult(), newSources, (Constant)lastType);
        } catch (IllegalArgumentException ex) {
            // There's no rop for this case
            return this;
        }

        return new PlainCstInsn(newRop, getPosition(),
                getResult(), newSources, cst);
!!!14696332.java!!!	withNewRegisters(inout result : RegisterSpec, inout sources : RegisterSpecList) : Insn

        return new PlainInsn(getOpcode(), getPosition(),
                             result,
                             sources);

