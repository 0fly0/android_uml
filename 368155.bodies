class OpenSSLSessionImpl
!!!2446619.java!!!	OpenSSLSessionImpl(in sslSessionNativePointer : long, inout localCertificates : X509Certificate, inout peerCertificates : X509Certificate, inout peerHost : String, in peerPort : int, inout sessionContext : AbstractSessionContext)
        this.sslSessionNativePointer = sslSessionNativePointer;
        this.localCertificates = localCertificates;
        this.peerCertificates = peerCertificates;
        this.peerHost = peerHost;
        this.peerPort = peerPort;
        this.sessionContext = sessionContext;
!!!2446747.java!!!	OpenSSLSessionImpl(inout derData : byte, inout peerHost : String, in peerPort : int, inout peerCertificates : X509Certificate, inout sessionContext : AbstractSessionContext)
        this(NativeCrypto.d2i_SSL_SESSION(derData),
             null,
             peerCertificates,
             peerHost,
             peerPort,
             sessionContext);
        // TODO move this check into native code so we can throw an error with more information
        if (this.sslSessionNativePointer == 0) {
            throw new IOException("Invalid session data");
        }
!!!2446875.java!!!	getId() : byte
        if (id == null) {
            resetId();
        }
        return id;
!!!2447003.java!!!	resetId() : void
        id = NativeCrypto.SSL_SESSION_session_id(sslSessionNativePointer);
!!!2447131.java!!!	getEncoded() : byte
        return NativeCrypto.i2d_SSL_SESSION(sslSessionNativePointer);
!!!2447259.java!!!	getCreationTime() : long
        if (creationTime == 0) {
            creationTime = NativeCrypto.SSL_SESSION_get_time(sslSessionNativePointer);
        }
        return creationTime;
!!!2447387.java!!!	getLastAccessedTime() : long
        return (lastAccessedTime == 0) ? getCreationTime() : lastAccessedTime;
!!!2447515.java!!!	getApplicationBufferSize() : int
        return SSLRecordProtocol.MAX_DATA_LENGTH;
!!!2447643.java!!!	getPacketBufferSize() : int
        return SSLRecordProtocol.MAX_SSL_PACKET_SIZE;
!!!2447771.java!!!	getLocalPrincipal() : Principal
        if (localCertificates != null && localCertificates.length > 0) {
            return localCertificates[0].getSubjectX500Principal();
        } else {
            return null;
        }
!!!2447899.java!!!	getLocalCertificates() : Certificate
        return localCertificates;
!!!2448027.java!!!	getPeerCertificateChain() : X509Certificate
        checkPeerCertificatesPresent();
        javax.security.cert.X509Certificate[] result = peerCertificateChain;
        if (result == null) {
            // single-check idiom
            peerCertificateChain = result = createPeerCertificateChain();
        }
        return result;
!!!2448155.java!!!	createPeerCertificateChain() : X509Certificate
        try {
            javax.security.cert.X509Certificate[] chain
                    = new javax.security.cert.X509Certificate[peerCertificates.length];

            for (int i = 0; i < peerCertificates.length; i++) {
                byte[] encoded = peerCertificates[i].getEncoded();
                chain[i] = javax.security.cert.X509Certificate.getInstance(encoded);
            }
            return chain;
        } catch (CertificateEncodingException e) {
            SSLPeerUnverifiedException exception = new SSLPeerUnverifiedException(e.getMessage());
            exception.initCause(exception);
            throw exception;
        } catch (CertificateException e) {
            SSLPeerUnverifiedException exception = new SSLPeerUnverifiedException(e.getMessage());
            exception.initCause(exception);
            throw exception;
        }
!!!2448283.java!!!	getPeerCertificates() : Certificate
        checkPeerCertificatesPresent();
        return peerCertificates;
!!!2448411.java!!!	checkPeerCertificatesPresent() : void
        if (peerCertificates == null || peerCertificates.length == 0) {
            throw new SSLPeerUnverifiedException("No peer certificates");
        }
!!!2448539.java!!!	getPeerPrincipal() : Principal
        checkPeerCertificatesPresent();
        return peerCertificates[0].getSubjectX500Principal();
!!!2448667.java!!!	getPeerHost() : String
        return peerHost;
!!!2448795.java!!!	getPeerPort() : int
        return peerPort;
!!!2448923.java!!!	getCipherSuite() : String
        if (cipherSuite == null) {
            String name = NativeCrypto.SSL_SESSION_cipher(sslSessionNativePointer);
            cipherSuite = NativeCrypto.OPENSSL_TO_STANDARD_CIPHER_SUITES.get(name);
            if (cipherSuite == null) {
                cipherSuite = name;
            }
        }
        return cipherSuite;
!!!2449051.java!!!	getProtocol() : String
        if (protocol == null) {
            protocol = NativeCrypto.SSL_SESSION_get_version(sslSessionNativePointer);
        }
        return protocol;
!!!2449179.java!!!	getSessionContext() : SSLSessionContext
        return sessionContext;
!!!2449307.java!!!	isValid() : boolean
        SSLSessionContext context = sessionContext;
        if (isValid
                && context != null
                && context.getSessionTimeout() != 0
                && getCreationTime() + (context.getSessionTimeout() * 1000)
                    < System.currentTimeMillis()) {
            isValid = false;
        }
        return isValid;
!!!2449435.java!!!	invalidate() : void
        isValid = false;
        sessionContext = null;
!!!2449563.java!!!	getValue(inout name : String) : Object
        if (name == null) {
            throw new IllegalArgumentException("name == null");
        }
        return values.get(name);
!!!2449691.java!!!	getValueNames() : String
        return values.keySet().toArray(new String[values.size()]);
!!!2449819.java!!!	putValue(inout name : String, inout value : Object) : void
        if (name == null || value == null) {
            throw new IllegalArgumentException("name == null || value == null");
        }
        Object old = values.put(name, value);
        if (value instanceof SSLSessionBindingListener) {
            ((SSLSessionBindingListener) value)
                    .valueBound(new SSLSessionBindingEvent(this, name));
        }
        if (old instanceof SSLSessionBindingListener) {
            ((SSLSessionBindingListener) old)
                    .valueUnbound(new SSLSessionBindingEvent(this, name));
        }
!!!2449947.java!!!	removeValue(inout name : String) : void
        if (name == null) {
            throw new IllegalArgumentException("name == null");
        }
        Object old = values.remove(name);
        if (old instanceof SSLSessionBindingListener) {
            SSLSessionBindingListener listener = (SSLSessionBindingListener) old;
            listener.valueUnbound(new SSLSessionBindingEvent(this, name));
        }
!!!2450075.java!!!	finalize() : void
        try {
            NativeCrypto.SSL_SESSION_free(sslSessionNativePointer);
        } finally {
            super.finalize();
        }
