class PairingDevice
!!!12269580.java!!!	getDeviceNameBySource(in context : Context, in sourceId : int) : String
        String[] deviceNameArray = context.getResources().getStringArray(R.array.device);
        String deviceName = "";
        if (sourceId == TvSource.TV_SourceAtv.value()
                || sourceId == TvSource.TV_SourceDtv.value()) {
            deviceName = deviceNameArray[0];
        } else if (sourceId == TvSource.TV_SourceHdmi0.value()) {
            deviceName = deviceNameArray[1];
        } else if (sourceId == TvSource.TV_SourceHdmi1.value()) {
            deviceName = deviceNameArray[2];
        } else if (sourceId == TvSource.TV_SourceHdmi2.value()) {
            deviceName = deviceNameArray[3];
        } else if (sourceId == TvSource.TV_SourceHdmi3.value()) {
            deviceName = deviceNameArray[4];
        } else if (sourceId == TvSource.TV_SourceComponent.value()) {
            deviceName = deviceNameArray[5];
        } else if (sourceId == TvSource.TV_SourceCvbs0.value()) {
            deviceName = deviceNameArray[6];
        } else if (sourceId == TvSource.TV_SourceVga.value()) {
            deviceName = deviceNameArray[7];
        }
        return deviceName;
!!!12269708.java!!!	getPortId(in deviceId : String) : int
        Uri uri = Uri.parse(PairingDevice.DeviceIdUriMap.get(deviceId));
        String portId = uri.getQueryParameter("port");
        Integer iport = Integer.parseInt(portId);
        return iport;
!!!12269836.java!!!	getDevIndexById(in deviceList : List<Device>, in deviceId : String) : int
        int index = 0;
        for (Device iDevice : deviceList) {
            if (deviceId != null && deviceId.equals(iDevice.getId()))
                return index;

            index++;
        }

        return -1;
!!!12269964.java!!!	filterDeviceList(in context : Context, in deviceList : List<Device>, inout filterExternalPackage : boolean, inout excludeDeviceIdSet : Set<String>) : Device
        List<Device> filterDevices = new ArrayList<Device>();
        String pkgName = context.getPackageName();

        for (Device iDevice : deviceList) {
            if (filterExternalPackage && !pkgName.equals(iDevice.getPackageName()))
                continue;

            if (excludeDeviceIdSet != null && excludeDeviceIdSet.contains(iDevice.getId()))
                continue;

            filterDevices.add(iDevice);
        }

        return filterDevices;
!!!12270092.java!!!	buildInternalTunerDevice(inout context : Context) : Device
        final Device device = new Device.Builder(context.getPackageName(),
                PairingDevice.TUNER_DEVICE_ID)
                .setType(DeviceType.OTA_TUNER)
                // Setting this to true affects setup.
                .setCapability(Capability.IS_INTERNAL, true)

                // port selection screen during pairing.
                .setCapability(Capability.IS_BOUND_TO_PORT,
                        PairingDevice.BOUND_PORT_TUNER_VIDEO_URI)
                .setCapability(Capability.CAN_DISCONNECT, false)
                .setCapability(Capability.CAN_BE_DEFAULT, true)

                // This flag is true for scanning through all channels
                // to disable the unavailable/scrambled ones.
                // Since we set WRITES_CHANNEL_LIST to true and merge
                // Google lineup with tuner scaned channel, use default false
                // .setCapability(Capability.CAN_SCAN_CHANNELS, true)

                // Tuner devices use channel lineups.
                .setCapability(Capability.USES_CHANNEL_LINEUP, true)

                // Need select lineup explicitly, because we don't know lineup id
                .setCapability(Capability.PROVIDES_CHANNEL_LINEUP, false)

                // We will merge Google Lineup with scaned channel, and then write channel
                .setCapability(Capability.WRITES_CHANNEL_LIST, true)

                // Tuner devices require specific lineup types.
                .setCapability(Capability.FILTERS_LINEUP_TYPES,
                        new String[] {
                                LineupType.BROADCAST_ANALOG.toString(),
                                LineupType.BROADCAST_DIGITAL.toString()
                        })

                .setLabel(
                        PairingDevice.getDeviceNameBySource(context,
                                TvSource.TV_SourceDtv.value()))
                .build();
        return device;
!!!12270220.java!!!	buildExternalVideoDevice(inout context : Context, in deviceId : String, in videoURI : String, in deviceName : String) : Device
        final Device device = new Device.Builder(context.getPackageName(), deviceId)
                .setSummary(Device.NO_SUMMARY)
                .setManufacturer(Device.NO_MANUFACTURER)
                .setCapability(Capability.USES_CHANNEL_LINEUP, false)
                .setCapability(Capability.IS_PASSTHROUGH_ONLY, true)
                .setCapability(Capability.CAN_BE_DEFAULT, true)
                .setCapability(Capability.IS_BOUND_TO_PORT, videoURI)
                .setLabel(deviceName)
                .build();
        return device;
!!!12270348.java!!!	getExternalVideoDevices(inout context : Context) : Device
        String[] deviceNameArray = context.getResources().getStringArray(R.array.device);
        List<Device> devices = new ArrayList<Device>();
        devices.add(buildExternalVideoDevice(context, HDMI1_DEVICE_ID,
                BOUND_PORT_HDMI1_VIDEO_URI, deviceNameArray[1]));
        devices.add(buildExternalVideoDevice(context, HDMI2_DEVICE_ID,
                BOUND_PORT_HDMI2_VIDEO_URI, deviceNameArray[2]));
        devices.add(buildExternalVideoDevice(context, HDMI3_DEVICE_ID,
                BOUND_PORT_HDMI3_VIDEO_URI, deviceNameArray[3]));
        devices.add(buildExternalVideoDevice(context, HDMI4_DEVICE_ID,
                BOUND_PORT_HDMI4_VIDEO_URI, deviceNameArray[4]));
        devices.add(buildExternalVideoDevice(context, COMPONENT_DEVICE_ID,
                BOUND_PORT_COMPONENT_VIDEO_URI, deviceNameArray[5]));
        devices.add(buildExternalVideoDevice(context, COMPOSITE_DEVICE_ID,
                BOUND_PORT_COMPOSITE_VIDEO_URI, deviceNameArray[6]));
        devices.add(buildExternalVideoDevice(context, VGA_DEVICE_ID,
                BOUND_PORT_VGA_VIDEO_URI, deviceNameArray[7]));
        return devices;
!!!12270476.java!!!	pairDevices(in context : Context, in autoPair : boolean) : void
        Log.d(TAG, "pairDevices ()");
        Device tunerDevice = buildInternalTunerDevice(context);
        if (autoPair) {
            Log.d(TAG, "*********************pairDevices internalDevice=" +
                    tunerDevice);
            Intent pairingTunerIntent =
                MediaDevicesIntents.createServicePairIntent(tunerDevice,
                Uri.parse(tunerDevice.getCapabilityStringValue(Capability.IS_BOUND_TO_PORT)));
            context.startService(pairingTunerIntent);
        }
        Device.online(context, tunerDevice);

        List<Device> devices = getExternalVideoDevices(context);
        for (Device device : devices) {
            if (autoPair) {
                final Intent pairingIntent = MediaDevicesIntents.createServicePairIntent(device,
                        Uri.parse(device.getCapabilityStringValue(Capability.IS_BOUND_TO_PORT)));
                context.startService(pairingIntent);
                Log.d(TAG,
                        "************* pairDevices : " + device.getId());
            }
            Device.online(context, device);
        }
