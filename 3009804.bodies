class CECReceiver
!!!12286732.java!!!	handleMessage(in msg : int) : void
        if (mWrapper == null) {
            mWrapper = Wrapper.getWrapperInstance();
        }

        ITvCecService tvService = CecUtils.getITvCecService();
        if (msg == CEC_MSG_DEVICE_AUTO_STANDBY_FULL) {
            Log.d(TAG, "Handle CEC_MSG_DEVICE_AUTO_STANDBY_FULL");
            if (mWrapper != null && mWrapper.getHdmiCec() == 1 && tvService != null) {
                try {
                    Log.d(TAG, "send message to device standby tvService=" + tvService);
                    tvService.disableSacWithoutStateUpdate();
                    if (mWrapper.getDeviceAutoPowerOff() == 1) {
                        tvService.sendTargetDeviceToStandy(0xFFFF);
                        Log.d(TAG, "autopoweroff true case 1, send all devices to standby");
                    }
                } catch (RemoteException e) {
                    e.printStackTrace();
                }

            }
        } else if (msg == CEC_MSG_DEVICE_AUTO_STANDBY_PARTIAL) {
            if (mWrapper != null && mWrapper.getHdmiCec() == 1 && tvService != null) {
                try {
                    Log.d(TAG, "send message to device PARTIAL standby");
                    tvService.disableSacWithoutStateUpdate();
                    if (mWrapper.getDeviceAutoPowerOff() == 1) {
                        tvService.sendTargetDeviceToStandy(0xFFFF);
                        Log.d(TAG, "autopoweroff true case 2, send all devices to standby");
                    }
                    tvService.setCECShutdownStatus(true);
                } catch (RemoteException e) {
                    e.printStackTrace();
                }

            }
        }
!!!12286860.java!!!	onReceive(inout context : Context, inout intent : Intent) : void
        if (intent.getAction().equals(HdmiCecUtils.ACTION_HDMI_CEC_ACTIVE_SOURCE)) {
            Log.i(TAG, " @@@@@@@@@@@@@ ACTIVE SOURCE INTENT RECEIVED @@@@@@@@@@@@@");
            Bundle data = intent.getBundleExtra(HdmiCecUtils.EXTRA_HDMI_BUNDLE);
            Intent hdmiServiceIntent = new Intent();
            hdmiServiceIntent.setAction(CecUtils.CEC_ACTION_ACTIVE_SOURCE);
            hdmiServiceIntent.putExtra(HdmiCecUtils.EXTRA_HDMI_BUNDLE, data);
            context.startService(hdmiServiceIntent);
        } else if (intent.getAction().equals(HdmiCecUtils.ACTION_HDMI_CEC_INACTIVE_SOURCE)) {
            Log.i(TAG, " @@@@@@@@@@@@@ INACTIVE SOURCE INTENT RECEIVED @@@@@@@@@@@@@");
            Intent hdmiServiceIntent = new Intent();
            hdmiServiceIntent.setAction(CecUtils.CEC_ACTION_INACTIVE_SOURCE);
            context.startService(hdmiServiceIntent);

        } else if (intent.getAction().equals(HdmiCecUtils.HDMI_CEC_SHOW_OSD_ACTIION)) {
            Log.i(TAG, " @@@@@@@@@@@@@ SHOW OSD NOTIFICATION INTENT RECEIVED @@@@@@@@@@@@@");
            String osdName = intent.getStringExtra(HdmiCecUtils.EXTRA_HDMI_DEV_OSDNAME);
            int osdMode = intent.getIntExtra(HdmiCecUtils.EXTRA_OSD_STRING_DISPLAY_MODE, 0);
            Intent cecIntent = new Intent(CecUtils.CEC_ACTION_OSD_DISPLAY_NOTIFY);
            cecIntent.putExtra(HdmiCecUtils.EXTRA_HDMI_DEV_OSDNAME, osdName);
            cecIntent.putExtra(HdmiCecUtils.EXTRA_OSD_STRING_DISPLAY_MODE, osdMode);
            context.startService(cecIntent);

        } else if (intent.getAction().equals("android.intent.action.BOOT_COMPLETED")) {
            Log.i(TAG, " @@@@@@@@@@@@@ BOOT COMPLETED INTENT RECEIVED @@@@@@@@@@@@@");

            Intent hdmiServiceIntent = new Intent();
            hdmiServiceIntent.setAction(CecUtils.CEC_ACTION_ACTIVATE_CEC_SAC_DEVICES);
            context.startService(hdmiServiceIntent);

        } else if (intent.getAction().equals("android.intent.action.PARTIAL_BOOT")) {
            Log.i(TAG,
                    "@@@@@@@@@@ ACTION PARTIAL BOOT INTENT RECEIVED @@@@@@@@@");
            if (mWrapper == null) {
                mWrapper = Wrapper.getWrapperInstance();
            }

            if (mWrapper != null) {
                ITvCecService tvService = CecUtils.getITvCecService();
                Log.d(TAG, "android.intent.action.PARTIAL_BOOT tvService=" + tvService);
                if (tvService != null) {
                    try {
                        tvService.setCECShutdownStatus(false);
                    } catch (RemoteException e) {
                        e.printStackTrace();
                    }

                }
            }
            Intent hdmiServiceIntent = new Intent();
            hdmiServiceIntent.setAction(CecUtils.CEC_ACTION_ACTIVATE_CEC_SAC_DEVICES);
            context.startService(hdmiServiceIntent);
        } else if (intent.getAction().equals("android.intent.action.ACTION_SHUTDOWN")) {
            Log.i(TAG,
                    "@@@@@@@@@@@@@@ ACTION SHUT DOWN INTENT RECEIVED @@@@@@@@@");
            handleMessage(CEC_MSG_DEVICE_AUTO_STANDBY_FULL);
        } else if (intent.getAction().equals("android.intent.action.PARTIAL_SHUTDOWN")) {
            Log.i(TAG,
                    "@@@@@@@@@@@ ACTION PARTIAL SHUTDOWN INTENT RECEIVED @@@@@@@@@");
            handleMessage(CEC_MSG_DEVICE_AUTO_STANDBY_PARTIAL);
        } else if (intent.getAction().equals("android.action.WARMBOOT_SUSPEND")) {

            Log.i(TAG,
                    "@@@@@@@@@@@@@ android.action.WARMBOOT_SUSPEND @@@@@@@@@@@@@@");
            handleMessage(CEC_MSG_DEVICE_AUTO_STANDBY_PARTIAL);
        } else if (intent.getAction().equals(HdmiCecUtils.CEC_ENABLED_ACTION)) {
            Log.i(TAG, "@@@@@@@@@@@@@@@@@@@@@@@@@ CEC ON INTENT RECEIVED @@@@@@@@@@@@@@@@@@@@@");

            Intent cecIntent = new Intent();
            cecIntent.setAction(CecUtils.CEC_ACTION_CEC_ON);
            context.startService(cecIntent);

        } else if (intent.getAction().equals("android.action.WARMBOOT_RESUME")) {

            Log.i(TAG,
                    "@@@@@@@@@@@@@@@@@@ android.action.WARMBOOT_RESUME @@@@@@@@@@@@@@");
            if (mWrapper == null) {
                mWrapper = Wrapper.getWrapperInstance();
            }

            if (mWrapper != null) {
                ITvCecService itvService = CecUtils.getITvCecService();
                Log.d(TAG, "android.intent.action.WARMBOOT_RESUME itvService=" + itvService);
                if (itvService != null) {
                    try {
                        itvService.setCECShutdownStatus(false);
                    } catch (RemoteException e) {
                        e.printStackTrace();
                    }

                }
            }
            Intent hdmiServiceIntent = new Intent();
            hdmiServiceIntent.setAction(CecUtils.CEC_ACTION_ACTIVATE_CEC_SAC_DEVICES);
            context.startService(hdmiServiceIntent);

        } else if (intent.getAction().equals(HdmiCecUtils.HDMI_SAC_AUDIO_STATUS_ACTION)) {
            Log.i(TAG,
                    "@@@@@@@@@@@@@ com.marvell.hdmicec.ARC_AUDIO_STATUS_UPDATE @@@@@@@@@@@@@@");
            Intent arcIntent = new Intent();
            arcIntent.setAction(CecUtils.CEC_ACTION_AUDIO_STATUS_UPDATE);
            arcIntent.putExtras(intent.getExtras());
            context.startService(arcIntent);
        } else if (intent.getAction().equals("intent.hdmicec.ARC_AUDIO_STATUS_REMOVE")) {
            Log.i(TAG,
                    "@@@@@@@@@@ usdtv.intent.hdmicec.ARC_AUDIO_STATUS_REMOVE @@@@@@@@@@@@");
            Intent arcIntent = new Intent();
            arcIntent.setAction(CecUtils.CEC_ACTION_AUDIO_STATUS_REMOVE);
            context.startService(arcIntent);
        } else if (intent.getAction().equals("intent.hdmicec.TV_AS_ACTIVE")) {
            Log.i(TAG,
                    "@@@@@@@@@@@@@ usdtv.intent.hdmicec.TV_AS_ACTIVE @@@@@@@@@@@@");
            Intent tvActiveIntent = new Intent();
            tvActiveIntent.setAction(CecUtils.CEC_ACTION_TV_AS_ACTIVE);
            context.startService(tvActiveIntent);
        } else if (intent.getAction().equals("intent.hdmicec.TV_ROUTHING_CHANGE")) {
            Log.i(TAG,
                    "@@@@@@@@@@@@@ usdtv.intent.hdmicec.TV_ROUTHING_CHANGE @@@@@@@@@@@@@");
            Intent routingChangeIntent = new Intent();
            routingChangeIntent.setAction(CecUtils.CEC_ACTION_TV_ROUTING_CHANGE);
            context.startService(routingChangeIntent);
        } else if (intent.getAction().equals(TvIntents.INTENT_SOURCE_CONNECT_CHANGE)) {
            int sourceid = intent.getIntExtra(TvIntents.KEY_SOURCE_ID, -1);
            Log.i(TAG,
                    "com.marvell.willowtv.SOURCE_CONNECT_CHANGE was received,source=" + sourceid);
            if (sourceid >= (CecUtils.FIRST_HDMI_PORT + 2)
                    && sourceid <= (CecUtils.LAST_HDMI_PORT + 2)) {
                Intent connectingIntent = new Intent(CecUtils.CEC_ACTION_HDMI_CONNECTING_CHANGED);
                context.startService(connectingIntent);
            }
        } else if (intent.getAction().equals(CecUtils.HDMI_CEC_MUTE_UNMUTE_TV_SPEAKER_ACTION)) {
            int mute = intent.getIntExtra(HdmiCecUtils.key_sac_mute, 0);
            Log.i(TAG,
                     "SAC mute/unmute tv speaker intent was received, mute:" + mute);
            Intent sacIntent = new Intent(CecUtils.CEC_ACTION_MUTE_UNMUTE_TV_SPEAKER);
            sacIntent.putExtra(HdmiCecUtils.key_sac_mute, mute);
            context.startService(sacIntent);
        } else {
            Log.d(TAG, "Unknow intent");
        }

