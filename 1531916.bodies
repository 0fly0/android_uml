class BitmapFactory_Delegate
!!!9396748.java!!!	finishDecode(inout bm : Bitmap, inout outPadding : Rect, inout opts : Options) : Bitmap
        if (bm == null || opts == null) {
            return bm;
        }

        final int density = opts.inDensity;
        if (density == 0) {
            return bm;
        }

        bm.setDensity(density);
        final int targetDensity = opts.inTargetDensity;
        if (targetDensity == 0 || density == targetDensity || density == opts.inScreenDensity) {
            return bm;
        }

        byte[] np = bm.getNinePatchChunk();
        final boolean isNinePatch = np != null && NinePatch.isNinePatchChunk(np);
        // DELEGATE CHANGE: never scale 9-patch
        if (opts.inScaled && isNinePatch == false) {
            float scale = targetDensity / (float)density;
            // TODO: This is very inefficient and should be done in native by Skia
            final Bitmap oldBitmap = bm;
            bm = Bitmap.createScaledBitmap(oldBitmap, (int) (bm.getWidth() * scale + 0.5f),
                    (int) (bm.getHeight() * scale + 0.5f), true);
            oldBitmap.recycle();

            if (isNinePatch) {
                np = nativeScaleNinePatch(np, scale, outPadding);
                bm.setNinePatchChunk(np);
            }
            bm.setDensity(targetDensity);
        }

        return bm;
!!!9396876.java!!!	nativeDecodeStream(inout is : InputStream, inout storage : byte, inout padding : Rect, inout opts : Options) : Bitmap
        return nativeDecodeStream(is, storage, padding, opts, false, 1.f);
!!!9397004.java!!!	nativeDecodeStream(inout is : InputStream, inout storage : byte, inout padding : Rect, inout opts : Options, inout applyScale : boolean, in scale : float) : Bitmap
        Bitmap bm = null;

        //TODO support rescaling

        Density density = Density.MEDIUM;
        if (opts != null) {
            density = Density.getEnum(opts.inDensity);
        }

        try {
            if (is instanceof NinePatchInputStream) {
                NinePatchInputStream npis = (NinePatchInputStream) is;
                npis.disableFakeMarkSupport();

                // load the bitmap as a nine patch
                com.android.ninepatch.NinePatch ninePatch = com.android.ninepatch.NinePatch.load(
                        npis, true /*is9Patch*/, false /*convert*/);

                // get the bitmap and chunk objects.
                bm = Bitmap_Delegate.createBitmap(ninePatch.getImage(), true /*isMutable*/,
                        density);
                NinePatchChunk chunk = ninePatch.getChunk();

                // put the chunk in the bitmap
                bm.setNinePatchChunk(NinePatch_Delegate.serialize(chunk));

                // read the padding
                int[] paddingarray = chunk.getPadding();
                padding.left = paddingarray[0];
                padding.top = paddingarray[1];
                padding.right = paddingarray[2];
                padding.bottom = paddingarray[3];
            } else {
                // load the bitmap directly.
                bm = Bitmap_Delegate.createBitmap(is, true, density);
            }
        } catch (IOException e) {
            Bridge.getLog().error(null,"Failed to load image" , e, null);
        }

        return bm;
!!!9397132.java!!!	nativeDecodeFileDescriptor(inout fd : FileDescriptor, inout padding : Rect, inout opts : Options) : Bitmap
        opts.inBitmap = null;
        return null;
!!!9397260.java!!!	nativeDecodeAsset(in asset : int, inout padding : Rect, inout opts : Options) : Bitmap
        opts.inBitmap = null;
        return null;
!!!9397388.java!!!	nativeDecodeAsset(in asset : int, inout padding : Rect, inout opts : Options, inout applyScale : boolean, in scale : float) : Bitmap
        opts.inBitmap = null;
        return null;
!!!9397516.java!!!	nativeDecodeByteArray(inout data : byte, in offset : int, in length : int, inout opts : Options) : Bitmap
        opts.inBitmap = null;
        return null;
!!!9397644.java!!!	nativeScaleNinePatch(inout chunk : byte, in scale : float, inout pad : Rect) : byte
        // don't scale for now. This should not be called anyway since we re-implement
        // BitmapFactory.finishDecode();
        return chunk;
!!!9397772.java!!!	nativeIsSeekable(inout fd : FileDescriptor) : boolean
        return true;
