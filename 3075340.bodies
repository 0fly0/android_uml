class LatinKeyboardView
!!!12948236.java!!!	LatinKeyboardView(inout context : Context, inout attrs : AttributeSet)
        this(context, attrs, R.attr.latinKeyboardViewStyle);
!!!12948364.java!!!	LatinKeyboardView(inout context : Context, inout attrs : AttributeSet, in defStyle : int)
        super(context, attrs, defStyle);

        mTouchScreenRegulator = new SuddenJumpingTouchEventHandler(getContext(), this);

        mHasDistinctMultitouch = context.getPackageManager()
                .hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN_MULTITOUCH_DISTINCT);
        final boolean needsPhantomSuddenMoveEventHack = Boolean.parseBoolean(
                Utils.getDeviceOverrideValue(context.getResources(),
                        R.array.phantom_sudden_move_event_device_list, "false"));
        PointerTracker.init(mHasDistinctMultitouch, needsPhantomSuddenMoveEventHack);

        final TypedArray a = context.obtainStyledAttributes(
                attrs, R.styleable.LatinKeyboardView, defStyle, R.style.LatinKeyboardView);
        mAutoCorrectionSpacebarLedEnabled = a.getBoolean(
                R.styleable.LatinKeyboardView_autoCorrectionSpacebarLedEnabled, false);
        mAutoCorrectionSpacebarLedIcon = a.getDrawable(
                R.styleable.LatinKeyboardView_autoCorrectionSpacebarLedIcon);
        mSpacebarTextRatio = a.getFraction(R.styleable.LatinKeyboardView_spacebarTextRatio,
                1000, 1000, 1) / 1000.0f;
        mSpacebarTextColor = a.getColor(R.styleable.LatinKeyboardView_spacebarTextColor, 0);
        mSpacebarTextShadowColor = a.getColor(
                R.styleable.LatinKeyboardView_spacebarTextShadowColor, 0);
        mLanguageOnSpacebarFinalAlpha = a.getInt(
                R.styleable.LatinKeyboardView_languageOnSpacebarFinalAlpha, ALPHA_OPAQUE);
        final int languageOnSpacebarFadeoutAnimatorResId = a.getResourceId(
                R.styleable.LatinKeyboardView_languageOnSpacebarFadeoutAnimator, 0);
        final int altCodeKeyWhileTypingFadeoutAnimatorResId = a.getResourceId(
                R.styleable.LatinKeyboardView_altCodeKeyWhileTypingFadeoutAnimator, 0);
        final int altCodeKeyWhileTypingFadeinAnimatorResId = a.getResourceId(
                R.styleable.LatinKeyboardView_altCodeKeyWhileTypingFadeinAnimator, 0);

        final KeyTimerParams keyTimerParams = new KeyTimerParams(a);
        mPointerTrackerParams = new PointerTrackerParams(a);

        final float keyHysteresisDistance = a.getDimension(
                R.styleable.LatinKeyboardView_keyHysteresisDistance, 0);
        mKeyDetector = new KeyDetector(keyHysteresisDistance);
        mKeyTimerHandler = new KeyTimerHandler(this, keyTimerParams);
        mConfigShowMoreKeysKeyboardAtTouchedPoint = a.getBoolean(
                R.styleable.LatinKeyboardView_showMoreKeysKeyboardAtTouchedPoint, false);
        a.recycle();

        PointerTracker.setParameters(mPointerTrackerParams);

        mLanguageOnSpacebarFadeoutAnimator = loadObjectAnimator(
                languageOnSpacebarFadeoutAnimatorResId, this);
        mAltCodeKeyWhileTypingFadeoutAnimator = loadObjectAnimator(
                altCodeKeyWhileTypingFadeoutAnimatorResId, this);
        mAltCodeKeyWhileTypingFadeinAnimator = loadObjectAnimator(
                altCodeKeyWhileTypingFadeinAnimatorResId, this);
!!!12948492.java!!!	loadObjectAnimator(in resId : int, inout target : Object) : ObjectAnimator
        if (resId == 0) return null;
        final ObjectAnimator animator = (ObjectAnimator)AnimatorInflater.loadAnimator(
                getContext(), resId);
        if (animator != null) {
            animator.setTarget(target);
        }
        return animator;
!!!12948620.java!!!	getLanguageOnSpacebarAnimAlpha() : int
        return mLanguageOnSpacebarAnimAlpha;
!!!12948748.java!!!	setLanguageOnSpacebarAnimAlpha(in alpha : int) : void
        mLanguageOnSpacebarAnimAlpha = alpha;
        invalidateKey(mSpaceKey);
!!!12948876.java!!!	getAltCodeKeyWhileTypingAnimAlpha() : int
        return mAltCodeKeyWhileTypingAnimAlpha;
!!!12949004.java!!!	setAltCodeKeyWhileTypingAnimAlpha(in alpha : int) : void
        mAltCodeKeyWhileTypingAnimAlpha = alpha;
        updateAltCodeKeyWhileTyping();
!!!12949132.java!!!	setKeyboardActionListener(inout listener : KeyboardActionListener) : void
        mKeyboardActionListener = listener;
        PointerTracker.setKeyboardActionListener(listener);
!!!12949260.java!!!	getKeyboardActionListener() : KeyboardActionListener
        return mKeyboardActionListener;
!!!12949388.java!!!	getKeyDetector() : KeyDetector
        return mKeyDetector;
!!!12949516.java!!!	getDrawingProxy() : DrawingProxy
        return this;
!!!12949644.java!!!	getTimerProxy() : TimerProxy
        return mKeyTimerHandler;
!!!12949772.java!!!	setKeyboard(inout keyboard : Keyboard) : void
        // Remove any pending messages, except dismissing preview
        mKeyTimerHandler.cancelKeyTimers();
        super.setKeyboard(keyboard);
        mKeyDetector.setKeyboard(
                keyboard, -getPaddingLeft(), -getPaddingTop() + mVerticalCorrection);
        PointerTracker.setKeyDetector(mKeyDetector);
        mTouchScreenRegulator.setKeyboard(keyboard);
        mMoreKeysPanelCache.clear();

        mSpaceKey = keyboard.getKey(Keyboard.CODE_SPACE);
        mSpaceIcon = (mSpaceKey != null)
                ? mSpaceKey.getIcon(keyboard.mIconsSet, ALPHA_OPAQUE) : null;
        final int keyHeight = keyboard.mMostCommonKeyHeight - keyboard.mVerticalGap;
        mSpacebarTextSize = keyHeight * mSpacebarTextRatio;
        if (ProductionFlag.IS_EXPERIMENTAL) {
            ResearchLogger.latinKeyboardView_setKeyboard(keyboard);
        }

        // This always needs to be set since the accessibility state can
        // potentially change without the keyboard being set again.
        AccessibleKeyboardViewProxy.getInstance().setKeyboard(keyboard);
!!!12949900.java!!!	hasDistinctMultitouch() : boolean
        return mHasDistinctMultitouch;
!!!12950028.java!!!	setDistinctMultitouch(inout hasDistinctMultitouch : boolean) : void
        mHasDistinctMultitouch = hasDistinctMultitouch;
!!!12950156.java!!!	setProximityCorrectionEnabled(inout enabled : boolean) : void
        mKeyDetector.setProximityCorrectionEnabled(enabled);
!!!12950284.java!!!	isProximityCorrectionEnabled() : boolean
        return mKeyDetector.isProximityCorrectionEnabled();
!!!12950412.java!!!	cancelAllMessages() : void
        mKeyTimerHandler.cancelAllMessages();
        super.cancelAllMessages();
!!!12950540.java!!!	openMoreKeysKeyboardIfRequired(inout parentKey : Key, inout tracker : PointerTracker) : boolean
        // Check if we have a popup layout specified first.
        if (mMoreKeysLayout == 0) {
            return false;
        }

        // Check if we are already displaying popup panel.
        if (mMoreKeysPanel != null)
            return false;
        if (parentKey == null)
            return false;
        return onLongPress(parentKey, tracker);
!!!12950668.java!!!	onCreateMoreKeysPanel(inout parentKey : Key) : MoreKeysPanel
        if (parentKey.mMoreKeys == null)
            return null;

        final View container = LayoutInflater.from(getContext()).inflate(mMoreKeysLayout, null);
        if (container == null)
            throw new NullPointerException();

        final MoreKeysKeyboardView moreKeysKeyboardView =
                (MoreKeysKeyboardView)container.findViewById(R.id.more_keys_keyboard_view);
        final Keyboard moreKeysKeyboard = new MoreKeysKeyboard.Builder(container, parentKey, this)
                .build();
        moreKeysKeyboardView.setKeyboard(moreKeysKeyboard);
        container.measure(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);

        return moreKeysKeyboardView;
!!!12950796.java!!!	onLongPress(inout parentKey : Key, inout tracker : PointerTracker) : boolean
        if (ProductionFlag.IS_EXPERIMENTAL) {
            ResearchLogger.latinKeyboardView_onLongPress();
        }
        final int primaryCode = parentKey.mCode;
        if (parentKey.hasEmbeddedMoreKey()) {
            final int embeddedCode = parentKey.mMoreKeys[0].mCode;
            tracker.onLongPressed();
            invokeCodeInput(embeddedCode);
            invokeReleaseKey(primaryCode);
            KeyboardSwitcher.getInstance().hapticAndAudioFeedback(primaryCode);
            return true;
        }
        if (primaryCode == Keyboard.CODE_SPACE || primaryCode == Keyboard.CODE_LANGUAGE_SWITCH) {
            // Long pressing the space key invokes IME switcher dialog.
            if (invokeCustomRequest(LatinIME.CODE_SHOW_INPUT_METHOD_PICKER)) {
                tracker.onLongPressed();
                invokeReleaseKey(primaryCode);
                return true;
            }
        }
        boolean rtn = openMoreKeysPanel(parentKey, tracker);
        if (rtn) {
            mIsLong = true;
            mLastKeyX = mKeyX;
            mLastKeyY = mKeyY;
        }
        return rtn;
!!!12950924.java!!!	onLayout(inout changed : boolean, in left : int, in top : int, in right : int, in bottom : int) : void
        super.onLayout(changed, left, top, right, bottom);
        if (mKeyX == INVAILD_POSITION) {
            requestFocusToCenterKey();
        }
!!!12951052.java!!!	requestFocus(in x : int, in y : int) : void
        final PointerTracker tracker = PointerTracker.getPointerTracker(0, this);
        if (x != LAST_POSITION) {
            mKeyX = x;
        }
        if (y != LAST_POSITION) {
            mKeyY = y;
        }
        tracker.onDpadDownEvent(mKeyX, mKeyY);
!!!12951180.java!!!	requestFocusToCenterKey() : void
        mKeyX = getWidth() / 2;
        mKeyY = getHeight() / 2;
        requestFocus(mKeyX, mKeyY);
!!!12951308.java!!!	onKeyUp(in keyCode : int, inout event : KeyEvent) : boolean
        mLastKeyUpTime = SystemClock.uptimeMillis();
        final PointerTracker tracker = PointerTracker.getPointerTracker(0, this);
        if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
            if (mIsLong) {
                mIsLong = false;
                tracker.onDpadDownEvent(translateX(), translateY());
                return true;
            }
            if (mMoreKeysPanel != null) {
                tracker.onUpEvent(translateX(), translateY(), SystemClock.uptimeMillis());
                mKeyX = mLastKeyX;
                mKeyY = mLastKeyY;
                tracker.onDpadDownEvent(translateX(), translateY(), this);
                return true;
            } else {
                if (tracker.getCurrentKeyIndex() >= Keyboard.CODE_UNSPECIFIED) {
                    tracker.onUpEvent(translateX(), translateY(), SystemClock.uptimeMillis());
                }
                tracker.onDpadDownEvent(translateX(), translateY());
                return true;
            }
        }
        return true;
!!!12951436.java!!!	translateX() : int
        if (mMoreKeysPanel != null) {
            return mMoreKeysPanel.translateX(mKeyX);
        }
        return mKeyX;
!!!12951564.java!!!	translateY() : int
        if (mMoreKeysPanel != null){
            return mMoreKeysPanel.translateY(mKeyY);
        }
        return mKeyY;
!!!12951692.java!!!	isOutOfBounds(in x : int, in y : int) : boolean
        if (x < 0 || y < 0) {
            return true;
        }
        if (mMoreKeysPanel == null) {
            if (x > getWidth() || y > getHeight()) {
                return true;
            }
        } else {
            MoreKeysKeyboardView moreKeysKeyboardView = (MoreKeysKeyboardView) mMoreKeysPanel;
            int maxX = moreKeysKeyboardView.getWidth();
            int maxY = moreKeysKeyboardView.getHeight();
            if (x > maxX || y > maxY) {
                return true;
            }
        }
        return false;
!!!12951820.java!!!	onKeyDown(in keyCode : int, inout event : KeyEvent) : boolean
        // It emulates pointer movement to move a focus of keyboard keys.
        final PointerTracker tracker = PointerTracker.getPointerTracker(0, this);
        if (keyCode == KeyEvent.KEYCODE_BACK) {
            if (mMoreKeysPanel != null) {
                mKeyX = mLastKeyX;
                mKeyY = mLastKeyY;
                dismissMoreKeysPanel();
                tracker.onDpadDownEvent(mKeyX, mKeyY, this);
                return true;
            }
            return false;
        }
        if (mKeyX == INVAILD_POSITION) {
            mKeyX = getWidth() / 2;
            mKeyY = getHeight() / 2;
            tracker.onDpadDownEvent(mKeyX, mKeyY);
            return true;
        }
        if (mMoreKeysPanel != null) {
            Key newKey = tracker.getKey();
            mKeyX = newKey.mX + newKey.mWidth / 2 - mMoreKeysPanel.translateX(0);
            mKeyY = newKey.mY + newKey.mHeight / 2 - mMoreKeysPanel.translateY(0);
        }
        if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
            if (event.getRepeatCount() == 0) {
                if (mMoreKeysPanel != null) {
                    tracker.onDpadUpEvent(translateX(), translateY());
                } else {
                    mIsLong = false;
                    tracker.onDpadUpEvent(translateX(), translateY());
                    if (tracker.getCurrentKeyIndex() >= Keyboard.CODE_UNSPECIFIED) {
                        tracker.onDownEvent(translateX(), translateY(), SystemClock.uptimeMillis(),
                                this);
                    }
                }
            } else {
                if (mMoreKeysPanel != null) {
                    return true;
                }
                if (!mIsLong && tracker.getCurrentKeyIndex() >= Keyboard.CODE_UNSPECIFIED) {
                    tracker.onMoveEvent(translateX(), translateY(), SystemClock.uptimeMillis());
                }
            }
            return true;
        }
        int dx = 0;
        int dy = 0;
        boolean isHorizonatalMove = false;
        switch (keyCode) {
            case KeyEvent.KEYCODE_DPAD_DOWN:
                dy = DPAD_POINTER_MOVEMENT_RESOLUTION;
                break;
            case KeyEvent.KEYCODE_DPAD_UP:
                dy = -DPAD_POINTER_MOVEMENT_RESOLUTION;
                break;
            case KeyEvent.KEYCODE_DPAD_LEFT:
                dx = -DPAD_POINTER_MOVEMENT_RESOLUTION;
                isHorizonatalMove = true;
                break;
            case KeyEvent.KEYCODE_DPAD_RIGHT:
                dx = DPAD_POINTER_MOVEMENT_RESOLUTION;
                isHorizonatalMove = true;
                break;
        }
        int x, y;
        int currentKeyIndex = tracker.getCurrentKeyIndex();
        Key currentKey = tracker.getKey();
        if (currentKeyIndex < Keyboard.CODE_UNSPECIFIED) {
            tracker.onDpadMoveEvent(translateX(), translateY(), isHorizonatalMove);
            return true;
        }
        int index = Keyboard.CODE_UNSPECIFIED;
        for (int i = 0; true; ++i) {
            x = translateX() + dx * i;
            y = translateY() + dy * i;
            if (y < 0 && mMoreKeysPanel == null) {
                // Switch the view to suggestion View.
                Key key = tracker.getKey();
                x = key.mWidth / 2 + key.mX;
                mFocusChangeListener.focusToSuggestionView(x);
                if (mFocusChangeListener.isSuggestionViewFocused()) {
                    tracker.onDpadUpEvent(translateX(), translateY());
                } else {
                    tracker.onDpadMoveEvent(translateX(), translateY(), isHorizonatalMove);
                }
                mIsPreviousOutOfBound = false;
                return true;
            }
            // Check if going down then last line.
            if (mMoreKeysPanel == null && y > getHeight() && mIsPreviousOutOfBound) {
                long timeDifference = SystemClock.uptimeMillis() - mLastKeyUpTime;
                mIsPreviousOutOfBound = false;
                if (timeDifference < DPAD_PRESS_INTERVAL) {
                    mFocusChangeListener.requestHideKeyboardView();
                }
                return true;
            }
            if (isOutOfBounds(x, y)) {
                mIsPreviousOutOfBound = true;
                return true;
            }
            tracker.onDpadMoveEvent(x, y, isHorizonatalMove);
            index = tracker.getCurrentKeyIndex();
            if (index < Keyboard.CODE_UNSPECIFIED) {
                // This block is only for the other keys the alphabet.
                tracker.onDpadMoveEvent(mKeyX, mKeyY, isHorizonatalMove);
                return true;
            }
            Key newKey = tracker.getKey();
            if (currentKey != newKey) {
                mIsPreviousOutOfBound = false;
                // TO move the x and y to center of key
                mKeyX = newKey.mX + newKey.mWidth / 2;
                mKeyY = newKey.mY + newKey.mHeight / 2;
                return true;
            }
        }
!!!12951948.java!!!	invokeCustomRequest(in code : int) : boolean
        return mKeyboardActionListener.onCustomRequest(code);
!!!12952076.java!!!	invokeCodeInput(in primaryCode : int) : void
        mKeyboardActionListener.onCodeInput(primaryCode,
                KeyboardActionListener.NOT_A_TOUCH_COORDINATE,
                KeyboardActionListener.NOT_A_TOUCH_COORDINATE);
!!!12952204.java!!!	invokeReleaseKey(in primaryCode : int) : void
        mKeyboardActionListener.onReleaseKey(primaryCode, false);
!!!12952332.java!!!	openMoreKeysPanel(inout parentKey : Key, inout tracker : PointerTracker) : boolean
        MoreKeysPanel moreKeysPanel = mMoreKeysPanelCache.get(parentKey);
        if (moreKeysPanel == null) {
            moreKeysPanel = onCreateMoreKeysPanel(parentKey);
            if (moreKeysPanel == null)
                return false;
            mMoreKeysPanelCache.put(parentKey, moreKeysPanel);
        }
        if (mMoreKeysWindow == null) {
            mMoreKeysWindow = new PopupWindow(getContext());
            mMoreKeysWindow.setBackgroundDrawable(null);
            mMoreKeysWindow.setAnimationStyle(R.style.MoreKeysKeyboardAnimation);
        }
        mMoreKeysPanel = moreKeysPanel;
        mMoreKeysPanelPointerTrackerId = tracker.mPointerId;

        final boolean keyPreviewEnabled = isKeyPreviewPopupEnabled() && !parentKey.noKeyPreview();
        // The more keys keyboard is usually horizontally aligned with the center of the parent key.
        // If showMoreKeysKeyboardAtTouchedPoint is true and the key preview is disabled, the more
        // keys keyboard is placed at the touch point of the parent key.
        final int pointX = (mConfigShowMoreKeysKeyboardAtTouchedPoint && !keyPreviewEnabled)
                ? tracker.getLastX()
                : parentKey.mX + parentKey.mWidth / 2;
        // The more keys keyboard is usually vertically aligned with the top edge of the parent key
        // (plus vertical gap). If the key preview is enabled, the more keys keyboard is vertically
        // aligned with the bottom edge of the visible part of the key preview.
        final int pointY = parentKey.mY + (keyPreviewEnabled
                ? mKeyPreviewDrawParams.mPreviewVisibleOffset
                : -parentKey.mVerticalGap);
        moreKeysPanel.showMoreKeysPanel(
                this, this, pointX, pointY, mMoreKeysWindow, mKeyboardActionListener);
        final int translatedX = moreKeysPanel.translateX(tracker.getLastX());
        final int translatedY = moreKeysPanel.translateY(tracker.getLastY());
        tracker.onShowMoreKeysPanel(translatedX, translatedY, moreKeysPanel);
        dimEntireKeyboard(true);
        return true;
!!!12952460.java!!!	isInSlidingKeyInput() : boolean
        if (mMoreKeysPanel != null) {
            return true;
        } else {
            return PointerTracker.isAnyInSlidingKeyInput();
        }
!!!12952588.java!!!	getPointerCount() : int
        return mOldPointerCount;
!!!12952716.java!!!	onTouchEvent(inout me : MotionEvent) : boolean
        if (getKeyboard() == null) {
            return false;
        }
        return mTouchScreenRegulator.onTouchEvent(me);
!!!12952844.java!!!	processMotionEvent(inout me : MotionEvent) : boolean
        final boolean nonDistinctMultitouch = !mHasDistinctMultitouch;
        final int action = me.getActionMasked();
        final int pointerCount = me.getPointerCount();
        final int oldPointerCount = mOldPointerCount;
        mOldPointerCount = pointerCount;

        // TODO: cleanup this code into a multi-touch to single-touch event converter class?
        // If the device does not have distinct multi-touch support panel, ignore all multi-touch
        // events except a transition from/to single-touch.
        if (nonDistinctMultitouch && pointerCount > 1 && oldPointerCount > 1) {
            return true;
        }

        final long eventTime = me.getEventTime();
        final int index = me.getActionIndex();
        final int id = me.getPointerId(index);
        final int x, y;
        if (mMoreKeysPanel != null && id == mMoreKeysPanelPointerTrackerId) {
            x = mMoreKeysPanel.translateX((int)me.getX(index));
            y = mMoreKeysPanel.translateY((int)me.getY(index));
        } else {
            x = (int)me.getX(index);
            y = (int)me.getY(index);
        }
        if (ENABLE_USABILITY_STUDY_LOG) {
            final String eventTag;
            switch (action) {
                case MotionEvent.ACTION_UP:
                    eventTag = "[Up]";
                    break;
                case MotionEvent.ACTION_DOWN:
                    eventTag = "[Down]";
                    break;
                case MotionEvent.ACTION_POINTER_UP:
                    eventTag = "[PointerUp]";
                    break;
                case MotionEvent.ACTION_POINTER_DOWN:
                    eventTag = "[PointerDown]";
                    break;
                case MotionEvent.ACTION_MOVE: // Skip this as being logged below
                    eventTag = "";
                    break;
                default:
                    eventTag = "[Action" + action + "]";
                    break;
            }
            if (!TextUtils.isEmpty(eventTag)) {
                final float size = me.getSize(index);
                final float pressure = me.getPressure(index);
                UsabilityStudyLogUtils.getInstance().write(
                        eventTag + eventTime + "," + id + "," + x + "," + y + ","
                        + size + "," + pressure);
            }
        }
        if (ProductionFlag.IS_EXPERIMENTAL) {
            ResearchLogger.latinKeyboardView_processMotionEvent(me, action, eventTime, index, id,
                    x, y);
        }

        if (mKeyTimerHandler.isInKeyRepeat()) {
            final PointerTracker tracker = PointerTracker.getPointerTracker(id, this);
            // Key repeating timer will be canceled if 2 or more keys are in action, and current
            // event (UP or DOWN) is non-modifier key.
            if (pointerCount > 1 && !tracker.isModifier()) {
                mKeyTimerHandler.cancelKeyRepeatTimer();
            }
            // Up event will pass through.
        }

        // TODO: cleanup this code into a multi-touch to single-touch event converter class?
        // Translate mutli-touch event to single-touch events on the device that has no distinct
        // multi-touch panel.
        if (nonDistinctMultitouch) {
            // Use only main (id=0) pointer tracker.
            final PointerTracker tracker = PointerTracker.getPointerTracker(0, this);
            if (pointerCount == 1 && oldPointerCount == 2) {
                // Multi-touch to single touch transition.
                // Send a down event for the latest pointer if the key is different from the
                // previous key.
                final Key newKey = tracker.getKeyOn(x, y);
                if (mOldKey != newKey) {
                    tracker.onDownEvent(x, y, eventTime, this);
                    if (action == MotionEvent.ACTION_UP)
                        tracker.onUpEvent(x, y, eventTime);
                }
            } else if (pointerCount == 2 && oldPointerCount == 1) {
                // Single-touch to multi-touch transition.
                // Send an up event for the last pointer.
                final int lastX = tracker.getLastX();
                final int lastY = tracker.getLastY();
                mOldKey = tracker.getKeyOn(lastX, lastY);
                tracker.onUpEvent(lastX, lastY, eventTime);
            } else if (pointerCount == 1 && oldPointerCount == 1) {
                tracker.processMotionEvent(action, x, y, eventTime, this);
            } else {
                Log.w(TAG, "Unknown touch panel behavior: pointer count is " + pointerCount
                        + " (old " + oldPointerCount + ")");
            }
            return true;
        }

        if (action == MotionEvent.ACTION_MOVE) {
            for (int i = 0; i < pointerCount; i++) {
                final int pointerId = me.getPointerId(i);
                final PointerTracker tracker = PointerTracker.getPointerTracker(
                        pointerId, this);
                final int px, py;
                if (mMoreKeysPanel != null
                        && tracker.mPointerId == mMoreKeysPanelPointerTrackerId) {
                    px = mMoreKeysPanel.translateX((int)me.getX(i));
                    py = mMoreKeysPanel.translateY((int)me.getY(i));
                } else {
                    px = (int)me.getX(i);
                    py = (int)me.getY(i);
                }
                tracker.onMoveEvent(px, py, eventTime);
                if (ENABLE_USABILITY_STUDY_LOG) {
                    final float pointerSize = me.getSize(i);
                    final float pointerPressure = me.getPressure(i);
                    UsabilityStudyLogUtils.getInstance().write("[Move]"  + eventTime + ","
                            + pointerId + "," + px + "," + py + ","
                            + pointerSize + "," + pointerPressure);
                }
                if (ProductionFlag.IS_EXPERIMENTAL) {
                    ResearchLogger.latinKeyboardView_processMotionEvent(me, action, eventTime,
                            i, pointerId, px, py);
                }
            }
        } else {
            final PointerTracker tracker = PointerTracker.getPointerTracker(id, this);
            tracker.processMotionEvent(action, x, y, eventTime, this);
        }

        return true;
!!!12952972.java!!!	closing() : void
        super.closing();
        mKeyX = INVAILD_POSITION;
        mKeyY = INVAILD_POSITION;
        dismissMoreKeysPanel();
        mMoreKeysPanelCache.clear();
!!!12953100.java!!!	dismissMoreKeysPanel() : boolean
        if (mMoreKeysWindow != null && mMoreKeysWindow.isShowing()) {
            mMoreKeysWindow.dismiss();
            mMoreKeysPanel = null;
            mMoreKeysPanelPointerTrackerId = -1;
            dimEntireKeyboard(false);
            return true;
        }
        return false;
!!!12953228.java!!!	draw(inout c : Canvas) : void
        Utils.GCUtils.getInstance().reset();
        boolean tryGC = true;
        for (int i = 0; i < Utils.GCUtils.GC_TRY_LOOP_MAX && tryGC; ++i) {
            try {
                super.draw(c);
                tryGC = false;
            } catch (OutOfMemoryError e) {
                tryGC = Utils.GCUtils.getInstance().tryGCOrWait(TAG, e);
            }
        }
!!!12953356.java!!!	dispatchHoverEvent(inout event : MotionEvent) : boolean
        if (AccessibilityUtils.getInstance().isTouchExplorationEnabled()) {
            final PointerTracker tracker = PointerTracker.getPointerTracker(0, this);
            return AccessibleKeyboardViewProxy.getInstance().dispatchHoverEvent(event, tracker);
        }

        // Reflection doesn't support calling superclass methods.
        return false;
!!!12953484.java!!!	updateShortcutKey(inout available : boolean) : void
        final Keyboard keyboard = getKeyboard();
        if (keyboard == null) return;
        final Key shortcutKey = keyboard.getKey(Keyboard.CODE_SHORTCUT);
        if (shortcutKey == null) return;
        shortcutKey.setEnabled(available);
        invalidateKey(shortcutKey);
!!!12953612.java!!!	updateAltCodeKeyWhileTyping() : void
        final Keyboard keyboard = getKeyboard();
        if (keyboard == null) return;
        for (final Key key : keyboard.mAltCodeKeysWhileTyping) {
            invalidateKey(key);
        }
!!!12953740.java!!!	startDisplayLanguageOnSpacebar(inout subtypeChanged : boolean, inout needsToDisplayLanguage : boolean, inout hasMultipleEnabledIMEsOrSubtypes : boolean) : void
        mNeedsToDisplayLanguage = needsToDisplayLanguage;
        mHasMultipleEnabledIMEsOrSubtypes = hasMultipleEnabledIMEsOrSubtypes;
        final ObjectAnimator animator = mLanguageOnSpacebarFadeoutAnimator;
        if (animator == null) {
            mNeedsToDisplayLanguage = false;
        } else {
            if (subtypeChanged && needsToDisplayLanguage) {
                setLanguageOnSpacebarAnimAlpha(ALPHA_OPAQUE);
                if (animator.isStarted()) {
                    animator.cancel();
                }
                animator.start();
            } else {
                if (!animator.isStarted()) {
                    mLanguageOnSpacebarAnimAlpha = mLanguageOnSpacebarFinalAlpha;
                }
            }
        }
        invalidateKey(mSpaceKey);
!!!12953868.java!!!	updateAutoCorrectionState(inout isAutoCorrection : boolean) : void
        if (!mAutoCorrectionSpacebarLedEnabled) return;
        mAutoCorrectionSpacebarLedOn = isAutoCorrection;
        invalidateKey(mSpaceKey);
!!!12953996.java!!!	onDrawKeyTopVisuals(inout key : Key, inout canvas : Canvas, inout paint : Paint, inout params : KeyDrawParams) : void
        if (key.altCodeWhileTyping() && key.isEnabled()) {
            params.mAnimAlpha = mAltCodeKeyWhileTypingAnimAlpha;
        }
        if (key.mCode == Keyboard.CODE_SPACE) {
            drawSpacebar(key, canvas, paint);
            // Whether space key needs to show the "..." popup hint for special purposes
            if (key.isLongPressEnabled() && mHasMultipleEnabledIMEsOrSubtypes) {
                drawKeyPopupHint(key, canvas, paint, params);
            }
        } else if (key.mCode == Keyboard.CODE_LANGUAGE_SWITCH) {
            super.onDrawKeyTopVisuals(key, canvas, paint, params);
            drawKeyPopupHint(key, canvas, paint, params);
        } else {
            super.onDrawKeyTopVisuals(key, canvas, paint, params);
        }
!!!12954124.java!!!	fitsTextIntoWidth(in width : int, in text : String, inout paint : Paint) : boolean
        paint.setTextScaleX(1.0f);
        final float textWidth = getLabelWidth(text, paint);
        if (textWidth < width) return true;

        final float scaleX = width / textWidth;
        if (scaleX < MINIMUM_XSCALE_OF_LANGUAGE_NAME) return false;

        paint.setTextScaleX(scaleX);
        return getLabelWidth(text, paint) < width;
!!!12954252.java!!!	layoutLanguageOnSpacebar(inout paint : Paint, inout subtype : InputMethodSubtype, in width : int) : String
        // Choose appropriate language name to fit into the width.
        String text = getFullDisplayName(subtype, getResources());
        if (fitsTextIntoWidth(width, text, paint)) {
            return text;
        }

        text = getMiddleDisplayName(subtype);
        if (fitsTextIntoWidth(width, text, paint)) {
            return text;
        }

        text = getShortDisplayName(subtype);
        if (fitsTextIntoWidth(width, text, paint)) {
            return text;
        }

        return "";
!!!12954380.java!!!	drawSpacebar(inout key : Key, inout canvas : Canvas, inout paint : Paint) : void
        final int width = key.mWidth;
        final int height = key.mHeight;

        // If input language are explicitly selected.
        if (mNeedsToDisplayLanguage) {
            paint.setTextAlign(Align.CENTER);
            paint.setTypeface(Typeface.DEFAULT);
            paint.setTextSize(mSpacebarTextSize);
            final InputMethodSubtype subtype = getKeyboard().mId.mSubtype;
            final String language = layoutLanguageOnSpacebar(paint, subtype, width);
            // Draw language text with shadow
            final float descent = paint.descent();
            final float textHeight = -paint.ascent() + descent;
            final float baseline = height / 2 + textHeight / 2;
            paint.setColor(mSpacebarTextShadowColor);
            paint.setAlpha(mLanguageOnSpacebarAnimAlpha);
            canvas.drawText(language, width / 2, baseline - descent - 1, paint);
            paint.setColor(mSpacebarTextColor);
            paint.setAlpha(mLanguageOnSpacebarAnimAlpha);
            canvas.drawText(language, width / 2, baseline - descent, paint);
        }

        // Draw the spacebar icon at the bottom
        if (mAutoCorrectionSpacebarLedOn) {
            final int iconWidth = width * SPACE_LED_LENGTH_PERCENT / 100;
            final int iconHeight = mAutoCorrectionSpacebarLedIcon.getIntrinsicHeight();
            int x = (width - iconWidth) / 2;
            int y = height - iconHeight;
            drawIcon(canvas, mAutoCorrectionSpacebarLedIcon, x, y, iconWidth, iconHeight);
        } else if (mSpaceIcon != null) {
            final int iconWidth = mSpaceIcon.getIntrinsicWidth();
            final int iconHeight = mSpaceIcon.getIntrinsicHeight();
            int x = (width - iconWidth) / 2;
            int y = height - iconHeight;
            drawIcon(canvas, mSpaceIcon, x, y, iconWidth, iconHeight);
        }
!!!12954508.java!!!	getFullDisplayName(inout subtype : InputMethodSubtype, inout res : Resources) : String
        if (SubtypeLocale.isNoLanguage(subtype)) {
            return SubtypeLocale.getKeyboardLayoutSetDisplayName(subtype);
        }

        return SubtypeLocale.getSubtypeDisplayName(subtype, res);
!!!12954636.java!!!	getShortDisplayName(inout subtype : InputMethodSubtype) : String
        if (SubtypeLocale.isNoLanguage(subtype)) {
            return "";
        }
        final Locale locale = SubtypeLocale.getSubtypeLocale(subtype);
        return StringUtils.toTitleCase(locale.getLanguage(), locale);
!!!12954764.java!!!	getMiddleDisplayName(inout subtype : InputMethodSubtype) : String
        if (SubtypeLocale.isNoLanguage(subtype)) {
            return SubtypeLocale.getKeyboardLayoutSetDisplayName(subtype);
        }
        final Locale locale = SubtypeLocale.getSubtypeLocale(subtype);
        return StringUtils.toTitleCase(locale.getDisplayLanguage(locale), locale);
