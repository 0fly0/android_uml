class CharBuffer
!!!661275.java!!!	allocate(in capacity : int) : CharBuffer
        if (capacity < 0) {
            throw new IllegalArgumentException("capacity < 0: " + capacity);
        }
        return new CharArrayBuffer(new char[capacity]);
!!!661403.java!!!	wrap(inout array : char) : CharBuffer
        return wrap(array, 0, array.length);
!!!661531.java!!!	wrap(inout array : char, in start : int, in charCount : int) : CharBuffer
        Arrays.checkOffsetAndCount(array.length, start, charCount);
        CharBuffer buf = new CharArrayBuffer(array);
        buf.position = start;
        buf.limit = start + charCount;
        return buf;
!!!661659.java!!!	wrap(inout chseq : CharSequence) : CharBuffer
        return new CharSequenceAdapter(chseq);
!!!661787.java!!!	wrap(inout cs : CharSequence, in start : int, in end : int) : CharBuffer
        if (start < 0 || end < start || end > cs.length()) {
            throw new IndexOutOfBoundsException("cs.length()=" + cs.length() + ", start=" + start + ", end=" + end);
        }
        CharBuffer result = new CharSequenceAdapter(cs);
        result.position = start;
        result.limit = end;
        return result;
!!!661915.java!!!	CharBuffer(in capacity : int)
        super(1, capacity, null);
!!!662043.java!!!	array() : char
        return protectedArray();
!!!662171.java!!!	arrayOffset() : int
        return protectedArrayOffset();
!!!662427.java!!!	charAt(in index : int) : char
        if (index < 0 || index >= remaining()) {
            throw new IndexOutOfBoundsException("index=" + index + ", remaining()=" + remaining());
        }
        return get(position + index);
!!!662683.java!!!	compareTo(inout otherBuffer : CharBuffer) : int
        int compareRemaining = (remaining() < otherBuffer.remaining()) ? remaining()
                : otherBuffer.remaining();
        int thisPos = position;
        int otherPos = otherBuffer.position;
        char thisByte, otherByte;
        while (compareRemaining > 0) {
            thisByte = get(thisPos);
            otherByte = otherBuffer.get(otherPos);
            if (thisByte != otherByte) {
                return thisByte < otherByte ? -1 : 1;
            }
            thisPos++;
            otherPos++;
            compareRemaining--;
        }
        return remaining() - otherBuffer.remaining();
!!!662939.java!!!	equals(inout other : Object) : boolean
        if (!(other instanceof CharBuffer)) {
            return false;
        }
        CharBuffer otherBuffer = (CharBuffer) other;

        if (remaining() != otherBuffer.remaining()) {
            return false;
        }

        int myPosition = position;
        int otherPosition = otherBuffer.position;
        boolean equalSoFar = true;
        while (equalSoFar && (myPosition < limit)) {
            equalSoFar = get(myPosition++) == otherBuffer.get(otherPosition++);
        }

        return equalSoFar;
!!!663195.java!!!	get(inout dst : char) : CharBuffer
        return get(dst, 0, dst.length);
!!!663323.java!!!	get(inout dst : char, in dstOffset : int, in charCount : int) : CharBuffer
        Arrays.checkOffsetAndCount(dst.length, dstOffset, charCount);
        if (charCount > remaining()) {
            throw new BufferUnderflowException();
        }
        for (int i = dstOffset; i < dstOffset + charCount; ++i) {
            dst[i] = get();
        }
        return this;
!!!663579.java!!!	hasArray() : boolean
        return protectedHasArray();
!!!663707.java!!!	hashCode() : int
        int myPosition = position;
        int hash = 0;
        while (myPosition < limit) {
            hash = hash + get(myPosition++);
        }
        return hash;
!!!663963.java!!!	length() : int
        return remaining();
!!!664731.java!!!	put(inout src : char) : CharBuffer
        return put(src, 0, src.length);
!!!664859.java!!!	put(inout src : char, in srcOffset : int, in charCount : int) : CharBuffer
        Arrays.checkOffsetAndCount(src.length, srcOffset, charCount);
        if (charCount > remaining()) {
            throw new BufferOverflowException();
        }
        for (int i = srcOffset; i < srcOffset + charCount; ++i) {
            put(src[i]);
        }
        return this;
!!!664987.java!!!	put(inout src : CharBuffer) : CharBuffer
        if (isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        if (src == this) {
            throw new IllegalArgumentException("src == this");
        }
        if (src.remaining() > remaining()) {
            throw new BufferOverflowException();
        }

        char[] contents = new char[src.remaining()];
        src.get(contents);
        put(contents);
        return this;
!!!665243.java!!!	put(inout str : String) : CharBuffer
        return put(str, 0, str.length());
!!!665371.java!!!	put(inout str : String, in start : int, in end : int) : CharBuffer
        if (isReadOnly()) {
            throw new ReadOnlyBufferException();
        }
        if (start < 0 || end < start || end > str.length()) {
            throw new IndexOutOfBoundsException("str.length()=" + str.length() +
                    ", start=" + start + ", end=" + end);
        }
        if (end - start > remaining()) {
            throw new BufferOverflowException();
        }
        for (int i = start; i < end; i++) {
            put(str.charAt(i));
        }
        return this;
!!!665755.java!!!	toString() : String
        StringBuilder result = new StringBuilder(limit - position);
        for (int i = position; i < limit; i++) {
            result.append(get(i));
        }
        return result.toString();
!!!665883.java!!!	append(in c : char) : CharBuffer
        return put(c);
!!!666011.java!!!	append(inout csq : CharSequence) : CharBuffer
        if (csq != null) {
            return put(csq.toString());
        }
        return put("null");
!!!666139.java!!!	append(inout csq : CharSequence, in start : int, in end : int) : CharBuffer
        if (csq == null) {
            csq = "null";
        }
        CharSequence cs = csq.subSequence(start, end);
        if (cs.length() > 0) {
            return put(cs.toString());
        }
        return this;
!!!666267.java!!!	read(inout target : CharBuffer) : int
        int remaining = remaining();
        if (target == this) {
            if (remaining == 0) {
                return -1;
            }
            throw new IllegalArgumentException("target == this");
        }
        if (remaining == 0) {
            return limit > 0 && target.remaining() == 0 ? 0 : -1;
        }
        remaining = Math.min(target.remaining(), remaining);
        if (remaining > 0) {
            char[] chars = new char[remaining];
            get(chars);
            target.put(chars);
        }
        return remaining;
