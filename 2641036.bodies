class BerlinOmxFpsCalculator
!!!11149708.cpp!!!	BerlinOmxFpsCalculator()
  OMX_LOGV("constructor");
  mLock = kdThreadMutexCreate(KD_NULL);
!!!11149836.cpp!!!	~BerlinOmxFpsCalculator()
  OMX_LOGV("destructor");
  mStarted = OMX_FALSE;
  if (mLock) {
    kdThreadMutexFree(mLock);
    mLock = NULL;
  }
!!!11149964.cpp!!!	start(in timeUs : OMX_U64) : void
  OMX_LOGV("start %lld", timeUs);
  mTimeUsOfLatestFpsRefresh = timeUs;
  mPrevFrameCount = INVALID_COUNT;
  mLatestFps = 0;
  mStarted = OMX_TRUE;

  kdThreadMutexLock(mLock);
  mFrameCount = 0;
  kdThreadMutexUnlock(mLock);
!!!11150092.cpp!!!	checkCurrentTimeAndRefreshFps(in curTimeUs : OMX_U64) : OMX_BOOL
  if (!mStarted || INVALID_COUNT == mPrevFrameCount) {
    return OMX_FALSE;
  }

  OMX_U64 durationUs = curTimeUs - mTimeUsOfLatestFpsRefresh;
  OMX_LOGV("refreshFps %lld %lld", curTimeUs, durationUs);
  if (durationUs < ONE_SECOND_IN_MICRO_SECONDS) {
    return OMX_FALSE;
  }

  OMX_U32 framesCount = getFrameCount();
  OMX_U32 latestFramesCount = framesCount - mPrevFrameCount;
  mPrevFrameCount = framesCount;
  if (durationUs > ONE_SECOND_IN_MICRO_SECONDS * 11 / 10) {
    // If duration is larger than 1.1 sec, prints a warning message.
    OMX_LOGD("FPS refresh time is too long.");
  }
  mTimeUsOfLatestFpsRefresh = curTimeUs;
  mLatestFps = computeFps(latestFramesCount, durationUs);

  return OMX_TRUE;
!!!11150220.cpp!!!	incrementFrameCount() : void
  OMX_LOGV("increaseDisplayedFrames");
  kdThreadMutexLock(mLock);
  if (INVALID_COUNT == mPrevFrameCount) {
    mPrevFrameCount = mFrameCount;
  }
  ++mFrameCount;
  kdThreadMutexUnlock(mLock);
!!!11150348.cpp!!!	setTotalFrameCount(in totalFrameCount : OMX_U32) : void
  kdThreadMutexLock(mLock);
  if (mFrameCount > totalFrameCount) {
    OMX_LOGD("The updated values should be equal to or larger than the previous values.");
    // Frame counter should reset from this point.
    mPrevFrameCount = totalFrameCount;
  }
  mFrameCount = totalFrameCount;
  if (INVALID_COUNT == mPrevFrameCount) {
    mPrevFrameCount = mFrameCount;
  }
  kdThreadMutexUnlock(mLock);
!!!11150476.cpp!!!	getLatestFps() : OMX_U32
  OMX_LOGV("getLatestFps %d", mLatestFps);
  return mLatestFps;
!!!11150604.cpp!!!	computeFps(in frames : OMX_U64, in durationUs : OMX_U64) : OMX_U32
  // TODO(youngsang): this function needs unit tests.
  // 0.5 is added in order to round FPS.
  return static_cast<OMX_U32>((static_cast<double>(frames) * ONE_SECOND_IN_MICRO_SECONDS /
      durationUs) + 0.5);
!!!11150732.cpp!!!	getFrameCount() : OMX_U64
  OMX_LOGV("getRepeatedFrames");
  kdThreadMutexLock(mLock);
  OMX_U64 count = mFrameCount;
  kdThreadMutexUnlock(mLock);
  return count;
