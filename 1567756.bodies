class WifiNative
!!!9731468.java!!!	WifiNative(in iface : String)
        mInterface = iface;
        mTAG = "WifiNative-" + iface;
!!!9731596.java!!!	connectToSupplicant() : boolean
        return connectToSupplicant(mInterface);
!!!9731724.java!!!	closeSupplicantConnection() : void
        closeSupplicantConnection(mInterface);
!!!9731852.java!!!	waitForEvent() : String
        return waitForEvent(mInterface);
!!!9731980.java!!!	doBooleanCommand(in command : String) : boolean
        if (DBG) Log.d(mTAG, "doBoolean: " + command);
        return doBooleanCommand(mInterface, command);
!!!9732108.java!!!	doIntCommand(in command : String) : int
        if (DBG) Log.d(mTAG, "doInt: " + command);
        return doIntCommand(mInterface, command);
!!!9732236.java!!!	doStringCommand(in command : String) : String
        if (DBG) Log.d(mTAG, "doString: " + command);
        return doStringCommand(mInterface, command);
!!!9732364.java!!!	ping() : boolean
        String pong = doStringCommand("PING");
        return (pong != null && pong.equals("PONG"));
!!!9732492.java!!!	scan() : boolean
       return doBooleanCommand("SCAN");
!!!9732620.java!!!	setScanMode(inout setActive : boolean) : boolean
        if (setActive) {
            return doBooleanCommand("DRIVER SCAN-ACTIVE");
        } else {
            return doBooleanCommand("DRIVER SCAN-PASSIVE");
        }
!!!9732748.java!!!	stopSupplicant() : boolean
        return doBooleanCommand("TERMINATE");
!!!9732876.java!!!	listNetworks() : String
        return doStringCommand("LIST_NETWORKS");
!!!9733004.java!!!	addNetwork() : int
        return doIntCommand("ADD_NETWORK");
!!!9733132.java!!!	setNetworkVariable(in netId : int, in name : String, in value : String) : boolean
        if (TextUtils.isEmpty(name) || TextUtils.isEmpty(value)) return false;
        return doBooleanCommand("SET_NETWORK " + netId + " " + name + " " + value);
!!!9733260.java!!!	getNetworkVariable(in netId : int, in name : String) : String
        if (TextUtils.isEmpty(name)) return null;
        return doStringCommand("GET_NETWORK " + netId + " " + name);
!!!9733388.java!!!	removeNetwork(in netId : int) : boolean
        return doBooleanCommand("REMOVE_NETWORK " + netId);
!!!9733516.java!!!	enableNetwork(in netId : int, inout disableOthers : boolean) : boolean
        if (disableOthers) {
            return doBooleanCommand("SELECT_NETWORK " + netId);
        } else {
            return doBooleanCommand("ENABLE_NETWORK " + netId);
        }
!!!9733644.java!!!	disableNetwork(in netId : int) : boolean
        return doBooleanCommand("DISABLE_NETWORK " + netId);
!!!9733772.java!!!	reconnect() : boolean
        return doBooleanCommand("RECONNECT");
!!!9733900.java!!!	reassociate() : boolean
        return doBooleanCommand("REASSOCIATE");
!!!9734028.java!!!	disconnect() : boolean
        return doBooleanCommand("DISCONNECT");
!!!9734156.java!!!	status() : String
        return doStringCommand("STATUS");
!!!9734284.java!!!	getMacAddress() : String
        //Macaddr = XX.XX.XX.XX.XX.XX
        String ret = doStringCommand("DRIVER MACADDR");
        if (!TextUtils.isEmpty(ret)) {
            String[] tokens = ret.split(" = ");
            if (tokens.length == 2) return tokens[1];
        }
        return null;
!!!9734412.java!!!	scanResults() : String
        return doStringCommand("BSS RANGE=ALL MASK=0x1986");
!!!9734540.java!!!	startDriver() : boolean
        return doBooleanCommand("DRIVER START");
!!!9734668.java!!!	stopDriver() : boolean
        return doBooleanCommand("DRIVER STOP");
!!!9734796.java!!!	startFilteringMulticastV4Packets() : boolean
        return doBooleanCommand("DRIVER RXFILTER-STOP")
            && doBooleanCommand("DRIVER RXFILTER-REMOVE 2")
            && doBooleanCommand("DRIVER RXFILTER-START");
!!!9734924.java!!!	stopFilteringMulticastV4Packets() : boolean
        return doBooleanCommand("DRIVER RXFILTER-STOP")
            && doBooleanCommand("DRIVER RXFILTER-ADD 2")
            && doBooleanCommand("DRIVER RXFILTER-START");
!!!9735052.java!!!	startFilteringMulticastV6Packets() : boolean
        return doBooleanCommand("DRIVER RXFILTER-STOP")
            && doBooleanCommand("DRIVER RXFILTER-REMOVE 3")
            && doBooleanCommand("DRIVER RXFILTER-START");
!!!9735180.java!!!	stopFilteringMulticastV6Packets() : boolean
        return doBooleanCommand("DRIVER RXFILTER-STOP")
            && doBooleanCommand("DRIVER RXFILTER-ADD 3")
            && doBooleanCommand("DRIVER RXFILTER-START");
!!!9735308.java!!!	getBand() : int
       String ret = doStringCommand("DRIVER GETBAND");
        if (!TextUtils.isEmpty(ret)) {
            //reply is "BAND X" where X is the band
            String[] tokens = ret.split(" ");
            try {
                if (tokens.length == 2) return Integer.parseInt(tokens[1]);
            } catch (NumberFormatException e) {
                return -1;
            }
        }
        return -1;
!!!9735436.java!!!	setBand(in band : int) : boolean
        return doBooleanCommand("DRIVER SETBAND " + band);
!!!9735564.java!!!	setBluetoothCoexistenceMode(in mode : int) : boolean
        return doBooleanCommand("DRIVER BTCOEXMODE " + mode);
!!!9735692.java!!!	setBluetoothCoexistenceScanMode(inout setCoexScanMode : boolean) : boolean
        if (setCoexScanMode) {
            return doBooleanCommand("DRIVER BTCOEXSCAN-START");
        } else {
            return doBooleanCommand("DRIVER BTCOEXSCAN-STOP");
        }
!!!9735820.java!!!	saveConfig() : boolean
        // Make sure we never write out a value for AP_SCAN other than 1
        return doBooleanCommand("AP_SCAN 1") && doBooleanCommand("SAVE_CONFIG");
!!!9735948.java!!!	setScanResultHandling(in mode : int) : boolean
        return doBooleanCommand("AP_SCAN " + mode);
!!!9736076.java!!!	addToBlacklist(in bssid : String) : boolean
        if (TextUtils.isEmpty(bssid)) return false;
        return doBooleanCommand("BLACKLIST " + bssid);
!!!9736204.java!!!	clearBlacklist() : boolean
        return doBooleanCommand("BLACKLIST clear");
!!!9736332.java!!!	setSuspendOptimizations(inout enabled : boolean) : boolean
        if (mSuspendOptEnabled == enabled) return true;
        mSuspendOptEnabled = enabled;
        if (enabled) {
            return doBooleanCommand("DRIVER SETSUSPENDMODE 1");
        } else {
            return doBooleanCommand("DRIVER SETSUSPENDMODE 0");
        }
!!!9736460.java!!!	setCountryCode(in countryCode : String) : boolean
        return doBooleanCommand("DRIVER COUNTRY " + countryCode);
!!!9736588.java!!!	enableBackgroundScan(inout enable : boolean) : void
        if (enable) {
            doBooleanCommand("SET pno 1");
        } else {
            doBooleanCommand("SET pno 0");
        }
!!!9736716.java!!!	setScanInterval(in scanInterval : int) : void
        doBooleanCommand("SCAN_INTERVAL " + scanInterval);
!!!9736844.java!!!	signalPoll() : String
        return doStringCommand("SIGNAL_POLL");
!!!9736972.java!!!	pktcntPoll() : String
        return doStringCommand("PKTCNT_POLL");
!!!9737100.java!!!	startWpsPbc(in bssid : String) : boolean
        if (TextUtils.isEmpty(bssid)) {
            return doBooleanCommand("WPS_PBC");
        } else {
            return doBooleanCommand("WPS_PBC " + bssid);
        }
!!!9737228.java!!!	startWpsPbc(in iface : String, in bssid : String) : boolean
        if (TextUtils.isEmpty(bssid)) {
            return doBooleanCommand("WPS_PBC interface=" + iface);
        } else {
            return doBooleanCommand("WPS_PBC interface=" + iface + " " + bssid);
        }
!!!9737356.java!!!	startWpsPinKeypad(in pin : String) : boolean
        if (TextUtils.isEmpty(pin)) return false;
        return doBooleanCommand("WPS_PIN any " + pin);
!!!9737484.java!!!	startWpsPinKeypad(in iface : String, in pin : String) : boolean
        if (TextUtils.isEmpty(pin)) return false;
        return doBooleanCommand("WPS_PIN interface=" + iface + " any " + pin);
!!!9737612.java!!!	startWpsPinDisplay(in bssid : String) : String
        if (TextUtils.isEmpty(bssid)) {
            return doStringCommand("WPS_PIN any");
        } else {
            return doStringCommand("WPS_PIN " + bssid);
        }
!!!9737740.java!!!	startWpsPinDisplay(in iface : String, in bssid : String) : String
        if (TextUtils.isEmpty(bssid)) {
            return doStringCommand("WPS_PIN interface=" + iface + " any");
        } else {
            return doStringCommand("WPS_PIN interface=" + iface + " " + bssid);
        }
!!!9737868.java!!!	startWpsRegistrar(in bssid : String, in pin : String) : boolean
        if (TextUtils.isEmpty(bssid) || TextUtils.isEmpty(pin)) return false;
        return doBooleanCommand("WPS_REG " + bssid + " " + pin);
!!!9737996.java!!!	cancelWps() : boolean
        return doBooleanCommand("WPS_CANCEL");
!!!9738124.java!!!	setPersistentReconnect(inout enabled : boolean) : boolean
        int value = (enabled == true) ? 1 : 0;
        return doBooleanCommand("SET persistent_reconnect " + value);
!!!9738252.java!!!	setDeviceName(in name : String) : boolean
        return doBooleanCommand("SET device_name " + name);
!!!9738380.java!!!	setDeviceType(in type : String) : boolean
        return doBooleanCommand("SET device_type " + type);
!!!9738508.java!!!	setConfigMethods(in cfg : String) : boolean
        return doBooleanCommand("SET config_methods " + cfg);
!!!9738636.java!!!	setManufacturer(in value : String) : boolean
        return doBooleanCommand("SET manufacturer " + value);
!!!9738764.java!!!	setModelName(in value : String) : boolean
        return doBooleanCommand("SET model_name " + value);
!!!9738892.java!!!	setModelNumber(in value : String) : boolean
        return doBooleanCommand("SET model_number " + value);
!!!9739020.java!!!	setSerialNumber(in value : String) : boolean
        return doBooleanCommand("SET serial_number " + value);
!!!9739148.java!!!	setP2pSsidPostfix(in postfix : String) : boolean
        return doBooleanCommand("SET p2p_ssid_postfix " + postfix);
!!!9739276.java!!!	setP2pGroupIdle(in iface : String, in time : int) : boolean
        return doBooleanCommand("SET interface=" + iface + " p2p_group_idle " + time);
!!!9739404.java!!!	setPowerSave(inout enabled : boolean) : void
        if (enabled) {
            doBooleanCommand("SET ps 1");
        } else {
            doBooleanCommand("SET ps 0");
        }
!!!9739532.java!!!	setP2pPowerSave(in iface : String, inout enabled : boolean) : boolean
        if (enabled) {
            return doBooleanCommand("P2P_SET interface=" + iface + " ps 1");
        } else {
            return doBooleanCommand("P2P_SET interface=" + iface + " ps 0");
        }
!!!9739660.java!!!	setWfdEnable(inout enable : boolean) : boolean
        return doBooleanCommand("SET wifi_display " + (enable ? "1" : "0"));
!!!9739788.java!!!	setWfdDeviceInfo(in hex : String) : boolean
        return doBooleanCommand("WFD_SUBELEM_SET 0 " + hex);
!!!9739916.java!!!	setConcurrencyPriority(in s : String) : boolean
        return doBooleanCommand("P2P_SET conc_pref " + s);
!!!9740044.java!!!	p2pFind() : boolean
        return doBooleanCommand("P2P_FIND");
!!!9740172.java!!!	p2pFind(in timeout : int) : boolean
        if (timeout <= 0) {
            return p2pFind();
        }
        return doBooleanCommand("P2P_FIND " + timeout);
!!!9740300.java!!!	p2pStopFind() : boolean
       return doBooleanCommand("P2P_STOP_FIND");
!!!9740428.java!!!	p2pListen() : boolean
        return doBooleanCommand("P2P_LISTEN");
!!!9740556.java!!!	p2pListen(in timeout : int) : boolean
        if (timeout <= 0) {
            return p2pListen();
        }
        return doBooleanCommand("P2P_LISTEN " + timeout);
!!!9740684.java!!!	p2pFlush() : boolean
        return doBooleanCommand("P2P_FLUSH");
!!!9740812.java!!!	p2pConnect(inout config : WifiP2pConfig, inout joinExistingGroup : boolean) : String
        if (config == null) return null;
        List<String> args = new ArrayList<String>();
        WpsInfo wps = config.wps;
        args.add(config.deviceAddress);

        switch (wps.setup) {
            case WpsInfo.PBC:
                args.add("pbc");
                break;
            case WpsInfo.DISPLAY:
                if (TextUtils.isEmpty(wps.pin)) {
                    args.add("pin");
                } else {
                    args.add(wps.pin);
                }
                args.add("display");
                break;
            case WpsInfo.KEYPAD:
                args.add(wps.pin);
                args.add("keypad");
                break;
            case WpsInfo.LABEL:
                args.add(wps.pin);
                args.add("label");
            default:
                break;
        }

        if (config.netId == WifiP2pGroup.PERSISTENT_NET_ID) {
            args.add("persistent");
        }

        if (joinExistingGroup) {
            args.add("join");
        } else {
            //TODO: This can be adapted based on device plugged in state and
            //device battery state
            int groupOwnerIntent = config.groupOwnerIntent;
            if (groupOwnerIntent < 0 || groupOwnerIntent > 15) {
                groupOwnerIntent = DEFAULT_GROUP_OWNER_INTENT;
            }
            args.add("go_intent=" + groupOwnerIntent);
        }

        String command = "P2P_CONNECT ";
        for (String s : args) command += s + " ";

        return doStringCommand(command);
!!!9740940.java!!!	p2pCancelConnect() : boolean
        return doBooleanCommand("P2P_CANCEL");
!!!9741068.java!!!	p2pProvisionDiscovery(inout config : WifiP2pConfig) : boolean
        if (config == null) return false;

        switch (config.wps.setup) {
            case WpsInfo.PBC:
                return doBooleanCommand("P2P_PROV_DISC " + config.deviceAddress + " pbc");
            case WpsInfo.DISPLAY:
                //We are doing display, so provision discovery is keypad
                return doBooleanCommand("P2P_PROV_DISC " + config.deviceAddress + " keypad");
            case WpsInfo.KEYPAD:
                //We are doing keypad, so provision discovery is display
                return doBooleanCommand("P2P_PROV_DISC " + config.deviceAddress + " display");
            default:
                break;
        }
        return false;
!!!9741196.java!!!	p2pGroupAdd(inout persistent : boolean) : boolean
        if (persistent) {
            return doBooleanCommand("P2P_GROUP_ADD persistent");
        }
        return doBooleanCommand("P2P_GROUP_ADD");
!!!9741324.java!!!	p2pGroupAdd(in netId : int) : boolean
        return doBooleanCommand("P2P_GROUP_ADD persistent=" + netId);
!!!9741452.java!!!	p2pGroupRemove(in iface : String) : boolean
        if (TextUtils.isEmpty(iface)) return false;
        return doBooleanCommand("P2P_GROUP_REMOVE " + iface);
!!!9741580.java!!!	p2pReject(in deviceAddress : String) : boolean
        return doBooleanCommand("P2P_REJECT " + deviceAddress);
!!!9741708.java!!!	p2pInvite(inout group : WifiP2pGroup, in deviceAddress : String) : boolean
        if (TextUtils.isEmpty(deviceAddress)) return false;

        if (group == null) {
            return doBooleanCommand("P2P_INVITE peer=" + deviceAddress);
        } else {
            return doBooleanCommand("P2P_INVITE group=" + group.getInterface()
                    + " peer=" + deviceAddress + " go_dev_addr=" + group.getOwner().deviceAddress);
        }
!!!9741836.java!!!	p2pReinvoke(in netId : int, in deviceAddress : String) : boolean
        if (TextUtils.isEmpty(deviceAddress) || netId < 0) return false;

        return doBooleanCommand("P2P_INVITE persistent=" + netId + " peer=" + deviceAddress);
!!!9741964.java!!!	p2pGetSsid(in deviceAddress : String) : String
        return p2pGetParam(deviceAddress, "oper_ssid");
!!!9742092.java!!!	p2pGetDeviceAddress() : String
        String status = status();
        if (status == null) return "";

        String[] tokens = status.split("\n");
        for (String token : tokens) {
            if (token.startsWith("p2p_device_address=")) {
                String[] nameValue = token.split("=");
                if (nameValue.length != 2) break;
                return nameValue[1];
            }
        }
        return "";
!!!9742220.java!!!	getGroupCapability(in deviceAddress : String) : int
        int gc = 0;
        if (TextUtils.isEmpty(deviceAddress)) return gc;
        String peerInfo = p2pPeer(deviceAddress);
        if (TextUtils.isEmpty(peerInfo)) return gc;

        String[] tokens = peerInfo.split("\n");
        for (String token : tokens) {
            if (token.startsWith("group_capab=")) {
                String[] nameValue = token.split("=");
                if (nameValue.length != 2) break;
                try {
                    return Integer.decode(nameValue[1]);
                } catch(NumberFormatException e) {
                    return gc;
                }
            }
        }
        return gc;
!!!9742348.java!!!	p2pPeer(in deviceAddress : String) : String
        return doStringCommand("P2P_PEER " + deviceAddress);
!!!9742476.java!!!	p2pGetParam(in deviceAddress : String, in key : String) : String
        if (deviceAddress == null) return null;

        String peerInfo = p2pPeer(deviceAddress);
        if (peerInfo == null) return null;
        String[] tokens= peerInfo.split("\n");

        key += "=";
        for (String token : tokens) {
            if (token.startsWith(key)) {
                String[] nameValue = token.split("=");
                if (nameValue.length != 2) break;
                return nameValue[1];
            }
        }
        return null;
!!!9742604.java!!!	p2pServiceAdd(inout servInfo : WifiP2pServiceInfo) : boolean
        /*
         * P2P_SERVICE_ADD bonjour <query hexdump> <RDATA hexdump>
         * P2P_SERVICE_ADD upnp <version hex> <service>
         *
         * e.g)
         * [Bonjour]
         * # IP Printing over TCP (PTR) (RDATA=MyPrinter._ipp._tcp.local.)
         * P2P_SERVICE_ADD bonjour 045f697070c00c000c01 094d795072696e746572c027
         * # IP Printing over TCP (TXT) (RDATA=txtvers=1,pdl=application/postscript)
         * P2P_SERVICE_ADD bonjour 096d797072696e746572045f697070c00c001001
         *  09747874766572733d311a70646c3d6170706c69636174696f6e2f706f7374736372797074
         *
         * [UPnP]
         * P2P_SERVICE_ADD upnp 10 uuid:6859dede-8574-59ab-9332-123456789012
         * P2P_SERVICE_ADD upnp 10 uuid:6859dede-8574-59ab-9332-123456789012::upnp:rootdevice
         * P2P_SERVICE_ADD upnp 10 uuid:6859dede-8574-59ab-9332-123456789012::urn:schemas-upnp
         * -org:device:InternetGatewayDevice:1
         * P2P_SERVICE_ADD upnp 10 uuid:6859dede-8574-59ab-9322-123456789012::urn:schemas-upnp
         * -org:service:ContentDirectory:2
         */
        for (String s : servInfo.getSupplicantQueryList()) {
            String command = "P2P_SERVICE_ADD";
            command += (" " + s);
            if (!doBooleanCommand(command)) {
                return false;
            }
        }
        return true;
!!!9742732.java!!!	p2pServiceDel(inout servInfo : WifiP2pServiceInfo) : boolean
        /*
         * P2P_SERVICE_DEL bonjour <query hexdump>
         * P2P_SERVICE_DEL upnp <version hex> <service>
         */
        for (String s : servInfo.getSupplicantQueryList()) {
            String command = "P2P_SERVICE_DEL ";

            String[] data = s.split(" ");
            if (data.length < 2) {
                return false;
            }
            if ("upnp".equals(data[0])) {
                command += s;
            } else if ("bonjour".equals(data[0])) {
                command += data[0];
                command += (" " + data[1]);
            } else {
                return false;
            }
            if (!doBooleanCommand(command)) {
                return false;
            }
        }
        return true;
!!!9742860.java!!!	p2pServiceFlush() : boolean
        return doBooleanCommand("P2P_SERVICE_FLUSH");
!!!9742988.java!!!	p2pServDiscReq(in addr : String, in query : String) : String
        String command = "P2P_SERV_DISC_REQ";
        command += (" " + addr);
        command += (" " + query);

        return doStringCommand(command);
!!!9743116.java!!!	p2pServDiscCancelReq(in id : String) : boolean
        return doBooleanCommand("P2P_SERV_DISC_CANCEL_REQ " + id);
