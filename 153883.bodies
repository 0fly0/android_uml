class Pattern
!!!1757723.java!!!	matcher(inout input : CharSequence) : Matcher
        return new Matcher(this, input);
!!!1757851.java!!!	split(inout input : CharSequence, in limit : int) : String
        return Splitter.split(this, pattern, input.toString(), limit);
!!!1757979.java!!!	split(inout input : CharSequence) : String
        return split(input, 0);
!!!1758107.java!!!	pattern() : String
        return pattern;
!!!1758235.java!!!	toString() : String
        return pattern;
!!!1758363.java!!!	flags() : int
        return flags;
!!!1758491.java!!!	compile(inout regularExpression : String, in flags : int) : Pattern
        return new Pattern(regularExpression, flags);
!!!1758619.java!!!	compile(inout pattern : String) : Pattern
        return new Pattern(pattern, 0);
!!!1758747.java!!!	Pattern(inout pattern : String, in flags : int)
        if ((flags & CANON_EQ) != 0) {
            throw new UnsupportedOperationException("CANON_EQ flag not supported");
        }
        this.pattern = pattern;
        this.flags = flags;
        compile();
!!!1758875.java!!!	compile() : void
        if (pattern == null) {
            throw new NullPointerException("pattern == null");
        }

        String icuPattern = pattern;
        if ((flags & LITERAL) != 0) {
            icuPattern = quote(pattern);
        }

        // These are the flags natively supported by ICU.
        // They even have the same value in native code.
        int icuFlags = flags & (CASE_INSENSITIVE | COMMENTS | MULTILINE | DOTALL | UNIX_LINES);

        address = compileImpl(icuPattern, icuFlags);
!!!1759003.java!!!	matches(inout regularExpression : String, inout input : CharSequence) : boolean
        return new Matcher(new Pattern(regularExpression, 0), input).matches();
!!!1759131.java!!!	quote(inout string : String) : String
        StringBuilder sb = new StringBuilder();
        sb.append("\\Q");
        int apos = 0;
        int k;
        while ((k = string.indexOf("\\E", apos)) >= 0) {
            sb.append(string.substring(apos, k + 2)).append("\\\\E\\Q");
            apos = k + 2;
        }
        return sb.append(string.substring(apos)).append("\\E").toString();
!!!1759259.java!!!	finalize() : void
        try {
            closeImpl(address);
        } finally {
            super.finalize();
        }
!!!1759387.java!!!	readObject(inout s : ObjectInputStream) : void
        s.defaultReadObject();
        compile();
