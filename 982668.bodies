class QuadF
!!!4923916.java!!!	QuadF()
        p1 = new PointF();
        p2 = new PointF();
        p3 = new PointF();
        p4 = new PointF();
!!!4924044.java!!!	offset(in dx : float, in dy : float) : void
        p1.offset(dx, dy);
        p2.offset(dx, dy);
        p3.offset(dx, dy);
        p4.offset(dx, dy);
!!!4924172.java!!!	containsPoint(in x : float, in y : float) : boolean
        return isPointInTriangle(x, y, p1, p2, p3) ||
                isPointInTriangle(x, y, p1, p3, p4);
!!!4924300.java!!!	toString() : String
        StringBuilder s = new StringBuilder("QuadF(");
        s.append(p1.x).append(",").append(p1.y);
        s.append(" - ");
        s.append(p2.x).append(",").append(p2.y);
        s.append(" - ");
        s.append(p3.x).append(",").append(p3.y);
        s.append(" - ");
        s.append(p4.x).append(",").append(p4.y);
        s.append(")");
        return s.toString();
!!!4924428.java!!!	isPointInTriangle(in x0 : float, in y0 : float, inout r1 : PointF, inout r2 : PointF, inout r3 : PointF) : boolean
        // Use the barycentric technique
        float x13 = r1.x - r3.x;
        float y13 = r1.y - r3.y;
        float x23 = r2.x - r3.x;
        float y23 = r2.y - r3.y;
        float x03 = x0 - r3.x;
        float y03 = y0 - r3.y;

        float determinant = (y23 * x13) - (x23 * y13);
        float lambda1 = ((y23 * x03) - (x23 * y03))/determinant;
        float lambda2 = ((x13 * y03) - (y13 * x03))/determinant;
        float lambda3 = 1 - lambda1 - lambda2;
        return lambda1 >= 0.0f && lambda2 >= 0.0f && lambda3 >= 0.0f;
