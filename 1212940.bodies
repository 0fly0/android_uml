class RemoteDisplay
!!!6850572.java!!!	RemoteDisplay(inout listener : Listener, inout handler : Handler)
        mListener = listener;
        mHandler = handler;
!!!6850700.java!!!	finalize() : void
        try {
            dispose(true);
        } finally {
            super.finalize();
        }
!!!6850828.java!!!	listen(in iface : String, inout listener : Listener, inout handler : Handler) : RemoteDisplay
        if (iface == null) {
            throw new IllegalArgumentException("iface must not be null");
        }
        if (listener == null) {
            throw new IllegalArgumentException("listener must not be null");
        }
        if (handler == null) {
            throw new IllegalArgumentException("handler must not be null");
        }

        RemoteDisplay display = new RemoteDisplay(listener, handler);
        display.startListening(iface);
        return display;
!!!6850956.java!!!	dispose() : void
        dispose(false);
!!!6851084.java!!!	dispose(inout finalized : boolean) : void
        if (mPtr != 0) {
            if (mGuard != null) {
                if (finalized) {
                    mGuard.warnIfOpen();
                } else {
                    mGuard.close();
                }
            }

            nativeDispose(mPtr);
            mPtr = 0;
        }
!!!6851212.java!!!	startListening(in iface : String) : void
        mPtr = nativeListen(iface);
        if (mPtr == 0) {
            throw new IllegalStateException("Could not start listening for "
                    + "remote display connection on \"" + iface + "\"");
        }
        mGuard.open("dispose");
!!!6851340.java!!!	notifyDisplayConnected(in surface : Surface, in width : int, in height : int, in flags : int) : void
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                mListener.onDisplayConnected(surface, width, height, flags);
            }
        });
!!!6851468.java!!!	notifyDisplayDisconnected() : void
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                mListener.onDisplayDisconnected();
            }
        });
!!!6851596.java!!!	notifyDisplayError(in error : int) : void
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                mListener.onDisplayError(error);
            }
        });
