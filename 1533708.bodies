class Paint_Delegate
!!!9433612.java!!!	getDelegate(in native_paint : int) : Paint_Delegate
        return sManager.getDelegate(native_paint);
!!!9433740.java!!!	getFonts() : FontInfo
        return mFonts;
!!!9433868.java!!!	isAntiAliased() : boolean
        return (mFlags & Paint.ANTI_ALIAS_FLAG) != 0;
!!!9433996.java!!!	isFilterBitmap() : boolean
        return (mFlags & Paint.FILTER_BITMAP_FLAG) != 0;
!!!9434124.java!!!	getStyle() : int
        return mStyle;
!!!9434252.java!!!	getColor() : int
        return mColor;
!!!9434380.java!!!	getAlpha() : int
        return mColor >>> 24;
!!!9434508.java!!!	setAlpha(in alpha : int) : void
        mColor = (alpha << 24) | (mColor & 0x00FFFFFF);
!!!9434636.java!!!	getTextAlign() : int
        return mTextAlign;
!!!9434764.java!!!	getStrokeWidth() : float
        return mStrokeWidth;
!!!9434892.java!!!	getJavaStrokeMiter() : float
        float miter = mStrokeMiter * mStrokeWidth;
        if (miter < 1.f) {
            miter = 1.f;
        }
        return miter;
!!!9435020.java!!!	getJavaCap() : int
        switch (Paint.sCapArray[mCap]) {
            case BUTT:
                return BasicStroke.CAP_BUTT;
            case ROUND:
                return BasicStroke.CAP_ROUND;
            default:
            case SQUARE:
                return BasicStroke.CAP_SQUARE;
        }
!!!9435148.java!!!	getJavaJoin() : int
        switch (Paint.sJoinArray[mJoin]) {
            default:
            case MITER:
                return BasicStroke.JOIN_MITER;
            case ROUND:
                return BasicStroke.JOIN_ROUND;
            case BEVEL:
                return BasicStroke.JOIN_BEVEL;
        }
!!!9435276.java!!!	getJavaStroke() : Stroke
        if (mPathEffect != null) {
            if (mPathEffect.isSupported()) {
                Stroke stroke = mPathEffect.getStroke(this);
                assert stroke != null;
                if (stroke != null) {
                    return stroke;
                }
            } else {
                Bridge.getLog().fidelityWarning(LayoutLog.TAG_PATHEFFECT,
                        mPathEffect.getSupportMessage(),
                        null, null /*data*/);
            }
        }

        // if no custom stroke as been set, set the default one.
        return new BasicStroke(
                    getStrokeWidth(),
                    getJavaCap(),
                    getJavaJoin(),
                    getJavaStrokeMiter());
!!!9435404.java!!!	getXfermode() : Xfermode_Delegate
        return mXfermode;
!!!9435532.java!!!	getColorFilter() : ColorFilter_Delegate
        return mColorFilter;
!!!9435660.java!!!	getShader() : Shader_Delegate
        return mShader;
!!!9435788.java!!!	getMaskFilter() : MaskFilter_Delegate
        return mMaskFilter;
!!!9435916.java!!!	getRasterizer() : Rasterizer_Delegate
        return mRasterizer;
!!!9436044.java!!!	getFlags(inout thisPaint : Paint) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 0;
        }

        return delegate.mFlags;
!!!9436172.java!!!	setFlags(inout thisPaint : Paint, in flags : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mFlags = flags;
!!!9436300.java!!!	setFilterBitmap(inout thisPaint : Paint, inout filter : boolean) : void
        setFlag(thisPaint, Paint.FILTER_BITMAP_FLAG, filter);
!!!9436428.java!!!	getHinting(inout thisPaint : Paint) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return Paint.HINTING_ON;
        }

        return delegate.mHintingMode;
!!!9436556.java!!!	setHinting(inout thisPaint : Paint, in mode : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mHintingMode = mode;
!!!9436684.java!!!	setAntiAlias(inout thisPaint : Paint, inout aa : boolean) : void
        setFlag(thisPaint, Paint.ANTI_ALIAS_FLAG, aa);
!!!9436812.java!!!	setSubpixelText(inout thisPaint : Paint, inout subpixelText : boolean) : void
        setFlag(thisPaint, Paint.SUBPIXEL_TEXT_FLAG, subpixelText);
!!!9436940.java!!!	setUnderlineText(inout thisPaint : Paint, inout underlineText : boolean) : void
        setFlag(thisPaint, Paint.UNDERLINE_TEXT_FLAG, underlineText);
!!!9437068.java!!!	setStrikeThruText(inout thisPaint : Paint, inout strikeThruText : boolean) : void
        setFlag(thisPaint, Paint.STRIKE_THRU_TEXT_FLAG, strikeThruText);
!!!9437196.java!!!	setFakeBoldText(inout thisPaint : Paint, inout fakeBoldText : boolean) : void
        setFlag(thisPaint, Paint.FAKE_BOLD_TEXT_FLAG, fakeBoldText);
!!!9437324.java!!!	setDither(inout thisPaint : Paint, inout dither : boolean) : void
        setFlag(thisPaint, Paint.DITHER_FLAG, dither);
!!!9437452.java!!!	setLinearText(inout thisPaint : Paint, inout linearText : boolean) : void
        setFlag(thisPaint, Paint.LINEAR_TEXT_FLAG, linearText);
!!!9437580.java!!!	getColor(inout thisPaint : Paint) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 0;
        }

        return delegate.mColor;
!!!9437708.java!!!	setColor(inout thisPaint : Paint, in color : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mColor = color;
!!!9437836.java!!!	getAlpha(inout thisPaint : Paint) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 0;
        }

        return delegate.getAlpha();
!!!9437964.java!!!	setAlpha(inout thisPaint : Paint, in a : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return;
        }

        delegate.setAlpha(a);
!!!9438092.java!!!	getStrokeWidth(inout thisPaint : Paint) : float
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 1.f;
        }

        return delegate.mStrokeWidth;
!!!9438220.java!!!	setStrokeWidth(inout thisPaint : Paint, in width : float) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mStrokeWidth = width;
!!!9438348.java!!!	getStrokeMiter(inout thisPaint : Paint) : float
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 1.f;
        }

        return delegate.mStrokeMiter;
!!!9438476.java!!!	setStrokeMiter(inout thisPaint : Paint, in miter : float) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mStrokeMiter = miter;
!!!9438604.java!!!	nSetShadowLayer(inout thisPaint : Paint, in radius : float, in dx : float, in dy : float, in color : int) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Paint.setShadowLayer is not supported.", null, null /*data*/);
!!!9438732.java!!!	getTextSize(inout thisPaint : Paint) : float
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 1.f;
        }

        return delegate.mTextSize;
!!!9438860.java!!!	setTextSize(inout thisPaint : Paint, in textSize : float) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mTextSize = textSize;
        delegate.updateFontObject();
!!!9438988.java!!!	getTextScaleX(inout thisPaint : Paint) : float
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 1.f;
        }

        return delegate.mTextScaleX;
!!!9439116.java!!!	setTextScaleX(inout thisPaint : Paint, in scaleX : float) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mTextScaleX = scaleX;
        delegate.updateFontObject();
!!!9439244.java!!!	getTextSkewX(inout thisPaint : Paint) : float
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 1.f;
        }

        return delegate.mTextSkewX;
!!!9439372.java!!!	setTextSkewX(inout thisPaint : Paint, in skewX : float) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return;
        }

        delegate.mTextSkewX = skewX;
        delegate.updateFontObject();
!!!9439500.java!!!	ascent(inout thisPaint : Paint) : float
        // get the delegate
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 0;
        }

        if (delegate.mFonts.size() > 0) {
            java.awt.FontMetrics javaMetrics = delegate.mFonts.get(0).mMetrics;
            // Android expects negative ascent so we invert the value from Java.
            return - javaMetrics.getAscent();
        }

        return 0;
!!!9439628.java!!!	descent(inout thisPaint : Paint) : float
        // get the delegate
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 0;
        }

        if (delegate.mFonts.size() > 0) {
            java.awt.FontMetrics javaMetrics = delegate.mFonts.get(0).mMetrics;
            return javaMetrics.getDescent();
        }

        return 0;

!!!9439756.java!!!	getFontMetrics(inout thisPaint : Paint, inout metrics : FontMetrics) : float
        // get the delegate
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 0;
        }

        return delegate.getFontMetrics(metrics);
!!!9439884.java!!!	getFontMetricsInt(inout thisPaint : Paint, inout fmi : FontMetricsInt) : int
        // get the delegate
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 0;
        }

        if (delegate.mFonts.size() > 0) {
            java.awt.FontMetrics javaMetrics = delegate.mFonts.get(0).mMetrics;
            if (fmi != null) {
                // Android expects negative ascent so we invert the value from Java.
                fmi.top = - javaMetrics.getMaxAscent();
                fmi.ascent = - javaMetrics.getAscent();
                fmi.descent = javaMetrics.getDescent();
                fmi.bottom = javaMetrics.getMaxDescent();
                fmi.leading = javaMetrics.getLeading();
            }

            return javaMetrics.getHeight();
        }

        return 0;
!!!9440012.java!!!	native_measureText(inout thisPaint : Paint, inout text : char, in index : int, in count : int) : float
        // get the delegate
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 0;
        }

        return delegate.measureText(text, index, count);
!!!9440140.java!!!	native_measureText(inout thisPaint : Paint, in text : String, in start : int, in end : int) : float
        return native_measureText(thisPaint, text.toCharArray(), start, end - start);
!!!9440268.java!!!	native_measureText(inout thisPaint : Paint, in text : String) : float
        return native_measureText(thisPaint, text.toCharArray(), 0, text.length());
!!!9440396.java!!!	native_breakText(inout thisPaint : Paint, inout text : char, in index : int, in count : int, in maxWidth : float, inout measuredWidth : float) : int

        // get the delegate
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return 0;
        }

        int inc = count > 0 ? 1 : -1;

        int measureIndex = 0;
        float measureAcc = 0;
        for (int i = index; i != index + count; i += inc, measureIndex++) {
            int start, end;
            if (i < index) {
                start = i;
                end = index;
            } else {
                start = index;
                end = i;
            }

            // measure from start to end
            float res = delegate.measureText(text, start, end - start + 1);

            if (measuredWidth != null) {
                measuredWidth[measureIndex] = res;
            }

            measureAcc += res;
            if (res > maxWidth) {
                // we should not return this char index, but since it's 0-based
                // and we need to return a count, we simply return measureIndex;
                return measureIndex;
            }

        }

        return measureIndex;
!!!9440524.java!!!	native_breakText(inout thisPaint : Paint, in text : String, inout measureForwards : boolean, in maxWidth : float, inout measuredWidth : float) : int
        return native_breakText(thisPaint, text.toCharArray(), 0, text.length(), maxWidth,
                measuredWidth);
!!!9440652.java!!!	native_init() : int
        Paint_Delegate newDelegate = new Paint_Delegate();
        return sManager.addNewDelegate(newDelegate);
!!!9440780.java!!!	native_initWithPaint(in paint : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(paint);
        if (delegate == null) {
            return 0;
        }

        Paint_Delegate newDelegate = new Paint_Delegate(delegate);
        return sManager.addNewDelegate(newDelegate);
!!!9440908.java!!!	native_reset(in native_object : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return;
        }

        delegate.reset();
!!!9441036.java!!!	native_set(in native_dst : int, in native_src : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate_dst = sManager.getDelegate(native_dst);
        if (delegate_dst == null) {
            return;
        }

        // get the delegate from the native int.
        Paint_Delegate delegate_src = sManager.getDelegate(native_src);
        if (delegate_src == null) {
            return;
        }

        delegate_dst.set(delegate_src);
!!!9441164.java!!!	native_getStyle(in native_object : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        return delegate.mStyle;
!!!9441292.java!!!	native_setStyle(in native_object : int, in style : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return;
        }

        delegate.mStyle = style;
!!!9441420.java!!!	native_getStrokeCap(in native_object : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        return delegate.mCap;
!!!9441548.java!!!	native_setStrokeCap(in native_object : int, in cap : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return;
        }

        delegate.mCap = cap;
!!!9441676.java!!!	native_getStrokeJoin(in native_object : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        return delegate.mJoin;
!!!9441804.java!!!	native_setStrokeJoin(in native_object : int, in join : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return;
        }

        delegate.mJoin = join;
!!!9441932.java!!!	native_getFillPath(in native_object : int, in src : int, in dst : int) : boolean
        Paint_Delegate paint = sManager.getDelegate(native_object);
        if (paint == null) {
            return false;
        }

        Path_Delegate srcPath = Path_Delegate.getDelegate(src);
        if (srcPath == null) {
            return true;
        }

        Path_Delegate dstPath = Path_Delegate.getDelegate(dst);
        if (dstPath == null) {
            return true;
        }

        Stroke stroke = paint.getJavaStroke();
        Shape strokeShape = stroke.createStrokedShape(srcPath.getJavaShape());

        dstPath.setJavaShape(strokeShape);

        // FIXME figure out the return value?
        return true;
!!!9442060.java!!!	native_setShader(in native_object : int, in shader : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return shader;
        }

        delegate.mShader = Shader_Delegate.getDelegate(shader);

        return shader;
!!!9442188.java!!!	native_setColorFilter(in native_object : int, in filter : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return filter;
        }

        delegate.mColorFilter = ColorFilter_Delegate.getDelegate(filter);;

        // since none of those are supported, display a fidelity warning right away
        if (delegate.mColorFilter != null && delegate.mColorFilter.isSupported() == false) {
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_COLORFILTER,
                    delegate.mColorFilter.getSupportMessage(), null, null /*data*/);
        }

        return filter;
!!!9442316.java!!!	native_setXfermode(in native_object : int, in xfermode : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return xfermode;
        }

        delegate.mXfermode = Xfermode_Delegate.getDelegate(xfermode);

        return xfermode;
!!!9442444.java!!!	native_setPathEffect(in native_object : int, in effect : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return effect;
        }

        delegate.mPathEffect = PathEffect_Delegate.getDelegate(effect);

        return effect;
!!!9442572.java!!!	native_setMaskFilter(in native_object : int, in maskfilter : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return maskfilter;
        }

        delegate.mMaskFilter = MaskFilter_Delegate.getDelegate(maskfilter);

        // since none of those are supported, display a fidelity warning right away
        if (delegate.mMaskFilter != null && delegate.mMaskFilter.isSupported() == false) {
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_MASKFILTER,
                    delegate.mMaskFilter.getSupportMessage(), null, null /*data*/);
        }

        return maskfilter;
!!!9442700.java!!!	native_setTypeface(in native_object : int, in typeface : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        delegate.mTypeface = Typeface_Delegate.getDelegate(typeface);
        delegate.updateFontObject();
        return typeface;
!!!9442828.java!!!	native_setRasterizer(in native_object : int, in rasterizer : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return rasterizer;
        }

        delegate.mRasterizer = Rasterizer_Delegate.getDelegate(rasterizer);

        // since none of those are supported, display a fidelity warning right away
        if (delegate.mRasterizer != null && delegate.mRasterizer.isSupported() == false) {
            Bridge.getLog().fidelityWarning(LayoutLog.TAG_RASTERIZER,
                    delegate.mRasterizer.getSupportMessage(), null, null /*data*/);
        }

        return rasterizer;
!!!9442956.java!!!	native_getTextAlign(in native_object : int) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        return delegate.mTextAlign;
!!!9443084.java!!!	native_setTextAlign(in native_object : int, in align : int) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return;
        }

        delegate.mTextAlign = align;
!!!9443212.java!!!	native_setTextLocale(in native_object : int, in locale : String) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return;
        }

        delegate.setTextLocale(locale);
!!!9443340.java!!!	native_getTextWidths(in native_object : int, inout text : char, in index : int, in count : int, inout widths : float) : int
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0;
        }

        if (delegate.mFonts.size() > 0) {
            // FIXME: handle multi-char characters (see measureText)
            float totalAdvance = 0;
            for (int i = 0; i < count; i++) {
                char c = text[i + index];
                boolean found = false;
                for (FontInfo info : delegate.mFonts) {
                    if (info.mFont.canDisplay(c)) {
                        float adv = info.mMetrics.charWidth(c);
                        totalAdvance += adv;
                        if (widths != null) {
                            widths[i] = adv;
                        }

                        found = true;
                        break;
                    }
                }

                if (found == false) {
                    // no advance for this char.
                    if (widths != null) {
                        widths[i] = 0.f;
                    }
                }
            }

            return (int) totalAdvance;
        }

        return 0;
!!!9443468.java!!!	native_getTextWidths(in native_object : int, in text : String, in start : int, in end : int, inout widths : float) : int
        return native_getTextWidths(native_object, text.toCharArray(), start, end - start, widths);
!!!9443596.java!!!	native_getTextGlyphs(in native_object : int, in text : String, in start : int, in end : int, in contextStart : int, in contextEnd : int, in flags : int, inout glyphs : char) : int
        // FIXME
        return 0;
!!!9443724.java!!!	native_getTextRunAdvances(in native_object : int, inout text : char, in index : int, in count : int, in contextIndex : int, in contextCount : int, in flags : int, inout advances : float, in advancesIndex : int, in reserved : int) : float
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(native_object);
        if (delegate == null) {
            return 0.f;
        }

        if (delegate.mFonts.size() > 0) {
            // FIXME: handle multi-char characters (see measureText)
            float totalAdvance = 0;
            for (int i = 0; i < count; i++) {
                char c = text[i + index];
                boolean found = false;
                for (FontInfo info : delegate.mFonts) {
                    if (info.mFont.canDisplay(c)) {
                        float adv = info.mMetrics.charWidth(c);
                        totalAdvance += adv;
                        if (advances != null) {
                            advances[i] = adv;
                        }

                        found = true;
                        break;
                    }
                }

                if (found == false) {
                    // no advance for this char.
                    if (advances != null) {
                        advances[i] = 0.f;
                    }
                }
            }

            return totalAdvance;
        }

        return 0;

!!!9443852.java!!!	native_getTextRunAdvances(in native_object : int, in text : String, in start : int, in end : int, in contextStart : int, in contextEnd : int, in flags : int, inout advances : float, in advancesIndex : int, in reserved : int) : float
        // FIXME: support contextStart, contextEnd and direction flag
        int count = end - start;
        char[] buffer = TemporaryBuffer.obtain(count);
        TextUtils.getChars(text, start, end, buffer, 0);

        return native_getTextRunAdvances(native_object, buffer, 0, count, contextStart,
                contextEnd - contextStart, flags, advances, advancesIndex, reserved);
!!!9443980.java!!!	native_getTextRunCursor(inout thisPaint : Paint, in native_object : int, inout text : char, in contextStart : int, in contextLength : int, in flags : int, in offset : int, in cursorOpt : int) : int
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Paint.getTextRunCursor is not supported.", null, null /*data*/);
        return 0;
!!!9444108.java!!!	native_getTextRunCursor(inout thisPaint : Paint, in native_object : int, in text : String, in contextStart : int, in contextEnd : int, in flags : int, in offset : int, in cursorOpt : int) : int
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Paint.getTextRunCursor is not supported.", null, null /*data*/);
        return 0;
!!!9444236.java!!!	native_getTextPath(in native_object : int, in bidiFlags : int, inout text : char, in index : int, in count : int, in x : float, in y : float, in path : int) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Paint.getTextPath is not supported.", null, null /*data*/);
!!!9444364.java!!!	native_getTextPath(in native_object : int, in bidiFlags : int, in text : String, in start : int, in end : int, in x : float, in y : float, in path : int) : void
        // FIXME
        Bridge.getLog().fidelityWarning(LayoutLog.TAG_UNSUPPORTED,
                "Paint.getTextPath is not supported.", null, null /*data*/);
!!!9444492.java!!!	nativeGetStringBounds(in nativePaint : int, in text : String, in start : int, in end : int, inout bounds : Rect) : void
        nativeGetCharArrayBounds(nativePaint, text.toCharArray(), start, end - start, bounds);
!!!9444620.java!!!	nativeGetCharArrayBounds(in nativePaint : int, inout text : char, in index : int, in count : int, inout bounds : Rect) : void

        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(nativePaint);
        if (delegate == null) {
            return;
        }

        // FIXME should test if the main font can display all those characters.
        // See MeasureText
        if (delegate.mFonts.size() > 0) {
            FontInfo mainInfo = delegate.mFonts.get(0);

            Rectangle2D rect = mainInfo.mFont.getStringBounds(text, index, index + count,
                    delegate.mFontContext);
            bounds.set(0, 0, (int) rect.getWidth(), (int) rect.getHeight());
        }
!!!9444748.java!!!	finalizer(in nativePaint : int) : void
        sManager.removeJavaReferenceFor(nativePaint);
!!!9444876.java!!!	Paint_Delegate()
        reset();
!!!9445004.java!!!	Paint_Delegate(inout paint : Paint_Delegate)
        set(paint);
!!!9445132.java!!!	set(inout paint : Paint_Delegate) : void
        mFlags = paint.mFlags;
        mColor = paint.mColor;
        mStyle = paint.mStyle;
        mCap = paint.mCap;
        mJoin = paint.mJoin;
        mTextAlign = paint.mTextAlign;
        mTypeface = paint.mTypeface;
        mStrokeWidth = paint.mStrokeWidth;
        mStrokeMiter = paint.mStrokeMiter;
        mTextSize = paint.mTextSize;
        mTextScaleX = paint.mTextScaleX;
        mTextSkewX = paint.mTextSkewX;
        mXfermode = paint.mXfermode;
        mColorFilter = paint.mColorFilter;
        mShader = paint.mShader;
        mPathEffect = paint.mPathEffect;
        mMaskFilter = paint.mMaskFilter;
        mRasterizer = paint.mRasterizer;
        mHintingMode = paint.mHintingMode;
        updateFontObject();
!!!9445260.java!!!	reset() : void
        mFlags = Paint.DEFAULT_PAINT_FLAGS;
        mColor = 0xFF000000;
        mStyle = Paint.Style.FILL.nativeInt;
        mCap = Paint.Cap.BUTT.nativeInt;
        mJoin = Paint.Join.MITER.nativeInt;
        mTextAlign = 0;
        mTypeface = Typeface_Delegate.getDelegate(Typeface.sDefaults[0].native_instance);
        mStrokeWidth = 1.f;
        mStrokeMiter = 4.f;
        mTextSize = 20.f;
        mTextScaleX = 1.f;
        mTextSkewX = 0.f;
        mXfermode = null;
        mColorFilter = null;
        mShader = null;
        mPathEffect = null;
        mMaskFilter = null;
        mRasterizer = null;
        updateFontObject();
        mHintingMode = Paint.HINTING_ON;
!!!9445388.java!!!	updateFontObject() : void
        if (mTypeface != null) {
            // Get the fonts from the TypeFace object.
            List<Font> fonts = mTypeface.getFonts();

            // create new font objects as well as FontMetrics, based on the current text size
            // and skew info.
            ArrayList<FontInfo> infoList = new ArrayList<FontInfo>(fonts.size());
            for (Font font : fonts) {
                FontInfo info = new FontInfo();
                info.mFont = font.deriveFont(mTextSize);
                if (mTextScaleX != 1.0 || mTextSkewX != 0) {
                    // TODO: support skew
                    info.mFont = info.mFont.deriveFont(new AffineTransform(
                            mTextScaleX, mTextSkewX, 0, 1, 0, 0));
                }
                info.mMetrics = Toolkit.getDefaultToolkit().getFontMetrics(info.mFont);

                infoList.add(info);
            }

            mFonts = Collections.unmodifiableList(infoList);
        }
!!!9445516.java!!!	measureText(inout text : char, in index : int, in count : int) : float

        // WARNING: the logic in this method is similar to Canvas_Delegate.native_drawText
        // Any change to this method should be reflected there as well

        if (mFonts.size() > 0) {
            FontInfo mainFont = mFonts.get(0);
            int i = index;
            int lastIndex = index + count;
            float total = 0f;
            while (i < lastIndex) {
                // always start with the main font.
                int upTo = mainFont.mFont.canDisplayUpTo(text, i, lastIndex);
                if (upTo == -1) {
                    // shortcut to exit
                    return total + mainFont.mMetrics.charsWidth(text, i, lastIndex - i);
                } else if (upTo > 0) {
                    total += mainFont.mMetrics.charsWidth(text, i, upTo - i);
                    i = upTo;
                    // don't call continue at this point. Since it is certain the main font
                    // cannot display the font a index upTo (now ==i), we move on to the
                    // fallback fonts directly.
                }

                // no char supported, attempt to read the next char(s) with the
                // fallback font. In this case we only test the first character
                // and then go back to test with the main font.
                // Special test for 2-char characters.
                boolean foundFont = false;
                for (int f = 1 ; f < mFonts.size() ; f++) {
                    FontInfo fontInfo = mFonts.get(f);

                    // need to check that the font can display the character. We test
                    // differently if the char is a high surrogate.
                    int charCount = Character.isHighSurrogate(text[i]) ? 2 : 1;
                    upTo = fontInfo.mFont.canDisplayUpTo(text, i, i + charCount);
                    if (upTo == -1) {
                        total += fontInfo.mMetrics.charsWidth(text, i, charCount);
                        i += charCount;
                        foundFont = true;
                        break;

                    }
                }

                // in case no font can display the char, measure it with the main font.
                if (foundFont == false) {
                    int size = Character.isHighSurrogate(text[i]) ? 2 : 1;
                    total += mainFont.mMetrics.charsWidth(text, i, size);
                    i += size;
                }
            }

            return total;
        }

        return 0;
!!!9445644.java!!!	getFontMetrics(inout metrics : FontMetrics) : float
        if (mFonts.size() > 0) {
            java.awt.FontMetrics javaMetrics = mFonts.get(0).mMetrics;
            if (metrics != null) {
                // Android expects negative ascent so we invert the value from Java.
                metrics.top = - javaMetrics.getMaxAscent();
                metrics.ascent = - javaMetrics.getAscent();
                metrics.descent = javaMetrics.getDescent();
                metrics.bottom = javaMetrics.getMaxDescent();
                metrics.leading = javaMetrics.getLeading();
            }

            return javaMetrics.getHeight();
        }

        return 0;
!!!9445772.java!!!	setTextLocale(in locale : String) : void
        mLocale = new Locale(locale);
!!!9445900.java!!!	setFlag(inout thisPaint : Paint, in flagMask : int, inout flagValue : boolean) : void
        // get the delegate from the native int.
        Paint_Delegate delegate = sManager.getDelegate(thisPaint.mNativePaint);
        if (delegate == null) {
            return;
        }

        if (flagValue) {
            delegate.mFlags |= flagMask;
        } else {
            delegate.mFlags &= ~flagMask;
        }
